{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3]) -> [3]", "(shiftl [6 3]) -> [3 6]", "(shiftl [8]) -> [8]", "(shiftl [4 5 9 5 5]) -> [5 9 5 5 4]", "(shiftl [3 9 8 2]) -> [9 8 2 3]", "(shiftl [1 8 7 8]) -> [8 7 8 1]"], "time": 2.408943}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8]) -> [8]", "(shiftl [4 2 2 5 2]) -> [2 2 5 2 4]", "(shiftl [8]) -> [8]", "(shiftl [5]) -> [5]", "(shiftl [3]) -> [3]", "(shiftl [0 8]) -> [8 0]"], "time": 2.490993}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 4 9 5]) -> [4 9 5 5]", "(shiftl [4 7]) -> [7 4]", "(shiftl [5]) -> [5]", "(shiftl [2 8 6]) -> [8 6 2]", "(shiftl [1]) -> [1]", "(shiftl [0 7]) -> [7 0]"], "time": 2.606147}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 4 3 2]) -> [4 3 2 2]", "(shiftl [9]) -> [9]", "(shiftl [2 8 8 7]) -> [8 8 7 2]", "(shiftl [1 0 5]) -> [0 5 1]", "(shiftl [5]) -> [5]", "(shiftl [2 2 9 8 7]) -> [2 9 8 7 2]"], "time": 2.607467}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 2 1 1 8]) -> [2 1 1 8 5]", "(shiftl [7 6 7 5]) -> [6 7 5 7]", "(shiftl [6 4 9]) -> [4 9 6]", "(shiftl [7 0 5 8]) -> [0 5 8 7]", "(shiftl [1]) -> [1]", "(shiftl [8 0]) -> [0 8]"], "time": 2.795424}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 6 9 3 3]) -> [6 9 3 3 1]", "(shiftl [0 6]) -> [6 0]", "(shiftl [0 3]) -> [3 0]", "(shiftl [1 2 0]) -> [2 0 1]", "(shiftl [5 4 3 8]) -> [4 3 8 5]", "(shiftl [2 6 3]) -> [6 3 2]"], "time": 3.301283}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 9 3 8]) -> [9 3 8 8]", "(shiftl [4 4 5 3]) -> [4 5 3 4]", "(shiftl [5 5 0 3 6]) -> [5 0 3 6 5]", "(shiftl [3 7 5 9 2]) -> [7 5 9 2 3]", "(shiftl [6 3 2]) -> [3 2 6]", "(shiftl [8 5 7]) -> [5 7 8]"], "time": 3.222562}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 6]) -> [6 7]", "(shiftl [9 0 2]) -> [0 2 9]", "(shiftl [8 2 2]) -> [2 2 8]", "(shiftl [0 0 6]) -> [0 6 0]", "(shiftl [1 7]) -> [7 1]", "(shiftl [4 5 7 5 4]) -> [5 7 5 4 4]"], "time": 3.094649}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1]) -> [1]", "(shiftl [1 8]) -> [8 1]", "(shiftl [6 2 4 8]) -> [2 4 8 6]", "(shiftl [6 0 8]) -> [0 8 6]", "(shiftl [2 1 5]) -> [1 5 2]", "(shiftl [4 4 0]) -> [4 0 4]"], "time": 3.344802}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [4]) -> [4]", "(shiftl [5 4 3 7 0]) -> [4 3 7 0 5]", "(shiftl [5 4 4 6 7]) -> [4 4 6 7 5]", "(shiftl [8 0 4]) -> [0 4 8]", "(shiftl [7]) -> [7]", "(shiftl [8 5]) -> [5 8]"], "time": 3.621004}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0]) -> [0]", "(shiftl [0 7 6 3]) -> [7 6 3 0]", "(shiftl [2 9]) -> [9 2]", "(shiftl [9 9 2 1 4]) -> [9 2 1 4 9]", "(shiftl [0 7 6 9]) -> [7 6 9 0]", "(shiftl [9]) -> [9]"], "time": 3.550085}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2]) -> [2]", "(shiftl [3 0]) -> [0 3]", "(shiftl [5 2 0 7]) -> [2 0 7 5]", "(shiftl [1 6 0 9 1]) -> [6 0 9 1 1]", "(shiftl [8 0 4 9 0]) -> [0 4 9 0 8]", "(shiftl [3 0]) -> [0 3]"], "time": 3.668166}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 6]) -> [6 8]", "(shiftl [3 5 1]) -> [5 1 3]", "(shiftl [3]) -> [3]", "(shiftl [5 4]) -> [4 5]", "(shiftl [5 4 3 4 1]) -> [4 3 4 1 5]", "(shiftl [6 9]) -> [9 6]"], "time": 3.566224}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 7]) -> [7 3]", "(shiftl [8 8]) -> [8 8]", "(shiftl [6]) -> [6]", "(shiftl [6 9 0 8]) -> [9 0 8 6]", "(shiftl [1 9 7]) -> [9 7 1]", "(shiftl [8 8 0 9 0]) -> [8 0 9 0 8]"], "time": 3.780395}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 3 3]) -> [3 3 8]", "(shiftl [0 9]) -> [9 0]", "(shiftl [4 9 2]) -> [9 2 4]", "(shiftl [0]) -> [0]", "(shiftl [1 0 7 8]) -> [0 7 8 1]", "(shiftl [3]) -> [3]"], "time": 4.273593}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6 9 3]) -> [9 3 6]", "(shiftl [6 2 5 1]) -> [2 5 1 6]", "(shiftl [5 6 2 0]) -> [6 2 0 5]", "(shiftl [0 3 9]) -> [3 9 0]", "(shiftl [8 4]) -> [4 8]", "(shiftl [9 8]) -> [8 9]"], "time": 4.354332}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 7 3]) -> [7 3 1]", "(shiftl [9 7]) -> [7 9]", "(shiftl [0]) -> [0]", "(shiftl [7 2 2 9 3]) -> [2 2 9 3 7]", "(shiftl [3]) -> [3]", "(shiftl [5 5]) -> [5 5]"], "time": 1.289889}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 3 0]) -> [3 0 8]", "(shiftl [1 2 9 1]) -> [2 9 1 1]", "(shiftl [7 4 6]) -> [4 6 7]", "(shiftl [3 6 3]) -> [6 3 3]", "(shiftl [5]) -> [5]", "(shiftl [2 2 1 6]) -> [2 1 6 2]"], "time": 2.652269}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [4 6 8 4]) -> [6 8 4 4]", "(shiftl [3 9 9 3 5]) -> [9 9 3 5 3]", "(shiftl [3 3]) -> [3 3]", "(shiftl [7 7 8 4]) -> [7 8 4 7]", "(shiftl [1 6 7 2]) -> [6 7 2 1]", "(shiftl [9]) -> [9]"], "time": 1.856311}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 6]) -> [6 2]", "(shiftl [0 5 2]) -> [5 2 0]", "(shiftl [5 3 7]) -> [3 7 5]", "(shiftl [3 0 5 7]) -> [0 5 7 3]", "(shiftl [9 0]) -> [0 9]", "(shiftl [7]) -> [7]"], "time": 2.552737}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6]) -> [6]", "(shiftl [9 8 6]) -> [8 6 9]", "(shiftl [4 1 8 5 1]) -> [1 8 5 1 4]", "(shiftl [8 8 8 5]) -> [8 8 5 8]", "(shiftl [9 3 7 5 2]) -> [3 7 5 2 9]", "(shiftl [5]) -> [5]"], "time": 1.575027}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [6 3]) -> [3 6]", "(shiftl [2 7 9]) -> [7 9 2]", "(shiftl [6 0 9]) -> [0 9 6]", "(shiftl [9]) -> [9]", "(shiftl [4 2 6]) -> [2 6 4]", "(shiftl [6 1]) -> [1 6]"], "time": 0.346011}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0 3 1]) -> [3 1 0]", "(shiftl [6 7 1 8]) -> [7 1 8 6]", "(shiftl [4 8 5 2 4]) -> [8 5 2 4 4]", "(shiftl [5]) -> [5]", "(shiftl [6 4 0 8 8]) -> [4 0 8 8 6]", "(shiftl [8 3]) -> [3 8]"], "time": 2.978253}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 2]) -> [2 5]", "(shiftl [2 7 6 2]) -> [7 6 2 2]", "(shiftl [3 9]) -> [9 3]", "(shiftl [2 1 4 4]) -> [1 4 4 2]", "(shiftl [6 4 6 1 8]) -> [4 6 1 8 6]", "(shiftl [3 5 6 6]) -> [5 6 6 3]"], "time": 3.134929}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 1 5 9 7]) -> [1 5 9 7 3]", "(shiftl [3 5 2]) -> [5 2 3]", "(shiftl [1 7 7 6]) -> [7 7 6 1]", "(shiftl [0 8 9]) -> [8 9 0]", "(shiftl [5 7 4 7 6]) -> [7 4 7 6 5]", "(shiftl [9]) -> [9]"], "time": 2.871735}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [7]) -> [7]", "(shiftl [4]) -> [4]", "(shiftl [0 9 8]) -> [9 8 0]", "(shiftl [4 3]) -> [3 4]", "(shiftl [9]) -> [9]", "(shiftl [7 7 2 2]) -> [7 2 2 7]"], "time": 0.530608}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 1]) -> [1 5]", "(shiftl [9 5]) -> [5 9]", "(shiftl [1 3 0 6]) -> [3 0 6 1]", "(shiftl [1 3]) -> [3 1]", "(shiftl [0 4 6 1]) -> [4 6 1 0]", "(shiftl [4]) -> [4]"], "time": 2.860299}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9]) -> [9]", "(shiftl [1 6 5 3]) -> [6 5 3 1]", "(shiftl [0 3 2]) -> [3 2 0]", "(shiftl [4 4 2 3]) -> [4 2 3 4]", "(shiftl [1 8 5 3]) -> [8 5 3 1]", "(shiftl [5 4 7 6]) -> [4 7 6 5]"], "time": 2.758428}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [9]) -> [9]", "(shiftl [0]) -> [0]", "(shiftl [3]) -> [3]", "(shiftl [8 3]) -> [3 8]", "(shiftl [7 7 6]) -> [7 6 7]", "(shiftl [1]) -> [1]"], "time": 0.408164}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7]) -> [7]", "(shiftl [8 2 0]) -> [2 0 8]", "(shiftl [4 7 0]) -> [7 0 4]", "(shiftl [7 5 9 7 1]) -> [5 9 7 1 7]", "(shiftl [3 4 6]) -> [4 6 3]", "(shiftl [0 2 7]) -> [2 7 0]"], "time": 2.760531}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2]) -> [2]", "(shiftl [9 9 5 8]) -> [9 5 8 9]", "(shiftl [6 5]) -> [5 6]", "(shiftl [0 5 5 6]) -> [5 5 6 0]", "(shiftl [9 2]) -> [2 9]", "(shiftl [1 3 5 0]) -> [3 5 0 1]"], "time": 2.837848}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 0]) -> [0 1]", "(shiftl [9 5 6 3]) -> [5 6 3 9]", "(shiftl [6]) -> [6]", "(shiftl [6 8]) -> [8 6]", "(shiftl [2 7 4 7 6]) -> [7 4 7 6 2]", "(shiftl [8 7]) -> [7 8]"], "time": 3.124092}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0 0]) -> [0 0]", "(shiftl [8 4 6 4 9]) -> [4 6 4 9 8]", "(shiftl [8]) -> [8]", "(shiftl [9 7 2 9 8]) -> [7 2 9 8 9]", "(shiftl [1 5 3 2]) -> [5 3 2 1]", "(shiftl [4 1 8]) -> [1 8 4]"], "time": 3.111475}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [5 3 2]) -> [3 2 5]", "(shiftl [6 3 7]) -> [3 7 6]", "(shiftl [6]) -> [6]", "(shiftl [0]) -> [0]", "(shiftl [9]) -> [9]", "(shiftl [6]) -> [6]"], "time": 0.509568}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 1]) -> [1 5]", "(shiftl [3 0 3 0 8]) -> [0 3 0 8 3]", "(shiftl [8 4 7 7]) -> [4 7 7 8]", "(shiftl [2 1 9 9]) -> [1 9 9 2]", "(shiftl [3 0 7 1]) -> [0 7 1 3]", "(shiftl [2 8 4]) -> [8 4 2]"], "time": 1.768536}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0]) -> [0]", "(shiftl [4]) -> [4]", "(shiftl [6 3 5 4 0]) -> [3 5 4 0 6]", "(shiftl [0 8 1 0]) -> [8 1 0 0]", "(shiftl [3 7]) -> [7 3]", "(shiftl [9 3 7 4 7]) -> [3 7 4 7 9]"], "time": 2.813284}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 5]) -> [5 2]", "(shiftl [7 4 8]) -> [4 8 7]", "(shiftl [5 9 8 9 9]) -> [9 8 9 9 5]", "(shiftl [5 2 0 9 3]) -> [2 0 9 3 5]", "(shiftl [7 5 4 2]) -> [5 4 2 7]", "(shiftl [5 5]) -> [5 5]"], "time": 1.923328}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 2 3 4 3]) -> [2 3 4 3 9]", "(shiftl [4 0 7 5]) -> [0 7 5 4]", "(shiftl [1 2]) -> [2 1]", "(shiftl [6 2 1 1 2]) -> [2 1 1 2 6]", "(shiftl [5 7 8]) -> [7 8 5]", "(shiftl [2]) -> [2]"], "time": 3.13399}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 6 1 7]) -> [6 1 7 7]", "(shiftl [9 4]) -> [4 9]", "(shiftl [1]) -> [1]", "(shiftl [7 8 6]) -> [8 6 7]", "(shiftl [4 7]) -> [7 4]", "(shiftl [4]) -> [4]"], "time": 2.201988}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 5 0]) -> [5 0 8]", "(shiftl [2 3]) -> [3 2]", "(shiftl [3 2]) -> [2 3]", "(shiftl [8 1]) -> [1 8]", "(shiftl [6 0 4 2]) -> [0 4 2 6]", "(shiftl [3 3 9]) -> [3 9 3]"], "time": 1.952726}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 9 7]) -> [9 7 9]", "(shiftl [8 9 4 7 4]) -> [9 4 7 4 8]", "(shiftl [6 2 8 4]) -> [2 8 4 6]", "(shiftl [9]) -> [9]", "(shiftl [7 9 5 7]) -> [9 5 7 7]", "(shiftl [3 9 0 1 6]) -> [9 0 1 6 3]"], "time": 2.314001}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 4]) -> [4 2]", "(shiftl [0 3 6 7 3]) -> [3 6 7 3 0]", "(shiftl [5 2 1 5 5]) -> [2 1 5 5 5]", "(shiftl [6 5 1 8 1]) -> [5 1 8 1 6]", "(shiftl [5]) -> [5]", "(shiftl [4 5]) -> [5 4]"], "time": 2.392984}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6 8]) -> [8 6]", "(shiftl [7 9 9 2 4]) -> [9 9 2 4 7]", "(shiftl [8 7 2]) -> [7 2 8]", "(shiftl [4]) -> [4]", "(shiftl [8 0 5]) -> [0 5 8]", "(shiftl [1]) -> [1]"], "time": 2.136614}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 6 3 7 3]) -> [6 3 7 3 2]", "(shiftl [5 4 6 0]) -> [4 6 0 5]", "(shiftl [5 0 1]) -> [0 1 5]", "(shiftl [8 0]) -> [0 8]", "(shiftl [2 2 7 4 9]) -> [2 7 4 9 2]", "(shiftl [1 7 8 6]) -> [7 8 6 1]"], "time": 1.915221}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6 0]) -> [0 6]", "(shiftl [9 9]) -> [9 9]", "(shiftl [6 5 5 2 2]) -> [5 5 2 2 6]", "(shiftl [2 5 9 5]) -> [5 9 5 2]", "(shiftl [1 8]) -> [8 1]", "(shiftl [3 3]) -> [3 3]"], "time": 1.772862}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 2]) -> [2 3]", "(shiftl [7 8 6]) -> [8 6 7]", "(shiftl [3 1 7 8]) -> [1 7 8 3]", "(shiftl [2 8 2 6 5]) -> [8 2 6 5 2]", "(shiftl [5 4 1 2 5]) -> [4 1 2 5 5]", "(shiftl [8 9 5]) -> [9 5 8]"], "time": 2.264053}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0 0 3]) -> [0 3 0]", "(shiftl [8]) -> [8]", "(shiftl [8 5 5 8]) -> [5 5 8 8]", "(shiftl [9 9 2 2]) -> [9 2 2 9]", "(shiftl [6 1]) -> [1 6]", "(shiftl [1 8]) -> [8 1]"], "time": 1.999338}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 5 8]) -> [5 8 1]", "(shiftl [6 5 2 4]) -> [5 2 4 6]", "(shiftl [9 6 7]) -> [6 7 9]", "(shiftl [6 5]) -> [5 6]", "(shiftl [6]) -> [6]", "(shiftl [7 1]) -> [1 7]"], "time": 2.145103}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [4 1 7 3 7]) -> [1 7 3 7 4]", "(shiftl [7 7 5 6 6]) -> [7 5 6 6 7]", "(shiftl [0 2 4 5]) -> [2 4 5 0]", "(shiftl [2 0 5 2]) -> [0 5 2 2]", "(shiftl [6 6 5 1 6]) -> [6 5 1 6 6]", "(shiftl [7 8 0]) -> [8 0 7]"], "time": 2.902619}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 2 6 5 9]) -> [2 6 5 9 1]", "(shiftl [4]) -> [4]", "(shiftl [6 7 1 5 3]) -> [7 1 5 3 6]", "(shiftl [9 6 8 0]) -> [6 8 0 9]", "(shiftl [1 7 1]) -> [7 1 1]", "(shiftl [3 5 8 0 3]) -> [5 8 0 3 3]"], "time": 2.320088}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 5 8]) -> [5 8 1]", "(shiftl [7 9]) -> [9 7]", "(shiftl [6 4 3 4]) -> [4 3 4 6]", "(shiftl [5 5 2 2 7]) -> [5 2 2 7 5]", "(shiftl [3 4 6 7]) -> [4 6 7 3]", "(shiftl [0 7 1 5]) -> [7 1 5 0]"], "time": 1.871074}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6 8 6 3 6]) -> [8 6 3 6 6]", "(shiftl [8 6 8 5]) -> [6 8 5 8]", "(shiftl [7 4]) -> [4 7]", "(shiftl [7 7 0]) -> [7 0 7]", "(shiftl [0 5]) -> [5 0]", "(shiftl [1 3]) -> [3 1]"], "time": 2.448872}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 5 6]) -> [5 6 3]", "(shiftl [3 8]) -> [8 3]", "(shiftl [9]) -> [9]", "(shiftl [5 0 7]) -> [0 7 5]", "(shiftl [4 9 3 6 1]) -> [9 3 6 1 4]", "(shiftl [4 6]) -> [6 4]"], "time": 2.011702}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 0 1 2]) -> [0 1 2 1]", "(shiftl [5 0 9 9]) -> [0 9 9 5]", "(shiftl [7 2 1 9]) -> [2 1 9 7]", "(shiftl [1 8 9]) -> [8 9 1]", "(shiftl [2 1 6]) -> [1 6 2]", "(shiftl [2 5 3]) -> [5 3 2]"], "time": 2.610763}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 3]) -> [3 7]", "(shiftl [5 3 4 7 8]) -> [3 4 7 8 5]", "(shiftl [0 9 2 0 2]) -> [9 2 0 2 0]", "(shiftl [9 4 9 9 7]) -> [4 9 9 7 9]", "(shiftl [4 5 1 3]) -> [5 1 3 4]", "(shiftl [1 7]) -> [7 1]"], "time": 1.522122}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 0 0 6 6]) -> [0 0 6 6 9]", "(shiftl [2]) -> [2]", "(shiftl [6]) -> [6]", "(shiftl [9 2 7 6 3]) -> [2 7 6 3 9]", "(shiftl [8 2 6]) -> [2 6 8]", "(shiftl [3 0 8]) -> [0 8 3]"], "time": 2.294538}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8]) -> [8]", "(shiftl [6 6 2 4]) -> [6 2 4 6]", "(shiftl [0 6 2 8 4]) -> [6 2 8 4 0]", "(shiftl [1 0 6 8 2]) -> [0 6 8 2 1]", "(shiftl [9 0]) -> [0 9]", "(shiftl [7 7 2]) -> [7 2 7]"], "time": 2.407101}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [4 3]) -> [3 4]", "(shiftl [6 5 2]) -> [5 2 6]", "(shiftl [7 5]) -> [5 7]", "(shiftl [5 7 5 7]) -> [7 5 7 5]", "(shiftl [3 3 2 5 9]) -> [3 2 5 9 3]", "(shiftl [4 8 4 6]) -> [8 4 6 4]"], "time": 2.641144}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3]) -> [3]", "(shiftl [8 5 2 7 2]) -> [5 2 7 2 8]", "(shiftl [7 2 8 7]) -> [2 8 7 7]", "(shiftl [1 3]) -> [3 1]", "(shiftl [6 7 3]) -> [7 3 6]", "(shiftl [0 8 7 2]) -> [8 7 2 0]"], "time": 2.750844}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 2 8 6 3]) -> [2 8 6 3 5]", "(shiftl [1 3 7 2 4]) -> [3 7 2 4 1]", "(shiftl [9 5 0 5]) -> [5 0 5 9]", "(shiftl [9 6 6]) -> [6 6 9]", "(shiftl [6]) -> [6]", "(shiftl [4]) -> [4]"], "time": 2.963597}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 8 5]) -> [8 5 2]", "(shiftl [0 7 3 7]) -> [7 3 7 0]", "(shiftl [2 3 5 4]) -> [3 5 4 2]", "(shiftl [3 9 6 7 4]) -> [9 6 7 4 3]", "(shiftl [2 9 9]) -> [9 9 2]", "(shiftl [1]) -> [1]"], "time": 1.69508}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 4 0]) -> [4 0 7]", "(shiftl [3 9 2 8 1]) -> [9 2 8 1 3]", "(shiftl [3]) -> [3]", "(shiftl [4 4]) -> [4 4]", "(shiftl [9 0 8 0 0]) -> [0 8 0 0 9]", "(shiftl [6 6]) -> [6 6]"], "time": 3.004404}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 5 3]) -> [5 3 8]", "(shiftl [3 5]) -> [5 3]", "(shiftl [3 8 4 9 2]) -> [8 4 9 2 3]", "(shiftl [8 7]) -> [7 8]", "(shiftl [4 5 1 4]) -> [5 1 4 4]", "(shiftl [7 3 3 8]) -> [3 3 8 7]"], "time": 2.742813}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0 8 0]) -> [8 0 0]", "(shiftl [5 2 7 4]) -> [2 7 4 5]", "(shiftl [7 6 9 5]) -> [6 9 5 7]", "(shiftl [4 4 7 9]) -> [4 7 9 4]", "(shiftl [7 6 8]) -> [6 8 7]", "(shiftl [5 4 8 1]) -> [4 8 1 5]"], "time": 1.763927}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 7 0 1]) -> [7 0 1 2]", "(shiftl [1 7]) -> [7 1]", "(shiftl [9 0]) -> [0 9]", "(shiftl [9]) -> [9]", "(shiftl [5 7 6]) -> [7 6 5]", "(shiftl [2 9 6 8 4]) -> [9 6 8 4 2]"], "time": 2.994912}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 8 7 3]) -> [8 7 3 8]", "(shiftl [7 7 3 4 8]) -> [7 3 4 8 7]", "(shiftl [9 7 7 1 1]) -> [7 7 1 1 9]", "(shiftl [4]) -> [4]", "(shiftl [6 8 4]) -> [8 4 6]", "(shiftl [1 3 1 7]) -> [3 1 7 1]"], "time": 1.857422}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 1 4 1 0]) -> [1 4 1 0 1]", "(shiftl [8 6 1 5 4]) -> [6 1 5 4 8]", "(shiftl [9 1 1 4]) -> [1 1 4 9]", "(shiftl [6 9 5 1 2]) -> [9 5 1 2 6]", "(shiftl [9]) -> [9]", "(shiftl [4]) -> [4]"], "time": 1.833072}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 7 7]) -> [7 7 7]", "(shiftl [3 6 6 3 5]) -> [6 6 3 5 3]", "(shiftl [2 0]) -> [0 2]", "(shiftl [0 8 9 7 1]) -> [8 9 7 1 0]", "(shiftl [0 8 9]) -> [8 9 0]", "(shiftl [4]) -> [4]"], "time": 2.627152}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 9 3 9 2]) -> [9 3 9 2 7]", "(shiftl [2 9 2 5 7]) -> [9 2 5 7 2]", "(shiftl [2 8 6 9 5]) -> [8 6 9 5 2]", "(shiftl [0 5]) -> [5 0]", "(shiftl [4 9 9]) -> [9 9 4]", "(shiftl [0 5 8 2 2]) -> [5 8 2 2 0]"], "time": 2.70628}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [2 7]) -> [7 2]", "(shiftl [1 0 9]) -> [0 9 1]", "(shiftl [2]) -> [2]", "(shiftl [5 3 3]) -> [3 3 5]", "(shiftl [2]) -> [2]", "(shiftl [9 4 4]) -> [4 4 9]"], "time": 0.335455}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 9]) -> [9 9]", "(shiftl [7]) -> [7]", "(shiftl [1 6 8 0]) -> [6 8 0 1]", "(shiftl [8 8 1 8 5]) -> [8 1 8 5 8]", "(shiftl [8 0]) -> [0 8]", "(shiftl [0 5 9 2 8]) -> [5 9 2 8 0]"], "time": 1.960563}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0]) -> [0]", "(shiftl [2]) -> [2]", "(shiftl [5 9 7 3]) -> [9 7 3 5]", "(shiftl [9]) -> [9]", "(shiftl [9 5]) -> [5 9]", "(shiftl [2 4 3 4 4]) -> [4 3 4 4 2]"], "time": 2.778638}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 8 6 4 5]) -> [8 6 4 5 8]", "(shiftl [1 3 1]) -> [3 1 1]", "(shiftl [0 1 0 4 7]) -> [1 0 4 7 0]", "(shiftl [1 4 1 6 7]) -> [4 1 6 7 1]", "(shiftl [4]) -> [4]", "(shiftl [7]) -> [7]"], "time": 2.875668}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [4 5 7]) -> [5 7 4]", "(shiftl [9 1 7]) -> [1 7 9]", "(shiftl [2 0 9 2 4]) -> [0 9 2 4 2]", "(shiftl [3 3 0 4 2]) -> [3 0 4 2 3]", "(shiftl [5 3]) -> [3 5]", "(shiftl [8]) -> [8]"], "time": 1.374146}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 9 0 8 6]) -> [9 0 8 6 3]", "(shiftl [7 2]) -> [2 7]", "(shiftl [5 5 1]) -> [5 1 5]", "(shiftl [7 3 6 0]) -> [3 6 0 7]", "(shiftl [0]) -> [0]", "(shiftl [4 6]) -> [6 4]"], "time": 2.510225}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 3 1]) -> [3 1 1]", "(shiftl [6 2 6 2 9]) -> [2 6 2 9 6]", "(shiftl [4 6 3]) -> [6 3 4]", "(shiftl [4]) -> [4]", "(shiftl [0 6 9 4 6]) -> [6 9 4 6 0]", "(shiftl [9]) -> [9]"], "time": 1.447938}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3]) -> [3]", "(shiftl [8 2]) -> [2 8]", "(shiftl [9 7 4]) -> [7 4 9]", "(shiftl [7 2 3 6]) -> [2 3 6 7]", "(shiftl [5]) -> [5]", "(shiftl [5 9 8 2]) -> [9 8 2 5]"], "time": 2.525078}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0 7 0 1]) -> [7 0 1 0]", "(shiftl [0 5 3]) -> [5 3 0]", "(shiftl [8 8 6 3]) -> [8 6 3 8]", "(shiftl [4 0 1]) -> [0 1 4]", "(shiftl [1 1]) -> [1 1]", "(shiftl [6 3 0]) -> [3 0 6]"], "time": 1.621082}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (reverse b)) _) _)", "examples": ["(shiftl [2 3 3]) -> [3 3 2]", "(shiftl [3]) -> [3]", "(shiftl [0 0 4 0]) -> [0 4 0 0]", "(shiftl [4]) -> [4]", "(shiftl [7 0 0 0 0]) -> [0 0 0 0 7]", "(shiftl [0]) -> [0]"], "time": 0.001379}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0 5 1 9]) -> [5 1 9 0]", "(shiftl [9 3]) -> [3 9]", "(shiftl [4]) -> [4]", "(shiftl [8 0 0 4]) -> [0 0 4 8]", "(shiftl [4 9 7 1]) -> [9 7 1 4]", "(shiftl [4 2 3 0 8]) -> [2 3 0 8 4]"], "time": 2.472101}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 7 7]) -> [7 7 1]", "(shiftl [0 4 9]) -> [4 9 0]", "(shiftl [1 8]) -> [8 1]", "(shiftl [9]) -> [9]", "(shiftl [6 7 0 1]) -> [7 0 1 6]", "(shiftl [4]) -> [4]"], "time": 2.086635}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [9 0 0]) -> [0 0 9]", "(shiftl [4]) -> [4]", "(shiftl [4 3]) -> [3 4]", "(shiftl [9 5 0]) -> [5 0 9]", "(shiftl [0 2 3]) -> [2 3 0]", "(shiftl [4 1]) -> [1 4]"], "time": 0.584586}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1]) -> [1]", "(shiftl [6 7]) -> [7 6]", "(shiftl [2 6 6 5]) -> [6 6 5 2]", "(shiftl [5]) -> [5]", "(shiftl [8 8 5 4 5]) -> [8 5 4 5 8]", "(shiftl [8 6 7 8 8]) -> [6 7 8 8 8]"], "time": 2.462862}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 1 7]) -> [1 7 9]", "(shiftl [5 5 0 2]) -> [5 0 2 5]", "(shiftl [9 4 3 0 5]) -> [4 3 0 5 9]", "(shiftl [6 0 5 3 4]) -> [0 5 3 4 6]", "(shiftl [1 1 0 7]) -> [1 0 7 1]", "(shiftl [1 5 1 7]) -> [5 1 7 1]"], "time": 2.33612}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6 0 4 8 0]) -> [0 4 8 0 6]", "(shiftl [5 1 7 2]) -> [1 7 2 5]", "(shiftl [1 4]) -> [4 1]", "(shiftl [6 4]) -> [4 6]", "(shiftl [4]) -> [4]", "(shiftl [6 9]) -> [9 6]"], "time": 2.973663}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9]) -> [9]", "(shiftl [0 7]) -> [7 0]", "(shiftl [7]) -> [7]", "(shiftl [7 7]) -> [7 7]", "(shiftl [5]) -> [5]", "(shiftl [9 9 6 4 6]) -> [9 6 4 6 9]"], "time": 2.299795}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 4]) -> [4 1]", "(shiftl [5 1 8]) -> [1 8 5]", "(shiftl [8 1 2]) -> [1 2 8]", "(shiftl [6 6 4 7 3]) -> [6 4 7 3 6]", "(shiftl [2 4 9 5 5]) -> [4 9 5 5 2]", "(shiftl [2 6 9 1 1]) -> [6 9 1 1 2]"], "time": 2.172496}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 3]) -> [3 2]", "(shiftl [2 0 8 0]) -> [0 8 0 2]", "(shiftl [9 0]) -> [0 9]", "(shiftl [9 7 1]) -> [7 1 9]", "(shiftl [5 0 7]) -> [0 7 5]", "(shiftl [3]) -> [3]"], "time": 2.703071}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 9 8 2 9]) -> [9 8 2 9 8]", "(shiftl [2 9 2 8]) -> [9 2 8 2]", "(shiftl [1 3 1 3 3]) -> [3 1 3 3 1]", "(shiftl [9 1 3 8 3]) -> [1 3 8 3 9]", "(shiftl [7 1]) -> [1 7]", "(shiftl [8]) -> [8]"], "time": 2.184172}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [4 4 4]) -> [4 4 4]", "(shiftl [2 9 7 7]) -> [9 7 7 2]", "(shiftl [9]) -> [9]", "(shiftl [6 3 8]) -> [3 8 6]", "(shiftl [3]) -> [3]", "(shiftl [3 2 3]) -> [2 3 3]"], "time": 0.471427}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 7 7 1 4]) -> [7 7 1 4 5]", "(shiftl [9 8]) -> [8 9]", "(shiftl [1 5]) -> [5 1]", "(shiftl [0 1 5 6 7]) -> [1 5 6 7 0]", "(shiftl [1 4 8]) -> [4 8 1]", "(shiftl [8 1 8]) -> [1 8 8]"], "time": 2.091003}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 4 8]) -> [4 8 7]", "(shiftl [0 1 6 2]) -> [1 6 2 0]", "(shiftl [6 1 1 4]) -> [1 1 4 6]", "(shiftl [4 7]) -> [7 4]", "(shiftl [0 7 8 9 8]) -> [7 8 9 8 0]", "(shiftl [7]) -> [7]"], "time": 2.024796}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 4]) -> [4 7]", "(shiftl [1 9 4 4]) -> [9 4 4 1]", "(shiftl [4 2]) -> [2 4]", "(shiftl [5 5 8]) -> [5 8 5]", "(shiftl [2 4 9 8]) -> [4 9 8 2]", "(shiftl [4 6 6 6 9]) -> [6 6 6 9 4]"], "time": 1.8509}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7]) -> [7]", "(shiftl [5 7]) -> [7 5]", "(shiftl [2 1 1 5]) -> [1 1 5 2]", "(shiftl [3 7 8 4]) -> [7 8 4 3]", "(shiftl [3 6 9 9 8]) -> [6 9 9 8 3]", "(shiftl [6 8]) -> [8 6]"], "time": 1.742028}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6]) -> [6]", "(shiftl [4]) -> [4]", "(shiftl [3]) -> [3]", "(shiftl [0 5 8]) -> [5 8 0]", "(shiftl [9 4 7 0]) -> [4 7 0 9]", "(shiftl [2 6 5 6]) -> [6 5 6 2]"], "time": 1.224417}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [4 4 9]) -> [4 9 4]", "(shiftl [3 4 9]) -> [4 9 3]", "(shiftl [6 4 3]) -> [4 3 6]", "(shiftl [1 2 7 3]) -> [2 7 3 1]", "(shiftl [1]) -> [1]", "(shiftl [9 8 7]) -> [8 7 9]"], "time": 1.508556}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 0]) -> [0 1]", "(shiftl [4 4]) -> [4 4]", "(shiftl [2 2 9 8]) -> [2 9 8 2]", "(shiftl [5 6 2]) -> [6 2 5]", "(shiftl [0 1 0 6]) -> [1 0 6 0]", "(shiftl [8]) -> [8]"], "time": 0.984808}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 3 5 9 9]) -> [3 5 9 9 8]", "(shiftl [4 8]) -> [8 4]", "(shiftl [7 8 5 8 0]) -> [8 5 8 0 7]", "(shiftl [8]) -> [8]", "(shiftl [2 6 2 8 6]) -> [6 2 8 6 2]", "(shiftl [9]) -> [9]"], "time": 1.064726}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1]) -> [1]", "(shiftl [4 1 5]) -> [1 5 4]", "(shiftl [7 8 2]) -> [8 2 7]", "(shiftl [0 9]) -> [9 0]", "(shiftl [7 2 5 3]) -> [2 5 3 7]", "(shiftl [3 9]) -> [9 3]"], "time": 1.081956}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 1 5 1 2]) -> [1 5 1 2 5]", "(shiftl [7 9 2 4]) -> [9 2 4 7]", "(shiftl [9 9 1 5 9]) -> [9 1 5 9 9]", "(shiftl [8 1 5 1 8]) -> [1 5 1 8 8]", "(shiftl [8 9 3 0]) -> [9 3 0 8]", "(shiftl [4 0 7 6 5]) -> [0 7 6 5 4]"], "time": 1.106007}
