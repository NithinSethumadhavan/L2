{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (foldl b (lambda (e d) (~ e)) (= c (car b)))))) _) _)", "time": 14.190506, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens []) -> []", "(evens [5]) -> []", "(evens [3 3 4]) -> [4]", "(evens [8 3]) -> [8]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 25.371318, "examples": ["(evens []) -> []", "(evens [1 8 1]) -> [8]", "(evens [7 5 4 1]) -> [4]", "(evens [0 2 2]) -> [0 2 2]", "(evens []) -> []", "(evens [8]) -> [8]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 27.422861, "examples": ["(evens []) -> []", "(evens [1]) -> []", "(evens [4 0 9 3 3]) -> [4 0]", "(evens [8 0]) -> [8 0]", "(evens [0 5 0]) -> [0 0]", "(evens [8 6 0 5 8]) -> [8 6 0 8]", "(evens [4 6]) -> [4 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 27.419862, "examples": ["(evens []) -> []", "(evens [4]) -> [4]", "(evens [1 1 8]) -> [8]", "(evens []) -> []", "(evens [6 9 4 6]) -> [6 4 6]", "(evens [9 2]) -> [2]", "(evens [3 4 8 9 4]) -> [4 8 4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 27.780709, "examples": ["(evens []) -> []", "(evens [0 2 7 6]) -> [0 2 6]", "(evens [2 3]) -> [2]", "(evens [0 6]) -> [0 6]", "(evens [9 2 1 9 4]) -> [2 4]", "(evens [1 4]) -> [4]", "(evens [6]) -> [6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 28.490758, "examples": ["(evens []) -> []", "(evens [1 2]) -> [2]", "(evens []) -> []", "(evens [9 1 6 7 6]) -> [6 6]", "(evens [1 5 9]) -> []", "(evens [5]) -> []", "(evens [2 7 2]) -> [2 2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 29.945662, "examples": ["(evens []) -> []", "(evens [3]) -> []", "(evens [3 0 0 8]) -> [0 0 8]", "(evens [2 1 8]) -> [2 8]", "(evens [8 3 0 5]) -> [8 0]", "(evens []) -> []", "(evens [3 0]) -> [0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 30.623057, "examples": ["(evens []) -> []", "(evens [3 7]) -> []", "(evens [5 3 0 7]) -> [0]", "(evens [7 1]) -> []", "(evens [6]) -> [6]", "(evens [0 2 9 2 8]) -> [0 2 2 8]", "(evens [4 7 2 6 5]) -> [4 2 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 31.109781, "examples": ["(evens []) -> []", "(evens [6 0 9 7]) -> [6 0]", "(evens []) -> []", "(evens []) -> []", "(evens [3]) -> []", "(evens [7 1 7 2 2]) -> [2 2]", "(evens [9]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (car b))))) _) _)", "time": 0.13795, "examples": ["(evens []) -> []", "(evens [7 5 7]) -> []", "(evens []) -> []", "(evens []) -> []", "(evens [7 7 7]) -> []", "(evens [7]) -> []", "(evens [0 4 6]) -> [0 4 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 32.935591, "examples": ["(evens []) -> []", "(evens [2]) -> [2]", "(evens []) -> []", "(evens [4]) -> [4]", "(evens [6 8 1]) -> [6 8]", "(evens [6 2 9]) -> [6 2]", "(evens [8 4 7 4]) -> [8 4 4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 33.283019, "examples": ["(evens []) -> []", "(evens [7 6 3 1 5]) -> [6]", "(evens []) -> []", "(evens [9]) -> []", "(evens [2 0 3 7]) -> [2 0]", "(evens [7 6 0 3 5]) -> [6 0]", "(evens [2 4 8 2]) -> [2 4 8 2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 33.920036, "examples": ["(evens []) -> []", "(evens [2 1]) -> [2]", "(evens [5 9 9 8 8]) -> [8 8]", "(evens [0 0 2]) -> [0 0 2]", "(evens [5 1]) -> []", "(evens [7 3 0]) -> [0]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 34.765172, "examples": ["(evens []) -> []", "(evens [0 8 4 9]) -> [0 8 4]", "(evens [2 1 3 3 4]) -> [2 4]", "(evens []) -> []", "(evens [2 0 0 6]) -> [2 0 0 6]", "(evens [5 0]) -> [0]", "(evens [9 6 6 0 5]) -> [6 6 0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 37.307026, "examples": ["(evens []) -> []", "(evens [6 9 8 1 8]) -> [6 8 8]", "(evens [9 0 2 1]) -> [0 2]", "(evens [3 4]) -> [4]", "(evens []) -> []", "(evens []) -> []", "(evens [1 2 5]) -> [2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 38.248738, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [1 0 2]) -> [0 2]", "(evens [5 4 1 0]) -> [4 0]", "(evens [3 6 6 6 4]) -> [6 6 6 4]", "(evens [1 1 7]) -> []", "(evens [3 5 3 0 8]) -> [0 8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 38.710433, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [8 4 8 0]) -> [8 4 8 0]", "(evens [6 8 9 9 9]) -> [6 8]", "(evens [9 4 4]) -> [4 4]", "(evens [7 3]) -> []", "(evens [5 5 1]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 21.852579, "examples": ["(evens []) -> []", "(evens [8]) -> [8]", "(evens [1 9 7 5 9]) -> []", "(evens [2 8 2]) -> [2 8 2]", "(evens []) -> []", "(evens [8 6]) -> [8 6]", "(evens [0 5 9]) -> [0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 37.664175, "examples": ["(evens []) -> []", "(evens [5 8 5]) -> [8]", "(evens [2 6 8 8 9]) -> [2 6 8 8]", "(evens [2 6]) -> [2 6]", "(evens [5 8 7 7 1]) -> [8]", "(evens [9 1 2 9 5]) -> [2]", "(evens [1 4]) -> [4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 28.195273, "examples": ["(evens []) -> []", "(evens [0 6 7]) -> [0 6]", "(evens [4]) -> [4]", "(evens []) -> []", "(evens [6]) -> [6]", "(evens [6 4]) -> [6 4]", "(evens [8 2 3 5 8]) -> [8 2 8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 30.590959, "examples": ["(evens []) -> []", "(evens [7]) -> []", "(evens [8]) -> [8]", "(evens [5 3 5]) -> []", "(evens [7 3]) -> []", "(evens [7 6 8 8 1]) -> [6 8 8]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 33.287641, "examples": ["(evens []) -> []", "(evens [2 9 9 0]) -> [2 0]", "(evens [8 3 2 3 8]) -> [8 2 8]", "(evens [9 6 1 3]) -> [6]", "(evens [8 7]) -> [8]", "(evens [6]) -> [6]", "(evens [1 6 5 7 4]) -> [6 4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 26.944323, "examples": ["(evens []) -> []", "(evens [0 0 2]) -> [0 0 2]", "(evens [8 8 5]) -> [8 8]", "(evens [1 5 4]) -> [4]", "(evens []) -> []", "(evens [6 7]) -> [6]", "(evens [8 9 3 2 5]) -> [8 2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 28.476364, "examples": ["(evens []) -> []", "(evens [7 3]) -> []", "(evens [8 4 4]) -> [8 4 4]", "(evens []) -> []", "(evens [4 7 2 9 9]) -> [4 2]", "(evens []) -> []", "(evens [3]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 33.971793, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [7 5]) -> []", "(evens [0 7 1]) -> [0]", "(evens [2]) -> [2]", "(evens [4 6 6 4 1]) -> [4 6 6 4]", "(evens [7 3 1 1]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 24.752758, "examples": ["(evens []) -> []", "(evens [4 1]) -> [4]", "(evens [7 2 6 9]) -> [2 6]", "(evens [4 0 2]) -> [4 0 2]", "(evens [0 0]) -> [0 0]", "(evens [2 4 2]) -> [2 4 2]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 31.540216, "examples": ["(evens []) -> []", "(evens [8 9]) -> [8]", "(evens [7]) -> []", "(evens [0 4 8 3 7]) -> [0 4 8]", "(evens [2 5 8]) -> [2 8]", "(evens [3 6 2]) -> [6 2]", "(evens [0 3]) -> [0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 28.692092, "examples": ["(evens []) -> []", "(evens [3 2 3]) -> [2]", "(evens [1]) -> []", "(evens [1 3 9 5 2]) -> [2]", "(evens [8 7 1 5 1]) -> [8]", "(evens []) -> []", "(evens [8 2 3 1]) -> [8 2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 36.346946, "examples": ["(evens []) -> []", "(evens [0]) -> [0]", "(evens [3 3 3 4 7]) -> [4]", "(evens [4 8 0 9]) -> [4 8 0]", "(evens [8 1 7 2]) -> [8 2]", "(evens [3 8 1 1]) -> [8]", "(evens [7]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 33.388767, "examples": ["(evens []) -> []", "(evens [4]) -> [4]", "(evens []) -> []", "(evens [9]) -> []", "(evens [0]) -> [0]", "(evens [4 9]) -> [4]", "(evens [8 4 4 0]) -> [8 4 4 0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 36.307548, "examples": ["(evens []) -> []", "(evens [8 8 9 0]) -> [8 8 0]", "(evens []) -> []", "(evens []) -> []", "(evens [2 8 5 3]) -> [2 8]", "(evens [1]) -> []", "(evens [5 6 5]) -> [6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 30.54802, "examples": ["(evens []) -> []", "(evens [8 8]) -> [8 8]", "(evens [8 5 5 3 2]) -> [8 2]", "(evens [6]) -> [6]", "(evens [9 2 3 6]) -> [2 6]", "(evens [6 8 2]) -> [6 8 2]", "(evens [2 2 2 3 7]) -> [2 2 2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 43.310078, "examples": ["(evens []) -> []", "(evens [0 3 4 6]) -> [0 4 6]", "(evens [9 6 1 3]) -> [6]", "(evens [3 6 2 6]) -> [6 2 6]", "(evens [8 8]) -> [8 8]", "(evens [6 3]) -> [6]", "(evens [8 6 1 6 6]) -> [8 6 6 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 26.677505, "examples": ["(evens []) -> []", "(evens [8 3 5 2 1]) -> [8 2]", "(evens [0 0 9 8]) -> [0 0 8]", "(evens [7 9 5 1 2]) -> [2]", "(evens [8 5 3]) -> [8]", "(evens [0]) -> [0]", "(evens [3 8 3]) -> [8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 33.735615, "examples": ["(evens []) -> []", "(evens [4 6 5 7]) -> [4 6]", "(evens [6 8 2 7]) -> [6 8 2]", "(evens [2]) -> [2]", "(evens [8 2 4]) -> [8 2 4]", "(evens [3 7]) -> []", "(evens [4 1 5 1]) -> [4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 23.430502, "examples": ["(evens []) -> []", "(evens [5 8 6]) -> [8 6]", "(evens [1 0 8]) -> [0 8]", "(evens [7 5 4 0 6]) -> [4 0 6]", "(evens [1 4]) -> [4]", "(evens [6]) -> [6]", "(evens [6]) -> [6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 31.738319, "examples": ["(evens []) -> []", "(evens [4 2 3 3]) -> [4 2]", "(evens [4 7]) -> [4]", "(evens [6 5]) -> [6]", "(evens [6 9 9 1 8]) -> [6 8]", "(evens [1 5]) -> []", "(evens [4]) -> [4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 26.053272, "examples": ["(evens []) -> []", "(evens [6 5 1]) -> [6]", "(evens [5 5 7 0]) -> [0]", "(evens [0 4 5 8]) -> [0 4 8]", "(evens [3]) -> []", "(evens [6 5 3 7 7]) -> [6]", "(evens [7 6 3 6]) -> [6 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (foldl b (lambda (d c) (cdr b)) [])) _) _)", "time": 0.050209, "examples": ["(evens []) -> []", "(evens [9]) -> []", "(evens [3 4 0]) -> [4 0]", "(evens []) -> []", "(evens [7 6]) -> [6]", "(evens [5]) -> []", "(evens [5]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 28.237252, "examples": ["(evens []) -> []", "(evens [3 8]) -> [8]", "(evens [4 7 5]) -> [4]", "(evens []) -> []", "(evens []) -> []", "(evens [4 2 9 4 7]) -> [4 2 4]", "(evens [0 3]) -> [0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 31.281936, "examples": ["(evens []) -> []", "(evens [2 7 0 5 1]) -> [2 0]", "(evens [9 9]) -> []", "(evens [1]) -> []", "(evens [1 0 0 8 3]) -> [0 0 8]", "(evens [8 1]) -> [8]", "(evens [6]) -> [6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 32.072124, "examples": ["(evens []) -> []", "(evens [3]) -> []", "(evens [4 5 5 0 7]) -> [4 0]", "(evens [0 7 8]) -> [0 8]", "(evens [5 1 3 3]) -> []", "(evens [8 1 0]) -> [8 0]", "(evens [1 6 8 2 3]) -> [6 8 2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 28.556621, "examples": ["(evens []) -> []", "(evens [2]) -> [2]", "(evens [5]) -> []", "(evens [0]) -> [0]", "(evens [3]) -> []", "(evens [7]) -> []", "(evens [8]) -> [8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 30.178695, "examples": ["(evens []) -> []", "(evens [1 8]) -> [8]", "(evens [3 4 1 7 7]) -> [4]", "(evens []) -> []", "(evens [5 5]) -> []", "(evens [3 6 8 8]) -> [6 8 8]", "(evens [0 0 1 9 2]) -> [0 0 2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 23.140748, "examples": ["(evens []) -> []", "(evens [6]) -> [6]", "(evens []) -> []", "(evens [7]) -> []", "(evens [8 0 3]) -> [8 0]", "(evens [7 3]) -> []", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 39.000348, "examples": ["(evens []) -> []", "(evens [7 3 7 9 7]) -> []", "(evens []) -> []", "(evens [2 8 9 4]) -> [2 8 4]", "(evens [3]) -> []", "(evens [4 9 3 1]) -> [4]", "(evens [7]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 35.862542, "examples": ["(evens []) -> []", "(evens [7 2 9 9]) -> [2]", "(evens []) -> []", "(evens [4 3 0]) -> [4 0]", "(evens [9 3 8]) -> [8]", "(evens [5 6]) -> [6]", "(evens [7 5 8 0]) -> [8 0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 34.296657, "examples": ["(evens []) -> []", "(evens [7 7 4]) -> [4]", "(evens []) -> []", "(evens [2 1 3 4 0]) -> [2 4 0]", "(evens [1 4 9 9]) -> [4]", "(evens [3 8 2 3]) -> [8 2]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 33.167087, "examples": ["(evens []) -> []", "(evens [7 1]) -> []", "(evens [6 7 9]) -> [6]", "(evens [2 4 1]) -> [2 4]", "(evens [1 0]) -> [0]", "(evens []) -> []", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 29.203559, "examples": ["(evens []) -> []", "(evens [1 3 0 2]) -> [0 2]", "(evens [9 8 8 2]) -> [8 8 2]", "(evens [1]) -> []", "(evens [8 4 5 7 9]) -> [8 4]", "(evens [7 0 0 8 9]) -> [0 0 8]", "(evens [2 1 1 9]) -> [2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 35.880744, "examples": ["(evens []) -> []", "(evens [1 0 9 2 9]) -> [0 2]", "(evens []) -> []", "(evens [6]) -> [6]", "(evens [1]) -> []", "(evens []) -> []", "(evens [6 7]) -> [6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 24.16145, "examples": ["(evens []) -> []", "(evens [5]) -> []", "(evens [6]) -> [6]", "(evens [5 6 7 0 6]) -> [6 0 6]", "(evens [3]) -> []", "(evens [8]) -> [8]", "(evens [9 1 4 7]) -> [4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 25.581601, "examples": ["(evens []) -> []", "(evens [5 3]) -> []", "(evens [6]) -> [6]", "(evens [1 4 6]) -> [4 6]", "(evens [1]) -> []", "(evens [9 4]) -> [4]", "(evens [4 1 9 8]) -> [4 8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 28.640825, "examples": ["(evens []) -> []", "(evens [6 9 0 4]) -> [6 0 4]", "(evens [8 7 6 1 7]) -> [8 6]", "(evens [7 3 1]) -> []", "(evens [0 0 2 9]) -> [0 0 2]", "(evens [2 4 0 0]) -> [2 4 0 0]", "(evens [3]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 25.921238, "examples": ["(evens []) -> []", "(evens [0 3 2]) -> [0 2]", "(evens [3 7]) -> []", "(evens []) -> []", "(evens [8]) -> [8]", "(evens []) -> []", "(evens [9 0 6]) -> [0 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 29.570221, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [3 7 7]) -> []", "(evens [0 2]) -> [0 2]", "(evens [6 5 5]) -> [6]", "(evens []) -> []", "(evens [7]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (foldl b (lambda (d c) (filter b (lambda (e) (<= e (+ c c))))) [])) _) _)", "time": 5.952797, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [2 2 8]) -> [2 2 8]", "(evens []) -> []", "(evens [8 4 0 4]) -> [8 4 0 4]", "(evens []) -> []", "(evens [9 3 7 0 0]) -> [0 0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 26.827644, "examples": ["(evens []) -> []", "(evens [8 7 8]) -> [8 8]", "(evens [9 7 1 6 0]) -> [6 0]", "(evens [3]) -> []", "(evens [1 3 3]) -> []", "(evens [6 5 1 1 9]) -> [6]", "(evens [2 0 1]) -> [2 0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (car b)))))) _) _)", "time": 1.085415, "examples": ["(evens []) -> []", "(evens [8]) -> [8]", "(evens [2 4 3]) -> [2 4]", "(evens [4 8 0]) -> [4 8 0]", "(evens [4 1]) -> [4]", "(evens [4 3 7 5]) -> [4]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 28.716984, "examples": ["(evens []) -> []", "(evens [4 0]) -> [4 0]", "(evens []) -> []", "(evens [5 8 1 6]) -> [8 6]", "(evens [3 7 7]) -> []", "(evens [3 6]) -> [6]", "(evens [5 6 3]) -> [6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 23.996036, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [5]) -> []", "(evens [6 0]) -> [6 0]", "(evens [0 3 5 6 9]) -> [0 6]", "(evens [9 7 0 5 5]) -> [0]", "(evens [4]) -> [4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 29.712131, "examples": ["(evens []) -> []", "(evens [4 2]) -> [4 2]", "(evens [2 9 3]) -> [2]", "(evens []) -> []", "(evens []) -> []", "(evens [9]) -> []", "(evens [5 2]) -> [2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 31.325638, "examples": ["(evens []) -> []", "(evens [0]) -> [0]", "(evens [3]) -> []", "(evens [5 9 5 4 0]) -> [4 0]", "(evens [5 3 0 9]) -> [0]", "(evens []) -> []", "(evens [3 7]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 32.11144, "examples": ["(evens []) -> []", "(evens [4 5]) -> [4]", "(evens [6]) -> [6]", "(evens [6 6 5]) -> [6 6]", "(evens [7 1 6 2 0]) -> [6 2 0]", "(evens [2]) -> [2]", "(evens [2 4 1]) -> [2 4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 34.889048, "examples": ["(evens []) -> []", "(evens [3 3 1 1]) -> []", "(evens [4 8]) -> [4 8]", "(evens [7]) -> []", "(evens [7 2 5 3 9]) -> [2]", "(evens [9 3 8 4 0]) -> [8 4 0]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 32.631811, "examples": ["(evens []) -> []", "(evens [1 9 0]) -> [0]", "(evens [4 4 3 7 2]) -> [4 4 2]", "(evens [7 7 1 1]) -> []", "(evens [7]) -> []", "(evens [5]) -> []", "(evens [4 7 7 4 4]) -> [4 4 4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 34.055099, "examples": ["(evens []) -> []", "(evens [7 3]) -> []", "(evens [7]) -> []", "(evens [1 3 0 8]) -> [0 8]", "(evens [0]) -> [0]", "(evens [2 5 0 4 4]) -> [2 0 4 4]", "(evens [3 4 7 6 6]) -> [4 6 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 30.905128, "examples": ["(evens []) -> []", "(evens [9 5 8]) -> [8]", "(evens [4 7 4]) -> [4 4]", "(evens [5 9 3 5]) -> []", "(evens []) -> []", "(evens [1 6 0 9]) -> [6 0]", "(evens [9 3]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 34.210267, "examples": ["(evens []) -> []", "(evens [9 5 0 2]) -> [0 2]", "(evens [6 2 0]) -> [6 2 0]", "(evens [9 9 8]) -> [8]", "(evens [7]) -> []", "(evens [6 1 9 1]) -> [6]", "(evens [4]) -> [4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 30.601273, "examples": ["(evens []) -> []", "(evens [2]) -> [2]", "(evens [4 4 7 5 6]) -> [4 4 6]", "(evens [0 4 5 7]) -> [0 4]", "(evens [1 8]) -> [8]", "(evens [3 6]) -> [6]", "(evens [0]) -> [0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 29.308956, "examples": ["(evens []) -> []", "(evens [7 7 8]) -> [8]", "(evens [5 7 2 2]) -> [2 2]", "(evens []) -> []", "(evens [2 1 2 7]) -> [2 2]", "(evens [9]) -> []", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 26.944393, "examples": ["(evens []) -> []", "(evens [1]) -> []", "(evens [3 3 8 9 3]) -> [8]", "(evens [8]) -> [8]", "(evens []) -> []", "(evens [7 8 9 2]) -> [8 2]", "(evens [2 1 0 3]) -> [2 0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 26.003116, "examples": ["(evens []) -> []", "(evens [5 8]) -> [8]", "(evens []) -> []", "(evens [7 8 3 7 6]) -> [8 6]", "(evens [8 2 0 1]) -> [8 2 0]", "(evens [6 3 0 1 1]) -> [6 0]", "(evens [2 9]) -> [2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 33.5231, "examples": ["(evens []) -> []", "(evens [7]) -> []", "(evens [1]) -> []", "(evens []) -> []", "(evens [0 0 2 2]) -> [0 0 2 2]", "(evens [4 2 7]) -> [4 2]", "(evens [6]) -> [6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 24.930018, "examples": ["(evens []) -> []", "(evens [8 6 3]) -> [8 6]", "(evens [6 0 3 8 5]) -> [6 0 8]", "(evens [1 8 4]) -> [8 4]", "(evens [8]) -> [8]", "(evens [8 4]) -> [8 4]", "(evens [6 3]) -> [6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 31.1447, "examples": ["(evens []) -> []", "(evens [2 1 8]) -> [2 8]", "(evens [3]) -> []", "(evens [9 3 8]) -> [8]", "(evens [6 7 3 1]) -> [6]", "(evens [9 6 7]) -> [6]", "(evens [1]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 26.351792, "examples": ["(evens []) -> []", "(evens [1]) -> []", "(evens [2]) -> [2]", "(evens [3]) -> []", "(evens [1 3 5 7 7]) -> []", "(evens [8 4 8]) -> [8 4 8]", "(evens [5 4 9]) -> [4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 27.140817, "examples": ["(evens []) -> []", "(evens [6 6]) -> [6 6]", "(evens [3 6]) -> [6]", "(evens [0]) -> [0]", "(evens [8 4 8 9 8]) -> [8 4 8 8]", "(evens [6 4]) -> [6 4]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 27.117154, "examples": ["(evens []) -> []", "(evens [7 9 6 8 9]) -> [6 8]", "(evens [1 7 1 0]) -> [0]", "(evens [3]) -> []", "(evens [5 7 4]) -> [4]", "(evens []) -> []", "(evens [4 9 6]) -> [4 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 28.392964, "examples": ["(evens []) -> []", "(evens [1 8 2]) -> [8 2]", "(evens []) -> []", "(evens [1]) -> []", "(evens [9 0 4 1]) -> [0 4]", "(evens [5 9 6 3]) -> [6]", "(evens [3 7 1]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 25.037181, "examples": ["(evens []) -> []", "(evens [6]) -> [6]", "(evens [4 7]) -> [4]", "(evens [0 5 9]) -> [0]", "(evens [2 4]) -> [2 4]", "(evens [1 3 1 7]) -> []", "(evens [1 3 2 8 7]) -> [2 8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 27.386158, "examples": ["(evens []) -> []", "(evens [0 2]) -> [0 2]", "(evens [9 7 2 8 7]) -> [2 8]", "(evens []) -> []", "(evens [4]) -> [4]", "(evens [6 8 6]) -> [6 8 6]", "(evens [3 7]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 29.932412, "examples": ["(evens []) -> []", "(evens [9 8 7 9]) -> [8]", "(evens [6 5 9]) -> [6]", "(evens []) -> []", "(evens [2 9]) -> [2]", "(evens [4]) -> [4]", "(evens [0]) -> [0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 29.098477, "examples": ["(evens []) -> []", "(evens [8 4 8 9]) -> [8 4 8]", "(evens []) -> []", "(evens [6]) -> [6]", "(evens [1 5]) -> []", "(evens []) -> []", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 29.244982, "examples": ["(evens []) -> []", "(evens [2 0 7 8 0]) -> [2 0 8 0]", "(evens [7]) -> []", "(evens [7 3 7]) -> []", "(evens [9 4]) -> [4]", "(evens [8 0]) -> [8 0]", "(evens [9 2 1]) -> [2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (foldl b (lambda (e d) (= e (<= d c))) #f)))) _) _)", "time": 13.544612, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [3]) -> []", "(evens []) -> []", "(evens [1 3 2]) -> [2]", "(evens [0 9 4 4]) -> [0 4 4]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 26.531314, "examples": ["(evens []) -> []", "(evens [6 2]) -> [6 2]", "(evens [1 2 3 5]) -> [2]", "(evens [6 8]) -> [6 8]", "(evens [7]) -> []", "(evens [0 4 0 0]) -> [0 4 0 0]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 25.367528, "examples": ["(evens []) -> []", "(evens [4]) -> [4]", "(evens [2 0 3 9]) -> [2 0]", "(evens [1 2 9]) -> [2]", "(evens [0 8]) -> [0 8]", "(evens [7 5 4 7 8]) -> [4 8]", "(evens [3 6 6]) -> [6 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 26.742595, "examples": ["(evens []) -> []", "(evens [3 1 5 8 2]) -> [8 2]", "(evens [7 4 6]) -> [4 6]", "(evens []) -> []", "(evens [6]) -> [6]", "(evens []) -> []", "(evens [7 4]) -> [4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 28.801888, "examples": ["(evens []) -> []", "(evens [4 9 1 5 0]) -> [4 0]", "(evens [1 3 1]) -> []", "(evens [6 2 1 0 6]) -> [6 2 0 6]", "(evens [4 1]) -> [4]", "(evens [9 1 4]) -> [4]", "(evens [7]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 26.523867, "examples": ["(evens []) -> []", "(evens [4 0]) -> [4 0]", "(evens [5 6 4]) -> [6 4]", "(evens [2 7 0 2 5]) -> [2 0 2]", "(evens [1 9 1 2 8]) -> [2 8]", "(evens [2 2]) -> [2 2]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 25.794842, "examples": ["(evens []) -> []", "(evens [4 8]) -> [4 8]", "(evens [6 0 1 5 1]) -> [6 0]", "(evens [3]) -> []", "(evens []) -> []", "(evens []) -> []", "(evens [2 6]) -> [2 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 23.994232, "examples": ["(evens []) -> []", "(evens [2 8 3]) -> [2 8]", "(evens [0 2]) -> [0 2]", "(evens [4 6]) -> [4 6]", "(evens [8 7 6]) -> [8 6]", "(evens [2 8 2 5]) -> [2 8 2]", "(evens [6 2 6 5]) -> [6 2 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 26.50212, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [9 1 4 1 6]) -> [4 6]", "(evens [9]) -> []", "(evens [4]) -> [4]", "(evens []) -> []", "(evens [2 4]) -> [2 4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 24.209442, "examples": ["(evens []) -> []", "(evens [5 5 5 6]) -> [6]", "(evens [5]) -> []", "(evens [2]) -> [2]", "(evens [2]) -> [2]", "(evens [3 0 5 1]) -> [0]", "(evens [2 8 6 7]) -> [2 8 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 22.734014, "examples": ["(evens []) -> []", "(evens [3 1 0 6 7]) -> [0 6]", "(evens [9 4 5]) -> [4]", "(evens [2 0 1]) -> [2 0]", "(evens [1]) -> []", "(evens []) -> []", "(evens [8 8]) -> [8 8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 16.681836, "examples": ["(evens []) -> []", "(evens [4]) -> [4]", "(evens [1]) -> []", "(evens [4 9]) -> [4]", "(evens []) -> []", "(evens [0 6]) -> [0 6]", "(evens [2 9 5 5]) -> [2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 17.954512, "examples": ["(evens []) -> []", "(evens [6 7 4 4]) -> [6 4 4]", "(evens [3]) -> []", "(evens [9 8 1]) -> [8]", "(evens [0 9]) -> [0]", "(evens []) -> []", "(evens [6 6 8 3]) -> [6 6 8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 16.082373, "examples": ["(evens []) -> []", "(evens [6 4]) -> [6 4]", "(evens [3 6 5]) -> [6]", "(evens [0 0 7 9]) -> [0 0]", "(evens []) -> []", "(evens [3]) -> []", "(evens [0]) -> [0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 26.591479, "examples": ["(evens []) -> []", "(evens [2 7 9 6 3]) -> [2 6]", "(evens []) -> []", "(evens [8 6 2]) -> [8 6 2]", "(evens [4 8]) -> [4 8]", "(evens [7 9 3 2 6]) -> [2 6]", "(evens [3 4 9]) -> [4]"], "name": "evens"}
