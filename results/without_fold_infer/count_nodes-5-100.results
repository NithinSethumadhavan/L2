{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) 1) 0)) _) _)", "time": 0.027555}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {1} {3}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (+ 1 (+ 1 1))) 0)) _) _)", "time": 0.846671}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3 {5 {2}}}) -> 3", "(count_nodes {7 {8} {4}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (+ 1 (+ 1 1))) 0)) _) _)", "time": 1.093095}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {8} {7}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (+ 1 (+ 1 1))) 0)) _) _)", "time": 0.854985}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {0 {8}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 1)) 1)) 0)) _) _)", "time": 3.6747}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {3} {5}}) -> 3", "(count_nodes {4 {3 {7} {1}}}) -> 4", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.853255}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {4 {5} {1 {0} {1}}}) -> 5", "(count_nodes {4}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ c 1)) 1)) 0)) _) _)", "time": 3.859223}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {0 {3}}) -> 2", "(count_nodes {1 {8}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (+ 1 1)) 0)) _) _)", "time": 0.209572}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {3 {3 {7} {1}}}}) -> 5", "(count_nodes {5 {1 {9 {2} {6}} {3 {4} {0}}} {0 {0 {6} {5}}}}) -> 12", "(count_nodes {0 {6 {7} {8}} {6 {9} {4}}}) -> 7"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.141832}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {5 {2} {0}}}) -> 4", "(count_nodes {0 {2}}) -> 2", "(count_nodes {0 {6}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.247634}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {1}) -> 1", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) 1) 0)) _) _)", "time": 0.023612}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {8 {4} {6}}) -> 3", "(count_nodes {9}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 4.548559}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {4}) -> 1", "(count_nodes {4 {8}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 1)) 1)) 0)) _) _)", "time": 4.433234}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {9}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (+ 1 1)) 0)) _) _)", "time": 0.077024}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {5}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) 1) 0)) _) _)", "time": 0.053866}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {2 {3 {3}} {7}} {7}}) -> 6", "(count_nodes {3 {1 {4} {5}}}) -> 4", "(count_nodes {1}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.8499}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {3}}) -> 2", "(count_nodes {9 {9} {6}}) -> 3", "(count_nodes {9 {1}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 5.052703}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {9 {4 {9 {1}} {4}} {9 {7 {8}} {2 {8} {6}}}}) -> 11", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (+ 1 (+ 1 c))) 0)) _) _)", "time": 1.072289}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {2 {0} {6}}}) -> 4", "(count_nodes {3 {7 {4 {6}}}}) -> 4", "(count_nodes {8 {3 {2}}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.205816}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {3 {6 {9 {7} {7}} {5 {6}}} {0 {6 {6}}}}) -> 10"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ c e)) 1)) 0)) _) _)", "time": 5.10297}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {7 {7 {5}} {0 {3}}}) -> 5", "(count_nodes {2 {7 {2} {8}}}) -> 4"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.238805}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2 {0}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) c) 0)) _) _)", "time": 0.03089}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {3}}) -> 2", "(count_nodes {5 {0 {0} {7}} {2}}) -> 5", "(count_nodes {7}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.323403}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {4} {9 {6} {8 {4} {1}}}}) -> 7", "(count_nodes {1}) -> 1", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) c) 0)) _) _)", "time": 0.037801}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {4}) -> 1", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) 1) 0)) _) _)", "time": 0.038889}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {6}}) -> 2", "(count_nodes {7 {6 {6}}}) -> 3", "(count_nodes {9 {9}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 e)) 1)) 0)) _) _)", "time": 5.378442}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) 0) _) _)", "time": 0.00028}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {0 {7}} {2 {5} {7}}}) -> 6", "(count_nodes {5 {2 {1} {4}}}) -> 4", "(count_nodes {5 {4 {9} {7}} {1 {3}}}) -> 6"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.22522}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) 1) 0)) _) _)", "time": 0.044014}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {5}}) -> 2", "(count_nodes {1 {4} {1}}) -> 3", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 5.419979}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {4 {6 {1} {4}}}}) -> 5", "(count_nodes {2 {9 {4}} {7 {3} {8}}}) -> 6", "(count_nodes {8 {9 {8}} {5 {1}}}) -> 5"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.769968}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {4 {7}}) -> 2", "(count_nodes {7 {9} {8}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 3.6362}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {7 {1} {7 {2}}}) -> 4"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f f)) 1)) 0)) _) _)", "time": 4.70037}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {7}}) -> 2", "(count_nodes {2 {1} {2}}) -> 3", "(count_nodes {7 {6} {0 {7} {7 {8} {7}}}}) -> 7"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.06401}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {7 {6 {9 {9} {9}}} {4 {7 {3}} {5 {8} {9}}}}) -> 11"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.129443}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {5}) -> 1", "(count_nodes {7 {7}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 1)) 1)) 0)) _) _)", "time": 4.744702}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {9 {2} {4}}) -> 3", "(count_nodes {1 {1 {5} {7}}}) -> 4"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.001476}
