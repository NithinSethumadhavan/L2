{"examples": ["(add [] 7) -> []", "(add [8 2] 1) -> [9 3]", "(add [4 2 2 6 5] 6) -> [10 8 8 12 11]", "(add [1] 5) -> [6]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.044424}
{"examples": ["(add [] 9) -> []", "(add [1 0 2 0] 0) -> [1 0 2 0]", "(add [] 9) -> []", "(add [8 6 3 3 6] 4) -> [12 10 7 7 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.044342}
{"examples": ["(add [] 7) -> []", "(add [4 7 6] 7) -> [11 14 13]", "(add [5 3 5] 1) -> [6 4 6]", "(add [3 7 2 9 3] 4) -> [7 11 6 13 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.040371}
{"examples": ["(add [] 0) -> []", "(add [] 3) -> []", "(add [9 1 4 3] 1) -> [10 2 5 4]", "(add [] 3) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.052904}
{"examples": ["(add [] 1) -> []", "(add [2 8] 2) -> [4 10]", "(add [4 3 0 8] 6) -> [10 9 6 14]", "(add [8] 3) -> [11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.039259}
{"examples": ["(add [] 9) -> []", "(add [2 3] 2) -> [4 5]", "(add [1 9 5 4 0] 9) -> [10 18 14 13 9]", "(add [] 3) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.048934}
{"examples": ["(add [] 7) -> []", "(add [7 2 7] 1) -> [8 3 8]", "(add [0 6 9 9 5] 7) -> [7 13 16 16 12]", "(add [3 9 3] 4) -> [7 13 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.055398}
{"examples": ["(add [] 9) -> []", "(add [5 3 3 1 7] 2) -> [7 5 5 3 9]", "(add [9 6] 7) -> [16 13]", "(add [6 8 9] 3) -> [9 11 12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.058147}
{"examples": ["(add [] 2) -> []", "(add [1 3 0] 3) -> [4 6 3]", "(add [1 1 3] 1) -> [2 2 4]", "(add [] 9) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.055429}
{"examples": ["(add [] 7) -> []", "(add [8 3 8 6] 6) -> [14 9 14 12]", "(add [1 8 3] 9) -> [10 17 12]", "(add [3 1] 4) -> [7 5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.071371}
{"examples": ["(add [] 7) -> []", "(add [5] 3) -> [8]", "(add [2 8 7] 5) -> [7 13 12]", "(add [9 5 8 8] 0) -> [9 5 8 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.06927}
{"examples": ["(add [] 3) -> []", "(add [] 2) -> []", "(add [1] 5) -> [6]", "(add [6 4] 3) -> [9 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.066942}
{"examples": ["(add [] 2) -> []", "(add [] 3) -> []", "(add [] 8) -> []", "(add [2] 4) -> [6]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.057522}
{"examples": ["(add [] 0) -> []", "(add [] 7) -> []", "(add [3 8] 7) -> [10 15]", "(add [] 4) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.065848}
{"examples": ["(add [] 1) -> []", "(add [5 4] 7) -> [12 11]", "(add [4 9 0] 4) -> [8 13 4]", "(add [4 9] 2) -> [6 11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.050563}
{"examples": ["(add [] 9) -> []", "(add [] 3) -> []", "(add [] 8) -> []", "(add [9 1 9 4] 8) -> [17 9 17 12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.05354}
{"examples": ["(add [] 9) -> []", "(add [0 9 4 0 7] 2) -> [2 11 6 2 9]", "(add [7 4 9 7 4] 8) -> [15 12 17 15 12]", "(add [1 1 0] 1) -> [2 2 1]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.059287}
{"examples": ["(add [] 4) -> []", "(add [8 2 2] 9) -> [17 11 11]", "(add [9 7 2 5] 0) -> [9 7 2 5]", "(add [7 0 6 3] 7) -> [14 7 13 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.049251}
{"examples": ["(add [] 3) -> []", "(add [3 0 0] 1) -> [4 1 1]", "(add [1 3 0] 3) -> [4 6 3]", "(add [7] 2) -> [9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.059134}
{"examples": ["(add [] 0) -> []", "(add [7 0] 3) -> [10 3]", "(add [] 6) -> []", "(add [1 1 6 1 4] 4) -> [5 5 10 5 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.05577}
{"examples": ["(add [] 5) -> []", "(add [4 5 8 2] 0) -> [4 5 8 2]", "(add [9 0] 9) -> [18 9]", "(add [4 4] 6) -> [10 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.049753}
{"examples": ["(add [] 4) -> []", "(add [0 2 0 0] 8) -> [8 10 8 8]", "(add [6 3 9] 6) -> [12 9 15]", "(add [] 2) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.041406}
{"examples": ["(add [] 3) -> []", "(add [5] 2) -> [7]", "(add [0 3 1 8] 4) -> [4 7 5 12]", "(add [5 8] 0) -> [5 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.04115}
{"examples": ["(add [] 4) -> []", "(add [3 0 1 8] 0) -> [3 0 1 8]", "(add [5 9 4 0] 4) -> [9 13 8 4]", "(add [8 6 1] 3) -> [11 9 4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.059278}
{"examples": ["(add [] 3) -> []", "(add [9 6] 7) -> [16 13]", "(add [] 7) -> []", "(add [] 1) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.062538}
{"examples": ["(add [] 0) -> []", "(add [5 5 1 4 6] 1) -> [6 6 2 5 7]", "(add [] 6) -> []", "(add [4 5 9] 9) -> [13 14 18]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.063826}
{"examples": ["(add [] 6) -> []", "(add [3] 7) -> [10]", "(add [] 2) -> []", "(add [6] 3) -> [9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.049376}
{"examples": ["(add [] 1) -> []", "(add [7 4 7 4 1] 6) -> [13 10 13 10 7]", "(add [8 3 0 2 9] 4) -> [12 7 4 6 13]", "(add [2 1] 3) -> [5 4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.046849}
{"examples": ["(add [] 3) -> []", "(add [] 4) -> []", "(add [7] 1) -> [8]", "(add [7 5 7 9 1] 4) -> [11 9 11 13 5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.052509}
{"examples": ["(add [] 5) -> []", "(add [] 6) -> []", "(add [4] 3) -> [7]", "(add [6 8 0] 8) -> [14 16 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.042421}
{"examples": ["(add [] 7) -> []", "(add [8 6 8] 9) -> [17 15 17]", "(add [7 8 1 5] 6) -> [13 14 7 11]", "(add [2 0 3 6 9] 6) -> [8 6 9 12 15]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.054643}
{"examples": ["(add [] 9) -> []", "(add [2 8 6 3] 0) -> [2 8 6 3]", "(add [3 0 0] 2) -> [5 2 2]", "(add [1 1] 8) -> [9 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.049066}
{"examples": ["(add [] 7) -> []", "(add [9 0 5 8] 0) -> [9 0 5 8]", "(add [] 8) -> []", "(add [0] 0) -> [0]"], "solution": "(let add (let a (lambda (c b) c) _) _)", "name": "add", "time": 0.000457}
{"examples": ["(add [] 4) -> []", "(add [] 9) -> []", "(add [] 6) -> []", "(add [3 5 3 6] 7) -> [10 12 10 13]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.039033}
{"examples": ["(add [] 2) -> []", "(add [1 2 5] 8) -> [9 10 13]", "(add [] 4) -> []", "(add [5 8 4] 0) -> [5 8 4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.047303}
{"examples": ["(add [] 4) -> []", "(add [5 8 5] 4) -> [9 12 9]", "(add [7 1 6] 0) -> [7 1 6]", "(add [] 8) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.036401}
{"examples": ["(add [] 4) -> []", "(add [5 7 2 1 5] 0) -> [5 7 2 1 5]", "(add [5 5 3 8 6] 2) -> [7 7 5 10 8]", "(add [5 1] 6) -> [11 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.046633}
{"examples": ["(add [] 3) -> []", "(add [2 4 1 0] 4) -> [6 8 5 4]", "(add [8 8 8] 4) -> [12 12 12]", "(add [1] 3) -> [4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.058526}
{"examples": ["(add [] 8) -> []", "(add [9 6] 1) -> [10 7]", "(add [] 4) -> []", "(add [2] 7) -> [9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.046128}
{"examples": ["(add [] 3) -> []", "(add [] 4) -> []", "(add [6 0] 6) -> [12 6]", "(add [5 3 6] 6) -> [11 9 12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.041336}
{"examples": ["(add [] 1) -> []", "(add [0 0 3] 0) -> [0 0 3]", "(add [3 5 3] 3) -> [6 8 6]", "(add [7 5] 0) -> [7 5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.042994}
{"examples": ["(add [] 4) -> []", "(add [4] 1) -> [5]", "(add [0 8 4 5 1] 7) -> [7 15 11 12 8]", "(add [] 2) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.057998}
{"examples": ["(add [] 4) -> []", "(add [3] 0) -> [3]", "(add [1] 9) -> [10]", "(add [2 3 4 5 7] 7) -> [9 10 11 12 14]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.038054}
{"examples": ["(add [] 9) -> []", "(add [3] 4) -> [7]", "(add [3 9 9] 2) -> [5 11 11]", "(add [1 9 2 5] 5) -> [6 14 7 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.042419}
{"examples": ["(add [] 7) -> []", "(add [9 4 0 1] 8) -> [17 12 8 9]", "(add [4 4] 7) -> [11 11]", "(add [4] 6) -> [10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.055362}
{"examples": ["(add [] 4) -> []", "(add [5] 6) -> [11]", "(add [] 8) -> []", "(add [1 8 9] 3) -> [4 11 12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.037299}
{"examples": ["(add [] 8) -> []", "(add [9 5 1] 2) -> [11 7 3]", "(add [] 6) -> []", "(add [] 2) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.053222}
{"examples": ["(add [] 3) -> []", "(add [1 1 8 9] 3) -> [4 4 11 12]", "(add [8 1 6] 0) -> [8 1 6]", "(add [7 2 2] 5) -> [12 7 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.05645}
{"examples": ["(add [] 6) -> []", "(add [] 6) -> []", "(add [] 4) -> []", "(add [] 8) -> []"], "solution": "(let add (let a (lambda (c b) []) _) _)", "name": "add", "time": 0.000515}
{"examples": ["(add [] 2) -> []", "(add [3 5 0 5 3] 7) -> [10 12 7 12 10]", "(add [] 5) -> []", "(add [3 4 2 4] 0) -> [3 4 2 4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.060818}
{"examples": ["(add [] 3) -> []", "(add [1 7 4 7] 8) -> [9 15 12 15]", "(add [5 2 9] 4) -> [9 6 13]", "(add [0] 3) -> [3]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.053124}
{"examples": ["(add [] 1) -> []", "(add [8 4 7 6] 8) -> [16 12 15 14]", "(add [5 2] 3) -> [8 5]", "(add [7 0] 3) -> [10 3]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.037725}
{"examples": ["(add [] 0) -> []", "(add [3 3 8 7 0] 9) -> [12 12 17 16 9]", "(add [0 7 9 7] 6) -> [6 13 15 13]", "(add [1 3 8 3 2] 3) -> [4 6 11 6 5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.041097}
{"examples": ["(add [] 0) -> []", "(add [9 2 4] 2) -> [11 4 6]", "(add [8 0 5] 2) -> [10 2 7]", "(add [3 6 2 8] 6) -> [9 12 8 14]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.042083}
{"examples": ["(add [] 8) -> []", "(add [9 7 9 9] 9) -> [18 16 18 18]", "(add [0 4 6] 9) -> [9 13 15]", "(add [4 3] 5) -> [9 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.038244}
{"examples": ["(add [] 4) -> []", "(add [7 2 4 1] 5) -> [12 7 9 6]", "(add [8] 6) -> [14]", "(add [] 9) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.047416}
{"examples": ["(add [] 2) -> []", "(add [0 5] 0) -> [0 5]", "(add [] 2) -> []", "(add [6 1 7 3] 2) -> [8 3 9 5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.050328}
{"examples": ["(add [] 0) -> []", "(add [5 1 7] 7) -> [12 8 14]", "(add [3 1 2 4 2] 4) -> [7 5 6 8 6]", "(add [8] 8) -> [16]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.057964}
{"examples": ["(add [] 2) -> []", "(add [8 3 4 8 5] 3) -> [11 6 7 11 8]", "(add [7 9] 9) -> [16 18]", "(add [7 5] 8) -> [15 13]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.057923}
{"examples": ["(add [] 6) -> []", "(add [0 9] 4) -> [4 13]", "(add [7 5 5] 8) -> [15 13 13]", "(add [3 7] 4) -> [7 11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.040955}
{"examples": ["(add [] 1) -> []", "(add [8 3] 0) -> [8 3]", "(add [4 8 4 6 2] 8) -> [12 16 12 14 10]", "(add [0 0] 6) -> [6 6]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.045742}
{"examples": ["(add [] 1) -> []", "(add [3 5] 6) -> [9 11]", "(add [2 3 7 7] 7) -> [9 10 14 14]", "(add [0 7 3 1] 7) -> [7 14 10 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.041621}
{"examples": ["(add [] 4) -> []", "(add [1 4 3] 7) -> [8 11 10]", "(add [7 1 1 5] 7) -> [14 8 8 12]", "(add [1 6 5 0] 9) -> [10 15 14 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.037096}
{"examples": ["(add [] 6) -> []", "(add [1 6 7 2 2] 6) -> [7 12 13 8 8]", "(add [6 8 6] 4) -> [10 12 10]", "(add [2 6 4] 0) -> [2 6 4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.038523}
{"examples": ["(add [] 2) -> []", "(add [7] 5) -> [12]", "(add [4] 9) -> [13]", "(add [3] 1) -> [4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.055343}
{"examples": ["(add [] 5) -> []", "(add [5 0] 1) -> [6 1]", "(add [4 6 2] 8) -> [12 14 10]", "(add [0 2 3] 8) -> [8 10 11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.04196}
{"examples": ["(add [] 9) -> []", "(add [3 2 4 5] 0) -> [3 2 4 5]", "(add [0 2 4 6 1] 0) -> [0 2 4 6 1]", "(add [6 5 7 2 1] 9) -> [15 14 16 11 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.042096}
{"examples": ["(add [] 9) -> []", "(add [3 7] 9) -> [12 16]", "(add [6 6 3 3] 8) -> [14 14 11 11]", "(add [5 0 3 3] 1) -> [6 1 4 4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.045144}
{"examples": ["(add [] 3) -> []", "(add [1 1] 7) -> [8 8]", "(add [1 3 0] 8) -> [9 11 8]", "(add [3] 4) -> [7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.058098}
{"examples": ["(add [] 6) -> []", "(add [4 6 2 2 2] 7) -> [11 13 9 9 9]", "(add [7 1 2 7 1] 6) -> [13 7 8 13 7]", "(add [3 7 7 2] 8) -> [11 15 15 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.036532}
{"examples": ["(add [] 6) -> []", "(add [] 4) -> []", "(add [9 6 5] 6) -> [15 12 11]", "(add [8] 5) -> [13]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.037009}
{"examples": ["(add [] 6) -> []", "(add [] 2) -> []", "(add [] 7) -> []", "(add [5] 9) -> [14]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.061706}
{"examples": ["(add [] 3) -> []", "(add [9 7] 6) -> [15 13]", "(add [1] 6) -> [7]", "(add [7 8 5] 2) -> [9 10 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.042591}
{"examples": ["(add [] 9) -> []", "(add [2 2 5] 4) -> [6 6 9]", "(add [] 4) -> []", "(add [] 9) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.048489}
{"examples": ["(add [] 3) -> []", "(add [6 3 5] 7) -> [13 10 12]", "(add [2 0 6 0 0] 2) -> [4 2 8 2 2]", "(add [2 8 7] 0) -> [2 8 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.059496}
{"examples": ["(add [] 6) -> []", "(add [4] 1) -> [5]", "(add [3 0] 9) -> [12 9]", "(add [8 6 7 2 3] 0) -> [8 6 7 2 3]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.040313}
{"examples": ["(add [] 8) -> []", "(add [0] 2) -> [2]", "(add [7 5 7] 4) -> [11 9 11]", "(add [8 8 5] 5) -> [13 13 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.056517}
{"examples": ["(add [] 0) -> []", "(add [5 1 1] 2) -> [7 3 3]", "(add [] 7) -> []", "(add [7 3] 2) -> [9 5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.036789}
{"examples": ["(add [] 7) -> []", "(add [1 3 4 9] 8) -> [9 11 12 17]", "(add [1] 2) -> [3]", "(add [3 6 5 4 1] 7) -> [10 13 12 11 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.039063}
{"examples": ["(add [] 1) -> []", "(add [8 0 9 9 4] 1) -> [9 1 10 10 5]", "(add [9] 6) -> [15]", "(add [1 7 8 1] 0) -> [1 7 8 1]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.06113}
{"examples": ["(add [] 3) -> []", "(add [3] 4) -> [7]", "(add [2 7] 5) -> [7 12]", "(add [] 4) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.060319}
{"examples": ["(add [] 7) -> []", "(add [] 1) -> []", "(add [7 1 2] 6) -> [13 7 8]", "(add [3 9 3 3 9] 2) -> [5 11 5 5 11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.058229}
{"examples": ["(add [] 2) -> []", "(add [9 4 2 7 1] 9) -> [18 13 11 16 10]", "(add [9 6 4] 4) -> [13 10 8]", "(add [3 0] 8) -> [11 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.04958}
{"examples": ["(add [] 4) -> []", "(add [] 2) -> []", "(add [] 0) -> []", "(add [] 8) -> []"], "solution": "(let add (let a (lambda (c b) []) _) _)", "name": "add", "time": 0.000534}
{"examples": ["(add [] 8) -> []", "(add [4 9 8] 3) -> [7 12 11]", "(add [9] 4) -> [13]", "(add [8 5 7 4 8] 8) -> [16 13 15 12 16]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.038032}
{"examples": ["(add [] 4) -> []", "(add [1 8 6 8] 8) -> [9 16 14 16]", "(add [8 1 0 4] 8) -> [16 9 8 12]", "(add [4 8 6 8] 5) -> [9 13 11 13]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.056179}
{"examples": ["(add [] 8) -> []", "(add [1 3 4] 1) -> [2 4 5]", "(add [3 9 1] 4) -> [7 13 5]", "(add [1 0 0] 3) -> [4 3 3]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.046469}
{"examples": ["(add [] 7) -> []", "(add [5 7 7 3] 5) -> [10 12 12 8]", "(add [7 5 1 7 3] 6) -> [13 11 7 13 9]", "(add [6 1 7 5] 9) -> [15 10 16 14]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.055289}
{"examples": ["(add [] 7) -> []", "(add [6 4 0 8] 0) -> [6 4 0 8]", "(add [] 2) -> []", "(add [0 5] 7) -> [7 12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.046862}
{"examples": ["(add [] 5) -> []", "(add [0] 5) -> [5]", "(add [] 0) -> []", "(add [5 0 8 8 1] 2) -> [7 2 10 10 3]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.044498}
{"examples": ["(add [] 5) -> []", "(add [4 9 3 0 7] 8) -> [12 17 11 8 15]", "(add [1 1 8] 8) -> [9 9 16]", "(add [8 3 1 2 2] 8) -> [16 11 9 10 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.038694}
{"examples": ["(add [] 9) -> []", "(add [4 5 3 9] 0) -> [4 5 3 9]", "(add [6 1 1 4] 3) -> [9 4 4 7]", "(add [9 5 4 7] 9) -> [18 14 13 16]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.03949}
{"examples": ["(add [] 5) -> []", "(add [0] 2) -> [2]", "(add [7 7 5] 0) -> [7 7 5]", "(add [5] 2) -> [7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.044827}
{"examples": ["(add [] 4) -> []", "(add [0 0 4 2 7] 8) -> [8 8 12 10 15]", "(add [] 0) -> []", "(add [] 2) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.037823}
{"examples": ["(add [] 2) -> []", "(add [8 8] 7) -> [15 15]", "(add [8 4 8] 9) -> [17 13 17]", "(add [0 0] 0) -> [0 0]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.037796}
{"examples": ["(add [] 2) -> []", "(add [1] 3) -> [4]", "(add [0 2] 6) -> [6 8]", "(add [3 2 9 9] 7) -> [10 9 16 16]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.036117}
{"examples": ["(add [] 7) -> []", "(add [8] 4) -> [12]", "(add [9 0 4] 4) -> [13 4 8]", "(add [9 6 3 4 0] 4) -> [13 10 7 8 4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.0368}
{"examples": ["(add [] 4) -> []", "(add [8 5] 0) -> [8 5]", "(add [8 6 7 7] 3) -> [11 9 10 10]", "(add [5 2 5 3] 6) -> [11 8 11 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.038448}
{"examples": ["(add [] 6) -> []", "(add [5 7 1 7] 8) -> [13 15 9 15]", "(add [0 1] 7) -> [7 8]", "(add [] 3) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.035319}
{"examples": ["(add [] 5) -> []", "(add [0 1 9 8 1] 8) -> [8 9 17 16 9]", "(add [9 2] 1) -> [10 3]", "(add [] 2) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.03557}
