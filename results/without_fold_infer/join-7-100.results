{"time": 2.849964, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[8 0 4]]) -> [8 0 4]", "(join [[0 3 9] [2 6 4] [4 4 5 5] [2] [6 7 6]]) -> [0 3 9 2 6 4 4 4 5 5 2 6 7 6]", "(join [[1 8 1] [4 9 6 5] [5 9 9]]) -> [1 8 1 4 9 6 5 5 9 9]", "(join [[6] [9 9 9 9] [0 6 4] [1 7 4 0 8]]) -> [6 9 9 9 9 0 6 4 1 7 4 0 8]", "(join [[3 5 2] [0 4 4]]) -> [3 5 2 0 4 4]"], "name": "join"}
{"time": 3.100883, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[1 5 5 5] [8 6 3 5] [6 2]]) -> [1 5 5 5 8 6 3 5 6 2]", "(join [[] [] [6 7 6 5] [] [0 9 6 9]]) -> [6 7 6 5 0 9 6 9]", "(join []) -> []", "(join [[5 5 4 5 6] [] [9 1 6] [] [5]]) -> [5 5 4 5 6 9 1 6 5]"], "name": "join"}
{"time": 3.152864, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[5] [3]]) -> [5 3]", "(join []) -> []", "(join [[6 5]]) -> [6 5]", "(join [[5 7] [6 9 2]]) -> [5 7 6 9 2]", "(join [[2 1 9 6] [8 8 3]]) -> [2 1 9 6 8 8 3]"], "name": "join"}
{"time": 3.252765, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[5 6 8]]) -> [5 6 8]", "(join [[2 9] [7 7 0 2 6] [7 0 8 5 1] [4 7 3 5] [2]]) -> [2 9 7 7 0 2 6 7 0 8 5 1 4 7 3 5 2]", "(join [[1] [3 1] [5] [1 9 3 7 2] [4 5 7 0]]) -> [1 3 1 5 1 9 3 7 2 4 5 7 0]", "(join [[2 5 0 0 6] [5 0] [0 6 6] [2 7 3] [9 2 7]]) -> [2 5 0 0 6 5 0 0 6 6 2 7 3 9 2 7]"], "name": "join"}
{"time": "timeout", "examples": ["(join []) -> []", "(join [[7 7] [3 7 5 1 6] [8 0]]) -> [7 7 3 7 5 1 6 8 0]", "(join []) -> []", "(join []) -> []", "(join []) -> []", "(join [[5 0] [9]]) -> [5 0 9]"], "name": "join"}
{"time": 3.442268, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[] [3 7] [4 4]]) -> [3 7 4 4]", "(join []) -> []", "(join [[3 1 7 2 8] [5 1 7]]) -> [3 1 7 2 8 5 1 7]", "(join [[7 1 4] [] [0 6 1] [6 8 1] []]) -> [7 1 4 0 6 1 6 8 1]", "(join [[] [1 4 1 8 3] [5 7] []]) -> [1 4 1 8 3 5 7]"], "name": "join"}
{"time": 3.608142, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[6] [1 8 9]]) -> [6 1 8 9]", "(join [[8 5] [3 9 3 2] [3]]) -> [8 5 3 9 3 2 3]", "(join []) -> []", "(join [[5 4] [0 1] [3 8 2] [6]]) -> [5 4 0 1 3 8 2 6]"], "name": "join"}
{"time": 3.701621, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[8 6] [0 8 2] [] []]) -> [8 6 0 8 2]", "(join [[1 0] []]) -> [1 0]", "(join [[3 1 7 4] [1 1]]) -> [3 1 7 4 1 1]", "(join [[5 8 0]]) -> [5 8 0]"], "name": "join"}
{"time": 3.68562, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[2 5 6 1 0]]) -> [2 5 6 1 0]", "(join [[5 4 7 1] [6 0] [] [2 9 8 7] [6 8 6 4]]) -> [5 4 7 1 6 0 2 9 8 7 6 8 6 4]", "(join [[5] [1]]) -> [5 1]", "(join [[2 6 6 5 1] [3 3 3 5 8] [1 3 6 6 4] [5 2 5 8 8]]) -> [2 6 6 5 1 3 3 3 5 8 1 3 6 6 4 5 2 5 8 8]", "(join [[6 9 3] [7 8 5 8] [0 4 2]]) -> [6 9 3 7 8 5 8 0 4 2]"], "name": "join"}
{"time": 3.706798, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[]]) -> []", "(join [[9 2 9 8] [4 1 8 5] [5 1 2 9 7] [9] [8 5 8 1]]) -> [9 2 9 8 4 1 8 5 5 1 2 9 7 9 8 5 8 1]", "(join []) -> []", "(join [[6] [3 8]]) -> [6 3 8]"], "name": "join"}
{"time": 3.780094, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[]]) -> []", "(join [[2]]) -> [2]", "(join [[2 3 9 4] [0] [0 0 0 0 8]]) -> [2 3 9 4 0 0 0 0 0 8]", "(join []) -> []", "(join [[0 9] [1]]) -> [0 9 1]"], "name": "join"}
{"time": 3.80361, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[] [4 5 5 1] [2 3] [0 4 2]]) -> [4 5 5 1 2 3 0 4 2]", "(join [[9] [5 0 5 3] [2 3 9 5 6]]) -> [9 5 0 5 3 2 3 9 5 6]", "(join [[] [] [2 3 9 9] [9 7 0] [0 8 7]]) -> [2 3 9 9 9 7 0 0 8 7]", "(join [[8 9 7] []]) -> [8 9 7]"], "name": "join"}
{"time": 4.084188, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[5 1] [0] [7 7 4 6 8]]) -> [5 1 0 7 7 4 6 8]", "(join [[0 2 5]]) -> [0 2 5]", "(join [[0 6]]) -> [0 6]", "(join [[9] [5] [4 8 1]]) -> [9 5 4 8 1]"], "name": "join"}
{"time": 4.417033, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[2 3 6 6 5] [8 9 6 9] [4 2] [9 1]]) -> [2 3 6 6 5 8 9 6 9 4 2 9 1]", "(join []) -> []", "(join [[0] [7 6 6 3] [9 1 7]]) -> [0 7 6 6 3 9 1 7]", "(join [[5 2 3 7 2] [6 0 7] [7 6 9 8 0]]) -> [5 2 3 7 2 6 0 7 7 6 9 8 0]", "(join [[1 8 5 8 5] []]) -> [1 8 5 8 5]"], "name": "join"}
{"time": 4.625591, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[1 7 0] [7 5 3 7 8] [2]]) -> [1 7 0 7 5 3 7 8 2]", "(join []) -> []", "(join [[7 6 6 9 0] [7 9 9] [8 9 1 0] [8]]) -> [7 6 6 9 0 7 9 9 8 9 1 0 8]", "(join [[7 9 2] [0 1 6 3]]) -> [7 9 2 0 1 6 3]"], "name": "join"}
{"time": 4.641225, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[2] [3 4] [6 6 9 2 1] [8 5] [1 8 3 3 1]]) -> [2 3 4 6 6 9 2 1 8 5 1 8 3 3 1]", "(join [[5 7 3] [] [6 6] [6 2 2 5]]) -> [5 7 3 6 6 6 2 2 5]", "(join []) -> []", "(join []) -> []", "(join [[3] [9]]) -> [3 9]"], "name": "join"}
{"time": 2.512764, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[1]]) -> [1]", "(join [[2 0] [7 9 1 9] [2 8 8] []]) -> [2 0 7 9 1 9 2 8 8]", "(join []) -> []", "(join [[] [9 3] [5 6 4 2 2] [] [5 7]]) -> [9 3 5 6 4 2 2 5 7]"], "name": "join"}
{"time": 2.323192, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[3 2 6 4] [9 3 2]]) -> [3 2 6 4 9 3 2]", "(join [[5]]) -> [5]", "(join [[4 6 4 8 4]]) -> [4 6 4 8 4]", "(join [[5] [2 7 1 4] [1 4 0 9 1] [4 1 8 5 0]]) -> [5 2 7 1 4 1 4 0 9 1 4 1 8 5 0]"], "name": "join"}
{"time": 2.578718, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[8 8 4 1] [2 8 2 0] [] [7 5 7 6 3] [4 0 4]]) -> [8 8 4 1 2 8 2 0 7 5 7 6 3 4 0 4]", "(join [[0 1 1 7 6] [4 9] [3 9 0 9] [] [7 1 8 4]]) -> [0 1 1 7 6 4 9 3 9 0 9 7 1 8 4]", "(join [[2 2 2] [3 8 6] [7 1 9]]) -> [2 2 2 3 8 6 7 1 9]", "(join []) -> []", "(join [[5 9 3 1 3] [0 9 8 1 7] [3 2 6 7] [9 1] [7]]) -> [5 9 3 1 3 0 9 8 1 7 3 2 6 7 9 1 7]"], "name": "join"}
{"time": 3.051308, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[0 8 5 6 3] [7 5 6 8 4] [8 3 5 7] [3]]) -> [0 8 5 6 3 7 5 6 8 4 8 3 5 7 3]", "(join [[1 2 5] [0] [2]]) -> [1 2 5 0 2]", "(join [[7 6] [8 1 9 8 2]]) -> [7 6 8 1 9 8 2]", "(join []) -> []", "(join [[0] [4 9 3 1 8] [1 1] [7 7 3]]) -> [0 4 9 3 1 8 1 1 7 7 3]"], "name": "join"}
{"time": 3.455132, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[3 8] [5 3 1]]) -> [3 8 5 3 1]", "(join [[6 1] [7] [4 7 5] [5 9 4 4 3] [6 6 3 9]]) -> [6 1 7 4 7 5 5 9 4 4 3 6 6 3 9]", "(join [[8 0 3] [8]]) -> [8 0 3 8]", "(join [[] [9 6 0 7] [] [0 8 4 3 8]]) -> [9 6 0 7 0 8 4 3 8]", "(join [[1 8 9 2 0] [6 5 0]]) -> [1 8 9 2 0 6 5 0]"], "name": "join"}
{"time": 3.381232, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join []) -> []", "(join [[] [9 2 6] [8 1 5 4] [8 9]]) -> [9 2 6 8 1 5 4 8 9]", "(join [[3 4] [9 3 0 9 9] [0] []]) -> [3 4 9 3 0 9 9 0]", "(join [[9 3 2] []]) -> [9 3 2]"], "name": "join"}
{"time": 3.153622, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[2 5 7] [4 3 4 9 4]]) -> [2 5 7 4 3 4 9 4]", "(join [[5] [1 0 8] [] [2 5]]) -> [5 1 0 8 2 5]", "(join [[8 7 2 8 6] [] [9] []]) -> [8 7 2 8 6 9]", "(join [[7] [4 3 6 3] [9 4 7 9 7] [6] [7 6 2]]) -> [7 4 3 6 3 9 4 7 9 7 6 7 6 2]", "(join [[5 4 3 2 0] [2 4 2]]) -> [5 4 3 2 0 2 4 2]"], "name": "join"}
{"time": 2.526164, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[7 1 0] [9 4 6 8 3]]) -> [7 1 0 9 4 6 8 3]", "(join [[5 9] [2 8 9 2] [2 9 7 0 7]]) -> [5 9 2 8 9 2 2 9 7 0 7]", "(join [[9 8] [7 6 0 9] [4 4 3]]) -> [9 8 7 6 0 9 4 4 3]", "(join [[8 6 0]]) -> [8 6 0]", "(join [[9 6 1 6]]) -> [9 6 1 6]"], "name": "join"}
{"time": 3.281026, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[8 9 5]]) -> [8 9 5]", "(join [[]]) -> []", "(join [[1 6 6 4] [9 7 6 6] [2 2] [1 4 5 5 9]]) -> [1 6 6 4 9 7 6 6 2 2 1 4 5 5 9]", "(join [[] [1 8 7 5] [8 9 3 0]]) -> [1 8 7 5 8 9 3 0]"], "name": "join"}
{"time": 3.859174, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[2 4] [9 4] []]) -> [2 4 9 4]", "(join [[9 2] [] [4 6] [3 3 9 1] [9 6]]) -> [9 2 4 6 3 3 9 1 9 6]", "(join [[4 4 1 8] [7 8 4 6 2] [9]]) -> [4 4 1 8 7 8 4 6 2 9]", "(join [[5 2 7] [0]]) -> [5 2 7 0]", "(join [[7 5 0]]) -> [7 5 0]"], "name": "join"}
{"time": 4.390309, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[3 4 7 4 9] [1 1 6 3 3] [] [2 0 2] [2 4]]) -> [3 4 7 4 9 1 1 6 3 3 2 0 2 2 4]", "(join [[1]]) -> [1]", "(join [[8] [] [1 8 8] []]) -> [8 1 8 8]", "(join [[2 1 3 6] [5 9 4 1] [8 4 4 5 5] [7 8 3 1] [6 4 0 1]]) -> [2 1 3 6 5 9 4 1 8 4 4 5 5 7 8 3 1 6 4 0 1]", "(join []) -> []"], "name": "join"}
{"time": 2.955728, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[6 4 9] [2]]) -> [6 4 9 2]", "(join [[6 8] [6 6] [2 7] [7] [6 0 1 0 2]]) -> [6 8 6 6 2 7 7 6 0 1 0 2]", "(join [[7 7 2 6 7] [1 1 4] [7 1]]) -> [7 7 2 6 7 1 1 4 7 1]", "(join [[7 0] [5 4] [8 8 9 4] [4] [3 6 3]]) -> [7 0 5 4 8 8 9 4 4 3 6 3]", "(join [[]]) -> []"], "name": "join"}
{"time": 3.893734, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[1 5] [0] [8 3 5 1] [2 8]]) -> [1 5 0 8 3 5 1 2 8]", "(join [[8 4 6 1 3] [9 8 2 1] [6 9]]) -> [8 4 6 1 3 9 8 2 1 6 9]", "(join [[1 4 9 3] [9 0 1 8 4]]) -> [1 4 9 3 9 0 1 8 4]", "(join [[] [] [5 9] []]) -> [5 9]", "(join [[5 6 8 7 5] [2] [3 3 8] [6 9]]) -> [5 6 8 7 5 2 3 3 8 6 9]"], "name": "join"}
{"time": 3.974945, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[7 7 1 6] [9 6 4 3 9] [6 7] [6 5] [9]]) -> [7 7 1 6 9 6 4 3 9 6 7 6 5 9]", "(join [[4 6 1 8 2] [3 7 6]]) -> [4 6 1 8 2 3 7 6]", "(join [[6 0 6 3 7] [0]]) -> [6 0 6 3 7 0]", "(join [[0 0 1] [2 8 5] [1 9 0 7]]) -> [0 0 1 2 8 5 1 9 0 7]", "(join [[0 7 8] [8]]) -> [0 7 8 8]"], "name": "join"}
{"time": 3.60801, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[] [3 6] [9 1 1 9] [5 1 7 3]]) -> [3 6 9 1 1 9 5 1 7 3]", "(join []) -> []", "(join [[8 8 7 6 8] [2 4 3] [3]]) -> [8 8 7 6 8 2 4 3 3]", "(join [[] [] [6 0 7 4]]) -> [6 0 7 4]", "(join [[2 1 4 8 1] [8 8 3 3 6] [9] [7 3 2 6 6] [3 4 1 8 8]]) -> [2 1 4 8 1 8 8 3 3 6 9 7 3 2 6 6 3 4 1 8 8]"], "name": "join"}
{"time": 3.805328, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[3 0 6] [0 9 9 9] [5 5 7 5]]) -> [3 0 6 0 9 9 9 5 5 7 5]", "(join [[6 5 5] []]) -> [6 5 5]", "(join [[3 3 7 7 1] [8]]) -> [3 3 7 7 1 8]", "(join [[1 5 9 3]]) -> [1 5 9 3]", "(join [[] [6 7 0 4 5]]) -> [6 7 0 4 5]"], "name": "join"}
{"time": 3.027503, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[9 2 3]]) -> [9 2 3]", "(join [[] [2] [8 5] []]) -> [2 8 5]", "(join [[8 9 3 7]]) -> [8 9 3 7]", "(join []) -> []", "(join [[4] [5 6 9 5 7] []]) -> [4 5 6 9 5 7]"], "name": "join"}
{"time": 3.063317, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[9 2 4] []]) -> [9 2 4]", "(join [[0 4 8 9 7] [8 1] [1 9 3 3]]) -> [0 4 8 9 7 8 1 1 9 3 3]", "(join []) -> []", "(join [[5 9]]) -> [5 9]", "(join [[4 3 4] [7 3 9] [1] []]) -> [4 3 4 7 3 9 1]"], "name": "join"}
{"time": 2.344843, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[3 1 6] [6 5]]) -> [3 1 6 6 5]", "(join [[2 8 8 4 6] [9 7 6 3]]) -> [2 8 8 4 6 9 7 6 3]", "(join [[] [] [7 7 0 8] [5 8 5] [1]]) -> [7 7 0 8 5 8 5 1]", "(join [[1] [1 0 7 0]]) -> [1 1 0 7 0]", "(join []) -> []"], "name": "join"}
{"time": 3.017732, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[8]]) -> [8]", "(join [[6 0 3 9] [0] [0 6 0 1] [] [1]]) -> [6 0 3 9 0 0 6 0 1 1]", "(join [[] [] [4 4 6 9] [] [3 6 3 1 4]]) -> [4 4 6 9 3 6 3 1 4]", "(join []) -> []", "(join [[5 9]]) -> [5 9]"], "name": "join"}
{"time": 2.194199, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[2] []]) -> [2]", "(join []) -> []", "(join [[6] [4 8] []]) -> [6 4 8]", "(join [[3 2] [9 0 3 6] [0 9]]) -> [3 2 9 0 3 6 0 9]", "(join [[9 7] [] [2 4 1 3 2] [5]]) -> [9 7 2 4 1 3 2 5]"], "name": "join"}
{"time": 3.787703, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[9 9 5 1] [] [7 4] [] [4 3 6 6]]) -> [9 9 5 1 7 4 4 3 6 6]", "(join [[7] [] [1 8 1]]) -> [7 1 8 1]", "(join []) -> []", "(join [[5 3 1]]) -> [5 3 1]", "(join [[] [5] [8 1 1 2] [8 3 1 3 9] [0 8 8 3 2]]) -> [5 8 1 1 2 8 3 1 3 9 0 8 8 3 2]"], "name": "join"}
{"time": 2.626863, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[0 6 4 1 0]]) -> [0 6 4 1 0]", "(join [[1 4 4] [6 4 4] [7 5 6 7 1]]) -> [1 4 4 6 4 4 7 5 6 7 1]", "(join [[] [0 2 9]]) -> [0 2 9]", "(join [[1 3 7 9]]) -> [1 3 7 9]", "(join [[7 4 3 3 5]]) -> [7 4 3 3 5]"], "name": "join"}
{"time": 4.393639, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[2 4] [6 5 4 1 6] [6] [2 9 8] [2 4 8]]) -> [2 4 6 5 4 1 6 6 2 9 8 2 4 8]", "(join []) -> []", "(join []) -> []", "(join [[] [] [5 0 2 2 0] []]) -> [5 0 2 2 0]", "(join [[7 1 2 9 5] [] [9]]) -> [7 1 2 9 5 9]"], "name": "join"}
{"time": 2.612563, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[] [4]]) -> [4]", "(join [[8] [0 5 4] [8 3 5 2]]) -> [8 0 5 4 8 3 5 2]", "(join [[] [2] [8 7 1]]) -> [2 8 7 1]", "(join [[5] [6 8 9] [0]]) -> [5 6 8 9 0]", "(join [[2] [] [7 7 2]]) -> [2 7 7 2]"], "name": "join"}
{"time": 3.633956, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[6 6 3 5]]) -> [6 6 3 5]", "(join [[9 0 3 0]]) -> [9 0 3 0]", "(join [[8 7] [0 9 5 9 6] [0 9] [9 1 4]]) -> [8 7 0 9 5 9 6 0 9 9 1 4]", "(join [[8 1 5 9 7] [6]]) -> [8 1 5 9 7 6]", "(join [[7 9 2 7]]) -> [7 9 2 7]"], "name": "join"}
{"time": 3.663843, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldl d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[] [0 2 7] [] []]) -> [0 2 7]", "(join [[3]]) -> [3]", "(join [[8 3 1 5 3] [] [6 8 5 1]]) -> [8 3 1 5 3 6 8 5 1]", "(join [[2 2 6 5] [] [6 7 2 3 0]]) -> [2 2 6 5 6 7 2 3 0]"], "name": "join"}
{"time": 3.651947, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[5 6 3 8] [] [5 4]]) -> [5 6 3 8 5 4]", "(join [[4 4 0] [9 8 1 4]]) -> [4 4 0 9 8 1 4]", "(join []) -> []", "(join [[5 7 8 9 2] [1 5 6 2] [8 7 4 7]]) -> [5 7 8 9 2 1 5 6 2 8 7 4 7]", "(join [[] [6]]) -> [6]"], "name": "join"}
{"time": 3.987329, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[2 1 1] [8 2 6]]) -> [2 1 1 8 2 6]", "(join [[4 1 6 7] [2 3 3]]) -> [4 1 6 7 2 3 3]", "(join [[3 1 2 6 7] [0 1] [5 2 5 6 1]]) -> [3 1 2 6 7 0 1 5 2 5 6 1]", "(join [[5 7] [7 1 0 8] [7 5 4 9 5] [8 8 3 7] [7 1 6 5]]) -> [5 7 7 1 0 8 7 5 4 9 5 8 8 3 7 7 1 6 5]", "(join []) -> []"], "name": "join"}
{"time": 3.251331, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[] [] [] [0 7] [4]]) -> [0 7 4]", "(join [[0 8] [7 7 6] [5 9 8 1]]) -> [0 8 7 7 6 5 9 8 1]", "(join [[8 1 9] [4] [3] [] [5 4 7 0]]) -> [8 1 9 4 3 5 4 7 0]", "(join [[4 5 4] [] [] [] []]) -> [4 5 4]", "(join []) -> []"], "name": "join"}
{"time": 4.174349, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[4 3 1 1] [6] [1 5] [4]]) -> [4 3 1 1 6 1 5 4]", "(join []) -> []", "(join [[]]) -> []", "(join [[7 9 4 4 0]]) -> [7 9 4 4 0]", "(join [[0 5 7 9 9] [5 5 8] []]) -> [0 5 7 9 9 5 5 8]"], "name": "join"}
{"time": 4.334382, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[8 3 0] [] [] [3 8 0]]) -> [8 3 0 3 8 0]", "(join [[5] [3 6 1 2] []]) -> [5 3 6 1 2]", "(join [[7] [2 6 6 5 0] [7 3 3 4 4]]) -> [7 2 6 6 5 0 7 3 3 4 4]", "(join [[7 5 0] [1 9 7] []]) -> [7 5 0 1 9 7]", "(join [[2 9] [7 3 1] [0]]) -> [2 9 7 3 1 0]"], "name": "join"}
{"time": 2.799407, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[6] [4 7 3] [5 6 9 6 6] [8 4 8] [6]]) -> [6 4 7 3 5 6 9 6 6 8 4 8 6]", "(join []) -> []", "(join [[9 8 5] [3 3 9] [5 1 4 3] [0]]) -> [9 8 5 3 3 9 5 1 4 3 0]", "(join [[4 2 8] []]) -> [4 2 8]", "(join [[2 0 1 8] [0 2 8 5] []]) -> [2 0 1 8 0 2 8 5]"], "name": "join"}
{"time": 2.628962, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[6 2] [8 5 6 1] [] [9 9 9 7] [8 9 7 8 4]]) -> [6 2 8 5 6 1 9 9 9 7 8 9 7 8 4]", "(join [[5 2 2 8] [7 0 4 2] [5]]) -> [5 2 2 8 7 0 4 2 5]", "(join [[4 3 8 7 3] [9 4 6 3 0] [6 7]]) -> [4 3 8 7 3 9 4 6 3 0 6 7]", "(join [[0 6 8 2 1] [1 3 9] [5 7 7 5 8]]) -> [0 6 8 2 1 1 3 9 5 7 7 5 8]", "(join []) -> []"], "name": "join"}
{"time": 2.447432, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[4] [6 5 1 9 1] [6 2]]) -> [4 6 5 1 9 1 6 2]", "(join [[3 7]]) -> [3 7]", "(join [[7 7 4] [4 2] [0 9 1 7] [3 5 0 3] [8]]) -> [7 7 4 4 2 0 9 1 7 3 5 0 3 8]", "(join [[2 2 2 4 5] [7] [6 0] [8 8 0]]) -> [2 2 2 4 5 7 6 0 8 8 0]", "(join [[]]) -> []"], "name": "join"}
{"time": 2.634052, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[8 3 2 2 7] [1] [2 0 3] [6] [9 8 5 9]]) -> [8 3 2 2 7 1 2 0 3 6 9 8 5 9]", "(join [[5 2 0]]) -> [5 2 0]", "(join [[6 9 5 0] [6 7] [0 3] [2 5] [6 0 2 3 0]]) -> [6 9 5 0 6 7 0 3 2 5 6 0 2 3 0]", "(join [[3 3 0 3] [4 8 5 8] [1 1 4 6] []]) -> [3 3 0 3 4 8 5 8 1 1 4 6]", "(join []) -> []"], "name": "join"}
{"time": 3.609177, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[2 2 5 1 5] [7 7 4 5 3] [5] [4] []]) -> [2 2 5 1 5 7 7 4 5 3 5 4]", "(join [[]]) -> []", "(join [[1] [7 8 2] [8 1 1 6 9] [5 8 1 6] [6]]) -> [1 7 8 2 8 1 1 6 9 5 8 1 6 6]", "(join []) -> []", "(join [[3 9 7] [] [1 3]]) -> [3 9 7 1 3]"], "name": "join"}
{"time": 3.601695, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[7 8] [3 5 3 0]]) -> [7 8 3 5 3 0]", "(join [[4 6 0]]) -> [4 6 0]", "(join [[1 1] [] [5 2 0] []]) -> [1 1 5 2 0]", "(join [[5]]) -> [5]", "(join [[4 9 3] [5] [0 5 3] [5 5 2 3] [4 3 1 6]]) -> [4 9 3 5 0 5 3 5 5 2 3 4 3 1 6]"], "name": "join"}
{"time": 3.368397, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[2] [8 5 6] [3 0 3]]) -> [2 8 5 6 3 0 3]", "(join [[4 0 7 5] [5 2 9 2 1] [4]]) -> [4 0 7 5 5 2 9 2 1 4]", "(join [[6 5 3] [5 9 9]]) -> [6 5 3 5 9 9]", "(join []) -> []", "(join [[4 1] [2 1 0 9 5] []]) -> [4 1 2 1 0 9 5]"], "name": "join"}
{"time": 3.729305, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[7 4 8 7] [4]]) -> [7 4 8 7 4]", "(join [[8 3 7] [9 6] [] [8 1 9 5] [1 9]]) -> [8 3 7 9 6 8 1 9 5 1 9]", "(join [[2 1 3 5] [9 9 0 3 2] [0 4 9]]) -> [2 1 3 5 9 9 0 3 2 0 4 9]", "(join [[0 4] [6 8 9 3 0] [1 9 4 6 3] [2 3 1 2 5] []]) -> [0 4 6 8 9 3 0 1 9 4 6 3 2 3 1 2 5]", "(join [[0 2 1] [] [5 1 9] [4 9 7]]) -> [0 2 1 5 1 9 4 9 7]"], "name": "join"}
{"time": 3.638097, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[5 1] [] [0 0] [8 5 9 7] [0 2 8 7 0]]) -> [5 1 0 0 8 5 9 7 0 2 8 7 0]", "(join [[8 5]]) -> [8 5]", "(join [[2 5 1 5 4] [7 5 5] [6 1 5 4 9] [5]]) -> [2 5 1 5 4 7 5 5 6 1 5 4 9 5]", "(join [[8 8 3 8] [0] [1 3]]) -> [8 8 3 8 0 1 3]", "(join [[] [] [5 2] [1 4]]) -> [5 2 1 4]"], "name": "join"}
{"time": 2.9907, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[4] [6 7 9 3] [] [6 2 4 1] [1 2 6]]) -> [4 6 7 9 3 6 2 4 1 1 2 6]", "(join [[9 6] [8 7 7 9] [2 1 9 3 7] [9 7]]) -> [9 6 8 7 7 9 2 1 9 3 7 9 7]", "(join [[8]]) -> [8]", "(join [[6 9] [0] []]) -> [6 9 0]", "(join [[2 1 9] [9] [5]]) -> [2 1 9 9 5]"], "name": "join"}
{"time": 4.024379, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[0 1 2 3] [7] [6 0] [2 4 8 6]]) -> [0 1 2 3 7 6 0 2 4 8 6]", "(join [[] [5 1] [0 0 8] [1 4 6 0 6]]) -> [5 1 0 0 8 1 4 6 0 6]", "(join []) -> []", "(join [[4 3 1 5 6] [4 6 3] [6 4]]) -> [4 3 1 5 6 4 6 3 6 4]", "(join []) -> []"], "name": "join"}
{"time": 3.900278, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[9]]) -> [9]", "(join [[7 1 9] [7 9 9] [3 6]]) -> [7 1 9 7 9 9 3 6]", "(join [[0] [8 5 5 2 1] [5 3]]) -> [0 8 5 5 2 1 5 3]", "(join [[0 5 9] [3 6 8 7]]) -> [0 5 9 3 6 8 7]"], "name": "join"}
{"time": 3.004445, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[8] [6 5]]) -> [8 6 5]", "(join [[8 6] [5 8]]) -> [8 6 5 8]", "(join [[9 3 8 6 5]]) -> [9 3 8 6 5]", "(join [[5 7] [0 7 8 6] [3 3 8 3 4]]) -> [5 7 0 7 8 6 3 3 8 3 4]", "(join [[8 1] []]) -> [8 1]"], "name": "join"}
{"time": 3.200514, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[9 6 8 1] [3 8 0] [2 7 1 1] [1] [7]]) -> [9 6 8 1 3 8 0 2 7 1 1 1 7]", "(join [[4 8 2 5] [5 5 9 5] [6 1 4 2] [8 4 5 6 8] []]) -> [4 8 2 5 5 5 9 5 6 1 4 2 8 4 5 6 8]", "(join [[] [9 4 3 5 1] []]) -> [9 4 3 5 1]", "(join [[1 2 0] [8 2] [0 7 9]]) -> [1 2 0 8 2 0 7 9]", "(join [[7 1 4] [8 7 0] [3]]) -> [7 1 4 8 7 0 3]"], "name": "join"}
{"time": 3.287612, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[8 3 1] [0 3]]) -> [8 3 1 0 3]", "(join [[8 5 4 8 0] [3 4 2 2 0] [0] [4 2 6 5 8] []]) -> [8 5 4 8 0 3 4 2 2 0 0 4 2 6 5 8]", "(join []) -> []", "(join [[5 6 0 1 5]]) -> [5 6 0 1 5]", "(join [[0 2 4 3] [4 0] [6 1]]) -> [0 2 4 3 4 0 6 1]"], "name": "join"}
{"time": 3.252711, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[6 6] [8] [1 2] []]) -> [6 6 8 1 2]", "(join [[3 3 7 2] [4 6]]) -> [3 3 7 2 4 6]", "(join [[1 2 4 6 4] [8 0 0 3 4]]) -> [1 2 4 6 4 8 0 0 3 4]", "(join [[6 4 1] [9 1] [1 2 6 2 6] [2 6]]) -> [6 4 1 9 1 1 2 6 2 6 2 6]", "(join [[]]) -> []"], "name": "join"}
{"time": 3.180393, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[6] [] []]) -> [6]", "(join []) -> []", "(join []) -> []", "(join [[] [0 6 5 3] [] [] [7 6 4]]) -> [0 6 5 3 7 6 4]", "(join [[6 0 6 0 1] [7 2]]) -> [6 0 6 0 1 7 2]"], "name": "join"}
{"time": 3.421704, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[] [2 9 5] [0 4 8 0 3]]) -> [2 9 5 0 4 8 0 3]", "(join []) -> []", "(join [[2 2] [] [6 0] [3 3]]) -> [2 2 6 0 3 3]", "(join [[6 6 8 1] [0 0 4 1 1] []]) -> [6 6 8 1 0 0 4 1 1]", "(join [[] [5] []]) -> [5]"], "name": "join"}
{"time": 3.380184, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[2] []]) -> [2]", "(join [[4] [7] [2] [9 3 9 4 2] [5]]) -> [4 7 2 9 3 9 4 2 5]", "(join [[4 0 5 9 0] [5 8 3] [5 3] [9]]) -> [4 0 5 9 0 5 8 3 5 3 9]", "(join []) -> []", "(join [[] [0] [] [8 6 8 9] [5 2]]) -> [0 8 6 8 9 5 2]"], "name": "join"}
{"time": 3.181409, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[8]]) -> [8]", "(join [[4 3 1 4 2] [6] [7] [3 1]]) -> [4 3 1 4 2 6 7 3 1]", "(join [[3 6] [1 6 5] [] [0]]) -> [3 6 1 6 5 0]", "(join []) -> []", "(join [[]]) -> []"], "name": "join"}
{"time": 3.238266, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[1] [9 5 1 7] [2] [0 6] [2 4]]) -> [1 9 5 1 7 2 0 6 2 4]", "(join [[0] [5 5 4 5 7] [5 6 3]]) -> [0 5 5 4 5 7 5 6 3]", "(join [[8 2 0 8] [6 5 0]]) -> [8 2 0 8 6 5 0]", "(join [[6] []]) -> [6]"], "name": "join"}
{"time": 3.32154, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[4 9 6 9] [0 1 7 6 1] [5] [] [0]]) -> [4 9 6 9 0 1 7 6 1 5 0]", "(join []) -> []", "(join [[5 3 4 5 5]]) -> [5 3 4 5 5]", "(join []) -> []", "(join [[4 7 6] [] [7 7 1 6 4] [3 4 6 1]]) -> [4 7 6 7 7 1 6 4 3 4 6 1]"], "name": "join"}
{"time": 2.830176, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[3 0 6 2 4] [8] [3]]) -> [3 0 6 2 4 8 3]", "(join [[6 8 6 3 9] [5 1 2 8] [4 8 0 0]]) -> [6 8 6 3 9 5 1 2 8 4 8 0 0]", "(join [[1 3 2] [5] [9 7 0 9]]) -> [1 3 2 5 9 7 0 9]", "(join [[0 5 3 3] [6 3 2 5] [7 2] [2 9 7 1]]) -> [0 5 3 3 6 3 2 5 7 2 2 9 7 1]", "(join []) -> []"], "name": "join"}
{"time": 3.999021, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[0 3 5 0 2] [1 4 4 3] []]) -> [0 3 5 0 2 1 4 4 3]", "(join [[4] [4]]) -> [4 4]", "(join [[] [3 7 2 5 9] [1]]) -> [3 7 2 5 9 1]", "(join [[]]) -> []"], "name": "join"}
{"time": 3.763752, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[6 6] [] [8 6] []]) -> [6 6 8 6]", "(join [[2] [9]]) -> [2 9]", "(join [[4 7 2 7 5] [3] [8] [5 8 7 2 1] [6 0 3 7]]) -> [4 7 2 7 5 3 8 5 8 7 2 1 6 0 3 7]", "(join []) -> []"], "name": "join"}
{"time": 3.691612, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[7 4 9 5] [8] [9 8 4 7 4] [1] [5 8 5 9 8]]) -> [7 4 9 5 8 9 8 4 7 4 1 5 8 5 9 8]", "(join [[4 8 4 1 7] [3] [0 8 1 6]]) -> [4 8 4 1 7 3 0 8 1 6]", "(join [[2 1 4 5 4] [3 5 8]]) -> [2 1 4 5 4 3 5 8]", "(join []) -> []", "(join [[5 3 1] [4 1] [4 3]]) -> [5 3 1 4 1 4 3]"], "name": "join"}
{"time": 2.278971, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[3 1 5 8] [5 8 3 4]]) -> [3 1 5 8 5 8 3 4]", "(join [[2 5 6] [1] [3 4 5] [7 6]]) -> [2 5 6 1 3 4 5 7 6]", "(join [[2 6] [] [1 3 5 5] []]) -> [2 6 1 3 5 5]", "(join [[2 0] [] [] [2 9]]) -> [2 0 2 9]", "(join [[]]) -> []"], "name": "join"}
{"time": 3.349723, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[] [9 4 7 9 0] [5 0] [5 3] [9 4 5 9 8]]) -> [9 4 7 9 0 5 0 5 3 9 4 5 9 8]", "(join [[5] [] [5 8] [5]]) -> [5 5 8 5]", "(join [[8 1 0 0 9] [3 0] [7]]) -> [8 1 0 0 9 3 0 7]", "(join [[0 5 8 8 9]]) -> [0 5 8 8 9]", "(join [[2] [] [7 1 7 4 3] [2 1]]) -> [2 7 1 7 4 3 2 1]"], "name": "join"}
{"time": 2.455051, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[9 7 5] [4 2 1 4] [6] [2 8 1] [2 9 9 3 1]]) -> [9 7 5 4 2 1 4 6 2 8 1 2 9 9 3 1]", "(join []) -> []", "(join [[6 1 5 7 3] [9 7] [] [8 8 8 9 2]]) -> [6 1 5 7 3 9 7 8 8 8 9 2]", "(join [[6]]) -> [6]", "(join [[9 8 9]]) -> [9 8 9]"], "name": "join"}
{"time": 3.592888, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[]]) -> []", "(join [[] [] [6 8 7]]) -> [6 8 7]", "(join [[1 9 7] [3] [] [0] [1]]) -> [1 9 7 3 0 1]", "(join [[9]]) -> [9]", "(join [[8 1 9 5] [0 8] [1 0 0]]) -> [8 1 9 5 0 8 1 0 0]"], "name": "join"}
{"time": 3.578842, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[0 6] [3 1 3 6 6]]) -> [0 6 3 1 3 6 6]", "(join [[3 7 7] [8 9 7 2]]) -> [3 7 7 8 9 7 2]", "(join []) -> []", "(join []) -> []", "(join []) -> []"], "name": "join"}
{"time": 3.720414, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[] [3 0 4] [8 5 6] [5 8 8 7]]) -> [3 0 4 8 5 6 5 8 8 7]", "(join [[]]) -> []", "(join [[2] [0 8 9]]) -> [2 0 8 9]", "(join [[8] [9 7 0 8] [] [2 1 5 3]]) -> [8 9 7 0 8 2 1 5 3]", "(join [[5]]) -> [5]"], "name": "join"}
{"time": 3.023932, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[4] [6 8 4 9]]) -> [4 6 8 4 9]", "(join [[8 5] [9 6 6 9] []]) -> [8 5 9 6 6 9]", "(join [[0 4 6 1 4] [7 8 9] [9 6] [9 5 1 6]]) -> [0 4 6 1 4 7 8 9 9 6 9 5 1 6]", "(join [[2 5 9 0 5] [9 1 1 6]]) -> [2 5 9 0 5 9 1 1 6]", "(join [[5 6 9 1]]) -> [5 6 9 1]"], "name": "join"}
{"time": 2.577069, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[2 7 5 3] [3 4] [1] [3 0 3 5 1] [1 2 7 2 7]]) -> [2 7 5 3 3 4 1 3 0 3 5 1 1 2 7 2 7]", "(join [[] [3 8 0 7]]) -> [3 8 0 7]", "(join []) -> []", "(join [[5] [8 2 5 3 2]]) -> [5 8 2 5 3 2]", "(join [[4 9 0 6] [5 1 3]]) -> [4 9 0 6 5 1 3]"], "name": "join"}
{"time": 3.703009, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[5 7 5] [1 0 8] []]) -> [5 7 5 1 0 8]", "(join []) -> []", "(join [[7 8 7]]) -> [7 8 7]", "(join [[2 9 7] [6 7] [3]]) -> [2 9 7 6 7 3]", "(join [[2 0 8 4 3]]) -> [2 0 8 4 3]"], "name": "join"}
{"time": 3.079682, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[3 8 4 0] [9 1 5 3] [3 5 4 3 2] [4 0] [4 5 7]]) -> [3 8 4 0 9 1 5 3 3 5 4 3 2 4 0 4 5 7]", "(join [[] [7]]) -> [7]", "(join [[4 1 1 2] [] [] [9 7 4 3] [5 9 1]]) -> [4 1 1 2 9 7 4 3 5 9 1]", "(join [[9 5 0 5] [7 3 0 7 7]]) -> [9 5 0 5 7 3 0 7 7]"], "name": "join"}
{"time": 2.225577, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[1]]) -> [1]", "(join [[] [3 8 5 5 7] [8 2 3 4] [6 5]]) -> [3 8 5 5 7 8 2 3 4 6 5]", "(join [[]]) -> []", "(join [[8 8]]) -> [8 8]", "(join []) -> []"], "name": "join"}
{"time": 1.954465, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[1 1] [7] [1 2 3 1 1]]) -> [1 1 7 1 2 3 1 1]", "(join [[5 2 8 1]]) -> [5 2 8 1]", "(join [[]]) -> []", "(join [[8 4 0 3 2] [4] [6 4 3 8 7] [3 8 8 1 1]]) -> [8 4 0 3 2 4 6 4 3 8 7 3 8 8 1 1]", "(join [[3 1 0] [0 9 4 0 8] [] [5 7]]) -> [3 1 0 0 9 4 0 8 5 7]"], "name": "join"}
{"time": 2.488455, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[6 0 1 4] [1 5 4 3] [0 7]]) -> [6 0 1 4 1 5 4 3 0 7]", "(join []) -> []", "(join [[] [8 0] [6] []]) -> [8 0 6]", "(join []) -> []", "(join [[1 8 1]]) -> [1 8 1]"], "name": "join"}
{"time": 4.248791, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[3 0 7 5] [6 8 6 6 1] [5 1 0]]) -> [3 0 7 5 6 8 6 6 1 5 1 0]", "(join []) -> []", "(join [[5 1 7 6 3] [6 4 0] [7 4 8] [9] [7 5 2 8]]) -> [5 1 7 6 3 6 4 0 7 4 8 9 7 5 2 8]", "(join [[4 5 1 6] [4]]) -> [4 5 1 6 4]", "(join [[4 7 1 2] [7 7 3] [9 3 2 9 8] [6 6 6]]) -> [4 7 1 2 7 7 3 9 3 2 9 8 6 6 6]"], "name": "join"}
{"time": 4.430684, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[]]) -> []", "(join [[9 1 3 0 1]]) -> [9 1 3 0 1]", "(join [[3 0] [] []]) -> [3 0]", "(join [[6 7 7 6] [5 2 4 9] [7 7 3 8] []]) -> [6 7 7 6 5 2 4 9 7 7 3 8]", "(join [[2 4]]) -> [2 4]"], "name": "join"}
{"time": 4.334861, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[]]) -> []", "(join [[1] [1 1 8] [5 0 7] [1 3] [7]]) -> [1 1 1 8 5 0 7 1 3 7]", "(join []) -> []", "(join [[] [4 6 3 6] [] [] [3]]) -> [4 6 3 6 3]", "(join [[6 1 0 0 9] [] [1 5]]) -> [6 1 0 0 9 1 5]"], "name": "join"}
{"time": 3.26013, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[9 6 6 7]]) -> [9 6 6 7]", "(join []) -> []", "(join [[] [1 7] [5] [] [6 9 9 0 7]]) -> [1 7 5 6 9 9 0 7]", "(join []) -> []", "(join [[0 3 2] [] [6 4 3] [7 2 8 7 1]]) -> [0 3 2 6 4 3 7 2 8 7 1]"], "name": "join"}
{"time": 3.524054, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[0 5 3] [9] [8 5 3] [8 6]]) -> [0 5 3 9 8 5 3 8 6]", "(join [[] [] [8 8] []]) -> [8 8]", "(join []) -> []", "(join []) -> []", "(join [[4 2] [6]]) -> [4 2 6]"], "name": "join"}
{"time": 2.074342, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[2 2] [6]]) -> [2 2 6]", "(join [[] [] [3 7 6 9 3] [5 9 8] [1]]) -> [3 7 6 9 3 5 9 8 1]", "(join [[7 7 7 8 0] [1 5 5] [1 7 1 6] [9 8 3 1]]) -> [7 7 7 8 0 1 5 5 1 7 1 6 9 8 3 1]", "(join [[4 3 0 0]]) -> [4 3 0 0]", "(join [[] [4 4 8 9] [7 7 8] [4 8 9 8 1]]) -> [4 4 8 9 7 7 8 4 8 9 8 1]"], "name": "join"}
{"time": 2.858496, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[] [5 7] [5] [7]]) -> [5 7 5 7]", "(join []) -> []", "(join []) -> []", "(join [[] [0 6 6]]) -> [0 6 6]", "(join [[0 8 7 3] [5 6 1 3 9] [8 2 5 6 9] [5 3 1 0] [7 3 8]]) -> [0 8 7 3 5 6 1 3 9 8 2 5 6 9 5 3 1 0 7 3 8]"], "name": "join"}
{"time": 3.009904, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[6] [] [0 4] [3]]) -> [6 0 4 3]", "(join [[5 8]]) -> [5 8]", "(join [[4] [7] [2]]) -> [4 7 2]", "(join [[]]) -> []", "(join []) -> []"], "name": "join"}
{"time": 1.943387, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[8 2 9 4] [7 6 3]]) -> [8 2 9 4 7 6 3]", "(join [[4 3 0] [] [2 7 8] [2]]) -> [4 3 0 2 7 8 2]", "(join [[1 4 4 2 7]]) -> [1 4 4 2 7]", "(join [[1 5 6 2] [6 7] [2 7 5] []]) -> [1 5 6 2 6 7 2 7 5]", "(join [[0 6 9] [9] [0] [8]]) -> [0 6 9 9 0 8]"], "name": "join"}
{"time": 2.951974, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[1 9 9 4] [4 8] [6 8] [9 6 1 2] [1]]) -> [1 9 9 4 4 8 6 8 9 6 1 2 1]", "(join [[9 3 9 9]]) -> [9 3 9 9]", "(join []) -> []", "(join [[2 8 7] [2 5 8 4] [9] []]) -> [2 8 7 2 5 8 4 9]", "(join [[8 3 3 0 4] [6 5] [8]]) -> [8 3 3 0 4 6 5 8]"], "name": "join"}
{"time": 2.176215, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[1 7 7] []]) -> [1 7 7]", "(join [[8 7 3]]) -> [8 7 3]", "(join [[6 1] [] [1] [8 9 9 4] [1 9 7 7 6]]) -> [6 1 1 8 9 9 4 1 9 7 7 6]", "(join [[7 6 7 5]]) -> [7 6 7 5]", "(join [[6 7] [3 2] [3] [5 1 0 3]]) -> [6 7 3 2 3 5 1 0 3]"], "name": "join"}
{"time": 1.379609, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[8 1 5]]) -> [8 1 5]", "(join [[1] [6 2 2 5 2] [0 5 4 6] [8] [9 5]]) -> [1 6 2 2 5 2 0 5 4 6 8 9 5]", "(join [[] [8 3 9 4] [5 9 1] [6 1 2 7 7]]) -> [8 3 9 4 5 9 1 6 1 2 7 7]", "(join []) -> []", "(join [[5 2] [9 8 7] [3 1 5 5]]) -> [5 2 9 8 7 3 1 5 5]"], "name": "join"}
{"time": 2.546301, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[1 7 9 0 7] [5 9 6] [1 8 3 2 5] [0 1 4] [6 7 7 2]]) -> [1 7 9 0 7 5 9 6 1 8 3 2 5 0 1 4 6 7 7 2]", "(join [[9 6] [7 3 9] [5 7] [1 8] [2 0 3 4 9]]) -> [9 6 7 3 9 5 7 1 8 2 0 3 4 9]", "(join [[6 6 1 5] []]) -> [6 6 1 5]", "(join []) -> []"], "name": "join"}
