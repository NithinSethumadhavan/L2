{"name": "max", "examples": ["(max [3]) -> 3", "(max [4 5]) -> 5", "(max [5 4]) -> 5", "(max [1]) -> 1", "(max [9 9]) -> 9", "(max [7 2]) -> 7", "(max [2 5]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.147508}
{"name": "max", "examples": ["(max [6 3 7 8]) -> 8", "(max [5 3 3 0 7]) -> 7", "(max [0 3 1 4]) -> 4", "(max [1 5 7]) -> 7", "(max [8 0 1 9]) -> 9", "(max [1 4 9 5]) -> 9", "(max [3 0]) -> 3"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.319627}
{"name": "max", "examples": ["(max [1 5 2 8 6]) -> 8", "(max [0 4 8 3]) -> 8", "(max [4 7 0 2 1]) -> 7", "(max [3 4]) -> 4", "(max [3 8 1]) -> 8", "(max [8 2 5 3]) -> 8", "(max [7 8]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.511144}
{"name": "max", "examples": ["(max [9 1]) -> 9", "(max [8 5 9 5]) -> 9", "(max [7 5 6]) -> 7", "(max [7]) -> 7", "(max [5 1 9 5]) -> 9", "(max [1 5 9 2]) -> 9", "(max [5 0 5 4 4]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.387641}
{"name": "max", "examples": ["(max [8]) -> 8", "(max [3 1]) -> 3", "(max [0 9]) -> 9", "(max [6 2]) -> 6", "(max [7]) -> 7", "(max [1]) -> 1", "(max [2]) -> 2"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 0 d) c d)) 0)) _) _)", "time": 9.5224}
{"name": "max", "examples": ["(max [9 1 6 0]) -> 9", "(max [9]) -> 9", "(max [9 1 6 1]) -> 9", "(max [4 9 5]) -> 9", "(max [3 5 7 4]) -> 7", "(max [5 8 2 6 2]) -> 8", "(max [9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.101915}
{"name": "max", "examples": ["(max [2 6]) -> 6", "(max [7 3]) -> 7", "(max [1]) -> 1", "(max [7 3 4]) -> 7", "(max [0 2 7 2 2]) -> 7", "(max [8]) -> 8", "(max [1 8 6 1 7]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.234372}
{"name": "max", "examples": ["(max [7 0 9 7]) -> 9", "(max [5 9]) -> 9", "(max [4]) -> 4", "(max [1 7 5 1 7]) -> 7", "(max [8 1 1 5]) -> 8", "(max [8 7]) -> 8", "(max [2 2 2 7]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.267414}
{"name": "max", "examples": ["(max [7 0 7 9 6]) -> 9", "(max [8 3 1]) -> 8", "(max [0 3 6]) -> 6", "(max [1 9 9 6]) -> 9", "(max [0 6]) -> 6", "(max [8 6 3 6 9]) -> 9", "(max [4 0]) -> 4"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.554112}
{"name": "max", "examples": ["(max [2]) -> 2", "(max [6 3 2]) -> 6", "(max [7 2 7 8 3]) -> 8", "(max [2]) -> 2", "(max [4]) -> 4", "(max [2 6 9 2 6]) -> 9", "(max [5 0 9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.519279}
{"name": "max", "examples": ["(max [8]) -> 8", "(max [4 0]) -> 4", "(max [0 9 3 9 8]) -> 9", "(max [5]) -> 5", "(max [3 4 7]) -> 7", "(max [3 7 7 0]) -> 7", "(max [8 8 4 9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.593192}
{"name": "max", "examples": ["(max [6 7]) -> 7", "(max [5 5]) -> 5", "(max [7 8 6 0 4]) -> 8", "(max [4 6 5 5]) -> 6", "(max [1 4 1 8]) -> 8", "(max [8 4 0 3]) -> 8", "(max [9 6]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.951218}
{"name": "max", "examples": ["(max [8]) -> 8", "(max [5 3 5]) -> 5", "(max [3 3 6 2 8]) -> 8", "(max [3]) -> 3", "(max [5]) -> 5", "(max [6 9 3]) -> 9", "(max [0 9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.957317}
{"name": "max", "examples": ["(max [2 5 4]) -> 5", "(max [7 3 1 2 7]) -> 7", "(max [7 2]) -> 7", "(max [4]) -> 4", "(max [5]) -> 5", "(max [8 0 3 9]) -> 9", "(max [5 9 3 7]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.893772}
{"name": "max", "examples": ["(max [3 4 0 3]) -> 4", "(max [7 6 5]) -> 7", "(max [2 4 9 4 9]) -> 9", "(max [1]) -> 1", "(max [0 8]) -> 8", "(max [3 8]) -> 8", "(max [1]) -> 1"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 11.303495}
{"name": "max", "examples": ["(max [9 1 0 7 4]) -> 9", "(max [4 2 7]) -> 7", "(max [9 0 7 2 3]) -> 9", "(max [5]) -> 5", "(max [2 6 0 9]) -> 9", "(max [5]) -> 5", "(max [5 1 4]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 11.208595}
{"name": "max", "examples": ["(max [6 6 9]) -> 9", "(max [7 5 9 1 8]) -> 9", "(max [3 1 5]) -> 5", "(max [7 3 9 3]) -> 9", "(max [0 8 9 7]) -> 9", "(max [4]) -> 4", "(max [0 0 1 1 4]) -> 4"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.126504}
{"name": "max", "examples": ["(max [0 6]) -> 6", "(max [4]) -> 4", "(max [1 3 4]) -> 4", "(max [0 9 4]) -> 9", "(max [8 1 8]) -> 8", "(max [2]) -> 2", "(max [1 2 1 6 5]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.793546}
{"name": "max", "examples": ["(max [2]) -> 2", "(max [1 7 5 5 6]) -> 7", "(max [5 5 9 8 4]) -> 9", "(max [8 0 1]) -> 8", "(max [1 2 7 5 9]) -> 9", "(max [8 3 4 1 2]) -> 8", "(max [3 2 5 6]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.769722}
{"name": "max", "examples": ["(max [1 9]) -> 9", "(max [2 0 5 1 8]) -> 8", "(max [0 0]) -> 0", "(max [9 2 4 1 9]) -> 9", "(max [6]) -> 6", "(max [7 0 3 6 8]) -> 8", "(max [5 6 4 1]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.903673}
{"name": "max", "examples": ["(max [7 7]) -> 7", "(max [7 3 7 4 2]) -> 7", "(max [0 1 8 5 4]) -> 8", "(max [1 4 7]) -> 7", "(max [3 9 8 6]) -> 9", "(max [0 1 4 4 0]) -> 4", "(max [0]) -> 0"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.539594}
{"name": "max", "examples": ["(max [3 3 7]) -> 7", "(max [6 0]) -> 6", "(max [5 8 7]) -> 8", "(max [8]) -> 8", "(max [2]) -> 2", "(max [9 9]) -> 9", "(max [0 3 1]) -> 3"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.859581}
{"name": "max", "examples": ["(max [1 4]) -> 4", "(max [6 6 2 9]) -> 9", "(max [4 0 5]) -> 5", "(max [7]) -> 7", "(max [4 9 8]) -> 9", "(max [0]) -> 0", "(max [1]) -> 1"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.243694}
{"name": "max", "examples": ["(max [4 7 6]) -> 7", "(max [4 3 6 1]) -> 6", "(max [6 7 3]) -> 7", "(max [3 5 3 7 8]) -> 8", "(max [4 6 1 6 1]) -> 6", "(max [7 1 3]) -> 7", "(max [6 6 9 1]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.328851}
{"name": "max", "examples": ["(max [8 5 1 2 1]) -> 8", "(max [1 0 4 8]) -> 8", "(max [1 6 1 6 6]) -> 6", "(max [6 7]) -> 7", "(max [6 0]) -> 6", "(max [8 3 4]) -> 8", "(max [9 7 2 3]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.861703}
{"name": "max", "examples": ["(max [9 0 9]) -> 9", "(max [5 5]) -> 5", "(max [8 2 0 3]) -> 8", "(max [6 1 6 1]) -> 6", "(max [7]) -> 7", "(max [2 4 4]) -> 4", "(max [5]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.337391}
{"name": "max", "examples": ["(max [4 3]) -> 4", "(max [1 5 1]) -> 5", "(max [1 7]) -> 7", "(max [0]) -> 0", "(max [9 3 4]) -> 9", "(max [1 3 7 8]) -> 8", "(max [1 4 7 3 9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.126947}
{"name": "max", "examples": ["(max [2 5 9]) -> 9", "(max [7 8 6]) -> 8", "(max [9 4 4]) -> 9", "(max [7 2 8 1]) -> 8", "(max [5 6 1 5 9]) -> 9", "(max [2 9 3]) -> 9", "(max [6 4 2 8 4]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.671504}
{"name": "max", "examples": ["(max [4 0 5 8 0]) -> 8", "(max [0]) -> 0", "(max [7]) -> 7", "(max [6 0]) -> 6", "(max [3 5 9 9]) -> 9", "(max [4 7 4 3 6]) -> 7", "(max [2 4]) -> 4"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.555451}
{"name": "max", "examples": ["(max [9 7 5 1 2]) -> 9", "(max [9 9 5 2]) -> 9", "(max [7 7 0 5 2]) -> 7", "(max [7]) -> 7", "(max [1 8 6 8 2]) -> 8", "(max [7 4]) -> 7", "(max [2]) -> 2"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 1 d) c d)) 1)) _) _)", "time": 10.059783}
{"name": "max", "examples": ["(max [1 6 2 3 8]) -> 8", "(max [1 9 0 5]) -> 9", "(max [4 3 9 0 5]) -> 9", "(max [0 8 1 0]) -> 8", "(max [0 4 7 0]) -> 7", "(max [4 4]) -> 4", "(max [2 1 3]) -> 3"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.33867}
{"name": "max", "examples": ["(max [4 3 9 6]) -> 9", "(max [6 6]) -> 6", "(max [2]) -> 2", "(max [3 4 9 2]) -> 9", "(max [1 3]) -> 3", "(max [0 7 0 4 7]) -> 7", "(max [6 1]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.290738}
{"name": "max", "examples": ["(max [3 4 1 3]) -> 4", "(max [5 5 0 0]) -> 5", "(max [1 6]) -> 6", "(max [8]) -> 8", "(max [3]) -> 3", "(max [5 7]) -> 7", "(max [8]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.273833}
{"name": "max", "examples": ["(max [5 0]) -> 5", "(max [8 1 5 2 8]) -> 8", "(max [2 5]) -> 5", "(max [9 5 3 8 2]) -> 9", "(max [0]) -> 0", "(max [1]) -> 1", "(max [6 1 3 1]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.555066}
{"name": "max", "examples": ["(max [6]) -> 6", "(max [9]) -> 9", "(max [1 9 0]) -> 9", "(max [5 2 2 8 8]) -> 8", "(max [9 9 7]) -> 9", "(max [3 0 9 6 1]) -> 9", "(max [5 7 6 1 8]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.628048}
{"name": "max", "examples": ["(max [5 3 8 3]) -> 8", "(max [3 5 2]) -> 5", "(max [0]) -> 0", "(max [3]) -> 3", "(max [9 2 2]) -> 9", "(max [3 9 1 1 6]) -> 9", "(max [3 1 7]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.179791}
{"name": "max", "examples": ["(max [8 5 2 8]) -> 8", "(max [8 1 4 5 0]) -> 8", "(max [5 8]) -> 8", "(max [5 3 4]) -> 5", "(max [5 7]) -> 7", "(max [7 6 9 3]) -> 9", "(max [6 1 8]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.845737}
{"name": "max", "examples": ["(max [7 0 4]) -> 7", "(max [0 8 3 2]) -> 8", "(max [1 2 0 3]) -> 3", "(max [7 9 0 7 3]) -> 9", "(max [0 1]) -> 1", "(max [0]) -> 0", "(max [3 3 5 6 7]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 7.677339}
{"name": "max", "examples": ["(max [0]) -> 0", "(max [0 6 3]) -> 6", "(max [0]) -> 0", "(max [7]) -> 7", "(max [9 5]) -> 9", "(max [2 7 4 4]) -> 7", "(max [2]) -> 2"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.700167}
{"name": "max", "examples": ["(max [4]) -> 4", "(max [1 0 3 9 5]) -> 9", "(max [4 0]) -> 4", "(max [6 7 6 2 7]) -> 7", "(max [2 8 8]) -> 8", "(max [7 5 1]) -> 7", "(max [4 5 0]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 7.810837}
{"name": "max", "examples": ["(max [1 2 6]) -> 6", "(max [4 9]) -> 9", "(max [5]) -> 5", "(max [4 2 9 4]) -> 9", "(max [8]) -> 8", "(max [9]) -> 9", "(max [0]) -> 0"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.789327}
{"name": "max", "examples": ["(max [6 5]) -> 6", "(max [5 3 9 0 0]) -> 9", "(max [1 9 3]) -> 9", "(max [7]) -> 7", "(max [5 1 6]) -> 6", "(max [4 5 6]) -> 6", "(max [9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.567191}
{"name": "max", "examples": ["(max [1 7 7]) -> 7", "(max [7]) -> 7", "(max [6 3 1 7 2]) -> 7", "(max [8 1 1]) -> 8", "(max [1 3]) -> 3", "(max [2 9]) -> 9", "(max [2 0 6]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.935984}
{"name": "max", "examples": ["(max [9 8 0 1 1]) -> 9", "(max [7]) -> 7", "(max [4 3 3 6]) -> 6", "(max [5 2]) -> 5", "(max [1 8 0]) -> 8", "(max [4 5 0 0 4]) -> 5", "(max [0 9 7 1 3]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.361091}
{"name": "max", "examples": ["(max [9 4 9 0]) -> 9", "(max [5 5]) -> 5", "(max [3 7 6 1 5]) -> 7", "(max [8 7 4 1 8]) -> 8", "(max [0]) -> 0", "(max [7 8]) -> 8", "(max [8 9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.123451}
{"name": "max", "examples": ["(max [1 9 8 7]) -> 9", "(max [4 6 8]) -> 8", "(max [9]) -> 9", "(max [7 3 8 7 7]) -> 8", "(max [7 5 0]) -> 7", "(max [9 9]) -> 9", "(max [1 1 5 4]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.206764}
{"name": "max", "examples": ["(max [2 8 7]) -> 8", "(max [3 9 3]) -> 9", "(max [8 0 2]) -> 8", "(max [4 3 9 6]) -> 9", "(max [1 0 2 4]) -> 4", "(max [8 0]) -> 8", "(max [5 9 2]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.992571}
{"name": "max", "examples": ["(max [1 3 8 5]) -> 8", "(max [9 0 9]) -> 9", "(max [3]) -> 3", "(max [6 8 7 9 3]) -> 9", "(max [2]) -> 2", "(max [9]) -> 9", "(max [8 1 3 4 4]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.868338}
{"name": "max", "examples": ["(max [1 7 4]) -> 7", "(max [3]) -> 3", "(max [5 4]) -> 5", "(max [4 0]) -> 4", "(max [1]) -> 1", "(max [2 7 4 1]) -> 7", "(max [0]) -> 0"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.421977}
{"name": "max", "examples": ["(max [5 4]) -> 5", "(max [6 0 5]) -> 6", "(max [4 3]) -> 4", "(max [3 5]) -> 5", "(max [2]) -> 2", "(max [1 8 2]) -> 8", "(max [4 7 0]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.026984}
{"name": "max", "examples": ["(max [6 9 7 4 2]) -> 9", "(max [6 1]) -> 6", "(max [8]) -> 8", "(max [3 9 8]) -> 9", "(max [9 8 4]) -> 9", "(max [9]) -> 9", "(max [2 1]) -> 2"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.342902}
{"name": "max", "examples": ["(max [0]) -> 0", "(max [7]) -> 7", "(max [9 7]) -> 9", "(max [3 8 8 1 7]) -> 8", "(max [6 0 7]) -> 7", "(max [5 0]) -> 5", "(max [8 5 1 4 0]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.442688}
{"name": "max", "examples": ["(max [0 8]) -> 8", "(max [6 0]) -> 6", "(max [4 9 9]) -> 9", "(max [1 3 4 8 8]) -> 8", "(max [2 9 1 3]) -> 9", "(max [9 0 1 6 7]) -> 9", "(max [6 4]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.63655}
{"name": "max", "examples": ["(max [5 1 6 5]) -> 6", "(max [2 0]) -> 2", "(max [6 2 2]) -> 6", "(max [1 2 0 0 2]) -> 2", "(max [8 9 1 7]) -> 9", "(max [6]) -> 6", "(max [6 9 7 0]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.707937}
{"name": "max", "examples": ["(max [7 1 4]) -> 7", "(max [5 1 0 9 9]) -> 9", "(max [5]) -> 5", "(max [6 1 5 8 5]) -> 8", "(max [1 5]) -> 5", "(max [9 5 1 3]) -> 9", "(max [9 4 0 3]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.491504}
{"name": "max", "examples": ["(max [9 1 2]) -> 9", "(max [8 1 3 3]) -> 8", "(max [7 9]) -> 9", "(max [6 1 9 6]) -> 9", "(max [4]) -> 4", "(max [7 3]) -> 7", "(max [5]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.14296}
{"name": "max", "examples": ["(max [4 1]) -> 4", "(max [7]) -> 7", "(max [1 5 3 8 7]) -> 8", "(max [3]) -> 3", "(max [6]) -> 6", "(max [0 8]) -> 8", "(max [9 2 9 0]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 7.805184}
{"name": "max", "examples": ["(max [3 0 8 9 3]) -> 9", "(max [7 1 9 4 0]) -> 9", "(max [8 1 4]) -> 8", "(max [5 1 3]) -> 5", "(max [3]) -> 3", "(max [3 9 0]) -> 9", "(max [1 3 6 8]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.106787}
{"name": "max", "examples": ["(max [4 1]) -> 4", "(max [2 5 7 9 1]) -> 9", "(max [4 5]) -> 5", "(max [0 1 6 3]) -> 6", "(max [5 8 0]) -> 8", "(max [1 7]) -> 7", "(max [9 8 0 6 4]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.389302}
{"name": "max", "examples": ["(max [7]) -> 7", "(max [2 5 2 9 4]) -> 9", "(max [1 4 6 8]) -> 8", "(max [5]) -> 5", "(max [8]) -> 8", "(max [6]) -> 6", "(max [7 2 9 2 4]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.785087}
{"name": "max", "examples": ["(max [0 5 9]) -> 9", "(max [2 7]) -> 7", "(max [0 7]) -> 7", "(max [8 5 5]) -> 8", "(max [2 7]) -> 7", "(max [6 2]) -> 6", "(max [4 8]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.307664}
{"name": "max", "examples": ["(max [2 8 9]) -> 9", "(max [0 3]) -> 3", "(max [2 7 9]) -> 9", "(max [6 7 0 6]) -> 7", "(max [6 6 7 8]) -> 8", "(max [9 2 7 2 0]) -> 9", "(max [9 5 9 7]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.082924}
{"name": "max", "examples": ["(max [6 4 5 8 9]) -> 9", "(max [1 1]) -> 1", "(max [6]) -> 6", "(max [7]) -> 7", "(max [0]) -> 0", "(max [7 9 0 0 7]) -> 9", "(max [3]) -> 3"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.412159}
{"name": "max", "examples": ["(max [5 7 6 6 9]) -> 9", "(max [5 8 4 1]) -> 8", "(max [3 8 5 7 7]) -> 8", "(max [4]) -> 4", "(max [1]) -> 1", "(max [0 1]) -> 1", "(max [1 7]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.583598}
{"name": "max", "examples": ["(max [9]) -> 9", "(max [5 3 0 7 5]) -> 7", "(max [6]) -> 6", "(max [7 8 5 4 9]) -> 9", "(max [6 8 6 7 3]) -> 8", "(max [0]) -> 0", "(max [7 8 1 2 7]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 7.45986}
{"name": "max", "examples": ["(max [3]) -> 3", "(max [3]) -> 3", "(max [8 9 4 8]) -> 9", "(max [6 1 8 1 2]) -> 8", "(max [9]) -> 9", "(max [4 2 8]) -> 8", "(max [1 1 7 3 7]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.528444}
{"name": "max", "examples": ["(max [9 4 7]) -> 9", "(max [9]) -> 9", "(max [7 2 1]) -> 7", "(max [0 6 0]) -> 6", "(max [6 5 2 8 7]) -> 8", "(max [8 7 9 1]) -> 9", "(max [9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.141394}
{"name": "max", "examples": ["(max [7 4 6 2]) -> 7", "(max [6]) -> 6", "(max [3 8 6 4 3]) -> 8", "(max [7 4]) -> 7", "(max [8 3 9 4]) -> 9", "(max [4 0 0]) -> 4", "(max [3 4]) -> 4"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.053659}
{"name": "max", "examples": ["(max [4 4 8 1 3]) -> 8", "(max [8 1]) -> 8", "(max [9 9 6]) -> 9", "(max [8 4 1 1 2]) -> 8", "(max [3 4]) -> 4", "(max [4]) -> 4", "(max [9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.667217}
{"name": "max", "examples": ["(max [2]) -> 2", "(max [3 6 1 8]) -> 8", "(max [4 5 0]) -> 5", "(max [9 9 0 8 7]) -> 9", "(max [8 6 5 9]) -> 9", "(max [7 7]) -> 7", "(max [3 6 2 9 2]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.465233}
{"name": "max", "examples": ["(max [9 3]) -> 9", "(max [7 9 5 6]) -> 9", "(max [0 2 4 5]) -> 5", "(max [0 3 7 6]) -> 7", "(max [6 5 7]) -> 7", "(max [2 7 3 1 8]) -> 8", "(max [9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.478882}
{"name": "max", "examples": ["(max [6 5]) -> 6", "(max [6 9]) -> 9", "(max [7 7 8 5]) -> 8", "(max [5 2 0 9 8]) -> 9", "(max [5 6 7 7]) -> 7", "(max [2 2 7]) -> 7", "(max [4]) -> 4"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.980955}
{"name": "max", "examples": ["(max [5 4 8]) -> 8", "(max [3 7 7 6]) -> 7", "(max [9]) -> 9", "(max [7 8]) -> 8", "(max [0 5]) -> 5", "(max [1 1]) -> 1", "(max [6]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.77984}
{"name": "max", "examples": ["(max [9 7 9]) -> 9", "(max [6 4 6 1]) -> 6", "(max [8 6 0 4]) -> 8", "(max [6]) -> 6", "(max [5 1 9 4]) -> 9", "(max [1 3 9 6]) -> 9", "(max [9 4 9 8 2]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.649442}
{"name": "max", "examples": ["(max [7]) -> 7", "(max [0]) -> 0", "(max [4 2 4 4]) -> 4", "(max [3 7]) -> 7", "(max [2 9 1]) -> 9", "(max [1 6 4]) -> 6", "(max [8 9 1 7]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.229103}
{"name": "max", "examples": ["(max [1]) -> 1", "(max [2 7 2]) -> 7", "(max [5 9 1 8]) -> 9", "(max [3 8 6 5]) -> 8", "(max [4 8 6 6]) -> 8", "(max [5]) -> 5", "(max [3 9 9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 11.456562}
{"name": "max", "examples": ["(max [2 9]) -> 9", "(max [2]) -> 2", "(max [3]) -> 3", "(max [5 0 1 2]) -> 5", "(max [1 9 2]) -> 9", "(max [7 0 4 2 5]) -> 7", "(max [9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.799666}
{"name": "max", "examples": ["(max [7 3 4 9 8]) -> 9", "(max [8 8]) -> 8", "(max [0 7]) -> 7", "(max [8 8 5 5 0]) -> 8", "(max [3 3 7 6]) -> 7", "(max [9 5]) -> 9", "(max [4 5 1 7 9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.989485}
{"name": "max", "examples": ["(max [9 3 1]) -> 9", "(max [8 3]) -> 8", "(max [2 6 6]) -> 6", "(max [5 6]) -> 6", "(max [7 1]) -> 7", "(max [4 2 9 4 1]) -> 9", "(max [7]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.573846}
{"name": "max", "examples": ["(max [5 4 4]) -> 5", "(max [8 6]) -> 8", "(max [2 0]) -> 2", "(max [5 9 1]) -> 9", "(max [4 8]) -> 8", "(max [5 9 6]) -> 9", "(max [9 5 2]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.902483}
{"name": "max", "examples": ["(max [2]) -> 2", "(max [0 7]) -> 7", "(max [6 9]) -> 9", "(max [9 2]) -> 9", "(max [8 4 6]) -> 8", "(max [4 0 2 5]) -> 5", "(max [6]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 7.868452}
{"name": "max", "examples": ["(max [8 9]) -> 9", "(max [3 7 7 7]) -> 7", "(max [7]) -> 7", "(max [9 9 5 2 3]) -> 9", "(max [9 3 0]) -> 9", "(max [5]) -> 5", "(max [4 2 6 9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.144268}
{"name": "max", "examples": ["(max [8 6 7 7]) -> 8", "(max [2 1]) -> 2", "(max [2 8 6 2]) -> 8", "(max [3 3 0]) -> 3", "(max [7 6 2 9]) -> 9", "(max [9 4]) -> 9", "(max [1]) -> 1"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.862017}
{"name": "max", "examples": ["(max [9 5 8]) -> 9", "(max [8 5 2]) -> 8", "(max [9 7 4]) -> 9", "(max [9]) -> 9", "(max [9 3 9 4]) -> 9", "(max [0 7 8 3 4]) -> 8", "(max [8 5 1]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.024429}
{"name": "max", "examples": ["(max [2 4]) -> 4", "(max [5]) -> 5", "(max [5]) -> 5", "(max [0 1 3 4]) -> 4", "(max [9 4]) -> 9", "(max [9 7]) -> 9", "(max [1]) -> 1"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.834013}
{"name": "max", "examples": ["(max [1 6 1 0]) -> 6", "(max [3]) -> 3", "(max [2 0 3 2]) -> 3", "(max [6 9 6 9 4]) -> 9", "(max [6]) -> 6", "(max [5 7 5 7 7]) -> 7", "(max [3 1 5 9 3]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.574716}
{"name": "max", "examples": ["(max [1 8]) -> 8", "(max [2 0 6]) -> 6", "(max [2 9 6]) -> 9", "(max [2 7]) -> 7", "(max [4 6 7]) -> 7", "(max [9 2 5 7]) -> 9", "(max [0 0]) -> 0"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.837742}
{"name": "max", "examples": ["(max [2 9]) -> 9", "(max [1 0 2]) -> 2", "(max [1 5]) -> 5", "(max [2 0 1 4 0]) -> 4", "(max [5 6 2 6 9]) -> 9", "(max [1 9]) -> 9", "(max [5 9 2]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.980814}
{"name": "max", "examples": ["(max [9]) -> 9", "(max [9 6 4]) -> 9", "(max [5]) -> 5", "(max [9 9 4 0]) -> 9", "(max [8 4]) -> 8", "(max [2 7 4]) -> 7", "(max [6 0]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.67037}
{"name": "max", "examples": ["(max [4]) -> 4", "(max [9 1 3 4 8]) -> 9", "(max [6]) -> 6", "(max [6 9 6 1 7]) -> 9", "(max [3]) -> 3", "(max [4 5 0 3]) -> 5", "(max [0 9 9 1 7]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.913025}
{"name": "max", "examples": ["(max [0 1 0]) -> 1", "(max [0 4 9 2]) -> 9", "(max [9 1 0 8 3]) -> 9", "(max [8 8 0 1]) -> 8", "(max [9 4 1 0]) -> 9", "(max [1 5]) -> 5", "(max [3]) -> 3"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.628802}
{"name": "max", "examples": ["(max [4 1 6 6 6]) -> 6", "(max [8 7 0 3]) -> 8", "(max [1 9 7 2 7]) -> 9", "(max [1 0 6 8]) -> 8", "(max [2 0 1]) -> 2", "(max [6 0 8]) -> 8", "(max [8 4 4 2]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.359884}
{"name": "max", "examples": ["(max [1 6]) -> 6", "(max [9 6 9]) -> 9", "(max [7]) -> 7", "(max [8 6]) -> 8", "(max [9 6]) -> 9", "(max [5 0 3]) -> 5", "(max [2]) -> 2"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 1 d) c d)) 1)) _) _)", "time": 7.933589}
{"name": "max", "examples": ["(max [7 9]) -> 9", "(max [8 9]) -> 9", "(max [0 9 1 8 4]) -> 9", "(max [9 5 3]) -> 9", "(max [9]) -> 9", "(max [8 5 7 5]) -> 8", "(max [1 9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.054119}
{"name": "max", "examples": ["(max [4 6 3 5]) -> 6", "(max [0 2 9]) -> 9", "(max [8]) -> 8", "(max [2 4 4 5]) -> 5", "(max [0 0 7]) -> 7", "(max [6 3 0 8 9]) -> 9", "(max [9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.178623}
{"name": "max", "examples": ["(max [1 9]) -> 9", "(max [4]) -> 4", "(max [7 8 6 8]) -> 8", "(max [8 3 6 0 5]) -> 8", "(max [9 2 3 2]) -> 9", "(max [5 0 6]) -> 6", "(max [0 5 0 4]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.40299}
{"name": "max", "examples": ["(max [1]) -> 1", "(max [5 6 5]) -> 6", "(max [7 5 1]) -> 7", "(max [0]) -> 0", "(max [0 4]) -> 4", "(max [8 5]) -> 8", "(max [3]) -> 3"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 5.709865}
{"name": "max", "examples": ["(max [6 3 8 2 1]) -> 8", "(max [8 3 6 4]) -> 8", "(max [8 3 3 2]) -> 8", "(max [3 7 4 8]) -> 8", "(max [5 4 9 1 7]) -> 9", "(max [8 8]) -> 8", "(max [4 1 3 1 1]) -> 4"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 5.663988}
{"name": "max", "examples": ["(max [0 5]) -> 5", "(max [3 0 5 7 6]) -> 7", "(max [9 9]) -> 9", "(max [1 5 1 2]) -> 5", "(max [6 9 7 9]) -> 9", "(max [8 4 7]) -> 8", "(max [0]) -> 0"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 4.560454}
{"name": "max", "examples": ["(max [6]) -> 6", "(max [5]) -> 5", "(max [3 3]) -> 3", "(max [7]) -> 7", "(max [5 9 3 3 2]) -> 9", "(max [4 2 3]) -> 4", "(max [6 1 1]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 4.849947}
