{"time": 0.171603, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4}) -> [4]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 0.106326, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {}) -> []", "(leaves {7}) -> [7]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 0.176833, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {3}) -> [3]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 0.241318, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {}) -> []", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 0.163107, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 2.06125, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2 {7}}) -> [7]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (cons (value (car (children b))) [])) [])) _) _)"}
{"time": 2.407989, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {6 {6} {6}}) -> [6 6]", "(leaves {}) -> []", "(leaves {7}) -> [7]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.426087, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {2 {5 {8}} {1}}) -> [8 1]", "(leaves {7}) -> [7]", "(leaves {7 {2 {9} {8}} {6 {4}}}) -> [9 8 4]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.482652, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4 {4} {0}}) -> [4 0]", "(leaves {6}) -> [6]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.447515, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {}) -> []", "(leaves {2 {6 {3 {5} {1}} {3 {0} {3}}}}) -> [5 1 0 3]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.526029, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6 {6 {2 {8} {9}}}}) -> [8 9]", "(leaves {3}) -> [3]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.491863, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {8 {4}}) -> [4]", "(leaves {8 {7 {4}} {6 {3}}}) -> [4 3]", "(leaves {3}) -> [3]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.634022, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {3 {9}}) -> [9]", "(leaves {6 {5}}) -> [5]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)"}
{"time": 0.184873, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {}) -> []", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 2.71948, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4 {9 {0} {9}}}) -> [0 9]", "(leaves {4}) -> [4]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.865003, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {5}) -> [5]", "(leaves {1 {5} {5}}) -> [5 5]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 0.207757, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {4 {4}}) -> [4]", "(leaves {}) -> []", "(leaves {9}) -> [9]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 3.044422, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {7 {3}}) -> [3]", "(leaves {7 {2} {5}}) -> [2 5]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 3.009198, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {4 {8} {1}}) -> [8 1]", "(leaves {9}) -> [9]", "(leaves {3 {0 {6 {2}}}}) -> [2]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 3.224007, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {5 {3 {6}} {2}}) -> [6 2]", "(leaves {5 {1 {8} {5}}}) -> [8 5]", "(leaves {4 {2 {2} {5 {8} {7}}}}) -> [2 8 7]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 3.379138, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8 {0 {9} {3}}}) -> [9 3]", "(leaves {0}) -> [0]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.994277, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {5 {8}}) -> [8]", "(leaves {}) -> []", "(leaves {3 {1} {4 {7}}}) -> [1 7]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.223233, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6 {8 {9}}}) -> [9]", "(leaves {7 {4}}) -> [4]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)"}
{"time": 2.896856, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {0 {6} {6}}) -> [6 6]", "(leaves {}) -> []", "(leaves {2 {7} {9 {3} {0}}}) -> [7 3 0]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 0.135107, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {}) -> []", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 1.953162, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9 {2} {1}}) -> [2 1]", "(leaves {2 {8 {1} {3}}}) -> [1 3]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.714149, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {7 {9}}) -> [9]", "(leaves {3}) -> [3]", "(leaves {8}) -> [8]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)"}
{"time": 1.651639, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {9 {1}}) -> [1]", "(leaves {1 {0}}) -> [0]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)"}
{"time": 2.711066, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {0 {3 {8}}}) -> [8]", "(leaves {2 {1 {2} {9}}}) -> [2 9]", "(leaves {1 {3 {2}}}) -> [2]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 0.125036, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {2}) -> [2]", "(leaves {8}) -> [8]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 2.446837, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {8 {2 {4}}}) -> [4]", "(leaves {}) -> []", "(leaves {3 {0} {9 {9} {2}}}) -> [0 9 2]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.74886, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {3 {5} {6}}) -> [5 6]", "(leaves {5 {3}}) -> [3]", "(leaves {4 {3}}) -> [3]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.266644, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {5 {2 {8} {0}}}) -> [8 0]", "(leaves {8 {1}}) -> [1]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.659657, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {3 {2} {2}}) -> [2 2]", "(leaves {5}) -> [5]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.759834, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {0 {5 {5 {6} {6}} {5 {2}}}}) -> [6 6 2]", "(leaves {3}) -> [3]", "(leaves {0 {9}}) -> [9]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
