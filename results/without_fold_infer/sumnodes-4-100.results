{"solution": "(let sumnodes (let a (lambda (b) b) _) _)", "time": 0.00045, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {}) -> {}", "(sumnodes {}) -> {}"]}
{"solution": "(let sumnodes (let a (lambda (b) b) _) _)", "time": 0.000459, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {}) -> {}", "(sumnodes {}) -> {}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.512876, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {}) -> {}", "(sumnodes {[1 8 8] {[4 9 7 4 7]}}) -> {17 {31}}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.592946, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[1 6] {[9 8] {[] {[3 0 9 7]}}}}) -> {7 {17 {0 {19}}}}", "(sumnodes {}) -> {}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.516432, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[6]}) -> {6}", "(sumnodes {[] {[3 5 8 9 4] {[9] {[]}} {[9 1 5]}} {[8 1 9]}}) -> {0 {29 {9 {0}} {15}} {18}}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.603802, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[1 5 7 7] {[3 7 3 8 4] {[0 0 8]}} {[8 1]}}) -> {20 {25 {8}} {9}}", "(sumnodes {[7 2 6 6 2] {[6 8 1 3] {[6 6 5 0]}} {[]}}) -> {23 {18 {17}} {0}}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.479222, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[5 6] {[7 7 8] {[9 0 8 3 4]} {[9] {[0 0 5 3]}}}}) -> {11 {22 {24} {9 {8}}}}", "(sumnodes {[8] {[2 3]} {[]}}) -> {8 {5} {0}}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.62003, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[1 6] {[0 5 3 4 0] {[8 4 3 7 8]} {[5 1] {[7 8 5 8]}}} {[5 8] {[1 9 6] {[1 9 1 4]}} {[7 9] {[4 3 4 4]} {[7 3 2 1 8]}}}}) -> {7 {12 {30} {6 {28}}} {13 {16 {15}} {16 {15} {21}}}}", "(sumnodes {[8 3] {[7] {[]}} {[7 4 0 3] {[8 8 7 1 4]} {[]}}}) -> {11 {7 {0}} {14 {28} {0}}}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (car c)))) _) _)", "time": 0.012319, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[9]}) -> {9}", "(sumnodes {}) -> {}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.547376, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[] {[9 1 5 2] {[]} {[] {[7 2]}}}}) -> {0 {17 {0} {0 {9}}}}", "(sumnodes {}) -> {}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.881887, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[4]}) -> {4}", "(sumnodes {[4 4 0 0]}) -> {8}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.957509, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {}) -> {}", "(sumnodes {[0 4 4 1]}) -> {9}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.919843, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[6 0]}) -> {6}", "(sumnodes {[4] {[1 6]} {[9 4 2 5 8]}}) -> {4 {7} {28}}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.947256, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[9 6] {[]} {[3 4 2 6 1]}}) -> {15 {0} {16}}", "(sumnodes {[9 3] {[]}}) -> {12 {0}}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.972149, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[] {[1 5 5 8]}}) -> {0 {19}}", "(sumnodes {[3 0] {[2]} {[9 4 9 8]}}) -> {3 {2} {30}}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.986046, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[1 4 3]}) -> {8}", "(sumnodes {[3 9]}) -> {12}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 1.018901, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[5 8 4 5] {[9 0 5] {[1 8 4 9]}} {[6 9 5] {[9 8 1 9 8]} {[]}}}) -> {22 {14 {22}} {20 {35} {0}}}", "(sumnodes {[3 8 2 0]}) -> {13}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.995875, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[8 7 1 1] {[6 5 3 0 6]}}) -> {17 {20}}", "(sumnodes {[6 1 2]}) -> {9}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (car c)))) _) _)", "time": 0.013875, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[2]}) -> {2}", "(sumnodes {}) -> {}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) 0))) _) _)", "time": 0.021114, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[]}) -> {0}", "(sumnodes {}) -> {}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.824937, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {}) -> {}", "(sumnodes {[4] {[9 1 5 6 8]}}) -> {4 {29}}"]}
{"solution": "(let sumnodes (let a (lambda (b) b) _) _)", "time": 0.000322, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {}) -> {}", "(sumnodes {}) -> {}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ 1 d)) 0)))) _) _)", "time": 0.355601, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[1 8]}) -> {9}", "(sumnodes {[]}) -> {0}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) 0))) _) _)", "time": 0.027952, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {}) -> {}", "(sumnodes {[]}) -> {0}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.431424, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {}) -> {}", "(sumnodes {[8 6] {[8 4 7 7]}}) -> {14 {26}}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.449656, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[6 1 7 7 6]}) -> {27}", "(sumnodes {[4 2 0]}) -> {6}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.454306, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {}) -> {}", "(sumnodes {[0] {[6 7 4 1] {[0 2]}}}) -> {0 {18 {2}}}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.399224, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {}) -> {}", "(sumnodes {[] {[9 3 3]} {[1 4 8 4 2] {[0 8]} {[5 3 4 1 2]}}}) -> {0 {15} {19 {8} {15}}}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.431794, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {}) -> {}", "(sumnodes {[3] {[9 5 6] {[4]}}}) -> {3 {20 {4}}}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.41806, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[6 6 4] {[5 0 9]} {[1 9 1]}}) -> {16 {14} {11}}", "(sumnodes {}) -> {}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.467301, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[1 9 0 4] {[5]}}) -> {14 {5}}", "(sumnodes {}) -> {}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.472569, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[4] {[4 9 8]}}) -> {4 {21}}", "(sumnodes {[9 8] {[] {[6 3 0]} {[7 9 6 5] {[]} {[5]}}} {[8 8 0] {[3 6 3 4 1]} {[4 2 9 5] {[1 7 6 5 6]}}}}) -> {17 {0 {9} {27 {0} {5}}} {16 {17} {20 {25}}}}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.522597, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {}) -> {}", "(sumnodes {[0 5] {[1 5 4 0 3]}}) -> {5 {13}}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.471154, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[7]}) -> {7}", "(sumnodes {[4 0 8 0] {[0 7 8 0]}}) -> {12 {15}}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.544442, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[]}) -> {0}", "(sumnodes {[7 2] {[0 2 1 0]} {[]}}) -> {9 {3} {0}}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.53864, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[] {[5 1 5]}}) -> {0 {11}}", "(sumnodes {}) -> {}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.482054, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[0 7 8 3] {[] {[1 0 2] {[]} {[7 7 6 0 0]}} {[4 3 4]}}}) -> {18 {0 {3 {0} {20}} {11}}}", "(sumnodes {[2 0 0]}) -> {2}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.485923, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[8 2] {[5 9]}}) -> {10 {14}}", "(sumnodes {[4 1 2 7 8] {[3 7 7 8]}}) -> {22 {25}}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.485512, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[] {[]} {[1 0 0]}}) -> {0 {0} {1}}", "(sumnodes {[0 4] {[4 7]} {[7 9]}}) -> {4 {11} {16}}"]}
{"solution": "(let sumnodes (let a (lambda (b) b) _) _)", "time": 0.000217, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {}) -> {}", "(sumnodes {}) -> {}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.538625, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[7 3 9]}) -> {19}", "(sumnodes {[6 1 9]}) -> {16}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.594472, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[9 1 1 0 2] {[9]}}) -> {13 {9}}", "(sumnodes {}) -> {}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.479739, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[1 8 2] {[0 4 8 4 8] {[3 0 3]}}}) -> {11 {24 {6}}}", "(sumnodes {[4 5]}) -> {9}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.575238, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {}) -> {}", "(sumnodes {[3 1 3 3 1]}) -> {11}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.536713, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[]}) -> {0}", "(sumnodes {[0 8 6 7 3] {[6] {[2]}} {[2 9 1]}}) -> {24 {6 {2}} {12}}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.580874, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[0 2 0 7 2] {[5 8 8 7] {[5 4] {[]}} {[2 2 4] {[8 7 6 5 4]}}}}) -> {11 {28 {9 {0}} {8 {30}}}}", "(sumnodes {[7 5 1 3 3] {[2 2 3 5 8] {[]}} {[0]}}) -> {19 {20 {0}} {0}}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.585693, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[0 6] {[7 1 4 0 5]} {[1 7]}}) -> {6 {17} {8}}", "(sumnodes {[2 2 1 5 8] {[4 1 7 4] {[2 9] {[6]}} {[9]}} {[3] {[9 2]} {[0 2 9 3 0]}}}) -> {18 {16 {11 {6}} {9}} {3 {11} {14}}}"]}
{"solution": "(let sumnodes (let a (lambda (b) b) _) _)", "time": 0.000693, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {}) -> {}", "(sumnodes {}) -> {}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.490398, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {}) -> {}", "(sumnodes {[] {[2 9 2 0 3] {[4] {[3]} {[0 9]}} {[4 6 7 0 6] {[9 7 7 8 7]} {[8 3 8 6]}}} {[2] {[4 4] {[6 2 1 0]}} {[4 3] {[6 9 0 8]} {[5 5 9 2]}}}}) -> {0 {16 {4 {3} {9}} {23 {38} {25}}} {2 {8 {9}} {7 {23} {21}}}}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.509511, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {}) -> {}", "(sumnodes {[1 6 2 9] {[] {[0 2 0]}} {[0 6 6 8 2]}}) -> {18 {0 {2}} {22}}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.46298, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[2 0 9 8]}) -> {19}", "(sumnodes {}) -> {}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.48393, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[7 9] {[7 1 1] {[5 4]} {[9]}}}) -> {16 {9 {9} {9}}}", "(sumnodes {}) -> {}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.492806, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[7] {[] {[7 7]} {[8]}}}) -> {7 {0 {14} {8}}}", "(sumnodes {[8 8 0] {[]} {[]}}) -> {16 {0} {0}}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.504275, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[0] {[3 0 7 0] {[4 2 5]}}}) -> {0 {10 {11}}}", "(sumnodes {[7 8 0 8] {[5]}}) -> {23 {5}}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.506544, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[]}) -> {0}", "(sumnodes {[2 8 5 6]}) -> {21}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.49772, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[1 7 0 1] {[5]} {[5 3 9 7 5]}}) -> {9 {5} {29}}", "(sumnodes {}) -> {}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.486423, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {}) -> {}", "(sumnodes {[9 4 4] {[2 7 0 7]}}) -> {17 {16}}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.517277, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[9 9] {[0 0 9 4 2]} {[4 7 8 2 0] {[9 3 8]}}}) -> {18 {15} {21 {20}}}", "(sumnodes {}) -> {}"]}
{"solution": "(let sumnodes (let a (lambda (b) b) _) _)", "time": 0.000451, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {}) -> {}", "(sumnodes {}) -> {}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.494605, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[6 5 3 8] {[5] {[5]}}}) -> {22 {5 {5}}}", "(sumnodes {}) -> {}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.473769, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[5 2]}) -> {7}", "(sumnodes {[] {[9 6 3 0] {[3 8]}} {[5 9 3]}}) -> {0 {18 {11}} {17}}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.520698, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[9] {[6 7 8 8] {[]}}}) -> {9 {29 {0}}}", "(sumnodes {}) -> {}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.42249, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[5 0]}) -> {5}", "(sumnodes {[1 8] {[8 9 2 8]}}) -> {9 {27}}"]}
{"solution": "(let sumnodes (let a (lambda (b) b) _) _)", "time": 0.000391, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {}) -> {}", "(sumnodes {}) -> {}"]}
{"solution": "(let sumnodes (let a (lambda (b) b) _) _)", "time": 0.000719, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {}) -> {}", "(sumnodes {}) -> {}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.469553, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[4 1 8 9 5] {[] {[]}} {[7 2 0] {[0 8 0]} {[5 7 5 0]}}}) -> {27 {0 {0}} {9 {8} {17}}}", "(sumnodes {}) -> {}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.499462, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[9] {[] {[8 0 9 2 4] {[5 2]} {[0 9]}} {[7 5 3 7] {[3 0 1 6]}}}}) -> {9 {0 {23 {7} {9}} {22 {10}}}}", "(sumnodes {[2]}) -> {2}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (+ (car c) (car (cdr c)))))) _) _)", "time": 0.429941, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[4 4] {[6 7]}}) -> {8 {13}}", "(sumnodes {}) -> {}"]}
{"solution": "(let sumnodes (let a (lambda (b) (mapt b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "time": 0.500997, "name": "sumnodes", "examples": ["(sumnodes {}) -> {}", "(sumnodes {[5 1 5 7] {[]} {[5 3 5 0] {[]} {[8 8]}}}) -> {18 {0} {13 {0} {16}}}", "(sumnodes {[8 7 7 5 6] {[8 8] {[9 0 9 1] {[2 9 1]}}} {[1 3 4] {[4 4] {[9 0 0 2]}}}}) -> {33 {16 {19 {12}}} {8 {8 {11}}}}"]}
