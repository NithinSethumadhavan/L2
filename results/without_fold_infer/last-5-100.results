{"name": "last", "examples": ["(last [1 6 0 8 4]) -> 4", "(last [9 4 6 9]) -> 9", "(last [7 1 4]) -> 4", "(last [7 7 9 6]) -> 6"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.026808}
{"name": "last", "examples": ["(last [0 8 5 3]) -> 3", "(last [2 9]) -> 9", "(last [2 0]) -> 0", "(last [0]) -> 0"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.029628}
{"name": "last", "examples": ["(last [3 1 1]) -> 1", "(last [4 9 6 7 7]) -> 7", "(last [2 0 6 9]) -> 9", "(last [6 8 1 7 5]) -> 5"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.034549}
{"name": "last", "examples": ["(last [2]) -> 2", "(last [9 2 2]) -> 2", "(last [4 9 6 3 5]) -> 5", "(last [3 8 7 4 7]) -> 7"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.044852}
{"name": "last", "examples": ["(last [4 9 0 6]) -> 6", "(last [2 6 2 9]) -> 9", "(last [0 4]) -> 4", "(last [3 1 5 5 6]) -> 6"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.044139}
{"name": "last", "examples": ["(last [9 3 1 2 0]) -> 0", "(last [8 6 1 4 1]) -> 1", "(last [7 2 9 5 9]) -> 9", "(last [7]) -> 7"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.040908}
{"name": "last", "examples": ["(last [4 8]) -> 8", "(last [8 5 0]) -> 0", "(last [0]) -> 0", "(last [7]) -> 7"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.027237}
{"name": "last", "examples": ["(last [9 0 9 0 3]) -> 3", "(last [5 5 4]) -> 4", "(last [3 0]) -> 0", "(last [8 9 3 3 9]) -> 9"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.026244}
{"name": "last", "examples": ["(last [5 0 1]) -> 1", "(last [5 5 7]) -> 7", "(last [6 1]) -> 1", "(last [0 1 6 4 8]) -> 8"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.041886}
{"name": "last", "examples": ["(last [3]) -> 3", "(last [8 5 3 2 4]) -> 4", "(last [7 0 7 5]) -> 5", "(last [6]) -> 6"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.041543}
{"name": "last", "examples": ["(last [9 9 1 4]) -> 4", "(last [0 6]) -> 6", "(last [1 0 1]) -> 1", "(last [3 7]) -> 7"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.038336}
{"name": "last", "examples": ["(last [4 0]) -> 0", "(last [4]) -> 4", "(last [1 0 7]) -> 7", "(last [5 6 1]) -> 1"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.025783}
{"name": "last", "examples": ["(last [4]) -> 4", "(last [4 8 6 8 0]) -> 0", "(last [2 8 5]) -> 5", "(last [0 3 8]) -> 8"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.037322}
{"name": "last", "examples": ["(last [4]) -> 4", "(last [0 7]) -> 7", "(last [8]) -> 8", "(last [9 9]) -> 9"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.02495}
{"name": "last", "examples": ["(last [0]) -> 0", "(last [2]) -> 2", "(last [5 8 3 8]) -> 8", "(last [0]) -> 0"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.025662}
{"name": "last", "examples": ["(last [6 1 8 2]) -> 2", "(last [5 3 2 8 0]) -> 0", "(last [7 9 5 5 6]) -> 6", "(last [6 4 5 8 7]) -> 7"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.040809}
{"name": "last", "examples": ["(last [1 7 6]) -> 6", "(last [1]) -> 1", "(last [4 6 0 0]) -> 0", "(last [4 8 5]) -> 5"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.026927}
{"name": "last", "examples": ["(last [9 4 7]) -> 7", "(last [4 9 7]) -> 7", "(last [7 7 6]) -> 6", "(last [4 9 2 0 2]) -> 2"], "solution": "(let last (let a (lambda (b) (car (cdr (cdr b)))) _) _)", "time": 0.0105}
{"name": "last", "examples": ["(last [1]) -> 1", "(last [7]) -> 7", "(last [7 8 9 6 8]) -> 8", "(last [6 4 9 6]) -> 6"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.024953}
{"name": "last", "examples": ["(last [7 8 2 0]) -> 0", "(last [4 0 0 1]) -> 1", "(last [8 0 1]) -> 1", "(last [8 1 5]) -> 5"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.026637}
{"name": "last", "examples": ["(last [3 9 7]) -> 7", "(last [2 4 5 9 1]) -> 1", "(last [6 0 4 9 0]) -> 0", "(last [4 2 1 5 0]) -> 0"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.035123}
{"name": "last", "examples": ["(last [6]) -> 6", "(last [0 9 7 6 4]) -> 4", "(last [8]) -> 8", "(last [4 8]) -> 8"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.024467}
{"name": "last", "examples": ["(last [6 3 6 6 7]) -> 7", "(last [8 1 5]) -> 5", "(last [8 8 6 7 8]) -> 8", "(last [9 9 0 4]) -> 4"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.035358}
{"name": "last", "examples": ["(last [7 4 5 0 9]) -> 9", "(last [9]) -> 9", "(last [2 3]) -> 3", "(last [2]) -> 2"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.024769}
{"name": "last", "examples": ["(last [9 9 4]) -> 4", "(last [1 1 4 1]) -> 1", "(last [5 9 5 1]) -> 1", "(last [0]) -> 0"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.040369}
{"name": "last", "examples": ["(last [1 6 0 6]) -> 6", "(last [9 3 3 5 9]) -> 9", "(last [9 5]) -> 5", "(last [9 1 8 4]) -> 4"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.040296}
{"name": "last", "examples": ["(last [9 1]) -> 1", "(last [9 8 7 3 4]) -> 4", "(last [0 3 5 6 3]) -> 3", "(last [7 6]) -> 6"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.035781}
{"name": "last", "examples": ["(last [8 8 1]) -> 1", "(last [2 3 5]) -> 5", "(last [6 0 1]) -> 1", "(last [2]) -> 2"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.040843}
{"name": "last", "examples": ["(last [1 6 0 6 9]) -> 9", "(last [5 5 5 7 9]) -> 9", "(last [9 4 1 4]) -> 4", "(last [3 8 1 8]) -> 8"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.030834}
{"name": "last", "examples": ["(last [9]) -> 9", "(last [0 4 9]) -> 9", "(last [3 5]) -> 5", "(last [2]) -> 2"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.034836}
{"name": "last", "examples": ["(last [1 2 8]) -> 8", "(last [9 3 6 9]) -> 9", "(last [6]) -> 6", "(last [8 2]) -> 2"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.028496}
{"name": "last", "examples": ["(last [1 8 8 1 9]) -> 9", "(last [3]) -> 3", "(last [5 4 7]) -> 7", "(last [4 1 5 7 0]) -> 0"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.035864}
{"name": "last", "examples": ["(last [8 5 8 1 1]) -> 1", "(last [0 9 7 1 9]) -> 9", "(last [6]) -> 6", "(last [0]) -> 0"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.029064}
{"name": "last", "examples": ["(last [0 6 5]) -> 5", "(last [0 8 7 5 6]) -> 6", "(last [9]) -> 9", "(last [4 3 9 2 4]) -> 4"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.033176}
{"name": "last", "examples": ["(last [8 6 2 1 0]) -> 0", "(last [6 3]) -> 3", "(last [1 5 5 0 4]) -> 4", "(last [0 5]) -> 5"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.028554}
{"name": "last", "examples": ["(last [8 8]) -> 8", "(last [7 8]) -> 8", "(last [6 6 2 3 8]) -> 8", "(last [5 3 9 8 7]) -> 7"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.035614}
{"name": "last", "examples": ["(last [6 3]) -> 3", "(last [6 7 8 9]) -> 9", "(last [1 5 3]) -> 3", "(last [3 2 1 1 2]) -> 2"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.032599}
{"name": "last", "examples": ["(last [4]) -> 4", "(last [4 0 5 9]) -> 9", "(last [3]) -> 3", "(last [1 7 9 2 7]) -> 7"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.025231}
{"name": "last", "examples": ["(last [9]) -> 9", "(last [0 7 9 8]) -> 8", "(last [5 2]) -> 2", "(last [2]) -> 2"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.024773}
{"name": "last", "examples": ["(last [2 6 3]) -> 3", "(last [6 3]) -> 3", "(last [9 7 0 5]) -> 5", "(last [7 0 2 5 0]) -> 0"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.038903}
{"name": "last", "examples": ["(last [6 6]) -> 6", "(last [7 5 1 8]) -> 8", "(last [5]) -> 5", "(last [4]) -> 4"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.043424}
{"name": "last", "examples": ["(last [6 7 0]) -> 0", "(last [9 8 1 3 1]) -> 1", "(last [9 1 0 1 5]) -> 5", "(last [7 6]) -> 6"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.025328}
{"name": "last", "examples": ["(last [1 6 7 2 6]) -> 6", "(last [1 9 1 3 6]) -> 6", "(last [2 7 7 4 6]) -> 6", "(last [2 6]) -> 6"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.032474}
{"name": "last", "examples": ["(last [3 3 5 1]) -> 1", "(last [7 1 1]) -> 1", "(last [4 1 6]) -> 6", "(last [4]) -> 4"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.030042}
{"name": "last", "examples": ["(last [9]) -> 9", "(last [6 5 8]) -> 8", "(last [2 4 9 9]) -> 9", "(last [7 4 5 4]) -> 4"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.041546}
{"name": "last", "examples": ["(last [4 0]) -> 0", "(last [2 1 3 8]) -> 8", "(last [6 9]) -> 9", "(last [9]) -> 9"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.035569}
{"name": "last", "examples": ["(last [4 8]) -> 8", "(last [8 7 9]) -> 9", "(last [3 5 6 9]) -> 9", "(last [9 1 0 7 4]) -> 4"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.042364}
{"name": "last", "examples": ["(last [8 3 6 2]) -> 2", "(last [9 7]) -> 7", "(last [3 6 7 7]) -> 7", "(last [5 6]) -> 6"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.044884}
{"name": "last", "examples": ["(last [2 6 4]) -> 4", "(last [7]) -> 7", "(last [6 8 8]) -> 8", "(last [0 8]) -> 8"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.025544}
{"name": "last", "examples": ["(last [3]) -> 3", "(last [8 0]) -> 0", "(last [2 6 5]) -> 5", "(last [1 7 0 8]) -> 8"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.026372}
{"name": "last", "examples": ["(last [8 1]) -> 1", "(last [3 8 2 1]) -> 1", "(last [4]) -> 4", "(last [4 5 5 9 2]) -> 2"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.032319}
{"name": "last", "examples": ["(last [2 6 0 9]) -> 9", "(last [8 1 4 3 6]) -> 6", "(last [3]) -> 3", "(last [6 9 7 4]) -> 4"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.035683}
{"name": "last", "examples": ["(last [4]) -> 4", "(last [7]) -> 7", "(last [7]) -> 7", "(last [8 8 7]) -> 7"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.03582}
{"name": "last", "examples": ["(last [2 4 7 7]) -> 7", "(last [5 9 3]) -> 3", "(last [1 9]) -> 9", "(last [3 4 0]) -> 0"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.034734}
{"name": "last", "examples": ["(last [0 3 3 5 1]) -> 1", "(last [5 6 8]) -> 8", "(last [9 7 0 1 5]) -> 5", "(last [7 3]) -> 3"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.027654}
{"name": "last", "examples": ["(last [6 8 0]) -> 0", "(last [9 0]) -> 0", "(last [9 7 2]) -> 2", "(last [0 4 3]) -> 3"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.033727}
{"name": "last", "examples": ["(last [1]) -> 1", "(last [8 9 3 3 3]) -> 3", "(last [7 0 4 5]) -> 5", "(last [4 3 5 0 0]) -> 0"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.032451}
{"name": "last", "examples": ["(last [4 8]) -> 8", "(last [5 1 4]) -> 4", "(last [8 9 5]) -> 5", "(last [9 2 7 6 1]) -> 1"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.028197}
{"name": "last", "examples": ["(last [4 5]) -> 5", "(last [0 4 3 0]) -> 0", "(last [3 5 0]) -> 0", "(last [8 2 5 4]) -> 4"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.034808}
{"name": "last", "examples": ["(last [7 5 4 9 1]) -> 1", "(last [9 5 0 7 4]) -> 4", "(last [7 4 9 6 0]) -> 0", "(last [4 3]) -> 3"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.028084}
{"name": "last", "examples": ["(last [1 6]) -> 6", "(last [1 9]) -> 9", "(last [9 9 2 6 2]) -> 2", "(last [0]) -> 0"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.025055}
{"name": "last", "examples": ["(last [0 2 7 9]) -> 9", "(last [7 4 2 9 2]) -> 2", "(last [6 7 8 2 7]) -> 7", "(last [7 6 5]) -> 5"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.026888}
{"name": "last", "examples": ["(last [7 7 2]) -> 2", "(last [7]) -> 7", "(last [2 5 9 5 7]) -> 7", "(last [5 7]) -> 7"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.031156}
{"name": "last", "examples": ["(last [8 4 4 1 1]) -> 1", "(last [6 5 2 0 5]) -> 5", "(last [9 0 4 8]) -> 8", "(last [0 9 8 6]) -> 6"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.042308}
{"name": "last", "examples": ["(last [3 8 8 2 4]) -> 4", "(last [7 1 9 1]) -> 1", "(last [3 5 0 3 8]) -> 8", "(last [1 2]) -> 2"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.037344}
{"name": "last", "examples": ["(last [1]) -> 1", "(last [2 8 4 0]) -> 0", "(last [5 4 5]) -> 5", "(last [9 3]) -> 3"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.028742}
{"name": "last", "examples": ["(last [2 6 0 1]) -> 1", "(last [6 2 7 2 0]) -> 0", "(last [1 4 5 3 1]) -> 1", "(last [3]) -> 3"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.031407}
{"name": "last", "examples": ["(last [8 3 3 2 1]) -> 1", "(last [1 4]) -> 4", "(last [1 7 4 3 4]) -> 4", "(last [9 3 3 5 3]) -> 3"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.031564}
{"name": "last", "examples": ["(last [0 0 6 6]) -> 6", "(last [3 9]) -> 9", "(last [1 0 5 0]) -> 0", "(last [5 4 5 8]) -> 8"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.026759}
{"name": "last", "examples": ["(last [1 6 1 5 6]) -> 6", "(last [8 8 5 4 0]) -> 0", "(last [1 2 4 2]) -> 2", "(last [0 5 9 5 7]) -> 7"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.032301}
{"name": "last", "examples": ["(last [5]) -> 5", "(last [8 3]) -> 3", "(last [3]) -> 3", "(last [0 1]) -> 1"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.024603}
{"name": "last", "examples": ["(last [0 0 4 7]) -> 7", "(last [3 4 9 2 9]) -> 9", "(last [3 7 0 7 1]) -> 1", "(last [2 6 2 8]) -> 8"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.037618}
{"name": "last", "examples": ["(last [0]) -> 0", "(last [8 9 1]) -> 1", "(last [8 5 3 4]) -> 4", "(last [8 4 0 1]) -> 1"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.024901}
{"name": "last", "examples": ["(last [5 3]) -> 3", "(last [5 9 5 2 6]) -> 6", "(last [8 6 6 8]) -> 8", "(last [5 3]) -> 3"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.025677}
{"name": "last", "examples": ["(last [1 8]) -> 8", "(last [1 2 3 2 6]) -> 6", "(last [3 5 8 3 4]) -> 4", "(last [7 1]) -> 1"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.026304}
{"name": "last", "examples": ["(last [7 6]) -> 6", "(last [6 1 8 6 4]) -> 4", "(last [4 5 3]) -> 3", "(last [2]) -> 2"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.032}
{"name": "last", "examples": ["(last [1]) -> 1", "(last [2 6]) -> 6", "(last [4 7 9 2 7]) -> 7", "(last [3 3]) -> 3"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.025243}
{"name": "last", "examples": ["(last [3 3 3 1 1]) -> 1", "(last [0 1 3 5 0]) -> 0", "(last [3 9 5 0 4]) -> 4", "(last [6 2]) -> 2"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.043261}
{"name": "last", "examples": ["(last [1 6 4]) -> 4", "(last [2 8 4 4 8]) -> 8", "(last [4]) -> 4", "(last [4 8 5 5 5]) -> 5"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.032113}
{"name": "last", "examples": ["(last [6]) -> 6", "(last [3 3 2 8 8]) -> 8", "(last [7 6 4 2]) -> 2", "(last [9 6 1]) -> 1"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.024703}
{"name": "last", "examples": ["(last [9 3 5]) -> 5", "(last [2 9 8 3 2]) -> 2", "(last [5 5]) -> 5", "(last [0]) -> 0"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.024854}
{"name": "last", "examples": ["(last [2]) -> 2", "(last [6 8 1 9 1]) -> 1", "(last [2 6 0]) -> 0", "(last [3 6]) -> 6"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.027716}
{"name": "last", "examples": ["(last [9 8 3 6 1]) -> 1", "(last [9 7 7 1]) -> 1", "(last [9 8]) -> 8", "(last [7]) -> 7"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.033144}
{"name": "last", "examples": ["(last [8]) -> 8", "(last [3 7 3 0 5]) -> 5", "(last [9 4 9 5 3]) -> 3", "(last [6 2]) -> 2"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.029988}
{"name": "last", "examples": ["(last [2]) -> 2", "(last [7 1 7 6 6]) -> 6", "(last [8 4]) -> 4", "(last [1 8 7]) -> 7"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.031012}
{"name": "last", "examples": ["(last [6 3 4]) -> 4", "(last [7 7]) -> 7", "(last [0 0 3]) -> 3", "(last [5 6 3 4 2]) -> 2"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.024412}
{"name": "last", "examples": ["(last [3 2 9]) -> 9", "(last [2 9]) -> 9", "(last [9 8 7 1 5]) -> 5", "(last [0 3 0 2]) -> 2"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.04193}
{"name": "last", "examples": ["(last [1 3]) -> 3", "(last [9 6 4 5]) -> 5", "(last [2 7]) -> 7", "(last [0 9]) -> 9"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.027419}
{"name": "last", "examples": ["(last [1 0 5 9]) -> 9", "(last [6 6 9]) -> 9", "(last [0 0 7 6 5]) -> 5", "(last [8 8 8 0 1]) -> 1"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.025478}
{"name": "last", "examples": ["(last [5 5]) -> 5", "(last [9 2 3 2]) -> 2", "(last [8]) -> 8", "(last [5 1 9 9 4]) -> 4"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.040202}
{"name": "last", "examples": ["(last [7 0]) -> 0", "(last [8 2 5 8]) -> 8", "(last [4]) -> 4", "(last [0 9 2 6]) -> 6"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.025057}
{"name": "last", "examples": ["(last [6]) -> 6", "(last [3 4 9]) -> 9", "(last [2 5 2 0]) -> 0", "(last [5 5 4 7]) -> 7"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.028261}
{"name": "last", "examples": ["(last [7]) -> 7", "(last [2 9]) -> 9", "(last [6 9 3 1]) -> 1", "(last [7]) -> 7"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.027201}
{"name": "last", "examples": ["(last [3]) -> 3", "(last [2 9 9 3 5]) -> 5", "(last [5 4 5 3]) -> 3", "(last [9 3]) -> 3"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.025116}
{"name": "last", "examples": ["(last [2 9 4 5]) -> 5", "(last [5]) -> 5", "(last [1 7 3 6]) -> 6", "(last [8 3 5 4]) -> 4"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.024632}
{"name": "last", "examples": ["(last [7 9 5 7 0]) -> 0", "(last [0 1 8 4 8]) -> 8", "(last [3 6 3 8]) -> 8", "(last [0 1]) -> 1"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.024999}
{"name": "last", "examples": ["(last [5 1 9 3 8]) -> 8", "(last [6 5 5 1 6]) -> 6", "(last [2 6 3]) -> 3", "(last [9 3 5 3]) -> 3"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.024271}
{"name": "last", "examples": ["(last [4 8 0 2 0]) -> 0", "(last [8 4 1]) -> 1", "(last [3 9 6]) -> 6", "(last [7 0 2 7]) -> 7"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.026508}
{"name": "last", "examples": ["(last [8 2]) -> 2", "(last [7 3]) -> 3", "(last [6 0 0 1 9]) -> 9", "(last [4]) -> 4"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.024606}
{"name": "last", "examples": ["(last [9 6]) -> 6", "(last [1 4 3 0 9]) -> 9", "(last [8 8]) -> 8", "(last [7 2]) -> 2"], "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.023746}
