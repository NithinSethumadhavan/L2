{"time": 0.000397, "examples": ["(reverse []) -> []", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) []) _) _)"}
{"time": 0.000599, "examples": ["(reverse []) -> []", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) []) _) _)"}
{"time": 0.000488, "examples": ["(reverse []) -> []", "(reverse [5]) -> [5]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)"}
{"time": 0.000508, "examples": ["(reverse []) -> []", "(reverse [5]) -> [5]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)"}
{"time": 0.000536, "examples": ["(reverse []) -> []", "(reverse [6]) -> [6]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)"}
{"time": 0.000351, "examples": ["(reverse []) -> []", "(reverse [0]) -> [0]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)"}
{"time": 0.000537, "examples": ["(reverse []) -> []", "(reverse [8]) -> [8]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)"}
{"time": 0.00059, "examples": ["(reverse []) -> []", "(reverse [7 7]) -> [7 7]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)"}
{"time": 0.078283, "examples": ["(reverse []) -> []", "(reverse [1 6 5 2 3]) -> [3 2 5 6 1]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.000507, "examples": ["(reverse []) -> []", "(reverse [7]) -> [7]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)"}
{"time": 0.119283, "examples": ["(reverse []) -> []", "(reverse [9 5 0]) -> [0 5 9]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.086766, "examples": ["(reverse []) -> []", "(reverse [6 9 3]) -> [3 9 6]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.098619, "examples": ["(reverse []) -> []", "(reverse [1 6 6 1 0]) -> [0 1 6 6 1]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.088244, "examples": ["(reverse []) -> []", "(reverse [6 8 8 0]) -> [0 8 8 6]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.112943, "examples": ["(reverse []) -> []", "(reverse [8 9 0 9 7]) -> [7 9 0 9 8]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.103342, "examples": ["(reverse []) -> []", "(reverse [6 6 3 4]) -> [4 3 6 6]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.112176, "examples": ["(reverse []) -> []", "(reverse [2 9 7 0]) -> [0 7 9 2]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.10475, "examples": ["(reverse []) -> []", "(reverse [5 5 7 1]) -> [1 7 5 5]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.09315, "examples": ["(reverse []) -> []", "(reverse [6 7 2 2 3]) -> [3 2 2 7 6]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.000667, "examples": ["(reverse []) -> []", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) []) _) _)"}
{"time": 0.000514, "examples": ["(reverse []) -> []", "(reverse [4]) -> [4]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)"}
{"time": 0.089326, "examples": ["(reverse []) -> []", "(reverse [0 0 2 3]) -> [3 2 0 0]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.119571, "examples": ["(reverse []) -> []", "(reverse [5 7 8]) -> [8 7 5]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.073386, "examples": ["(reverse []) -> []", "(reverse [8 4]) -> [4 8]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.109011, "examples": ["(reverse []) -> []", "(reverse [2 3 4 4]) -> [4 4 3 2]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.113261, "examples": ["(reverse []) -> []", "(reverse [3 4 0]) -> [0 4 3]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.112597, "examples": ["(reverse []) -> []", "(reverse [9 6 8]) -> [8 6 9]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.100797, "examples": ["(reverse []) -> []", "(reverse [6 2]) -> [2 6]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.104754, "examples": ["(reverse []) -> []", "(reverse [3 3 8]) -> [8 3 3]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.098818, "examples": ["(reverse []) -> []", "(reverse [1 9 1 7]) -> [7 1 9 1]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.102026, "examples": ["(reverse []) -> []", "(reverse [8 2 4]) -> [4 2 8]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.082207, "examples": ["(reverse []) -> []", "(reverse [1 7]) -> [7 1]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.100049, "examples": ["(reverse []) -> []", "(reverse [0 1 1]) -> [1 1 0]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.108649, "examples": ["(reverse []) -> []", "(reverse [6 7 2]) -> [2 7 6]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.090654, "examples": ["(reverse []) -> []", "(reverse [2 1 6 9 1]) -> [1 9 6 1 2]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
