{"solution": "(let evens (let a (lambda (b) (foldl b (lambda (d c) (foldl d (lambda (f e) (cons 0 [])) [6])) [])) _) _)", "time": 1.541219, "examples": ["(evens []) -> []", "(evens [6]) -> [6]", "(evens []) -> []", "(evens [0 5 5 5]) -> [0]", "(evens [5 0]) -> [0]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (foldl b (lambda (e d) (= e (< d c))) #f)))) _) _)", "time": 19.046919, "examples": ["(evens []) -> []", "(evens [9 6 3 9]) -> [6]", "(evens [2]) -> [2]", "(evens [2 5 8 1]) -> [2 8]", "(evens []) -> []", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 38.5209, "examples": ["(evens []) -> []", "(evens [1]) -> []", "(evens [2]) -> [2]", "(evens [4 5 7 6 2]) -> [4 6 2]", "(evens []) -> []", "(evens [8 8 3]) -> [8 8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 39.368926, "examples": ["(evens []) -> []", "(evens [3]) -> []", "(evens []) -> []", "(evens [4]) -> [4]", "(evens []) -> []", "(evens [6 6 3 5 5]) -> [6 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 39.896722, "examples": ["(evens []) -> []", "(evens [4 5]) -> [4]", "(evens []) -> []", "(evens [3 7]) -> []", "(evens [5 0 3 8 7]) -> [0 8]", "(evens [5 5 3]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 40.79398, "examples": ["(evens []) -> []", "(evens [9 6]) -> [6]", "(evens [4 8 8 7 0]) -> [4 8 8 0]", "(evens [9 4 2]) -> [4 2]", "(evens [1 1 3 0 2]) -> [0 2]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 42.05704, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [1 0 0 9 7]) -> [0 0]", "(evens [6]) -> [6]", "(evens [4 6 3 9 5]) -> [4 6]", "(evens [5 4 3 7]) -> [4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 43.04191, "examples": ["(evens []) -> []", "(evens [5]) -> []", "(evens [7 8 3 4 5]) -> [8 4]", "(evens [2 1 1]) -> [2]", "(evens []) -> []", "(evens [3 0 6 0]) -> [0 6 0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (foldl b (lambda (d c) (filter b (lambda (e) (< c e)))) [])) _) _)", "time": 1.01954, "examples": ["(evens []) -> []", "(evens [1]) -> []", "(evens [7]) -> []", "(evens [8 3]) -> [8]", "(evens [5]) -> []", "(evens [1 5]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 42.371539, "examples": ["(evens []) -> []", "(evens [7]) -> []", "(evens [1 1 0 8 6]) -> [0 8 6]", "(evens [0 7 4 0]) -> [0 4 0]", "(evens [4 1 1 3]) -> [4]", "(evens [3]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 44.71011, "examples": ["(evens []) -> []", "(evens [5 3 5 0 2]) -> [0 2]", "(evens [1 6]) -> [6]", "(evens [3]) -> []", "(evens [3 4 9]) -> [4]", "(evens [6 0 3 9]) -> [6 0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 45.879903, "examples": ["(evens []) -> []", "(evens [9]) -> []", "(evens [0 2 6 8]) -> [0 2 6 8]", "(evens []) -> []", "(evens [7 5 8]) -> [8]", "(evens [4]) -> [4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 46.300857, "examples": ["(evens []) -> []", "(evens [9]) -> []", "(evens []) -> []", "(evens [9 4 2 1 0]) -> [4 2 0]", "(evens [9 1]) -> []", "(evens [6 1]) -> [6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 46.815525, "examples": ["(evens []) -> []", "(evens [9]) -> []", "(evens [7]) -> []", "(evens [2 3 7 8 8]) -> [2 8 8]", "(evens [9 2]) -> [2]", "(evens [1 7 7 3]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 47.960256, "examples": ["(evens []) -> []", "(evens [5 4 2 6]) -> [4 2 6]", "(evens [0 4]) -> [0 4]", "(evens [1]) -> []", "(evens []) -> []", "(evens [3 3 9]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 48.312659, "examples": ["(evens []) -> []", "(evens [6 1 0 8]) -> [6 0 8]", "(evens [5 6 8 7]) -> [6 8]", "(evens [1 5]) -> []", "(evens [0 1]) -> [0]", "(evens [9 4 8 0]) -> [4 8 0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 48.934338, "examples": ["(evens []) -> []", "(evens [6 6]) -> [6 6]", "(evens [5 1 0 2]) -> [0 2]", "(evens [0 2 1 1 6]) -> [0 2 6]", "(evens [6 5 0 4]) -> [6 0 4]", "(evens [2 7 3 6 8]) -> [2 6 8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 49.444446, "examples": ["(evens []) -> []", "(evens [0 8 6 4 8]) -> [0 8 6 4 8]", "(evens []) -> []", "(evens []) -> []", "(evens []) -> []", "(evens [0 3 0 1 5]) -> [0 0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (!= 1 (% c (car b)))))) _) _)", "time": 2.030695, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens []) -> []", "(evens [2 5 8]) -> [2 8]", "(evens []) -> []", "(evens [4 2 0]) -> [4 2 0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (foldl b (lambda (e d) (= e (<= d c))) #f)))) _) _)", "time": 15.470292, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [7 0]) -> [0]", "(evens []) -> []", "(evens [4 9 4]) -> [4 4]", "(evens [1]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 43.17259, "examples": ["(evens []) -> []", "(evens [8 2]) -> [8 2]", "(evens [0 9]) -> [0]", "(evens []) -> []", "(evens [0 4 5 2 4]) -> [0 4 2 4]", "(evens [1 8 1 4 3]) -> [8 4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 33.94899, "examples": ["(evens []) -> []", "(evens [3]) -> []", "(evens [6]) -> [6]", "(evens [6 1 5]) -> [6]", "(evens [1 4 0 7]) -> [4 0]", "(evens [4]) -> [4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 36.916144, "examples": ["(evens []) -> []", "(evens [3 9 0 0 7]) -> [0 0]", "(evens [2]) -> [2]", "(evens [9 7 6 5 1]) -> [6]", "(evens [7 7]) -> []", "(evens [6 5 5 2 2]) -> [6 2 2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 35.642229, "examples": ["(evens []) -> []", "(evens [2 1 5]) -> [2]", "(evens [4 1 3]) -> [4]", "(evens [7 8 1 0]) -> [8 0]", "(evens [4]) -> [4]", "(evens [5 5 1 2]) -> [2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 42.396336, "examples": ["(evens []) -> []", "(evens [9 7 3 4]) -> [4]", "(evens [9 0]) -> [0]", "(evens []) -> []", "(evens [7 8 0 3]) -> [8 0]", "(evens [4 7 4 5 1]) -> [4 4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 35.508847, "examples": ["(evens []) -> []", "(evens [9 5]) -> []", "(evens [4]) -> [4]", "(evens [5 2 2]) -> [2 2]", "(evens []) -> []", "(evens [5 5 0 3]) -> [0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 43.073901, "examples": ["(evens []) -> []", "(evens [8]) -> [8]", "(evens [2 7 3 6]) -> [2 6]", "(evens [9 5 1 7]) -> []", "(evens []) -> []", "(evens [2 4 0]) -> [2 4 0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 43.319081, "examples": ["(evens []) -> []", "(evens [4 6]) -> [4 6]", "(evens [1 9 8]) -> [8]", "(evens []) -> []", "(evens []) -> []", "(evens [0 0]) -> [0 0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 50.834339, "examples": ["(evens []) -> []", "(evens [3 5 8]) -> [8]", "(evens [9 8 6]) -> [8 6]", "(evens [8 4 6]) -> [8 4 6]", "(evens [1 0]) -> [0]", "(evens [4 4 6]) -> [4 4 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 34.523407, "examples": ["(evens []) -> []", "(evens [5]) -> []", "(evens []) -> []", "(evens [0 9]) -> [0]", "(evens [4]) -> [4]", "(evens [6]) -> [6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 51.721163, "examples": ["(evens []) -> []", "(evens [2 2 1 2 4]) -> [2 2 2 4]", "(evens [0 8]) -> [0 8]", "(evens [2 7 5 7 6]) -> [2 6]", "(evens [5 3 1 2]) -> [2]", "(evens [7 9 1]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 48.475754, "examples": ["(evens []) -> []", "(evens [3 4 1 8 6]) -> [4 8 6]", "(evens [5]) -> []", "(evens [0 2]) -> [0 2]", "(evens [7 8 6]) -> [8 6]", "(evens [2 7]) -> [2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 47.550958, "examples": ["(evens []) -> []", "(evens [3 5 1]) -> []", "(evens [1 5]) -> []", "(evens [7 1 7]) -> []", "(evens [8 8 4]) -> [8 8 4]", "(evens [3 6]) -> [6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 47.22149, "examples": ["(evens []) -> []", "(evens [5 3 3]) -> []", "(evens [4 8 4 8]) -> [4 8 4 8]", "(evens []) -> []", "(evens [4 8]) -> [4 8]", "(evens [8 1 5 0]) -> [8 0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (!= 1 (% c (car b)))))) _) _)", "time": 1.594632, "examples": ["(evens []) -> []", "(evens [2 2 7 1 6]) -> [2 2 6]", "(evens []) -> []", "(evens []) -> []", "(evens []) -> []", "(evens [6 2 8]) -> [6 2 8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 1 (- c 1))))) _) _)", "time": 0.395632, "examples": ["(evens []) -> []", "(evens [3]) -> []", "(evens [2 5]) -> [2]", "(evens []) -> []", "(evens []) -> []", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= (cdr b) (cons c []))))) _) _)", "time": 1.492948, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [5 4]) -> [4]", "(evens [9 6]) -> [6]", "(evens [7]) -> []", "(evens [4 4]) -> [4 4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 53.417679, "examples": ["(evens []) -> []", "(evens [9 5 5 7]) -> []", "(evens [0 3]) -> [0]", "(evens [1 7]) -> []", "(evens [0 1 0]) -> [0 0]", "(evens [3 0 1 6 1]) -> [0 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 57.710185, "examples": ["(evens []) -> []", "(evens [5 7 3 7]) -> []", "(evens [2 1 6]) -> [2 6]", "(evens [3 2]) -> [2]", "(evens [9 3 3 3 5]) -> []", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 44.506759, "examples": ["(evens []) -> []", "(evens [5 1]) -> []", "(evens []) -> []", "(evens [6]) -> [6]", "(evens [7 5]) -> []", "(evens [3]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 41.996084, "examples": ["(evens []) -> []", "(evens [5]) -> []", "(evens [0]) -> [0]", "(evens []) -> []", "(evens [3 0 3 1 2]) -> [0 2]", "(evens [1 2 4 9 8]) -> [2 4 8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 38.333269, "examples": ["(evens []) -> []", "(evens [2 4 8]) -> [2 4 8]", "(evens [8 1 2]) -> [8 2]", "(evens [1 3 1]) -> []", "(evens [8 3 9 8 6]) -> [8 8 6]", "(evens [4 3]) -> [4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 43.16439, "examples": ["(evens []) -> []", "(evens [6 5 2]) -> [6 2]", "(evens [6 6 9 4]) -> [6 6 4]", "(evens [3 4 1 6 2]) -> [4 6 2]", "(evens [0 5 0 9]) -> [0 0]", "(evens [1 0]) -> [0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 44.964218, "examples": ["(evens []) -> []", "(evens [8 2 9 3 3]) -> [8 2]", "(evens [4 3 8 4 9]) -> [4 8 4]", "(evens [7]) -> []", "(evens [2 4]) -> [2 4]", "(evens [1 3]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 40.20488, "examples": ["(evens []) -> []", "(evens [3 5 8]) -> [8]", "(evens []) -> []", "(evens [7 4]) -> [4]", "(evens [8 1 5 8]) -> [8 8]", "(evens [7 1]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 42.119349, "examples": ["(evens []) -> []", "(evens [0 4 0]) -> [0 4 0]", "(evens [8 7]) -> [8]", "(evens [0 7 7]) -> [0]", "(evens [7 3]) -> []", "(evens [9]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 48.481408, "examples": ["(evens []) -> []", "(evens [9 1 1 6 6]) -> [6 6]", "(evens [0]) -> [0]", "(evens [5]) -> []", "(evens [0 3 9 8]) -> [0 8]", "(evens [2 6 6]) -> [2 6 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 37.10879, "examples": ["(evens []) -> []", "(evens [9 8 7 9]) -> [8]", "(evens [5 9 0]) -> [0]", "(evens [4 8 8]) -> [4 8 8]", "(evens [8 1 8]) -> [8 8]", "(evens [5 6 0 2]) -> [6 0 2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 39.884565, "examples": ["(evens []) -> []", "(evens [2 5 8]) -> [2 8]", "(evens [8]) -> [8]", "(evens []) -> []", "(evens [1 8]) -> [8]", "(evens [1 3 8 5 1]) -> [8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 38.383634, "examples": ["(evens []) -> []", "(evens [6 5 9 4]) -> [6 4]", "(evens [1 0 0 5 6]) -> [0 0 6]", "(evens [7 7]) -> []", "(evens [6 4 4]) -> [6 4 4]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 39.988451, "examples": ["(evens []) -> []", "(evens [7 0 7 1 7]) -> [0]", "(evens [1 1 4 3 5]) -> [4]", "(evens [1 6 0 9]) -> [6 0]", "(evens [0]) -> [0]", "(evens [6 8 1]) -> [6 8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 38.816985, "examples": ["(evens []) -> []", "(evens [9 5 6 1 1]) -> [6]", "(evens [0 0 1]) -> [0 0]", "(evens [4 7 6]) -> [4 6]", "(evens [4 3 3 8 1]) -> [4 8]", "(evens [0]) -> [0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 55.361734, "examples": ["(evens []) -> []", "(evens [6 9 1 3 8]) -> [6 8]", "(evens [3 1]) -> []", "(evens [9 9 6]) -> [6]", "(evens [5 3 8 0]) -> [8 0]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 41.658915, "examples": ["(evens []) -> []", "(evens [2 3 5 6]) -> [2 6]", "(evens [5 1 5 2]) -> [2]", "(evens [8 6 5 4 7]) -> [8 6 4]", "(evens [8]) -> [8]", "(evens [1 9]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (foldl b (lambda (d c) (cdr b)) [])) _) _)", "time": 0.041387, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens []) -> []", "(evens [5 2 8]) -> [2 8]", "(evens []) -> []", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 40.436642, "examples": ["(evens []) -> []", "(evens [3]) -> []", "(evens [3 6 4 0 4]) -> [6 4 0 4]", "(evens [7 1 7 3]) -> []", "(evens [4 0 7 8]) -> [4 0 8]", "(evens [2 1 9 4 6]) -> [2 4 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (foldl b (lambda (e d) (~ e)) (!= c (car b)))))) _) _)", "time": 18.325379, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [4 1 9]) -> [4]", "(evens [1 8]) -> [8]", "(evens []) -> []", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 35.321674, "examples": ["(evens []) -> []", "(evens [0 2]) -> [0 2]", "(evens [9 8 9 9 8]) -> [8 8]", "(evens [1 4 8 5 0]) -> [4 8 0]", "(evens [9 2]) -> [2]", "(evens [0 7 0 1]) -> [0 0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 50.901243, "examples": ["(evens []) -> []", "(evens [2 1 2 6 3]) -> [2 2 6]", "(evens [0 0 2]) -> [0 0 2]", "(evens []) -> []", "(evens [5 0 7]) -> [0]", "(evens [4 5 2 9 9]) -> [4 2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 37.822809, "examples": ["(evens []) -> []", "(evens [7 1 0 8]) -> [0 8]", "(evens [0 6 0]) -> [0 6 0]", "(evens [2]) -> [2]", "(evens [2 0 1 9 6]) -> [2 0 6]", "(evens [9 8 6]) -> [8 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 45.808459, "examples": ["(evens []) -> []", "(evens [4 0 2 0 1]) -> [4 0 2 0]", "(evens [2 7 1]) -> [2]", "(evens [0 3]) -> [0]", "(evens [7]) -> []", "(evens [5 2 5]) -> [2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 35.468772, "examples": ["(evens []) -> []", "(evens [5]) -> []", "(evens [7 6 0]) -> [6 0]", "(evens [2 9 9 7]) -> [2]", "(evens [4 0 9 7 2]) -> [4 0 2]", "(evens [6 8 1 6 6]) -> [6 8 6 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 33.123303, "examples": ["(evens []) -> []", "(evens [4 9 0 1]) -> [4 0]", "(evens [6 2 9 3 8]) -> [6 2 8]", "(evens [8 4]) -> [8 4]", "(evens [4]) -> [4]", "(evens [2 9 3 3 4]) -> [2 4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 36.806709, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [8 1 8]) -> [8 8]", "(evens [9 9 8 1]) -> [8]", "(evens [6 2 8]) -> [6 2 8]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 36.933901, "examples": ["(evens []) -> []", "(evens [7 3 6]) -> [6]", "(evens [9 8 9 2 4]) -> [8 2 4]", "(evens [3 8]) -> [8]", "(evens [2]) -> [2]", "(evens [6]) -> [6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 37.123342, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [1 3 2]) -> [2]", "(evens [2 5]) -> [2]", "(evens [0 3 6 6 6]) -> [0 6 6 6]", "(evens [7]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (<= c (car b))))) _) _)", "time": 0.202207, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [8 4 9]) -> [8 4]", "(evens []) -> []", "(evens []) -> []", "(evens [4 5 9 0]) -> [4 0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 40.569979, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [1 9]) -> []", "(evens []) -> []", "(evens [7 1 5 5 6]) -> [6]", "(evens [6 7]) -> [6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 44.03398, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [8 3 9 1 0]) -> [8 0]", "(evens [4 4 6 9]) -> [4 4 6]", "(evens [7 3 9 0 5]) -> [0]", "(evens [0]) -> [0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 47.018159, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [7 8 6 8]) -> [8 6 8]", "(evens [0 4 2 0]) -> [0 4 2 0]", "(evens [3 5 2]) -> [2]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (foldl b (lambda (e d) (~ e)) (!= 0 (car b)))))) _) _)", "time": 11.725913, "examples": ["(evens []) -> []", "(evens [1 5 5]) -> []", "(evens [8 2]) -> [8 2]", "(evens []) -> []", "(evens [0 0 6]) -> [0 0 6]", "(evens [9]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 31.89842, "examples": ["(evens []) -> []", "(evens [7 9 3 3]) -> []", "(evens [8]) -> [8]", "(evens [1 2 2 8]) -> [2 2 8]", "(evens [3 9 8 0]) -> [8 0]", "(evens [4 9 0 6 6]) -> [4 0 6 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 32.534507, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [6]) -> [6]", "(evens [8 2 4 0 8]) -> [8 2 4 0 8]", "(evens [8 5 3]) -> [8]", "(evens [5 3 5]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 30.796861, "examples": ["(evens []) -> []", "(evens [2 2]) -> [2 2]", "(evens [2 6 5 8 8]) -> [2 6 8 8]", "(evens [9 7 0 1 3]) -> [0]", "(evens [1]) -> []", "(evens [6]) -> [6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 32.449876, "examples": ["(evens []) -> []", "(evens [4 7]) -> [4]", "(evens []) -> []", "(evens [1 5 8]) -> [8]", "(evens [9]) -> []", "(evens [7 1 9 3 8]) -> [8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 37.924302, "examples": ["(evens []) -> []", "(evens [2 2]) -> [2 2]", "(evens [8 9 3 4]) -> [8 4]", "(evens [9]) -> []", "(evens [4 6]) -> [4 6]", "(evens [8 2 4 1 0]) -> [8 2 4 0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 46.467699, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [9 5 4 4 4]) -> [4 4 4]", "(evens [4 2 9]) -> [4 2]", "(evens [8 5 3 3 3]) -> [8]", "(evens [5]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (foldl b (lambda (d c) (filter b (lambda (e) (= c (+ 1 1))))) [])) _) _)", "time": 5.011348, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [7]) -> []", "(evens [2]) -> [2]", "(evens [5]) -> []", "(evens [4 0 4 0 2]) -> [4 0 4 0 2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 41.089766, "examples": ["(evens []) -> []", "(evens [4 8 7 5 1]) -> [4 8]", "(evens [3 2 4 8 6]) -> [2 4 8 6]", "(evens [5]) -> []", "(evens [4 1 9 0]) -> [4 0]", "(evens [7]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (<= (car (cdr b)) c)))) _) _)", "time": 0.501613, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [5 8 1 3 3]) -> [8]", "(evens []) -> []", "(evens []) -> []", "(evens [4 0]) -> [4 0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 27.36493, "examples": ["(evens []) -> []", "(evens [9]) -> []", "(evens [0 8]) -> [0 8]", "(evens [0 0 8]) -> [0 0 8]", "(evens [3]) -> []", "(evens [4 8 9]) -> [4 8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 27.781919, "examples": ["(evens []) -> []", "(evens [2]) -> [2]", "(evens []) -> []", "(evens [0 7 4 3]) -> [0 4]", "(evens [6 4]) -> [6 4]", "(evens [9 5 0 9]) -> [0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 30.484107, "examples": ["(evens []) -> []", "(evens [2 8 7 8 9]) -> [2 8 8]", "(evens [1 9 0 0]) -> [0 0]", "(evens [9]) -> []", "(evens [8 2 0 5 7]) -> [8 2 0]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 40.939603, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [7 4 0]) -> [4 0]", "(evens [5 1 6 7]) -> [6]", "(evens [6 0 0]) -> [6 0 0]", "(evens [2 8 4 7]) -> [2 8 4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 33.27462, "examples": ["(evens []) -> []", "(evens [8 3]) -> [8]", "(evens [4 4 4 3]) -> [4 4 4]", "(evens [4 3 7 5]) -> [4]", "(evens [9 1 2 7]) -> [2]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 29.526001, "examples": ["(evens []) -> []", "(evens [8 6 6]) -> [8 6 6]", "(evens [0]) -> [0]", "(evens [3 7 3]) -> []", "(evens [7]) -> []", "(evens [9 5 3 4 7]) -> [4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 28.796968, "examples": ["(evens []) -> []", "(evens [7 9 4]) -> [4]", "(evens [5]) -> []", "(evens [2 3 1 3 4]) -> [2 4]", "(evens [5 9 5 7]) -> []", "(evens [7]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 35.769976, "examples": ["(evens []) -> []", "(evens [9 7 0]) -> [0]", "(evens [6 8]) -> [6 8]", "(evens [5 2 6 0 5]) -> [2 6 0]", "(evens []) -> []", "(evens [6 9 5 7 7]) -> [6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 39.014337, "examples": ["(evens []) -> []", "(evens [2 5 7 6]) -> [2 6]", "(evens [6 6 3 4 0]) -> [6 6 4 0]", "(evens [2 5 2]) -> [2 2]", "(evens [0 6 3 2 5]) -> [0 6 2]", "(evens [2 0 8 1]) -> [2 0 8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 37.529719, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [0 1 1 5]) -> [0]", "(evens [8 7 4]) -> [8 4]", "(evens [8 7]) -> [8]", "(evens [2 5 9 2]) -> [2 2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 34.610373, "examples": ["(evens []) -> []", "(evens [7 7 2 9]) -> [2]", "(evens [6 2 4]) -> [6 2 4]", "(evens [2 7]) -> [2]", "(evens [7 8]) -> [8]", "(evens [2 7 0]) -> [2 0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 28.20072, "examples": ["(evens []) -> []", "(evens [5]) -> []", "(evens [5 9]) -> []", "(evens [0]) -> [0]", "(evens []) -> []", "(evens [3 8 1 2 2]) -> [8 2 2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 25.291937, "examples": ["(evens []) -> []", "(evens [6 9 5 8]) -> [6 8]", "(evens [2 1]) -> [2]", "(evens []) -> []", "(evens [4]) -> [4]", "(evens [2 7 4]) -> [2 4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 23.722217, "examples": ["(evens []) -> []", "(evens [0 5 6 7]) -> [0 6]", "(evens [6]) -> [6]", "(evens [1]) -> []", "(evens []) -> []", "(evens [5 6]) -> [6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 19.948953, "examples": ["(evens []) -> []", "(evens [1 9 9 5 8]) -> [8]", "(evens [2 1 3 2]) -> [2 2]", "(evens []) -> []", "(evens [9]) -> []", "(evens [5 3 3 0]) -> [0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 26.039494, "examples": ["(evens []) -> []", "(evens [4 7 5 3]) -> [4]", "(evens []) -> []", "(evens [4 4 8]) -> [4 4 8]", "(evens [2 9]) -> [2]", "(evens [3 9]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 25.320589, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [1 5 5 4 4]) -> [4 4]", "(evens [2 7 2 4 0]) -> [2 2 4 0]", "(evens [3 3]) -> []", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 19.449378, "examples": ["(evens []) -> []", "(evens [0 9 5]) -> [0]", "(evens []) -> []", "(evens [7 3]) -> []", "(evens [5 5 6]) -> [6]", "(evens [1 2 8]) -> [2 8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 18.615553, "examples": ["(evens []) -> []", "(evens [9 6]) -> [6]", "(evens [5 4 8 5 7]) -> [4 8]", "(evens [4 1]) -> [4]", "(evens [1 8 0 9 7]) -> [8 0]", "(evens [7 3 4]) -> [4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 16.389911, "examples": ["(evens []) -> []", "(evens [9]) -> []", "(evens [5 9 0 2]) -> [0 2]", "(evens [7 5 5]) -> []", "(evens [9 2]) -> [2]", "(evens [2 4 4]) -> [2 4 4]"], "name": "evens"}
