{"time": 1.770092, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {4}) -> [4]", "(leaves {5 {5 {4}}}) -> [4]", "(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {2}) -> [2]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)"}
{"time": 2.187475, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8 {5} {4}}) -> [5 4]", "(leaves {4}) -> [4]", "(leaves {4 {3 {9 {6} {1}} {6}}}) -> [6 1 6]", "(leaves {0 {1 {0} {3}} {7 {7}}}) -> [0 3 7]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.255362, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {1 {9 {7 {5}} {6 {8}}}}) -> [5 8]", "(leaves {8 {1}}) -> [1]", "(leaves {3 {4} {2}}) -> [4 2]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.228284, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {7 {9}}) -> [9]", "(leaves {9 {5}}) -> [5]", "(leaves {}) -> []", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)"}
{"time": 2.224429, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2 {8 {2 {7} {8}} {2 {8} {6}}} {6 {8 {2}} {9 {4} {1}}}}) -> [7 8 8 6 2 4 1]", "(leaves {4 {9} {6}}) -> [9 6]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.438286, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {7 {4}}) -> [4]", "(leaves {6 {1} {6}}) -> [1 6]", "(leaves {2}) -> [2]", "(leaves {5 {3} {3}}) -> [3 3]", "(leaves {1}) -> [1]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.492986, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {7 {9} {1 {9 {7}}}}) -> [9 7]", "(leaves {}) -> []", "(leaves {0 {7} {9 {1 {4}} {5 {4} {1}}}}) -> [7 4 4 1]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8 {8 {1}} {4 {3}}}) -> [1 3]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.609622, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {8 {4}}) -> [4]", "(leaves {6}) -> [6]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2 {2} {5}}) -> [2 5]", "(leaves {4}) -> [4]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.715363, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {2 {8}}) -> [8]", "(leaves {}) -> []", "(leaves {9 {1} {1}}) -> [1 1]", "(leaves {7}) -> [7]", "(leaves {3}) -> [3]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.810255, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {0 {6 {9 {1} {4}}} {3}}) -> [1 4 3]", "(leaves {9 {5} {6 {5 {8}}}}) -> [5 8]", "(leaves {4 {1 {3} {6 {6}}} {2 {2} {1 {2}}}}) -> [3 6 2 2]", "(leaves {3 {3 {0}} {2}}) -> [0 2]", "(leaves {}) -> []", "(leaves {6}) -> [6]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.883541, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {}) -> []", "(leaves {3 {4 {7} {1}} {2 {0} {7}}}) -> [7 1 0 7]", "(leaves {9 {6}}) -> [6]", "(leaves {7 {1 {5} {7 {9}}}}) -> [5 9]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 3.150373, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {3 {6 {3} {1}}}) -> [3 1]", "(leaves {5}) -> [5]", "(leaves {6 {0 {9} {7}} {8 {6} {3}}}) -> [9 7 6 3]", "(leaves {7 {9}}) -> [9]", "(leaves {7 {6} {7 {4} {0}}}) -> [6 4 0]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 3.098785, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {6 {5 {5}}}) -> [5]", "(leaves {3 {1 {5}}}) -> [5]", "(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {8 {4 {2}} {5 {3}}}) -> [2 3]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 3.180665, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {1 {8} {1}}) -> [8 1]", "(leaves {3 {1}}) -> [1]", "(leaves {6}) -> [6]", "(leaves {3}) -> [3]", "(leaves {2 {6} {7}}) -> [6 7]", "(leaves {2 {3}}) -> [3]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 3.141253, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {0 {0 {2 {4}}}}) -> [4]", "(leaves {7 {7}}) -> [7]", "(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {1}) -> [1]", "(leaves {7 {3 {3}} {1 {1}}}) -> [3 1]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 3.253606, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7 {6} {5}}) -> [6 5]", "(leaves {}) -> []", "(leaves {5 {7}}) -> [7]", "(leaves {}) -> []", "(leaves {5 {5 {6} {0}} {2}}) -> [6 0 2]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.101481, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {0 {3} {2 {4}}}) -> [3 4]", "(leaves {6 {8} {6}}) -> [8 6]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8 {6 {6 {7}}} {9 {3}}}) -> [7 3]", "(leaves {7 {9} {2}}) -> [9 2]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.943963, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {}) -> []", "(leaves {6 {2}}) -> [2]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7}) -> [7]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)"}
{"time": 2.492947, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {9 {1} {9}}) -> [1 9]", "(leaves {5}) -> [5]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.299411, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {2 {0} {0}}) -> [0 0]", "(leaves {1}) -> [1]", "(leaves {0 {6 {7} {8}}}) -> [7 8]", "(leaves {7 {0} {4 {3} {5 {8}}}}) -> [0 3 8]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.481263, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1 {8} {4}}) -> [8 4]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8 {5} {1}}) -> [5 1]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.572733, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {}) -> []", "(leaves {5 {5}}) -> [5]", "(leaves {7 {0} {4 {8}}}) -> [0 8]", "(leaves {5 {3 {4} {7}}}) -> [4 7]", "(leaves {3 {1} {3 {3 {1}} {9 {1} {4}}}}) -> [1 1 1 4]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.508428, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3 {3} {8 {2 {5} {8}} {4 {1} {3}}}}) -> [3 5 8 1 3]", "(leaves {7 {1} {2}}) -> [1 2]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.142645, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2 {5 {8} {5}} {9 {8} {9}}}) -> [8 5 8 9]", "(leaves {9 {4 {6 {3}}} {5 {3 {4}} {2 {7} {0}}}}) -> [3 4 7 0]", "(leaves {6 {6 {1} {0}} {5 {1}}}) -> [1 0 1]", "(leaves {6}) -> [6]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.001173, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {6 {1}}) -> [1]", "(leaves {4 {4 {3} {7}}}) -> [3 7]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4 {8 {4}}}) -> [4]", "(leaves {6}) -> [6]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.65101, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {2 {9}}) -> [9]", "(leaves {7 {4} {3}}) -> [4 3]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {6 {9}}) -> [9]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.936337, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {8 {7}}) -> [7]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {0 {5 {2} {6}}}) -> [2 6]", "(leaves {}) -> []", "(leaves {3}) -> [3]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.606163, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8 {5} {5 {1 {2}}}}) -> [5 2]", "(leaves {4}) -> [4]", "(leaves {8}) -> [8]", "(leaves {2 {5} {9 {8}}}) -> [5 8]", "(leaves {9 {1 {2}} {5 {5} {8}}}) -> [2 5 8]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.180463, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {8 {2}}) -> [2]", "(leaves {4 {6 {4} {9}} {3 {1}}}) -> [4 9 1]", "(leaves {1 {7} {4}}) -> [7 4]", "(leaves {5}) -> [5]", "(leaves {7 {2 {9} {1}}}) -> [9 1]", "(leaves {4 {6} {1}}) -> [6 1]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.825345, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {}) -> []", "(leaves {2 {1 {7}}}) -> [7]", "(leaves {2 {0 {8 {0} {3}} {9 {5} {2}}}}) -> [0 3 5 2]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.784718, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {1 {6}}) -> [6]", "(leaves {}) -> []", "(leaves {2 {0} {6}}) -> [0 6]", "(leaves {5 {4}}) -> [4]", "(leaves {2 {4 {8} {2}} {3 {3} {5}}}) -> [8 2 3 5]", "(leaves {5 {8} {1}}) -> [8 1]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.895472, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6 {8} {6}}) -> [8 6]", "(leaves {8 {3 {9} {6 {0} {4}}}}) -> [9 0 4]", "(leaves {4 {4 {6}}}) -> [6]", "(leaves {3 {7 {7} {4}} {2 {7} {8}}}) -> [7 4 7 8]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.493853, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {7 {8 {7} {6}}}) -> [7 6]", "(leaves {4}) -> [4]", "(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {1 {2} {4}}) -> [2 4]", "(leaves {8 {9} {6}}) -> [9 6]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.915242, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {5 {5 {3 {6}}} {6 {9} {2 {7} {7}}}}) -> [6 9 7 7]", "(leaves {5 {4 {0} {0}} {1 {3} {3}}}) -> [0 0 3 3]", "(leaves {6 {8}}) -> [8]", "(leaves {6 {8}}) -> [8]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.787597, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {5 {7 {7 {7}}} {0}}) -> [7 0]", "(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {5 {5}}) -> [5]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.765055, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {1 {2}}) -> [2]", "(leaves {6 {2 {0}} {3}}) -> [0 3]", "(leaves {5 {8 {0}} {4 {2}}}) -> [0 2]", "(leaves {7}) -> [7]", "(leaves {7}) -> [7]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.282676, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {3}) -> [3]", "(leaves {4 {9 {3} {2}}}) -> [3 2]", "(leaves {8 {0 {2} {3}}}) -> [2 3]", "(leaves {4}) -> [4]", "(leaves {1 {8 {5} {1}} {1 {5} {6}}}) -> [5 1 5 6]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.072508, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {7 {7 {1}}}) -> [1]", "(leaves {2 {4 {9} {3}}}) -> [9 3]", "(leaves {}) -> []", "(leaves {6 {7 {1 {8} {9}}}}) -> [8 9]", "(leaves {1 {1 {8}}}) -> [8]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.557116, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {0 {4 {8}}}) -> [8]", "(leaves {8 {9 {5}} {3 {6} {9}}}) -> [5 6 9]", "(leaves {4 {4 {1 {3} {4}} {1 {3}}}}) -> [3 4 3]", "(leaves {}) -> []", "(leaves {8 {4}}) -> [4]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.668615, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {4 {6}}) -> [6]", "(leaves {}) -> []", "(leaves {5 {2 {3 {3}} {0}} {6 {2} {8 {2}}}}) -> [3 0 2 2]", "(leaves {7}) -> [7]", "(leaves {6 {3 {6 {0}} {4 {4}}}}) -> [0 4]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 0.156325, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {2}) -> [2]", "(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {4}) -> [4]", "(leaves {7}) -> [7]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 2.906232, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {0 {0 {3 {6}}} {2}}) -> [6 2]", "(leaves {5 {3 {3 {7}} {8 {4}}}}) -> [7 4]", "(leaves {8 {6 {2}}}) -> [2]", "(leaves {8 {8 {0} {5}}}) -> [0 5]", "(leaves {5}) -> [5]", "(leaves {0 {2} {1}}) -> [2 1]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.951918, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {3 {2 {4} {8}} {9 {4}}}) -> [4 8 4]", "(leaves {}) -> []", "(leaves {9 {4} {0 {8}}}) -> [4 8]", "(leaves {8 {9 {5} {8}}}) -> [5 8]", "(leaves {4 {4 {3} {1 {9} {1}}} {0}}) -> [3 9 1 0]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.878465, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8 {1}}) -> [1]", "(leaves {8 {1 {1} {2}}}) -> [1 2]", "(leaves {8 {8}}) -> [8]", "(leaves {3 {6}}) -> [6]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.96536, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {0 {4}}) -> [4]", "(leaves {8 {7 {5} {8}} {2 {3 {3}}}}) -> [5 8 3]", "(leaves {7 {9}}) -> [9]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7}) -> [7]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.878975, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {4 {5} {2}}) -> [5 2]", "(leaves {5}) -> [5]", "(leaves {}) -> []", "(leaves {4 {0 {4}}}) -> [4]", "(leaves {3 {0} {1}}) -> [0 1]", "(leaves {0 {7 {3}} {8 {5 {2}}}}) -> [3 2]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.708796, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {9 {6} {0 {0} {7}}}) -> [6 0 7]", "(leaves {2 {6 {5 {8}} {7 {8} {9}}} {1}}) -> [8 8 9 1]", "(leaves {0 {7 {3 {8} {9}} {2}}}) -> [8 9 2]", "(leaves {2 {1} {3}}) -> [1 3]", "(leaves {6 {1 {9 {5} {1}}} {0 {1}}}) -> [5 1 1]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.562861, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {5}) -> [5]", "(leaves {}) -> []", "(leaves {2 {0 {4}}}) -> [4]", "(leaves {8 {9} {7}}) -> [9 7]", "(leaves {1 {7} {9}}) -> [7 9]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.288602, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {6 {9 {6 {1} {4}} {3}} {2 {1 {9}}}}) -> [1 4 3 9]", "(leaves {5 {6 {8 {2} {4}}} {1}}) -> [2 4 1]", "(leaves {6 {7} {9}}) -> [7 9]", "(leaves {2 {1} {5}}) -> [1 5]", "(leaves {7 {3 {0}}}) -> [0]", "(leaves {6 {6 {0}} {4}}) -> [0 4]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 3.133323, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {5 {7}}) -> [7]", "(leaves {6 {4}}) -> [4]", "(leaves {}) -> []", "(leaves {7 {1 {4}} {6}}) -> [4 6]", "(leaves {}) -> []", "(leaves {2 {7} {9}}) -> [7 9]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.545498, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {3 {7}}) -> [7]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3 {0 {3 {5} {2}} {8}} {7 {5 {4} {6}}}}) -> [5 2 8 4 6]", "(leaves {}) -> []", "(leaves {1 {4 {1}}}) -> [1]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.573282, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {4 {9} {0}}) -> [9 0]", "(leaves {1 {8}}) -> [8]", "(leaves {1}) -> [1]", "(leaves {9 {6} {1}}) -> [6 1]", "(leaves {}) -> []", "(leaves {9}) -> [9]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.674178, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {0 {3 {0}}}) -> [0]", "(leaves {7}) -> [7]", "(leaves {1 {5 {9} {5}} {9}}) -> [9 5 9]", "(leaves {8 {4 {2} {9}}}) -> [2 9]", "(leaves {6 {1}}) -> [1]", "(leaves {4}) -> [4]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.736868, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9 {7}}) -> [7]", "(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {9 {0 {4} {4}} {4 {8}}}) -> [4 4 8]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.682, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6 {0}}) -> [0]", "(leaves {9 {2 {6} {9 {1}}}}) -> [6 1]", "(leaves {1}) -> [1]", "(leaves {6 {5} {4}}) -> [5 4]", "(leaves {1}) -> [1]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.602743, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {9}) -> [9]", "(leaves {2 {9} {5}}) -> [9 5]", "(leaves {9}) -> [9]", "(leaves {1 {1 {7} {9}}}) -> [7 9]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.615439, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {3 {1} {7}}) -> [1 7]", "(leaves {1 {0}}) -> [0]", "(leaves {2 {3}}) -> [3]", "(leaves {2}) -> [2]", "(leaves {2 {6} {5 {1 {4}} {6}}}) -> [6 4 6]", "(leaves {5 {5}}) -> [5]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.93243, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9 {2 {4 {0}} {6}}}) -> [0 6]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1 {8} {0 {9}}}) -> [8 9]", "(leaves {7 {6} {4 {3}}}) -> [6 3]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 0.115065, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6 {6}}) -> [6]", "(leaves {9}) -> [9]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 1.673493, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9 {0}}) -> [0]", "(leaves {7 {7 {3}} {7}}) -> [3 7]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.720112, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {5 {4}}) -> [4]", "(leaves {1 {8 {7 {4} {6}}}}) -> [4 6]", "(leaves {5 {4 {5}}}) -> [5]", "(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.839692, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {4 {9 {8} {9}}}) -> [8 9]", "(leaves {7 {1 {6 {0}} {6 {4} {2}}} {3 {7 {8}}}}) -> [0 4 2 8]", "(leaves {0 {6 {5 {5}}} {4 {1} {0 {0} {2}}}}) -> [5 1 0 2]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.955046, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {6 {7 {0 {4}} {8 {6} {6}}}}) -> [4 6 6]", "(leaves {}) -> []", "(leaves {1 {3}}) -> [3]", "(leaves {}) -> []", "(leaves {7 {4}}) -> [4]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.995923, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {3 {5 {3} {7}}}) -> [3 7]", "(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {6 {0}}) -> [0]", "(leaves {1 {1} {5}}) -> [1 5]", "(leaves {7 {2 {1 {0}}} {1}}) -> [0 1]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.46862, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {7 {9}}) -> [9]", "(leaves {7 {3} {9 {3}}}) -> [3 3]", "(leaves {8}) -> [8]", "(leaves {2}) -> [2]", "(leaves {}) -> []", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.693316, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {3 {5} {9}}) -> [5 9]", "(leaves {5 {5 {1} {2}} {8 {8} {4}}}) -> [1 2 8 4]", "(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {6 {6} {7 {4} {0 {1} {5}}}}) -> [6 4 1 5]", "(leaves {1 {6}}) -> [6]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.605204, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {}) -> []", "(leaves {6 {9}}) -> [9]", "(leaves {3 {7 {9} {1}}}) -> [9 1]", "(leaves {8 {4}}) -> [4]", "(leaves {5}) -> [5]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.226767, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {9 {2}}) -> [2]", "(leaves {8 {7} {0}}) -> [7 0]", "(leaves {1 {3} {4}}) -> [3 4]", "(leaves {7}) -> [7]", "(leaves {}) -> []", "(leaves {9}) -> [9]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.234298, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {5 {7 {1}}}) -> [1]", "(leaves {2 {5} {1}}) -> [5 1]", "(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {}) -> []", "(leaves {4 {0} {1}}) -> [0 1]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.393411, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {5 {9} {8 {3}}}) -> [9 3]", "(leaves {1}) -> [1]", "(leaves {2 {8 {3 {1}}}}) -> [1]", "(leaves {2}) -> [2]", "(leaves {8 {5} {0}}) -> [5 0]", "(leaves {7}) -> [7]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.8191, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {0 {1 {3} {7}} {4 {5 {7} {4}} {9 {6}}}}) -> [3 7 7 4 6]", "(leaves {4 {5}}) -> [5]", "(leaves {2}) -> [2]", "(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {5 {7} {4}}) -> [7 4]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.830974, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {9 {2}}) -> [2]", "(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {}) -> []", "(leaves {5 {1}}) -> [1]", "(leaves {2 {2}}) -> [2]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)"}
{"time": 2.224706, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {1 {7} {4}}) -> [7 4]", "(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {5}) -> [5]", "(leaves {0 {6}}) -> [6]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.56967, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {0 {9} {4}}) -> [9 4]", "(leaves {}) -> []", "(leaves {7 {3} {3 {9} {9}}}) -> [3 9 9]", "(leaves {0}) -> [0]", "(leaves {1 {7} {9}}) -> [7 9]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.539016, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {}) -> []", "(leaves {8 {6} {8}}) -> [6 8]", "(leaves {3 {3 {3}} {6}}) -> [3 6]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.627616, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {}) -> []", "(leaves {3 {0}}) -> [0]", "(leaves {0 {0 {5} {2}} {5 {3}}}) -> [5 2 3]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.172918, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {1 {6 {1 {7}} {9 {4}}} {5}}) -> [7 4 5]", "(leaves {2 {3 {9}}}) -> [9]", "(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {5}) -> [5]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.609596, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {2 {8} {9}}) -> [8 9]", "(leaves {1}) -> [1]", "(leaves {1 {5 {9 {2} {5}}}}) -> [2 5]", "(leaves {1}) -> [1]", "(leaves {2 {0} {8}}) -> [0 8]", "(leaves {2 {5}}) -> [5]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.823679, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {3 {5}}) -> [5]", "(leaves {4 {4 {4}}}) -> [4]", "(leaves {}) -> []", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)"}
{"time": 1.520819, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {7}) -> [7]", "(leaves {6 {1 {7}}}) -> [7]", "(leaves {9 {6}}) -> [6]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)"}
{"time": 2.27876, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {6 {5}}) -> [5]", "(leaves {}) -> []", "(leaves {6 {9 {8}} {1 {2}}}) -> [8 2]", "(leaves {5 {2} {6}}) -> [2 6]", "(leaves {1 {3}}) -> [3]", "(leaves {1 {2 {8} {3}}}) -> [8 3]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.633061, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {0 {6 {2} {8}}}) -> [2 8]", "(leaves {6 {2 {7}} {3 {8} {2}}}) -> [7 8 2]", "(leaves {}) -> []", "(leaves {4 {3 {6} {8}}}) -> [6 8]", "(leaves {0}) -> [0]", "(leaves {5 {3} {6 {6 {8} {0}}}}) -> [3 8 0]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.864216, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3 {3}}) -> [3]", "(leaves {}) -> []", "(leaves {4 {2}}) -> [2]", "(leaves {}) -> []", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (cons (value (car (children b))) [])) [])) _) _)"}
{"time": 2.616924, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {6 {5 {2 {1}} {7}} {2}}) -> [1 7 2]", "(leaves {3 {1} {5}}) -> [1 5]", "(leaves {4}) -> [4]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6 {3 {7} {1}}}) -> [7 1]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.679608, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {6}) -> [6]", "(leaves {6 {2} {2}}) -> [2 2]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.574566, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1 {2} {2}}) -> [2 2]", "(leaves {}) -> []", "(leaves {1 {4 {3 {5}} {9 {9}}}}) -> [5 9]", "(leaves {3 {1}}) -> [1]", "(leaves {0}) -> [0]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.469044, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {1 {2} {7}}) -> [2 7]", "(leaves {1 {0 {1} {5 {4} {1}}} {1 {0} {8}}}) -> [1 4 1 0 8]", "(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {6}) -> [6]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.549732, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {9 {5 {4 {9}}} {6}}) -> [9 6]", "(leaves {2}) -> [2]", "(leaves {1}) -> [1]", "(leaves {5 {6} {6}}) -> [6 6]", "(leaves {8 {9 {6 {1} {8}}} {1}}) -> [1 8 1]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.355676, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {8 {3} {1 {0} {5}}}) -> [3 0 5]", "(leaves {4 {7}}) -> [7]", "(leaves {7 {3} {5}}) -> [3 5]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5}) -> [5]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.568059, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {2 {5}}) -> [5]", "(leaves {0}) -> [0]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1 {7 {7}}}) -> [7]", "(leaves {9}) -> [9]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)"}
{"time": 2.33617, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {7 {5 {2} {0}}}) -> [2 0]", "(leaves {3 {7 {1}} {1}}) -> [1 1]", "(leaves {8}) -> [8]", "(leaves {8}) -> [8]", "(leaves {6 {9} {5}}) -> [9 5]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.454434, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {1 {4} {7}}) -> [4 7]", "(leaves {4 {4 {4 {6}}}}) -> [6]", "(leaves {6 {3} {4}}) -> [3 4]", "(leaves {3}) -> [3]", "(leaves {9 {7}}) -> [7]", "(leaves {7 {6} {5}}) -> [6 5]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.361869, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {8 {5}}) -> [5]", "(leaves {1 {3 {7}} {1}}) -> [7 1]", "(leaves {2}) -> [2]", "(leaves {1}) -> [1]", "(leaves {1 {5} {6 {5}}}) -> [5 5]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.437195, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {5}) -> [5]", "(leaves {}) -> []", "(leaves {1 {6}}) -> [6]", "(leaves {}) -> []", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)"}
{"time": 2.050735, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7 {0} {1}}) -> [0 1]", "(leaves {}) -> []", "(leaves {4 {6}}) -> [6]", "(leaves {8}) -> [8]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.660838, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {4 {5} {8}}) -> [5 8]", "(leaves {1}) -> [1]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {0}) -> [0]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
