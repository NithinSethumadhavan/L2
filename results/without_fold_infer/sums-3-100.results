{"name": "sums", "time": 0.000254, "solution": "(let sums (let a (lambda (b) []) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []"]}
{"name": "sums", "time": 0.000192, "solution": "(let sums (let a (lambda (b) []) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []"]}
{"name": "sums", "time": 0.000329, "solution": "(let sums (let a (lambda (b) []) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []"]}
{"name": "sums", "time": 0.000468, "solution": "(let sums (let a (lambda (b) []) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []"]}
{"name": "sums", "time": 0.000669, "solution": "(let sums (let a (lambda (b) []) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []"]}
{"name": "sums", "time": 0.908157, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) d) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [4] [0 1]]) -> [0 4 1]"]}
{"name": "sums", "time": 1.849983, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[8 4 7 3] [8] [7 8 3] [3]]) -> [22 8 18 3]"]}
{"name": "sums", "time": 1.887131, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[6 3] [7]]) -> [9 7]"]}
{"name": "sums", "time": 1.856026, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[9 6 4 2] [6 0 6 3] [5 2 9 1] [6 3] [9 1 7]]) -> [21 15 17 9 17]"]}
{"name": "sums", "time": 1.852528, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[6 2 6 1 5] [6 6 5] [7 2 8 0]]) -> [20 17 17]"]}
{"name": "sums", "time": 1.866423, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[8 9 3 0 5]]) -> [25]"]}
{"name": "sums", "time": 1.920874, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[2 8] [3 0 6 0 7]]) -> [10 16]"]}
{"name": "sums", "time": 1.922558, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[0 0 6 6 2] [2 4] [5 7 5 7 2] [8 8 1] [5 0 9]]) -> [14 6 26 17 14]"]}
{"name": "sums", "time": 1.888439, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[1 7 7 2] []]) -> [17 0]"]}
{"name": "sums", "time": 1.971004, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [5 9 3 2 2]]) -> [0 21]"]}
{"name": "sums", "time": 1.917451, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[5 5 3 3 4]]) -> [20]"]}
{"name": "sums", "time": 2.048362, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[2 3 9 2] [8 9 5 5] [] [] [1 0]]) -> [16 27 0 0 1]"]}
{"name": "sums", "time": 0.000436, "solution": "(let sums (let a (lambda (b) []) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []"]}
{"name": "sums", "time": 2.054455, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[1 7 7 7] [8] [] [1 4 0 7 5]]) -> [22 8 0 17]"]}
{"name": "sums", "time": 0.023881, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (car c)))) _) _)", "examples": ["(sums []) -> []", "(sums [[4]]) -> [4]"]}
{"name": "sums", "time": 2.033761, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[3 6] [0] []]) -> [9 0 0]"]}
{"name": "sums", "time": 1.935347, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[3 7 7]]) -> [17]"]}
{"name": "sums", "time": 2.025184, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[2] [] [5 6 8 8 9] [3 5 8 4]]) -> [2 0 36 20]"]}
{"name": "sums", "time": 0.031327, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (car c)))) _) _)", "examples": ["(sums []) -> []", "(sums [[9]]) -> [9]"]}
{"name": "sums", "time": 1.479544, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (+ (car c) (car (cdr c)))))) _) _)", "examples": ["(sums []) -> []", "(sums [[9 3] [0 4]]) -> [12 4]"]}
{"name": "sums", "time": 1.732667, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [4 0 8 9 0] [6 9 9]]) -> [0 21 24]"]}
{"name": "sums", "time": 1.787704, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[0 4 4 0 2] [6 3]]) -> [10 9]"]}
{"name": "sums", "time": 1.515733, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (+ (car c) (car (cdr c)))))) _) _)", "examples": ["(sums []) -> []", "(sums [[4 8]]) -> [12]"]}
{"name": "sums", "time": 1.763532, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[6 1 7] [5 0 9 8 8] [4 5 9 9] [8 7]]) -> [14 30 27 15]"]}
{"name": "sums", "time": 1.80909, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[9 7 0 7 6] [2]]) -> [29 2]"]}
{"name": "sums", "time": 1.798958, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[2 4] [9] [4 1 0]]) -> [6 9 5]"]}
{"name": "sums", "time": 0.000507, "solution": "(let sums (let a (lambda (b) []) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []"]}
{"name": "sums", "time": 1.895945, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[2 5 9 0] [3] [6] [9 5 5] [9]]) -> [16 3 6 19 9]"]}
{"name": "sums", "time": 1.687879, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[3] [9 0 5 2 3]]) -> [3 19]"]}
{"name": "sums", "time": 1.789055, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[9 9 2 8 2] [3 8] [9 1 1 4 3] [3 5]]) -> [30 11 18 8]"]}
{"name": "sums", "time": 1.751454, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[1 7 6 1 0] [] [4 8 5 9 0] [0 1 0] []]) -> [15 0 26 1 0]"]}
{"name": "sums", "time": 1.896598, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[2 9 7] [6 5 7] [5] [1 6 5 1] [3 0 8 6]]) -> [18 18 5 13 17]"]}
{"name": "sums", "time": 1.896815, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[8 0 9 4 9] [5 5] [9 8 8 2] [3 5 6 5]]) -> [30 10 27 19]"]}
{"name": "sums", "time": 1.763261, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[7 2 5 3] [5 7 2 5 5] []]) -> [17 24 0]"]}
{"name": "sums", "time": 1.759164, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[5] [5 9 7] [3 8] [9 9] []]) -> [5 21 11 18 0]"]}
{"name": "sums", "time": 0.022972, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (car c)))) _) _)", "examples": ["(sums []) -> []", "(sums [[6] [5]]) -> [6 5]"]}
{"name": "sums", "time": 0.036717, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) 0))) _) _)", "examples": ["(sums []) -> []", "(sums [[]]) -> [0]"]}
{"name": "sums", "time": 1.83921, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[3 0 0] [0 1 5 3] [3 4 9 4] [] [9 7 3 3 8]]) -> [3 9 20 0 30]"]}
{"name": "sums", "time": 0.029914, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) 0))) _) _)", "examples": ["(sums []) -> []", "(sums [[] []]) -> [0 0]"]}
{"name": "sums", "time": 1.692152, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [] [5 6 3] [3 2 1 8]]) -> [0 0 14 14]"]}
{"name": "sums", "time": 0.000629, "solution": "(let sums (let a (lambda (b) []) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []"]}
{"name": "sums", "time": 1.638445, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (+ (car c) (car (cdr c)))))) _) _)", "examples": ["(sums []) -> []", "(sums [[9 3]]) -> [12]"]}
{"name": "sums", "time": 1.695185, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[4 8 9 5] [1] [4 9 6] [3 2 5 6]]) -> [26 1 19 16]"]}
{"name": "sums", "time": 1.638315, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[6 4] []]) -> [10 0]"]}
{"name": "sums", "time": 1.642431, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[4 2 5] [7 5 0 0] [1 4 7 8 5] [8 8]]) -> [11 12 25 16]"]}
{"name": "sums", "time": 1.960213, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[6 1] [3 8 1 2 5]]) -> [7 19]"]}
{"name": "sums", "time": 2.012354, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[3 9 9] []]) -> [21 0]"]}
{"name": "sums", "time": 1.705322, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[9 6 8 2]]) -> [25]"]}
{"name": "sums", "time": 1.691505, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [0 0 9] [1 1] [] [0 6]]) -> [0 9 2 0 6]"]}
{"name": "sums", "time": 2.040882, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[0 9 4 8 2]]) -> [23]"]}
{"name": "sums", "time": 0.000808, "solution": "(let sums (let a (lambda (b) []) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []"]}
{"name": "sums", "time": 1.633536, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[9 5 8 7] [9 6 1 8]]) -> [29 24]"]}
{"name": "sums", "time": 1.745146, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[7 1] [1] [2 7]]) -> [8 1 9]"]}
{"name": "sums", "time": 2.027591, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[4 1 9]]) -> [14]"]}
{"name": "sums", "time": 2.136527, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[2 8 7] [4 3] [3 7] [5 8 6] [3 3 3 4]]) -> [17 7 10 19 13]"]}
{"name": "sums", "time": 2.106823, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [2 5 0 7 5] [7 4 4] [5 5] [6 1 4 9]]) -> [0 19 15 10 20]"]}
{"name": "sums", "time": 2.017884, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[3 8 8 1 5]]) -> [25]"]}
{"name": "sums", "time": 1.928021, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[2 1 3 9 8] [2 6 3 9 2] [5 0]]) -> [23 22 5]"]}
{"name": "sums", "time": 1.278202, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (+ (car c) (car (cdr c)))))) _) _)", "examples": ["(sums []) -> []", "(sums [[2 8]]) -> [10]"]}
{"name": "sums", "time": 1.589624, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [9 3] [] [8 5 9 0 2]]) -> [0 12 0 24]"]}
{"name": "sums", "time": 1.762617, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[5 1 5] [7 0 7] []]) -> [11 14 0]"]}
{"name": "sums", "time": 1.568018, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[8 4 1]]) -> [13]"]}
{"name": "sums", "time": 1.405351, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[4 5 2 1 3] [7 8]]) -> [15 15]"]}
{"name": "sums", "time": 1.867648, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[7 0 9]]) -> [16]"]}
{"name": "sums", "time": 1.409, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[7 5 8] [1 8 6 1]]) -> [20 16]"]}
{"name": "sums", "time": 1.382342, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[7] [4 5 5 3 6] [] [6 6]]) -> [7 23 0 12]"]}
{"name": "sums", "time": 0.391995, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (+ (car c) (car c))))) _) _)", "examples": ["(sums []) -> []", "(sums [[7 2 4 1]]) -> [14]"]}
{"name": "sums", "time": 2.226411, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[4 5 7] [4 2 8 7] [1] [4 5 8] [6 1]]) -> [16 21 1 17 7]"]}
{"name": "sums", "time": 2.309392, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [0 4 7] [] [7 6 3 5] [5 3]]) -> [0 11 0 21 8]"]}
{"name": "sums", "time": 2.135503, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[3 3 1]]) -> [7]"]}
{"name": "sums", "time": 2.257405, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[5] [0 9 3 8] [4 9 3] [6]]) -> [5 20 16 6]"]}
{"name": "sums", "time": 2.360893, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[9 1 8 7] [8] [5 9 1 5 1]]) -> [25 8 21]"]}
{"name": "sums", "time": 2.255746, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[9 2 6] [6]]) -> [17 6]"]}
{"name": "sums", "time": 2.19121, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[6 0 7 9 3]]) -> [25]"]}
{"name": "sums", "time": 0.03842, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (car c)))) _) _)", "examples": ["(sums []) -> []", "(sums [[3]]) -> [3]"]}
{"name": "sums", "time": 1.382227, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (+ (car c) (car (cdr c)))))) _) _)", "examples": ["(sums []) -> []", "(sums [[8 5]]) -> [13]"]}
{"name": "sums", "time": 2.148999, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [2 1 6 1 2]]) -> [0 12]"]}
{"name": "sums", "time": 1.838095, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[4 4 1] [] [0 8 0 8 6] [7 4 9 5 1] [1 6 2 9]]) -> [9 0 22 26 18]"]}
{"name": "sums", "time": 1.699575, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[9 1 3]]) -> [13]"]}
{"name": "sums", "time": 1.78846, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [4 7]]) -> [0 11]"]}
{"name": "sums", "time": 1.770688, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[8] [3 5 7 3] [6 3]]) -> [8 18 9]"]}
{"name": "sums", "time": 1.917856, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[6] [3 2] [5 9]]) -> [6 5 14]"]}
{"name": "sums", "time": 1.829025, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[9 2 1 5] [4] [8]]) -> [17 4 8]"]}
{"name": "sums", "time": 1.643791, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[4 0 0] [3 8 4 5 9] [2 8 9 2 1] [3 9 3] [4 8 9 1]]) -> [4 29 22 15 22]"]}
{"name": "sums", "time": 1.542587, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[2 4 9] [7 5 6 9] [1 9 3 7]]) -> [15 27 20]"]}
{"name": "sums", "time": 0.6748, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) d) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[5] []]) -> [5 0]"]}
{"name": "sums", "time": 1.525875, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[4 3] [8 0 1] [9 1] []]) -> [7 9 10 0]"]}
{"name": "sums", "time": 1.537595, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[5] [8 2 5 6] [3] []]) -> [5 21 3 0]"]}
{"name": "sums", "time": 1.633032, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[5 6 6] [3 9 5]]) -> [17 17]"]}
{"name": "sums", "time": 1.41464, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[0 0 0 7] [4 3 4 5 4] [] []]) -> [7 20 0 0]"]}
{"name": "sums", "time": 1.54452, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[7 6] [8 4 3 2 2] [1 3 6] [9 9 0 8 6]]) -> [13 19 10 32]"]}
{"name": "sums", "time": 1.362011, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [6 8 4 0 2] [3 5 1 6] [1 4] [3 9 9 7]]) -> [0 20 15 5 28]"]}
{"name": "sums", "time": 0.996679, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[9 5 0 5] [0 3] [6 1 0 1 0] [0 4 2 1 8]]) -> [19 3 8 15]"]}
{"name": "sums", "time": 1.005297, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[8 2 0 2] [0] [4 0]]) -> [12 0 4]"]}
{"name": "sums", "time": 0.946355, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[5] [] [3] [3 3] [1 9 2 9]]) -> [5 0 3 6 21]"]}
