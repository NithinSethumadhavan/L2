{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {9}) -> 1", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) 1) 0)) _) _)", "time": 0.09536}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3 {8} {2}}) -> 3", "(count_nodes {4 {9} {7}}) -> 3", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (+ 1 (+ 1 1))) 0)) _) _)", "time": 1.379983}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {0} {2}}) -> 3", "(count_nodes {2 {7}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) c) 1)) 0)) _) _)", "time": 1.763922}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {2 {1}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) c) 1)) 0)) _) _)", "time": 1.917669}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {9 {9} {3}}}) -> 4", "(count_nodes {1}) -> 1", "(count_nodes {9 {4}}) -> 2", "(count_nodes {7 {4} {6}}) -> 3", "(count_nodes {6}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.757773}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {8 {0}}) -> 2", "(count_nodes {6}) -> 1", "(count_nodes {6 {3}}) -> 2", "(count_nodes {5}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 1)) 1)) 0)) _) _)", "time": 4.391979}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {4}}) -> 2", "(count_nodes {3 {7 {8} {2}} {1 {9}}}) -> 6", "(count_nodes {8}) -> 1", "(count_nodes {5}) -> 1", "(count_nodes {7 {4 {0}}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.048512}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {1 {8}}) -> 2", "(count_nodes {4 {5 {0}}}) -> 3", "(count_nodes {8 {4} {8}}) -> 3", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.24765}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {0} {1}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {9 {3}}) -> 2", "(count_nodes {3 {6 {9}}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.176921}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {0 {6} {4}}) -> 3", "(count_nodes {4}) -> 1", "(count_nodes {1 {8 {9 {8} {8}}}}) -> 5", "(count_nodes {6 {4} {4}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.213128}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {9 {6 {9}} {1 {4}}}) -> 5", "(count_nodes {4 {7 {1}} {4 {6}}}) -> 5", "(count_nodes {7 {9}}) -> 2", "(count_nodes {2}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.228658}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {9}}) -> 2", "(count_nodes {5}) -> 1", "(count_nodes {0}) -> 1", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 1)) 1)) 0)) _) _)", "time": 6.876299}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {7}}) -> 2", "(count_nodes {3}) -> 1", "(count_nodes {4 {0}}) -> 2", "(count_nodes {6 {5} {4}}) -> 3", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 6.902854}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {6 {1 {0}}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 e)) 1)) 0)) _) _)", "time": 7.204179}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {4 {1} {3}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {1 {0} {8}}) -> 3", "(count_nodes {8 {4 {5 {9} {9}} {3}}}) -> 6", "(count_nodes {6 {1 {3} {4}} {2}}) -> 5"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 7.201734}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1 {3} {8}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {0 {8}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 7.320105}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {8 {6 {0 {1} {6}} {7 {7} {6}}}}) -> 8", "(count_nodes {}) -> 0", "(count_nodes {9 {6 {8} {4}} {9 {6} {1}}}) -> 7", "(count_nodes {8 {7}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 7.333527}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3 {3 {5}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) c) 0)) _) _)", "time": 0.038021}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {9 {8 {4} {0}}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {1 {6}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {1}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 7.551373}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {7}) -> 1", "(count_nodes {5 {6 {4}}}) -> 3", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 e)) 1)) 0)) _) _)", "time": 3.182998}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {9 {6}}}) -> 3", "(count_nodes {8 {3} {5}}) -> 3", "(count_nodes {8 {6 {5 {3} {6}}} {2 {8} {7 {9} {2}}}}) -> 10", "(count_nodes {8 {5} {1}}) -> 3", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 6.538161}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {5} {1}}) -> 3", "(count_nodes {5 {0 {8}} {3}}) -> 4", "(count_nodes {1}) -> 1", "(count_nodes {0 {4}}) -> 2", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 6.140269}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {5 {2 {3}}}) -> 3", "(count_nodes {7 {7 {3}} {4}}) -> 4", "(count_nodes {8 {4} {9}}) -> 3", "(count_nodes {4}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.759431}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {0 {6} {6}}}) -> 4", "(count_nodes {9}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {4 {4}}) -> 2", "(count_nodes {0 {3 {1}}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.819226}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {8 {6}}) -> 2", "(count_nodes {8 {4 {6 {5} {3}}}}) -> 5"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.035292}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {1 {6} {1}}) -> 3", "(count_nodes {6 {6 {7 {8}} {0}} {4 {2} {5 {8}}}}) -> 9", "(count_nodes {2 {6}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.252128}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {0 {6}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 1)) 1)) 0)) _) _)", "time": 4.310763}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {2} {9 {0 {4}}}}) -> 5", "(count_nodes {5 {9}}) -> 2", "(count_nodes {1 {9 {9}} {6 {3 {4} {5}} {3 {8}}}}) -> 9", "(count_nodes {}) -> 0", "(count_nodes {5 {2 {2 {6}} {6}} {8 {0 {1}}}}) -> 8"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.456884}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {6 {8} {6}}}) -> 4", "(count_nodes {6}) -> 1", "(count_nodes {1 {5}}) -> 2", "(count_nodes {8 {6} {9}}) -> 3", "(count_nodes {8 {1}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.912338}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {9 {6}}) -> 2", "(count_nodes {2}) -> 1", "(count_nodes {8}) -> 1", "(count_nodes {6 {8} {8}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 3.884187}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {0 {4}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {6 {5} {3}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 4.595692}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {1 {8} {6}} {7 {5} {7}}}) -> 7", "(count_nodes {8 {5}}) -> 2", "(count_nodes {0 {4 {7} {0}}}) -> 4", "(count_nodes {1 {7 {3}} {1 {7} {5 {0}}}}) -> 7", "(count_nodes {3 {0}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.648275}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {0 {8 {2}} {7 {9} {8}}} {5 {7}}}) -> 9", "(count_nodes {9 {0} {5}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {7 {1 {2}}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.988165}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {5}}) -> 2", "(count_nodes {2}) -> 1", "(count_nodes {8}) -> 1", "(count_nodes {7 {0 {6 {0} {7}} {4}}}) -> 6", "(count_nodes {4 {9} {1}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.800327}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1 {2 {3 {8} {7}}}}) -> 5", "(count_nodes {8 {9 {7 {7} {2}}} {0 {6 {5} {4}}}}) -> 9"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.855093}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3 {1 {3 {6}}} {7 {0 {0}} {3 {9}}}}) -> 9", "(count_nodes {4 {6}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {9 {2}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.957842}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {8}}) -> 2", "(count_nodes {3}) -> 1", "(count_nodes {9 {1} {7}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {2 {6} {6}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 4.526347}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {7}}) -> 2", "(count_nodes {9 {4 {8 {9} {0}} {2 {4}}}}) -> 7", "(count_nodes {7 {6 {0} {9}}}) -> 4", "(count_nodes {8}) -> 1", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.864672}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8 {7 {5}}}) -> 3", "(count_nodes {4 {6} {8 {1 {3}} {4 {3} {1}}}}) -> 8", "(count_nodes {5 {6}}) -> 2", "(count_nodes {3 {5}}) -> 2", "(count_nodes {4}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.990979}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {1} {6}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {6}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ c f)) 1)) 0)) _) _)", "time": 4.367851}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {4 {3 {0 {3} {3}} {0}} {1}}) -> 7", "(count_nodes {5}) -> 1", "(count_nodes {3 {2} {7}}) -> 3", "(count_nodes {9 {8} {0}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.42257}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6 {7} {3}}) -> 3", "(count_nodes {1}) -> 1", "(count_nodes {7 {6}}) -> 2", "(count_nodes {5 {1 {2} {5}} {9}}) -> 5"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.635196}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {7 {2 {8 {5}}} {6}}) -> 5", "(count_nodes {1}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.895109}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {7}}) -> 2", "(count_nodes {9 {7 {3}}}) -> 3", "(count_nodes {7}) -> 1", "(count_nodes {1 {3} {6}}) -> 3", "(count_nodes {9}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.025147}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {6 {9 {7 {6}} {5 {2} {6}}}}) -> 7", "(count_nodes {}) -> 0", "(count_nodes {8 {9 {1}} {1 {8} {9}}}) -> 6"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.934036}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {7} {0}}) -> 3", "(count_nodes {1 {9 {7 {4} {3}}}}) -> 5", "(count_nodes {0}) -> 1", "(count_nodes {6 {5} {0}}) -> 3", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.310862}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2 {6}}) -> 2", "(count_nodes {7 {7 {3} {9 {8} {0}}}}) -> 6", "(count_nodes {2 {2}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.921144}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {9}) -> 1", "(count_nodes {7 {4}}) -> 2", "(count_nodes {8 {2}}) -> 2", "(count_nodes {4 {8 {0} {9}} {6 {1} {3}}}) -> 7"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.727464}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {9}) -> 1", "(count_nodes {8 {0}}) -> 2", "(count_nodes {5 {9} {8}}) -> 3", "(count_nodes {3 {0 {2}}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.447755}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {8 {6}}) -> 2", "(count_nodes {3 {7}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 1)) 1)) 0)) _) _)", "time": 4.236422}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {5} {2}}) -> 3", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {3 {6 {2 {2}} {3 {2} {8}}}}) -> 7", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.068727}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8 {6 {9 {3} {6}} {4 {3} {6}}} {0 {3 {5}} {5 {5}}}}) -> 13", "(count_nodes {5}) -> 1", "(count_nodes {1 {7}}) -> 2", "(count_nodes {0 {7}}) -> 2", "(count_nodes {5 {7} {1}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.072647}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {1}}) -> 2", "(count_nodes {7 {8 {8 {8}} {2}}}) -> 5", "(count_nodes {4}) -> 1", "(count_nodes {2 {6}}) -> 2", "(count_nodes {0 {6 {6}}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.663894}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1 {0}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (+ 1 (/ 1 (value b)))) 0)) _) _)", "time": 3.737962}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {0 {3 {7 {2} {3}} {1 {7}}}}) -> 7", "(count_nodes {4 {0 {7 {1}}}}) -> 4", "(count_nodes {7}) -> 1", "(count_nodes {9 {7}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.802036}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {2}) -> 1", "(count_nodes {7 {1 {9 {9} {1}} {4 {4}}}}) -> 7", "(count_nodes {0 {2 {7} {9 {5} {7}}} {6 {9 {1}} {2}}}) -> 10", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.991682}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {8} {1}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2 {3} {1}}) -> 3", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (+ 1 (+ 1 1))) 0)) _) _)", "time": 1.045493}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {4 {4 {0} {8}} {0 {8}}} {8 {3 {5} {5}}}}) -> 11", "(count_nodes {8}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {8 {7} {9}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.286216}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {9 {6 {5}}}}) -> 4", "(count_nodes {8}) -> 1", "(count_nodes {8 {8 {5} {8 {2} {4}}} {5}}) -> 7", "(count_nodes {9 {6} {2}}) -> 3", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.686539}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {6 {2 {6}}}}) -> 4", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {0}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 e)) 1)) 0)) _) _)", "time": 4.813084}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {3 {2 {1} {7}}}) -> 4", "(count_nodes {2 {5} {9}}) -> 3", "(count_nodes {0 {4}}) -> 2", "(count_nodes {4}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.875461}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {6 {6} {3}}}) -> 4", "(count_nodes {7 {7 {1} {3 {6} {0}}} {0 {9 {2}}}}) -> 9", "(count_nodes {7 {6 {3 {1} {8}} {5 {0} {2}}} {9}}) -> 9", "(count_nodes {4}) -> 1", "(count_nodes {6 {1} {0}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.679854}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3 {3} {4}}) -> 3", "(count_nodes {3 {1} {4}}) -> 3", "(count_nodes {6 {1 {1} {0}} {2}}) -> 5", "(count_nodes {1 {4 {5 {1}} {0 {3} {4}}} {0 {3 {4}} {7}}}) -> 11"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.089992}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {4 {3}}) -> 2", "(count_nodes {6}) -> 1", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 1)) 1)) 0)) _) _)", "time": 4.292135}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {7 {9}} {2}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {6 {5}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f f)) 1)) 0)) _) _)", "time": 4.457275}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {7 {3 {0 {8}} {8 {0}}}}) -> 6", "(count_nodes {0 {3 {1} {7}} {9}}) -> 5", "(count_nodes {9 {5 {7} {8}}}) -> 4", "(count_nodes {9 {1 {9 {0} {3}} {9 {0}}}}) -> 7"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.580224}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {2 {8}}) -> 2", "(count_nodes {6}) -> 1", "(count_nodes {6 {8}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 1)) 1)) 0)) _) _)", "time": 3.934368}
