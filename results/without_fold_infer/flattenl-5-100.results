{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[0] {[]}}) -> [0]", "(flattenl {}) -> []", "(flattenl {[0 6 9]}) -> [0 6 9]"], "time": 0.055719}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[5 2 3 5 5] {[]}}) -> [5 2 3 5 5]", "(flattenl {}) -> []", "(flattenl {[0 2 8 9 5]}) -> [0 2 8 9 5]"], "time": 0.049004}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[2 8 4 4 5] {[0 0] {[8]}} {[2 2 4 6] {[] {[1 0]}} {[5 0 5] {[2 0 8 6]}}}}) -> [2 8 4 4 5 0 0 8 2 2 4 6 1 0 5 0 5 2 0 8 6]", "(flattenl {[]}) -> []"], "time": 0.243421}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[2 9 3 7 9]}) -> [2 9 3 7 9]", "(flattenl {[9] {[3 7 3 1 0]} {[1]}}) -> [9 3 7 3 1 0 1]", "(flattenl {[]}) -> []"], "time": 0.228939}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[2] {[2 6] {[8 1]} {[4 7 4]}}}) -> [2 2 6 8 1 4 7 4]", "(flattenl {[6] {[2 0 5 8]} {[2 9 4]}}) -> [6 2 0 5 8 2 9 4]", "(flattenl {[3 5 6 0] {[6 1 2] {[4 8 4] {[4 3]} {[]}}} {[2 5 7] {[] {[4 4]}} {[3 0 5 0] {[3 4 5]}}}}) -> [3 5 6 0 6 1 2 4 8 4 4 3 2 5 7 4 4 3 0 5 0 3 4 5]"], "time": 0.288652}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {[]}) -> []", "(flattenl {[5 9 7 9]}) -> [5 9 7 9]"], "time": 0.038132}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[3] {[3 8 6] {[5 2 5] {[1 6 2 6 9]} {[6 8 3 3]}}} {[6 0 1] {[5 8 6]}}}) -> [3 3 8 6 5 2 5 1 6 2 6 9 6 8 3 3 6 0 1 5 8 6]", "(flattenl {[0 2] {[0 9 5 2]}}) -> [0 2 0 9 5 2]"], "time": 0.288111}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[] {[8 4 8]}}) -> [8 4 8]", "(flattenl {[3 8 9]}) -> [3 8 9]"], "time": 0.297593}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[5 6 6 6] {[] {[]}} {[] {[9 6] {[1]} {[]}} {[4 7 3 0]}}}) -> [5 6 6 6 9 6 1 4 7 3 0]", "(flattenl {[7] {[2 1 2] {[]}} {[0] {[4 5 6 9 4] {[]}} {[1 9 9]}}}) -> [7 2 1 2 0 4 5 6 9 4 1 9 9]"], "time": 0.216148}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[5 0 3 8] {[9] {[0 7] {[9 7 7]}} {[7 7 9 3] {[0 4 7 7 2]}}}}) -> [5 0 3 8 9 0 7 9 7 7 7 7 9 3 0 4 7 7 2]", "(flattenl {[6 4 7 0] {[]}}) -> [6 4 7 0]", "(flattenl {}) -> []"], "time": 0.22951}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[9 8 5] {[4] {[7 3 6]} {[]}} {[4 9]}}) -> [9 8 5 4 7 3 6 4 9]", "(flattenl {[8 3 9] {[8] {[9]} {[0 3 0 9 3] {[7]}}}}) -> [8 3 9 8 9 0 3 0 9 3 7]", "(flattenl {[0] {[9 4]}}) -> [0 9 4]"], "time": 0.316938}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[3 7 5 2 6]}) -> [3 7 5 2 6]", "(flattenl {[5] {[3 5 7] {[8 9 9] {[7 0 9]} {[8 5]}}} {[4 1 4 3 5] {[4 1]} {[7 8]}}}) -> [5 3 5 7 8 9 9 7 0 9 8 5 4 1 4 3 5 4 1 7 8]", "(flattenl {}) -> []"], "time": 0.314136}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[2 6 8 8 2]} {[0 2 7]}}) -> [2 6 8 8 2 0 2 7]", "(flattenl {[] {[6 2 6 0]} {[9 3 7]}}) -> [6 2 6 0 9 3 7]", "(flattenl {[3 4]}) -> [3 4]"], "time": 0.264215}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[2]} {[3 0]}}) -> [2 3 0]", "(flattenl {[7 0]}) -> [7 0]", "(flattenl {[3 6 0 9]}) -> [3 6 0 9]"], "time": 0.307084}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[0 2 4] {[8] {[9 3 7 8]} {[4 8] {[5]} {[8 1 1 8 0]}}} {[6 6 7]}}) -> [0 2 4 8 9 3 7 8 4 8 5 8 1 1 8 0 6 6 7]", "(flattenl {[6 0 6] {[3 9 1]} {[4 7 0 8]}}) -> [6 0 6 3 9 1 4 7 0 8]", "(flattenl {[3 0 4] {[]} {[5 2 2 0] {[7 4 2 0 3]}}}) -> [3 0 4 5 2 2 0 7 4 2 0 3]"], "time": 0.297672}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[2] {[] {[6]} {[0] {[2 6]}}} {[8 4 1 7 4]}}) -> [2 6 0 2 6 8 4 1 7 4]", "(flattenl {}) -> []"], "time": 0.299949}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[7 4] {[3] {[4 6]}}}) -> [7 4 3 4 6]", "(flattenl {}) -> []", "(flattenl {}) -> []"], "time": 0.318289}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[6 5 0 8 2]}) -> [6 5 0 8 2]", "(flattenl {}) -> []", "(flattenl {[4 0 3]}) -> [4 0 3]"], "time": 0.030368}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[4 1] {[]}}) -> [4 1]", "(flattenl {}) -> []", "(flattenl {[] {[1 3]}}) -> [1 3]"], "time": 0.201899}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[6 3 5]}) -> [6 3 5]"], "time": 0.048407}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[5 2 4] {[2 0 5]} {[0 4 8 8]}}) -> [5 2 4 2 0 5 0 4 8 8]", "(flattenl {}) -> []", "(flattenl {[3]}) -> [3]"], "time": 0.310717}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[4 7] {[7 2 6]}}) -> [4 7 7 2 6]", "(flattenl {}) -> []", "(flattenl {[2 1] {[2 4 7]} {[3 8] {[0 6 3 0 7] {[9 1 6 5]}}}}) -> [2 1 2 4 7 3 8 0 6 3 0 7 9 1 6 5]"], "time": 0.252622}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[4 0] {[6 3 1 2]} {[5 2 8 7]}}}) -> [4 0 6 3 1 2 5 2 8 7]", "(flattenl {[0 8 9] {[6 6 7]}}) -> [0 8 9 6 6 7]", "(flattenl {[6 4 0]}) -> [6 4 0]"], "time": 0.266846}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[4 5 9 0] {[0 8 7]} {[0 6 5 9]}}) -> [4 5 9 0 0 8 7 0 6 5 9]", "(flattenl {[4 6 4 5 2]}) -> [4 6 4 5 2]", "(flattenl {[1 8 1 3] {[] {[5]} {[]}}}) -> [1 8 1 3 5]"], "time": 0.279339}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[6 5 9]}) -> [6 5 9]", "(flattenl {[1 3]}) -> [1 3]", "(flattenl {[1 9 5] {[6 2 1 6 4] {[4 7] {[1 9 4 7 7]} {[0]}}}}) -> [1 9 5 6 2 1 6 4 4 7 1 9 4 7 7 0]"], "time": 0.281602}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {[]}) -> []", "(flattenl {[5] {[0 0 4 4]}}) -> [5 0 0 4 4]"], "time": 0.272612}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {[1 0] {[3] {[0 6 1 2]}} {[5 5]}}) -> [1 0 3 0 6 1 2 5 5]", "(flattenl {}) -> []"], "time": 0.272168}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[8] {[]}}) -> [8]", "(flattenl {}) -> []", "(flattenl {[0 8 8 0 0] {[6]} {[6] {[5]} {[3 0]}}}) -> [0 8 8 0 0 6 6 5 3 0]"], "time": 0.283407}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[6 5 3] {[2 6]}}) -> [6 5 3 2 6]", "(flattenl {[2 6 9 2]}) -> [2 6 9 2]"], "time": 0.306999}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[8 9]}) -> [8 9]", "(flattenl {[9 2] {[4 0 9 9 8] {[4 9 6 5 3] {[8 3 6]}}} {[3]}}) -> [9 2 4 0 9 9 8 4 9 6 5 3 8 3 6 3]", "(flattenl {[7 8] {[6 0]} {[9]}}) -> [7 8 6 0 9]"], "time": 0.249734}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[2 7 5 1 8] {[1 3 6]}}) -> [2 7 5 1 8 1 3 6]", "(flattenl {[] {[6 7 4]} {[]}}) -> [6 7 4]", "(flattenl {}) -> []"], "time": 0.282361}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[4 9 8 9] {[]}}) -> [4 9 8 9]", "(flattenl {}) -> []", "(flattenl {[3 1] {[6 3 1 6] {[8 9 4 9 5] {[3]}} {[1 7] {[]} {[5 1 0 0 3]}}}}) -> [3 1 6 3 1 6 8 9 4 9 5 3 1 7 5 1 0 0 3]"], "time": 0.298613}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[7 6 1 2] {[1 5 0 1]} {[3 8 6]}}) -> [7 6 1 2 1 5 0 1 3 8 6]", "(flattenl {[5] {[5 3 0 9]} {[5 2 4]}}) -> [5 5 3 0 9 5 2 4]", "(flattenl {[] {[0 6 2 7 0] {[0 3] {[5 9 3]} {[7 3 8 2]}}} {[3] {[5 5 6]} {[9 4 3]}}}) -> [0 6 2 7 0 0 3 5 9 3 7 3 8 2 3 5 5 6 9 4 3]"], "time": 0.266062}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[6 6 8] {[6 7 1 3 3] {[9 8 3]} {[8]}} {[8 3 1 1] {[8 5 6]} {[3 2] {[2 0 4 7]} {[]}}}}) -> [6 6 8 6 7 1 3 3 9 8 3 8 8 3 1 1 8 5 6 3 2 2 0 4 7]", "(flattenl {[6 5 4 4] {[6]}}) -> [6 5 4 4 6]", "(flattenl {[] {[]} {[4] {[]} {[3 0 7 5 0]}}}) -> [4 3 0 7 5 0]"], "time": 0.273782}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[3 0 9 2]}) -> [3 0 9 2]", "(flattenl {}) -> []"], "time": 0.030498}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[2 7] {[4 6 4 2]} {[1 5]}}) -> [2 7 4 6 4 2 1 5]", "(flattenl {[7 9 3 5 0]}) -> [7 9 3 5 0]", "(flattenl {[5 8 6 7] {[6 2 2]} {[0 2 5 4]}}) -> [5 8 6 7 6 2 2 0 2 5 4]"], "time": 0.193245}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[9 5 9]}) -> [9 5 9]", "(flattenl {}) -> []", "(flattenl {[2 7 4 2 7]}) -> [2 7 4 2 7]"], "time": 0.04798}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[9 0 5] {[5]}}) -> [9 0 5 5]", "(flattenl {}) -> []", "(flattenl {[3 1 6 8 0] {[2 8 5 3 8] {[8 2 9 8 6] {[8 6 9 5 8]}}} {[4 4 5 6 8] {[7 3 6 1 1] {[4 7 9]}}}}) -> [3 1 6 8 0 2 8 5 3 8 8 2 9 8 6 8 6 9 5 8 4 4 5 6 8 7 3 6 1 1 4 7 9]"], "time": 0.25958}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[2 9 4 7 1] {[5 5 0] {[9 4 7 9 6]}}}) -> [2 9 4 7 1 5 5 0 9 4 7 9 6]", "(flattenl {[1 8 5]}) -> [1 8 5]", "(flattenl {[7 8 6]}) -> [7 8 6]"], "time": 0.263544}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {[1 1 7] {[1 4 8]}}) -> [1 1 7 1 4 8]"], "time": 0.24615}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[4 8] {[]}}) -> [4 8]", "(flattenl {[2 6 3 6] {[1 6 0 6]} {[]}}) -> [2 6 3 6 1 6 0 6]", "(flattenl {[9 2 3]}) -> [9 2 3]"], "time": 0.284178}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[8 1 8] {[4 4 4 6]} {[6 0]}}) -> [8 1 8 4 4 4 6 6 0]", "(flattenl {}) -> []", "(flattenl {[3 6 0] {[4 4] {[9 6 1 7 9] {[9 3 3]} {[]}} {[2 9 7 3 8] {[2 7 0 0 0]}}} {[4 3 9 4]}}) -> [3 6 0 4 4 9 6 1 7 9 9 3 3 2 9 7 3 8 2 7 0 0 0 4 3 9 4]"], "time": 0.269997}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[4] {[3 9 5 2]}}) -> [4 3 9 5 2]", "(flattenl {[0 9] {[] {[9 3 6]}}}) -> [0 9 9 3 6]", "(flattenl {[]}) -> []"], "time": 0.277462}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[8 2 4] {[0 4]} {[1 9 9 4] {[9 3 8 5 4]} {[8 6 6 7 7]}}}) -> [8 2 4 0 4 1 9 9 4 9 3 8 5 4 8 6 6 7 7]", "(flattenl {[1 3 1 2] {[8 6 4 5 6]} {[0 3 9]}}) -> [1 3 1 2 8 6 4 5 6 0 3 9]", "(flattenl {}) -> []"], "time": 0.244942}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[3 1] {[3 9 2] {[8] {[5 0]} {[3 1 4]}} {[0 5] {[5]} {[2]}}}}) -> [3 1 3 9 2 8 5 0 3 1 4 0 5 5 2]", "(flattenl {[9 8 7 6]}) -> [9 8 7 6]"], "time": 0.257029}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[0] {[6 8]} {[1 5]}}) -> [0 6 8 1 5]", "(flattenl {[2 6 8]}) -> [2 6 8]", "(flattenl {}) -> []"], "time": 0.245887}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[5 1 3 9 9] {[2] {[5 6 7 0 5]}} {[4]}}) -> [5 1 3 9 9 2 5 6 7 0 5 4]", "(flattenl {}) -> []"], "time": 0.285389}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[0 5 1 2 6] {[2 8 8 5]}}) -> [0 5 1 2 6 2 8 8 5]", "(flattenl {[7 7]}) -> [7 7]", "(flattenl {[7 1]}) -> [7 1]"], "time": 0.249928}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[3 8 6 4]}) -> [3 8 6 4]", "(flattenl {[9] {[3 8 8 4 7]} {[8 7 9] {[6 2] {[3]}} {[7] {[9 2 0]}}}}) -> [9 3 8 8 4 7 8 7 9 6 2 3 7 9 2 0]", "(flattenl {}) -> []"], "time": 0.262861}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[3]}) -> [3]", "(flattenl {}) -> []"], "time": 0.028197}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[4 0]}}) -> [4 0]", "(flattenl {}) -> []", "(flattenl {[3 4 3 2] {[6 7 8 8 3]}}) -> [3 4 3 2 6 7 8 8 3]"], "time": 0.260836}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[8 5 9]}) -> [8 5 9]", "(flattenl {}) -> []"], "time": 0.041673}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[8 1 6] {[2 7]}}) -> [8 1 6 2 7]", "(flattenl {}) -> []"], "time": 0.246498}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[1 6 1 0] {[0 8 4]}}) -> [1 6 1 0 0 8 4]"], "time": 0.207566}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[5 3 3 2 4]}) -> [5 3 3 2 4]", "(flattenl {[] {[]}}) -> []"], "time": 0.034575}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {[0 8 3 3]}) -> [0 8 3 3]"], "time": 0.043693}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[1]}) -> [1]", "(flattenl {[9 4 2]}) -> [9 4 2]", "(flattenl {}) -> []"], "time": 0.040771}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[9 0 9 7] {[9]}}) -> [9 0 9 7 9]", "(flattenl {}) -> []", "(flattenl {}) -> []"], "time": 0.225861}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[3 9 9 9] {[7 1 3 6 8] {[4 4 8 8 3]}}}) -> [3 9 9 9 7 1 3 6 8 4 4 8 8 3]", "(flattenl {[5 2]}) -> [5 2]", "(flattenl {[1 4 7 5 3] {[] {[3 8 1]} {[6 9]}}}) -> [1 4 7 5 3 3 8 1 6 9]"], "time": 0.218942}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[9] {[7]}}) -> [9 7]", "(flattenl {[6] {[2 9] {[9 8]}}}) -> [6 2 9 9 8]", "(flattenl {}) -> []"], "time": 0.212607}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {[7 2] {[7] {[6 4 8]}}}) -> [7 2 7 6 4 8]", "(flattenl {[6 3 2 4 1]}) -> [6 3 2 4 1]"], "time": 0.197421}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[2 1 9] {[0 2 4 3 7]}}) -> [2 1 9 0 2 4 3 7]", "(flattenl {[2 3] {[8]}}) -> [2 3 8]", "(flattenl {[4 6] {[9 9]}}) -> [4 6 9 9]"], "time": 0.220345}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[2 0] {[6 3 6 9] {[7 4]}}}) -> [2 0 6 3 6 9 7 4]", "(flattenl {[0]}) -> [0]", "(flattenl {}) -> []"], "time": 0.248678}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[0] {[]}}) -> [0]", "(flattenl {}) -> []"], "time": 0.046197}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[] {[]}}) -> []", "(flattenl {[9 7 7 2 2] {[1 5 5]}}) -> [9 7 7 2 2 1 5 5]"], "time": 0.263507}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[3 3 0 5 5]}) -> [3 3 0 5 5]", "(flattenl {[3 7] {[1 1] {[9 0]} {[3 4 9 6]}} {[3 7 4 2]}}) -> [3 7 1 1 9 0 3 4 9 6 3 7 4 2]", "(flattenl {[3 3] {[0 0 8] {[0 9 9 2 5]}}}) -> [3 3 0 0 8 0 9 9 2 5]"], "time": 0.249873}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[2 9] {[9 4 5]}}) -> [2 9 9 4 5]", "(flattenl {[] {[2 5]}}) -> [2 5]", "(flattenl {[4]}) -> [4]"], "time": 0.275224}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[9 4 0 9 4] {[4 0 5 6 9] {[9]}} {[8 0 3 1] {[6 2 5]}}}) -> [9 4 0 9 4 4 0 5 6 9 9 8 0 3 1 6 2 5]", "(flattenl {[6 0 7 6 2]}) -> [6 0 7 6 2]"], "time": 0.279174}
