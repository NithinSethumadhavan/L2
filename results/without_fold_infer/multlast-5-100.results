{"time": 0.961071, "examples": ["(multlast []) -> []", "(multlast [9 5 5 6 8]) -> [8 8 8 8 8]", "(multlast [1 8 7 0 3]) -> [3 3 3 3 3]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.973132, "examples": ["(multlast []) -> []", "(multlast [0 5]) -> [5 5]", "(multlast []) -> []", "(multlast [2 9 1 3]) -> [3 3 3 3]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.974921, "examples": ["(multlast []) -> []", "(multlast [0 7 2 5]) -> [5 5 5 5]", "(multlast [9 2 9 6]) -> [6 6 6 6]", "(multlast [8 7 4 7 4]) -> [4 4 4 4 4]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.993287, "examples": ["(multlast []) -> []", "(multlast [2]) -> [2]", "(multlast [4 6 2 8]) -> [8 8 8 8]", "(multlast [9 2 1]) -> [1 1 1]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.864299, "examples": ["(multlast []) -> []", "(multlast [9 8]) -> [8 8]", "(multlast [6 8]) -> [8 8]", "(multlast [7 8 2 7]) -> [7 7 7 7]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.976915, "examples": ["(multlast []) -> []", "(multlast [0 4 7]) -> [7 7 7]", "(multlast [0 8]) -> [8 8]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.926459, "examples": ["(multlast []) -> []", "(multlast [4 1]) -> [1 1]", "(multlast [7 6 9]) -> [9 9 9]", "(multlast [9 6 3 4 1]) -> [1 1 1 1 1]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.997344, "examples": ["(multlast []) -> []", "(multlast [2 7 1 9]) -> [9 9 9 9]", "(multlast []) -> []", "(multlast [6]) -> [6]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.063202, "examples": ["(multlast []) -> []", "(multlast [1 3 2 4 0]) -> [0 0 0 0 0]", "(multlast [6]) -> [6]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.002305, "examples": ["(multlast []) -> []", "(multlast [5 8 4]) -> [4 4 4]", "(multlast [4 7 7 6 8]) -> [8 8 8 8 8]", "(multlast [8 5 3 8]) -> [8 8 8 8]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.029843, "examples": ["(multlast []) -> []", "(multlast [1 2 0]) -> [0 0 0]", "(multlast [3]) -> [3]", "(multlast [4 2 9 1]) -> [1 1 1 1]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.070946, "examples": ["(multlast []) -> []", "(multlast [8 2 9 6 0]) -> [0 0 0 0 0]", "(multlast [8 8 0 7 1]) -> [1 1 1 1 1]", "(multlast [3 2 4 7]) -> [7 7 7 7]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.128761, "examples": ["(multlast []) -> []", "(multlast [8 1 3]) -> [3 3 3]", "(multlast [8 2 1]) -> [1 1 1]", "(multlast [9 3 4 5 0]) -> [0 0 0 0 0]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.141898, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [2 5 0]) -> [0 0 0]", "(multlast [2 2]) -> [2 2]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.086887, "examples": ["(multlast []) -> []", "(multlast [7 8 6 8]) -> [8 8 8 8]", "(multlast [4 9 0 7]) -> [7 7 7 7]", "(multlast [9 9 1 7 0]) -> [0 0 0 0 0]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.058496, "examples": ["(multlast []) -> []", "(multlast [9 4 9 7 5]) -> [5 5 5 5 5]", "(multlast [3 6 1]) -> [1 1 1]", "(multlast [3 8 9 0 0]) -> [0 0 0 0 0]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.137303, "examples": ["(multlast []) -> []", "(multlast [5 7 6]) -> [6 6 6]", "(multlast []) -> []", "(multlast [5 7 4]) -> [4 4 4]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr (cdr b)))))) _) _)"}
{"time": 0.074167, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast [8 7]) -> [7 7]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr b))))) _) _)"}
{"time": 0.798252, "examples": ["(multlast []) -> []", "(multlast [3 5 3]) -> [3 3 3]", "(multlast [6 4 5 7]) -> [7 7 7 7]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.825412, "examples": ["(multlast []) -> []", "(multlast [4 2 1 8 1]) -> [1 1 1 1 1]", "(multlast [9 2]) -> [2 2]", "(multlast [8]) -> [8]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.879386, "examples": ["(multlast []) -> []", "(multlast [0 5 0 4 4]) -> [4 4 4 4 4]", "(multlast [6 1 8 0 1]) -> [1 1 1 1 1]", "(multlast [5 8 4]) -> [4 4 4]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.877206, "examples": ["(multlast []) -> []", "(multlast [1 0]) -> [0 0]", "(multlast [0 8 1 4]) -> [4 4 4 4]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.836063, "examples": ["(multlast []) -> []", "(multlast [1 2 3 4 1]) -> [1 1 1 1 1]", "(multlast [5]) -> [5]", "(multlast [4 6 9]) -> [9 9 9]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.863924, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast [3 1 4 5 8]) -> [8 8 8 8 8]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.396282, "examples": ["(multlast []) -> []", "(multlast [8 2 4 3]) -> [3 3 3 3]", "(multlast [7 1 5 3]) -> [3 3 3 3]", "(multlast [0 0 4 6]) -> [6 6 6 6]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr (cdr (cdr b))))))) _) _)"}
{"time": 0.896294, "examples": ["(multlast []) -> []", "(multlast [5 4 5 0 7]) -> [7 7 7 7 7]", "(multlast [4 8 5 5]) -> [5 5 5 5]", "(multlast [2 4 2]) -> [2 2 2]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.802523, "examples": ["(multlast []) -> []", "(multlast [1 9 8 2 3]) -> [3 3 3 3 3]", "(multlast [7 2 0 5 5]) -> [5 5 5 5 5]", "(multlast [0 6 0]) -> [0 0 0]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.047714, "examples": ["(multlast []) -> []", "(multlast [7 9]) -> [9 9]", "(multlast []) -> []", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr b))))) _) _)"}
{"time": 0.926642, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [5 2 7]) -> [7 7 7]", "(multlast [3]) -> [3]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.824187, "examples": ["(multlast []) -> []", "(multlast [1 9 9 7 4]) -> [4 4 4 4 4]", "(multlast [2 4 7 0]) -> [0 0 0 0]", "(multlast [7]) -> [7]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.908355, "examples": ["(multlast []) -> []", "(multlast [6]) -> [6]", "(multlast [7 6 2 7 5]) -> [5 5 5 5 5]", "(multlast [7 8 8]) -> [8 8 8]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.884051, "examples": ["(multlast []) -> []", "(multlast [3 3 4]) -> [4 4 4]", "(multlast [6]) -> [6]", "(multlast [5]) -> [5]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.866772, "examples": ["(multlast []) -> []", "(multlast [3 8]) -> [8 8]", "(multlast [6]) -> [6]", "(multlast [6 2 7]) -> [7 7 7]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.869446, "examples": ["(multlast []) -> []", "(multlast [3 9 9 2 0]) -> [0 0 0 0 0]", "(multlast [0]) -> [0]", "(multlast [7]) -> [7]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.024668, "examples": ["(multlast []) -> []", "(multlast [8 7 3 8]) -> [8 8 8 8]", "(multlast [9 3 9]) -> [9 9 9]", "(multlast [7]) -> [7]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)"}
{"time": 0.044584, "examples": ["(multlast []) -> []", "(multlast [2 0 0 0]) -> [0 0 0 0]", "(multlast [2 4]) -> [4 4]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr b))))) _) _)"}
{"time": 0.275463, "examples": ["(multlast []) -> []", "(multlast [8 1]) -> [1 1]", "(multlast [8 0]) -> [0 0]", "(multlast [3]) -> [3]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) b)) _) _)"}
{"time": 0.798083, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [0 9 4]) -> [4 4 4]", "(multlast [3 6]) -> [6 6]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.656025, "examples": ["(multlast []) -> []", "(multlast [0 1 5]) -> [5 5 5]", "(multlast [1 5 1 7]) -> [7 7 7 7]", "(multlast [0]) -> [0]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.622905, "examples": ["(multlast []) -> []", "(multlast [3 9 5]) -> [5 5 5]", "(multlast [3 2 8]) -> [8 8 8]", "(multlast [3 7 7 2]) -> [2 2 2 2]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.653759, "examples": ["(multlast []) -> []", "(multlast [5 6 0]) -> [0 0 0]", "(multlast [6 4 1]) -> [1 1 1]", "(multlast [6 2 2 7]) -> [7 7 7 7]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.855589, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [1 7]) -> [7 7]", "(multlast [0 8 7]) -> [7 7 7]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.895587, "examples": ["(multlast []) -> []", "(multlast [4]) -> [4]", "(multlast [3 5 4 6]) -> [6 6 6 6]", "(multlast [6 3 9 1 5]) -> [5 5 5 5 5]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.678034, "examples": ["(multlast []) -> []", "(multlast [3 8 1]) -> [1 1 1]", "(multlast [7]) -> [7]", "(multlast [3 1]) -> [1 1]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.848107, "examples": ["(multlast []) -> []", "(multlast [1 3 4]) -> [4 4 4]", "(multlast []) -> []", "(multlast [0 4 0 4 4]) -> [4 4 4 4 4]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.633748, "examples": ["(multlast []) -> []", "(multlast [7 3 9]) -> [9 9 9]", "(multlast [9 6 6]) -> [6 6 6]", "(multlast [8 5 3 3 2]) -> [2 2 2 2 2]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.608212, "examples": ["(multlast []) -> []", "(multlast [2 1 3]) -> [3 3 3]", "(multlast [6 8 5]) -> [5 5 5]", "(multlast [0 4]) -> [4 4]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.053568, "examples": ["(multlast []) -> []", "(multlast [2 4]) -> [4 4]", "(multlast []) -> []", "(multlast [1 2]) -> [2 2]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr b))))) _) _)"}
{"time": 0.944536, "examples": ["(multlast []) -> []", "(multlast [0 5 1]) -> [1 1 1]", "(multlast [1 1 2 4 1]) -> [1 1 1 1 1]", "(multlast [3 9 5 7]) -> [7 7 7 7]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.918236, "examples": ["(multlast []) -> []", "(multlast [0 0 4 8]) -> [8 8 8 8]", "(multlast [2 9 2]) -> [2 2 2]", "(multlast [7 8 8 2]) -> [2 2 2 2]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.940345, "examples": ["(multlast []) -> []", "(multlast [4 5 0 8]) -> [8 8 8 8]", "(multlast [3 5 4]) -> [4 4 4]", "(multlast [2 2 4 8]) -> [8 8 8 8]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.023697, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast [0 7 6 0]) -> [0 0 0 0]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) 0))) _) _)"}
{"time": 0.890785, "examples": ["(multlast []) -> []", "(multlast [5 6 9 2]) -> [2 2 2 2]", "(multlast [6 2 6 5]) -> [5 5 5 5]", "(multlast [7 1]) -> [1 1]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.535035, "examples": ["(multlast []) -> []", "(multlast [2 9]) -> [9 9]", "(multlast [3 2 7]) -> [7 7 7]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.745335, "examples": ["(multlast []) -> []", "(multlast [4]) -> [4]", "(multlast [6 3 5]) -> [5 5 5]", "(multlast [5]) -> [5]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.773471, "examples": ["(multlast []) -> []", "(multlast [5 9 4]) -> [4 4 4]", "(multlast []) -> []", "(multlast [6 4 6 4]) -> [4 4 4 4]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.65526, "examples": ["(multlast []) -> []", "(multlast [2 6 2 9 2]) -> [2 2 2 2 2]", "(multlast [6 7 6]) -> [6 6 6]", "(multlast [0 2 6 7]) -> [7 7 7 7]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.628434, "examples": ["(multlast []) -> []", "(multlast [6 7 1 9 8]) -> [8 8 8 8 8]", "(multlast [2 8 3 0 0]) -> [0 0 0 0 0]", "(multlast [0 0 3]) -> [3 3 3]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.560897, "examples": ["(multlast []) -> []", "(multlast [7 9 4 0]) -> [0 0 0 0]", "(multlast [5]) -> [5]", "(multlast [8 8 0 3 9]) -> [9 9 9 9 9]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.238397, "examples": ["(multlast []) -> []", "(multlast [6 2 7 8]) -> [8 8 8 8]", "(multlast []) -> []", "(multlast [4 9 4 8]) -> [8 8 8 8]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr (cdr (cdr b))))))) _) _)"}
{"time": 0.577372, "examples": ["(multlast []) -> []", "(multlast [2 3]) -> [3 3]", "(multlast [7 0 0 5 2]) -> [2 2 2 2 2]", "(multlast [0 9 5 0]) -> [0 0 0 0]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.855296, "examples": ["(multlast []) -> []", "(multlast [1 3 3 3 3]) -> [3 3 3 3 3]", "(multlast [4 8 8 1]) -> [1 1 1 1]", "(multlast [2 5]) -> [5 5]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.431805, "examples": ["(multlast []) -> []", "(multlast [4 2 5 9]) -> [9 9 9 9]", "(multlast [3]) -> [3]", "(multlast [9 0 6 6 2]) -> [2 2 2 2 2]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.048823, "examples": ["(multlast []) -> []", "(multlast [1]) -> [1]", "(multlast []) -> []", "(multlast [5 9 2 8]) -> [8 8 8 8]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.04683, "examples": ["(multlast []) -> []", "(multlast [6]) -> [6]", "(multlast [9]) -> [9]", "(multlast [9 2 6]) -> [6 6 6]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.269219, "examples": ["(multlast []) -> []", "(multlast [8 3 3]) -> [3 3 3]", "(multlast [8 8 5]) -> [5 5 5]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr (cdr b)))))) _) _)"}
{"time": 1.08452, "examples": ["(multlast []) -> []", "(multlast [1]) -> [1]", "(multlast [1 7 4 0]) -> [0 0 0 0]", "(multlast [1 4 5 9]) -> [9 9 9 9]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.444448, "examples": ["(multlast []) -> []", "(multlast [0]) -> [0]", "(multlast [5]) -> [5]", "(multlast [5 8 3]) -> [3 3 3]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.112909, "examples": ["(multlast []) -> []", "(multlast [3]) -> [3]", "(multlast []) -> []", "(multlast [7 8 2]) -> [2 2 2]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.172028, "examples": ["(multlast []) -> []", "(multlast [5 7]) -> [7 7]", "(multlast [2 3 0]) -> [0 0 0]", "(multlast [9 7 3 2 3]) -> [3 3 3 3 3]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.010865, "examples": ["(multlast []) -> []", "(multlast [5]) -> [5]", "(multlast [5 7 4 2 7]) -> [7 7 7 7 7]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.019128, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [4 9 1 9]) -> [9 9 9 9]", "(multlast [9 9]) -> [9 9]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr b))))) _) _)"}
{"time": 1.090245, "examples": ["(multlast []) -> []", "(multlast [3 9]) -> [9 9]", "(multlast [2 1 6]) -> [6 6 6]", "(multlast [3 2 3 1]) -> [1 1 1 1]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.538188, "examples": ["(multlast []) -> []", "(multlast [4 2 2 6]) -> [6 6 6 6]", "(multlast []) -> []", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr (cdr (cdr b))))))) _) _)"}
{"time": 1.112258, "examples": ["(multlast []) -> []", "(multlast [1 9 6]) -> [6 6 6]", "(multlast [7]) -> [7]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.029347, "examples": ["(multlast []) -> []", "(multlast [7 3]) -> [3 3]", "(multlast []) -> []", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr b))))) _) _)"}
{"time": 0.198168, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [8 1]) -> [1 1]", "(multlast [4]) -> [4]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) b)) _) _)"}
{"time": 0.480851, "examples": ["(multlast []) -> []", "(multlast [7]) -> [7]", "(multlast [1 5 2 2 8]) -> [8 8 8 8 8]", "(multlast [3 4]) -> [4 4]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.21442, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [4]) -> [4]", "(multlast [2 6]) -> [6 6]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) b)) _) _)"}
{"time": 0.958393, "examples": ["(multlast []) -> []", "(multlast [6 1]) -> [1 1]", "(multlast [8 6 3 8 1]) -> [1 1 1 1 1]", "(multlast [2 7 6 3]) -> [3 3 3 3]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.92442, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [9]) -> [9]", "(multlast [5 7 2 5 3]) -> [3 3 3 3 3]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
