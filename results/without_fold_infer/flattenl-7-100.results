{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[8 5 5]}) -> [8 5 5]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[0 9 8 6 3]}) -> [0 9 8 6 3]", "(flattenl {}) -> []"], "time": 0.026514}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[5 7 1 1]}) -> [5 7 1 1]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[0]}) -> [0]", "(flattenl {[0 2 6 3 8]}) -> [0 2 6 3 8]"], "time": 0.037428}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[2] {[7 4 8 0] {[]}} {[4 6] {[8] {[1 9]}} {[7 3 6 8 0]}}}) -> [2 7 4 8 0 4 6 8 1 9 7 3 6 8 0]", "(flattenl {[8 9 0 1 4] {[6 0] {[] {[5 7 2 9 3]} {[]}} {[1 3 4 9]}} {[1 6 7] {[]} {[5]}}}) -> [8 9 0 1 4 6 0 5 7 2 9 3 1 3 4 9 1 6 7 5]", "(flattenl {}) -> []", "(flattenl {[4] {[7 0 4] {[7 7 6 6 1]}}}) -> [4 7 0 4 7 7 6 6 1]", "(flattenl {}) -> []"], "time": 0.250883}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[7 8 6 5] {[6 9 5] {[8 7] {[]} {[7 5 2 2]}} {[] {[0]}}} {[0 7 3 3 7]}}) -> [7 8 6 5 6 9 5 8 7 7 5 2 2 0 0 7 3 3 7]", "(flattenl {[6]}) -> [6]", "(flattenl {[]}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []"], "time": 0.250244}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[4 5 3] {[5 5 9 8 2] {[3 4 2 1 4]} {[]}}}) -> [4 5 3 5 5 9 8 2 3 4 2 1 4]", "(flattenl {[4 7] {[3 7 8 1 7] {[] {[3]} {[2]}}} {[7 6 5]}}) -> [4 7 3 7 8 1 7 3 2 7 6 5]", "(flattenl {[7 8] {[0 6] {[5 2 7]}}}) -> [7 8 0 6 5 2 7]", "(flattenl {}) -> []", "(flattenl {[3 6 7 3 2] {[2]}}) -> [3 6 7 3 2 2]"], "time": 0.277858}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[0 7 9 3 3]}) -> [0 7 9 3 3]", "(flattenl {[]}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[5 0 2] {[3 4 8]}}) -> [5 0 2 3 4 8]"], "time": 0.205673}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[1] {[3 0 6 6] {[8 0]}} {[1 2 0 9 8] {[6]} {[1 0 6 2 1]}}}) -> [1 3 0 6 6 8 0 1 2 0 9 8 6 1 0 6 2 1]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []"], "time": 0.291477}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[8 0 0 8] {[8 1] {[7 5]}}}) -> [8 0 0 8 8 1 7 5]", "(flattenl {[8 0 0 6 1] {[]}}) -> [8 0 0 6 1]", "(flattenl {[9 2 6]}) -> [9 2 6]", "(flattenl {[] {[3 2 8 2 1]} {[]}}) -> [3 2 8 2 1]", "(flattenl {[3] {[5]} {[9 8 4 8]}}) -> [3 5 9 8 4 8]"], "time": 0.269442}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[6] {[6] {[1] {[8 2]}}}}) -> [6 6 1 8 2]", "(flattenl {[0 1 5 8] {[7 0 7]} {[1 5 2 1 1]}}) -> [0 1 5 8 7 0 7 1 5 2 1 1]", "(flattenl {[9]}) -> [9]", "(flattenl {[7] {[]}}) -> [7]", "(flattenl {[7 8 8 4 7] {[9 4 2 6]}}) -> [7 8 8 4 7 9 4 2 6]"], "time": 0.288744}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[0 4 7 7]}) -> [0 4 7 7]", "(flattenl {[8 3 8] {[5 6 5 7] {[5 6 8 5]} {[4 3]}} {[4] {[8 6]}}}) -> [8 3 8 5 6 5 7 5 6 8 5 4 3 4 8 6]", "(flattenl {}) -> []", "(flattenl {[4 5]}) -> [4 5]", "(flattenl {[4 5 4 1 5]}) -> [4 5 4 1 5]"], "time": 0.293039}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[5 6] {[7] {[8 5 8 4]} {[8 1 0 4]}} {[] {[2 7 6 6 0]}}}) -> [5 6 7 8 5 8 4 8 1 0 4 2 7 6 6 0]", "(flattenl {[3]}) -> [3]", "(flattenl {[5]}) -> [5]", "(flattenl {[6] {[]} {[5]}}) -> [6 5]", "(flattenl {[5 0 7] {[5 4 4 3 6]} {[]}}) -> [5 0 7 5 4 4 3 6]"], "time": 0.305774}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[8 5 5]} {[0 2 7 3]}}) -> [8 5 5 0 2 7 3]", "(flattenl {[] {[]}}) -> []", "(flattenl {[6 9 5 3 3]}) -> [6 9 5 3 3]", "(flattenl {}) -> []", "(flattenl {}) -> []"], "time": 0.235449}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[6]}) -> [6]", "(flattenl {[9 0 8] {[4 0 3]} {[9 7]}}) -> [9 0 8 4 0 3 9 7]", "(flattenl {[2] {[2 8 9 5] {[6 4 8]} {[6 0]}} {[1 5] {[1 3 4 6] {[1]}} {[2 8 8] {[]}}}}) -> [2 2 8 9 5 6 4 8 6 0 1 5 1 3 4 6 1 2 8 8]", "(flattenl {}) -> []", "(flattenl {}) -> []"], "time": 0.315196}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[8 4 8] {[5 7] {[1 4 9 6 0]}}}) -> [8 4 8 5 7 1 4 9 6 0]", "(flattenl {[] {[]} {[5 2 9 4 3]}}) -> [5 2 9 4 3]", "(flattenl {[7 0]}) -> [7 0]", "(flattenl {[9 0 2 2] {[7 2 0] {[] {[9 4 9 6]}}} {[0 4]}}) -> [9 0 2 2 7 2 0 9 4 9 6 0 4]", "(flattenl {[] {[2]}}) -> [2]"], "time": 0.290462}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[1] {[2 6]}} {[1 4 7 5] {[1 3 4 5 6]}}}) -> [1 2 6 1 4 7 5 1 3 4 5 6]", "(flattenl {[5 3 8]}) -> [5 3 8]", "(flattenl {[9 6] {[0 2 2 2]}}) -> [9 6 0 2 2 2]", "(flattenl {}) -> []", "(flattenl {[1 4 8] {[3 4 3]}}) -> [1 4 8 3 4 3]"], "time": 0.252311}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[7 0 2 4] {[6 3 6 4 4]}}) -> [7 0 2 4 6 3 6 4 4]", "(flattenl {[3 1 4 4 9] {[4 3 7]}}) -> [3 1 4 4 9 4 3 7]", "(flattenl {[3 0 2 3] {[2] {[5 6 8 1]}} {[9 7 7 8 7] {[5 1]}}}) -> [3 0 2 3 2 5 6 8 1 9 7 7 8 7 5 1]", "(flattenl {[4 3]}) -> [4 3]", "(flattenl {[5 9 0]}) -> [5 9 0]"], "time": 0.32681}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {[8] {[0 8 4]}}) -> [8 0 8 4]", "(flattenl {[2 1] {[6 0] {[4 7 3 3 0] {[5 1 4 9]} {[4]}}}}) -> [2 1 6 0 4 7 3 3 0 5 1 4 9 4]", "(flattenl {[1 3 1] {[1 7 9]} {[3]}}) -> [1 3 1 1 7 9 3]", "(flattenl {[4 8 4] {[9 7 9 1 2]} {[6] {[4 1 5]}}}) -> [4 8 4 9 7 9 1 2 6 4 1 5]"], "time": 0.176116}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[4 8]}) -> [4 8]"], "time": 0.04255}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[1 2 5] {[9 3 1] {[1 8]}} {[3 0 4 2] {[5]}}}) -> [1 2 5 9 3 1 1 8 3 0 4 2 5]", "(flattenl {[4 7 6 9] {[]}}) -> [4 7 6 9]", "(flattenl {}) -> []", "(flattenl {[1 2 0] {[9 7 7 6 0] {[4]} {[7 7 7 2 1]}}}) -> [1 2 0 9 7 7 6 0 4 7 7 7 2 1]", "(flattenl {[2 1 7] {[]}}) -> [2 1 7]"], "time": 0.212329}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {}) -> []", "(flattenl {[2 8 7 1] {[]}}) -> [2 8 7 1]", "(flattenl {[7] {[]}}) -> [7]", "(flattenl {[7 4 9] {[9 7]}}) -> [7 4 9 9 7]"], "time": 0.249502}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[1 8]} {[]}}) -> [1 8]", "(flattenl {[5 9 6 4 8]}) -> [5 9 6 4 8]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[1 8 5 7 1] {[5 4 2] {[1 9 9]}} {[3 3 0]}}) -> [1 8 5 7 1 5 4 2 1 9 9 3 3 0]"], "time": 0.26676}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[] {[8 8 5 7 1]} {[]}} {[4 1 6 2] {[0 9]} {[4 9 5]}}}) -> [8 8 5 7 1 4 1 6 2 0 9 4 9 5]", "(flattenl {[8 1 7 0] {[3] {[0 7 5] {[9]}}}}) -> [8 1 7 0 3 0 7 5 9]", "(flattenl {[6]}) -> [6]", "(flattenl {}) -> []", "(flattenl {}) -> []"], "time": 0.200862}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[5 4 3 1 6] {[4 9 2]} {[1 1 0 6 9]}}) -> [5 4 3 1 6 4 9 2 1 1 0 6 9]", "(flattenl {}) -> []"], "time": 0.215646}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[8 0 6 9] {[1 1 0 5 8]} {[7 1 5]}}) -> [8 0 6 9 1 1 0 5 8 7 1 5]", "(flattenl {[2] {[] {[1 3 3]} {[] {[]}}} {[4 0] {[] {[7 4 5]} {[6 8 7]}} {[3 8]}}}) -> [2 1 3 3 4 0 7 4 5 6 8 7 3 8]", "(flattenl {[2] {[1 5 3 6 8]}}) -> [2 1 5 3 6 8]", "(flattenl {}) -> []", "(flattenl {[7 5 6 2] {[7 8 9 2] {[1 4 5]} {[]}}}) -> [7 5 6 2 7 8 9 2 1 4 5]"], "time": 0.236394}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[8]}}) -> [8]", "(flattenl {[8 6 0] {[7 7 2] {[5 1 5 7] {[]} {[0 7]}}} {[0 3 7 7]}}) -> [8 6 0 7 7 2 5 1 5 7 0 7 0 3 7 7]", "(flattenl {[6 0] {[6 2 4 6 7]} {[9 5] {[2 4 7 2 7]} {[4]}}}) -> [6 0 6 2 4 6 7 9 5 2 4 7 2 7 4]", "(flattenl {}) -> []", "(flattenl {}) -> []"], "time": 0.218342}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[4 6 4 5 3] {[9] {[6 2 6]} {[7 1 4 2 6]}}}) -> [4 6 4 5 3 9 6 2 6 7 1 4 2 6]", "(flattenl {[3 0 7 5 4]}) -> [3 0 7 5 4]", "(flattenl {[3 3 8 9]}) -> [3 3 8 9]", "(flattenl {[1 7 9 0 3]}) -> [1 7 9 0 3]", "(flattenl {[]}) -> []"], "time": 0.246083}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[2 1] {[7 3] {[8]} {[9 2 0 3]}}}) -> [2 1 7 3 8 9 2 0 3]", "(flattenl {[] {[3 5 4 1]} {[3]}}) -> [3 5 4 1 3]", "(flattenl {[2 9 6 9] {[1] {[7] {[4 0 8 7]}}} {[]}}) -> [2 9 6 9 1 7 4 0 8 7]", "(flattenl {[5 3 9 5 7] {[1 0] {[] {[6 1 1 3 8]}}}}) -> [5 3 9 5 7 1 0 6 1 1 3 8]", "(flattenl {[1 4 7]}) -> [1 4 7]"], "time": 0.199735}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[4 4 4 4 8] {[4 8] {[9 5 7 3] {[]}} {[9 0 5 2 0]}}}) -> [4 4 4 4 8 4 8 9 5 7 3 9 0 5 2 0]", "(flattenl {}) -> []", "(flattenl {[1 4 4 8 9]}) -> [1 4 4 8 9]", "(flattenl {[6 0 4 4 5]}) -> [6 0 4 4 5]", "(flattenl {[1 7] {[] {[4 7]}}}) -> [1 7 4 7]"], "time": 0.218082}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[3 7 1 0 4] {[9 1 8 0]} {[]}}}) -> [3 7 1 0 4 9 1 8 0]", "(flattenl {}) -> []", "(flattenl {[7 7 3]}) -> [7 7 3]", "(flattenl {[1 6] {[] {[9 7] {[2]} {[9]}} {[] {[1 3 1 1]} {[0]}}}}) -> [1 6 9 7 2 9 1 3 1 1 0]", "(flattenl {[5]}) -> [5]"], "time": 0.228076}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[5 3 6] {[0] {[1 6 6 3 3] {[6 1 1]}}}}) -> [5 3 6 0 1 6 6 3 3 6 1 1]", "(flattenl {[8 9 1] {[]}}) -> [8 9 1]", "(flattenl {[6 5 7 4]}) -> [6 5 7 4]", "(flattenl {[2 7] {[4 7 9 6]} {[] {[]} {[9 4 1 4]}}}) -> [2 7 4 7 9 6 9 4 1 4]", "(flattenl {[9 0 7 8]}) -> [9 0 7 8]"], "time": 0.249525}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[9 0 8 3 8] {[5 7 5 4 1]} {[2 3 6 4] {[1]} {[9 1 2 6 9]}}}) -> [9 0 8 3 8 5 7 5 4 1 2 3 6 4 1 9 1 2 6 9]", "(flattenl {[4 2 6] {[5 8 2 3]}}) -> [4 2 6 5 8 2 3]", "(flattenl {[9 9] {[7 4 4 4] {[5 3 8]}}}) -> [9 9 7 4 4 4 5 3 8]", "(flattenl {[]}) -> []", "(flattenl {[] {[9 7 3]} {[8 0 6 1 0]}}) -> [9 7 3 8 0 6 1 0]"], "time": 0.247224}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[8 2 9 0 3]}) -> [8 2 9 0 3]", "(flattenl {}) -> []", "(flattenl {[1 2 8 3]}) -> [1 2 8 3]", "(flattenl {}) -> []", "(flattenl {[9] {[6 0] {[3 7]}}}) -> [9 6 0 3 7]"], "time": 0.219961}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[5 7 1 2 9]}) -> [5 7 1 2 9]", "(flattenl {[4]}) -> [4]", "(flattenl {[7 8 6]}) -> [7 8 6]", "(flattenl {[6 8 3 5 3]}) -> [6 8 3 5 3]", "(flattenl {[]}) -> []"], "time": 0.027184}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {[]}) -> []", "(flattenl {}) -> []", "(flattenl {[8 1 3 7] {[1 9 9 2 6]} {[9]}}) -> [8 1 3 7 1 9 9 2 6 9]"], "time": 0.211281}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) []) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []"], "time": 0.000815}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[3 6 3 4]}) -> [3 6 3 4]", "(flattenl {[]}) -> []", "(flattenl {[2 9] {[]} {[6 9] {[0 5 6]}}}) -> [2 9 6 9 0 5 6]", "(flattenl {[7 9 6 6 6] {[3 3]} {[1 1]}}) -> [7 9 6 6 6 3 3 1 1]", "(flattenl {[0 4 0 4 6]}) -> [0 4 0 4 6]"], "time": 0.161345}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[6]}) -> [6]", "(flattenl {[6 8 5]}) -> [6 8 5]", "(flattenl {}) -> []"], "time": 0.026552}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[7]}) -> [7]", "(flattenl {[] {[8 7 5 8] {[3 8 1 7 0]} {[6 4 0 5 9]}} {[7 0 5] {[0 8 1]}}}) -> [8 7 5 8 3 8 1 7 0 6 4 0 5 9 7 0 5 0 8 1]", "(flattenl {[7 3 7 7 4] {[8 5 2 6] {[5]} {[0 0 8] {[]}}} {[9 0] {[8 3]}}}) -> [7 3 7 7 4 8 5 2 6 5 0 0 8 9 0 8 3]", "(flattenl {[0 5 2] {[8 3]} {[] {[1 9 7 6 0] {[0 5]}} {[] {[9 3 5]} {[3 8]}}}}) -> [0 5 2 8 3 1 9 7 6 0 0 5 9 3 5 3 8]", "(flattenl {[4 3 6] {[1] {[2 8 0] {[4 5]} {[4 5 1]}}}}) -> [4 3 6 1 2 8 0 4 5 4 5 1]"], "time": 0.201199}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[3 4 3 0] {[9 8 2 6] {[4]} {[0 0 2]}}}) -> [3 4 3 0 9 8 2 6 4 0 0 2]", "(flattenl {}) -> []", "(flattenl {[0 1 7 1 8] {[6] {[5 4 8 3] {[6 9 7 1]} {[]}}}}) -> [0 1 7 1 8 6 5 4 8 3 6 9 7 1]", "(flattenl {[8]}) -> [8]"], "time": 0.163075}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[] {[5 5 4 9]} {[]}}) -> [5 5 4 9]", "(flattenl {[8 7 4]}) -> [8 7 4]", "(flattenl {[1] {[6 1 8 7 4]} {[8 4]}}) -> [1 6 1 8 7 4 8 4]", "(flattenl {[0 0 8 4 2] {[8 5]}}) -> [0 0 8 4 2 8 5]"], "time": 0.212757}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[7 9 8 0]}) -> [7 9 8 0]", "(flattenl {[]}) -> []", "(flattenl {}) -> []", "(flattenl {[7] {[4 9]}}) -> [7 4 9]", "(flattenl {}) -> []"], "time": 0.207648}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[7 2 4] {[]}}) -> [7 2 4]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[3 8] {[6 5 6] {[6 7] {[]} {[0]}} {[4] {[6 2]} {[9 2 3]}}} {[4 0 9 4]}}) -> [3 8 6 5 6 6 7 0 4 6 2 9 2 3 4 0 9 4]"], "time": 0.189827}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[]}}) -> []", "(flattenl {[9 3 6]}) -> [9 3 6]", "(flattenl {}) -> []", "(flattenl {[7 9 5]}) -> [7 9 5]", "(flattenl {[]}) -> []"], "time": 0.040519}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[6 0 3 5 6]}) -> [6 0 3 5 6]", "(flattenl {[]}) -> []", "(flattenl {[5 4]}) -> [5 4]", "(flattenl {[] {[7 7 0 4]} {[3 3]}}) -> [7 7 0 4 3 3]", "(flattenl {[8 5] {[8 2 6 5] {[1 3 0 1 3] {[6 0]}} {[5 3 0]}}}) -> [8 5 8 2 6 5 1 3 0 1 3 6 0 5 3 0]"], "time": 0.217676}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[1] {[8 7 1 3 9]}}}) -> [1 8 7 1 3 9]", "(flattenl {[] {[8 4 9 2 9]} {[8] {[0 0 1]}}}) -> [8 4 9 2 9 8 0 0 1]", "(flattenl {[5 4 2 9 3]}) -> [5 4 2 9 3]", "(flattenl {[] {[0]}}) -> [0]", "(flattenl {[1 3 9 9]}) -> [1 3 9 9]"], "time": 0.173334}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[9 7 2 7]}}) -> [9 7 2 7]", "(flattenl {[7] {[6 0 2 5]} {[2 9 6 3 2] {[9 9] {[0 4 5 0]} {[6 3]}}}}) -> [7 6 0 2 5 2 9 6 3 2 9 9 0 4 5 0 6 3]", "(flattenl {}) -> []", "(flattenl {[4 5 8 5]}) -> [4 5 8 5]", "(flattenl {}) -> []"], "time": 0.222867}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[7 8 0]}) -> [7 8 0]", "(flattenl {}) -> []", "(flattenl {[9 3] {[6 4] {[4]}} {[] {[]} {[3 1 0]}}}) -> [9 3 6 4 4 3 1 0]", "(flattenl {[3 2] {[3 3 2 7 8]}}) -> [3 2 3 3 2 7 8]"], "time": 0.206116}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[2 0 0 7] {[] {[]} {[1 1 5]}}}) -> [2 0 0 7 1 1 5]", "(flattenl {}) -> []", "(flattenl {[] {[7 3] {[]}} {[1 4 4] {[4 9 8 7 1]} {[7 9 9]}}}) -> [7 3 1 4 4 4 9 8 7 1 7 9 9]", "(flattenl {[] {[0 4 5 3]}}) -> [0 4 5 3]", "(flattenl {}) -> []"], "time": 0.227456}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[] {[4 8 0 7 3]} {[2 1]}}) -> [4 8 0 7 3 2 1]", "(flattenl {}) -> []", "(flattenl {[9 7 9]}) -> [9 7 9]", "(flattenl {}) -> []"], "time": 0.197038}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {}) -> []", "(flattenl {[0 5 4] {[1 3 2]}}) -> [0 5 4 1 3 2]", "(flattenl {[]}) -> []", "(flattenl {[7 3 8 0] {[] {[0 9 3 4]}}}) -> [7 3 8 0 0 9 3 4]"], "time": 0.210456}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[4 3 0] {[]}}) -> [4 3 0]", "(flattenl {[9 7 0] {[6 1 1 2] {[0 0] {[6 0 0 8]} {[]}}}}) -> [9 7 0 6 1 1 2 0 0 6 0 0 8]"], "time": 0.170065}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[1 8 5 8]} {[]}}) -> [1 8 5 8]", "(flattenl {}) -> []", "(flattenl {[5] {[1 9] {[7]} {[6 0] {[9 5 5 5 6]} {[3 1 0]}}}}) -> [5 1 9 7 6 0 9 5 5 5 6 3 1 0]", "(flattenl {}) -> []", "(flattenl {[9 3] {[2 7 9] {[1 4 3 6 2] {[1 5 5 2 2]}} {[4 7 3] {[0 9 3 3 2]}}} {[0 0 5]}}) -> [9 3 2 7 9 1 4 3 6 2 1 5 5 2 2 4 7 3 0 9 3 3 2 0 0 5]"], "time": 0.205146}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[] {[0 8 1 7 8]} {[2 0 4 5]}}) -> [0 8 1 7 8 2 0 4 5]", "(flattenl {[6] {[2 9 8 1] {[4 9 4]}}}) -> [6 2 9 8 1 4 9 4]", "(flattenl {[8 8 9] {[] {[7 5 8]}} {[2 5 4]}}) -> [8 8 9 7 5 8 2 5 4]", "(flattenl {[0]}) -> [0]"], "time": 0.199054}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[9 6 0] {[7] {[3 7 1 2] {[]} {[6 3 5 5 2]}}} {[8] {[7] {[0 9 9 8]}}}}) -> [9 6 0 7 3 7 1 2 6 3 5 5 2 8 7 0 9 9 8]", "(flattenl {[6 8] {[3 8 0] {[3 4]} {[1 3 0 0 3]}} {[0] {[9]}}}) -> [6 8 3 8 0 3 4 1 3 0 0 3 0 9]", "(flattenl {[9] {[1] {[8]} {[1 8 6 1 7]}}}) -> [9 1 8 1 8 6 1 7]", "(flattenl {[0 2 1]}) -> [0 2 1]", "(flattenl {[5 1 7] {[8 1 8 8 7]} {[8 3 1 4 0]}}) -> [5 1 7 8 1 8 8 7 8 3 1 4 0]"], "time": 0.197159}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {}) -> []", "(flattenl {[6 9 7 0 1] {[3 9 8 2] {[3] {[2 6 6 6 4]}}} {[4 6 7] {[8 1 0] {[9 9 2]} {[]}}}}) -> [6 9 7 0 1 3 9 8 2 3 2 6 6 6 4 4 6 7 8 1 0 9 9 2]", "(flattenl {[0 5 6 3] {[8 1]}}) -> [0 5 6 3 8 1]"], "time": 0.19288}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[8 7] {[0 8 5 6 7] {[6 9 7 3 8] {[0 0 5]} {[6 7 3 0 4]}}} {[7]}}) -> [8 7 0 8 5 6 7 6 9 7 3 8 0 0 5 6 7 3 0 4 7]", "(flattenl {[1 4 2 4 8] {[] {[5 7 6] {[0 5 2 1]}}}}) -> [1 4 2 4 8 5 7 6 0 5 2 1]", "(flattenl {[0 9 8]}) -> [0 9 8]", "(flattenl {[4 9 3] {[7 1 4]}}) -> [4 9 3 7 1 4]", "(flattenl {[2 9]}) -> [2 9]"], "time": 0.205578}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[9 0 8 3] {[3]}}) -> [9 0 8 3 3]", "(flattenl {[3 8 5 6 6] {[9 7 7 1 4]}}) -> [3 8 5 6 6 9 7 7 1 4]", "(flattenl {[7 7 1] {[5 7 6]} {[4 9 7]}}) -> [7 7 1 5 7 6 4 9 7]", "(flattenl {[4 5 0 3 7] {[0] {[7 5]}}}) -> [4 5 0 3 7 0 7 5]", "(flattenl {[4 2 8 4 0] {[]}}) -> [4 2 8 4 0]"], "time": 0.209821}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[] {[6 4 5 6 9]}}) -> [6 4 5 6 9]", "(flattenl {[3 0 2 6 4] {[2 1]} {[2]}}) -> [3 0 2 6 4 2 1 2]"], "time": 0.181887}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[5 9 5] {[3 6 7 3 7]}}) -> [5 9 5 3 6 7 3 7]", "(flattenl {[6 7] {[2 0 9] {[9 5 9 2]} {[]}} {[2 9 6 8 6]}}) -> [6 7 2 0 9 9 5 9 2 2 9 6 8 6]", "(flattenl {[5 7] {[8 8 4 8 8]}}) -> [5 7 8 8 4 8 8]", "(flattenl {[4 2 7 1] {[] {[7 6 4 3 7]} {[5 6 9]}} {[8 5 2] {[]} {[2 6 1 0]}}}) -> [4 2 7 1 7 6 4 3 7 5 6 9 8 5 2 2 6 1 0]", "(flattenl {[3 5]}) -> [3 5]"], "time": 0.218956}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[2 0 7 4 6] {[]}}) -> [2 0 7 4 6]", "(flattenl {[4 0 3 8] {[8 8 7 5 7] {[9 6 6 4] {[6 6 6 1]}} {[7]}} {[8 1]}}) -> [4 0 3 8 8 8 7 5 7 9 6 6 4 6 6 6 1 7 8 1]", "(flattenl {[0 5 7 7]}) -> [0 5 7 7]", "(flattenl {[9 1]}) -> [9 1]", "(flattenl {}) -> []"], "time": 0.24437}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[8]}) -> [8]", "(flattenl {}) -> []", "(flattenl {[1]}) -> [1]", "(flattenl {[4] {[] {[2 4 2 5 2]}} {[5] {[5 3 9 3 5]}}}) -> [4 2 4 2 5 2 5 5 3 9 3 5]"], "time": 0.246328}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[9 6 0 6] {[] {[7] {[9 5 1]} {[7]}}} {[]}}) -> [9 6 0 6 7 9 5 1 7]", "(flattenl {[9] {[3]} {[]}}) -> [9 3]", "(flattenl {[3 9]}) -> [3 9]", "(flattenl {[9 4 8 2 5]}) -> [9 4 8 2 5]", "(flattenl {[9 2 1 2] {[9 3 6] {[]} {[2 9 3 2]}} {[6]}}) -> [9 2 1 2 9 3 6 2 9 3 2 6]"], "time": 0.222841}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[5 0 8] {[7 8 1 0 2]} {[2 6 6 3] {[6 5]} {[]}}}) -> [5 0 8 7 8 1 0 2 2 6 6 3 6 5]", "(flattenl {[7 2 2 4 0] {[0 0] {[8 9]} {[6 7 3 1 5]}} {[8 9] {[2 8]} {[6 4 6 7]}}}) -> [7 2 2 4 0 0 0 8 9 6 7 3 1 5 8 9 2 8 6 4 6 7]", "(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {[8 9 9 4] {[6 8] {[1 4 1 1] {[1 3 8 8]} {[0 2]}} {[1 1 1 7] {[4 7 7]}}} {[6 7 0 1 9]}}) -> [8 9 9 4 6 8 1 4 1 1 1 3 8 8 0 2 1 1 1 7 4 7 7 6 7 0 1 9]"], "time": 0.257435}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[6 5 2 2] {[5 1 1 4]}}) -> [6 5 2 2 5 1 1 4]", "(flattenl {[6 5 0 8] {[7 5] {[2 3]} {[]}} {[6 7] {[8 4]} {[8 7]}}}) -> [6 5 0 8 7 5 2 3 6 7 8 4 8 7]", "(flattenl {}) -> []"], "time": 0.238453}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[7]}) -> [7]", "(flattenl {[9 6 9 7 7] {[6 7]} {[2 9 6]}}) -> [9 6 9 7 7 6 7 2 9 6]", "(flattenl {[5 0 5 3 1] {[7 8 8] {[8 2 7 0] {[0]}}}}) -> [5 0 5 3 1 7 8 8 8 2 7 0 0]", "(flattenl {[3]}) -> [3]", "(flattenl {[7 6 4 4 9]}) -> [7 6 4 4 9]"], "time": 0.25031}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[5] {[4] {[7 1 1]}}}) -> [5 4 7 1 1]", "(flattenl {[6 1 5 5]}) -> [6 1 5 5]", "(flattenl {[8]}) -> [8]", "(flattenl {[6 5 4] {[1 7 1 9 4] {[9]}} {[4 0 3] {[8 3 4 8 4]} {[0]}}}) -> [6 5 4 1 7 1 9 4 9 4 0 3 8 3 4 8 4 0]", "(flattenl {}) -> []"], "time": 0.202422}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[4] {[2 5 9 5 3]}}) -> [4 2 5 9 5 3]", "(flattenl {[9 2]}) -> [9 2]", "(flattenl {}) -> []", "(flattenl {}) -> []"], "time": 0.235592}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[3 2 0 2] {[3 2 3] {[6 7]} {[2 7]}} {[1 5 3 0 1] {[5 4 8]}}}) -> [3 2 0 2 3 2 3 6 7 2 7 1 5 3 0 1 5 4 8]", "(flattenl {[2 7] {[]}}) -> [2 7]", "(flattenl {[5 8 3] {[1 5 1]} {[7] {[1 4 3 0] {[]}}}}) -> [5 8 3 1 5 1 7 1 4 3 0]", "(flattenl {[7 5 1]}) -> [7 5 1]", "(flattenl {[9 5 8]}) -> [9 5 8]"], "time": 0.229755}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[1 8 7] {[9] {[8]} {[] {[2 8 1]} {[5 4 9 1]}}}}) -> [1 8 7 9 8 2 8 1 5 4 9 1]", "(flattenl {[9]}) -> [9]", "(flattenl {[8 7] {[2 9 9]}}) -> [8 7 2 9 9]", "(flattenl {[]}) -> []", "(flattenl {[5 4 2] {[8]}}) -> [5 4 2 8]"], "time": 0.201883}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[6 0 9] {[7 8] {[2 2]} {[1 5 6] {[6 7 8 8 9]}}} {[4 9 1 2 0]}}) -> [6 0 9 7 8 2 2 1 5 6 6 7 8 8 9 4 9 1 2 0]", "(flattenl {}) -> []", "(flattenl {[] {[5]} {[9 7 8]}}) -> [5 9 7 8]", "(flattenl {[4] {[6 2] {[7 4 1 4 8]}}}) -> [4 6 2 7 4 1 4 8]"], "time": 0.226326}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[0 9]}) -> [0 9]", "(flattenl {}) -> []", "(flattenl {[] {[8 1 4 0]} {[0]}}) -> [8 1 4 0 0]", "(flattenl {[6] {[7 8 1] {[1]}} {[6 9 7] {[0 4] {[4 2 1]} {[]}}}}) -> [6 7 8 1 1 6 9 7 0 4 4 2 1]", "(flattenl {}) -> []"], "time": 0.198265}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {[7 8] {[5 1 1 0 5]} {[2 9 7 9 4]}}) -> [7 8 5 1 1 0 5 2 9 7 9 4]", "(flattenl {[8 4]}) -> [8 4]", "(flattenl {}) -> []"], "time": 0.168321}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[6 9 8] {[9 2] {[3 4 2 0 5] {[]} {[5 1 6 3 9]}} {[]}} {[]}}) -> [6 9 8 9 2 3 4 2 0 5 5 1 6 3 9]", "(flattenl {[6 7 5]}) -> [6 7 5]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []"], "time": 0.198161}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[5 7 3 9] {[] {[] {[]} {[9 6 4]}}}}) -> [5 7 3 9 9 6 4]", "(flattenl {[3 7 9] {[7 4 0]} {[1 5]}}) -> [3 7 9 7 4 0 1 5]", "(flattenl {[] {[9 7 4 1 3] {[9 3 2] {[1]} {[0 8]}}}}) -> [9 7 4 1 3 9 3 2 1 0 8]", "(flattenl {[0 8]}) -> [0 8]", "(flattenl {[5 3 8]}) -> [5 3 8]"], "time": 0.211852}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[5 4 7 1 5]}) -> [5 4 7 1 5]", "(flattenl {}) -> []", "(flattenl {[7 3 1 7 7] {[2 4 7]}}) -> [7 3 1 7 7 2 4 7]", "(flattenl {[9 0 5 3]}) -> [9 0 5 3]", "(flattenl {}) -> []"], "time": 0.186297}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {[5] {[3 8 3] {[2 9 2 2 6]} {[2] {[]}}} {[6 1 5] {[5 9 3]} {[6] {[4 4 3]} {[3]}}}}) -> [5 3 8 3 2 9 2 2 6 2 6 1 5 5 9 3 6 4 4 3 3]", "(flattenl {}) -> []", "(flattenl {[1 6] {[8 5 3 4 4]}}) -> [1 6 8 5 3 4 4]"], "time": 0.163192}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[3] {[5 6 0 6]} {[2] {[2 7 2 5 1]}}}) -> [3 5 6 0 6 2 2 7 2 5 1]", "(flattenl {[1 9 6 1 0]}) -> [1 9 6 1 0]", "(flattenl {[9 1 5] {[4]}}) -> [9 1 5 4]", "(flattenl {[]}) -> []"], "time": 0.220908}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[1 3 4 3] {[]}} {[3 5 6] {[1 9 7 9] {[3 6 9 8 2]} {[4 6 8]}}}}) -> [1 3 4 3 3 5 6 1 9 7 9 3 6 9 8 2 4 6 8]", "(flattenl {[3]}) -> [3]", "(flattenl {[0 2 1 2 6] {[1 3 7 0] {[] {[6 0 1]}}}}) -> [0 2 1 2 6 1 3 7 0 6 0 1]", "(flattenl {}) -> []", "(flattenl {[] {[7 8 5 1]} {[3 5]}}) -> [7 8 5 1 3 5]"], "time": 0.215298}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[0 7 8 5] {[8 7 4 6 3] {[1 9]} {[]}} {[2 9] {[0 0 2]} {[1 7 7 1 5]}}}) -> [0 7 8 5 8 7 4 6 3 1 9 2 9 0 0 2 1 7 7 1 5]", "(flattenl {[2 0 3 1 7] {[]} {[2 5 3]}}) -> [2 0 3 1 7 2 5 3]", "(flattenl {[4 4 5] {[1 1 1] {[4 7 1]} {[6 4 7]}} {[] {[9]} {[6 7 3 9 5]}}}) -> [4 4 5 1 1 1 4 7 1 6 4 7 9 6 7 3 9 5]", "(flattenl {}) -> []", "(flattenl {[2 9 9 7] {[0] {[7 9 9 7 3]}}}) -> [2 9 9 7 0 7 9 9 7 3]"], "time": 0.217761}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[3] {[0 8 0]}}) -> [3 0 8 0]", "(flattenl {[6 3] {[5 1] {[7 5]} {[8 3] {[5 7 4 5 7]} {[]}}} {[6 3]}}) -> [6 3 5 1 7 5 8 3 5 7 4 5 7 6 3]", "(flattenl {[7 2 6 0]}) -> [7 2 6 0]", "(flattenl {[9 9 3 2] {[5] {[5 2 3 0]}}}) -> [9 9 3 2 5 5 2 3 0]", "(flattenl {[4 5 8 6 8]}) -> [4 5 8 6 8]"], "time": 0.200868}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[9]}) -> [9]", "(flattenl {[9 0 9]}) -> [9 0 9]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[8 2 5] {[4 8 9 1 6]} {[3 2]}}) -> [8 2 5 4 8 9 1 6 3 2]"], "time": 0.182553}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[3 2]}}) -> [3 2]", "(flattenl {}) -> []", "(flattenl {[4 2 7 5] {[0 3 2 9]} {[0 7 4 3 0]}}) -> [4 2 7 5 0 3 2 9 0 7 4 3 0]", "(flattenl {[5]}) -> [5]", "(flattenl {[7] {[3 2 5 3 2]}}) -> [7 3 2 5 3 2]"], "time": 0.232131}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[3 5 6] {[]} {[2 4 8 6]}}) -> [3 5 6 2 4 8 6]", "(flattenl {[2 4] {[0 8 7 5]} {[]}}) -> [2 4 0 8 7 5]", "(flattenl {[] {[4 2 4 8 0] {[4 9 6 1]} {[4 7 9] {[7 1 0]}}}}) -> [4 2 4 8 0 4 9 6 1 4 7 9 7 1 0]", "(flattenl {}) -> []", "(flattenl {[6 6] {[6 8 7 4 6]} {[9 5]}}) -> [6 6 6 8 7 4 6 9 5]"], "time": 0.212517}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[4 2 5 9 9] {[]}}) -> [4 2 5 9 9]", "(flattenl {[8 5 0]}) -> [8 5 0]", "(flattenl {[5 7 2] {[]}}) -> [5 7 2]", "(flattenl {}) -> []", "(flattenl {[6 2 6] {[5 6]}}) -> [6 2 6 5 6]"], "time": 0.192779}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[1] {[2 4] {[9 0 5 6 7] {[3 2 3 5]} {[7 3 3]}}} {[] {[9 3 8 5 8] {[9 1]}} {[]}}}) -> [1 2 4 9 0 5 6 7 3 2 3 5 7 3 3 9 3 8 5 8 9 1]", "(flattenl {[0 1]}) -> [0 1]", "(flattenl {[8 8 7 4] {[2 6 8 9 8] {[9 1 7 1 2]} {[]}} {[4 7 7]}}) -> [8 8 7 4 2 6 8 9 8 9 1 7 1 2 4 7 7]", "(flattenl {}) -> []", "(flattenl {[8] {[6 8 7] {[9 7 1]} {[4] {[6 5 4 8]} {[9 1]}}} {[1 0 9 8 1] {[5 3 9 7]} {[3 2 5]}}}) -> [8 6 8 7 9 7 1 4 6 5 4 8 9 1 1 0 9 8 1 5 3 9 7 3 2 5]"], "time": 0.200555}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[7 3 7 4 4]}) -> [7 3 7 4 4]", "(flattenl {[9 0] {[7 9 7] {[1 4 2 8 1]}} {[9 8 7]}}) -> [9 0 7 9 7 1 4 2 8 1 9 8 7]", "(flattenl {[] {[0 2 7]} {[]}}) -> [0 2 7]", "(flattenl {[]}) -> []", "(flattenl {}) -> []"], "time": 0.196407}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {[8]}) -> [8]", "(flattenl {[6 2 2 7] {[0 3 3 1]}}) -> [6 2 2 7 0 3 3 1]", "(flattenl {[4 2 7] {[7 8 6 9 3] {[6 3 8] {[]}}} {[2 6 9 2] {[2 3 1 8 9]}}}) -> [4 2 7 7 8 6 9 3 6 3 8 2 6 9 2 2 3 1 8 9]", "(flattenl {}) -> []"], "time": 0.189417}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[3 8 4 5 3]}) -> [3 8 4 5 3]", "(flattenl {[] {[]} {[]}}) -> []", "(flattenl {[2] {[7 9] {[3 6]} {[6]}}}) -> [2 7 9 3 6 6]", "(flattenl {[5 3 1] {[3] {[4 1 6 6 7]}} {[5] {[3 8 4 2 2]}}}) -> [5 3 1 3 4 1 6 6 7 5 3 8 4 2 2]", "(flattenl {[4] {[4 5 8 1 2] {[7 6]}} {[9 3 1 0 6] {[2 7]}}}) -> [4 4 5 8 1 2 7 6 9 3 1 0 6 2 7]"], "time": 0.189511}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[1 3 4 2] {[4 7 9]} {[8 3 8] {[0 5 9 1]} {[2 6 1 4] {[]} {[9 6 7 1 0]}}}}) -> [1 3 4 2 4 7 9 8 3 8 0 5 9 1 2 6 1 4 9 6 7 1 0]", "(flattenl {[3] {[8 5 2] {[6]}} {[2 4 6] {[9 4 1 9 2]}}}) -> [3 8 5 2 6 2 4 6 9 4 1 9 2]", "(flattenl {[0 0 2 1] {[5 6]}}) -> [0 0 2 1 5 6]", "(flattenl {}) -> []", "(flattenl {[4 4 8 7 8]}) -> [4 4 8 7 8]"], "time": 0.198855}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[1 3 0 8] {[0 5 2 6]} {[8]}}) -> [1 3 0 8 0 5 2 6 8]", "(flattenl {[6] {[3]}}) -> [6 3]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[]}) -> []"], "time": 0.184786}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[6 4] {[6 1]}}) -> [6 4 6 1]", "(flattenl {[0 3 1 0]}) -> [0 3 1 0]", "(flattenl {}) -> []", "(flattenl {[3 5 1 3] {[4 9 7 3]} {[0]}}) -> [3 5 1 3 4 9 7 3 0]", "(flattenl {[5 1 3 1 0] {[5 3 0 0] {[]}}}) -> [5 1 3 1 0 5 3 0 0]"], "time": 0.183057}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[6 4] {[2 5 6] {[0 5]} {[2 1 9 4]}} {[6 4 8 5]}}) -> [6 4 2 5 6 0 5 2 1 9 4 6 4 8 5]", "(flattenl {[5 9 5 8 2] {[5 4 9 7 1]}}) -> [5 9 5 8 2 5 4 9 7 1]", "(flattenl {[0 3 3 4]}) -> [0 3 3 4]", "(flattenl {[0 6 4] {[6 7 8 1 0] {[7] {[4 5 0 8 7]}} {[2]}} {[8 3 3 8 6] {[]}}}) -> [0 6 4 6 7 8 1 0 7 4 5 0 8 7 2 8 3 3 8 6]", "(flattenl {}) -> []"], "time": 0.194441}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[8 0 0 5]}}) -> [8 0 0 5]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[2] {[0 9 4 8]}}) -> [2 0 9 4 8]", "(flattenl {[] {[0 1 4 7 2]} {[8 1 1 9]}}) -> [0 1 4 7 2 8 1 1 9]"], "time": 0.172167}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[6 0] {[7 8 5 0 3]} {[1]}}) -> [6 0 7 8 5 0 3 1]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[]}) -> []"], "time": 0.189162}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[9 6 1 9 3] {[7 2 7 6] {[6 7 0 6 1]}} {[7] {[9 5 8]}}}) -> [9 6 1 9 3 7 2 7 6 6 7 0 6 1 7 9 5 8]", "(flattenl {[0]}) -> [0]", "(flattenl {[7 5 0 5]}) -> [7 5 0 5]", "(flattenl {[] {[4 4 7 8]} {[5 5 7 2 5]}}) -> [4 4 7 8 5 5 7 2 5]", "(flattenl {}) -> []"], "time": 0.176636}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[8 3 6 8 5]}) -> [8 3 6 8 5]", "(flattenl {[] {[3]}}) -> [3]", "(flattenl {}) -> []", "(flattenl {[3] {[]}}) -> [3]"], "time": 0.17794}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[6] {[7 2] {[3 5 0 2]} {[1 7 8 3 7] {[6 7 4]} {[1]}}} {[8 9 6 9 8] {[2 5 7] {[0]} {[9 8 3 9 0]}}}}) -> [6 7 2 3 5 0 2 1 7 8 3 7 6 7 4 1 8 9 6 9 8 2 5 7 0 9 8 3 9 0]", "(flattenl {[7 3 5] {[5 4]} {[8 9 8]}}) -> [7 3 5 5 4 8 9 8]", "(flattenl {[1] {[8 6] {[] {[4 5]} {[5 3]}} {[4 9] {[1 6 6 5 1]}}} {[1 5 6 8] {[1 4 5 6]}}}) -> [1 8 6 4 5 5 3 4 9 1 6 6 5 1 1 5 6 8 1 4 5 6]", "(flattenl {[1 7 9]}) -> [1 7 9]", "(flattenl {}) -> []"], "time": 0.159381}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[0 1 0 8] {[8] {[4] {[8 3 6 2 7]} {[4 0 7 1]}} {[2 2 7 8]}} {[3 0 5] {[0]} {[] {[6 8]} {[4 7]}}}}) -> [0 1 0 8 8 4 8 3 6 2 7 4 0 7 1 2 2 7 8 3 0 5 0 6 8 4 7]", "(flattenl {[8 1 0 5] {[6 9 2] {[]} {[4 6 4 2] {[]}}}}) -> [8 1 0 5 6 9 2 4 6 4 2]", "(flattenl {[4 5 7 7 6] {[3 7 9]} {[]}}) -> [4 5 7 7 6 3 7 9]", "(flattenl {[] {[7 4 6] {[5 7 1 5]}} {[2 9] {[3 7 8] {[7 2 0 2 1]}}}}) -> [7 4 6 5 7 1 5 2 9 3 7 8 7 2 0 2 1]", "(flattenl {[1 6 2 5 5]}) -> [1 6 2 5 5]"], "time": 0.177231}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[9] {[8]} {[9 8]}}) -> [9 8 9 8]", "(flattenl {[] {[6 6]} {[3 0 8 1 0] {[5]}}}) -> [6 6 3 0 8 1 0 5]", "(flattenl {}) -> []", "(flattenl {[5] {[8 2] {[]} {[2] {[5 6 7 4]}}} {[4 5 3] {[3] {[9 1]}}}}) -> [5 8 2 2 5 6 7 4 4 5 3 3 9 1]", "(flattenl {[8] {[9 9 3]} {[7 0]}}) -> [8 9 9 3 7 0]"], "time": 0.164979}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[9]}) -> [9]", "(flattenl {[9 0 2 9 4] {[9] {[0 6] {[5 8 9 3]}} {[9 4 1]}}}) -> [9 0 2 9 4 9 0 6 5 8 9 3 9 4 1]", "(flattenl {[7 8 9 9] {[3 0] {[8]} {[4 6 4 1] {[4 7 0]}}} {[9 0]}}) -> [7 8 9 9 3 0 8 4 6 4 1 4 7 0 9 0]", "(flattenl {[2 8 1 9]}) -> [2 8 1 9]"], "time": 0.136393}
