{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {8}) -> 1", "(count_nodes {9 {0 {3}}}) -> 3", "(count_nodes {6 {1} {9}}) -> 3", "(count_nodes {7 {1} {3 {7 {3}} {7 {6}}}}) -> 7", "(count_nodes {4 {0 {4}}}) -> 3", "(count_nodes {3 {3 {5}}}) -> 3", "(count_nodes {9 {6 {0} {9}}}) -> 4"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.922682}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {2 {3}}) -> 2", "(count_nodes {7 {4 {4 {2}}} {4 {6 {8}} {7}}}) -> 8", "(count_nodes {3 {9}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {8}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.976119}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {5}}) -> 2", "(count_nodes {0 {8 {5} {6 {5} {6}}} {4 {6}}}) -> 8", "(count_nodes {1 {1} {2}}) -> 3", "(count_nodes {9 {6} {1 {8}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {1 {2} {9}}) -> 3", "(count_nodes {3 {5 {2 {0} {3}}} {5 {1} {9}}}) -> 8", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.024527}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {5} {9}}) -> 3", "(count_nodes {4}) -> 1", "(count_nodes {9}) -> 1", "(count_nodes {0 {8 {6} {0}} {8 {9}}}) -> 6", "(count_nodes {8}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {3 {8}}) -> 2", "(count_nodes {7}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.067673}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {2 {0} {5}}) -> 3", "(count_nodes {0 {0} {7}}) -> 3", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {6 {2 {4}} {5}}) -> 4", "(count_nodes {5 {4 {8}}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.015434}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {4 {9}}) -> 2", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {2 {3} {2}}) -> 3", "(count_nodes {1}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 4.103869}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {2}}) -> 2", "(count_nodes {3 {6 {1 {5}}} {1 {0 {9}}}}) -> 7", "(count_nodes {0 {0}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {2}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.266413}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {1}) -> 1", "(count_nodes {5 {2}}) -> 2", "(count_nodes {4 {0}}) -> 2", "(count_nodes {5 {1 {5 {2}}}}) -> 4", "(count_nodes {7 {2 {3} {5}} {4 {4} {2}}}) -> 7"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.406779}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {3 {4 {6}} {0 {3} {0}}}) -> 6", "(count_nodes {3 {9}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.408216}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {4 {9}}}) -> 3", "(count_nodes {0 {9} {5}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {6 {7 {8 {9} {2}}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {8 {3 {6} {8}}}) -> 4"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.511897}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {3}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {7 {1}}) -> 2", "(count_nodes {3 {7} {1}}) -> 3", "(count_nodes {4 {3 {6}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {2 {0} {8}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.573142}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {3} {8}}) -> 3", "(count_nodes {8 {6}}) -> 2", "(count_nodes {6 {3} {1}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3 {0} {1 {6 {6} {1}}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {0 {9 {8 {9}} {6}} {5 {7}}}) -> 7"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.5455}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {4 {8 {1}}}) -> 3", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 e)) 1)) 0)) _) _)", "time": 5.534014}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {4}) -> 1", "(count_nodes {8 {1 {2 {8}}}}) -> 4", "(count_nodes {9 {0 {8 {4}}}}) -> 4", "(count_nodes {0}) -> 1", "(count_nodes {4 {6 {1 {0} {1}}} {2}}) -> 6"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.654069}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {4 {6} {0}}) -> 3", "(count_nodes {8 {9 {5} {5}} {2 {2} {5}}}) -> 7", "(count_nodes {8 {2 {9} {5}} {9 {9} {5}}}) -> 7", "(count_nodes {9 {1 {8}} {5 {0} {6}}}) -> 6", "(count_nodes {8 {5} {5 {2}}}) -> 4", "(count_nodes {6}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.66469}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {2} {8 {4}}}) -> 4", "(count_nodes {1}) -> 1", "(count_nodes {1}) -> 1", "(count_nodes {3 {6 {2 {5} {1}}}}) -> 5", "(count_nodes {5 {5} {8 {0}}}) -> 4", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {3 {9} {4}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.833139}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {9 {6}}) -> 2", "(count_nodes {5 {4} {3}}) -> 3", "(count_nodes {6 {6 {4}}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.415292}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {7 {7} {4 {3 {0}}}}) -> 5", "(count_nodes {3 {3}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {2 {2 {6}} {2}}) -> 4", "(count_nodes {0 {9}}) -> 2", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.74803}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {2 {5}}) -> 2", "(count_nodes {3 {6}}) -> 2", "(count_nodes {3 {4}}) -> 2", "(count_nodes {8 {9 {6}} {8 {2} {0}}}) -> 6", "(count_nodes {6 {8} {9}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.698585}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6 {1}}) -> 2", "(count_nodes {5 {2 {0}} {4}}) -> 4", "(count_nodes {0 {9 {0}} {2}}) -> 4", "(count_nodes {4}) -> 1", "(count_nodes {5}) -> 1", "(count_nodes {4}) -> 1", "(count_nodes {0 {9 {0} {9}}}) -> 4"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.685827}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {8 {1 {7} {5}}}) -> 4", "(count_nodes {1 {6}}) -> 2", "(count_nodes {9 {6}}) -> 2", "(count_nodes {6}) -> 1", "(count_nodes {3 {6} {6}}) -> 3", "(count_nodes {3 {6 {4} {8}} {7 {3 {1}}}}) -> 7"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.99301}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {1 {8} {3}}) -> 3", "(count_nodes {6 {5}}) -> 2", "(count_nodes {5 {3 {3 {0}}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {9 {9}}) -> 2", "(count_nodes {3 {9} {7 {8} {6}}}) -> 5", "(count_nodes {8 {9}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.000149}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {2 {3 {0} {9}}}) -> 4", "(count_nodes {0 {4 {2 {7}} {9 {4} {8}}} {4 {1} {7}}}) -> 10", "(count_nodes {3}) -> 1", "(count_nodes {7 {5} {1}}) -> 3", "(count_nodes {9 {4 {0}}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.751843}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {2}) -> 1", "(count_nodes {5 {7 {7} {1 {0}}} {7 {7 {8} {3}}}}) -> 9", "(count_nodes {}) -> 0", "(count_nodes {0 {5 {7}} {8 {0} {7}}}) -> 6", "(count_nodes {7 {5} {3 {4 {9}}}}) -> 5"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.679169}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {5 {9 {0}} {6 {7 {9}} {0 {2} {9}}}}) -> 9", "(count_nodes {6 {2 {6}} {5 {1 {0} {6}}}}) -> 7", "(count_nodes {9 {0}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {2 {0} {8 {2} {6}}}) -> 5", "(count_nodes {5 {6} {4}}) -> 3", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.726955}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {8 {9} {9}}}) -> 4", "(count_nodes {0 {4}}) -> 2", "(count_nodes {9}) -> 1", "(count_nodes {2 {4 {8 {1}} {2 {1} {2}}} {1}}) -> 8", "(count_nodes {1 {5} {2}}) -> 3", "(count_nodes {1 {4 {6} {6}} {0 {4 {2} {9}} {0}}}) -> 9", "(count_nodes {0 {5 {1 {1}}} {8 {1}}}) -> 6", "(count_nodes {1}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.767933}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {0 {5}}) -> 2", "(count_nodes {1}) -> 1", "(count_nodes {0}) -> 1", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {1 {2 {4 {9}}}}) -> 4", "(count_nodes {5 {4} {6}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.163005}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1 {1} {8 {1} {1}}}) -> 5", "(count_nodes {6 {2}}) -> 2", "(count_nodes {9 {7}}) -> 2", "(count_nodes {3 {8 {8} {0}} {6 {5}}}) -> 6", "(count_nodes {6 {1 {2} {3}}}) -> 4", "(count_nodes {2}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.103808}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8 {5}}) -> 2", "(count_nodes {2}) -> 1", "(count_nodes {2 {3}}) -> 2", "(count_nodes {1 {4}}) -> 2", "(count_nodes {8}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 1)) 1)) 0)) _) _)", "time": 5.166052}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {6 {2}}) -> 2", "(count_nodes {2}) -> 1", "(count_nodes {3 {4}}) -> 2", "(count_nodes {4 {7 {6 {6} {9}}}}) -> 5", "(count_nodes {8}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {3 {8} {8 {9} {3 {9} {2}}}}) -> 7"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.564184}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {3}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {8 {7 {6 {0}} {5 {6}}} {9}}) -> 7", "(count_nodes {7 {1} {9}}) -> 3", "(count_nodes {2}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.994207}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {4} {8}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {1 {8}}) -> 2", "(count_nodes {5 {3}}) -> 2", "(count_nodes {2 {4}}) -> 2", "(count_nodes {6 {1}}) -> 2", "(count_nodes {2 {9} {7}}) -> 3", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 2.39164}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8 {9 {8} {0 {5}}}}) -> 5", "(count_nodes {8}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {7 {2 {2} {8}} {6 {8} {6}}}) -> 7", "(count_nodes {1 {2} {7}}) -> 3", "(count_nodes {9 {8} {9}}) -> 3", "(count_nodes {9}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.883236}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {0} {5}}) -> 3", "(count_nodes {1 {0 {5 {7} {1}} {2}} {6 {6}}}) -> 8", "(count_nodes {8}) -> 1", "(count_nodes {7 {8} {6 {8} {6}}}) -> 5", "(count_nodes {0}) -> 1", "(count_nodes {4}) -> 1", "(count_nodes {1 {1 {6 {0} {7}} {3 {4}}} {0 {9 {1} {6}}}}) -> 11", "(count_nodes {1 {9} {7}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.419722}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {8 {7}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {9 {0 {8} {1}} {3}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {2 {6}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 2.849899}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {9 {8 {1 {3} {4}}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {8 {2 {1 {7}}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.586091}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {5} {6 {4}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {9 {8} {6}}) -> 3", "(count_nodes {3 {1} {8}}) -> 3", "(count_nodes {6 {6}}) -> 2", "(count_nodes {5}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.908468}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {9 {7 {5} {9}} {1}}) -> 5", "(count_nodes {8 {0 {3} {6}} {6 {9} {6}}}) -> 7", "(count_nodes {2}) -> 1", "(count_nodes {4 {5 {4}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {5 {4 {0} {7 {1}}} {8}}) -> 6", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.448935}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8 {8}}) -> 2", "(count_nodes {5 {5 {8 {3} {1}} {7}}}) -> 6", "(count_nodes {1 {8}}) -> 2", "(count_nodes {7 {2} {0}}) -> 3", "(count_nodes {0}) -> 1", "(count_nodes {6 {9 {3 {5} {5}}}}) -> 5", "(count_nodes {7 {5}}) -> 2", "(count_nodes {5}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.036099}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {9 {2 {8}} {4 {7}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {5 {7 {8}} {0}}) -> 4", "(count_nodes {3}) -> 1", "(count_nodes {4 {5}}) -> 2", "(count_nodes {3 {8 {5}}}) -> 3", "(count_nodes {2 {2}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.157033}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {2 {8} {9}}}) -> 4", "(count_nodes {8 {0 {8 {2} {8}} {4 {9}}} {6}}) -> 8", "(count_nodes {}) -> 0", "(count_nodes {7 {6}}) -> 2", "(count_nodes {0 {2 {4}}}) -> 3", "(count_nodes {0 {0 {1} {3 {1} {8}}} {6 {3 {1}}}}) -> 9", "(count_nodes {5 {7}}) -> 2", "(count_nodes {9 {3 {8}} {0 {4} {7 {6}}}}) -> 7"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.373963}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {6 {8 {4} {8}}}}) -> 5", "(count_nodes {8}) -> 1", "(count_nodes {9}) -> 1", "(count_nodes {3}) -> 1", "(count_nodes {7}) -> 1", "(count_nodes {2}) -> 1", "(count_nodes {1 {2} {3 {8} {9}}}) -> 5", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.602487}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {4 {9}} {3 {1 {0}}}}) -> 6", "(count_nodes {1}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {8}) -> 1", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {8 {0 {6} {8}} {6 {6}}}) -> 6"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.805992}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {0 {0 {5}} {7}} {4 {8 {0} {3}}}}) -> 9", "(count_nodes {}) -> 0", "(count_nodes {9 {8 {6 {7} {2}} {3 {8}}} {4 {6 {1} {2}} {9 {7}}}}) -> 13", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {5 {7} {2}}) -> 3", "(count_nodes {0}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.344636}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {1 {3}}) -> 2", "(count_nodes {7}) -> 1", "(count_nodes {6 {9}}) -> 2", "(count_nodes {0}) -> 1", "(count_nodes {7 {7} {6}}) -> 3", "(count_nodes {2 {0 {9 {7} {9}}} {2 {2 {4}}}}) -> 8", "(count_nodes {9}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.528851}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {8 {3 {7} {7}}}) -> 4", "(count_nodes {5 {1} {4}}) -> 3", "(count_nodes {0 {7 {0 {6} {0}} {7}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {7 {4}}) -> 2", "(count_nodes {2 {2 {6} {9}} {8 {4 {2}}}}) -> 7"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.392808}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {6}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {9 {3 {5 {3} {1}} {3 {9} {9}}} {0 {1}}}) -> 10", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.093082}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {0} {8}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {6 {6}}) -> 2", "(count_nodes {2}) -> 1", "(count_nodes {9 {1 {0 {9}}} {6}}) -> 5", "(count_nodes {7 {3 {8 {0}} {7 {6}}} {0 {1} {3 {8}}}}) -> 10", "(count_nodes {9 {4 {4}}}) -> 3", "(count_nodes {0 {0 {2} {7 {2}}} {8 {7}}}) -> 7"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.916708}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {8}}) -> 2", "(count_nodes {7 {9 {3}}}) -> 3", "(count_nodes {3 {9} {4}}) -> 3", "(count_nodes {1 {0 {6}}}) -> 3", "(count_nodes {0 {4}}) -> 2", "(count_nodes {0 {2}}) -> 2", "(count_nodes {7 {2 {9 {0} {7}}}}) -> 5", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.307785}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6 {5} {2}}) -> 3", "(count_nodes {1 {2} {3}}) -> 3", "(count_nodes {6 {4 {1}} {7 {5}}}) -> 5", "(count_nodes {3 {3}}) -> 2", "(count_nodes {7}) -> 1", "(count_nodes {1 {0 {3 {3} {8}} {5 {5} {3}}}}) -> 8", "(count_nodes {8}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.790315}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {4} {1}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {7 {1 {7 {1}} {9 {3}}}}) -> 6", "(count_nodes {1}) -> 1", "(count_nodes {4 {0 {0 {4}}}}) -> 4", "(count_nodes {9 {9 {3} {9}} {1 {7} {1}}}) -> 7", "(count_nodes {1 {6}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.870067}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {8} {0}}) -> 3", "(count_nodes {6}) -> 1", "(count_nodes {3}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {3 {1 {9} {4 {1} {9}}} {0 {0 {6} {6}}}}) -> 10", "(count_nodes {4}) -> 1", "(count_nodes {5 {5}}) -> 2", "(count_nodes {0 {9} {8}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.426001}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {7}) -> 1", "(count_nodes {0}) -> 1", "(count_nodes {8}) -> 1", "(count_nodes {9 {5}}) -> 2", "(count_nodes {7 {4}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {1}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 1)) 1)) 0)) _) _)", "time": 3.640538}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1 {4} {6}}) -> 3", "(count_nodes {3}) -> 1", "(count_nodes {8 {5 {5 {3} {7}}} {5 {3 {3}}}}) -> 8", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.946597}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {7 {6}}}) -> 3", "(count_nodes {3 {7 {5}}}) -> 3", "(count_nodes {1 {3}}) -> 2", "(count_nodes {7 {4} {5}}) -> 3", "(count_nodes {3 {0} {6 {9 {7} {3}}}}) -> 6", "(count_nodes {4}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {8 {9}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.680121}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {2 {6 {0}}}}) -> 4", "(count_nodes {6 {0 {9} {5}} {2}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {0 {4 {2}} {8 {9} {0}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {0 {3 {9}}}) -> 3", "(count_nodes {3 {7 {5} {1}}}) -> 4", "(count_nodes {7 {8} {5}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.11752}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {2}}) -> 2", "(count_nodes {7 {8 {6} {0}}}) -> 4", "(count_nodes {0}) -> 1", "(count_nodes {7 {5}}) -> 2", "(count_nodes {8 {7 {8} {8}}}) -> 4", "(count_nodes {3}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {1 {0 {2}} {0 {7}}}) -> 5"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 2.986298}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {4 {1 {2 {8}}} {3 {1 {7} {7}} {4 {1} {7}}}}) -> 11", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {0 {5}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.416855}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {6 {3} {0 {9}}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {0 {5} {1 {3} {5}}}) -> 5", "(count_nodes {6 {8 {9 {9} {0}} {5 {0} {3}}} {7}}) -> 9", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2 {8} {2 {4} {9}}}) -> 5", "(count_nodes {4 {2 {7}}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.989381}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {9} {5}}) -> 3", "(count_nodes {9}) -> 1", "(count_nodes {8 {3 {3}}}) -> 3", "(count_nodes {5 {9} {5}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {6 {4}}) -> 2", "(count_nodes {8}) -> 1", "(count_nodes {6}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 2.660832}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8 {6}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {0 {9 {7} {5 {9} {9}}} {2 {6 {0} {1}} {8}}}) -> 11", "(count_nodes {7 {9} {6}}) -> 3", "(count_nodes {1 {2}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.672492}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {7}) -> 1", "(count_nodes {0 {2 {3} {7}}}) -> 4", "(count_nodes {7}) -> 1", "(count_nodes {4}) -> 1", "(count_nodes {6 {1} {9 {8}}}) -> 4", "(count_nodes {8 {9}}) -> 2", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.761761}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {3 {0 {9}}}}) -> 4", "(count_nodes {1}) -> 1", "(count_nodes {2 {7}}) -> 2", "(count_nodes {5 {5} {0}}) -> 3", "(count_nodes {6}) -> 1", "(count_nodes {3 {8 {8} {8}} {4 {0} {8}}}) -> 7", "(count_nodes {0 {9 {9}} {6 {5}}}) -> 5", "(count_nodes {4}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 6.162288}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {0 {2 {3} {7}}}) -> 4", "(count_nodes {2 {9} {5 {8 {6}}}}) -> 5", "(count_nodes {0}) -> 1", "(count_nodes {9 {5} {9}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {7 {0 {6 {9}}}}) -> 4"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.753567}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {4 {7 {5}}}) -> 3", "(count_nodes {4 {1 {4}} {1 {0}}}) -> 5", "(count_nodes {2 {2}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {4 {3 {3 {4} {7}}}}) -> 5", "(count_nodes {9 {0 {8}}}) -> 3", "(count_nodes {9 {9} {9 {7 {3} {5}}}}) -> 6"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.230635}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {2 {4}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {7 {1 {5} {8 {5} {8}}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {8 {2}}) -> 2", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.423208}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {1} {1 {2 {7}}}}) -> 5", "(count_nodes {6 {9} {3}}) -> 3", "(count_nodes {9 {6} {3 {2}}}) -> 4", "(count_nodes {6}) -> 1", "(count_nodes {5 {1}}) -> 2", "(count_nodes {4 {4} {9 {3}}}) -> 4", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.469187}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {3 {7 {3} {2}} {4}}}) -> 6", "(count_nodes {0 {3 {4 {0}} {5}}}) -> 5", "(count_nodes {3 {2 {5 {5}} {4 {1}}}}) -> 6", "(count_nodes {6 {0}}) -> 2", "(count_nodes {2 {1 {1 {4} {0}} {1 {4}}} {6}}) -> 8", "(count_nodes {}) -> 0", "(count_nodes {9 {0} {0 {3}}}) -> 4", "(count_nodes {1 {1}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.955346}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3 {2} {2}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {3 {5} {1}}) -> 3", "(count_nodes {1 {7 {7}} {9}}) -> 4", "(count_nodes {7}) -> 1", "(count_nodes {7}) -> 1", "(count_nodes {8}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.399095}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {2 {9}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {0 {8}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {2 {4}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 1)) 1)) 0)) _) _)", "time": 3.048847}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {0 {7}}) -> 2", "(count_nodes {8 {8}}) -> 2", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {5 {0} {7}}) -> 3", "(count_nodes {0}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 5.008487}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {4 {1 {0} {6}} {3 {2} {9}}} {9 {4 {2}} {4}}}) -> 12", "(count_nodes {8 {9 {1}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6 {6 {8 {5}} {1}}}) -> 5", "(count_nodes {4}) -> 1", "(count_nodes {3 {2} {2}}) -> 3", "(count_nodes {6}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.434885}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {5} {6}}) -> 3", "(count_nodes {2}) -> 1", "(count_nodes {3 {7 {4}} {8}}) -> 4", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {0 {6} {7 {5}}}) -> 4", "(count_nodes {9}) -> 1", "(count_nodes {2}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.987967}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {9 {7}}) -> 2", "(count_nodes {6}) -> 1", "(count_nodes {9 {7} {2}}) -> 3", "(count_nodes {8}) -> 1", "(count_nodes {6 {5} {1}}) -> 3", "(count_nodes {8 {5 {8}} {2 {0}}}) -> 5", "(count_nodes {1 {6 {6 {8} {6}} {4 {2} {6}}}}) -> 8"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.494223}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8 {9 {8} {2}}}) -> 4", "(count_nodes {6 {5} {9}}) -> 3", "(count_nodes {8 {7 {0} {7}}}) -> 4", "(count_nodes {0 {0 {9}}}) -> 3", "(count_nodes {1}) -> 1", "(count_nodes {3 {9 {3 {4}} {5}}}) -> 5", "(count_nodes {6}) -> 1", "(count_nodes {2}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.690393}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {9 {2}} {4 {8}}}) -> 5", "(count_nodes {2 {2 {6 {2}}}}) -> 4", "(count_nodes {6 {1 {8}}}) -> 3", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {5 {7 {1}} {8 {5}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {7 {1}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.224649}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {6 {6 {3 {7} {7}}} {1}}) -> 6", "(count_nodes {7}) -> 1", "(count_nodes {3 {7 {7} {2}} {4 {4}}}) -> 6", "(count_nodes {1 {1}}) -> 2", "(count_nodes {3 {9 {5 {3} {7}} {6 {2} {6}}} {7 {1}}}) -> 10", "(count_nodes {9}) -> 1", "(count_nodes {3 {2 {0} {3}}}) -> 4"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.988077}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {1 {6} {0 {1} {1}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {0 {6 {9}}}) -> 3", "(count_nodes {8}) -> 1", "(count_nodes {8 {3 {1} {2}}}) -> 4", "(count_nodes {4}) -> 1", "(count_nodes {3}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.225738}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {6 {8 {9} {3}} {0 {4}}} {8 {0 {8}} {0}}}) -> 11", "(count_nodes {7 {7} {0 {7} {0 {4}}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {3 {6 {0 {3}}} {5 {4 {1} {7}}}}) -> 8", "(count_nodes {1 {9}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {9 {6} {6}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.659722}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {0 {6}} {8}}) -> 4", "(count_nodes {1 {6} {7}}) -> 3", "(count_nodes {8 {5}}) -> 2", "(count_nodes {5 {5 {0}} {6 {1}}}) -> 5", "(count_nodes {4 {5}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {6 {6}}) -> 2", "(count_nodes {5 {7} {2}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.951511}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {8}}) -> 2", "(count_nodes {1 {2}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {5 {5 {4 {2}}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {3 {4 {7}} {1 {2 {7} {2}}}}) -> 7", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.252528}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {4}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {8 {2}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {0 {1 {0 {0} {2}}} {8 {5} {2 {4} {5}}}}) -> 10", "(count_nodes {6 {3}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.93409}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3 {2 {2 {2}} {2}}}) -> 5", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {9 {8}}) -> 2", "(count_nodes {6 {6}}) -> 2", "(count_nodes {0 {2} {3 {5}}}) -> 4"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.160238}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {8 {1} {0 {7}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {1 {7 {5 {0}} {2 {6} {1}}}}) -> 7", "(count_nodes {0 {0 {4 {9}} {3}} {4 {9 {7} {8}}}}) -> 9", "(count_nodes {4 {3 {4 {9}}} {8}}) -> 5", "(count_nodes {6}) -> 1", "(count_nodes {9 {8 {2 {2} {9}}}}) -> 5"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.629293}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {7 {3 {6}}}) -> 3", "(count_nodes {3}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {1 {9 {0 {7}} {7 {5} {1}}}}) -> 7", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.139966}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {7 {2 {8}}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1 {4 {8 {3} {9}}} {3}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {6 {9} {4 {1} {1}}}) -> 5", "(count_nodes {0 {2} {8}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.750386}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {5}}) -> 2", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {9 {1 {6} {7}} {5 {6}}}) -> 6", "(count_nodes {0 {4} {3}}) -> 3", "(count_nodes {9 {2 {7} {2}} {7 {1} {9}}}) -> 7", "(count_nodes {}) -> 0", "(count_nodes {8}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.689987}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8 {5} {9 {6}}}) -> 4", "(count_nodes {6}) -> 1", "(count_nodes {0}) -> 1", "(count_nodes {1}) -> 1", "(count_nodes {1}) -> 1", "(count_nodes {9 {1} {9}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {9 {2}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.914422}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {7}) -> 1", "(count_nodes {2 {9}}) -> 2", "(count_nodes {7 {4} {7 {3 {9}} {6 {3} {2}}}}) -> 8", "(count_nodes {3 {7 {5 {7} {8}} {5 {6}}} {2}}) -> 8", "(count_nodes {2 {4 {2 {6} {0}}} {5 {5 {7} {1}}}}) -> 9", "(count_nodes {6 {0} {2}}) -> 3", "(count_nodes {5 {6} {8}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.5826}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {9} {8 {4} {3}}}) -> 5", "(count_nodes {9}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {5}) -> 1", "(count_nodes {0 {4}}) -> 2", "(count_nodes {0 {0}}) -> 2", "(count_nodes {2 {2}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.574066}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {9 {5 {4 {7}}}}) -> 4", "(count_nodes {2 {8 {4} {5}} {8}}) -> 5", "(count_nodes {5 {9 {0 {7}} {4 {6} {1}}}}) -> 7", "(count_nodes {3 {1 {2 {8}} {0 {0} {2}}} {4}}) -> 8", "(count_nodes {0}) -> 1", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.481329}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {5 {8}}) -> 2", "(count_nodes {2 {8}}) -> 2", "(count_nodes {7 {8}}) -> 2", "(count_nodes {4 {5} {9 {4}}}) -> 4", "(count_nodes {7 {1 {7}}}) -> 3", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.100357}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {5 {1}} {5 {4}}}) -> 5", "(count_nodes {9}) -> 1", "(count_nodes {5}) -> 1", "(count_nodes {3 {1} {7}}) -> 3", "(count_nodes {2 {8} {3}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {4 {9 {6}}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.85692}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {2} {5 {3}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {0 {5 {3 {4}}}}) -> 4", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.976965}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {6} {6}}) -> 3", "(count_nodes {0 {2}}) -> 2", "(count_nodes {4}) -> 1", "(count_nodes {3 {5}}) -> 2", "(count_nodes {6 {0}}) -> 2", "(count_nodes {5}) -> 1", "(count_nodes {0 {1} {1}}) -> 3", "(count_nodes {4 {5 {9} {4}} {3}}) -> 5"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.707526}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {1}) -> 1", "(count_nodes {7 {0 {8} {6}} {1 {8} {0}}}) -> 7", "(count_nodes {8 {1}}) -> 2", "(count_nodes {5 {5 {4 {1} {6}}} {8}}) -> 6", "(count_nodes {8}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 2.414854}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {1}) -> 1", "(count_nodes {2}) -> 1", "(count_nodes {6}) -> 1", "(count_nodes {5 {2 {2}}}) -> 3", "(count_nodes {1}) -> 1", "(count_nodes {7 {7 {0}}}) -> 3", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 e)) 1)) 0)) _) _)", "time": 2.826194}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3 {1 {9 {5}} {9 {0} {2}}} {4 {6} {8}}}) -> 10", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6 {3} {0 {3 {4} {8}}}}) -> 6", "(count_nodes {5 {0} {9 {1}}}) -> 4", "(count_nodes {2 {0 {6} {2}} {3 {2} {8}}}) -> 7", "(count_nodes {9 {1}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 2.933627}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {0 {0} {6}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {4 {0} {6}}) -> 3", "(count_nodes {8 {0}}) -> 2", "(count_nodes {2}) -> 1", "(count_nodes {6 {0}}) -> 2", "(count_nodes {8 {6}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 2.793886}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {8 {1} {0}} {6}}) -> 5", "(count_nodes {3 {3 {0} {6}}}) -> 4", "(count_nodes {5}) -> 1", "(count_nodes {5 {6} {1}}) -> 3", "(count_nodes {0 {7 {4}} {8 {1}}}) -> 5", "(count_nodes {8}) -> 1", "(count_nodes {9}) -> 1", "(count_nodes {7 {9 {0} {9 {8}}} {5 {6 {3}} {3}}}) -> 9"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 2.273983}
