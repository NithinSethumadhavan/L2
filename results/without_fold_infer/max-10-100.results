{"name": "max", "examples": ["(max [6 3]) -> 6", "(max [8 9 2 7]) -> 9", "(max [1 0 4]) -> 4", "(max [4 0 1 5]) -> 5", "(max [7 7 6 3 8]) -> 8", "(max [7 3 5]) -> 7", "(max [7]) -> 7", "(max [3 3]) -> 3", "(max [2 2 0 7]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.311266}
{"name": "max", "examples": ["(max [3 0 7 4]) -> 7", "(max [8 9 5]) -> 9", "(max [0 1 3]) -> 3", "(max [5 9 1 5 8]) -> 9", "(max [7 7 5 2 9]) -> 9", "(max [5 5 3]) -> 5", "(max [7 4]) -> 7", "(max [2 4 6]) -> 6", "(max [1]) -> 1"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.515163}
{"name": "max", "examples": ["(max [6 3]) -> 6", "(max [4]) -> 4", "(max [2 7]) -> 7", "(max [2 8 3]) -> 8", "(max [1 5 5 2]) -> 5", "(max [1 2 6]) -> 6", "(max [3 5 3 0]) -> 5", "(max [2 2 9 5]) -> 9", "(max [2 9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.573551}
{"name": "max", "examples": ["(max [7 3 5 2 7]) -> 7", "(max [0 7 4 2 3]) -> 7", "(max [1 9 0 7 6]) -> 9", "(max [1 8]) -> 8", "(max [7 0 9]) -> 9", "(max [7 1 4]) -> 7", "(max [3 5 8 4 0]) -> 8", "(max [5]) -> 5", "(max [5 0 2]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.726704}
{"name": "max", "examples": ["(max [8 9]) -> 9", "(max [8 1 4 1]) -> 8", "(max [2]) -> 2", "(max [9]) -> 9", "(max [8 8 3 3 0]) -> 8", "(max [0 1 3 1]) -> 3", "(max [5]) -> 5", "(max [1 9 9 2]) -> 9", "(max [3 4 7]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.601653}
{"name": "max", "examples": ["(max [7]) -> 7", "(max [7 0 8]) -> 8", "(max [4 9]) -> 9", "(max [2 7 2]) -> 7", "(max [8 7 6 8 0]) -> 8", "(max [3 8]) -> 8", "(max [0 3 8]) -> 8", "(max [8 5 1 3]) -> 8", "(max [4]) -> 4"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.707166}
{"name": "max", "examples": ["(max [4 8 8 6]) -> 8", "(max [0 2 1]) -> 2", "(max [9]) -> 9", "(max [5 5 0 1 3]) -> 5", "(max [4 8 9 8 2]) -> 9", "(max [3 6 3 4 1]) -> 6", "(max [3 8 1]) -> 8", "(max [2 0 1 6 9]) -> 9", "(max [6 5]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.743083}
{"name": "max", "examples": ["(max [2 9 7]) -> 9", "(max [8 6 6 8]) -> 8", "(max [9 3]) -> 9", "(max [3 9]) -> 9", "(max [2]) -> 2", "(max [2]) -> 2", "(max [0 8 4]) -> 8", "(max [3 7 9 7]) -> 9", "(max [0 5 8 2 5]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.918038}
{"name": "max", "examples": ["(max [0 6 6 6]) -> 6", "(max [3 2 9 4]) -> 9", "(max [0 5]) -> 5", "(max [7 4 7 6]) -> 7", "(max [0 4]) -> 4", "(max [0 3]) -> 3", "(max [0 1 4]) -> 4", "(max [3]) -> 3", "(max [2]) -> 2"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.13811}
{"name": "max", "examples": ["(max [1 7]) -> 7", "(max [4]) -> 4", "(max [1 7 2 0]) -> 7", "(max [2]) -> 2", "(max [3 6 8 5]) -> 8", "(max [8 4 9]) -> 9", "(max [6 8 5 7]) -> 8", "(max [2 7 9 1 0]) -> 9", "(max [1]) -> 1"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.218435}
{"name": "max", "examples": ["(max [8 4 2 8 5]) -> 8", "(max [1]) -> 1", "(max [6 8 0 6]) -> 8", "(max [1 8 9 1 3]) -> 9", "(max [7 8]) -> 8", "(max [3 8 6]) -> 8", "(max [8 0 5 2]) -> 8", "(max [1]) -> 1", "(max [6 9 1 4 3]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.31674}
{"name": "max", "examples": ["(max [7 9 3]) -> 9", "(max [3 0 6 4 1]) -> 6", "(max [4]) -> 4", "(max [0]) -> 0", "(max [7 3 5]) -> 7", "(max [9]) -> 9", "(max [5 8 5 1]) -> 8", "(max [7 5 0 6]) -> 7", "(max [2 2 1 6]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.568436}
{"name": "max", "examples": ["(max [9 8 9 8 3]) -> 9", "(max [2 3]) -> 3", "(max [5 9]) -> 9", "(max [9 4 7 6]) -> 9", "(max [5 3 3 6]) -> 6", "(max [1 2 1 3]) -> 3", "(max [2 3 3 3]) -> 3", "(max [8 2]) -> 8", "(max [8 4]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.70503}
{"name": "max", "examples": ["(max [2 4 5 6]) -> 6", "(max [0 6 2 4 4]) -> 6", "(max [7 8]) -> 8", "(max [7 2 9]) -> 9", "(max [8 0 1]) -> 8", "(max [0]) -> 0", "(max [9 3 3 2]) -> 9", "(max [7 9 7]) -> 9", "(max [4 4 2 3 6]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.735729}
{"name": "max", "examples": ["(max [7 9 6 8]) -> 9", "(max [3]) -> 3", "(max [9 1]) -> 9", "(max [8 5 6 9 7]) -> 9", "(max [4 6 3]) -> 6", "(max [3 3 0]) -> 3", "(max [3 5 3]) -> 5", "(max [2 4 1 8]) -> 8", "(max [5]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.758236}
{"name": "max", "examples": ["(max [7 9 4 2]) -> 9", "(max [8 9 9 7]) -> 9", "(max [5 2 5 8 0]) -> 8", "(max [6 1 5 7 8]) -> 8", "(max [3 8 5 9]) -> 9", "(max [9 5 7 0 7]) -> 9", "(max [9]) -> 9", "(max [6 9]) -> 9", "(max [2 7 3 7]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.942521}
{"name": "max", "examples": ["(max [2 7 6]) -> 7", "(max [1]) -> 1", "(max [8 7 1 4 5]) -> 8", "(max [5 6 6 0 2]) -> 6", "(max [0 0 7 0]) -> 7", "(max [4 5 4]) -> 5", "(max [6 8 0]) -> 8", "(max [2 6]) -> 6", "(max [3 1 0 9 3]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 7.413046}
{"name": "max", "examples": ["(max [8 8 7]) -> 8", "(max [7 8 5 6]) -> 8", "(max [9 6]) -> 9", "(max [8]) -> 8", "(max [7 4 3]) -> 7", "(max [9]) -> 9", "(max [1 2 4 8 4]) -> 8", "(max [5 1 6 0 2]) -> 6", "(max [6 8 5]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 6.923306}
{"name": "max", "examples": ["(max [3 0]) -> 3", "(max [4]) -> 4", "(max [0]) -> 0", "(max [9 5 4]) -> 9", "(max [3 6 7]) -> 7", "(max [5 7]) -> 7", "(max [5 5]) -> 5", "(max [3]) -> 3", "(max [5]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.175121}
{"name": "max", "examples": ["(max [9]) -> 9", "(max [4 5 4 6 3]) -> 6", "(max [8 4 3 0]) -> 8", "(max [9]) -> 9", "(max [9 4 0]) -> 9", "(max [2 5 6]) -> 6", "(max [8 9 2 7 6]) -> 9", "(max [7]) -> 7", "(max [5 4 0 8]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.766634}
{"name": "max", "examples": ["(max [0 4]) -> 4", "(max [5]) -> 5", "(max [5 2]) -> 5", "(max [3 0 0]) -> 3", "(max [2]) -> 2", "(max [4 8 0]) -> 8", "(max [3 5 3 9 7]) -> 9", "(max [4 6 2 5 7]) -> 7", "(max [0]) -> 0"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.388898}
{"name": "max", "examples": ["(max [3 2]) -> 3", "(max [5 3 9 4 8]) -> 9", "(max [2 8 2 6 5]) -> 8", "(max [2]) -> 2", "(max [6 6 4]) -> 6", "(max [1 1]) -> 1", "(max [0 4 8]) -> 8", "(max [9 6 7 3 7]) -> 9", "(max [4 4 3 8 4]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.643984}
{"name": "max", "examples": ["(max [4 5 0]) -> 5", "(max [6 4 0 2 0]) -> 6", "(max [0]) -> 0", "(max [1 8 6 7]) -> 8", "(max [2 6 1]) -> 6", "(max [1]) -> 1", "(max [7]) -> 7", "(max [8 3 2 1 4]) -> 8", "(max [7 6 6 4 3]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.885963}
{"name": "max", "examples": ["(max [6]) -> 6", "(max [0 2 2]) -> 2", "(max [8 2 8]) -> 8", "(max [0 3 6 2 7]) -> 7", "(max [1 7 4 5 5]) -> 7", "(max [8 4 6 1 8]) -> 8", "(max [9 4 9]) -> 9", "(max [9 8 1 0]) -> 9", "(max [0 1 7 8 3]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.970356}
{"name": "max", "examples": ["(max [7 4]) -> 7", "(max [7 7 0]) -> 7", "(max [6 8 5 3 4]) -> 8", "(max [5 6 1 0]) -> 6", "(max [9 7]) -> 9", "(max [4 9 5]) -> 9", "(max [6 8]) -> 8", "(max [2]) -> 2", "(max [4 2]) -> 4"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 11.398898}
{"name": "max", "examples": ["(max [3 8 8 3]) -> 8", "(max [9 6 7]) -> 9", "(max [4 4 5 7]) -> 7", "(max [4 9 8]) -> 9", "(max [5]) -> 5", "(max [9 2 1]) -> 9", "(max [8]) -> 8", "(max [3 7 1 2 2]) -> 7", "(max [2 4 5 3 3]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 11.113495}
{"name": "max", "examples": ["(max [9 5]) -> 9", "(max [6 1]) -> 6", "(max [5]) -> 5", "(max [8 2 6]) -> 8", "(max [7 3]) -> 7", "(max [3 0 6 8 4]) -> 8", "(max [1]) -> 1", "(max [4 0]) -> 4", "(max [8]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 11.187907}
{"name": "max", "examples": ["(max [0]) -> 0", "(max [9 4]) -> 9", "(max [1]) -> 1", "(max [6]) -> 6", "(max [0 5 5 8]) -> 8", "(max [5 8 7 5 8]) -> 8", "(max [3 5 7]) -> 7", "(max [1 6 5 3 0]) -> 6", "(max [7 4 0]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.733201}
{"name": "max", "examples": ["(max [5 0 9 2]) -> 9", "(max [0]) -> 0", "(max [2 8 5]) -> 8", "(max [8 7 9 9]) -> 9", "(max [9 5]) -> 9", "(max [1 1]) -> 1", "(max [9]) -> 9", "(max [9 1 9 4 6]) -> 9", "(max [3 9 3 1]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.417928}
{"name": "max", "examples": ["(max [6 4 1]) -> 6", "(max [9 2 3 6 6]) -> 9", "(max [4]) -> 4", "(max [4 4]) -> 4", "(max [3 2]) -> 3", "(max [7 6 7]) -> 7", "(max [7 7 4 5]) -> 7", "(max [4 9 8 6]) -> 9", "(max [2 8]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 11.176688}
{"name": "max", "examples": ["(max [7]) -> 7", "(max [9]) -> 9", "(max [0 3 6 6 5]) -> 6", "(max [2 0 2]) -> 2", "(max [1 6 7]) -> 7", "(max [2 4]) -> 4", "(max [9]) -> 9", "(max [7 1 2]) -> 7", "(max [3 3 2]) -> 3"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 11.264695}
{"name": "max", "examples": ["(max [3 5]) -> 5", "(max [4 4 4]) -> 4", "(max [9 5]) -> 9", "(max [9 0 7 5]) -> 9", "(max [4 4 4 0]) -> 4", "(max [7 8 5 9 7]) -> 9", "(max [8]) -> 8", "(max [2]) -> 2", "(max [0 0 4]) -> 4"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.904516}
{"name": "max", "examples": ["(max [8 5 8 4 9]) -> 9", "(max [1 3 0 8]) -> 8", "(max [1 1 9 4]) -> 9", "(max [7 9]) -> 9", "(max [0]) -> 0", "(max [3 9 8 2]) -> 9", "(max [8]) -> 8", "(max [5 8 8 6 3]) -> 8", "(max [9 9 5 1]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 7.326301}
{"name": "max", "examples": ["(max [6 4]) -> 6", "(max [0]) -> 0", "(max [8 7]) -> 8", "(max [1 1 9 4 7]) -> 9", "(max [0]) -> 0", "(max [2 4 7 2]) -> 7", "(max [2 3 0]) -> 3", "(max [4 1 5 3]) -> 5", "(max [4 7 4 3]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.341337}
{"name": "max", "examples": ["(max [0 9 3]) -> 9", "(max [4 9 6]) -> 9", "(max [5 2]) -> 5", "(max [8 2 2]) -> 8", "(max [2 2 2 3]) -> 3", "(max [2 3 4 7]) -> 7", "(max [4 8 7]) -> 8", "(max [8 2 9 7]) -> 9", "(max [7 0 0 7]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.386167}
{"name": "max", "examples": ["(max [3 4]) -> 4", "(max [7 0]) -> 7", "(max [9 3 2 7 9]) -> 9", "(max [0]) -> 0", "(max [0 3 6 8 2]) -> 8", "(max [7 2 4 6 0]) -> 7", "(max [2]) -> 2", "(max [3 0 7 7 3]) -> 7", "(max [6 7 4]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.453043}
{"name": "max", "examples": ["(max [4]) -> 4", "(max [1 4 8]) -> 8", "(max [3 6 7 5 2]) -> 7", "(max [3]) -> 3", "(max [8 8 4]) -> 8", "(max [7 2 1 2]) -> 7", "(max [5 4 9 8 1]) -> 9", "(max [9 2]) -> 9", "(max [8 3 0]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.241591}
{"name": "max", "examples": ["(max [2]) -> 2", "(max [8]) -> 8", "(max [5 4 8 4]) -> 8", "(max [9 6]) -> 9", "(max [0 5 8 3 9]) -> 9", "(max [5 3]) -> 5", "(max [8 6 5]) -> 8", "(max [5 8 6 5 7]) -> 8", "(max [5 4 5 5]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.12599}
{"name": "max", "examples": ["(max [7]) -> 7", "(max [3 2]) -> 3", "(max [3 0 3]) -> 3", "(max [1 2 8]) -> 8", "(max [8 1 5 9]) -> 9", "(max [8 5]) -> 8", "(max [6 1]) -> 6", "(max [8 8]) -> 8", "(max [9 1 8 7]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.500149}
{"name": "max", "examples": ["(max [9 4 5 1 2]) -> 9", "(max [0 1 3]) -> 3", "(max [6 4 8 6 8]) -> 8", "(max [8 1 8 6 5]) -> 8", "(max [9 2]) -> 9", "(max [0 2 1 9 1]) -> 9", "(max [8 7 4]) -> 8", "(max [9 9 5 7 3]) -> 9", "(max [0 0 0]) -> 0"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.536151}
{"name": "max", "examples": ["(max [8 3 5 8]) -> 8", "(max [2 7]) -> 7", "(max [2]) -> 2", "(max [1 4]) -> 4", "(max [9 8]) -> 9", "(max [7 5 0 7]) -> 7", "(max [1 0 2 4 1]) -> 4", "(max [8 1]) -> 8", "(max [9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.013655}
{"name": "max", "examples": ["(max [4 5]) -> 5", "(max [5 1 1 6]) -> 6", "(max [2 3 5 7 5]) -> 7", "(max [0 1]) -> 1", "(max [1 6 1 4]) -> 6", "(max [2 7 1]) -> 7", "(max [4 8 8 5]) -> 8", "(max [4 7]) -> 7", "(max [6 8]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.004809}
{"name": "max", "examples": ["(max [9 5]) -> 9", "(max [5 0]) -> 5", "(max [7]) -> 7", "(max [6 1 6 4]) -> 6", "(max [5 9 1 2 7]) -> 9", "(max [9 5 0]) -> 9", "(max [7 3 3 4]) -> 7", "(max [4]) -> 4", "(max [7 4]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.58245}
{"name": "max", "examples": ["(max [6 7]) -> 7", "(max [8]) -> 8", "(max [9 5]) -> 9", "(max [6 2 9]) -> 9", "(max [7 5 7]) -> 7", "(max [8 3 8 2 5]) -> 8", "(max [2 2]) -> 2", "(max [4]) -> 4", "(max [9 8 3]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.344906}
{"name": "max", "examples": ["(max [4 4]) -> 4", "(max [7 0 7 9]) -> 9", "(max [8 0]) -> 8", "(max [7 7]) -> 7", "(max [6 7 7 3]) -> 7", "(max [6]) -> 6", "(max [9 9]) -> 9", "(max [2 4 6 8 5]) -> 8", "(max [4 5]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.760808}
{"name": "max", "examples": ["(max [7 2 3 0]) -> 7", "(max [4 7]) -> 7", "(max [6]) -> 6", "(max [5 7 3 7]) -> 7", "(max [2]) -> 2", "(max [2 9 5 0 6]) -> 9", "(max [5]) -> 5", "(max [5 1 0 5]) -> 5", "(max [6 8 7 5]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.128143}
{"name": "max", "examples": ["(max [8 5 6 3 6]) -> 8", "(max [4]) -> 4", "(max [4 8]) -> 8", "(max [8 4 9 6 7]) -> 9", "(max [4 2]) -> 4", "(max [4 9 4]) -> 9", "(max [9 7 6 1 3]) -> 9", "(max [2 9 1 1 4]) -> 9", "(max [3 6 8 9 7]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.317107}
{"name": "max", "examples": ["(max [6 6 8 2]) -> 8", "(max [9 2]) -> 9", "(max [1 9 3 6 4]) -> 9", "(max [6 0 9 1 3]) -> 9", "(max [4 7 9 9 0]) -> 9", "(max [0]) -> 0", "(max [6 3 9]) -> 9", "(max [6]) -> 6", "(max [5]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.370632}
{"name": "max", "examples": ["(max [9 2 1 2]) -> 9", "(max [7]) -> 7", "(max [2 0 8 9]) -> 9", "(max [4 1 1 1 0]) -> 4", "(max [3]) -> 3", "(max [8 7]) -> 8", "(max [8 5 7 0]) -> 8", "(max [5]) -> 5", "(max [0]) -> 0"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.63729}
{"name": "max", "examples": ["(max [2 1]) -> 2", "(max [6 4]) -> 6", "(max [0 5]) -> 5", "(max [9 6 1]) -> 9", "(max [6 6 4 2]) -> 6", "(max [0 0 5]) -> 5", "(max [7 4 0]) -> 7", "(max [3 4 6 5 5]) -> 6", "(max [7]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.205291}
{"name": "max", "examples": ["(max [5]) -> 5", "(max [0 1]) -> 1", "(max [2 1 7 7 7]) -> 7", "(max [3 1 6 7]) -> 7", "(max [8]) -> 8", "(max [2 6 5]) -> 6", "(max [4 6 7 1]) -> 7", "(max [7 6 7]) -> 7", "(max [6 7 2 9 9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.466401}
{"name": "max", "examples": ["(max [7 8]) -> 8", "(max [5]) -> 5", "(max [4 5 1 6 1]) -> 6", "(max [4 3 7]) -> 7", "(max [4 9 0 0]) -> 9", "(max [5 9]) -> 9", "(max [8 6 6 7 7]) -> 8", "(max [5]) -> 5", "(max [3 6 6 2 2]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.044917}
{"name": "max", "examples": ["(max [2 8]) -> 8", "(max [1 2]) -> 2", "(max [8 0 2 0]) -> 8", "(max [7 7 6]) -> 7", "(max [0 6 4 3]) -> 6", "(max [1 6 3 5 7]) -> 7", "(max [4 6 8 0]) -> 8", "(max [0 7 9]) -> 9", "(max [6 6 1 9 8]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.603158}
{"name": "max", "examples": ["(max [8 0]) -> 8", "(max [1 1 6 5 8]) -> 8", "(max [0 8 6 6]) -> 8", "(max [2]) -> 2", "(max [8 1 1]) -> 8", "(max [9 0 0 8]) -> 9", "(max [0 7]) -> 7", "(max [9 5 7]) -> 9", "(max [9 3 4 2 5]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.226518}
{"name": "max", "examples": ["(max [1 9 7]) -> 9", "(max [6 5 9 3]) -> 9", "(max [0 8 4 4 3]) -> 8", "(max [2]) -> 2", "(max [0 2 4]) -> 4", "(max [9]) -> 9", "(max [7 5]) -> 7", "(max [3 2 3 8]) -> 8", "(max [0 2 7]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.533635}
{"name": "max", "examples": ["(max [7 2 3]) -> 7", "(max [5 5 9 6 7]) -> 9", "(max [1 8 2 1]) -> 8", "(max [7 5]) -> 7", "(max [1]) -> 1", "(max [9 3]) -> 9", "(max [0 7 4 4 5]) -> 7", "(max [2 0 9 7 6]) -> 9", "(max [0 2 5 4]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.434123}
{"name": "max", "examples": ["(max [6 0]) -> 6", "(max [5 9 5]) -> 9", "(max [9 8 7]) -> 9", "(max [1]) -> 1", "(max [5 9 4 1 1]) -> 9", "(max [8]) -> 8", "(max [9 4 4]) -> 9", "(max [5 5 1 4 3]) -> 5", "(max [9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.411537}
{"name": "max", "examples": ["(max [9]) -> 9", "(max [9 1]) -> 9", "(max [5 8]) -> 8", "(max [9 1]) -> 9", "(max [9]) -> 9", "(max [3 1]) -> 3", "(max [6 8 4]) -> 8", "(max [8]) -> 8", "(max [9 5 2 6 2]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.717236}
{"name": "max", "examples": ["(max [4]) -> 4", "(max [5 8 8]) -> 8", "(max [6 5 0 6]) -> 6", "(max [4 1 2 3 2]) -> 4", "(max [6 4 0 5]) -> 6", "(max [0 9 8]) -> 9", "(max [3 6 6 1]) -> 6", "(max [0]) -> 0", "(max [5 0]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.39807}
{"name": "max", "examples": ["(max [9]) -> 9", "(max [7 2 6 1 2]) -> 7", "(max [0 7]) -> 7", "(max [6 7 5 6]) -> 7", "(max [4 3 4]) -> 4", "(max [9 3 7 0]) -> 9", "(max [0 6]) -> 6", "(max [8 5 6 3]) -> 8", "(max [3 9 5 3 8]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.698803}
{"name": "max", "examples": ["(max [2 8]) -> 8", "(max [7 3 2]) -> 7", "(max [5 7 3]) -> 7", "(max [4 1]) -> 4", "(max [7 1 7]) -> 7", "(max [8 0 0]) -> 8", "(max [8 4 7 9 8]) -> 9", "(max [1]) -> 1", "(max [1 8 9 4 2]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.689797}
{"name": "max", "examples": ["(max [7 2 5]) -> 7", "(max [6 9]) -> 9", "(max [6 7 1]) -> 7", "(max [3 8 2 6 3]) -> 8", "(max [1]) -> 1", "(max [9 3]) -> 9", "(max [9 8 9 7]) -> 9", "(max [0 6 2]) -> 6", "(max [2 6 3 1]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.764194}
{"name": "max", "examples": ["(max [4 9 5]) -> 9", "(max [9 7 1]) -> 9", "(max [2 9 4]) -> 9", "(max [5 9 7 6 1]) -> 9", "(max [2]) -> 2", "(max [0]) -> 0", "(max [2 3]) -> 3", "(max [3 1]) -> 3", "(max [7 1 2 6 8]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.525581}
{"name": "max", "examples": ["(max [0]) -> 0", "(max [1 0 3 6 7]) -> 7", "(max [6 2]) -> 6", "(max [6 3 4 3 8]) -> 8", "(max [9 7 9 0]) -> 9", "(max [1 7]) -> 7", "(max [1]) -> 1", "(max [2 0]) -> 2", "(max [6 8]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.862336}
{"name": "max", "examples": ["(max [5 2 2 8 8]) -> 8", "(max [0 6 5 6]) -> 6", "(max [3]) -> 3", "(max [3 3]) -> 3", "(max [0 6]) -> 6", "(max [5 2 7 5]) -> 7", "(max [8 9 5 5]) -> 9", "(max [6 6 6]) -> 6", "(max [7 1 5]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.114767}
{"name": "max", "examples": ["(max [4 0 8 4]) -> 8", "(max [2 3 8]) -> 8", "(max [2 7 2 6 9]) -> 9", "(max [2 6]) -> 6", "(max [4]) -> 4", "(max [2 2]) -> 2", "(max [5 5 1 3]) -> 5", "(max [2 1 5 6]) -> 6", "(max [4 1 3 5]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.307177}
{"name": "max", "examples": ["(max [1 0]) -> 1", "(max [3]) -> 3", "(max [9 7 8 0]) -> 9", "(max [4 7 3]) -> 7", "(max [6]) -> 6", "(max [4 0 8 0 6]) -> 8", "(max [8 2 5 9 9]) -> 9", "(max [0 8]) -> 8", "(max [5 5]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.520254}
{"name": "max", "examples": ["(max [4 1 2]) -> 4", "(max [9]) -> 9", "(max [5]) -> 5", "(max [6]) -> 6", "(max [4 7 9 7]) -> 9", "(max [9 5 3 4 8]) -> 9", "(max [2 7 3]) -> 7", "(max [7]) -> 7", "(max [9 1 1 8]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 7.936198}
{"name": "max", "examples": ["(max [3 7]) -> 7", "(max [8 8 3]) -> 8", "(max [9]) -> 9", "(max [9 9]) -> 9", "(max [3]) -> 3", "(max [1 5 2 3 6]) -> 6", "(max [2 5]) -> 5", "(max [2 1 7 0 6]) -> 7", "(max [9 1 9 3 9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.476218}
{"name": "max", "examples": ["(max [1 9 4 7 8]) -> 9", "(max [6 9 0 1]) -> 9", "(max [9 4]) -> 9", "(max [0 6 1 6 5]) -> 6", "(max [5 7 4 0]) -> 7", "(max [3]) -> 3", "(max [4 1 9 3 9]) -> 9", "(max [7 6]) -> 7", "(max [8 4 1]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.819523}
{"name": "max", "examples": ["(max [0 3]) -> 3", "(max [5 3 8 2]) -> 8", "(max [7 2]) -> 7", "(max [2 1 1]) -> 2", "(max [2 9 4 4]) -> 9", "(max [7 9 5]) -> 9", "(max [0 9 6 0 3]) -> 9", "(max [3]) -> 3", "(max [0 8]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.196265}
{"name": "max", "examples": ["(max [2]) -> 2", "(max [9 9 1 6]) -> 9", "(max [3 9]) -> 9", "(max [5]) -> 5", "(max [0 4]) -> 4", "(max [1 5 7]) -> 7", "(max [4]) -> 4", "(max [3 1]) -> 3", "(max [0 3 1]) -> 3"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.861501}
{"name": "max", "examples": ["(max [7 8 6]) -> 8", "(max [2 9 3 1 6]) -> 9", "(max [1 8 3]) -> 8", "(max [7 3 1 0 1]) -> 7", "(max [3 9 7 4 4]) -> 9", "(max [3 6 4]) -> 6", "(max [5 5 9]) -> 9", "(max [6 6]) -> 6", "(max [1 6 6 9 1]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.882351}
{"name": "max", "examples": ["(max [5]) -> 5", "(max [8 5 9 4]) -> 9", "(max [0 3 0 1]) -> 3", "(max [9 9 6]) -> 9", "(max [8]) -> 8", "(max [8]) -> 8", "(max [7 8 2 9]) -> 9", "(max [8 4]) -> 8", "(max [7 4 7 3]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.616765}
{"name": "max", "examples": ["(max [3 6 7 1]) -> 7", "(max [9 5 6 5]) -> 9", "(max [3 2 7 3]) -> 7", "(max [9 5 9 1]) -> 9", "(max [5 2 8 8 3]) -> 8", "(max [3 7 7 2]) -> 7", "(max [3 9 3 2 7]) -> 9", "(max [2 0]) -> 2", "(max [6 9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.110238}
{"name": "max", "examples": ["(max [5 4 8 3]) -> 8", "(max [7 9 8]) -> 9", "(max [7 8 3 6 9]) -> 9", "(max [4 4]) -> 4", "(max [3]) -> 3", "(max [9 0]) -> 9", "(max [8 7 2]) -> 8", "(max [2 7 9]) -> 9", "(max [6]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.289445}
{"name": "max", "examples": ["(max [5]) -> 5", "(max [9 8 7]) -> 9", "(max [2]) -> 2", "(max [7 3 1]) -> 7", "(max [9 3 9]) -> 9", "(max [0 4]) -> 4", "(max [6 2 5 1]) -> 6", "(max [8 4 0 1 0]) -> 8", "(max [3]) -> 3"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 0 d) c d)) 0)) _) _)", "time": 9.584985}
{"name": "max", "examples": ["(max [6 5 5 5 9]) -> 9", "(max [9]) -> 9", "(max [7 7 4 6]) -> 7", "(max [3 4]) -> 4", "(max [6 5 2 2 3]) -> 6", "(max [2 1]) -> 2", "(max [6]) -> 6", "(max [0 1 8 9]) -> 9", "(max [6 2 3 1]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.370325}
{"name": "max", "examples": ["(max [7 6 0 8 2]) -> 8", "(max [5 0 5 8 9]) -> 9", "(max [5 1 2]) -> 5", "(max [4 7 8 4]) -> 8", "(max [0]) -> 0", "(max [9 0]) -> 9", "(max [3 2 8]) -> 8", "(max [6 0 6 9 8]) -> 9", "(max [0 3 9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.658763}
{"name": "max", "examples": ["(max [9 9 4 5]) -> 9", "(max [8]) -> 8", "(max [6 3 6]) -> 6", "(max [1 1 6]) -> 6", "(max [9 7 7 5]) -> 9", "(max [7 9 8 5]) -> 9", "(max [0 8]) -> 8", "(max [4 8 4 5]) -> 8", "(max [4 6]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.352768}
{"name": "max", "examples": ["(max [1]) -> 1", "(max [9 4 2 5]) -> 9", "(max [5 5 2]) -> 5", "(max [9 5 8 4]) -> 9", "(max [6 9 6 2]) -> 9", "(max [7 9]) -> 9", "(max [4 1 9 5 0]) -> 9", "(max [4]) -> 4", "(max [9 9 8 6 5]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.78523}
{"name": "max", "examples": ["(max [5 9 1]) -> 9", "(max [2 3 1 9]) -> 9", "(max [0 0 0]) -> 0", "(max [8]) -> 8", "(max [5 7 5 4]) -> 7", "(max [5]) -> 5", "(max [4 9 9 5 4]) -> 9", "(max [6 2]) -> 6", "(max [7 9 2 9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.374238}
{"name": "max", "examples": ["(max [0 3 9 7 6]) -> 9", "(max [5 2 9 7]) -> 9", "(max [5 6 1]) -> 6", "(max [9 8 7]) -> 9", "(max [5 5 8 9]) -> 9", "(max [9 4]) -> 9", "(max [1 3 5 6 4]) -> 6", "(max [6 5 0]) -> 6", "(max [4]) -> 4"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.64172}
{"name": "max", "examples": ["(max [6 7]) -> 7", "(max [7]) -> 7", "(max [2 6 1 2 1]) -> 6", "(max [2 4 6]) -> 6", "(max [2]) -> 2", "(max [0]) -> 0", "(max [3 6 7 4 6]) -> 7", "(max [2 1 0 3 0]) -> 3", "(max [8 8 5 4]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.934937}
{"name": "max", "examples": ["(max [8 1]) -> 8", "(max [4 8 6]) -> 8", "(max [0 5 0 3]) -> 5", "(max [8 5]) -> 8", "(max [5]) -> 5", "(max [2 3 9 4 2]) -> 9", "(max [4 9 2]) -> 9", "(max [6 0]) -> 6", "(max [0]) -> 0"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 7.680352}
{"name": "max", "examples": ["(max [5 4]) -> 5", "(max [3 0 2]) -> 3", "(max [4 1 7]) -> 7", "(max [3 7]) -> 7", "(max [2 8 5 0 3]) -> 8", "(max [6 8 9]) -> 9", "(max [1 3]) -> 3", "(max [0 0 7 5]) -> 7", "(max [3]) -> 3"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.671064}
{"name": "max", "examples": ["(max [5 7 3 1]) -> 7", "(max [4 9]) -> 9", "(max [2 1]) -> 2", "(max [8 5 4]) -> 8", "(max [0]) -> 0", "(max [9 0]) -> 9", "(max [3 6]) -> 6", "(max [3 9 6 6 2]) -> 9", "(max [4 3 5 1]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.197126}
{"name": "max", "examples": ["(max [6 5 9 2]) -> 9", "(max [8 5 6 1]) -> 8", "(max [5 2 5 6 3]) -> 6", "(max [8]) -> 8", "(max [4 3]) -> 4", "(max [0 8]) -> 8", "(max [7 3 7 1 9]) -> 9", "(max [6 9]) -> 9", "(max [2 1 1 6]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.426242}
{"name": "max", "examples": ["(max [9 1 0 3 7]) -> 9", "(max [7 4 2 3]) -> 7", "(max [8 4]) -> 8", "(max [9 6 5 4 7]) -> 9", "(max [4 9]) -> 9", "(max [8 5 5 8 3]) -> 8", "(max [5 0]) -> 5", "(max [2 9]) -> 9", "(max [1]) -> 1"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.49863}
{"name": "max", "examples": ["(max [3 5 4 2]) -> 5", "(max [6]) -> 6", "(max [1 4]) -> 4", "(max [4 6 3 5 2]) -> 6", "(max [7 0 8 4]) -> 8", "(max [3 8]) -> 8", "(max [2 7 6 1 4]) -> 7", "(max [8 3 7 0 9]) -> 9", "(max [9 0 4 8 3]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 7.199468}
{"name": "max", "examples": ["(max [7 4 5 1 7]) -> 7", "(max [2 9 9]) -> 9", "(max [3 8]) -> 8", "(max [6 8 7]) -> 8", "(max [8 3 9 4]) -> 9", "(max [1 8 6]) -> 8", "(max [9 3 8 2 2]) -> 9", "(max [9 0 3 5]) -> 9", "(max [9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.660449}
{"name": "max", "examples": ["(max [5 6 0]) -> 6", "(max [6 0]) -> 6", "(max [2 2]) -> 2", "(max [8]) -> 8", "(max [9]) -> 9", "(max [7 8 5]) -> 8", "(max [8 0 2 1]) -> 8", "(max [7 0 0 2]) -> 7", "(max [8 5 6]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.862379}
{"name": "max", "examples": ["(max [1 3 2 8 2]) -> 8", "(max [1]) -> 1", "(max [8 1 6 3 1]) -> 8", "(max [4]) -> 4", "(max [7 8 3 8 9]) -> 9", "(max [1 3 4]) -> 4", "(max [0 8 1 6 7]) -> 8", "(max [5]) -> 5", "(max [3 0 4 9 4]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.749457}
{"name": "max", "examples": ["(max [2 9]) -> 9", "(max [2]) -> 2", "(max [1]) -> 1", "(max [2]) -> 2", "(max [8]) -> 8", "(max [8]) -> 8", "(max [7]) -> 7", "(max [6 1]) -> 6", "(max [6 4]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.626877}
{"name": "max", "examples": ["(max [0 7 3]) -> 7", "(max [9 1 3 6 6]) -> 9", "(max [7 9 4 0 9]) -> 9", "(max [7 5]) -> 7", "(max [4 9]) -> 9", "(max [3]) -> 3", "(max [4]) -> 4", "(max [6 5 1 3]) -> 6", "(max [2]) -> 2"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.182702}
{"name": "max", "examples": ["(max [0 4 3 7]) -> 7", "(max [2 5]) -> 5", "(max [5 9 1 4]) -> 9", "(max [9 1 9 6]) -> 9", "(max [7 6]) -> 7", "(max [0 7]) -> 7", "(max [9 0 2 5]) -> 9", "(max [4 3 3 0]) -> 4", "(max [8 3 7]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 6.05551}
{"name": "max", "examples": ["(max [0 0 6 7 5]) -> 7", "(max [8 9 2]) -> 9", "(max [9 3 8 5 1]) -> 9", "(max [4]) -> 4", "(max [7]) -> 7", "(max [3 7]) -> 7", "(max [7 8 1 6 4]) -> 8", "(max [4 1 8]) -> 8", "(max [2 7 9 0]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.008378}
{"name": "max", "examples": ["(max [1 4 5]) -> 5", "(max [0 9 7]) -> 9", "(max [2]) -> 2", "(max [2 8 3 5 6]) -> 8", "(max [1 9 9]) -> 9", "(max [9]) -> 9", "(max [0 2 2]) -> 2", "(max [4 5 4]) -> 5", "(max [5]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 5.51029}
{"name": "max", "examples": ["(max [5 5 5 8 3]) -> 8", "(max [2 4]) -> 4", "(max [6]) -> 6", "(max [2 7]) -> 7", "(max [8 7 3]) -> 8", "(max [8 7 8 7]) -> 8", "(max [2 3 8]) -> 8", "(max [7 0]) -> 7", "(max [9 0]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 5.003644}
{"name": "max", "examples": ["(max [1]) -> 1", "(max [6 9 4 9]) -> 9", "(max [8 5]) -> 8", "(max [8]) -> 8", "(max [9 7 5 8]) -> 9", "(max [3 6 0]) -> 6", "(max [3 3]) -> 3", "(max [9 8]) -> 9", "(max [7]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 3.52617}
