{"time": 0.251253, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {0 {8} {7}}) -> [0 8 7]", "(flatten {4 {0 {0 {2} {9}} {6 {5}}} {5 {6}}}) -> [4 0 0 2 9 6 5 5 6]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.237365, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {4 {5 {1}} {7 {4}}}) -> [4 5 1 7 4]", "(flatten {}) -> []", "(flatten {4}) -> [4]", "(flatten {1}) -> [1]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.235277, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {3 {0}}) -> [3 0]", "(flatten {7 {8} {2 {2 {3}} {2 {9} {1}}}}) -> [7 8 2 2 3 2 9 1]", "(flatten {9 {3} {2 {2} {2}}}) -> [9 3 2 2 2]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.17395, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {2 {9} {5}}) -> [2 9 5]", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {2 {4} {0 {2} {3}}}) -> [2 4 0 2 3]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.219215, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {6 {8 {5}} {1 {2 {7}} {5 {9}}}}) -> [6 8 5 1 2 7 5 9]", "(flatten {4 {5} {6 {4 {0}}}}) -> [4 5 6 4 0]", "(flatten {0 {5 {6} {9}} {2 {4} {2}}}) -> [0 5 6 9 2 4 2]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.211249, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {7 {4}}) -> [7 4]", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {4 {7} {8 {9}}}) -> [4 7 8 9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.220376, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {2}) -> [2]", "(flatten {}) -> []", "(flatten {5}) -> [5]", "(flatten {6 {4 {7 {3}} {2 {6} {2}}}}) -> [6 4 7 3 2 6 2]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.212739, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {7 {5}}) -> [7 5]", "(flatten {6 {4} {3}}) -> [6 4 3]", "(flatten {4}) -> [4]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.206877, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {7 {9 {5} {9}}}) -> [7 9 5 9]", "(flatten {1}) -> [1]", "(flatten {5}) -> [5]", "(flatten {9}) -> [9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.196618, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {1 {4 {8}}}) -> [1 4 8]", "(flatten {9 {0} {0}}) -> [9 0 0]", "(flatten {3}) -> [3]", "(flatten {5 {4} {2}}) -> [5 4 2]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.220641, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {4 {9} {1}}) -> [4 9 1]", "(flatten {9}) -> [9]", "(flatten {8}) -> [8]", "(flatten {4 {7 {7}}}) -> [4 7 7]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.175853, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {7 {4}}) -> [7 4]", "(flatten {5 {2 {7 {0}}}}) -> [5 2 7 0]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.247939, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {0 {6 {1} {7 {7}}} {9}}) -> [0 6 1 7 7 9]", "(flatten {}) -> []", "(flatten {2 {5} {6}}) -> [2 5 6]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.208421, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {9 {4}}) -> [9 4]", "(flatten {7 {8 {7}} {2 {4}}}) -> [7 8 7 2 4]", "(flatten {3 {4}}) -> [3 4]", "(flatten {1}) -> [1]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.223841, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {3 {4} {0}}) -> [3 4 0]", "(flatten {3 {5}}) -> [3 5]", "(flatten {}) -> []", "(flatten {6}) -> [6]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.196829, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {5 {3 {2}}}) -> [5 3 2]", "(flatten {9 {3 {1}}}) -> [9 3 1]", "(flatten {5 {0 {7 {0}} {1 {2}}}}) -> [5 0 7 0 1 2]", "(flatten {6 {9}}) -> [6 9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.175216, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {5 {3} {5}}) -> [5 3 5]", "(flatten {7 {9} {5}}) -> [7 9 5]", "(flatten {4 {0 {9} {5}} {6}}) -> [4 0 9 5 6]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.226217, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {1 {3 {3} {2 {7}}} {3 {9 {2} {8}} {2}}}) -> [1 3 3 2 7 3 9 2 8 2]", "(flatten {}) -> []", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.219402, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {7}) -> [7]", "(flatten {4 {6} {1}}) -> [4 6 1]", "(flatten {}) -> []", "(flatten {2 {8 {8} {5}} {8}}) -> [2 8 8 5 8]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.201182, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {0 {8 {3} {2}}}) -> [0 8 3 2]", "(flatten {1}) -> [1]", "(flatten {}) -> []", "(flatten {4}) -> [4]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.185933, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {5 {9} {8 {6} {0}}}) -> [5 9 8 6 0]", "(flatten {1}) -> [1]", "(flatten {3 {4}}) -> [3 4]", "(flatten {4 {2 {5}}}) -> [4 2 5]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.214867, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {6 {5} {0}}) -> [6 5 0]", "(flatten {6 {3 {7 {1} {9}}} {7 {7 {2}} {2}}}) -> [6 3 7 1 9 7 7 2 2]", "(flatten {}) -> []", "(flatten {3 {7 {5}}}) -> [3 7 5]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.203799, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {1 {5} {0 {1 {6} {4}}}}) -> [1 5 0 1 6 4]", "(flatten {}) -> []", "(flatten {5 {1 {9}}}) -> [5 1 9]", "(flatten {4 {5} {1}}) -> [4 5 1]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.207722, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {6 {0} {9}}) -> [6 0 9]", "(flatten {3}) -> [3]", "(flatten {7 {6 {5}}}) -> [7 6 5]", "(flatten {1}) -> [1]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.212674, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {0 {1 {0} {0}}}) -> [0 1 0 0]", "(flatten {}) -> []", "(flatten {5 {5 {4} {1}} {8 {2}}}) -> [5 5 4 1 8 2]", "(flatten {4}) -> [4]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.239882, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {1}) -> [1]", "(flatten {0 {1 {1 {9} {4}}} {4 {2 {2}}}}) -> [0 1 1 9 4 4 2 2]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.240098, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {0}) -> [0]", "(flatten {9 {2} {5 {4}}}) -> [9 2 5 4]", "(flatten {0}) -> [0]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.221359, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {6}) -> [6]", "(flatten {6 {9}}) -> [6 9]", "(flatten {0 {0} {8}}) -> [0 0 8]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.21786, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {1 {0 {9 {3}}} {3 {5} {7 {1}}}}) -> [1 0 9 3 3 5 7 1]", "(flatten {1 {5}}) -> [1 5]", "(flatten {6 {0 {6} {8}} {8 {5}}}) -> [6 0 6 8 8 5]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.190577, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {2}) -> [2]", "(flatten {8 {2}}) -> [8 2]", "(flatten {7 {6 {3} {9}} {1 {8} {2}}}) -> [7 6 3 9 1 8 2]", "(flatten {0 {2}}) -> [0 2]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.234641, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {7 {2 {6} {5}}}) -> [7 2 6 5]", "(flatten {8 {2}}) -> [8 2]", "(flatten {6}) -> [6]", "(flatten {3 {0 {2}} {8}}) -> [3 0 2 8]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.234376, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {6 {1 {9} {7}}}) -> [6 1 9 7]", "(flatten {1 {5} {7 {8}}}) -> [1 5 7 8]", "(flatten {4 {0} {6 {0 {4}}}}) -> [4 0 6 0 4]", "(flatten {5 {8} {5}}) -> [5 8 5]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.160398, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {2 {8} {6}}) -> [2 8 6]", "(flatten {2 {0 {8 {3} {7}} {5 {0}}} {6}}) -> [2 0 8 3 7 5 0 6]", "(flatten {}) -> []", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.144108, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {9}) -> [9]", "(flatten {6}) -> [6]", "(flatten {4 {6 {5}} {0}}) -> [4 6 5 0]", "(flatten {9 {6}}) -> [9 6]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.162329, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {7 {4 {0}}}) -> [7 4 0]", "(flatten {2}) -> [2]", "(flatten {6}) -> [6]", "(flatten {4 {2}}) -> [4 2]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.188807, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {5 {3}}) -> [5 3]", "(flatten {0}) -> [0]", "(flatten {4 {0} {6}}) -> [4 0 6]", "(flatten {1 {1} {8}}) -> [1 1 8]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.168462, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {9 {6 {5} {9}}}) -> [9 6 5 9]", "(flatten {4 {4 {7} {7}} {7 {5} {7}}}) -> [4 4 7 7 7 5 7]", "(flatten {6}) -> [6]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.218344, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {8 {4}}) -> [8 4]", "(flatten {}) -> []", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.200994, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {8 {1} {5}}) -> [8 1 5]", "(flatten {1 {6} {4}}) -> [1 6 4]", "(flatten {7 {6} {0}}) -> [7 6 0]", "(flatten {3}) -> [3]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.230168, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {7 {4 {7} {4 {8} {6}}} {2 {6 {1}}}}) -> [7 4 7 4 8 6 2 6 1]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.221447, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {9 {1}}) -> [9 1]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.193529, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {8 {4} {0 {1}}}) -> [8 4 0 1]", "(flatten {3 {7}}) -> [3 7]", "(flatten {}) -> []", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.208044, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {6 {3 {6 {7}}} {1 {6 {4} {2}} {1 {5} {2}}}}) -> [6 3 6 7 1 6 4 2 1 5 2]", "(flatten {9 {8 {2 {5}}}}) -> [9 8 2 5]", "(flatten {9 {6 {0} {4}}}) -> [9 6 0 4]", "(flatten {3 {5 {3} {9}}}) -> [3 5 3 9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.197628, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {2 {9 {1 {4} {1}} {9 {9}}} {8}}) -> [2 9 1 4 1 9 9 8]", "(flatten {7 {5}}) -> [7 5]", "(flatten {}) -> []", "(flatten {5 {6 {9}} {7}}) -> [5 6 9 7]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.220122, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {8 {6 {8 {1} {5}}} {0}}) -> [8 6 8 1 5 0]", "(flatten {2 {8}}) -> [2 8]", "(flatten {}) -> []", "(flatten {6 {2 {3}} {5 {6}}}) -> [6 2 3 5 6]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.198876, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {7}) -> [7]", "(flatten {5 {9}}) -> [5 9]", "(flatten {6 {8} {8}}) -> [6 8 8]", "(flatten {0 {1 {1 {4}} {3 {9}}}}) -> [0 1 1 4 3 9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.232003, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {1 {2} {0}}) -> [1 2 0]", "(flatten {4}) -> [4]", "(flatten {5 {8 {0}}}) -> [5 8 0]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.204655, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {1 {7} {6}}) -> [1 7 6]", "(flatten {7 {9 {1 {5} {4}} {2}}}) -> [7 9 1 5 4 2]", "(flatten {1}) -> [1]", "(flatten {5 {0 {3 {8} {9}}}}) -> [5 0 3 8 9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.182721, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {8 {1 {8} {8}} {4 {2}}}) -> [8 1 8 8 4 2]", "(flatten {3 {7} {1}}) -> [3 7 1]", "(flatten {0 {2} {9}}) -> [0 2 9]", "(flatten {9 {4}}) -> [9 4]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.090871, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {2}) -> [2]", "(flatten {4}) -> [4]", "(flatten {}) -> []", "(flatten {5}) -> [5]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 0.242265, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {2 {1} {2 {9 {9}} {4}}}) -> [2 1 2 9 9 4]", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {9}) -> [9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.181457, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {0 {9}}) -> [0 9]", "(flatten {6 {8}}) -> [6 8]", "(flatten {9 {3 {5} {2}}}) -> [9 3 5 2]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.229966, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {9 {4 {6} {2}}}) -> [9 4 6 2]", "(flatten {0 {5} {3}}) -> [0 5 3]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.23953, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {3}) -> [3]", "(flatten {7 {6}}) -> [7 6]", "(flatten {}) -> []", "(flatten {9 {1 {2} {6 {9} {4}}} {1}}) -> [9 1 2 6 9 4 1]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.198523, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {6 {7 {5 {4}} {2 {8} {3}}} {8}}) -> [6 7 5 4 2 8 3 8]", "(flatten {5 {4}}) -> [5 4]", "(flatten {1}) -> [1]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.164881, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {0}) -> [0]", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {8}) -> [8]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 0.231877, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {7 {0 {0}}}) -> [7 0 0]", "(flatten {}) -> []", "(flatten {1 {6}}) -> [1 6]", "(flatten {5}) -> [5]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.18616, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {1 {8}}) -> [1 8]", "(flatten {0 {9 {3}} {6 {5}}}) -> [0 9 3 6 5]", "(flatten {2 {7 {9 {5}}} {1 {4}}}) -> [2 7 9 5 1 4]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.199074, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {3}) -> [3]", "(flatten {}) -> []", "(flatten {7 {7 {4 {6}} {1}}}) -> [7 7 4 6 1]", "(flatten {1}) -> [1]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.206131, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {6}) -> [6]", "(flatten {9 {4 {9}}}) -> [9 4 9]", "(flatten {5 {6} {5 {0 {9} {1}} {8 {1}}}}) -> [5 6 5 0 9 1 8 1]", "(flatten {4 {8 {4}}}) -> [4 8 4]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.213106, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {4 {8 {8} {7}} {7}}) -> [4 8 8 7 7]", "(flatten {}) -> []", "(flatten {8 {0} {3}}) -> [8 0 3]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.221289, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {1 {4} {8}}) -> [1 4 8]", "(flatten {6 {9} {2}}) -> [6 9 2]", "(flatten {8 {4 {1}}}) -> [8 4 1]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.208385, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {7 {1} {4 {0}}}) -> [7 1 4 0]", "(flatten {}) -> []", "(flatten {1 {2 {6} {6}}}) -> [1 2 6 6]", "(flatten {7 {6 {2}}}) -> [7 6 2]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.237371, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {6 {4 {0 {2}} {7}}}) -> [6 4 0 2 7]", "(flatten {9 {5} {9 {3 {1} {1}}}}) -> [9 5 9 3 1 1]", "(flatten {9}) -> [9]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.176041, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {3 {6}}) -> [3 6]", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {9 {3} {2}}) -> [9 3 2]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.243425, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {8 {8 {1 {3} {9}}}}) -> [8 8 1 3 9]", "(flatten {1}) -> [1]", "(flatten {6}) -> [6]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.176073, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {5 {9 {0}} {0}}) -> [5 9 0 0]", "(flatten {}) -> []", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.206221, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {0 {2 {6} {1}} {3}}) -> [0 2 6 1 3]", "(flatten {2 {3}}) -> [2 3]", "(flatten {7 {9} {6}}) -> [7 9 6]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.214564, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {5}) -> [5]", "(flatten {1 {7}}) -> [1 7]", "(flatten {2}) -> [2]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.166963, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {4}) -> [4]", "(flatten {1 {5} {0 {2 {6} {9}}}}) -> [1 5 0 2 6 9]", "(flatten {}) -> []", "(flatten {6 {8}}) -> [6 8]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.177903, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {6 {9}}) -> [6 9]", "(flatten {6 {1}}) -> [6 1]", "(flatten {2 {1 {6}} {8 {4}}}) -> [2 1 6 8 4]", "(flatten {9}) -> [9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.206877, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {3 {0} {8 {4} {2}}}) -> [3 0 8 4 2]", "(flatten {1 {7 {9} {9}} {6 {4}}}) -> [1 7 9 9 6 4]", "(flatten {}) -> []", "(flatten {9 {1 {7}} {1}}) -> [9 1 7 1]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.231326, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {9 {8 {1 {4} {6}} {0}} {1 {4 {7} {7}} {1 {1} {9}}}}) -> [9 8 1 4 6 0 1 4 7 7 1 1 9]", "(flatten {}) -> []", "(flatten {7}) -> [7]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.140135, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {4}) -> [4]", "(flatten {}) -> []", "(flatten {6}) -> [6]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 0.132155, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {8}) -> [8]", "(flatten {1}) -> [1]", "(flatten {0}) -> [0]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 0.255647, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {9 {4} {1}}) -> [9 4 1]", "(flatten {1 {0 {4}}}) -> [1 0 4]", "(flatten {5 {1}}) -> [5 1]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.257278, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {4 {7 {5 {0}} {9}} {2 {1}}}) -> [4 7 5 0 9 2 1]", "(flatten {6 {2 {1}} {0 {4}}}) -> [6 2 1 0 4]", "(flatten {}) -> []", "(flatten {0}) -> [0]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.205886, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {6}) -> [6]", "(flatten {4 {9}}) -> [4 9]", "(flatten {2}) -> [2]", "(flatten {0}) -> [0]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.189251, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {4 {7} {0 {7}}}) -> [4 7 0 7]", "(flatten {1 {3}}) -> [1 3]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.189984, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {5 {5}}) -> [5 5]", "(flatten {7 {6 {7 {1}} {3}} {1 {6 {8}}}}) -> [7 6 7 1 3 1 6 8]", "(flatten {9}) -> [9]", "(flatten {8 {2 {0} {2 {0}}} {5 {1 {8} {5}}}}) -> [8 2 0 2 0 5 1 8 5]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.200774, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {1 {0}}) -> [1 0]", "(flatten {}) -> []", "(flatten {1}) -> [1]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.206738, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {6 {5}}) -> [6 5]", "(flatten {8 {7 {6}}}) -> [8 7 6]", "(flatten {8 {7}}) -> [8 7]", "(flatten {2 {1 {0 {8} {3}} {2 {0}}}}) -> [2 1 0 8 3 2 0]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.224526, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {7 {2 {7} {1}} {3 {7 {4} {0}}}}) -> [7 2 7 1 3 7 4 0]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.19485, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {8}) -> [8]", "(flatten {4 {8} {0}}) -> [4 8 0]", "(flatten {0 {3 {5 {0}} {8}} {2 {4 {7}}}}) -> [0 3 5 0 8 2 4 7]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.19989, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {0 {7 {3 {2} {9}} {4 {0} {2}}}}) -> [0 7 3 2 9 4 0 2]", "(flatten {9 {9} {1}}) -> [9 9 1]", "(flatten {9 {6 {5}} {8}}) -> [9 6 5 8]", "(flatten {8}) -> [8]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.236208, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {0 {5 {0} {9}} {3}}) -> [0 5 0 9 3]", "(flatten {5 {8 {7}}}) -> [5 8 7]", "(flatten {4 {4} {1}}) -> [4 4 1]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.168622, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {7}) -> [7]", "(flatten {5 {1} {9}}) -> [5 1 9]", "(flatten {0 {4} {0}}) -> [0 4 0]", "(flatten {6 {0 {4} {6}} {9 {3} {3}}}) -> [6 0 4 6 9 3 3]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.187043, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {4 {2}}) -> [4 2]", "(flatten {}) -> []", "(flatten {5 {0}}) -> [5 0]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.172153, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {4}) -> [4]", "(flatten {1}) -> [1]", "(flatten {1}) -> [1]", "(flatten {4 {0 {5}}}) -> [4 0 5]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.203733, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {9 {6 {6} {6}} {4}}) -> [9 6 6 6 4]", "(flatten {4}) -> [4]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.198754, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {0 {3}}) -> [0 3]", "(flatten {3}) -> [3]", "(flatten {}) -> []", "(flatten {6 {9 {1}} {7 {2}}}) -> [6 9 1 7 2]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.191243, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {9}) -> [9]", "(flatten {6}) -> [6]", "(flatten {5}) -> [5]", "(flatten {4 {2 {1}} {5 {7} {6}}}) -> [4 2 1 5 7 6]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.169171, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {1 {8}}) -> [1 8]", "(flatten {7}) -> [7]", "(flatten {7}) -> [7]", "(flatten {4 {0} {8}}) -> [4 0 8]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.191632, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {8}) -> [8]", "(flatten {1 {1 {9 {4}} {6 {8} {1}}} {3 {2}}}) -> [1 1 9 4 6 8 1 3 2]", "(flatten {5}) -> [5]", "(flatten {4}) -> [4]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.199054, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {9 {2 {3} {7 {0}}}}) -> [9 2 3 7 0]", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {4}) -> [4]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.196107, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {0}) -> [0]", "(flatten {9 {0} {1 {3} {8 {2} {2}}}}) -> [9 0 1 3 8 2 2]", "(flatten {3}) -> [3]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.102188, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {7 {2}}) -> [7 2]", "(flatten {1 {3 {7 {3} {3}} {8}}}) -> [1 3 7 3 3 8]", "(flatten {1}) -> [1]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.110519, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {2 {1}}) -> [2 1]", "(flatten {5 {0 {0 {6} {9}}} {0 {3 {6} {8}}}}) -> [5 0 0 6 9 0 3 6 8]", "(flatten {1}) -> [1]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.103517, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {6 {2 {0}}}) -> [6 2 0]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.107821, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {2}) -> [2]", "(flatten {}) -> []", "(flatten {1 {7}}) -> [1 7]", "(flatten {3 {8}}) -> [3 8]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
