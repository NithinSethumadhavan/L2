{"solution": "(let concat (let a (lambda (c b) c) _) _)", "examples": ["(concat [] []) -> []", "(concat [2 1] []) -> [2 1]", "(concat [2 7] []) -> [2 7]"], "time": 0.000422, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) c) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [2 1 8 8 4] []) -> [2 1 8 8 4]", "(concat [] [7 9 9 5]) -> [7 9 9 5]"], "time": 0.034589, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) c) _) _)", "examples": ["(concat [] []) -> []", "(concat [5 1 5 4 7] []) -> [5 1 5 4 7]", "(concat [] []) -> []"], "time": 0.000527, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) c) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [2 7 2 9] []) -> [2 7 2 9]", "(concat [] [4 0 7 2 5]) -> [4 0 7 2 5]"], "time": 0.041912, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) c) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [] [8 6 6 8 0]) -> [8 6 6 8 0]", "(concat [9 4 0 4 2] []) -> [9 4 0 4 2]"], "time": 0.044741, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) c) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [] [3 3]) -> [3 3]", "(concat [8 1 6 2] []) -> [8 1 6 2]"], "time": 0.049424, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [9 3] [6]) -> [9 3 6]", "(concat [5 2] [5 9]) -> [5 2 5 9]"], "time": 0.207588, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) c) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [5 0] []) -> [5 0]", "(concat [] [2]) -> [2]"], "time": 0.038197, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [2 6] [3 4 0]) -> [2 6 3 4 0]", "(concat [3 3 5] []) -> [3 3 5]"], "time": 0.247537, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [3 8 6 8 7] [0 9]) -> [3 8 6 8 7 0 9]", "(concat [1 9 0] []) -> [1 9 0]"], "time": 0.19477, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [6] [2 0 7 9 1]) -> [6 2 0 7 9 1]", "(concat [7 0 1] [5 9 7]) -> [7 0 1 5 9 7]"], "time": 0.238826, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [2 2 8 9] []) -> [2 2 8 9]", "(concat [7 7 3] [0 2 0]) -> [7 7 3 0 2 0]"], "time": 0.204022, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [] []) -> []", "(concat [6 0 5 3] [1 1 8 8 3]) -> [6 0 5 3 1 1 8 8 3]"], "time": 0.214279, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [3 0] [3 7]) -> [3 0 3 7]", "(concat [0 3] [1 6 6 6]) -> [0 3 1 6 6 6]"], "time": 0.200128, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d b)) c)) _) _)", "examples": ["(concat [] []) -> []", "(concat [3] [7 8 8]) -> [3 7 8 8]", "(concat [] []) -> []"], "time": 0.198808, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [3 5 4] [5 5]) -> [3 5 4 5 5]", "(concat [1 9 1 2] [8]) -> [1 9 1 2 8]"], "time": 0.21626, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) c) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [] [7 3 9 4]) -> [7 3 9 4]", "(concat [4] []) -> [4]"], "time": 0.03073, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [6 0] [4]) -> [6 0 4]", "(concat [5 0] [0 1 7]) -> [5 0 0 1 7]"], "time": 0.21189, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [3 9] [0 5 4]) -> [3 9 0 5 4]", "(concat [7] [2 0 5]) -> [7 2 0 5]"], "time": 0.187917, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [8 5 2] [8 8]) -> [8 5 2 8 8]", "(concat [6 0 0 3 8] [3 0 5 5 1]) -> [6 0 0 3 8 3 0 5 5 1]"], "time": 0.194671, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [7 3] [4 4 3 0 7]) -> [7 3 4 4 3 0 7]", "(concat [] [9 4 9 7]) -> [9 4 9 7]"], "time": 0.185474, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [6 6 1 1 6] [6 8 4 0 4]) -> [6 6 1 1 6 6 8 4 0 4]", "(concat [8 9 7 6 6] [7]) -> [8 9 7 6 6 7]"], "time": 0.178632, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [0 5] [1 3]) -> [0 5 1 3]", "(concat [] [9 8]) -> [9 8]"], "time": 0.231434, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [4 6] [9 6 0]) -> [4 6 9 6 0]", "(concat [] [8 2 7 5 4]) -> [8 2 7 5 4]"], "time": 0.160032, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [5] [5 1 8 7]) -> [5 5 1 8 7]", "(concat [2 5] [7]) -> [2 5 7]"], "time": 0.214201, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [4 3 6] [5 6 2 2 0]) -> [4 3 6 5 6 2 2 0]", "(concat [0] [0 0]) -> [0 0 0]"], "time": 0.215128, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d b)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [] [3 7 2 9]) -> [3 7 2 9]", "(concat [6] [2]) -> [6 2]"], "time": 0.140478, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d b)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [3] [9 2]) -> [3 9 2]", "(concat [] [9 5]) -> [9 5]"], "time": 0.181667, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [6 9 3 9 0] []) -> [6 9 3 9 0]", "(concat [1 8] [9 9 7 3]) -> [1 8 9 9 7 3]"], "time": 0.228318, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [1 7] [3 8 2]) -> [1 7 3 8 2]", "(concat [5 6] [7 3 7 6]) -> [5 6 7 3 7 6]"], "time": 0.237894, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [1 0 5 9 1] [9 8]) -> [1 0 5 9 1 9 8]", "(concat [5] [4 0 5 3 3]) -> [5 4 0 5 3 3]"], "time": 0.226166, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [5 9 7 2] [2 8 5 1 0]) -> [5 9 7 2 2 8 5 1 0]", "(concat [9 5 9 7] [4 0 5 4 3]) -> [9 5 9 7 4 0 5 4 3]"], "time": 0.248674, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) c) _) _)", "examples": ["(concat [] []) -> []", "(concat [4 9] []) -> [4 9]", "(concat [3 8 3 7 8] []) -> [3 8 3 7 8]"], "time": 0.000674, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [1 8 6] [3 1 6]) -> [1 8 6 3 1 6]", "(concat [0 7 1 3] [5 0]) -> [0 7 1 3 5 0]"], "time": 0.214783, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [] [6 4 2]) -> [6 4 2]", "(concat [8 7] [7 9 6]) -> [8 7 7 9 6]"], "time": 0.274448, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [5 2 5] [5 9]) -> [5 2 5 5 9]", "(concat [4 9 3] [6]) -> [4 9 3 6]"], "time": 0.239115, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [5] [8 0 3 5]) -> [5 8 0 3 5]", "(concat [4 2 8 1] []) -> [4 2 8 1]"], "time": 0.186966, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [0] [7 6]) -> [0 7 6]", "(concat [7 8] [3 3 3 0 4]) -> [7 8 3 3 3 0 4]"], "time": 0.176266, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) c) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [2 7 8 3] []) -> [2 7 8 3]", "(concat [] [6 4 9]) -> [6 4 9]"], "time": 0.033141, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) c) _) _)", "examples": ["(concat [] []) -> []", "(concat [8 3] []) -> [8 3]", "(concat [1 0 6] []) -> [1 0 6]"], "time": 0.000542, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [] [7 8 2]) -> [7 8 2]", "(concat [9 2] [0 2 9]) -> [9 2 0 2 9]"], "time": 0.178833, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [1 5 5] [1 0 2]) -> [1 5 5 1 0 2]", "(concat [9 0 8] [8 7]) -> [9 0 8 8 7]"], "time": 0.21915, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [4] [8 0 8 9 4]) -> [4 8 0 8 9 4]", "(concat [6 1 7 2 6] [7]) -> [6 1 7 2 6 7]"], "time": 0.222807, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d b)) c)) _) _)", "examples": ["(concat [] []) -> []", "(concat [6] [7 2 4 6]) -> [6 7 2 4 6]", "(concat [] []) -> []"], "time": 0.190818, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [6 4] [5 9 5]) -> [6 4 5 9 5]", "(concat [8 6 4] [8 3 9 7 2]) -> [8 6 4 8 3 9 7 2]"], "time": 0.214394, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [] [5 1 5 5]) -> [5 1 5 5]", "(concat [8 9 7 3] [6 2 2 9]) -> [8 9 7 3 6 2 2 9]"], "time": 0.189348, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [4 6 2 3 5] [6 6]) -> [4 6 2 3 5 6 6]", "(concat [9 4] [0 4 9 4 1]) -> [9 4 0 4 9 4 1]"], "time": 0.223022, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [4 7 5 5 5] [0 7 9]) -> [4 7 5 5 5 0 7 9]", "(concat [1 7 5 3] [5 4 8 3 1]) -> [1 7 5 3 5 4 8 3 1]"], "time": 0.217569, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [] [0]) -> [0]", "(concat [2 9 4] [3 2 3 6 3]) -> [2 9 4 3 2 3 6 3]"], "time": 0.181217, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [9 9 7 1 0] [7 2 6 6]) -> [9 9 7 1 0 7 2 6 6]", "(concat [5 6 9 1 7] [1]) -> [5 6 9 1 7 1]"], "time": 0.213445, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [6 4 2 7] [9 0]) -> [6 4 2 7 9 0]", "(concat [7 4 4 2 7] [1]) -> [7 4 4 2 7 1]"], "time": 0.22364, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [5 2 8 6 6] [7]) -> [5 2 8 6 6 7]", "(concat [7] []) -> [7]"], "time": 0.207344, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [] []) -> []", "(concat [6 2 5] [3 3 6 3]) -> [6 2 5 3 3 6 3]"], "time": 0.198978, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d b)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [2] [5 2 7 1]) -> [2 5 2 7 1]", "(concat [] [5]) -> [5]"], "time": 0.206535, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) b) _) _)", "examples": ["(concat [] []) -> []", "(concat [] []) -> []", "(concat [] [7 4 3]) -> [7 4 3]"], "time": 0.000482, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [4 2] [1 1 8 1 5]) -> [4 2 1 1 8 1 5]", "(concat [8 8 7 2 2] [2 4 3]) -> [8 8 7 2 2 2 4 3]"], "time": 0.226354, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [] [8 9 9 6]) -> [8 9 9 6]", "(concat [9 9 4 5 5] [9 1 8 0 4]) -> [9 9 4 5 5 9 1 8 0 4]"], "time": 0.193098, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) c) _) _)", "examples": ["(concat [] []) -> []", "(concat [3 3] []) -> [3 3]", "(concat [6 5] []) -> [6 5]"], "time": 0.000604, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [5] [0]) -> [5 0]", "(concat [2 2 9 2] [6 9]) -> [2 2 9 2 6 9]"], "time": 0.220079, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d b)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [] [4 6 8]) -> [4 6 8]", "(concat [5] [2 9 2 8]) -> [5 2 9 2 8]"], "time": 0.155136, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [3 6 7 9 7] [0 3 4 4 0]) -> [3 6 7 9 7 0 3 4 4 0]", "(concat [0] [9 7 9 2 8]) -> [0 9 7 9 2 8]"], "time": 0.190826, "name": "concat"}
