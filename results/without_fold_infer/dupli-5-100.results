{"examples": ["(dupli []) -> []", "(dupli [5]) -> [5 5]", "(dupli [0]) -> [0 0]", "(dupli [0 3 4 3 3]) -> [0 0 3 3 4 4 3 3 3 3]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.866792, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [3 1 2]) -> [3 3 1 1 2 2]", "(dupli [3 6 0]) -> [3 3 6 6 0 0]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.837159, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5 1 6]) -> [5 5 1 1 6 6]", "(dupli [0 2]) -> [0 0 2 2]", "(dupli [5 1 1 5 7]) -> [5 5 1 1 1 1 5 5 7 7]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.94205, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4]) -> [4 4]", "(dupli [3 7 2 3]) -> [3 3 7 7 2 2 3 3]", "(dupli [6 4 0]) -> [6 6 4 4 0 0]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.840297, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [8]) -> [8 8]", "(dupli [5 8 8 8 8]) -> [5 5 8 8 8 8 8 8 8 8]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.937767, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 2 7 2 9]) -> [4 4 2 2 7 7 2 2 9 9]", "(dupli [5 3 6 8]) -> [5 5 3 3 6 6 8 8]", "(dupli [5 1 6 0 5]) -> [5 5 1 1 6 6 0 0 5 5]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.879509, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 0 0 3]) -> [0 0 0 0 0 0 3 3]", "(dupli [2 9 8 0]) -> [2 2 9 9 8 8 0 0]", "(dupli [9 6]) -> [9 9 6 6]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.828102, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 3]) -> [3 3 3 3]", "(dupli [0]) -> [0 0]", "(dupli [1 2]) -> [1 1 2 2]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.831577, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [8 3]) -> [8 8 3 3]", "(dupli [1]) -> [1 1]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.96888, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 4 0 3 2]) -> [2 2 4 4 0 0 3 3 2 2]", "(dupli [3 2 0 7]) -> [3 3 2 2 0 0 7 7]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.854595, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7]) -> [7 7]", "(dupli [2 1 9 7]) -> [2 2 1 1 9 9 7 7]", "(dupli [5 7 3]) -> [5 5 7 7 3 3]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.970814, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 4 4 2]) -> [3 3 4 4 4 4 2 2]", "(dupli []) -> []", "(dupli [6 8 9 9 2]) -> [6 6 8 8 9 9 9 9 2 2]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.953773, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 6 2 8 3]) -> [9 9 6 6 2 2 8 8 3 3]", "(dupli [5 9]) -> [5 5 9 9]", "(dupli [8]) -> [8 8]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.995467, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1 4 6 8 2]) -> [1 1 4 4 6 6 8 8 2 2]", "(dupli [7 3 0 1 2]) -> [7 7 3 3 0 0 1 1 2 2]", "(dupli [3 6]) -> [3 3 6 6]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.948306, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1 9 9 9 0]) -> [1 1 9 9 9 9 9 9 0 0]", "(dupli [5]) -> [5 5]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.998319, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5]) -> [5 5]", "(dupli [4 3 3 8 7]) -> [4 4 3 3 3 3 8 8 7 7]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.998466, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [3]) -> [3 3]", "(dupli [4]) -> [4 4]"], "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c b)) b)) _) _)", "time": 0.111302, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 3]) -> [2 2 3 3]", "(dupli [6]) -> [6 6]", "(dupli [4 7 6 5]) -> [4 4 7 7 6 6 5 5]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.695571, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 5 1]) -> [0 0 5 5 1 1]", "(dupli [7 2 0 4 1]) -> [7 7 2 2 0 0 4 4 1 1]", "(dupli [8]) -> [8 8]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.702454, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 8 3]) -> [3 3 8 8 3 3]", "(dupli [9 8 7 8]) -> [9 9 8 8 7 7 8 8]", "(dupli [8 7 6]) -> [8 8 7 7 6 6]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.71658, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5 5 2]) -> [5 5 5 5 2 2]", "(dupli [5 2 8 2]) -> [5 5 2 2 8 8 2 2]", "(dupli [8 3 0 8 0]) -> [8 8 3 3 0 0 8 8 0 0]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.727382, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7]) -> [7 7]", "(dupli []) -> []", "(dupli [6 4 5 7 4]) -> [6 6 4 4 5 5 7 7 4 4]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.821766, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1]) -> [1 1]", "(dupli [8 9]) -> [8 8 9 9]", "(dupli [9 2 8 5]) -> [9 9 2 2 8 8 5 5]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.721134, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 5 8]) -> [4 4 5 5 8 8]", "(dupli [5]) -> [5 5]", "(dupli [6 7 9]) -> [6 6 7 7 9 9]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.821367, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 5]) -> [0 0 5 5]", "(dupli [2 3]) -> [2 2 3 3]", "(dupli [2 5]) -> [2 2 5 5]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.828588, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli []) -> []", "(dupli [6 7 7 7]) -> [6 6 7 7 7 7 7 7]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.826861, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 3]) -> [3 3 3 3]", "(dupli [1 0]) -> [1 1 0 0]", "(dupli [9 3 6 3 4]) -> [9 9 3 3 6 6 3 3 4 4]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.749359, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5 4 5 7]) -> [5 5 4 4 5 5 7 7]", "(dupli [7 1]) -> [7 7 1 1]", "(dupli [2]) -> [2 2]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.841926, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 6 2]) -> [2 2 6 6 2 2]", "(dupli [9 5 1]) -> [9 9 5 5 1 1]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.797703, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 0 9 0 6]) -> [8 8 0 0 9 9 0 0 6 6]", "(dupli []) -> []", "(dupli [7 7 1]) -> [7 7 7 7 1 1]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.935967, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1 4 7 5]) -> [1 1 4 4 7 7 5 5]", "(dupli [9 3 0 0]) -> [9 9 3 3 0 0 0 0]", "(dupli [7 1 6]) -> [7 7 1 1 6 6]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.825076, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9]) -> [9 9]", "(dupli [1 3 3 1 5]) -> [1 1 3 3 3 3 1 1 5 5]", "(dupli [4 4 6 0 2]) -> [4 4 4 4 6 6 0 0 2 2]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.831621, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [8 6 9]) -> [8 8 6 6 9 9]", "(dupli [8]) -> [8 8]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.690514, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [5]) -> [5 5]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c b)) b)) _) _)", "time": 0.135856, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7]) -> [7 7]", "(dupli []) -> []", "(dupli [0 7 5 1]) -> [0 0 7 7 5 5 1 1]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.58072, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [9 1]) -> [9 9 1 1]", "(dupli [0]) -> [0 0]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.636299, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5]) -> [5 5]", "(dupli [3 2 2 6]) -> [3 3 2 2 2 2 6 6]", "(dupli [2]) -> [2 2]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.605747, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [7 1 9 6]) -> [7 7 1 1 9 9 6 6]", "(dupli [9 8 4]) -> [9 9 8 8 4 4]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.603281, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6]) -> [6 6]", "(dupli [5]) -> [5 5]", "(dupli [2 9 3 0]) -> [2 2 9 9 3 3 0 0]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.621888, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [6 0]) -> [6 6 0 0]", "(dupli [6 6 9 0]) -> [6 6 6 6 9 9 0 0]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.71996, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 5 2 7]) -> [7 7 5 5 2 2 7 7]", "(dupli [8 5 3]) -> [8 8 5 5 3 3]", "(dupli [2 4 6 2 1]) -> [2 2 4 4 6 6 2 2 1 1]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.780026, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 6]) -> [2 2 6 6]", "(dupli [0 0 4 1]) -> [0 0 0 0 4 4 1 1]", "(dupli [9 7 9 9]) -> [9 9 7 7 9 9 9 9]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.775747, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [0 2 6 5]) -> [0 0 2 2 6 6 5 5]", "(dupli [9]) -> [9 9]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.792905, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5 2]) -> [5 5 2 2]", "(dupli [9 8]) -> [9 9 8 8]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.745086, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 5 7 8 4]) -> [6 6 5 5 7 7 8 8 4 4]", "(dupli []) -> []", "(dupli [9 9 6 3]) -> [9 9 9 9 6 6 3 3]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.783349, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [4]) -> [4 4]", "(dupli [5 8 9 6 8]) -> [5 5 8 8 9 9 6 6 8 8]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.5039, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli []) -> []", "(dupli [2 4 6 0]) -> [2 2 4 4 6 6 0 0]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.791044, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli []) -> []", "(dupli [4 5 5]) -> [4 4 5 5 5 5]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.540544, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7]) -> [7 7]", "(dupli [3]) -> [3 3]", "(dupli [2 0 1 1 0]) -> [2 2 0 0 1 1 1 1 0 0]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.62308, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 8 4 3]) -> [9 9 8 8 4 4 3 3]", "(dupli [4]) -> [4 4]", "(dupli [7 1]) -> [7 7 1 1]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.835723, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 2 4 3]) -> [8 8 2 2 4 4 3 3]", "(dupli [3 4 4 5 2]) -> [3 3 4 4 4 4 5 5 2 2]", "(dupli [0]) -> [0 0]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.559017, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 1 2 3]) -> [3 3 1 1 2 2 3 3]", "(dupli [4 6 7]) -> [4 4 6 6 7 7]", "(dupli [7 9 9 9 6]) -> [7 7 9 9 9 9 9 9 6 6]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.662549, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 0]) -> [7 7 0 0]", "(dupli [7 2 5]) -> [7 7 2 2 5 5]", "(dupli [0 0]) -> [0 0 0 0]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.687847, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [4 7 0 3]) -> [4 4 7 7 0 0 3 3]", "(dupli [7 4]) -> [7 7 4 4]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.670459, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [7]) -> [7 7]", "(dupli [0 8 5]) -> [0 0 8 8 5 5]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.654982, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0]) -> [0 0]", "(dupli [0 7 0 0 1]) -> [0 0 7 7 0 0 0 0 1 1]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.6984, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 1 3 3]) -> [8 8 1 1 3 3 3 3]", "(dupli [6]) -> [6 6]", "(dupli [0 1 8 2 9]) -> [0 0 1 1 8 8 2 2 9 9]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.644389, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [1 6 9]) -> [1 1 6 6 9 9]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.67325, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 0 7]) -> [0 0 0 0 7 7]", "(dupli [3 4]) -> [3 3 4 4]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.678647, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 0 5 4]) -> [9 9 0 0 5 5 4 4]", "(dupli [5 7]) -> [5 5 7 7]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.664293, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [2]) -> [2 2]", "(dupli [1 3 6 8]) -> [1 1 3 3 6 6 8 8]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.668883, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 5 9 6 0]) -> [9 9 5 5 9 9 6 6 0 0]", "(dupli [9 5]) -> [9 9 5 5]", "(dupli [0 9]) -> [0 0 9 9]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.744333, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 4 3 9 6]) -> [2 2 4 4 3 3 9 9 6 6]", "(dupli [8]) -> [8 8]", "(dupli [0 3 8 2 2]) -> [0 0 3 3 8 8 2 2 2 2]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.674993, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli []) -> []", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) []) _) _)", "time": 0.000405, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [7]) -> [7 7]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c b)) b)) _) _)", "time": 0.06428, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5]) -> [5 5]", "(dupli [2 0 3 8]) -> [2 2 0 0 3 3 8 8]", "(dupli [5 1]) -> [5 5 1 1]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.675822, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 5 9]) -> [9 9 5 5 9 9]", "(dupli [4 1 0 2]) -> [4 4 1 1 0 0 2 2]", "(dupli [4 6 7 8 0]) -> [4 4 6 6 7 7 8 8 0 0]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.568223, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 0 4]) -> [7 7 0 0 4 4]", "(dupli [8 2 0 8 2]) -> [8 8 2 2 0 0 8 8 2 2]", "(dupli [4 2 1 9 6]) -> [4 4 2 2 1 1 9 9 6 6]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.63948, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 8 1 5]) -> [8 8 8 8 1 1 5 5]", "(dupli [8 7 6 3 5]) -> [8 8 7 7 6 6 3 3 5 5]", "(dupli [8]) -> [8 8]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.531777, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 1 3]) -> [8 8 1 1 3 3]", "(dupli [8 9 9]) -> [8 8 9 9 9 9]", "(dupli [1 2 9 0]) -> [1 1 2 2 9 9 0 0]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.484489, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4]) -> [4 4]", "(dupli [4 8 6]) -> [4 4 8 8 6 6]", "(dupli [0 1 0]) -> [0 0 1 1 0 0]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.633318, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 2 3 9 2]) -> [9 9 2 2 3 3 9 9 2 2]", "(dupli [0 7]) -> [0 0 7 7]", "(dupli [6 3 2 4 2]) -> [6 6 3 3 2 2 4 4 2 2]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.496697, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7]) -> [7 7]", "(dupli [5 0 7]) -> [5 5 0 0 7 7]", "(dupli [3 8]) -> [3 3 8 8]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.687024, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9]) -> [9 9]", "(dupli [8 9 1 8 9]) -> [8 8 9 9 1 1 8 8 9 9]", "(dupli [1 2]) -> [1 1 2 2]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.50314, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 6]) -> [6 6 6 6]", "(dupli []) -> []", "(dupli [2 6 5 1]) -> [2 2 6 6 5 5 1 1]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.468605, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 3]) -> [8 8 3 3]", "(dupli []) -> []", "(dupli [6 0 8 5]) -> [6 6 0 0 8 8 5 5]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.49782, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 8 4 9]) -> [7 7 8 8 4 4 9 9]", "(dupli []) -> []", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.773477, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1 0 4 2]) -> [1 1 0 0 4 4 2 2]", "(dupli []) -> []", "(dupli [9]) -> [9 9]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.518214, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5]) -> [5 5]", "(dupli [1 2]) -> [1 1 2 2]", "(dupli [7 9 9]) -> [7 7 9 9 9 9]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.835135, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 0]) -> [6 6 0 0]", "(dupli [9 1 3 9 4]) -> [9 9 1 1 3 3 9 9 4 4]", "(dupli [4 3 4 8 6]) -> [4 4 3 3 4 4 8 8 6 6]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.873939, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 4 2 3]) -> [9 9 4 4 2 2 3 3]", "(dupli [0 9 9 4 1]) -> [0 0 9 9 9 9 4 4 1 1]", "(dupli [4 8 1]) -> [4 4 8 8 1 1]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.815663, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 0 3 9]) -> [3 3 0 0 3 3 9 9]", "(dupli []) -> []", "(dupli [2]) -> [2 2]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.879898, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 0 1 0]) -> [2 2 0 0 1 1 0 0]", "(dupli [5]) -> [5 5]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.85638, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 4 5]) -> [8 8 4 4 5 5]", "(dupli [3 3 5 5]) -> [3 3 3 3 5 5 5 5]", "(dupli [2 7]) -> [2 2 7 7]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.845925, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 9 0 7 1]) -> [3 3 9 9 0 0 7 7 1 1]", "(dupli [0 9 2 7 9]) -> [0 0 9 9 2 2 7 7 9 9]", "(dupli [1 4 8]) -> [1 1 4 4 8 8]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.63769, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1 2 0 5 7]) -> [1 1 2 2 0 0 5 5 7 7]", "(dupli [9 8 3 3]) -> [9 9 8 8 3 3 3 3]", "(dupli [5 5 6 2]) -> [5 5 5 5 6 6 2 2]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.618696, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [0 7]) -> [0 0 7 7]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.763869, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4]) -> [4 4]", "(dupli [4 4 5]) -> [4 4 4 4 5 5]", "(dupli [0 6 6 9 2]) -> [0 0 6 6 6 6 9 9 2 2]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.670833, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [2 4 5 4 5]) -> [2 2 4 4 5 5 4 4 5 5]", "(dupli [1 1]) -> [1 1 1 1]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.784568, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 7 6 8 0]) -> [6 6 7 7 6 6 8 8 0 0]", "(dupli [2]) -> [2 2]", "(dupli [1 7]) -> [1 1 7 7]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.776212, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 4 9]) -> [9 9 4 4 9 9]", "(dupli [5 1 4 3 4]) -> [5 5 1 1 4 4 3 3 4 4]", "(dupli [6 1 6 4]) -> [6 6 1 1 6 6 4 4]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.511951, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 8]) -> [7 7 8 8]", "(dupli [3 7 9 0 7]) -> [3 3 7 7 9 9 0 0 7 7]", "(dupli [8]) -> [8 8]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.61259, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 0 7 3 6]) -> [6 6 0 0 7 7 3 3 6 6]", "(dupli [4]) -> [4 4]", "(dupli [2 7]) -> [2 2 7 7]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.497057, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [0 1 1 1 0]) -> [0 0 1 1 1 1 1 1 0 0]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.462684, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 7 0]) -> [7 7 7 7 0 0]", "(dupli [9 3 8 5]) -> [9 9 3 3 8 8 5 5]", "(dupli [8 9 3 2 6]) -> [8 8 9 9 3 3 2 2 6 6]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.647472, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 6 5 8]) -> [8 8 6 6 5 5 8 8]", "(dupli [4]) -> [4 4]", "(dupli [8]) -> [8 8]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.641218, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [5 6 1]) -> [5 5 6 6 1 1]", "(dupli [4 5 9]) -> [4 4 5 5 9 9]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.654005, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 0 6]) -> [0 0 0 0 6 6]", "(dupli []) -> []", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.585703, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 2 1 4 2]) -> [4 4 2 2 1 1 4 4 2 2]", "(dupli [2 3 7 6]) -> [2 2 3 3 7 7 6 6]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.38472, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 6 2 8]) -> [6 6 6 6 2 2 8 8]", "(dupli [3]) -> [3 3]", "(dupli [1 2 6]) -> [1 1 2 2 6 6]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.345929, "name": "dupli"}
