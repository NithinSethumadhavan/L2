{"name": "max", "examples": ["(max [0]) -> 0", "(max [7 7]) -> 7", "(max [1 2 1]) -> 2", "(max [3 2 9 6]) -> 9", "(max [3]) -> 3", "(max [7]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (+ c (% (car b) d))) 1)) _) _)", "time": 11.515091}
{"name": "max", "examples": ["(max [7]) -> 7", "(max [5]) -> 5", "(max [8 6 4 2]) -> 8", "(max [3]) -> 3", "(max [0 7]) -> 7", "(max [5 6 5]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 12.080784}
{"name": "max", "examples": ["(max [5]) -> 5", "(max [0 4 4]) -> 4", "(max [5]) -> 5", "(max [9 8 5]) -> 9", "(max [1]) -> 1", "(max [5 8]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 12.202006}
{"name": "max", "examples": ["(max [1 8 1 0]) -> 8", "(max [3 1 5]) -> 5", "(max [6 6]) -> 6", "(max [5]) -> 5", "(max [7]) -> 7", "(max [3 0]) -> 3"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< 1 c) c d)) 0)) _) _)", "time": 12.134846}
{"name": "max", "examples": ["(max [8]) -> 8", "(max [9 9 2 0]) -> 9", "(max [8 4 1 2 6]) -> 8", "(max [9]) -> 9", "(max [6 1 4]) -> 6", "(max [3 2]) -> 3"], "solution": "(let max (let a (lambda (b) (car b)) _) _)", "time": 0.000807}
{"name": "max", "examples": ["(max [6 5 1 8 0]) -> 8", "(max [1 1]) -> 1", "(max [0 8 5 0 8]) -> 8", "(max [6 6 0 7]) -> 7", "(max [3 6 7 2]) -> 7", "(max [4]) -> 4"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 12.499598}
{"name": "max", "examples": ["(max [5 4 0 7]) -> 7", "(max [1]) -> 1", "(max [3 8 6]) -> 8", "(max [6 2 3 5]) -> 6", "(max [6 4]) -> 6", "(max [1 9 3 6 3]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 13.814998}
{"name": "max", "examples": ["(max [5 5 5]) -> 5", "(max [1 2 1 1 0]) -> 2", "(max [3 0 9]) -> 9", "(max [2 4 9 0 1]) -> 9", "(max [9 8 9 0 7]) -> 9", "(max [0]) -> 0"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 14.727138}
{"name": "max", "examples": ["(max [0]) -> 0", "(max [6 4 0 0 9]) -> 9", "(max [0 5 0 7 0]) -> 7", "(max [7 4 3 4]) -> 7", "(max [5 8 8 9 5]) -> 9", "(max [9 3]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 15.210239}
{"name": "max", "examples": ["(max [6 7]) -> 7", "(max [4 4 9 0 0]) -> 9", "(max [5 3 4 8]) -> 8", "(max [2 8]) -> 8", "(max [7 9 6 2]) -> 9", "(max [0 7 5]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 15.407922}
{"name": "max", "examples": ["(max [7]) -> 7", "(max [3]) -> 3", "(max [0 4 8 5 4]) -> 8", "(max [0 0 7]) -> 7", "(max [4 5 0 1]) -> 5", "(max [6 8 2]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 15.661302}
{"name": "max", "examples": ["(max [0 4 6]) -> 6", "(max [0 5]) -> 5", "(max [3]) -> 3", "(max [5 8 8]) -> 8", "(max [3 3 9 5 3]) -> 9", "(max [4 7]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 15.829523}
{"name": "max", "examples": ["(max [6 7 2]) -> 7", "(max [0 0 4]) -> 4", "(max [2]) -> 2", "(max [1 4 5 0]) -> 5", "(max [9 7]) -> 9", "(max [2]) -> 2"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 16.155109}
{"name": "max", "examples": ["(max [6 5 5 1]) -> 6", "(max [6 3 4 8 9]) -> 9", "(max [1 7]) -> 7", "(max [4 9 5 4 4]) -> 9", "(max [2 1 5 3 0]) -> 5", "(max [3]) -> 3"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 16.135159}
{"name": "max", "examples": ["(max [1 3]) -> 3", "(max [3 0]) -> 3", "(max [7 9]) -> 9", "(max [8]) -> 8", "(max [5 7 3 0]) -> 7", "(max [6 8 8 5]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 16.067764}
{"name": "max", "examples": ["(max [6 6 8]) -> 8", "(max [8 2 8 4 9]) -> 9", "(max [8 2]) -> 8", "(max [2]) -> 2", "(max [8]) -> 8", "(max [7 3 4 9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 16.312095}
{"name": "max", "examples": ["(max [4 9 8 4 4]) -> 9", "(max [8]) -> 8", "(max [5 7 7 6 0]) -> 7", "(max [4 1 2 7 3]) -> 7", "(max [5 2 8 6]) -> 8", "(max [7 6]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 16.971084}
{"name": "max", "examples": ["(max [0 0]) -> 0", "(max [8 3 2]) -> 8", "(max [9 5 0]) -> 9", "(max [7 3 2 3 2]) -> 7", "(max [1]) -> 1", "(max [9 8 1 7]) -> 9"], "solution": "(let max (let a (lambda (b) (car b)) _) _)", "time": 0.000811}
{"name": "max", "examples": ["(max [0 2 1 7]) -> 7", "(max [5 4 8 4 9]) -> 9", "(max [6 7 6 9]) -> 9", "(max [3]) -> 3", "(max [1 4 4 7]) -> 7", "(max [4 1 4 9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.047257}
{"name": "max", "examples": ["(max [3]) -> 3", "(max [8 7 8]) -> 8", "(max [5 6 0]) -> 6", "(max [7 8 0 1 8]) -> 8", "(max [4]) -> 4", "(max [1 1 5]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 0 c) d c)) 0)) _) _)", "time": 7.81486}
{"name": "max", "examples": ["(max [3]) -> 3", "(max [6]) -> 6", "(max [1]) -> 1", "(max [9 0]) -> 9", "(max [7]) -> 7", "(max [1 6 5 7]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 0 c) d c)) 0)) _) _)", "time": 8.36257}
{"name": "max", "examples": ["(max [2 8 7]) -> 8", "(max [4 5 6 4 9]) -> 9", "(max [5 1 3 8]) -> 8", "(max [7 5 1 0 6]) -> 7", "(max [6]) -> 6", "(max [7 8 9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.29607}
{"name": "max", "examples": ["(max [0]) -> 0", "(max [2]) -> 2", "(max [7 9 6 8 1]) -> 9", "(max [4 3 8 1 0]) -> 8", "(max [4 5 2 2]) -> 5", "(max [5 9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.746886}
{"name": "max", "examples": ["(max [6 5 5 9 3]) -> 9", "(max [2 0 8 9 3]) -> 9", "(max [7 2]) -> 7", "(max [8 4]) -> 8", "(max [1 5]) -> 5", "(max [1 4 2 2]) -> 4"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.62952}
{"name": "max", "examples": ["(max [0 8 2 4 0]) -> 8", "(max [0 6]) -> 6", "(max [0 4]) -> 4", "(max [6 2 2]) -> 6", "(max [1]) -> 1", "(max [5 5 7 8 1]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 7.814314}
{"name": "max", "examples": ["(max [0]) -> 0", "(max [6 0 5 0 7]) -> 7", "(max [6]) -> 6", "(max [1 4 9 3]) -> 9", "(max [7 6 2 3]) -> 7", "(max [1 3]) -> 3"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.529226}
{"name": "max", "examples": ["(max [5 4 3 6 1]) -> 6", "(max [4 7 4 3]) -> 7", "(max [5 1 6 2 6]) -> 6", "(max [8 0]) -> 8", "(max [3 8 7]) -> 8", "(max [3 8 6 0]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.087751}
{"name": "max", "examples": ["(max [7]) -> 7", "(max [9 5]) -> 9", "(max [1]) -> 1", "(max [7 2 7]) -> 7", "(max [1 4 8 6 9]) -> 9", "(max [4 7 5]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.345005}
{"name": "max", "examples": ["(max [7 1 6 1 0]) -> 7", "(max [1 0]) -> 1", "(max [1]) -> 1", "(max [9 4 4 3]) -> 9", "(max [7 8 0 2 7]) -> 8", "(max [9 5]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.337215}
{"name": "max", "examples": ["(max [2 7 2 9 1]) -> 9", "(max [1 0 7 9 4]) -> 9", "(max [9 0]) -> 9", "(max [9 5 1]) -> 9", "(max [3 9 8 1]) -> 9", "(max [5 0 3 4]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.931553}
{"name": "max", "examples": ["(max [9 3]) -> 9", "(max [1 9 0 7]) -> 9", "(max [1 5 2 6]) -> 6", "(max [2 2 9]) -> 9", "(max [2 6]) -> 6", "(max [9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.581774}
{"name": "max", "examples": ["(max [4 3 0 5]) -> 5", "(max [6 5]) -> 6", "(max [7]) -> 7", "(max [3 1 9]) -> 9", "(max [7 7 0 6]) -> 7", "(max [2 9 7]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.165661}
{"name": "max", "examples": ["(max [9 1 8 6 0]) -> 9", "(max [3 0 3 2 1]) -> 3", "(max [8 4 7 0]) -> 8", "(max [1 5 5 5]) -> 5", "(max [6]) -> 6", "(max [2 1 2]) -> 2"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 1 d) c d)) 1)) _) _)", "time": 9.283718}
{"name": "max", "examples": ["(max [6]) -> 6", "(max [3 1 4]) -> 4", "(max [0 4 6 5]) -> 6", "(max [0 8 5 6 0]) -> 8", "(max [6]) -> 6", "(max [7 2]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.537957}
{"name": "max", "examples": ["(max [9 8 9 4]) -> 9", "(max [4 0 1]) -> 4", "(max [7 6 5]) -> 7", "(max [0 3 9 8]) -> 9", "(max [5 9]) -> 9", "(max [4 3]) -> 4"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.440366}
{"name": "max", "examples": ["(max [8 0 0 7 6]) -> 8", "(max [4 7 9]) -> 9", "(max [1]) -> 1", "(max [0]) -> 0", "(max [6 4 9 6 5]) -> 9", "(max [1 6 0 6 4]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.797288}
{"name": "max", "examples": ["(max [5 6]) -> 6", "(max [6 7 0]) -> 7", "(max [1 1 1]) -> 1", "(max [4 7 5]) -> 7", "(max [1 5 1 0]) -> 5", "(max [5]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.812484}
{"name": "max", "examples": ["(max [9 8 6]) -> 9", "(max [8 4]) -> 8", "(max [6 0 4 5]) -> 6", "(max [8 7 6 6 6]) -> 8", "(max [4 1 2]) -> 4", "(max [2 4 3 8 3]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.363499}
{"name": "max", "examples": ["(max [3 4 3]) -> 4", "(max [1 9]) -> 9", "(max [9 6 1 4]) -> 9", "(max [7]) -> 7", "(max [2 8 3 3]) -> 8", "(max [6 4 2 3]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.658488}
{"name": "max", "examples": ["(max [9 8 8]) -> 9", "(max [7]) -> 7", "(max [6 6 7]) -> 7", "(max [4]) -> 4", "(max [3 7 2 3 0]) -> 7", "(max [3 0 7 1 6]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.807596}
{"name": "max", "examples": ["(max [9 6 2]) -> 9", "(max [8 6 3 3 1]) -> 8", "(max [5]) -> 5", "(max [9 9 0]) -> 9", "(max [8]) -> 8", "(max [6 6]) -> 6"], "solution": "(let max (let a (lambda (b) (car b)) _) _)", "time": 0.000953}
{"name": "max", "examples": ["(max [1 6 7]) -> 7", "(max [9 6]) -> 9", "(max [6 3]) -> 6", "(max [4 5 0 4 1]) -> 5", "(max [7 5 2 7 4]) -> 7", "(max [4 5]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.457597}
{"name": "max", "examples": ["(max [9 2 2 8]) -> 9", "(max [4]) -> 4", "(max [3]) -> 3", "(max [1]) -> 1", "(max [1 9 9 7]) -> 9", "(max [7 1 3]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 1 d) c d)) 1)) _) _)", "time": 9.766212}
{"name": "max", "examples": ["(max [2 0]) -> 2", "(max [1 9]) -> 9", "(max [6 4 8]) -> 8", "(max [8 5 4]) -> 8", "(max [1 3]) -> 3", "(max [5 2 8 6 6]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.269763}
{"name": "max", "examples": ["(max [3 2 2]) -> 3", "(max [9]) -> 9", "(max [3 0 7]) -> 7", "(max [4 0]) -> 4", "(max [1 3 3 9]) -> 9", "(max [3 5]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.347087}
{"name": "max", "examples": ["(max [8]) -> 8", "(max [5 1 2]) -> 5", "(max [1 4]) -> 4", "(max [6]) -> 6", "(max [1 3]) -> 3", "(max [5 5]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 1 d) c d)) 1)) _) _)", "time": 8.506942}
{"name": "max", "examples": ["(max [1 3 2 4 2]) -> 4", "(max [5 1]) -> 5", "(max [8 7]) -> 8", "(max [8 3 1 6]) -> 8", "(max [3 8 8 3]) -> 8", "(max [3 1]) -> 3"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.212248}
{"name": "max", "examples": ["(max [6]) -> 6", "(max [9 2 3 0 6]) -> 9", "(max [7]) -> 7", "(max [8 3 7 5 9]) -> 9", "(max [7 2 8]) -> 8", "(max [0 5]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.387005}
{"name": "max", "examples": ["(max [3 3]) -> 3", "(max [7 4 0]) -> 7", "(max [3]) -> 3", "(max [4]) -> 4", "(max [4 7]) -> 7", "(max [3 2]) -> 3"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.325144}
{"name": "max", "examples": ["(max [3 9 6 1 4]) -> 9", "(max [7 7 4]) -> 7", "(max [5 8 1 8 2]) -> 8", "(max [2 8 2 7]) -> 8", "(max [4]) -> 4", "(max [2 4]) -> 4"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.289521}
{"name": "max", "examples": ["(max [6]) -> 6", "(max [7]) -> 7", "(max [3 0 3]) -> 3", "(max [8]) -> 8", "(max [2]) -> 2", "(max [3 9 2 6]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (+ c (- c (car b)))) 0)) _) _)", "time": 9.153213}
{"name": "max", "examples": ["(max [3 1]) -> 3", "(max [6 7 1 1 1]) -> 7", "(max [3 0 3 8 0]) -> 8", "(max [6 3 0 1]) -> 6", "(max [7 9 6]) -> 9", "(max [6 1 2]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.479284}
{"name": "max", "examples": ["(max [4 3 1 2]) -> 4", "(max [2 2 9 1 1]) -> 9", "(max [0 7 3 1 6]) -> 7", "(max [7 7 2 7]) -> 7", "(max [4 5 7 1]) -> 7", "(max [5 8 1 6 4]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.299942}
{"name": "max", "examples": ["(max [6 7 6]) -> 7", "(max [1 0 1]) -> 1", "(max [6 4 0 0 0]) -> 6", "(max [5 3 6 0 1]) -> 6", "(max [3 1 5]) -> 5", "(max [0 2 5 1 1]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.97083}
{"name": "max", "examples": ["(max [8 0 5]) -> 8", "(max [7 2 1 6]) -> 7", "(max [2]) -> 2", "(max [0 6 3 8]) -> 8", "(max [8 5]) -> 8", "(max [2 2 7 8]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.559519}
{"name": "max", "examples": ["(max [3 9 7 5 9]) -> 9", "(max [3 5 1]) -> 5", "(max [9 5]) -> 9", "(max [0 5]) -> 5", "(max [5 9 9]) -> 9", "(max [5 2 5 8]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.064552}
{"name": "max", "examples": ["(max [0 7 4]) -> 7", "(max [9 1 3]) -> 9", "(max [7 4 3]) -> 7", "(max [7 9 6 0]) -> 9", "(max [7]) -> 7", "(max [8]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.941507}
{"name": "max", "examples": ["(max [2 5 6 1]) -> 6", "(max [6]) -> 6", "(max [4]) -> 4", "(max [3 5]) -> 5", "(max [3 5 0 9 5]) -> 9", "(max [2 8 0 7 5]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.196438}
{"name": "max", "examples": ["(max [6]) -> 6", "(max [4 5 3 4 2]) -> 5", "(max [4 1 1 3 2]) -> 4", "(max [8 0 3 4]) -> 8", "(max [5 0 9 6 0]) -> 9", "(max [6]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.978247}
{"name": "max", "examples": ["(max [3]) -> 3", "(max [8 7 4]) -> 8", "(max [6]) -> 6", "(max [5 8 1 3]) -> 8", "(max [6]) -> 6", "(max [7 9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.11963}
{"name": "max", "examples": ["(max [8 0 1 6 4]) -> 8", "(max [4 2 2 3]) -> 4", "(max [6 2 7 3]) -> 7", "(max [2 7]) -> 7", "(max [7 8]) -> 8", "(max [9 9 1]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.871412}
{"name": "max", "examples": ["(max [8 9 6]) -> 9", "(max [7 1]) -> 7", "(max [5 1]) -> 5", "(max [7 0 9 7]) -> 9", "(max [1 0]) -> 1", "(max [8 5 3]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.224951}
{"name": "max", "examples": ["(max [7 1 7 9 9]) -> 9", "(max [6 6 3]) -> 6", "(max [6 1 1 6 8]) -> 8", "(max [6 6]) -> 6", "(max [9 7 0 2 0]) -> 9", "(max [2 7 8 5]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.380931}
{"name": "max", "examples": ["(max [8 5 9 6]) -> 9", "(max [8 2]) -> 8", "(max [4 7]) -> 7", "(max [4 6 9 6 9]) -> 9", "(max [2 0 4]) -> 4", "(max [5 4]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.606018}
{"name": "max", "examples": ["(max [6]) -> 6", "(max [5 9 4 9]) -> 9", "(max [8]) -> 8", "(max [1 1 4 1]) -> 4", "(max [0 8 9 9 8]) -> 9", "(max [9 2 6]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.930775}
{"name": "max", "examples": ["(max [4 6]) -> 6", "(max [4 7 6]) -> 7", "(max [4 5 9 0 7]) -> 9", "(max [9 9]) -> 9", "(max [9 1 7 0 7]) -> 9", "(max [0 8 6 9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.118533}
{"name": "max", "examples": ["(max [1]) -> 1", "(max [1 3 7 6]) -> 7", "(max [9 3 8 0]) -> 9", "(max [1 8 4]) -> 8", "(max [4 7 2 0]) -> 7", "(max [7 2]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.282111}
{"name": "max", "examples": ["(max [0 6 7 8]) -> 8", "(max [6 1 9]) -> 9", "(max [5 9]) -> 9", "(max [5 7 4 5]) -> 7", "(max [6 6 4 0 5]) -> 6", "(max [4 2]) -> 4"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.004025}
{"name": "max", "examples": ["(max [8 9 3]) -> 9", "(max [1 4]) -> 4", "(max [2 0]) -> 2", "(max [7 7]) -> 7", "(max [9 4]) -> 9", "(max [9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.679423}
{"name": "max", "examples": ["(max [9 6 6 9]) -> 9", "(max [2 6]) -> 6", "(max [7 1 7 6]) -> 7", "(max [7 4]) -> 7", "(max [9]) -> 9", "(max [1 6 1 7]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.648701}
{"name": "max", "examples": ["(max [1]) -> 1", "(max [5 3 8 3 8]) -> 8", "(max [8 6 7 0]) -> 8", "(max [3 3 1 5 2]) -> 5", "(max [2 3 0]) -> 3", "(max [0]) -> 0"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.207144}
{"name": "max", "examples": ["(max [1 8 3 7 4]) -> 8", "(max [4 4]) -> 4", "(max [7 2 5 8 8]) -> 8", "(max [7 5 9]) -> 9", "(max [6 4]) -> 6", "(max [6 7 6 8]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.278671}
{"name": "max", "examples": ["(max [8 6 9]) -> 9", "(max [2 1 0 7]) -> 7", "(max [2 3 8 2]) -> 8", "(max [9 9 2 8]) -> 9", "(max [9 4 2 2]) -> 9", "(max [0]) -> 0"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.174634}
{"name": "max", "examples": ["(max [0 6]) -> 6", "(max [8 5 6 2]) -> 8", "(max [6 8 1 8]) -> 8", "(max [8 1 2 8]) -> 8", "(max [1 3 5 1]) -> 5", "(max [0 1 8 1]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.913717}
{"name": "max", "examples": ["(max [6 8 2 3 8]) -> 8", "(max [6]) -> 6", "(max [6 2 6]) -> 6", "(max [8 2]) -> 8", "(max [2 0 2 9]) -> 9", "(max [4 4 6 6]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.718341}
{"name": "max", "examples": ["(max [1 8]) -> 8", "(max [9 4 1]) -> 9", "(max [0]) -> 0", "(max [3 8 1 7]) -> 8", "(max [1 5 5 9 3]) -> 9", "(max [5 5]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.02892}
{"name": "max", "examples": ["(max [7 2]) -> 7", "(max [9 7]) -> 9", "(max [4 3]) -> 4", "(max [7 1 0 5 4]) -> 7", "(max [4 2 2 5 8]) -> 8", "(max [3]) -> 3"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.428515}
{"name": "max", "examples": ["(max [7 4 4 6 3]) -> 7", "(max [6 2 7 3 4]) -> 7", "(max [1 9 8]) -> 9", "(max [6 9 8 9]) -> 9", "(max [5]) -> 5", "(max [0]) -> 0"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.486934}
{"name": "max", "examples": ["(max [6 9 3 6 0]) -> 9", "(max [4 0 1 5 4]) -> 5", "(max [7 1]) -> 7", "(max [7 0 1]) -> 7", "(max [9 8 9 0]) -> 9", "(max [2 0 3 8 1]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.434521}
{"name": "max", "examples": ["(max [7 9 7]) -> 9", "(max [7 0 4 7 3]) -> 7", "(max [0 4 5 8]) -> 8", "(max [7 2 7 5 2]) -> 7", "(max [4 0 3]) -> 4", "(max [4]) -> 4"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.860465}
{"name": "max", "examples": ["(max [3 5 1 6 7]) -> 7", "(max [9 6 3]) -> 9", "(max [0 5 7 3]) -> 7", "(max [8 4 7 1 7]) -> 8", "(max [4 3 6 1 6]) -> 6", "(max [6 5 7 6]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.521331}
{"name": "max", "examples": ["(max [0]) -> 0", "(max [4 7 6 7]) -> 7", "(max [6 6 8 0 4]) -> 8", "(max [3 8]) -> 8", "(max [1]) -> 1", "(max [0 8]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.445829}
{"name": "max", "examples": ["(max [1 8 6]) -> 8", "(max [0 6 9 7 5]) -> 9", "(max [1 1 4 6 7]) -> 7", "(max [6]) -> 6", "(max [1]) -> 1", "(max [9 2 0 3 1]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 7.475052}
{"name": "max", "examples": ["(max [5 4 0 6 0]) -> 6", "(max [9]) -> 9", "(max [3 4 0 1 9]) -> 9", "(max [9 2 2 0 5]) -> 9", "(max [1 9 1]) -> 9", "(max [0 3 2]) -> 3"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.102924}
{"name": "max", "examples": ["(max [5 4]) -> 5", "(max [0 4 2 0 1]) -> 4", "(max [1 8 0 5]) -> 8", "(max [5]) -> 5", "(max [8 2 7]) -> 8", "(max [4 3 9 0 5]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.95943}
{"name": "max", "examples": ["(max [9 5 9 6 4]) -> 9", "(max [2]) -> 2", "(max [5 0 8 7]) -> 8", "(max [1 4 3]) -> 4", "(max [4 4]) -> 4", "(max [9 8 4 0]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.223219}
{"name": "max", "examples": ["(max [7 8]) -> 8", "(max [4 6]) -> 6", "(max [4 1]) -> 4", "(max [9 2 3 9]) -> 9", "(max [0 2]) -> 2", "(max [4 1 5 7 1]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 1 c) d c)) 0)) _) _)", "time": 8.006703}
{"name": "max", "examples": ["(max [4 7]) -> 7", "(max [3 8]) -> 8", "(max [6]) -> 6", "(max [7 2 0]) -> 7", "(max [9 3 7 5 9]) -> 9", "(max [4 5 3 5]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 7.449337}
{"name": "max", "examples": ["(max [7 8 4 8 8]) -> 8", "(max [1 9 8 0]) -> 9", "(max [7 0]) -> 7", "(max [1 1]) -> 1", "(max [0 3 8 6 9]) -> 9", "(max [8 6]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.13183}
{"name": "max", "examples": ["(max [4 4 7]) -> 7", "(max [7 8 7]) -> 8", "(max [0]) -> 0", "(max [3]) -> 3", "(max [9 4]) -> 9", "(max [8 5]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.775609}
{"name": "max", "examples": ["(max [1 9 6 9 0]) -> 9", "(max [3 9 9 9]) -> 9", "(max [1 6 3 2]) -> 6", "(max [3 2]) -> 3", "(max [2 0 6]) -> 6", "(max [1 5 6 5 4]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.459362}
{"name": "max", "examples": ["(max [0 7 3 9]) -> 9", "(max [8]) -> 8", "(max [5 0 7 4 8]) -> 8", "(max [3 1]) -> 3", "(max [9 7]) -> 9", "(max [8 6 1]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.498136}
