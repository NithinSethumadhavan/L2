{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 c)))) _) _)", "time": 0.050373, "examples": ["(evens []) -> []", "(evens [5]) -> []", "(evens [1]) -> []", "(evens [0 5]) -> [0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 c)))) _) _)", "time": 0.063316, "examples": ["(evens []) -> []", "(evens [0]) -> [0]", "(evens []) -> []", "(evens [9 9 1 3]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 c)))) _) _)", "time": 0.104125, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [1 9 3]) -> []", "(evens [3 0 0 1]) -> [0 0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (!= c (car b))))) _) _)", "time": 0.30898, "examples": ["(evens []) -> []", "(evens [1]) -> []", "(evens [3 8 2 2 3]) -> [8 2 2]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (foldr b (lambda (d c) (cons c [])) [])) _) _)", "time": 0.123293, "examples": ["(evens []) -> []", "(evens [6 3]) -> [6]", "(evens [2 7]) -> [2]", "(evens [6 5 1]) -> [6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (foldl b (lambda (d c) (cdr b)) [])) _) _)", "time": 0.068016, "examples": ["(evens []) -> []", "(evens [1]) -> []", "(evens []) -> []", "(evens [3 0 6]) -> [0 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (foldr b (lambda (d c) (cons c [])) [])) _) _)", "time": 0.11511, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens []) -> []", "(evens [8 7 1 3]) -> [8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (foldl b (lambda (e d) (= e (<= d c))) #f)))) _) _)", "time": 23.912897, "examples": ["(evens []) -> []", "(evens [9 8]) -> [8]", "(evens [9 8 1]) -> [8]", "(evens [0 7 2 1]) -> [0 2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 46.028332, "examples": ["(evens []) -> []", "(evens [8 7 1]) -> [8]", "(evens [2]) -> [2]", "(evens [6 9 2 0 0]) -> [6 2 0 0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 56.935212, "examples": ["(evens []) -> []", "(evens [8 1 4 4]) -> [8 4 4]", "(evens [4]) -> [4]", "(evens [1 3]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (<= c (car b))))) _) _)", "time": 0.398474, "examples": ["(evens []) -> []", "(evens [4 5 4]) -> [4 4]", "(evens []) -> []", "(evens [8 0 0]) -> [8 0 0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 58.166605, "examples": ["(evens []) -> []", "(evens [4 9 2 7 7]) -> [4 2]", "(evens [7 8 9 3]) -> [8]", "(evens [5 9 4 9]) -> [4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 60.236605, "examples": ["(evens []) -> []", "(evens [1 0]) -> [0]", "(evens [6 1 1 3 4]) -> [6 4]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 61.403255, "examples": ["(evens []) -> []", "(evens [5 7 6 3 5]) -> [6]", "(evens [9 1]) -> []", "(evens [4 8 4 5 5]) -> [4 8 4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (!= c (car (cdr b)))))) _) _)", "time": 0.478117, "examples": ["(evens []) -> []", "(evens [4 7]) -> [4]", "(evens [0 7 6 7]) -> [0 6]", "(evens [0 9]) -> [0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 63.14137, "examples": ["(evens []) -> []", "(evens [2 1 8 4 8]) -> [2 8 4 8]", "(evens [5 1 2 0]) -> [2 0]", "(evens [6 0 4 2 2]) -> [6 0 4 2 2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 64.285026, "examples": ["(evens []) -> []", "(evens [0 9 4 9]) -> [0 4]", "(evens [0 2 0]) -> [0 2 0]", "(evens [1 7 6]) -> [6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 65.591213, "examples": ["(evens []) -> []", "(evens [5 9]) -> []", "(evens [9 3 7 9 6]) -> [6]", "(evens [2 4 2]) -> [2 4 2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (foldl b (lambda (d c) (cdr (cdr b))) [])) _) _)", "time": 0.103418, "examples": ["(evens []) -> []", "(evens [9 9 2]) -> [2]", "(evens [7 7]) -> []", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 66.404093, "examples": ["(evens []) -> []", "(evens [0 4 1]) -> [0 4]", "(evens [5 9 5 5 8]) -> [8]", "(evens [1 0]) -> [0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 68.747311, "examples": ["(evens []) -> []", "(evens [6 8]) -> [6 8]", "(evens [2 5 2 0]) -> [2 2 0]", "(evens [0 9 0 5 4]) -> [0 0 4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 68.725289, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [8 8 6 2 3]) -> [8 8 6 2]", "(evens [6 8 4]) -> [6 8 4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 69.90226, "examples": ["(evens []) -> []", "(evens [8 9 5 7 8]) -> [8 8]", "(evens [7]) -> []", "(evens [8 5 7]) -> [8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 69.882005, "examples": ["(evens []) -> []", "(evens [7 3 0]) -> [0]", "(evens [9 2]) -> [2]", "(evens [4 4 7]) -> [4 4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 70.553377, "examples": ["(evens []) -> []", "(evens [8 4]) -> [8 4]", "(evens [8 1 5 7]) -> [8]", "(evens [7 6 1 4 0]) -> [6 4 0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 1 (- c 1))))) _) _)", "time": 0.529882, "examples": ["(evens []) -> []", "(evens [1]) -> []", "(evens [2 1 2 3]) -> [2 2]", "(evens [5]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (car b)))))) _) _)", "time": 2.057582, "examples": ["(evens []) -> []", "(evens [4 7 7 3]) -> [4]", "(evens []) -> []", "(evens [4 9 8 3]) -> [4 8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 70.858789, "examples": ["(evens []) -> []", "(evens [1 5 4 5]) -> [4]", "(evens [5 6 2 0 5]) -> [6 2 0]", "(evens [5 4 9 7 6]) -> [4 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (foldl b (lambda (d c) (foldl d (lambda (f e) (cdr b)) [2])) [])) _) _)", "time": 0.708633, "examples": ["(evens []) -> []", "(evens [2]) -> [2]", "(evens []) -> []", "(evens [9 0 0 8]) -> [0 0 8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (foldl b (lambda (d c) (cons c [])) [])) _) _)", "time": 0.087049, "examples": ["(evens []) -> []", "(evens [0]) -> [0]", "(evens [3 1 3 6]) -> [6]", "(evens [0]) -> [0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 65.290066, "examples": ["(evens []) -> []", "(evens [9 5 2 6]) -> [2 6]", "(evens [2 7 5 2 3]) -> [2 2]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (foldl b (lambda (e d) (= e (<= c d))) #f)))) _) _)", "time": 21.461984, "examples": ["(evens []) -> []", "(evens [1 6]) -> [6]", "(evens [6 3 3 9 5]) -> [6]", "(evens [5]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (foldr b (lambda (d c) (cons c [])) [])) _) _)", "time": 0.168655, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [6 9]) -> [6]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 51.847869, "examples": ["(evens []) -> []", "(evens [3 7 4 6]) -> [4 6]", "(evens [1 4 2 0 5]) -> [4 2 0]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 42.051812, "examples": ["(evens []) -> []", "(evens [4 7 9]) -> [4]", "(evens [7]) -> []", "(evens [8 9 9 6]) -> [8 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (foldl b (lambda (d c) (filter b (lambda (e) (= c e)))) [])) _) _)", "time": 2.067505, "examples": ["(evens []) -> []", "(evens [9 8 8]) -> [8 8]", "(evens [9 5 4]) -> [4]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) b) _) _)", "time": 0.000633, "examples": ["(evens []) -> []", "(evens [2]) -> [2]", "(evens [4]) -> [4]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 48.362006, "examples": ["(evens []) -> []", "(evens [2]) -> [2]", "(evens [0 2 7 3]) -> [0 2]", "(evens [8 3 1 8]) -> [8 8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 48.092495, "examples": ["(evens []) -> []", "(evens [8 7 0 1 6]) -> [8 0 6]", "(evens [6 0 6 7]) -> [6 0 6]", "(evens [9]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) b) _) _)", "time": 0.000971, "examples": ["(evens []) -> []", "(evens [4]) -> [4]", "(evens [2 2]) -> [2 2]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 59.969285, "examples": ["(evens []) -> []", "(evens [9 1]) -> []", "(evens [4 2]) -> [4 2]", "(evens [4 8 9 7]) -> [4 8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) []) _) _)", "time": 0.000646, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens []) -> []", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 54.260425, "examples": ["(evens []) -> []", "(evens [8]) -> [8]", "(evens [4 4]) -> [4 4]", "(evens [7 2 8 6 1]) -> [2 8 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 54.084021, "examples": ["(evens []) -> []", "(evens [5 9 0 0]) -> [0 0]", "(evens [3 3 7 6 7]) -> [6]", "(evens [2 5 5 9 7]) -> [2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 49.240042, "examples": ["(evens []) -> []", "(evens [5 7]) -> []", "(evens [4 3]) -> [4]", "(evens [2 8]) -> [2 8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (car b)))))) _) _)", "time": 2.305289, "examples": ["(evens []) -> []", "(evens [4 1]) -> [4]", "(evens [2 7 8 3 8]) -> [2 8 8]", "(evens [8 8]) -> [8 8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (< c (car b))))) _) _)", "time": 0.218483, "examples": ["(evens []) -> []", "(evens [7 4 9 7]) -> [4]", "(evens [9]) -> []", "(evens [7]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (foldl b (lambda (d c) (cdr b)) [])) _) _)", "time": 0.047351, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [3]) -> []", "(evens [1 2 4 2]) -> [2 4 2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (!= 1 c)))) _) _)", "time": 0.075787, "examples": ["(evens []) -> []", "(evens [8 6 6 8 1]) -> [8 6 6 8]", "(evens [6 2 6]) -> [6 2 6]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 56.484943, "examples": ["(evens []) -> []", "(evens [4 0 6 7]) -> [4 0 6]", "(evens [7]) -> []", "(evens [8 5 2 9]) -> [8 2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (foldl b (lambda (d c) (filter b (lambda (e) (!= c e)))) [])) _) _)", "time": 1.199265, "examples": ["(evens []) -> []", "(evens [4 1]) -> [4]", "(evens [3]) -> []", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 52.635625, "examples": ["(evens []) -> []", "(evens [0 8]) -> [0 8]", "(evens [8 1 4 9]) -> [8 4]", "(evens [3 6 4 0 7]) -> [6 4 0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (<= c (car (cdr b)))))) _) _)", "time": 0.995591, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [6 8]) -> [6 8]", "(evens [9 2]) -> [2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 70.045938, "examples": ["(evens []) -> []", "(evens [0 8 0 3 4]) -> [0 8 0 4]", "(evens []) -> []", "(evens [1 8 7 4 1]) -> [8 4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (!= c (car (cdr b)))))) _) _)", "time": 1.031912, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [6 9 0]) -> [6 0]", "(evens [0 1 2 1]) -> [0 2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 65.232851, "examples": ["(evens []) -> []", "(evens [3 8 5 8]) -> [8 8]", "(evens [0 2 1 3]) -> [0 2]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (!= c (car (cdr b)))))) _) _)", "time": 0.459114, "examples": ["(evens []) -> []", "(evens [0 7 7 4]) -> [0 4]", "(evens []) -> []", "(evens [4 9 8 9]) -> [4 8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 61.108915, "examples": ["(evens []) -> []", "(evens [3 6 9 7 1]) -> [6]", "(evens [1 3 4]) -> [4]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 62.688315, "examples": ["(evens []) -> []", "(evens [4 2]) -> [4 2]", "(evens [4 3 5 4 4]) -> [4 4 4]", "(evens [2 6]) -> [2 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 47.289885, "examples": ["(evens []) -> []", "(evens [2 8 0]) -> [2 8 0]", "(evens [6 5 6 9]) -> [6 6]", "(evens [5 0 6 0]) -> [0 6 0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 51.072215, "examples": ["(evens []) -> []", "(evens [7 3 2]) -> [2]", "(evens [1 7 6 3 0]) -> [6 0]", "(evens [4 8 1 8 3]) -> [4 8 8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 35.455371, "examples": ["(evens []) -> []", "(evens [0 9 0]) -> [0 0]", "(evens [1]) -> []", "(evens [6 0 2]) -> [6 0 2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) []) _) _)", "time": 0.000775, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [7 5]) -> []", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 c)))) _) _)", "time": 0.089302, "examples": ["(evens []) -> []", "(evens [9 9 3 3]) -> []", "(evens [0]) -> [0]", "(evens [3]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 51.851679, "examples": ["(evens []) -> []", "(evens [9 2 8 6 1]) -> [2 8 6]", "(evens [6 1 1]) -> [6]", "(evens [0]) -> [0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (!= 0 (% (car b) c))))) _) _)", "time": 2.519398, "examples": ["(evens []) -> []", "(evens [7 7 4 1]) -> [4]", "(evens []) -> []", "(evens [3]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) b) _) _)", "time": 0.0006, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens []) -> []", "(evens [0]) -> [0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (!= c (car (cdr (cdr b))))))) _) _)", "time": 2.753253, "examples": ["(evens []) -> []", "(evens [0 6 1 8]) -> [0 6 8]", "(evens [2 4 1 6]) -> [2 4 6]", "(evens [2 0 3]) -> [2 0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 59.339577, "examples": ["(evens []) -> []", "(evens [8 9 1 5]) -> [8]", "(evens [3 7]) -> []", "(evens [2 1 3 4]) -> [2 4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (foldl b (lambda (d c) (cons 0 (cons c []))) [])) _) _)", "time": 0.65895, "examples": ["(evens []) -> []", "(evens [0 7 8]) -> [0 8]", "(evens []) -> []", "(evens [1 0 6]) -> [0 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons 0 []))) [])) _) _)", "time": 0.505929, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [4 0 3]) -> [4 0]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 54.365849, "examples": ["(evens []) -> []", "(evens [5 7 7 5 9]) -> []", "(evens [8 2 3]) -> [8 2]", "(evens [6 6 8 7 6]) -> [6 6 8 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (foldl b (lambda (d c) (cons c [])) [])) _) _)", "time": 0.100012, "examples": ["(evens []) -> []", "(evens [1 7 6]) -> [6]", "(evens [8]) -> [8]", "(evens [1 6]) -> [6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 46.93059, "examples": ["(evens []) -> []", "(evens [8]) -> [8]", "(evens [9 4 2]) -> [4 2]", "(evens [9]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (foldl b (lambda (e d) (~ e)) (< (car b) c))))) _) _)", "time": 21.997681, "examples": ["(evens []) -> []", "(evens [4 2 7 2 0]) -> [4 2 2 0]", "(evens []) -> []", "(evens [7 8]) -> [8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (foldl b (lambda (d c) (filter b (lambda (e) (= c (- e c))))) [])) _) _)", "time": 11.367614, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [9 7 6 3]) -> [6]", "(evens [7]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 49.305915, "examples": ["(evens []) -> []", "(evens [8 6 8 5]) -> [8 6 8]", "(evens [5 9 8 0]) -> [8 0]", "(evens [7]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 56.266874, "examples": ["(evens []) -> []", "(evens [7 3 8 4 5]) -> [8 4]", "(evens [9 5 7 0]) -> [0]", "(evens [0 3 2 3 2]) -> [0 2 2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 60.675379, "examples": ["(evens []) -> []", "(evens [5 3 5 9 0]) -> [0]", "(evens [9 9 2 5 6]) -> [2 6]", "(evens [9 0 9]) -> [0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= [] (cdr b))))) _) _)", "time": 0.227863, "examples": ["(evens []) -> []", "(evens [8]) -> [8]", "(evens [1 9 5 7]) -> []", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 52.016924, "examples": ["(evens []) -> []", "(evens [5 9 6]) -> [6]", "(evens [2 6 2 6]) -> [2 6 2 6]", "(evens [1]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (!= 1 c)))) _) _)", "time": 0.162546, "examples": ["(evens []) -> []", "(evens [0 4 0 0]) -> [0 4 0 0]", "(evens []) -> []", "(evens [1 2]) -> [2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 c)))) _) _)", "time": 0.123967, "examples": ["(evens []) -> []", "(evens [0 0 9]) -> [0 0]", "(evens [3 7 3 9 9]) -> []", "(evens [9 0]) -> [0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 47.097016, "examples": ["(evens []) -> []", "(evens [7 7 8 6]) -> [8 6]", "(evens [0 3 1 1]) -> [0]", "(evens [5 3 0 7]) -> [0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 53.918747, "examples": ["(evens []) -> []", "(evens [6 5 3 0]) -> [6 0]", "(evens [6]) -> [6]", "(evens [8 4 9]) -> [8 4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 65.204325, "examples": ["(evens []) -> []", "(evens [6 9 9 1]) -> [6]", "(evens [9 3]) -> []", "(evens [6 5 4 6]) -> [6 4 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 55.972758, "examples": ["(evens []) -> []", "(evens [7 6]) -> [6]", "(evens [3 9 0 5 6]) -> [0 6]", "(evens []) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 49.9673, "examples": ["(evens []) -> []", "(evens [5 1 7]) -> []", "(evens [6 0]) -> [6 0]", "(evens [8 5 0 2]) -> [8 0 2]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 70.992698, "examples": ["(evens []) -> []", "(evens [9 4 6 9 7]) -> [4 6]", "(evens [7 0 1]) -> [0]", "(evens [5 2 6 5 9]) -> [2 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 58.365526, "examples": ["(evens []) -> []", "(evens [6 0 4 8]) -> [6 0 4 8]", "(evens [0 2 6 7]) -> [0 2 6]", "(evens [2 8 7 9]) -> [2 8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (foldl b (lambda (d c) (filter b (lambda (e) (!= c (- e 1))))) [])) _) _)", "time": 6.609666, "examples": ["(evens []) -> []", "(evens [4 6 0 8 2]) -> [4 6 0 8 2]", "(evens [5 6 4]) -> [6 4]", "(evens [8]) -> [8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 38.125027, "examples": ["(evens []) -> []", "(evens [3 2 0 8]) -> [2 0 8]", "(evens [4 7 9 9 1]) -> [4]", "(evens [9]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 35.142363, "examples": ["(evens []) -> []", "(evens [2]) -> [2]", "(evens [1 4 4]) -> [4 4]", "(evens [5 9 0 5 6]) -> [0 6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 30.118095, "examples": ["(evens []) -> []", "(evens [2 7 8]) -> [2 8]", "(evens [2 1 3]) -> [2]", "(evens [1]) -> []"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 43.635468, "examples": ["(evens []) -> []", "(evens [8 0 3 2 9]) -> [8 0 2]", "(evens [0 7 0 7 4]) -> [0 0 4]", "(evens [6 5]) -> [6]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 39.967627, "examples": ["(evens []) -> []", "(evens [2 4]) -> [2 4]", "(evens [1 2]) -> [2]", "(evens [5 6 8]) -> [6 8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 41.176773, "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [0 4]) -> [0 4]", "(evens [2 3 1 8 9]) -> [2 8]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 44.729482, "examples": ["(evens []) -> []", "(evens [6 0 6]) -> [6 0 6]", "(evens [1 1 6 1]) -> [6]", "(evens [0 7]) -> [0]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 29.206214, "examples": ["(evens []) -> []", "(evens [9 8 6]) -> [8 6]", "(evens [2 7 0 0]) -> [2 0 0]", "(evens [1 4 7 4]) -> [4 4]"], "name": "evens"}
{"solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)", "time": 36.897148, "examples": ["(evens []) -> []", "(evens [5 2 8 4 9]) -> [2 8 4]", "(evens [1 5]) -> []", "(evens [1 3 9 0 9]) -> [0]"], "name": "evens"}
