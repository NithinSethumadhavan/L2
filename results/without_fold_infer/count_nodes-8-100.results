{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2 {7}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) c) 0)) _) _)", "time": 0.092227}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8 {7 {4}}}) -> 3", "(count_nodes {9 {2} {0 {7}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {3 {0 {4 {0}}} {2 {2 {2} {8}} {4 {4}}}}) -> 10", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.612332}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {4 {3}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {6 {5 {3 {2}} {1}} {4 {7 {1}}}}) -> 8", "(count_nodes {3 {7 {7} {0}}}) -> 4", "(count_nodes {1 {3 {0} {8}}}) -> 4", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.595143}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {1} {1 {9 {9} {0}}}}) -> 6", "(count_nodes {6}) -> 1", "(count_nodes {2 {5 {5 {0}} {0 {7}}}}) -> 6", "(count_nodes {7 {7} {2}}) -> 3", "(count_nodes {2}) -> 1", "(count_nodes {2 {3}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.647632}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {0 {8 {3} {7}}}}) -> 5", "(count_nodes {7 {5 {3}}}) -> 3", "(count_nodes {6 {0}}) -> 2", "(count_nodes {3}) -> 1", "(count_nodes {2 {1}}) -> 2", "(count_nodes {7 {9 {9}} {4 {0 {3}}}}) -> 6"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.727963}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {7 {4}}}) -> 3", "(count_nodes {0}) -> 1", "(count_nodes {9}) -> 1", "(count_nodes {0 {7 {0} {4}}}) -> 4", "(count_nodes {9}) -> 1", "(count_nodes {7 {7}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 6.108093}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {4 {6} {4}} {1}}) -> 5", "(count_nodes {8 {2 {4}} {8}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {0 {4 {4 {7} {0}} {3}} {0 {7 {5} {0}}}}) -> 10", "(count_nodes {9}) -> 1", "(count_nodes {3}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 6.094135}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {8}) -> 1", "(count_nodes {4 {9 {0} {2}}}) -> 4", "(count_nodes {3 {5 {5 {5} {0}}}}) -> 5", "(count_nodes {2}) -> 1", "(count_nodes {5 {1 {1 {5} {3}} {3}}}) -> 6"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 6.188994}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {4 {9}} {0}}) -> 4", "(count_nodes {6 {8 {8 {6}} {8 {6} {8}}} {1 {4 {3}}}}) -> 10", "(count_nodes {0 {7} {4 {0 {2} {3}} {8 {2} {5}}}}) -> 9", "(count_nodes {7 {6 {1 {7} {7}}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {8 {4} {7}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 7.184988}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {8 {1 {0}}}) -> 3", "(count_nodes {4 {9}}) -> 2", "(count_nodes {1 {2}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {7}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 e)) 1)) 0)) _) _)", "time": 7.159466}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {7 {5 {9 {6} {6}} {9}} {4}}) -> 7", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {6 {7}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 6.959788}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {1} {4 {5} {6 {8}}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {8 {8 {5 {7}} {1 {7} {4}}} {2 {0}}}) -> 9", "(count_nodes {5 {6 {3}}}) -> 3", "(count_nodes {6}) -> 1", "(count_nodes {4}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 7.288345}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {5}) -> 1", "(count_nodes {7 {2}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {7 {1 {3} {7}} {3 {5 {2}}}}) -> 7"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 7.257589}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {6}}) -> 2", "(count_nodes {4 {7 {8}} {9 {6}}}) -> 5", "(count_nodes {9 {8}}) -> 2", "(count_nodes {4 {5 {4}}}) -> 3", "(count_nodes {0 {3}}) -> 2", "(count_nodes {6 {9} {8}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 7.252495}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {8}}) -> 2", "(count_nodes {3 {1 {3} {0}} {5 {8} {9}}}) -> 7", "(count_nodes {4 {2} {6}}) -> 3", "(count_nodes {3}) -> 1", "(count_nodes {5 {2} {5 {0}}}) -> 4", "(count_nodes {2 {9}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 7.45047}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {6 {0 {2} {5}} {1 {4}}} {0}}) -> 8", "(count_nodes {1}) -> 1", "(count_nodes {1 {6 {8} {6}}}) -> 4", "(count_nodes {9 {2 {9 {9}} {2 {3} {1}}} {4 {7} {5}}}) -> 10", "(count_nodes {7 {5} {2}}) -> 3", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 7.460621}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3 {2 {4}}}) -> 3", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2 {2}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) c) 1)) 0)) _) _)", "time": 1.421416}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {1 {6} {0 {9}}}) -> 4", "(count_nodes {1 {8}}) -> 2", "(count_nodes {3 {7 {5} {4}} {4}}) -> 5", "(count_nodes {1 {2}}) -> 2", "(count_nodes {0}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 7.133916}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {7 {2 {0} {2}} {9}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {4 {3}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (- c (+ 1 1))) 0)) _) _)", "time": 0.651181}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {3 {7} {5}}) -> 3", "(count_nodes {9 {6 {2} {0}} {2}}) -> 5", "(count_nodes {2 {0} {4 {0 {6}}}}) -> 5", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.133354}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {7} {5}}) -> 3", "(count_nodes {3 {0} {8}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {8 {9 {7 {6} {8}}}}) -> 5", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.02775}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {1}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {1 {3 {1} {5}} {1 {9} {7}}}) -> 7", "(count_nodes {1}) -> 1", "(count_nodes {0 {1} {2}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.517017}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {1} {1 {2} {7}}}) -> 5", "(count_nodes {7 {6 {1}} {0}}) -> 4", "(count_nodes {0 {8 {8} {8}} {0 {7} {4}}}) -> 7", "(count_nodes {6 {4 {2 {7} {7}} {7}} {5 {9 {5} {5}}}}) -> 10", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.966061}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {0} {6}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {7 {7} {3 {9} {6}}}) -> 5", "(count_nodes {5 {2 {4 {7} {3}}} {7 {1} {4}}}) -> 8"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.855224}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {3 {5} {1}} {8 {0} {8}}}) -> 7", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {9 {5}}) -> 2", "(count_nodes {1}) -> 1", "(count_nodes {3}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.41076}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {7 {0 {7} {0 {8} {4}}} {8 {6 {5}} {0 {1} {4}}}}) -> 12", "(count_nodes {9 {2}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {4 {4 {6 {9}} {6 {1} {3}}}}) -> 7"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.808555}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {9}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {6 {3}}) -> 2", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 1)) 1)) 0)) _) _)", "time": 4.530283}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {1 {2} {4}}}) -> 4", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {4 {8}}) -> 2", "(count_nodes {2}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.373007}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {6 {9} {7}} {0 {6} {5}}}) -> 7", "(count_nodes {1}) -> 1", "(count_nodes {7 {3 {5} {8 {3} {1}}} {9 {1 {3}}}}) -> 9", "(count_nodes {6 {3} {3}}) -> 3", "(count_nodes {7 {7}}) -> 2", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.97081}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {8}}) -> 2", "(count_nodes {5 {9 {2} {1}}}) -> 4", "(count_nodes {7 {0 {7} {9}} {3}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {6 {4}}) -> 2", "(count_nodes {2 {0 {5 {3}}}}) -> 4"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.731886}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {5}}) -> 2", "(count_nodes {5 {6}}) -> 2", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {6 {6 {3}}}) -> 3", "(count_nodes {8}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 e)) 1)) 0)) _) _)", "time": 4.683471}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {6 {8} {6 {0} {6}}} {5 {5} {4 {9} {8}}}}) -> 11", "(count_nodes {}) -> 0", "(count_nodes {7 {3 {7 {7}} {8 {2}}} {2 {6 {2}}}}) -> 9", "(count_nodes {1}) -> 1", "(count_nodes {8 {1 {0 {8} {4}} {9}} {3 {8 {9}}}}) -> 9", "(count_nodes {3 {8 {1}}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.909407}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {3} {6 {1}}}) -> 4", "(count_nodes {8 {7 {2 {5}}}}) -> 4", "(count_nodes {6 {2}}) -> 2", "(count_nodes {7 {2}}) -> 2", "(count_nodes {2 {1} {0 {4} {4}}}) -> 5", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.974094}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {3} {0 {7 {7}} {0 {3} {7}}}}) -> 8", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {7 {1 {0} {4}}}) -> 4", "(count_nodes {6 {2 {0 {0}}} {4 {3 {3} {1}} {5}}}) -> 9", "(count_nodes {7}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.816214}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {3 {2}}) -> 2", "(count_nodes {9 {5 {2} {0}} {0 {9} {3}}}) -> 7", "(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.079172}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8 {9}}) -> 2", "(count_nodes {6}) -> 1", "(count_nodes {2}) -> 1", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {8 {5 {8} {5}} {0 {0} {6}}}) -> 7"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.218895}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {3 {1 {4} {7}} {6 {9}}}) -> 6", "(count_nodes {2 {7}}) -> 2", "(count_nodes {0 {9 {5} {3}} {0}}) -> 5", "(count_nodes {1}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.788975}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {4} {6}}) -> 3", "(count_nodes {4 {0 {9 {6} {0}} {9 {8}}} {4 {3 {0}}}}) -> 10", "(count_nodes {3 {2} {5 {8}}}) -> 4", "(count_nodes {9 {9} {6}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {3 {1}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.999008}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3 {6 {2} {9}}}) -> 4", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ c 1)) 1)) 0)) _) _)", "time": 4.835128}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {8}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {3 {7 {7 {8} {6}} {7 {5} {0}}}}) -> 8", "(count_nodes {6 {7}}) -> 2", "(count_nodes {6}) -> 1", "(count_nodes {7 {7 {6} {9 {5}}} {6}}) -> 6"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.935182}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {0 {1}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {9}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 1)) 1)) 0)) _) _)", "time": 4.580153}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {0 {2} {9}}) -> 3", "(count_nodes {4}) -> 1", "(count_nodes {8 {3 {9 {3} {8}}}}) -> 5"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.315243}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {5 {4}} {7 {3 {7} {3}}}}) -> 7", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {8 {5}}) -> 2", "(count_nodes {0 {7 {6} {8}}}) -> 4"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.771394}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {8 {3 {1}}}) -> 3", "(count_nodes {8}) -> 1", "(count_nodes {6 {3 {8 {4}} {0 {5} {2}}}}) -> 7", "(count_nodes {1}) -> 1", "(count_nodes {3 {2} {2 {1 {3} {6}} {8}}}) -> 7"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.046038}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {5 {7 {9 {7}} {1 {7} {8}}}}) -> 7", "(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.39819}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {9 {3 {5}}} {1 {6 {3} {9}}}}) -> 8", "(count_nodes {}) -> 0", "(count_nodes {5 {5}}) -> 2", "(count_nodes {2 {2} {3}}) -> 3", "(count_nodes {0 {8 {8} {0}}}) -> 4", "(count_nodes {9 {9 {3}} {0 {9} {5 {0}}}}) -> 7"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.343916}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) 1) 0)) _) _)", "time": 0.024728}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {8 {4} {8 {0 {5}} {6 {3}}}}) -> 7", "(count_nodes {7}) -> 1", "(count_nodes {3}) -> 1", "(count_nodes {3 {1}}) -> 2", "(count_nodes {3 {4 {0 {3}} {2}}}) -> 5"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.851184}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {1} {0 {3}}}) -> 4", "(count_nodes {8 {7} {3 {1}}}) -> 4", "(count_nodes {7}) -> 1", "(count_nodes {8 {8}}) -> 2", "(count_nodes {3}) -> 1", "(count_nodes {8 {3} {1 {9}}}) -> 4"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f f)) 1)) 0)) _) _)", "time": 5.234585}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {3 {0} {3}}) -> 3", "(count_nodes {7 {6}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 5.298482}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {1 {8 {9} {9}} {3 {4} {9}}}}) -> 8", "(count_nodes {0 {6 {4} {8}}}) -> 4", "(count_nodes {8}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {1 {3 {3 {8} {7}} {9}}}) -> 6", "(count_nodes {9 {4} {8}}) -> 3"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.141409}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {7 {0} {0 {8}}}) -> 4", "(count_nodes {7 {8 {0 {7}} {6 {8}}}}) -> 6"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.978058}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {1}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {4 {7}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {4}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 1)) 1)) 0)) _) _)", "time": 3.772293}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {9 {7}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {7 {5 {0}} {0}}) -> 4", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f f)) 1)) 0)) _) _)", "time": 3.54491}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {3} {0}}) -> 3", "(count_nodes {9 {2} {3}}) -> 3", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {6 {0 {7 {7} {6}} {3}} {6 {8} {1 {8} {1}}}}) -> 11", "(count_nodes {1}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.497524}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {3 {2 {7}} {0 {9}}}) -> 5", "(count_nodes {2 {1 {9} {8}} {4 {4} {0}}}) -> 7", "(count_nodes {8 {3}}) -> 2", "(count_nodes {7 {9} {0}}) -> 3", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 3.347048}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {7 {2} {2 {6 {9}}}}) -> 5", "(count_nodes {0 {5 {4} {3}} {4}}) -> 5", "(count_nodes {8}) -> 1", "(count_nodes {6 {5} {8}}) -> 3", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.241803}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {4 {2} {6}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 4.139242}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {5}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {2 {3}}) -> 2", "(count_nodes {9}) -> 1", "(count_nodes {0 {9 {7}}}) -> 3", "(count_nodes {4 {1}}) -> 2"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 e)) 1)) 0)) _) _)", "time": 4.675664}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {8 {5 {3} {4}} {8 {0}}}) -> 6", "(count_nodes {4}) -> 1", "(count_nodes {4 {9 {4}}}) -> 3", "(count_nodes {6 {0} {3}}) -> 3", "(count_nodes {1 {8 {5 {6} {2}}}}) -> 5"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.787049}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {5 {8 {6}}}) -> 3", "(count_nodes {5 {0 {6} {9}}}) -> 4", "(count_nodes {5 {8} {8 {8 {1}}}}) -> 5", "(count_nodes {2}) -> 1", "(count_nodes {9}) -> 1"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 4.940998}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {6 {1}}}) -> 3", "(count_nodes {3}) -> 1", "(count_nodes {3}) -> 1", "(count_nodes {7}) -> 1", "(count_nodes {3 {6} {0 {7}}}) -> 4", "(count_nodes {}) -> 0"], "name": "count_nodes", "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 5.304204}
