{"time": 0.173055, "examples": ["(length []) -> 0", "(length [3 6 6 3 5]) -> 5", "(length [0 7 3]) -> 3", "(length [8 9 8 4 8]) -> 5"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.186274, "examples": ["(length []) -> 0", "(length [3 3 0 6]) -> 4", "(length [4 0 9 0]) -> 4", "(length []) -> 0"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.172182, "examples": ["(length []) -> 0", "(length [3 9 6 0]) -> 4", "(length [6 4 3]) -> 3", "(length [1 3 6 0 6]) -> 5"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.187857, "examples": ["(length []) -> 0", "(length [4 5 5]) -> 3", "(length [4 6 2]) -> 3", "(length [0 8]) -> 2"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.1679, "examples": ["(length []) -> 0", "(length []) -> 0", "(length [6 5]) -> 2", "(length [9 0 8 3 2]) -> 5"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.190535, "examples": ["(length []) -> 0", "(length [4 5 5 1 9]) -> 5", "(length [5]) -> 1", "(length []) -> 0"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.219431, "examples": ["(length []) -> 0", "(length [0 2 9 6]) -> 4", "(length [1 2 4]) -> 3", "(length [5 0]) -> 2"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.222725, "examples": ["(length []) -> 0", "(length [7 6 4 4]) -> 4", "(length [6 1 2 1 3]) -> 5", "(length [4 3]) -> 2"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.197706, "examples": ["(length []) -> 0", "(length [6 3 8 4 1]) -> 5", "(length [8 0 2 1]) -> 4", "(length [7 1 3 6]) -> 4"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.177798, "examples": ["(length []) -> 0", "(length [1 9 4 1 5]) -> 5", "(length [6 1 4 9]) -> 4", "(length [4]) -> 1"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.174594, "examples": ["(length []) -> 0", "(length [7 1 4 5 8]) -> 5", "(length [0]) -> 1", "(length [5 7 4 0]) -> 4"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.168001, "examples": ["(length []) -> 0", "(length []) -> 0", "(length [8 9 7 2]) -> 4", "(length [3 2 4 3]) -> 4"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.198872, "examples": ["(length []) -> 0", "(length [1 3 5 8 5]) -> 5", "(length [0 8 0 4 2]) -> 5", "(length [9]) -> 1"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.172179, "examples": ["(length []) -> 0", "(length [4 7 9 2]) -> 4", "(length [2 1 7 1]) -> 4", "(length [7 9]) -> 2"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.187719, "examples": ["(length []) -> 0", "(length [6]) -> 1", "(length [3 1 0 5]) -> 4", "(length []) -> 0"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.159751, "examples": ["(length []) -> 0", "(length [8 8 6]) -> 3", "(length [3 5 3 5 7]) -> 5", "(length [7]) -> 1"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.04195, "examples": ["(length []) -> 0", "(length []) -> 0", "(length [5]) -> 1", "(length []) -> 0"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) 1) 0)) _) _)", "name": "length"}
{"time": 0.14193, "examples": ["(length []) -> 0", "(length [6 8]) -> 2", "(length [5 5 2]) -> 3", "(length [7 6 3]) -> 3"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.150625, "examples": ["(length []) -> 0", "(length [9 9 4]) -> 3", "(length [3 8 0]) -> 3", "(length [8 4 5 4]) -> 4"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.173681, "examples": ["(length []) -> 0", "(length [8 9 9 2 0]) -> 5", "(length [5]) -> 1", "(length [6]) -> 1"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.137557, "examples": ["(length []) -> 0", "(length [7]) -> 1", "(length [8 3 2 3 0]) -> 5", "(length [0 9 1 5 0]) -> 5"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.158442, "examples": ["(length []) -> 0", "(length [8]) -> 1", "(length [3 7 2 0]) -> 4", "(length [6 1 8 1 3]) -> 5"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.187064, "examples": ["(length []) -> 0", "(length []) -> 0", "(length [5 9 9 0]) -> 4", "(length [1 4 5 3 6]) -> 5"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.171347, "examples": ["(length []) -> 0", "(length [1 1 5 7]) -> 4", "(length [3]) -> 1", "(length [3 1 5]) -> 3"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.180549, "examples": ["(length []) -> 0", "(length []) -> 0", "(length [6 3]) -> 2", "(length [9 7 7 7 7]) -> 5"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.19544, "examples": ["(length []) -> 0", "(length [6 7 5]) -> 3", "(length [7 0 5]) -> 3", "(length [8]) -> 1"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.163006, "examples": ["(length []) -> 0", "(length [9 7]) -> 2", "(length [4]) -> 1", "(length [5 3 9]) -> 3"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.179603, "examples": ["(length []) -> 0", "(length [3 1]) -> 2", "(length [4 6]) -> 2", "(length [8 6 7]) -> 3"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.170609, "examples": ["(length []) -> 0", "(length [5 6 0]) -> 3", "(length [7 6 4 5]) -> 4", "(length [8 7 9 4 3]) -> 5"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.191796, "examples": ["(length []) -> 0", "(length [2]) -> 1", "(length [2 5 7 1]) -> 4", "(length [4 4 9]) -> 3"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.173368, "examples": ["(length []) -> 0", "(length [0 4 8 3]) -> 4", "(length [9]) -> 1", "(length [1 9]) -> 2"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.184892, "examples": ["(length []) -> 0", "(length [8 4]) -> 2", "(length [2 1 3 1 4]) -> 5", "(length [4]) -> 1"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.030967, "examples": ["(length []) -> 0", "(length [5]) -> 1", "(length [3]) -> 1", "(length []) -> 0"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) 1) 0)) _) _)", "name": "length"}
{"time": 0.037556, "examples": ["(length []) -> 0", "(length [1]) -> 1", "(length [2]) -> 1", "(length [4]) -> 1"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) 1) 0)) _) _)", "name": "length"}
{"time": 0.132812, "examples": ["(length []) -> 0", "(length [0]) -> 1", "(length [9 7 5]) -> 3", "(length [1 8]) -> 2"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.038567, "examples": ["(length []) -> 0", "(length [1]) -> 1", "(length []) -> 0", "(length []) -> 0"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) 1) 0)) _) _)", "name": "length"}
{"time": 0.148736, "examples": ["(length []) -> 0", "(length [1 6 3]) -> 3", "(length [5 6 0 8 7]) -> 5", "(length []) -> 0"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.158942, "examples": ["(length []) -> 0", "(length [7 6]) -> 2", "(length [7 1]) -> 2", "(length [9 5 6 8]) -> 4"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.17825, "examples": ["(length []) -> 0", "(length []) -> 0", "(length [8 1 9 5 3]) -> 5", "(length [2 0]) -> 2"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.163183, "examples": ["(length []) -> 0", "(length [3 4 4 8]) -> 4", "(length [7 6 5 6]) -> 4", "(length [1]) -> 1"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.187243, "examples": ["(length []) -> 0", "(length [9 9 0 6 1]) -> 5", "(length [1 2]) -> 2", "(length [2 3 3 7 2]) -> 5"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.160782, "examples": ["(length []) -> 0", "(length [9 1]) -> 2", "(length []) -> 0", "(length []) -> 0"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 1)) 0)) _) _)", "name": "length"}
{"time": 0.162468, "examples": ["(length []) -> 0", "(length [7 9 2 5]) -> 4", "(length [5 1 2 6 0]) -> 5", "(length [9 3]) -> 2"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.133339, "examples": ["(length []) -> 0", "(length []) -> 0", "(length [0]) -> 1", "(length [2 7 0 9 2]) -> 5"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.17963, "examples": ["(length []) -> 0", "(length [1 8]) -> 2", "(length [9 4 5 6]) -> 4", "(length [6 1]) -> 2"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.173908, "examples": ["(length []) -> 0", "(length []) -> 0", "(length [7 8 6]) -> 3", "(length [3 1]) -> 2"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.155232, "examples": ["(length []) -> 0", "(length [0 7]) -> 2", "(length [2]) -> 1", "(length [1]) -> 1"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.16573, "examples": ["(length []) -> 0", "(length [3 4]) -> 2", "(length [8 8]) -> 2", "(length []) -> 0"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 1)) 0)) _) _)", "name": "length"}
{"time": 0.098601, "examples": ["(length []) -> 0", "(length [7 5]) -> 2", "(length []) -> 0", "(length [8 3 0 7 3]) -> 5"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.16625, "examples": ["(length []) -> 0", "(length [1]) -> 1", "(length [4 8]) -> 2", "(length [5 5 0 8]) -> 4"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.147132, "examples": ["(length []) -> 0", "(length [8 9]) -> 2", "(length [5 5]) -> 2", "(length [6 0 0 2 7]) -> 5"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.159437, "examples": ["(length []) -> 0", "(length [2 0 9 8]) -> 4", "(length [6 4 9 6]) -> 4", "(length [3 7 0 1 5]) -> 5"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.187196, "examples": ["(length []) -> 0", "(length [5 6 9]) -> 3", "(length [0 6 8]) -> 3", "(length [5]) -> 1"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.166374, "examples": ["(length []) -> 0", "(length [8 1 6 9 4]) -> 5", "(length [0 9 1 7]) -> 4", "(length [3 5 4]) -> 3"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.151152, "examples": ["(length []) -> 0", "(length []) -> 0", "(length [5 8 2 1]) -> 4", "(length [5 4 4 7]) -> 4"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.158559, "examples": ["(length []) -> 0", "(length [6 7 0 7 1]) -> 5", "(length [4 2 4 8 4]) -> 5", "(length [2 4 8]) -> 3"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.178588, "examples": ["(length []) -> 0", "(length [3 2 3 3]) -> 4", "(length [8 5 7 1 0]) -> 5", "(length [1 8 5 3 5]) -> 5"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.167008, "examples": ["(length []) -> 0", "(length []) -> 0", "(length [9 2 8]) -> 3", "(length [5]) -> 1"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.171465, "examples": ["(length []) -> 0", "(length []) -> 0", "(length [9 4 5]) -> 3", "(length [2]) -> 1"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.177846, "examples": ["(length []) -> 0", "(length [8 9 6 9 6]) -> 5", "(length [2 8]) -> 2", "(length [2 6 7]) -> 3"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.182123, "examples": ["(length []) -> 0", "(length [5 8 7]) -> 3", "(length [1 0 8 3 1]) -> 5", "(length []) -> 0"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.174868, "examples": ["(length []) -> 0", "(length [7 9 8]) -> 3", "(length [8 7 8]) -> 3", "(length [2 8 6 7 2]) -> 5"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.164257, "examples": ["(length []) -> 0", "(length [6 0 4 4]) -> 4", "(length []) -> 0", "(length [4]) -> 1"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.180893, "examples": ["(length []) -> 0", "(length [5 4 7]) -> 3", "(length [3 8]) -> 2", "(length []) -> 0"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.136479, "examples": ["(length []) -> 0", "(length [0]) -> 1", "(length []) -> 0", "(length [3 3 6 4 3]) -> 5"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.14685, "examples": ["(length []) -> 0", "(length [8 6]) -> 2", "(length [9]) -> 1", "(length [5 6]) -> 2"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.130693, "examples": ["(length []) -> 0", "(length [8 4 9 0 5]) -> 5", "(length [2 6 5]) -> 3", "(length [1 8 2]) -> 3"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.148572, "examples": ["(length []) -> 0", "(length [8 0 0 6 7]) -> 5", "(length [5 0]) -> 2", "(length [3]) -> 1"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.191934, "examples": ["(length []) -> 0", "(length []) -> 0", "(length [4 7 1 9]) -> 4", "(length [0 1 9 3 9]) -> 5"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.152301, "examples": ["(length []) -> 0", "(length [3 9 7]) -> 3", "(length []) -> 0", "(length [1 1]) -> 2"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.190486, "examples": ["(length []) -> 0", "(length [6 2 5 5 0]) -> 5", "(length [2 5 1]) -> 3", "(length [4 2 2 0]) -> 4"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.14433, "examples": ["(length []) -> 0", "(length [8 2 9]) -> 3", "(length [7]) -> 1", "(length [7 4 1 3]) -> 4"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.000532, "examples": ["(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0"], "solution": "(let length (let a (lambda (b) 0) _) _)", "name": "length"}
{"time": 0.186363, "examples": ["(length []) -> 0", "(length [7 8]) -> 2", "(length [7 4 0]) -> 3", "(length [9 7 1]) -> 3"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.168066, "examples": ["(length []) -> 0", "(length [4 2]) -> 2", "(length [7 0 9 0]) -> 4", "(length [7 4]) -> 2"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.129679, "examples": ["(length []) -> 0", "(length [8 2 7 5]) -> 4", "(length [1 1 5 5 2]) -> 5", "(length [3 9 0 6]) -> 4"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.189899, "examples": ["(length []) -> 0", "(length [8 3 3 1]) -> 4", "(length [3 6]) -> 2", "(length []) -> 0"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.190838, "examples": ["(length []) -> 0", "(length [2 9 1 4]) -> 4", "(length [9 3 0 3]) -> 4", "(length [0 5]) -> 2"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.195743, "examples": ["(length []) -> 0", "(length [5]) -> 1", "(length [3 0 6 8 5]) -> 5", "(length [3]) -> 1"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.191516, "examples": ["(length []) -> 0", "(length [7 7 1 2 7]) -> 5", "(length [5 1 0]) -> 3", "(length [1 5 3]) -> 3"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.193328, "examples": ["(length []) -> 0", "(length [0 1 2]) -> 3", "(length [8 3 3 0 5]) -> 5", "(length [0 8 8 2]) -> 4"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.164268, "examples": ["(length []) -> 0", "(length [5 4 6]) -> 3", "(length [1 6]) -> 2", "(length [3 2 1 1]) -> 4"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.159359, "examples": ["(length []) -> 0", "(length [7 3 8 5 6]) -> 5", "(length [4 2]) -> 2", "(length [8 0 7 6]) -> 4"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.134247, "examples": ["(length []) -> 0", "(length [0]) -> 1", "(length [7]) -> 1", "(length [6 1 9 8]) -> 4"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.042943, "examples": ["(length []) -> 0", "(length []) -> 0", "(length [4]) -> 1", "(length []) -> 0"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) 1) 0)) _) _)", "name": "length"}
{"time": 0.044369, "examples": ["(length []) -> 0", "(length [1]) -> 1", "(length []) -> 0", "(length []) -> 0"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) 1) 0)) _) _)", "name": "length"}
{"time": 0.160348, "examples": ["(length []) -> 0", "(length [9 7]) -> 2", "(length [5]) -> 1", "(length [0]) -> 1"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.17738, "examples": ["(length []) -> 0", "(length [5 0 3]) -> 3", "(length [2]) -> 1", "(length [0 8 3 3]) -> 4"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.149248, "examples": ["(length []) -> 0", "(length [3 5 0 0]) -> 4", "(length [4 1]) -> 2", "(length [3 8 3 5]) -> 4"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.158609, "examples": ["(length []) -> 0", "(length []) -> 0", "(length [8 2 6 4 3]) -> 5", "(length [8 4]) -> 2"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.186721, "examples": ["(length []) -> 0", "(length [6 9 1 1]) -> 4", "(length [2 4 6 0 7]) -> 5", "(length [6]) -> 1"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.132474, "examples": ["(length []) -> 0", "(length [9]) -> 1", "(length []) -> 0", "(length [4 3 7 7]) -> 4"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.152181, "examples": ["(length []) -> 0", "(length [7 6 6 4]) -> 4", "(length [0 1 1 1]) -> 4", "(length [3]) -> 1"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.153051, "examples": ["(length []) -> 0", "(length [5 1 1 5 2]) -> 5", "(length []) -> 0", "(length [2 4 5 2]) -> 4"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.157636, "examples": ["(length []) -> 0", "(length [1 0 6 4 1]) -> 5", "(length [9]) -> 1", "(length [5 0 7 1]) -> 4"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.180782, "examples": ["(length []) -> 0", "(length [3 2]) -> 2", "(length [1 5 4 6]) -> 4", "(length [2 4 9 1 9]) -> 5"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.172383, "examples": ["(length []) -> 0", "(length [0]) -> 1", "(length [3 9 6 7 5]) -> 5", "(length [4 3 5 8]) -> 4"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.145021, "examples": ["(length []) -> 0", "(length [3 9 0 4]) -> 4", "(length []) -> 0", "(length [9 8 2 1 1]) -> 5"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.131892, "examples": ["(length []) -> 0", "(length []) -> 0", "(length [4 8 1 9]) -> 4", "(length [9 3 4 5]) -> 4"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
{"time": 0.130377, "examples": ["(length []) -> 0", "(length [7]) -> 1", "(length [8 3 2 6 1]) -> 5", "(length [4 1 5 1 8]) -> 5"], "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)", "name": "length"}
