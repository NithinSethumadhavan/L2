{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.746649, "examples": ["(leaves {}) -> []", "(leaves {4 {2 {6}}}) -> [6]", "(leaves {9 {6}}) -> [6]", "(leaves {3 {0 {5}}}) -> [5]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.138232, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {8}) -> [8]", "(leaves {2 {9}}) -> [9]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.361161, "examples": ["(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {0}) -> [0]", "(leaves {2 {5 {4}} {2 {4} {9}}}) -> [4 4 9]", "(leaves {0 {1 {8 {3} {8}}} {9}}) -> [3 8 9]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.337843, "examples": ["(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {9}) -> [9]", "(leaves {8 {4 {4} {6 {1} {9}}}}) -> [4 1 9]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.39126, "examples": ["(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {9 {7 {3} {9}} {5}}) -> [3 9 5]", "(leaves {0}) -> [0]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.490546, "examples": ["(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {9 {9 {6 {8}}}}) -> [8]", "(leaves {9 {7 {6} {9 {8} {8}}} {9}}) -> [6 8 8 9]", "(leaves {0 {3} {4}}) -> [3 4]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.424421, "examples": ["(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {3}) -> [3]", "(leaves {}) -> []", "(leaves {2 {5 {7}} {8}}) -> [7 8]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.593415, "examples": ["(leaves {}) -> []", "(leaves {4 {0}}) -> [0]", "(leaves {3}) -> [3]", "(leaves {}) -> []", "(leaves {1 {7 {3}} {0}}) -> [3 0]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.541562, "examples": ["(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {0 {3 {5}}}) -> [5]", "(leaves {7 {4} {5}}) -> [4 5]", "(leaves {6 {0} {1 {9 {2}}}}) -> [0 2]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.666499, "examples": ["(leaves {}) -> []", "(leaves {9 {1 {9}}}) -> [9]", "(leaves {}) -> []", "(leaves {7 {1}}) -> [1]", "(leaves {3 {4 {4} {0}}}) -> [4 0]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.710649, "examples": ["(leaves {}) -> []", "(leaves {4 {2 {6} {0}} {8 {0} {5}}}) -> [6 0 0 5]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2}) -> [2]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.905647, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {0 {6}}) -> [6]", "(leaves {9 {6} {8}}) -> [6 8]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.991798, "examples": ["(leaves {}) -> []", "(leaves {5 {0 {5}}}) -> [5]", "(leaves {8 {7 {7} {8}}}) -> [7 8]", "(leaves {}) -> []", "(leaves {8 {6 {4 {2}}}}) -> [2]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.947655, "examples": ["(leaves {}) -> []", "(leaves {8 {6 {7} {1}}}) -> [7 1]", "(leaves {4 {1 {2}}}) -> [2]", "(leaves {2}) -> [2]", "(leaves {8}) -> [8]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.115911, "examples": ["(leaves {}) -> []", "(leaves {5 {7 {3} {5}} {3}}) -> [3 5 3]", "(leaves {2}) -> [2]", "(leaves {1}) -> [1]", "(leaves {0 {1 {5}}}) -> [5]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.08878, "examples": ["(leaves {}) -> []", "(leaves {6 {6 {6 {0} {4}}} {3}}) -> [0 4 3]", "(leaves {6 {1 {9 {8}} {8 {5}}}}) -> [8 5]", "(leaves {1}) -> [1]", "(leaves {1}) -> [1]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "name": "leaves", "time": 0.205577, "examples": ["(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "name": "leaves", "time": 0.1247, "examples": ["(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {7}) -> [7]", "(leaves {4}) -> [4]", "(leaves {4}) -> [4]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.795489, "examples": ["(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {0 {8 {7}}}) -> [7]", "(leaves {4}) -> [4]", "(leaves {9}) -> [9]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.161511, "examples": ["(leaves {}) -> []", "(leaves {3 {1}}) -> [1]", "(leaves {0 {5} {0 {8 {5} {7}} {1}}}) -> [5 5 7 1]", "(leaves {8 {2} {1}}) -> [2 1]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.675171, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {}) -> []", "(leaves {7 {0 {3}}}) -> [3]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.591437, "examples": ["(leaves {}) -> []", "(leaves {6 {2}}) -> [2]", "(leaves {5}) -> [5]", "(leaves {9}) -> [9]", "(leaves {1 {3} {3}}) -> [3 3]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.436537, "examples": ["(leaves {}) -> []", "(leaves {6 {0}}) -> [0]", "(leaves {5 {0 {6}}}) -> [6]", "(leaves {}) -> []", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.202635, "examples": ["(leaves {}) -> []", "(leaves {5 {3 {1}} {2 {7} {9}}}) -> [1 7 9]", "(leaves {7 {8 {8}}}) -> [8]", "(leaves {4}) -> [4]", "(leaves {5 {4 {2}}}) -> [2]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.052358, "examples": ["(leaves {}) -> []", "(leaves {6 {7}}) -> [7]", "(leaves {}) -> []", "(leaves {3 {2} {0}}) -> [2 0]", "(leaves {9 {5 {8} {8 {6} {0}}} {7 {3 {2}}}}) -> [8 6 0 2]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.552743, "examples": ["(leaves {}) -> []", "(leaves {6 {7}}) -> [7]", "(leaves {8 {6 {0}} {6 {9 {8} {7}} {9}}}) -> [0 8 7 9]", "(leaves {4}) -> [4]", "(leaves {3}) -> [3]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.733121, "examples": ["(leaves {}) -> []", "(leaves {5 {8 {1}} {9 {7} {3}}}) -> [1 7 3]", "(leaves {}) -> []", "(leaves {7 {8 {7 {6} {3}}}}) -> [6 3]", "(leaves {9 {2 {0 {7} {7}}}}) -> [7 7]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.084533, "examples": ["(leaves {}) -> []", "(leaves {6 {4}}) -> [4]", "(leaves {7}) -> [7]", "(leaves {4}) -> [4]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.496022, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9 {1}}) -> [1]", "(leaves {8}) -> [8]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.007786, "examples": ["(leaves {}) -> []", "(leaves {4 {8} {0}}) -> [8 0]", "(leaves {3 {6} {9}}) -> [6 9]", "(leaves {1}) -> [1]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.719161, "examples": ["(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {}) -> []", "(leaves {7 {7}}) -> [7]", "(leaves {4 {0 {2 {5}}} {3 {5 {4} {8}}}}) -> [5 4 8]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.056361, "examples": ["(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {4 {2 {3 {5} {5}}} {9 {0 {4}}}}) -> [5 5 4]", "(leaves {1}) -> [1]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.170627, "examples": ["(leaves {}) -> []", "(leaves {2 {5 {8} {9}}}) -> [8 9]", "(leaves {1}) -> [1]", "(leaves {4}) -> [4]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "name": "leaves", "time": 0.195444, "examples": ["(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "name": "leaves", "time": 0.10233, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2}) -> [2]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.206464, "examples": ["(leaves {}) -> []", "(leaves {5 {1 {3}} {1}}) -> [3 1]", "(leaves {0}) -> [0]", "(leaves {}) -> []", "(leaves {4 {7 {1 {9}} {0 {1} {3}}} {0 {4 {1}}}}) -> [9 1 3 1]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.862652, "examples": ["(leaves {}) -> []", "(leaves {1 {4}}) -> [4]", "(leaves {8 {0}}) -> [0]", "(leaves {4 {7 {7}} {8 {9} {8}}}) -> [7 9 8]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (cons (value (car (children b))) [])) [])) _) _)", "name": "leaves", "time": 2.153115, "examples": ["(leaves {}) -> []", "(leaves {3 {7}}) -> [7]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.863959, "examples": ["(leaves {}) -> []", "(leaves {1 {7 {4}}}) -> [4]", "(leaves {1 {2} {8}}) -> [2 8]", "(leaves {8 {7 {7} {5}} {8 {7} {5}}}) -> [7 5 7 5]", "(leaves {5 {6} {2}}) -> [6 2]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.861603, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {8 {4} {1 {0} {9 {0} {2}}}}) -> [4 0 0 2]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.127825, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {}) -> []", "(leaves {1 {6}}) -> [6]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.99556, "examples": ["(leaves {}) -> []", "(leaves {5 {1}}) -> [1]", "(leaves {6 {7 {6} {2}} {4 {9} {9}}}) -> [6 2 9 9]", "(leaves {}) -> []", "(leaves {5 {9} {8 {3}}}) -> [9 3]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.941021, "examples": ["(leaves {}) -> []", "(leaves {3 {8} {3}}) -> [8 3]", "(leaves {0 {6 {4 {7} {3}} {6 {4}}}}) -> [7 3 4]", "(leaves {1}) -> [1]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (cons (value (car (children b))) [])) [])) _) _)", "name": "leaves", "time": 2.00611, "examples": ["(leaves {}) -> []", "(leaves {0 {9}}) -> [9]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {0 {9}}) -> [9]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.100101, "examples": ["(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {4 {2} {6}}) -> [2 6]", "(leaves {2 {7 {6}}}) -> [6]", "(leaves {9 {5 {2}} {1 {3} {8}}}) -> [2 3 8]"]}
