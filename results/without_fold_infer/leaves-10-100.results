{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.339099, "examples": ["(leaves {}) -> []", "(leaves {9 {2}}) -> [2]", "(leaves {8 {2} {7}}) -> [2 7]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7 {5 {3}} {9 {0}}}) -> [3 0]", "(leaves {5 {7 {4 {7}} {6}}}) -> [7 6]", "(leaves {}) -> []", "(leaves {4 {4 {0} {8 {1} {6}}}}) -> [0 1 6]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.324862, "examples": ["(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {5 {6} {3}}) -> [6 3]", "(leaves {9 {1} {0 {4} {1}}}) -> [1 4 1]", "(leaves {7}) -> [7]", "(leaves {9 {5}}) -> [5]", "(leaves {7}) -> [7]", "(leaves {}) -> []", "(leaves {3 {8} {4}}) -> [8 4]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.370273, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6 {5} {4}}) -> [5 4]", "(leaves {6 {3 {5 {8}} {1}}}) -> [8 1]", "(leaves {}) -> []", "(leaves {0 {6} {5 {3} {4}}}) -> [6 3 4]", "(leaves {1 {1} {6 {4 {5}} {7 {1}}}}) -> [1 5 1]", "(leaves {3 {0}}) -> [0]", "(leaves {0}) -> [0]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.44319, "examples": ["(leaves {}) -> []", "(leaves {2 {5} {2}}) -> [5 2]", "(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {}) -> []", "(leaves {4 {8 {2 {7} {8}}}}) -> [7 8]", "(leaves {5 {7}}) -> [7]", "(leaves {}) -> []", "(leaves {7 {0 {5 {0} {0}} {5 {1} {2}}}}) -> [0 0 1 2]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.374975, "examples": ["(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {4}) -> [4]", "(leaves {9}) -> [9]", "(leaves {4}) -> [4]", "(leaves {5 {0 {5 {3}}} {3 {9 {9} {5}} {4}}}) -> [3 9 5 4]", "(leaves {1 {6 {8 {0}}} {4 {6 {5} {0}}}}) -> [0 5 0]", "(leaves {4}) -> [4]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.735014, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9 {1}}) -> [1]", "(leaves {7 {9 {3}}}) -> [3]", "(leaves {6 {2 {1} {8}} {8}}) -> [1 8 8]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.850562, "examples": ["(leaves {}) -> []", "(leaves {7 {2 {9 {3}} {9 {1} {3}}} {5}}) -> [3 1 3 5]", "(leaves {}) -> []", "(leaves {2 {4 {5 {5}} {7}}}) -> [5 7]", "(leaves {3 {7} {8}}) -> [7 8]", "(leaves {3 {9} {9}}) -> [9 9]", "(leaves {0 {4} {6}}) -> [4 6]", "(leaves {8 {0 {4 {1}} {1}}}) -> [1 1]", "(leaves {1}) -> [1]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.855487, "examples": ["(leaves {}) -> []", "(leaves {8 {5 {9} {6}} {5 {5} {8}}}) -> [9 6 5 8]", "(leaves {3 {6 {0} {0}}}) -> [0 0]", "(leaves {}) -> []", "(leaves {2 {8 {7}}}) -> [7]", "(leaves {0}) -> [0]", "(leaves {9 {1 {6} {8}}}) -> [6 8]", "(leaves {8 {4 {4}} {4 {6} {5 {3} {5}}}}) -> [4 6 3 5]", "(leaves {4 {9}}) -> [9]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.034996, "examples": ["(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {3 {1} {2}}) -> [1 2]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9 {2 {1 {0} {1}}}}) -> [0 1]", "(leaves {0 {1}}) -> [1]", "(leaves {6 {4}}) -> [4]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.04787, "examples": ["(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {4}) -> [4]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {0 {5 {7}} {6 {3}}}) -> [7 3]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3}) -> [3]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.102706, "examples": ["(leaves {}) -> []", "(leaves {0 {3 {8}}}) -> [8]", "(leaves {5}) -> [5]", "(leaves {7 {3 {6}}}) -> [6]", "(leaves {4 {8} {3}}) -> [8 3]", "(leaves {4 {2}}) -> [2]", "(leaves {9 {3 {5 {9} {8}} {1 {0} {8}}} {1 {5 {9}}}}) -> [9 8 0 8 9]", "(leaves {8 {6}}) -> [6]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.075254, "examples": ["(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {9}) -> [9]", "(leaves {}) -> []", "(leaves {5 {7 {7} {5 {8}}}}) -> [7 8]", "(leaves {}) -> []", "(leaves {3 {0 {5} {9}}}) -> [5 9]", "(leaves {6 {0}}) -> [0]", "(leaves {8}) -> [8]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.1742, "examples": ["(leaves {}) -> []", "(leaves {5 {6} {5}}) -> [6 5]", "(leaves {}) -> []", "(leaves {3 {7 {5} {9 {4} {7}}} {6 {2} {7}}}) -> [5 4 7 2 7]", "(leaves {8 {3 {5} {3}} {7}}) -> [5 3 7]", "(leaves {9}) -> [9]", "(leaves {7}) -> [7]", "(leaves {}) -> []", "(leaves {9 {9}}) -> [9]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.197188, "examples": ["(leaves {}) -> []", "(leaves {4 {5 {5 {6} {8}}} {1}}) -> [6 8 1]", "(leaves {6 {6}}) -> [6]", "(leaves {3}) -> [3]", "(leaves {3}) -> [3]", "(leaves {8 {1}}) -> [1]", "(leaves {6}) -> [6]", "(leaves {2 {1} {0 {1}}}) -> [1 1]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.144642, "examples": ["(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {0 {1}}) -> [1]", "(leaves {2 {5 {7 {8}}} {1 {0 {2} {8}} {9 {3}}}}) -> [8 2 8 3]", "(leaves {7}) -> [7]", "(leaves {1 {7} {1 {5} {1}}}) -> [7 5 1]", "(leaves {1 {5} {4}}) -> [5 4]", "(leaves {7}) -> [7]", "(leaves {1 {7}}) -> [7]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.227477, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2 {8 {4} {9}} {4 {5}}}) -> [4 9 5]", "(leaves {3}) -> [3]", "(leaves {5}) -> [5]", "(leaves {3 {7}}) -> [7]", "(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {8 {2} {1}}) -> [2 1]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.210589, "examples": ["(leaves {}) -> []", "(leaves {0 {3} {2}}) -> [3 2]", "(leaves {}) -> []", "(leaves {1 {5}}) -> [5]", "(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {0 {0 {3}} {3 {7 {7}}}}) -> [3 7]", "(leaves {2 {1 {5}}}) -> [5]", "(leaves {6 {9}}) -> [9]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.287642, "examples": ["(leaves {}) -> []", "(leaves {3 {5 {3}} {8 {6 {5}}}}) -> [3 5]", "(leaves {8}) -> [8]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8 {9}}) -> [9]", "(leaves {7 {5 {5 {1} {5}}} {3 {7 {2}}}}) -> [1 5 2]", "(leaves {5}) -> [5]", "(leaves {7 {0}}) -> [0]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.265016, "examples": ["(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {3}) -> [3]", "(leaves {}) -> []", "(leaves {8 {7}}) -> [7]", "(leaves {6 {1 {4}}}) -> [4]", "(leaves {1 {2 {1}} {3 {2}}}) -> [1 2]", "(leaves {0}) -> [0]", "(leaves {9}) -> [9]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.312574, "examples": ["(leaves {}) -> []", "(leaves {9 {0} {4 {1}}}) -> [0 1]", "(leaves {}) -> []", "(leaves {2 {2 {4 {7} {4}}}}) -> [7 4]", "(leaves {9}) -> [9]", "(leaves {7}) -> [7]", "(leaves {0 {1 {8}}}) -> [8]", "(leaves {}) -> []", "(leaves {2}) -> [2]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.289278, "examples": ["(leaves {}) -> []", "(leaves {3 {1 {8} {7}} {7 {2}}}) -> [8 7 2]", "(leaves {4 {1}}) -> [1]", "(leaves {}) -> []", "(leaves {6 {5} {2}}) -> [5 2]", "(leaves {8}) -> [8]", "(leaves {8}) -> [8]", "(leaves {6 {2}}) -> [2]", "(leaves {4}) -> [4]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.364511, "examples": ["(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {0 {8}}) -> [8]", "(leaves {0 {9 {6 {8}} {7 {8}}} {5 {7} {3 {3} {2}}}}) -> [8 8 7 3 2]", "(leaves {5 {2} {7}}) -> [2 7]", "(leaves {0 {7}}) -> [7]", "(leaves {5}) -> [5]", "(leaves {0 {5}}) -> [5]", "(leaves {2 {9}}) -> [9]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.635413, "examples": ["(leaves {}) -> []", "(leaves {4 {5}}) -> [5]", "(leaves {4 {2 {0}} {3}}) -> [0 3]", "(leaves {}) -> []", "(leaves {6 {5}}) -> [5]", "(leaves {9 {1 {2}} {7 {8}}}) -> [2 8]", "(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.613998, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9 {6 {6} {9}} {8 {5} {0}}}) -> [6 9 5 0]", "(leaves {6 {6 {0 {0} {7}} {8}} {9}}) -> [0 7 8 9]", "(leaves {7 {3} {6}}) -> [3 6]", "(leaves {2}) -> [2]", "(leaves {9}) -> [9]", "(leaves {8 {0}}) -> [0]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.433949, "examples": ["(leaves {}) -> []", "(leaves {2 {0} {8}}) -> [0 8]", "(leaves {}) -> []", "(leaves {6 {9 {6 {4} {5}}} {3}}) -> [4 5 3]", "(leaves {}) -> []", "(leaves {5 {5 {7 {0}} {4}}}) -> [0 4]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1 {9} {0}}) -> [9 0]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.59686, "examples": ["(leaves {}) -> []", "(leaves {9 {3} {6}}) -> [3 6]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7 {5} {3}}) -> [5 3]", "(leaves {}) -> []", "(leaves {1 {3}}) -> [3]", "(leaves {0 {6}}) -> [6]", "(leaves {3 {3 {5} {4 {4}}}}) -> [5 4]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.587539, "examples": ["(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {7}) -> [7]", "(leaves {}) -> []", "(leaves {8 {4} {1}}) -> [4 1]", "(leaves {}) -> []", "(leaves {5 {6}}) -> [6]", "(leaves {3 {1 {3}} {1 {1}}}) -> [3 1]", "(leaves {3}) -> [3]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.651699, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {9}) -> [9]", "(leaves {2 {6}}) -> [6]", "(leaves {0}) -> [0]", "(leaves {2 {1 {7} {9}} {5 {2} {1}}}) -> [7 9 2 1]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.601374, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7 {1}}) -> [1]", "(leaves {0 {6 {6}}}) -> [6]", "(leaves {}) -> []", "(leaves {4 {6}}) -> [6]", "(leaves {6 {2 {7 {6}} {5 {9}}} {0 {8 {4}}}}) -> [6 9 4]", "(leaves {}) -> []", "(leaves {8 {4 {0 {6} {8}}}}) -> [6 8]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.627944, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5 {2 {8}}}) -> [8]", "(leaves {3}) -> [3]", "(leaves {6}) -> [6]", "(leaves {7 {4 {9 {9}}} {1}}) -> [9 1]", "(leaves {9}) -> [9]", "(leaves {4 {8 {2 {8} {9}}}}) -> [8 9]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.6184, "examples": ["(leaves {}) -> []", "(leaves {9 {1 {1}}}) -> [1]", "(leaves {}) -> []", "(leaves {8 {6} {3}}) -> [6 3]", "(leaves {7}) -> [7]", "(leaves {0 {3 {9 {0} {4}} {9 {2}}} {1}}) -> [0 4 2 1]", "(leaves {9}) -> [9]", "(leaves {2}) -> [2]", "(leaves {4 {5 {9} {0}} {7 {4} {8}}}) -> [9 0 4 8]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.70118, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6 {6} {3 {8} {7}}}) -> [6 8 7]", "(leaves {2}) -> [2]", "(leaves {}) -> []", "(leaves {2 {9} {7}}) -> [9 7]", "(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.140074, "examples": ["(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {3 {3 {7}} {4 {9} {4}}}) -> [7 9 4]", "(leaves {1 {6 {5 {1} {8}}}}) -> [1 8]", "(leaves {2}) -> [2]", "(leaves {7}) -> [7]", "(leaves {7}) -> [7]", "(leaves {3 {9}}) -> [9]", "(leaves {5 {0}}) -> [0]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.24475, "examples": ["(leaves {}) -> []", "(leaves {2 {6 {0} {1 {1} {6}}}}) -> [0 1 6]", "(leaves {8 {2 {0} {6}}}) -> [0 6]", "(leaves {4 {4} {0}}) -> [4 0]", "(leaves {5 {6 {2} {0 {0} {1}}} {6 {6}}}) -> [2 0 1 6]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6 {7 {2} {0}}}) -> [2 0]", "(leaves {6 {3}}) -> [3]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.473134, "examples": ["(leaves {}) -> []", "(leaves {5 {2} {6 {5 {1} {9}}}}) -> [2 1 9]", "(leaves {}) -> []", "(leaves {8 {2 {7 {6} {9}} {8 {0}}} {3 {0 {5} {1}}}}) -> [6 9 0 5 1]", "(leaves {5 {4}}) -> [4]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {5 {9 {4}} {2 {9}}}) -> [4 9]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.01181, "examples": ["(leaves {}) -> []", "(leaves {5 {2}}) -> [2]", "(leaves {0}) -> [0]", "(leaves {6 {1} {9 {4}}}) -> [1 4]", "(leaves {0}) -> [0]", "(leaves {1 {9 {3 {5}} {5}}}) -> [5 5]", "(leaves {6 {8}}) -> [8]", "(leaves {2 {1}}) -> [1]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.69973, "examples": ["(leaves {}) -> []", "(leaves {7 {6 {1 {5} {4}} {5 {7}}} {7 {0}}}) -> [5 4 7 0]", "(leaves {0 {8} {8}}) -> [8 8]", "(leaves {}) -> []", "(leaves {7 {7 {8}} {3 {1}}}) -> [8 1]", "(leaves {0}) -> [0]", "(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {2 {4 {7} {1 {1}}} {8}}) -> [7 1 8]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.887457, "examples": ["(leaves {}) -> []", "(leaves {9 {8} {2}}) -> [8 2]", "(leaves {2}) -> [2]", "(leaves {7 {2} {9}}) -> [2 9]", "(leaves {0}) -> [0]", "(leaves {9 {1} {9}}) -> [1 9]", "(leaves {0 {8 {8}} {8 {5}}}) -> [8 5]", "(leaves {0}) -> [0]", "(leaves {0 {0} {3}}) -> [0 3]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.246226, "examples": ["(leaves {}) -> []", "(leaves {8 {2}}) -> [2]", "(leaves {7 {3} {7}}) -> [3 7]", "(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {2 {3} {2}}) -> [3 2]", "(leaves {9}) -> [9]", "(leaves {7 {5 {2}} {6}}) -> [2 6]", "(leaves {3}) -> [3]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.628908, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8 {6} {3}}) -> [6 3]", "(leaves {1}) -> [1]", "(leaves {7}) -> [7]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6 {3 {5}} {9}}) -> [5 9]", "(leaves {4}) -> [4]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.432055, "examples": ["(leaves {}) -> []", "(leaves {1 {5}}) -> [5]", "(leaves {1 {6} {6}}) -> [6 6]", "(leaves {}) -> []", "(leaves {4 {0 {4} {3}} {9}}) -> [4 3 9]", "(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {8 {6} {6}}) -> [6 6]", "(leaves {5 {3 {7}}}) -> [7]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.342142, "examples": ["(leaves {}) -> []", "(leaves {4 {7 {2} {6}}}) -> [2 6]", "(leaves {}) -> []", "(leaves {1 {7} {8}}) -> [7 8]", "(leaves {3 {6}}) -> [6]", "(leaves {}) -> []", "(leaves {5 {3} {5 {2}}}) -> [3 2]", "(leaves {5 {2} {6}}) -> [2 6]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.757575, "examples": ["(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {9 {3}}) -> [3]", "(leaves {2 {5}}) -> [5]", "(leaves {9}) -> [9]", "(leaves {5 {0}}) -> [0]", "(leaves {3 {8 {1}}}) -> [1]", "(leaves {4 {5} {8}}) -> [5 8]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.819919, "examples": ["(leaves {}) -> []", "(leaves {9 {7 {3}}}) -> [3]", "(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {8 {8 {0 {2}} {2 {0}}}}) -> [2 0]", "(leaves {8 {3 {4 {0}} {8 {2}}} {0 {3 {8} {9}} {4}}}) -> [0 2 8 9 4]", "(leaves {}) -> []", "(leaves {1 {1} {6 {3 {4}} {8 {9} {9}}}}) -> [1 4 9 9]", "(leaves {6 {4}}) -> [4]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.310373, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3 {5} {0}}) -> [5 0]", "(leaves {5 {2} {4 {6}}}) -> [2 6]", "(leaves {0 {0} {6 {0} {1}}}) -> [0 0 1]", "(leaves {1 {0 {5 {2} {0}} {7 {4} {9}}} {5}}) -> [2 0 4 9 5]", "(leaves {6 {1 {5} {8}} {3}}) -> [5 8 3]", "(leaves {}) -> []", "(leaves {2 {7}}) -> [7]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.641338, "examples": ["(leaves {}) -> []", "(leaves {2 {2}}) -> [2]", "(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {6 {6 {7}}}) -> [7]", "(leaves {8 {9} {6}}) -> [9 6]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9}) -> [9]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.954125, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {6 {3 {2}} {1}}) -> [2 1]", "(leaves {5 {7 {0}} {7 {7} {4}}}) -> [0 7 4]", "(leaves {1 {5}}) -> [5]", "(leaves {2}) -> [2]", "(leaves {}) -> []", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.901412, "examples": ["(leaves {}) -> []", "(leaves {2 {2}}) -> [2]", "(leaves {3 {7 {9 {5}} {8 {7} {2}}}}) -> [5 7 2]", "(leaves {3 {0 {2}} {7 {7}}}) -> [2 7]", "(leaves {0}) -> [0]", "(leaves {2}) -> [2]", "(leaves {7 {2 {5}} {5 {3}}}) -> [5 3]", "(leaves {}) -> []", "(leaves {8 {3} {6}}) -> [3 6]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.990499, "examples": ["(leaves {}) -> []", "(leaves {4 {5}}) -> [5]", "(leaves {5}) -> [5]", "(leaves {1}) -> [1]", "(leaves {3 {8} {9 {8} {2 {3} {7}}}}) -> [8 8 3 7]", "(leaves {1}) -> [1]", "(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {3 {3}}) -> [3]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.212689, "examples": ["(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {}) -> []", "(leaves {8 {9}}) -> [9]", "(leaves {3 {0} {9 {6} {1}}}) -> [0 6 1]", "(leaves {4}) -> [4]", "(leaves {0 {2 {0}} {4 {7}}}) -> [0 7]", "(leaves {7 {3} {9}}) -> [3 9]", "(leaves {5 {9 {7} {7}} {5 {6}}}) -> [7 7 6]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.589633, "examples": ["(leaves {}) -> []", "(leaves {5 {9} {8}}) -> [9 8]", "(leaves {2}) -> [2]", "(leaves {2}) -> [2]", "(leaves {1 {0 {5 {0} {4}}}}) -> [0 4]", "(leaves {8}) -> [8]", "(leaves {}) -> []", "(leaves {2 {0 {0 {8}}} {2 {2} {6 {4} {6}}}}) -> [8 2 4 6]", "(leaves {3 {6 {0}}}) -> [0]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.571312, "examples": ["(leaves {}) -> []", "(leaves {3 {5}}) -> [5]", "(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {5}) -> [5]", "(leaves {3 {8}}) -> [8]", "(leaves {5 {4 {7} {8}} {6}}) -> [7 8 6]", "(leaves {6 {4}}) -> [4]", "(leaves {6 {2 {3} {8}}}) -> [3 8]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.130604, "examples": ["(leaves {}) -> []", "(leaves {2 {0}}) -> [0]", "(leaves {6 {4}}) -> [4]", "(leaves {6}) -> [6]", "(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {4 {4 {7}}}) -> [7]", "(leaves {4}) -> [4]", "(leaves {3 {1} {5}}) -> [1 5]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.428736, "examples": ["(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {6 {1}}) -> [1]", "(leaves {5}) -> [5]", "(leaves {}) -> []", "(leaves {5 {8 {8 {8}} {4 {7} {7}}} {6 {0 {1} {7}}}}) -> [8 7 7 1 7]", "(leaves {0}) -> [0]", "(leaves {1 {6} {4}}) -> [6 4]", "(leaves {5}) -> [5]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.945872, "examples": ["(leaves {}) -> []", "(leaves {8 {9 {3}}}) -> [3]", "(leaves {9 {9 {5 {4} {7}}} {7}}) -> [4 7 7]", "(leaves {7}) -> [7]", "(leaves {2 {2}}) -> [2]", "(leaves {9 {4}}) -> [4]", "(leaves {7 {8}}) -> [8]", "(leaves {}) -> []", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.586665, "examples": ["(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {}) -> []", "(leaves {9 {2} {9}}) -> [2 9]", "(leaves {6}) -> [6]", "(leaves {2}) -> [2]", "(leaves {4 {9} {5}}) -> [9 5]", "(leaves {0 {0 {1 {7}} {2 {2} {0}}} {3 {3 {1} {2}}}}) -> [7 2 0 1 2]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.798576, "examples": ["(leaves {}) -> []", "(leaves {5 {3 {5} {3}}}) -> [5 3]", "(leaves {4}) -> [4]", "(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {8}) -> [8]", "(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {5 {5 {8}}}) -> [8]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.831233, "examples": ["(leaves {}) -> []", "(leaves {0 {5} {1}}) -> [5 1]", "(leaves {8 {2} {8 {5} {7 {6}}}}) -> [2 5 6]", "(leaves {9}) -> [9]", "(leaves {}) -> []", "(leaves {6 {8} {5}}) -> [8 5]", "(leaves {0 {5} {8}}) -> [5 8]", "(leaves {4 {6 {0}} {0 {5} {2}}}) -> [0 5 2]", "(leaves {6 {6 {7 {6}} {7 {6}}}}) -> [6 6]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.190262, "examples": ["(leaves {}) -> []", "(leaves {2 {3 {5}} {9 {9} {2}}}) -> [5 9 2]", "(leaves {0}) -> [0]", "(leaves {7 {1 {1 {2}}}}) -> [2]", "(leaves {2 {5} {2}}) -> [5 2]", "(leaves {7}) -> [7]", "(leaves {}) -> []", "(leaves {3 {4} {1 {1 {6} {7}} {7}}}) -> [4 6 7 7]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.654649, "examples": ["(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {7}) -> [7]", "(leaves {7 {2 {4} {1}}}) -> [4 1]", "(leaves {8 {4 {0}}}) -> [0]", "(leaves {}) -> []", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.940258, "examples": ["(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {8 {7 {3}}}) -> [3]", "(leaves {2 {9} {0}}) -> [9 0]", "(leaves {2}) -> [2]", "(leaves {8 {4} {3}}) -> [4 3]", "(leaves {}) -> []", "(leaves {1 {9} {5}}) -> [9 5]", "(leaves {6}) -> [6]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.441549, "examples": ["(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {3 {3 {6 {2} {7}}}}) -> [2 7]", "(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {0 {0}}) -> [0]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5 {7 {6} {4}} {6 {7}}}) -> [6 4 7]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.503297, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4 {4} {5}}) -> [4 5]", "(leaves {1 {5}}) -> [5]", "(leaves {6}) -> [6]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2 {1} {2}}) -> [1 2]", "(leaves {0 {2}}) -> [2]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.313803, "examples": ["(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {2 {5} {9 {0 {2}} {7 {6}}}}) -> [5 2 6]", "(leaves {7 {9 {9 {0}}} {4}}) -> [0 4]", "(leaves {7 {9 {3 {9} {1}}} {1}}) -> [9 1 1]", "(leaves {9}) -> [9]", "(leaves {1}) -> [1]", "(leaves {}) -> []", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.679484, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {6 {2 {4}}}) -> [4]", "(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {8}) -> [8]", "(leaves {7}) -> [7]", "(leaves {2}) -> [2]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.196469, "examples": ["(leaves {}) -> []", "(leaves {9 {3} {9 {2}}}) -> [3 2]", "(leaves {3 {1 {4 {9}}} {3}}) -> [9 3]", "(leaves {8 {2}}) -> [2]", "(leaves {8}) -> [8]", "(leaves {0 {1} {5}}) -> [1 5]", "(leaves {9 {5 {6 {4} {9}}} {4 {9} {5}}}) -> [4 9 9 5]", "(leaves {6 {9 {4}} {6 {4} {4}}}) -> [4 4 4]", "(leaves {9}) -> [9]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.728049, "examples": ["(leaves {}) -> []", "(leaves {4 {6} {6}}) -> [6 6]", "(leaves {5 {7 {0 {7}} {3 {0} {7}}} {7 {7 {8}} {3}}}) -> [7 0 7 8 3]", "(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {6}) -> [6]", "(leaves {}) -> []", "(leaves {9 {6 {6 {4} {4}} {4 {9} {9}}}}) -> [4 4 9 9]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.382117, "examples": ["(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {}) -> []", "(leaves {7 {1 {0} {1}}}) -> [0 1]", "(leaves {6 {3}}) -> [3]", "(leaves {3 {5 {8}} {9}}) -> [8 9]", "(leaves {1}) -> [1]", "(leaves {}) -> []", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.55387, "examples": ["(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {9}) -> [9]", "(leaves {3 {8} {2 {5} {0}}}) -> [8 5 0]", "(leaves {9 {6 {8 {9} {4}}}}) -> [9 4]", "(leaves {4 {9}}) -> [9]", "(leaves {7}) -> [7]", "(leaves {1 {7 {4}}}) -> [4]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.621701, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {9 {6}}) -> [6]", "(leaves {0 {8} {7 {3}}}) -> [8 3]", "(leaves {1 {6}}) -> [6]", "(leaves {}) -> []", "(leaves {9 {2 {4 {9} {1}}}}) -> [9 1]", "(leaves {0 {0 {3}}}) -> [3]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.525792, "examples": ["(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {9 {5 {8}} {1}}) -> [8 1]", "(leaves {4}) -> [4]", "(leaves {0 {2 {6} {6}} {8 {5} {0}}}) -> [6 6 5 0]", "(leaves {8 {9} {5}}) -> [9 5]", "(leaves {}) -> []", "(leaves {1 {6}}) -> [6]", "(leaves {8 {5} {1}}) -> [5 1]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.061698, "examples": ["(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {}) -> []", "(leaves {1 {5}}) -> [5]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {8 {8 {2 {2}} {7 {6} {0}}} {3}}) -> [2 6 0 3]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.760354, "examples": ["(leaves {}) -> []", "(leaves {7 {1 {8} {3 {2} {2}}}}) -> [8 2 2]", "(leaves {9}) -> [9]", "(leaves {0 {1} {8 {3}}}) -> [1 3]", "(leaves {1}) -> [1]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.305431, "examples": ["(leaves {}) -> []", "(leaves {8 {9}}) -> [9]", "(leaves {9 {7}}) -> [7]", "(leaves {9 {4 {7}} {2 {2 {2} {7}}}}) -> [7 2 7]", "(leaves {6 {7 {0}} {7}}) -> [0 7]", "(leaves {5}) -> [5]", "(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {9 {7} {2}}) -> [7 2]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.427049, "examples": ["(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {8}) -> [8]", "(leaves {8 {7}}) -> [7]", "(leaves {0}) -> [0]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2 {7}}) -> [7]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.261203, "examples": ["(leaves {}) -> []", "(leaves {0 {3} {3}}) -> [3 3]", "(leaves {}) -> []", "(leaves {0 {2}}) -> [2]", "(leaves {8 {0} {4}}) -> [0 4]", "(leaves {}) -> []", "(leaves {4 {0 {7} {0}} {1}}) -> [7 0 1]", "(leaves {}) -> []", "(leaves {6 {0} {4}}) -> [0 4]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.087233, "examples": ["(leaves {}) -> []", "(leaves {4 {8} {4}}) -> [8 4]", "(leaves {3 {9 {6} {9}} {5 {2} {0}}}) -> [6 9 2 0]", "(leaves {5}) -> [5]", "(leaves {6 {6}}) -> [6]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4 {7 {0 {7} {1}} {5 {5}}}}) -> [7 1 5]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.019809, "examples": ["(leaves {}) -> []", "(leaves {7 {9 {3} {2}} {0 {1} {0}}}) -> [3 2 1 0]", "(leaves {4 {5}}) -> [5]", "(leaves {0 {6 {8} {9}} {4}}) -> [8 9 4]", "(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8 {6 {5}}}) -> [5]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.298895, "examples": ["(leaves {}) -> []", "(leaves {9 {4} {0}}) -> [4 0]", "(leaves {8 {3}}) -> [3]", "(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {2}) -> [2]", "(leaves {}) -> []", "(leaves {4 {3}}) -> [3]", "(leaves {5}) -> [5]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.222381, "examples": ["(leaves {}) -> []", "(leaves {1 {1 {7}} {5 {4}}}) -> [7 4]", "(leaves {6 {9} {2}}) -> [9 2]", "(leaves {8}) -> [8]", "(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {0 {6 {1}} {4 {6 {2}} {3 {1} {0}}}}) -> [1 2 1 0]", "(leaves {3 {9}}) -> [9]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.358025, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {9}) -> [9]", "(leaves {9 {7}}) -> [7]", "(leaves {8 {3} {8}}) -> [3 8]", "(leaves {}) -> []", "(leaves {9 {6} {3}}) -> [6 3]", "(leaves {5 {0 {0} {1 {4} {8}}} {9}}) -> [0 4 8 9]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.302147, "examples": ["(leaves {}) -> []", "(leaves {4 {2 {7}} {4}}) -> [7 4]", "(leaves {1 {2} {0}}) -> [2 0]", "(leaves {}) -> []", "(leaves {8 {1 {4}} {5 {4}}}) -> [4 4]", "(leaves {}) -> []", "(leaves {2 {4} {7}}) -> [4 7]", "(leaves {}) -> []", "(leaves {5}) -> [5]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.401619, "examples": ["(leaves {}) -> []", "(leaves {6 {1}}) -> [1]", "(leaves {0 {9} {6 {1}}}) -> [9 1]", "(leaves {3}) -> [3]", "(leaves {7 {9}}) -> [9]", "(leaves {7 {0} {0 {1} {2}}}) -> [0 1 2]", "(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {1 {6}}) -> [6]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.934733, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6 {5}}) -> [5]", "(leaves {0 {4 {4} {0 {3} {2}}} {5 {7 {0}}}}) -> [4 3 2 0]", "(leaves {1 {5}}) -> [5]", "(leaves {3 {3 {6} {0}}}) -> [6 0]", "(leaves {}) -> []", "(leaves {8 {4 {6} {5}}}) -> [6 5]", "(leaves {4}) -> [4]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.669536, "examples": ["(leaves {}) -> []", "(leaves {8 {5 {9} {6}} {7}}) -> [9 6 7]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5 {3} {9 {5 {9}} {0 {2} {8}}}}) -> [3 9 2 8]", "(leaves {0 {8} {0}}) -> [8 0]", "(leaves {6}) -> [6]", "(leaves {1}) -> [1]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.473574, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {3}) -> [3]", "(leaves {2}) -> [2]", "(leaves {6 {4 {5}}}) -> [5]", "(leaves {5}) -> [5]", "(leaves {}) -> []", "(leaves {2 {0}}) -> [0]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.541084, "examples": ["(leaves {}) -> []", "(leaves {2 {5 {5 {0}} {2}} {7 {6 {6}}}}) -> [0 2 6]", "(leaves {}) -> []", "(leaves {1 {8} {5}}) -> [8 5]", "(leaves {3 {0 {9 {7}} {7 {1}}} {0 {2} {5 {5}}}}) -> [7 1 2 5]", "(leaves {5 {6}}) -> [6]", "(leaves {0}) -> [0]", "(leaves {2}) -> [2]", "(leaves {7 {9}}) -> [9]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.596957, "examples": ["(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {}) -> []", "(leaves {0 {7} {2 {9 {7}}}}) -> [7 7]", "(leaves {3 {0 {6} {4}}}) -> [6 4]", "(leaves {}) -> []", "(leaves {7 {5 {2}}}) -> [2]", "(leaves {6 {0 {1}} {0 {4} {1}}}) -> [1 4 1]", "(leaves {7}) -> [7]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.114625, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {9 {9} {3}}) -> [9 3]", "(leaves {}) -> []", "(leaves {2 {1}}) -> [1]", "(leaves {4 {0}}) -> [0]", "(leaves {5 {5} {7}}) -> [5 7]", "(leaves {5 {3} {6}}) -> [3 6]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.522568, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5 {8}}) -> [8]", "(leaves {5 {8} {6}}) -> [8 6]", "(leaves {5 {0 {5 {3}}} {9 {7 {1} {2}} {5 {3}}}}) -> [3 1 2 3]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.439008, "examples": ["(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {3 {5}}) -> [5]", "(leaves {1}) -> [1]", "(leaves {7 {1 {9} {1}}}) -> [9 1]", "(leaves {0 {1 {2 {4} {5}} {8 {8} {8}}}}) -> [4 5 8 8]", "(leaves {1}) -> [1]", "(leaves {}) -> []", "(leaves {0 {7}}) -> [7]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.895502, "examples": ["(leaves {}) -> []", "(leaves {2 {1 {9}}}) -> [9]", "(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {1 {5 {5} {0}} {6}}) -> [5 0 6]", "(leaves {8 {2} {9}}) -> [2 9]", "(leaves {}) -> []", "(leaves {4 {7}}) -> [7]", "(leaves {8}) -> [8]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.435634, "examples": ["(leaves {}) -> []", "(leaves {1 {6 {3 {7}} {5 {7}}} {0}}) -> [7 7 0]", "(leaves {5 {2}}) -> [2]", "(leaves {3 {2}}) -> [2]", "(leaves {2 {7}}) -> [7]", "(leaves {1 {3}}) -> [3]", "(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {6 {8} {2 {8 {4} {2}} {1 {8} {8}}}}) -> [8 4 2 8 8]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.841431, "examples": ["(leaves {}) -> []", "(leaves {5 {3 {2}}}) -> [2]", "(leaves {5 {6 {8} {4 {2} {5}}}}) -> [8 2 5]", "(leaves {2 {9}}) -> [9]", "(leaves {6 {3} {8}}) -> [3 8]", "(leaves {9 {6 {4} {5 {6}}} {3 {8 {8}}}}) -> [4 6 8]", "(leaves {4}) -> [4]", "(leaves {2 {0}}) -> [0]", "(leaves {4 {1 {9} {0 {1}}} {7}}) -> [9 1 7]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.915997, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5 {3 {4}}}) -> [4]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {9}) -> [9]", "(leaves {2 {6}}) -> [6]", "(leaves {3 {2 {3} {9}} {9}}) -> [3 9 9]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.891903, "examples": ["(leaves {}) -> []", "(leaves {6 {9 {3 {0} {5}}} {6}}) -> [0 5 6]", "(leaves {8 {9 {4} {0}} {7}}) -> [4 0 7]", "(leaves {}) -> []", "(leaves {9 {6}}) -> [6]", "(leaves {6 {5}}) -> [5]", "(leaves {1 {4}}) -> [4]", "(leaves {2 {1 {1 {3}}} {7}}) -> [3 7]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.843558, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7 {5 {7} {1}}}) -> [7 1]", "(leaves {5 {2} {4}}) -> [2 4]", "(leaves {}) -> []", "(leaves {0}) -> [0]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.14224, "examples": ["(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {}) -> []", "(leaves {8 {8}}) -> [8]", "(leaves {6 {9 {1}}}) -> [1]", "(leaves {2}) -> [2]", "(leaves {1 {6}}) -> [6]", "(leaves {0}) -> [0]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.581544, "examples": ["(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {5}) -> [5]", "(leaves {2 {1} {4}}) -> [1 4]", "(leaves {5 {2 {6}}}) -> [6]", "(leaves {2 {3}}) -> [3]", "(leaves {5 {4} {3}}) -> [4 3]", "(leaves {}) -> []", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.348963, "examples": ["(leaves {}) -> []", "(leaves {9 {4 {7}}}) -> [7]", "(leaves {0 {6}}) -> [6]", "(leaves {6 {6 {0}} {8}}) -> [0 8]", "(leaves {}) -> []", "(leaves {3 {3 {4 {8} {7}} {3 {8} {4}}}}) -> [8 7 8 4]", "(leaves {7 {0}}) -> [0]", "(leaves {7}) -> [7]", "(leaves {5}) -> [5]"]}
