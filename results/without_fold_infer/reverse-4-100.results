{"time": 0.000388, "examples": ["(reverse []) -> []", "(reverse [1]) -> [1]", "(reverse [7]) -> [7]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)"}
{"time": 0.000689, "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [2]) -> [2]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)"}
{"time": 0.138338, "examples": ["(reverse []) -> []", "(reverse [8 2 3 1]) -> [1 3 2 8]", "(reverse [4 3 3]) -> [3 3 4]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.115941, "examples": ["(reverse []) -> []", "(reverse [7 7 2]) -> [2 7 7]", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.102283, "examples": ["(reverse []) -> []", "(reverse [5 2 5 4]) -> [4 5 2 5]", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.136625, "examples": ["(reverse []) -> []", "(reverse [8]) -> [8]", "(reverse [0 3 4 7 1]) -> [1 7 4 3 0]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.096171, "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [0 0 7 3 2]) -> [2 3 7 0 0]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.116855, "examples": ["(reverse []) -> []", "(reverse [1 6 1 2]) -> [2 1 6 1]", "(reverse [6 6 6 9]) -> [9 6 6 6]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.122672, "examples": ["(reverse []) -> []", "(reverse [5 9 7 9 9]) -> [9 9 7 9 5]", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.114915, "examples": ["(reverse []) -> []", "(reverse [3 7 8]) -> [8 7 3]", "(reverse [1 9 3]) -> [3 9 1]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.145768, "examples": ["(reverse []) -> []", "(reverse [0 7 3]) -> [3 7 0]", "(reverse [5 3 8]) -> [8 3 5]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.112144, "examples": ["(reverse []) -> []", "(reverse [0 2 9 4]) -> [4 9 2 0]", "(reverse [8 9 9]) -> [9 9 8]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.122377, "examples": ["(reverse []) -> []", "(reverse [0 8]) -> [8 0]", "(reverse [6 0 0 6 0]) -> [0 6 0 0 6]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.103979, "examples": ["(reverse []) -> []", "(reverse [5 2]) -> [2 5]", "(reverse [0 8]) -> [8 0]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.144612, "examples": ["(reverse []) -> []", "(reverse [7 5 2 6 0]) -> [0 6 2 5 7]", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.122534, "examples": ["(reverse []) -> []", "(reverse [1 1]) -> [1 1]", "(reverse [4 1 1 1]) -> [1 1 1 4]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.000601, "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) []) _) _)"}
{"time": 0.000512, "examples": ["(reverse []) -> []", "(reverse [3]) -> [3]", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)"}
{"time": 0.101402, "examples": ["(reverse []) -> []", "(reverse [0 8 4 1 5]) -> [5 1 4 8 0]", "(reverse [6 6 6 2 1]) -> [1 2 6 6 6]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.000621, "examples": ["(reverse []) -> []", "(reverse [9 9]) -> [9 9]", "(reverse [9]) -> [9]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)"}
{"time": 0.092944, "examples": ["(reverse []) -> []", "(reverse [1 5 2 3 4]) -> [4 3 2 5 1]", "(reverse [6]) -> [6]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.000353, "examples": ["(reverse []) -> []", "(reverse [2]) -> [2]", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)"}
{"time": 0.000376, "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [2]) -> [2]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)"}
{"time": 0.121139, "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [4 3]) -> [3 4]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.108821, "examples": ["(reverse []) -> []", "(reverse [3 9]) -> [9 3]", "(reverse [4 6 3]) -> [3 6 4]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.000337, "examples": ["(reverse []) -> []", "(reverse [1]) -> [1]", "(reverse [4]) -> [4]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)"}
{"time": 0.117312, "examples": ["(reverse []) -> []", "(reverse [2 1 9 3]) -> [3 9 1 2]", "(reverse [8 6 8]) -> [8 6 8]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.121691, "examples": ["(reverse []) -> []", "(reverse [3 2 6 8]) -> [8 6 2 3]", "(reverse [6 7 7 0 5]) -> [5 0 7 7 6]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.108087, "examples": ["(reverse []) -> []", "(reverse [9 0 2]) -> [2 0 9]", "(reverse [1]) -> [1]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.123683, "examples": ["(reverse []) -> []", "(reverse [8 3 8 5 6]) -> [6 5 8 3 8]", "(reverse [5 3 8 9 0]) -> [0 9 8 3 5]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.102423, "examples": ["(reverse []) -> []", "(reverse [8 5 3]) -> [3 5 8]", "(reverse [5 2 3]) -> [3 2 5]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.11145, "examples": ["(reverse []) -> []", "(reverse [6 8 9 2 3]) -> [3 2 9 8 6]", "(reverse [2 4 3 2]) -> [2 3 4 2]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.094217, "examples": ["(reverse []) -> []", "(reverse [3 6 2 3 9]) -> [9 3 2 6 3]", "(reverse [1 6 8]) -> [8 6 1]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.097778, "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [7 8 8 1]) -> [1 8 8 7]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.095144, "examples": ["(reverse []) -> []", "(reverse [0 6 3 5 5]) -> [5 5 3 6 0]", "(reverse [9 1 2]) -> [2 1 9]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.110909, "examples": ["(reverse []) -> []", "(reverse [1 3 9 3]) -> [3 9 3 1]", "(reverse [4 7 3 9]) -> [9 3 7 4]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.10441, "examples": ["(reverse []) -> []", "(reverse [6 8 7 9]) -> [9 7 8 6]", "(reverse [7 9 0 7]) -> [7 0 9 7]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.095738, "examples": ["(reverse []) -> []", "(reverse [1 1 0]) -> [0 1 1]", "(reverse [8 6 9 0 7]) -> [7 0 9 6 8]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.000551, "examples": ["(reverse []) -> []", "(reverse [2]) -> [2]", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)"}
{"time": 0.000501, "examples": ["(reverse []) -> []", "(reverse [6]) -> [6]", "(reverse [3]) -> [3]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)"}
{"time": 0.096487, "examples": ["(reverse []) -> []", "(reverse [2 9 1 0 4]) -> [4 0 1 9 2]", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.123024, "examples": ["(reverse []) -> []", "(reverse [9 1 2]) -> [2 1 9]", "(reverse [5 6 0 2]) -> [2 0 6 5]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.100241, "examples": ["(reverse []) -> []", "(reverse [1 6 9 5 5]) -> [5 5 9 6 1]", "(reverse [6 3 6]) -> [6 3 6]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.082828, "examples": ["(reverse []) -> []", "(reverse [6 7 6 6 5]) -> [5 6 6 7 6]", "(reverse [1 9]) -> [9 1]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.09346, "examples": ["(reverse []) -> []", "(reverse [1 1 7 8]) -> [8 7 1 1]", "(reverse [1 7 1]) -> [1 7 1]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.104663, "examples": ["(reverse []) -> []", "(reverse [1 4 3 6 4]) -> [4 6 3 4 1]", "(reverse [2 3 1]) -> [1 3 2]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.10697, "examples": ["(reverse []) -> []", "(reverse [0 8 1 0]) -> [0 1 8 0]", "(reverse [5 5 6 7 5]) -> [5 7 6 5 5]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.123356, "examples": ["(reverse []) -> []", "(reverse [7 0 6 2]) -> [2 6 0 7]", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.115435, "examples": ["(reverse []) -> []", "(reverse [6 3 2 0]) -> [0 2 3 6]", "(reverse [0 1]) -> [1 0]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.105946, "examples": ["(reverse []) -> []", "(reverse [2 3 3 7 8]) -> [8 7 3 3 2]", "(reverse [9]) -> [9]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.10719, "examples": ["(reverse []) -> []", "(reverse [5 6 9]) -> [9 6 5]", "(reverse [9]) -> [9]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.106575, "examples": ["(reverse []) -> []", "(reverse [0 8 3 4]) -> [4 3 8 0]", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.125969, "examples": ["(reverse []) -> []", "(reverse [7 8 5]) -> [5 8 7]", "(reverse [7 7]) -> [7 7]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.000593, "examples": ["(reverse []) -> []", "(reverse [9]) -> [9]", "(reverse [5 1 5]) -> [5 1 5]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)"}
{"time": 0.103191, "examples": ["(reverse []) -> []", "(reverse [3]) -> [3]", "(reverse [2 9 1 9]) -> [9 1 9 2]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.081651, "examples": ["(reverse []) -> []", "(reverse [5 5 3 7 2]) -> [2 7 3 5 5]", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.112008, "examples": ["(reverse []) -> []", "(reverse [3]) -> [3]", "(reverse [1 6]) -> [6 1]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.000671, "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) []) _) _)"}
{"time": 0.000332, "examples": ["(reverse []) -> []", "(reverse [1]) -> [1]", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)"}
{"time": 0.095688, "examples": ["(reverse []) -> []", "(reverse [3 9]) -> [9 3]", "(reverse [0 5 6 5 3]) -> [3 5 6 5 0]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.083891, "examples": ["(reverse []) -> []", "(reverse [7 6 1 0]) -> [0 1 6 7]", "(reverse [5]) -> [5]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.08147, "examples": ["(reverse []) -> []", "(reverse [4 1 2 7]) -> [7 2 1 4]", "(reverse [9 4]) -> [4 9]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.079648, "examples": ["(reverse []) -> []", "(reverse [8 5 5]) -> [5 5 8]", "(reverse [9 3]) -> [3 9]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.000657, "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) []) _) _)"}
{"time": 0.120161, "examples": ["(reverse []) -> []", "(reverse [0 3 5 4]) -> [4 5 3 0]", "(reverse [8 4 0]) -> [0 4 8]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.09093, "examples": ["(reverse []) -> []", "(reverse [8 2 3 0 9]) -> [9 0 3 2 8]", "(reverse [0 4 5 8]) -> [8 5 4 0]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.113738, "examples": ["(reverse []) -> []", "(reverse [8 5 5 8 1]) -> [1 8 5 5 8]", "(reverse [3]) -> [3]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.091935, "examples": ["(reverse []) -> []", "(reverse [6 0 5]) -> [5 0 6]", "(reverse [0 8 4 3]) -> [3 4 8 0]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.090371, "examples": ["(reverse []) -> []", "(reverse [5 0 7]) -> [7 0 5]", "(reverse [5]) -> [5]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
