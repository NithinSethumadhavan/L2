{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (cons 1 [])))) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs []) -> []", "(incrs [[0]]) -> [[1]]"], "name": "incrs", "time": 0.090441}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[6 3 7 5 2] [9 6 8] [5]]) -> [[7 4 8 6 3] [10 7 9] [6]]", "(incrs [[] [5]]) -> [[] [6]]", "(incrs [[8 8 8]]) -> [[9 9 9]]"], "name": "incrs", "time": 1.05599}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[8] [3 0 9 9]]) -> [[9] [4 1 10 10]]", "(incrs [[]]) -> [[]]", "(incrs [[9 4 7] []]) -> [[10 5 8] []]"], "name": "incrs", "time": 1.080277}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[] [8 6 3] [7 7 2 4]]) -> [[] [9 7 4] [8 8 3 5]]", "(incrs [[3 1] [6 9 0]]) -> [[4 2] [7 10 1]]", "(incrs [[0 0 2 2 9] [] [9 5 5] [5 1 7] [4 7 4 4]]) -> [[1 1 3 3 10] [] [10 6 6] [6 2 8] [5 8 5 5]]"], "name": "incrs", "time": 1.060482}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[]]) -> [[]]", "(incrs [[2] [9 5 2 6]]) -> [[3] [10 6 3 7]]", "(incrs [[5]]) -> [[6]]"], "name": "incrs", "time": 1.118404}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[6 2 3 1] [7]]) -> [[7 3 4 2] [8]]", "(incrs [[8 7 9 1 2]]) -> [[9 8 10 2 3]]", "(incrs [[4 9 7] []]) -> [[5 10 8] []]"], "name": "incrs", "time": 1.07767}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[2 6 4 8 8] [0 5 2] [6 3 7] [] [5]]) -> [[3 7 5 9 9] [1 6 3] [7 4 8] [] [6]]", "(incrs [[9 7 8 2 4] [7 8 8 5 6] [7 8 8] [0]]) -> [[10 8 9 3 5] [8 9 9 6 7] [8 9 9] [1]]"], "name": "incrs", "time": 1.108334}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[1 2] [] [4 9 8 7] [6 1]]) -> [[2 3] [] [5 10 9 8] [7 2]]", "(incrs [[0 6 5 3]]) -> [[1 7 6 4]]", "(incrs []) -> []"], "name": "incrs", "time": 1.125981}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[2 2 8 5 5] [6 8 6 4 6] [1 4]]) -> [[3 3 9 6 6] [7 9 7 5 7] [2 5]]", "(incrs [[4 7 7] [8 3 5 5] [3 9 1] [1] []]) -> [[5 8 8] [9 4 6 6] [4 10 2] [2] []]", "(incrs [[9 0 9 1] [2 4] [9 9 6 6 0] [8 9 1 9] [6]]) -> [[10 1 10 2] [3 5] [10 10 7 7 1] [9 10 2 10] [7]]"], "name": "incrs", "time": 1.164361}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[8 5 3] [3 8 9 1]]) -> [[9 6 4] [4 9 10 2]]", "(incrs [[9 4 6] [3 5] [3 3 7 5 1]]) -> [[10 5 7] [4 6] [4 4 8 6 2]]", "(incrs [[1 1 9 7] [2 9 3] [4] [3 4] [6 8]]) -> [[2 2 10 8] [3 10 4] [5] [4 5] [7 9]]"], "name": "incrs", "time": 1.104679}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[7 2 8 7] [2 7 3] [7 6 3]]) -> [[8 3 9 8] [3 8 4] [8 7 4]]", "(incrs [[2 6]]) -> [[3 7]]"], "name": "incrs", "time": 1.145006}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[] [9 6 8 4] [1 6 9 8 0] [1 6]]) -> [[] [10 7 9 5] [2 7 10 9 1] [2 7]]", "(incrs [[4 4 5 8 6] [9 2 5] [9] [3] []]) -> [[5 5 6 9 7] [10 3 6] [10] [4] []]"], "name": "incrs", "time": 1.089955}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[6] [] [7 8 4 4] [5] []]) -> [[7] [] [8 9 5 5] [6] []]", "(incrs [[0 5 4] [] [7]]) -> [[1 6 5] [] [8]]", "(incrs [[] [2 5 8 4 0] []]) -> [[] [3 6 9 5 1] []]"], "name": "incrs", "time": 1.228829}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[2 7 8 7]]) -> [[3 8 9 8]]", "(incrs [[1] [5] [2 2 6 9]]) -> [[2] [6] [3 3 7 10]]", "(incrs [[1] [6 4] [2 8 2 3] [5 8 6] [1 6 3 2 0]]) -> [[2] [7 5] [3 9 3 4] [6 9 7] [2 7 4 3 1]]"], "name": "incrs", "time": 1.112089}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[6 1] [5] [] [8 7 7 7] []]) -> [[7 2] [6] [] [9 8 8 8] []]", "(incrs [[4 1 3 8] [7 9 8 1] [3]]) -> [[5 2 4 9] [8 10 9 2] [4]]", "(incrs [[8] [3 5] [] [4 9 5] [3 4 2 6]]) -> [[9] [4 6] [] [5 10 6] [4 5 3 7]]"], "name": "incrs", "time": 1.202313}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[4 2] [6] [0 5 1 2 5]]) -> [[5 3] [7] [1 6 2 3 6]]", "(incrs [[9 0 6 5] [3 3 9] [2] [6 6 7 7] [0 0 2]]) -> [[10 1 7 6] [4 4 10] [3] [7 7 8 8] [1 1 3]]", "(incrs [[8 0 6 0 1]]) -> [[9 1 7 1 2]]"], "name": "incrs", "time": 1.146614}
{"solution": "(let incrs (let a (lambda (b) []) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs []) -> []", "(incrs []) -> []"], "name": "incrs", "time": 0.000502}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[1 1] [4] [3 0] [7]]) -> [[2 2] [5] [4 1] [8]]", "(incrs []) -> []", "(incrs [[0 3] [7 2 6] [] [0 0 1 2 4] [4 9 6]]) -> [[1 4] [8 3 7] [] [1 1 2 3 5] [5 10 7]]"], "name": "incrs", "time": 0.901951}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[7] [0 2] [2 1] []]) -> [[8] [1 3] [3 2] []]", "(incrs [[6] [3 0] [5 4 2 6]]) -> [[7] [4 1] [6 5 3 7]]", "(incrs [[6 8 2 4 7] [5 4 6 7 0] [5 3 8] [8 1 9 3 0] []]) -> [[7 9 3 5 8] [6 5 7 8 1] [6 4 9] [9 2 10 4 1] []]"], "name": "incrs", "time": 0.805395}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[7 4 5 7 4] [9 9 9 8] [8 1 2 4]]) -> [[8 5 6 8 5] [10 10 10 9] [9 2 3 5]]", "(incrs [[7 7 5 4] [5 6 7] [8 0 8 6 8] [7 2 5]]) -> [[8 8 6 5] [6 7 8] [9 1 9 7 9] [8 3 6]]", "(incrs [[2 7 3 0] [6 6 9] [7 0 8 5 8] [9 9]]) -> [[3 8 4 1] [7 7 10] [8 1 9 6 9] [10 10]]"], "name": "incrs", "time": 0.770488}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[6 0 7 9] [7 0 2 6 0] [4 1 8 6 7] [1 7 7] []]) -> [[7 1 8 10] [8 1 3 7 1] [5 2 9 7 8] [2 8 8] []]", "(incrs [[] [5 1 5 9] [5 4 2 8] [1 9 1 3]]) -> [[] [6 2 6 10] [6 5 3 9] [2 10 2 4]]", "(incrs [[0 6] [5] [7 4 7 1]]) -> [[1 7] [6] [8 5 8 2]]"], "name": "incrs", "time": 0.780736}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[1 3 2]]) -> [[2 4 3]]", "(incrs [[2 1] [] [9 8 1 7]]) -> [[3 2] [] [10 9 2 8]]"], "name": "incrs", "time": 0.821346}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[7] [6 1 9 1 8] []]) -> [[8] [7 2 10 2 9] []]", "(incrs [[7] [5 4 1 3 1] [8 6 1 1 6] [6] []]) -> [[8] [6 5 2 4 2] [9 7 2 2 7] [7] []]", "(incrs [[3 1 9 9 0]]) -> [[4 2 10 10 1]]"], "name": "incrs", "time": 0.789143}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[3 0] [] [8 5]]) -> [[4 1] [] [9 6]]", "(incrs [[2 5 8 3 7]]) -> [[3 6 9 4 8]]", "(incrs [[4 4 6] [8 9 0 3 2] [0 7 4] [] [0 3 2 8 5]]) -> [[5 5 7] [9 10 1 4 3] [1 8 5] [] [1 4 3 9 6]]"], "name": "incrs", "time": 0.795575}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[] [2 1 2 6] [2 0 7 6 3] [8]]) -> [[] [3 2 3 7] [3 1 8 7 4] [9]]", "(incrs []) -> []", "(incrs []) -> []"], "name": "incrs", "time": 0.903455}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[3 5] [] [2] []]) -> [[4 6] [] [3] []]", "(incrs []) -> []", "(incrs []) -> []"], "name": "incrs", "time": 1.24224}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[2 7 3 0 0]]) -> [[3 8 4 1 1]]", "(incrs []) -> []", "(incrs [[7 2 0 6]]) -> [[8 3 1 7]]"], "name": "incrs", "time": 1.200827}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[2] [5] [5 5 0]]) -> [[3] [6] [6 6 1]]", "(incrs [[4 5 3] [] [2 7] [3 6 2]]) -> [[5 6 4] [] [3 8] [4 7 3]]"], "name": "incrs", "time": 1.221025}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[9 9 7] [1 9 3 3] [4 9 9 4 5] []]) -> [[10 10 8] [2 10 4 4] [5 10 10 5 6] []]", "(incrs [[4 4] [] [8 1 5 4 7] [6 6 0 2]]) -> [[5 5] [] [9 2 6 5 8] [7 7 1 3]]", "(incrs [[]]) -> [[]]"], "name": "incrs", "time": 1.214855}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[] [3 1 7 7] [6 8 1 5] [9 0 9] []]) -> [[] [4 2 8 8] [7 9 2 6] [10 1 10] []]", "(incrs []) -> []", "(incrs [[9] [9 8 0] [5 9 6] [3]]) -> [[10] [10 9 1] [6 10 7] [4]]"], "name": "incrs", "time": 1.319157}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[4] [] [2 2 4 3] [] []]) -> [[5] [] [3 3 5 4] [] []]", "(incrs [[9 0 0 9 2] []]) -> [[10 1 1 10 3] []]", "(incrs [[1 7 9] [7 3 6 1 4] [1 3 4]]) -> [[2 8 10] [8 4 7 2 5] [2 4 5]]"], "name": "incrs", "time": 1.226148}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[] [8 0 8 3 4]]) -> [[] [9 1 9 4 5]]", "(incrs []) -> []", "(incrs [[7 7 6 6] [2 7] [] [9 9 3] [5 5 9 3]]) -> [[8 8 7 7] [3 8] [] [10 10 4] [6 6 10 4]]"], "name": "incrs", "time": 1.227831}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[8 0 3 4] [3 8 8 2] [0 8 6] [3 9]]) -> [[9 1 4 5] [4 9 9 3] [1 9 7] [4 10]]", "(incrs [[9 0] [4 7 2 5 4]]) -> [[10 1] [5 8 3 6 5]]", "(incrs [[] [4 5 8 9 8] [7 0] [6]]) -> [[] [5 6 9 10 9] [8 1] [7]]"], "name": "incrs", "time": 1.24663}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[6 3 6 4] [1 5 7 8] [7 2] [7]]) -> [[7 4 7 5] [2 6 8 9] [8 3] [8]]", "(incrs []) -> []", "(incrs [[8 5 2]]) -> [[9 6 3]]"], "name": "incrs", "time": 0.542192}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[8 1 1] [0] [9 7]]) -> [[9 2 2] [1] [10 8]]", "(incrs [[4 7] [5 7] [] [1 3 9]]) -> [[5 8] [6 8] [] [2 4 10]]"], "name": "incrs", "time": 1.107048}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[7 3 8]]) -> [[8 4 9]]", "(incrs []) -> []", "(incrs [[0 9]]) -> [[1 10]]"], "name": "incrs", "time": 0.611653}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[7 1 6 6] [] [8 7] []]) -> [[8 2 7 7] [] [9 8] []]", "(incrs [[9 7 3] [7] [2 7 0 4]]) -> [[10 8 4] [8] [3 8 1 5]]", "(incrs [[8] [9 1 6 7] [7 7 4 8] [2 7] [4 7 7]]) -> [[9] [10 2 7 8] [8 8 5 9] [3 8] [5 8 8]]"], "name": "incrs", "time": 0.646318}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[7 2 1] [0 8] [5 5 0 2 4]]) -> [[8 3 2] [1 9] [6 6 1 3 5]]", "(incrs [[5 0 8 5] [] [2 0] [2 8]]) -> [[6 1 9 6] [] [3 1] [3 9]]", "(incrs [[0 3 2] [] [6 8 5 8] [5] [9 9 8 9 4]]) -> [[1 4 3] [] [7 9 6 9] [6] [10 10 9 10 5]]"], "name": "incrs", "time": 0.6322}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[1 3 3 4 1] [4 3 2 8] []]) -> [[2 4 4 5 2] [5 4 3 9] []]", "(incrs []) -> []", "(incrs [[1 9 0 4] [7 5 2] [1 0 5 7 2]]) -> [[2 10 1 5] [8 6 3] [2 1 6 8 3]]"], "name": "incrs", "time": 0.971707}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs []) -> []", "(incrs [[8 2 5] [3 4 2]]) -> [[9 3 6] [4 5 3]]"], "name": "incrs", "time": 1.043038}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[3 1 2] [5 0 7] [9 3 5 6 9] [0 9 4]]) -> [[4 2 3] [6 1 8] [10 4 6 7 10] [1 10 5]]", "(incrs [[1 8 2 1] [2] []]) -> [[2 9 3 2] [3] []]", "(incrs [[5 8 7 6 2]]) -> [[6 9 8 7 3]]"], "name": "incrs", "time": 0.847337}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[0 4 1 3 9] [] [4 0 4 1 6]]) -> [[1 5 2 4 10] [] [5 1 5 2 7]]", "(incrs [[1] [6 7 4 0] [0 1]]) -> [[2] [7 8 5 1] [1 2]]", "(incrs [[1 2 0 3] [0 6 1 6] [] [8 3 0 9] []]) -> [[2 3 1 4] [1 7 2 7] [] [9 4 1 10] []]"], "name": "incrs", "time": 0.811324}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[] [6 0] [5 2 1 5] [2 4 2 9 3]]) -> [[] [7 1] [6 3 2 6] [3 5 3 10 4]]", "(incrs [[7] [7] [1 6 3 6 7] [3 6] [6 4 1]]) -> [[8] [8] [2 7 4 7 8] [4 7] [7 5 2]]"], "name": "incrs", "time": 0.845969}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[2 5 0 1] [1 4] [4 5 5]]) -> [[3 6 1 2] [2 5] [5 6 6]]", "(incrs []) -> []", "(incrs [[7 8]]) -> [[8 9]]"], "name": "incrs", "time": 0.93081}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[8 2 4 8 6] [6 6 7 9 4] [3 3 1 5 3]]) -> [[9 3 5 9 7] [7 7 8 10 5] [4 4 2 6 4]]", "(incrs [[8 0 4 3 5]]) -> [[9 1 5 4 6]]"], "name": "incrs", "time": 0.903609}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[2] [] [0 8]]) -> [[3] [] [1 9]]", "(incrs [[8] [5 2 4] [7 0 5 5] [3 0 6] [5 7 4 0]]) -> [[9] [6 3 5] [8 1 6 6] [4 1 7] [6 8 5 1]]", "(incrs [[0] [0 5 1] [6 4 9] [7 3 7 3 6]]) -> [[1] [1 6 2] [7 5 10] [8 4 8 4 7]]"], "name": "incrs", "time": 0.830428}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[8] [6 9 2] [9 4 9 5 6] [0]]) -> [[9] [7 10 3] [10 5 10 6 7] [1]]", "(incrs [[8 5 1]]) -> [[9 6 2]]", "(incrs [[1 1]]) -> [[2 2]]"], "name": "incrs", "time": 0.903246}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[9] [5 9 9 9] [3 3 8]]) -> [[10] [6 10 10 10] [4 4 9]]", "(incrs [[0 9 2 4 6] [4 8 4 6 2]]) -> [[1 10 3 5 7] [5 9 5 7 3]]", "(incrs []) -> []"], "name": "incrs", "time": 0.911295}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[2 8] [] [5 5] [0] [7 5]]) -> [[3 9] [] [6 6] [1] [8 6]]", "(incrs [[0 0] [0] [9 5 7 4 0] [2 9 6] [5 2 9]]) -> [[1 1] [1] [10 6 8 5 1] [3 10 7] [6 3 10]]"], "name": "incrs", "time": 0.895041}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[]]) -> [[]]", "(incrs [[5 5 8] [8]]) -> [[6 6 9] [9]]", "(incrs [[] [] [0 1 0] [6 0] [0]]) -> [[] [] [1 2 1] [7 1] [1]]"], "name": "incrs", "time": 0.623399}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[7]]) -> [[8]]", "(incrs [[] [6 1 7] [6 8 4 7 2]]) -> [[] [7 2 8] [7 9 5 8 3]]", "(incrs [[2 2 5 6]]) -> [[3 3 6 7]]"], "name": "incrs", "time": 0.499325}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[6 7 3 0] [7]]) -> [[7 8 4 1] [8]]", "(incrs [[1 2 8]]) -> [[2 3 9]]", "(incrs [[3 4 5] [4 1 6 0]]) -> [[4 5 6] [5 2 7 1]]"], "name": "incrs", "time": 1.133468}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[3 6 8 4] [2 8 9 0]]) -> [[4 7 9 5] [3 9 10 1]]", "(incrs [[7]]) -> [[8]]"], "name": "incrs", "time": 1.091414}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[1] [4]]) -> [[2] [5]]", "(incrs [[2 5 7]]) -> [[3 6 8]]", "(incrs []) -> []"], "name": "incrs", "time": 1.169426}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[1] [2 4 9 4 2] [5 3 5 9 6]]) -> [[2] [3 5 10 5 3] [6 4 6 10 7]]", "(incrs [[] [1] [0 0] [3] [6 1 4]]) -> [[] [2] [1 1] [4] [7 2 5]]", "(incrs [[3 0 1 4] [0 7 4 7]]) -> [[4 1 2 5] [1 8 5 8]]"], "name": "incrs", "time": 0.520211}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[8 3 6 0] [] []]) -> [[9 4 7 1] [] []]", "(incrs [[2 8 5 5] [8 0] []]) -> [[3 9 6 6] [9 1] []]"], "name": "incrs", "time": 1.159534}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[3 1 6] [4 4 6 1 8] [6 1 3 0 6]]) -> [[4 2 7] [5 5 7 2 9] [7 2 4 1 7]]", "(incrs [[9 4 2 0] [2 9 2 4] [1 7 2 6] [6 4 6] [8 1 9 6 1]]) -> [[10 5 3 1] [3 10 3 5] [2 8 3 7] [7 5 7] [9 2 10 7 2]]", "(incrs []) -> []"], "name": "incrs", "time": 0.552688}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[6] [8 2 6 4] []]) -> [[7] [9 3 7 5] []]", "(incrs [[3 6 5 2]]) -> [[4 7 6 3]]", "(incrs [[9 2 9 0 1] [] [9 2 6 7 7] [1]]) -> [[10 3 10 1 2] [] [10 3 7 8 8] [2]]"], "name": "incrs", "time": 0.545172}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[4 4 4 2] [9 9 5 9 2] [] [0 4 4]]) -> [[5 5 5 3] [10 10 6 10 3] [] [1 5 5]]", "(incrs [[4 4 5 9 8] [2 5 4 8]]) -> [[5 5 6 10 9] [3 6 5 9]]", "(incrs [[9 5 8] [7]]) -> [[10 6 9] [8]]"], "name": "incrs", "time": 1.198444}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[] [2 7 9 1 7] [1]]) -> [[] [3 8 10 2 8] [2]]", "(incrs [[7 7 8 1 8]]) -> [[8 8 9 2 9]]", "(incrs [[0] [] [2] [5 1 5]]) -> [[1] [] [3] [6 2 6]]"], "name": "incrs", "time": 0.536267}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[] [1] [7] [] [9]]) -> [[] [2] [8] [] [10]]", "(incrs [[8 1 8 5 7] [1 3 0 3 4] [7 4 4 7] [1]]) -> [[9 2 9 6 8] [2 4 1 4 5] [8 5 5 8] [2]]", "(incrs [[8 9 1 2 8] [3]]) -> [[9 10 2 3 9] [4]]"], "name": "incrs", "time": 1.125619}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[] [7 1 1] [9 9 5 0 5]]) -> [[] [8 2 2] [10 10 6 1 6]]", "(incrs [[] [] [5 6 7 0 9] [1] [1 8]]) -> [[] [] [6 7 8 1 10] [2] [2 9]]", "(incrs []) -> []"], "name": "incrs", "time": 0.524627}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[8 6] [9 6 1 9 5]]) -> [[9 7] [10 7 2 10 6]]", "(incrs [[7 5 3]]) -> [[8 6 4]]", "(incrs [[7 5 1 2 2] [5]]) -> [[8 6 2 3 3] [6]]"], "name": "incrs", "time": 0.510011}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[3 2 4 6] [5 0] [8 9 0 3] [2 5]]) -> [[4 3 5 7] [6 1] [9 10 1 4] [3 6]]", "(incrs [[2 9 7 2] [3 1 0 4]]) -> [[3 10 8 3] [4 2 1 5]]", "(incrs [[6 1] [6 9] [3 0] [5 2 3 0 6]]) -> [[7 2] [7 10] [4 1] [6 3 4 1 7]]"], "name": "incrs", "time": 0.525534}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[1 4 6] [2 7 2 3]]) -> [[2 5 7] [3 8 3 4]]", "(incrs [[6 5] [8 6 1 0 5]]) -> [[7 6] [9 7 2 1 6]]", "(incrs [[6 3 6] [] [2 6 6] [5 5 8 7 8] [0 7 0 2 4]]) -> [[7 4 7] [] [3 7 7] [6 6 9 8 9] [1 8 1 3 5]]"], "name": "incrs", "time": 0.665548}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[] [5] [8 4] [1 2 7 0 9]]) -> [[] [6] [9 5] [2 3 8 1 10]]", "(incrs [[8] [3 0 9 3] [7 0 3 3 4] []]) -> [[9] [4 1 10 4] [8 1 4 4 5] []]"], "name": "incrs", "time": 1.334379}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[1 1 0 3 5]]) -> [[2 2 1 4 6]]", "(incrs [[4] [7 7 3] [6 9 1] [7 6] [4 1 2]]) -> [[5] [8 8 4] [7 10 2] [8 7] [5 2 3]]", "(incrs [[4 9 4 3 2] [0 2]]) -> [[5 10 5 4 3] [1 3]]"], "name": "incrs", "time": 1.392138}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[]]) -> [[]]", "(incrs [[4 8 5 3 9]]) -> [[5 9 6 4 10]]", "(incrs [[2 3 4]]) -> [[3 4 5]]"], "name": "incrs", "time": 1.43666}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[8 4 3 7 1] [6 0 5 1] [8 3]]) -> [[9 5 4 8 2] [7 1 6 2] [9 4]]", "(incrs [[0 5 5]]) -> [[1 6 6]]", "(incrs [[9]]) -> [[10]]"], "name": "incrs", "time": 1.369612}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[0] [7 9 3 8 8] [0 0 5 5]]) -> [[1] [8 10 4 9 9] [1 1 6 6]]", "(incrs [[] [0 4 7 7] [0 3 1 8 3] [] [2]]) -> [[] [1 5 8 8] [1 4 2 9 4] [] [3]]", "(incrs [[8 8 9 8 7] [0 7 5 6 8] [2 1 6 5] [6] [5 3 7 7]]) -> [[9 9 10 9 8] [1 8 6 7 9] [3 2 7 6] [7] [6 4 8 8]]"], "name": "incrs", "time": 1.452879}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[3 5]]) -> [[4 6]]", "(incrs [[2 9] [0 4 0 0 5] [5 7 4 2] [9 0 8 1]]) -> [[3 10] [1 5 1 1 6] [6 8 5 3] [10 1 9 2]]"], "name": "incrs", "time": 1.261732}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[5]]) -> [[6]]", "(incrs [[] [6] [2 0 6] [1] [1 4 1]]) -> [[] [7] [3 1 7] [2] [2 5 2]]", "(incrs []) -> []"], "name": "incrs", "time": 0.592884}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[2 9 0 9 7] [8 7 9] [] [3 9] [0 9 8]]) -> [[3 10 1 10 8] [9 8 10] [] [4 10] [1 10 9]]", "(incrs []) -> []", "(incrs [[2 6 8] [3 1 6]]) -> [[3 7 9] [4 2 7]]"], "name": "incrs", "time": 1.157411}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[6] []]) -> [[7] []]", "(incrs [[8 9 0 6 4] [5 1] []]) -> [[9 10 1 7 5] [6 2] []]", "(incrs [[] [0 4 6 3 9] [3 6]]) -> [[] [1 5 7 4 10] [4 7]]"], "name": "incrs", "time": 0.655223}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[]]) -> [[]]", "(incrs []) -> []", "(incrs [[5 0 6 7 1] [6 4 0 2 8]]) -> [[6 1 7 8 2] [7 5 1 3 9]]"], "name": "incrs", "time": 1.184043}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[8 4 5] [8 9 9 3 6] [2]]) -> [[9 5 6] [9 10 10 4 7] [3]]", "(incrs [[2 1 5 5] [9] [0] [7 0] []]) -> [[3 2 6 6] [10] [1] [8 1] []]", "(incrs [[5] [9 5 2 6] [0 2 9 4 3] [6 6 3 9 5] [1 9]]) -> [[6] [10 6 3 7] [1 3 10 5 4] [7 7 4 10 6] [2 10]]"], "name": "incrs", "time": 0.665834}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[8 5 2 3 3] [] [1 9 9 9] [] []]) -> [[9 6 3 4 4] [] [2 10 10 10] [] []]", "(incrs [[8 8 3] [1 4 2 7]]) -> [[9 9 4] [2 5 3 8]]", "(incrs [[2 8] [2 0] [6 5 2 4] [1 9 0 5 1] [2 0]]) -> [[3 9] [3 1] [7 6 3 5] [2 10 1 6 2] [3 1]]"], "name": "incrs", "time": 0.736311}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[7] [1 3 0 7 0]]) -> [[8] [2 4 1 8 1]]", "(incrs [[5 8] [0 4]]) -> [[6 9] [1 5]]", "(incrs [[8 1] [9 4 1]]) -> [[9 2] [10 5 2]]"], "name": "incrs", "time": 1.214261}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[] [9 3 9 4]]) -> [[] [10 4 10 5]]", "(incrs [[9 2] [2]]) -> [[10 3] [3]]", "(incrs [[7 5 7 3 9]]) -> [[8 6 8 4 10]]"], "name": "incrs", "time": 0.996883}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[]]) -> [[]]", "(incrs []) -> []", "(incrs [[3 5 0 6]]) -> [[4 6 1 7]]"], "name": "incrs", "time": 0.925128}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[2 3] [5 8 8 8] [6 5 6] [8]]) -> [[3 4] [6 9 9 9] [7 6 7] [9]]", "(incrs [[6 8] [2 4 8 9 4]]) -> [[7 9] [3 5 9 10 5]]", "(incrs [[] [3 9 7]]) -> [[] [4 10 8]]"], "name": "incrs", "time": 0.801365}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[8]]) -> [[9]]", "(incrs [[1] [9 9] [3 8 3 0] [5 0 2 5 2]]) -> [[2] [10 10] [4 9 4 1] [6 1 3 6 3]]", "(incrs [[6] [9 1 4 0] [7 3 1]]) -> [[7] [10 2 5 1] [8 4 2]]"], "name": "incrs", "time": 0.755684}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[4 7 5 5] [] [1 8 5] [5 0 4] [2 7 9 1]]) -> [[5 8 6 6] [] [2 9 6] [6 1 5] [3 8 10 2]]", "(incrs [[3 4 4] [9] []]) -> [[4 5 5] [10] []]", "(incrs [[4 2 7 8] [4 4 1 6 7] [] [7 3 6]]) -> [[5 3 8 9] [5 5 2 7 8] [] [8 4 7]]"], "name": "incrs", "time": 0.739685}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[3 5 4 0 3]]) -> [[4 6 5 1 4]]", "(incrs [[7] [6 1 0] [6]]) -> [[8] [7 2 1] [7]]", "(incrs [[2 8 7] [9 1 5 0] [9]]) -> [[3 9 8] [10 2 6 1] [10]]"], "name": "incrs", "time": 0.818478}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[4 3 3 3 3]]) -> [[5 4 4 4 4]]", "(incrs [[7] [5 0 7] [2 0 4] [5 6]]) -> [[8] [6 1 8] [3 1 5] [6 7]]", "(incrs []) -> []"], "name": "incrs", "time": 0.848913}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[3 7 0 9]]) -> [[4 8 1 10]]", "(incrs [[6] [3 8 8 8 2] [8 6 7 3]]) -> [[7] [4 9 9 9 3] [9 7 8 4]]", "(incrs [[6] [2 4 0 5]]) -> [[7] [3 5 1 6]]"], "name": "incrs", "time": 0.789595}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[9 5 2 0 3] [2 0 9 8 9] [8 3 5 0 5]]) -> [[10 6 3 1 4] [3 1 10 9 10] [9 4 6 1 6]]", "(incrs [[8 4 7 4 9] [3 3 6 5 3]]) -> [[9 5 8 5 10] [4 4 7 6 4]]", "(incrs []) -> []"], "name": "incrs", "time": 0.847755}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[9] [2 6 9] [7 4 5 1]]) -> [[10] [3 7 10] [8 5 6 2]]", "(incrs [[2 9 1] [8 8 3 6 1] [3 0] [2 2 6 2 9] []]) -> [[3 10 2] [9 9 4 7 2] [4 1] [3 3 7 3 10] []]", "(incrs [[5 2 6 5 5] [5] [7 5 1]]) -> [[6 3 7 6 6] [6] [8 6 2]]"], "name": "incrs", "time": 0.527049}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[1 3 5 0 1] [8 5] [6] [5 6 3 5 5]]) -> [[2 4 6 1 2] [9 6] [7] [6 7 4 6 6]]", "(incrs []) -> []"], "name": "incrs", "time": 0.494672}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[4 7 6 2] [9 6] [4 9 0] [1 4 6 7 0]]) -> [[5 8 7 3] [10 7] [5 10 1] [2 5 7 8 1]]", "(incrs [[9 4] [5 8 0] [6 1 1 2 9]]) -> [[10 5] [6 9 1] [7 2 2 3 10]]", "(incrs [[] [1 7 7 4 5]]) -> [[] [2 8 8 5 6]]"], "name": "incrs", "time": 1.012367}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[1 5 4 4 3] []]) -> [[2 6 5 5 4] []]", "(incrs [[1 7 5 4 5]]) -> [[2 8 6 5 6]]", "(incrs [[3 2 7 6] [3 2 2 3] [8 8 8 9]]) -> [[4 3 8 7] [4 3 3 4] [9 9 9 10]]"], "name": "incrs", "time": 0.912388}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[7] [7 0 7]]) -> [[8] [8 1 8]]", "(incrs [[4 9] [3 3 6 8 0] [5 1 3 6] [0] [5 6 6 2]]) -> [[5 10] [4 4 7 9 1] [6 2 4 7] [1] [6 7 7 3]]", "(incrs [[2 8 3 3] [2 5 3 0] [5 4 6 8 4]]) -> [[3 9 4 4] [3 6 4 1] [6 5 7 9 5]]"], "name": "incrs", "time": 1.014057}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[1] [8] [8 2 1 7]]) -> [[2] [9] [9 3 2 8]]", "(incrs [[3] [8 4] [9 0 1 2 5] [] [7 5 7]]) -> [[4] [9 5] [10 1 2 3 6] [] [8 6 8]]", "(incrs [[8 4 9] [6 0 0]]) -> [[9 5 10] [7 1 1]]"], "name": "incrs", "time": 1.008685}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[]]) -> [[]]", "(incrs [[9 4]]) -> [[10 5]]", "(incrs [[8 7 6] [6] []]) -> [[9 8 7] [7] []]"], "name": "incrs", "time": 0.995946}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[5 2] [5 1 3 8 3]]) -> [[6 3] [6 2 4 9 4]]", "(incrs [[1 7]]) -> [[2 8]]", "(incrs []) -> []"], "name": "incrs", "time": 0.917512}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[5 8 9]]) -> [[6 9 10]]", "(incrs [[0 5 7 6 2] [3 0] [0 0 4]]) -> [[1 6 8 7 3] [4 1] [1 1 5]]", "(incrs [[4 9 8 3 0] [8] [9 9 2 2]]) -> [[5 10 9 4 1] [9] [10 10 3 3]]"], "name": "incrs", "time": 0.851156}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[4 3 3 4] [6 3] [] [4 8]]) -> [[5 4 4 5] [7 4] [] [5 9]]", "(incrs [[9 6 6 9 1] [0 6 5 3] []]) -> [[10 7 7 10 2] [1 7 6 4] []]", "(incrs [[9 4 2]]) -> [[10 5 3]]"], "name": "incrs", "time": 0.701831}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[8] [] [1 0] [3 8 5 2 2] []]) -> [[9] [] [2 1] [4 9 6 3 3] []]", "(incrs [[9 8 5] [2 3 9] [9]]) -> [[10 9 6] [3 4 10] [10]]", "(incrs []) -> []"], "name": "incrs", "time": 0.665122}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[5 6 3]]) -> [[6 7 4]]", "(incrs [[2 4 9 8 6] [9 2 5 9 0] []]) -> [[3 5 10 9 7] [10 3 6 10 1] []]", "(incrs [[] [3 9 8 7 3] [5 1 6]]) -> [[] [4 10 9 8 4] [6 2 7]]"], "name": "incrs", "time": 0.685131}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[] [3 8 0] [1 9 9 7] []]) -> [[] [4 9 1] [2 10 10 8] []]", "(incrs [[2] [9 1 3 1] []]) -> [[3] [10 2 4 2] []]", "(incrs [[] [5] [9] [7 6 0 9 1]]) -> [[] [6] [10] [8 7 1 10 2]]"], "name": "incrs", "time": 0.634238}
