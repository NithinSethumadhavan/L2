{"time": 0.036861, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) c) [])) _) _)", "examples": ["(join []) -> []", "(join [[0 5 1 8 4]]) -> [0 5 1 8 4]", "(join []) -> []", "(join [[6 1 6 8 2]]) -> [6 1 6 8 2]"], "name": "join"}
{"time": 3.538317, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[8 1 6 0] [9 9 1 2 6] [6]]) -> [8 1 6 0 9 9 1 2 6 6]", "(join [[5 1]]) -> [5 1]", "(join [[] [8 0 6 0 1] [0]]) -> [8 0 6 0 1 0]"], "name": "join"}
{"time": 3.5595, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[8 5 6 6 3] [] [3]]) -> [8 5 6 6 3 3]", "(join [[2 9 3] [5 9 4] [5 4 1] [2] [9 2]]) -> [2 9 3 5 9 4 5 4 1 2 9 2]", "(join []) -> []"], "name": "join"}
{"time": 3.557491, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join []) -> []", "(join [[5] [8 4] [7 2 7 4 3] [] []]) -> [5 8 4 7 2 7 4 3]"], "name": "join"}
{"time": 3.364257, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[1 5 0 6 5] [9 6 8 7 6] []]) -> [1 5 0 6 5 9 6 8 7 6]", "(join []) -> []", "(join [[7] [] [3 7 5 5] [] [1 1 8 4 3]]) -> [7 3 7 5 5 1 1 8 4 3]"], "name": "join"}
{"time": 3.613829, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[9 4 7 1]]) -> [9 4 7 1]", "(join [[0] [4 7 6 8] [2 7] [3 8 2] []]) -> [0 4 7 6 8 2 7 3 8 2]", "(join [[3 1 8 9 6]]) -> [3 1 8 9 6]"], "name": "join"}
{"time": 3.641644, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[4] [7 6 5 2 5] [6] [] [6 2 6]]) -> [4 7 6 5 2 5 6 6 2 6]", "(join [[1 9] [4 7 3 5 8]]) -> [1 9 4 7 3 5 8]"], "name": "join"}
{"time": 3.693822, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldl d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[1 8 4] [] [8]]) -> [1 8 4 8]", "(join [[0 8 9]]) -> [0 8 9]", "(join [[5] [8 6 5]]) -> [5 8 6 5]"], "name": "join"}
{"time": 0.000394, "solution": "(let join (let a (lambda (b) []) _) _)", "examples": ["(join []) -> []", "(join [[]]) -> []", "(join []) -> []", "(join []) -> []"], "name": "join"}
{"time": 3.720769, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[7]]) -> [7]", "(join []) -> []", "(join [[2 8 9] [0 7 4 4 6] [2 9 8] [9]]) -> [2 8 9 0 7 4 4 6 2 9 8 9]"], "name": "join"}
{"time": 3.858021, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[1] [0 5 1 6 6]]) -> [1 0 5 1 6 6]", "(join [[8 9 0] []]) -> [8 9 0]", "(join [[] [7 3 9]]) -> [7 3 9]"], "name": "join"}
{"time": 3.902719, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[4] [7 0 3 5 6] [7 5]]) -> [4 7 0 3 5 6 7 5]", "(join [[1 5 9 9 4] [0 9 5]]) -> [1 5 9 9 4 0 9 5]", "(join [[9] []]) -> [9]"], "name": "join"}
{"time": 3.962214, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[3 7 7] [3 2 7 2] [8 3 4] [4 4 2 9 3] [0 2]]) -> [3 7 7 3 2 7 2 8 3 4 4 4 2 9 3 0 2]", "(join []) -> []", "(join [[] []]) -> []"], "name": "join"}
{"time": 3.97304, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[9 0 3 8] [3 6] [] [2 3 4 5]]) -> [9 0 3 8 3 6 2 3 4 5]", "(join [[6 0] [1 4 0] [2] [1]]) -> [6 0 1 4 0 2 1]"], "name": "join"}
{"time": 3.965494, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[9 8 1 8] [5 9 2 7] [] [5 9]]) -> [9 8 1 8 5 9 2 7 5 9]", "(join [[9 0 4 3 3] [2] [4] [7 8 4 8 5] [9 1 2]]) -> [9 0 4 3 3 2 4 7 8 4 8 5 9 1 2]"], "name": "join"}
{"time": 3.980665, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[2] [1 7 7] [0 4] [2 3] [1 5 0 1 1]]) -> [2 1 7 7 0 4 2 3 1 5 0 1 1]", "(join [[0 4 7 3 7] [4 3 2 5 5]]) -> [0 4 7 3 7 4 3 2 5 5]", "(join [[0 4 2] [6 8 6] [2 1]]) -> [0 4 2 6 8 6 2 1]"], "name": "join"}
{"time": 3.975113, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[5] [] [8] [7]]) -> [5 8 7]", "(join [[1] [6 3 9] [0] [4 0 7 0] []]) -> [1 6 3 9 0 4 0 7 0]", "(join [[6 2 6]]) -> [6 2 6]"], "name": "join"}
{"time": 3.951734, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[]]) -> []", "(join [[2 1 2] [4 0 6 2] [3 4 4] [6 4]]) -> [2 1 2 4 0 6 2 3 4 4 6 4]", "(join [[0 6] [1 2 1] [8 3 3 1 8] [3 9] [5]]) -> [0 6 1 2 1 8 3 3 1 8 3 9 5]"], "name": "join"}
{"time": 3.12469, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[6 0 1 7] [0 7 3 3 3] [] [8 9 8 0]]) -> [6 0 1 7 0 7 3 3 3 8 9 8 0]", "(join [[3 3 6 2 9]]) -> [3 3 6 2 9]", "(join [[] [3 6 9 3] [9 6 0 2 5] []]) -> [3 6 9 3 9 6 0 2 5]"], "name": "join"}
{"time": 3.151072, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[9 2 0] [5 4] [4 5 2 0 0]]) -> [9 2 0 5 4 4 5 2 0 0]", "(join []) -> []", "(join [[3 1 6 2 8] [5] [8 8] [1 3 6 3 9]]) -> [3 1 6 2 8 5 8 8 1 3 6 3 9]"], "name": "join"}
{"time": 3.19381, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[] [7 3 5 9 1] [2 8 9 0 0]]) -> [7 3 5 9 1 2 8 9 0 0]", "(join [[4] [3] [9 1 2 6] [] [8 1 9 2 1]]) -> [4 3 9 1 2 6 8 1 9 2 1]"], "name": "join"}
{"time": 3.384304, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[]]) -> []", "(join []) -> []", "(join [[] [9 0 6 7] [0 2] [0]]) -> [9 0 6 7 0 2 0]"], "name": "join"}
{"time": 3.491711, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[7] [5 6] [4 6 2]]) -> [7 5 6 4 6 2]", "(join [[5 1]]) -> [5 1]", "(join [[1 6 4 1] [] [4 8 4] [1] [8 0 8]]) -> [1 6 4 1 4 8 4 1 8 0 8]"], "name": "join"}
{"time": 3.516487, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[1 1 9 5] [2 0 1 9] [1 7 9 6 6] [9] [9 9 8 9 4]]) -> [1 1 9 5 2 0 1 9 1 7 9 6 6 9 9 9 8 9 4]", "(join []) -> []", "(join [[5 4]]) -> [5 4]"], "name": "join"}
{"time": 3.458118, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldl d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[4] [6 4 8 3 5]]) -> [4 6 4 8 3 5]", "(join [[8] [0 4 6]]) -> [8 0 4 6]", "(join [[3 3 8 9 8] [] [3 9 1 8]]) -> [3 3 8 9 8 3 9 1 8]"], "name": "join"}
{"time": 3.218846, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldl d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[3]]) -> [3]", "(join [[] [8 7 3 5 3] [] [0]]) -> [8 7 3 5 3 0]"], "name": "join"}
{"time": 3.475743, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[0 2] [3 4 2] [4] [3 8]]) -> [0 2 3 4 2 4 3 8]", "(join [[] [3 9 4 4] [3 5 5] [7]]) -> [3 9 4 4 3 5 5 7]", "(join [[3 1 5 2 2] [4] [1 4 6 2 5] [2] []]) -> [3 1 5 2 2 4 1 4 6 2 5 2]"], "name": "join"}
{"time": 3.289114, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[] [1 0] [2 7 5 4] [7 0 2] [6]]) -> [1 0 2 7 5 4 7 0 2 6]", "(join [[2 8 6 0 0] [] [7 6 3 9]]) -> [2 8 6 0 0 7 6 3 9]", "(join [[] [5 8 0 1 3]]) -> [5 8 0 1 3]"], "name": "join"}
{"time": 3.224145, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[2 7 4 0] [9 5] [] [7]]) -> [2 7 4 0 9 5 7]", "(join [[4] [9 0 3 8] [8 5] [8 1 5] [7]]) -> [4 9 0 3 8 8 5 8 1 5 7]", "(join [[0 1 6 4]]) -> [0 1 6 4]"], "name": "join"}
{"time": 3.539171, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[6 1 2 6 3] [6 8] [1 7 5]]) -> [6 1 2 6 3 6 8 1 7 5]", "(join [[1] [0 4] [] [7 9]]) -> [1 0 4 7 9]", "(join [[4 2 4 6] [0]]) -> [4 2 4 6 0]"], "name": "join"}
{"time": 3.464993, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldl d (lambda (f e) (cons 0 c)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[] []]) -> []", "(join [[9 9 9 0]]) -> [9 9 9 0]", "(join [[0] [1 8]]) -> [0 1 8]"], "name": "join"}
{"time": 3.718819, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[0 4 4] [5 2 3]]) -> [0 4 4 5 2 3]", "(join [[2 2 3 8 7] [0 8] []]) -> [2 2 3 8 7 0 8]"], "name": "join"}
{"time": 3.800336, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[2] [] [5 5 0 6 1]]) -> [2 5 5 0 6 1]", "(join [[0 3 3 1 6] [0] [2 1] [3 6] [6 8 6 2 3]]) -> [0 3 3 1 6 0 2 1 3 6 6 8 6 2 3]", "(join []) -> []"], "name": "join"}
{"time": 0.05427, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) c) [])) _) _)", "examples": ["(join []) -> []", "(join [[]]) -> []", "(join [[4 5 6 7 7]]) -> [4 5 6 7 7]", "(join [[]]) -> []"], "name": "join"}
{"time": 3.709437, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[8 5 9 2 9] [3 9 9 8] [] [7]]) -> [8 5 9 2 9 3 9 9 8 7]", "(join []) -> []", "(join [[1 8 5] [7 5 5 5 1]]) -> [1 8 5 7 5 5 5 1]"], "name": "join"}
{"time": 2.508125, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[6 0 1 8] [] [] [5]]) -> [6 0 1 8 5]", "(join [[4] [7 4 2 4] [8 0 3] [2] []]) -> [4 7 4 2 4 8 0 3 2]", "(join [[3 1 7 6] [] [2 6 5] [7 6 6 3 3]]) -> [3 1 7 6 2 6 5 7 6 6 3 3]"], "name": "join"}
{"time": 2.446444, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[4 5 3 0 0] [4 2 9] [8 3 1 0] [8]]) -> [4 5 3 0 0 4 2 9 8 3 1 0 8]", "(join []) -> []", "(join [[4 4 5 1 9] [3 6]]) -> [4 4 5 1 9 3 6]"], "name": "join"}
{"time": 2.588724, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[3 5] [5 6 7 7 7]]) -> [3 5 5 6 7 7 7]", "(join []) -> []", "(join [[8] [1 9] [0 4] [8 8 6] [3 5]]) -> [8 1 9 0 4 8 8 6 3 5]"], "name": "join"}
{"time": 3.274771, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[9] [2 5 7 4] [] [] [2 6 2]]) -> [9 2 5 7 4 2 6 2]", "(join [[7 8 9] [] [6 6 2 6]]) -> [7 8 9 6 6 2 6]", "(join [[] [2 5 9 8 4]]) -> [2 5 9 8 4]"], "name": "join"}
{"time": 3.254455, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[7 3 5] [] [3 6 3] [5 2 3 4]]) -> [7 3 5 3 6 3 5 2 3 4]", "(join [[3 7 2] [] [9 2] [2 0 9]]) -> [3 7 2 9 2 2 0 9]", "(join [[7 3 1 1] [] [5 6 5 9] [7 8 8] [2 8]]) -> [7 3 1 1 5 6 5 9 7 8 8 2 8]"], "name": "join"}
{"time": 2.780153, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[3 1 8 5] [8 2 9 5] [8 0] [9 9]]) -> [3 1 8 5 8 2 9 5 8 0 9 9]", "(join [[8 4 8] [4] [6 1 8]]) -> [8 4 8 4 6 1 8]", "(join [[4] [4 1] []]) -> [4 4 1]"], "name": "join"}
{"time": 2.789888, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[4 2 9] [] [7 1 6 6] [0 5] [3 3]]) -> [4 2 9 7 1 6 6 0 5 3 3]", "(join [[9 4] [7 0] [2 4 8]]) -> [9 4 7 0 2 4 8]", "(join [[3 2] [4 0 1]]) -> [3 2 4 0 1]"], "name": "join"}
{"time": 3.479246, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[7 3 2 2]]) -> [7 3 2 2]", "(join [[8 8 3 5] [4] [4] [7 4 0 8] [7 0]]) -> [8 8 3 5 4 4 7 4 0 8 7 0]", "(join [[8] [5 3 5 1] [] [4 7 5 3 6] [4 5 8]]) -> [8 5 3 5 1 4 7 5 3 6 4 5 8]"], "name": "join"}
{"time": 3.739047, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[9 7 1 2] [3 7 1 5] [2 2 3] [] [9 1 6 6]]) -> [9 7 1 2 3 7 1 5 2 2 3 9 1 6 6]", "(join [[5 8 8 6 7]]) -> [5 8 8 6 7]", "(join [[0 3] [1 4 3 9 7] [1 9 1 7]]) -> [0 3 1 4 3 9 7 1 9 1 7]"], "name": "join"}
{"time": 3.534951, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[7 8] [] [7 3] [4 8 6 8 3] [6 7]]) -> [7 8 7 3 4 8 6 8 3 6 7]", "(join [[2 4 5] [4 7] [2 6 5 8] []]) -> [2 4 5 4 7 2 6 5 8]", "(join []) -> []"], "name": "join"}
{"time": 0.000664, "solution": "(let join (let a (lambda (b) []) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join []) -> []", "(join []) -> []"], "name": "join"}
{"time": 3.73234, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[] [7 0] [0 4 5 4 2] [4 0 8 4 7] [7]]) -> [7 0 0 4 5 4 2 4 0 8 4 7 7]", "(join []) -> []", "(join [[7 1 9 0 5] [4 9] [6 6 5 4 5] [] [8 7 7 6]]) -> [7 1 9 0 5 4 9 6 6 5 4 5 8 7 7 6]"], "name": "join"}
{"time": 3.775305, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[4 7] [4 4 4 5 7] [2 0 1 6 8] [3 0] [4 0 0 5]]) -> [4 7 4 4 4 5 7 2 0 1 6 8 3 0 4 0 0 5]", "(join [[5 9 8 8 4]]) -> [5 9 8 8 4]", "(join [[6 0 0 4 9] [8 3 1 4] [] [1 2 5 9] [3 1]]) -> [6 0 0 4 9 8 3 1 4 1 2 5 9 3 1]"], "name": "join"}
{"time": 0.041074, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) c) [])) _) _)", "examples": ["(join []) -> []", "(join [[8 5 7]]) -> [8 5 7]", "(join [[7 4 3 9]]) -> [7 4 3 9]", "(join []) -> []"], "name": "join"}
{"time": 3.821042, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[4 2 7 0] [9 8 6 1] [3 9]]) -> [4 2 7 0 9 8 6 1 3 9]", "(join []) -> []", "(join [[1 7 3] [7 8] [1 0] [2 3]]) -> [1 7 3 7 8 1 0 2 3]"], "name": "join"}
{"time": 3.897341, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[4 8 0] [4 7 9 9] [3 2 1 9]]) -> [4 8 0 4 7 9 9 3 2 1 9]", "(join []) -> []", "(join [[5] [5 1 3 1] [8 7 0] [1 4] [0]]) -> [5 5 1 3 1 8 7 0 1 4 0]"], "name": "join"}
{"time": 3.845616, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[5 2 8] [1 0] [5]]) -> [5 2 8 1 0 5]", "(join [[7 5 7 6 9] [9] [6 5 8 2 5] [2]]) -> [7 5 7 6 9 9 6 5 8 2 5 2]", "(join [[4 3] [8] [4 9 9 9]]) -> [4 3 8 4 9 9 9]"], "name": "join"}
{"time": 3.973547, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[5 9 1] [3 4] [6 2 4] [7 2 5 9] []]) -> [5 9 1 3 4 6 2 4 7 2 5 9]", "(join [[5] [5 7 8 2] [6 7] [] [2 4 8 5 8]]) -> [5 5 7 8 2 6 7 2 4 8 5 8]", "(join [[]]) -> []"], "name": "join"}
{"time": 3.456666, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[4]]) -> [4]", "(join [[2 8] [9 4 0]]) -> [2 8 9 4 0]", "(join [[5 5 3 0 3]]) -> [5 5 3 0 3]"], "name": "join"}
{"time": 3.178941, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[0] [0 7] [6 3 7 4] [3] [6 1 8 9 7]]) -> [0 0 7 6 3 7 4 3 6 1 8 9 7]", "(join [[4] [7] [6 7 1 2] [8] []]) -> [4 7 6 7 1 2 8]", "(join [[4 0 1 2]]) -> [4 0 1 2]"], "name": "join"}
{"time": 0.000844, "solution": "(let join (let a (lambda (b) []) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join []) -> []", "(join []) -> []"], "name": "join"}
{"time": 3.719202, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[1] [2 2] [3 7 3 7] []]) -> [1 2 2 3 7 3 7]", "(join [[8 2 4 8] [7 5 3 8 8] [6 4] [1 7 8 2]]) -> [8 2 4 8 7 5 3 8 8 6 4 1 7 8 2]", "(join [[9 0 4 3]]) -> [9 0 4 3]"], "name": "join"}
{"time": 3.486377, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[2 9 1 9] [8 0] [4] []]) -> [2 9 1 9 8 0 4]", "(join [[9 0 5 2 0]]) -> [9 0 5 2 0]", "(join [[] [2 5 2]]) -> [2 5 2]"], "name": "join"}
{"time": 3.22577, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[7 9 0]]) -> [7 9 0]", "(join [[3 4 8] [2]]) -> [3 4 8 2]", "(join [[1 0 5]]) -> [1 0 5]"], "name": "join"}
{"time": 2.992193, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[0 1 6 8 1] [4 7 3 0] [2] [1 1 4 8] [3]]) -> [0 1 6 8 1 4 7 3 0 2 1 1 4 8 3]", "(join [[1 4 0 8 6] [] [] [3 2 1 0 7] [7]]) -> [1 4 0 8 6 3 2 1 0 7 7]", "(join [[6 9] [9 3 9 8] [6 2 5]]) -> [6 9 9 3 9 8 6 2 5]"], "name": "join"}
{"time": 3.122504, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[] [3] [8 3 9 6 0] [8 9 4 5]]) -> [3 8 3 9 6 0 8 9 4 5]", "(join [[2 2 5 9] [2 6 4 9 6]]) -> [2 2 5 9 2 6 4 9 6]", "(join [[9] [] [0 8 1 1] [3 2 8] [6 7 5 2]]) -> [9 0 8 1 1 3 2 8 6 7 5 2]"], "name": "join"}
{"time": 2.776609, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[8] [7] [4 5 5 4] []]) -> [8 7 4 5 5 4]", "(join [[7]]) -> [7]", "(join []) -> []"], "name": "join"}
{"time": 3.678913, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join []) -> []", "(join [[] [4 5 2 9 9] [0 3 6 6 6] [4 8 1]]) -> [4 5 2 9 9 0 3 6 6 6 4 8 1]"], "name": "join"}
{"time": 3.509531, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[5 7 7 2 7] [0 2 5 7] [2 2] [6 5 5 5] [3]]) -> [5 7 7 2 7 0 2 5 7 2 2 6 5 5 5 3]", "(join []) -> []"], "name": "join"}
{"time": 3.725737, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[2 6 9 6] [4 5 7] [] [1 9 4 9 5]]) -> [2 6 9 6 4 5 7 1 9 4 9 5]", "(join [[3]]) -> [3]", "(join [[9 1] [1 1 6 1] [2 7 1 1 5] [0] [9 7 8 9 3]]) -> [9 1 1 1 6 1 2 7 1 1 5 0 9 7 8 9 3]"], "name": "join"}
{"time": 3.718747, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[0] [6] [3 1 4 6]]) -> [0 6 3 1 4 6]", "(join [[4 2] [8 6 9] []]) -> [4 2 8 6 9]", "(join [[1 1 6 8] [] [0 1 6 5]]) -> [1 1 6 8 0 1 6 5]"], "name": "join"}
{"time": 3.422226, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[3 7 9] [] [0] []]) -> [3 7 9 0]", "(join []) -> []"], "name": "join"}
{"time": 3.497234, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[] [0 3 8 5 1]]) -> [0 3 8 5 1]", "(join [[] [3 2] [0 9 8]]) -> [3 2 0 9 8]", "(join []) -> []"], "name": "join"}
{"time": 0.028235, "solution": "(let join (let a (lambda (b) (map b (lambda (c) (car c)))) _) _)", "examples": ["(join []) -> []", "(join [[5]]) -> [5]", "(join [[6]]) -> [6]", "(join []) -> []"], "name": "join"}
{"time": 3.347324, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[] [3] [5 0 1 7] [6 0 9 4] [0]]) -> [3 5 0 1 7 6 0 9 4 0]", "(join [[3] [6 0] [8] [2 7 3 2] [5 2 7]]) -> [3 6 0 8 2 7 3 2 5 2 7]", "(join [[1 9 1] [6 6] []]) -> [1 9 1 6 6]"], "name": "join"}
{"time": 4.143126, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[4 1 6 6 3] [5 6 6] [6 7 8] [1 2 4 7] [9]]) -> [4 1 6 6 3 5 6 6 6 7 8 1 2 4 7 9]", "(join [[3 4 7 6] [2 2 9 2 6] [6 6 0 2 4] [3 8 6]]) -> [3 4 7 6 2 2 9 2 6 6 6 0 2 4 3 8 6]", "(join [[6 7 1 1] [8 0 7 4 1]]) -> [6 7 1 1 8 0 7 4 1]"], "name": "join"}
{"time": 3.07552, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[1] [5 1] [6] [8 8 1] []]) -> [1 5 1 6 8 8 1]", "(join [[1] [3 4 4 6]]) -> [1 3 4 4 6]"], "name": "join"}
{"time": 2.75081, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[3 3 0 0] [9 4 0 8] [3 2 4]]) -> [3 3 0 0 9 4 0 8 3 2 4]", "(join []) -> []", "(join []) -> []"], "name": "join"}
{"time": 3.242589, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldl d (lambda (f e) (cons e c)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[5] [] [7 0 1]]) -> [5 7 0 1]", "(join [[1 3 4]]) -> [1 3 4]"], "name": "join"}
{"time": 3.648058, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[0 2 2 3 1] [] [5]]) -> [0 2 2 3 1 5]", "(join [[] [] [7] []]) -> [7]", "(join [[8 5 3] [5 4 4 9] [9 9 6 2] [] [5 4 8 0]]) -> [8 5 3 5 4 4 9 9 9 6 2 5 4 8 0]"], "name": "join"}
{"time": 3.290538, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[0 6 0 8] [5 6] [6 7 2 8] [3 9 0]]) -> [0 6 0 8 5 6 6 7 2 8 3 9 0]", "(join [[5 7 3]]) -> [5 7 3]", "(join [[3 7] [2 1] [9]]) -> [3 7 2 1 9]"], "name": "join"}
{"time": 2.892052, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[6 8 4 9 4] [4 2]]) -> [6 8 4 9 4 4 2]", "(join []) -> []", "(join [[5 3 4] [0 3]]) -> [5 3 4 0 3]"], "name": "join"}
{"time": 2.521331, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[1]]) -> [1]", "(join [[9 6]]) -> [9 6]", "(join [[9 6] [0] [6 3] [7 6 4 9]]) -> [9 6 0 6 3 7 6 4 9]"], "name": "join"}
{"time": 3.957544, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldl d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[] [6] [7 1 6 7 1] [] []]) -> [6 7 1 6 7 1]", "(join [[2 1]]) -> [2 1]", "(join []) -> []"], "name": "join"}
{"time": 3.202736, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[0 5 1] [5 9] [] [9 2 0]]) -> [0 5 1 5 9 9 2 0]", "(join [[] [4] [0 1 8 3 3]]) -> [4 0 1 8 3 3]"], "name": "join"}
{"time": 2.498006, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[5 3] [4 8 6] [9 8 7] [2]]) -> [5 3 4 8 6 9 8 7 2]", "(join [[5 3]]) -> [5 3]", "(join [[] [2 1 8 2] [] [5 4 7]]) -> [2 1 8 2 5 4 7]"], "name": "join"}
{"time": 2.892226, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[] [0 1 1 6]]) -> [0 1 1 6]", "(join [[6 0 2] []]) -> [6 0 2]", "(join [[] [7 7] [2 4] [3]]) -> [7 7 2 4 3]"], "name": "join"}
{"time": 0.794762, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldl d (lambda (f e) d) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[5]]) -> [5]", "(join [[4]]) -> [4]", "(join [[] [] [2 8 3 0 6] []]) -> [2 8 3 0 6]"], "name": "join"}
{"time": 4.4981, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[6 0] [3 9 1] [4 0 6 2 6] [2]]) -> [6 0 3 9 1 4 0 6 2 6 2]", "(join [[] [2 1 6 7 5] [9 7 7 0] []]) -> [2 1 6 7 5 9 7 7 0]", "(join []) -> []"], "name": "join"}
{"time": 4.317105, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[6 2 3 3 2] [7] []]) -> [6 2 3 3 2 7]", "(join [[0 9 0 0] [3 8 7 5 1] [9 6 8 1 8]]) -> [0 9 0 0 3 8 7 5 1 9 6 8 1 8]", "(join []) -> []"], "name": "join"}
{"time": 4.535241, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[9 6 6]]) -> [9 6 6]", "(join [[0 8 2 7] [6 4] [2 8 2] [6 5]]) -> [0 8 2 7 6 4 2 8 2 6 5]", "(join [[5 2 7] [] [] [3 7 8 3] [5 9 4]]) -> [5 2 7 3 7 8 3 5 9 4]"], "name": "join"}
{"time": 4.445214, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[8 1] [5 7 3 1] []]) -> [8 1 5 7 3 1]", "(join [[2 0] [2 5 4 9 2] [2 6 7 6 6] [1 3] [8]]) -> [2 0 2 5 4 9 2 2 6 7 6 6 1 3 8]", "(join [[]]) -> []"], "name": "join"}
{"time": 2.489396, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[0 1 3 5] [5 2 2 6 1] [9]]) -> [0 1 3 5 5 2 2 6 1 9]", "(join []) -> []"], "name": "join"}
{"time": 3.316813, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[9] [0 3 1 2 5] [7]]) -> [9 0 3 1 2 5 7]", "(join []) -> []", "(join [[8 5 6 9] [2] [] [] [1 4 6 1 4]]) -> [8 5 6 9 2 1 4 6 1 4]"], "name": "join"}
{"time": 2.691122, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[6] [5 8 2 2 0] []]) -> [6 5 8 2 2 0]", "(join [[8 8] [8 0 3 7 9]]) -> [8 8 8 0 3 7 9]", "(join [[8 1 8 3 5] [8 4 1] [3 5 3] [8 7 1 4 8]]) -> [8 1 8 3 5 8 4 1 3 5 3 8 7 1 4 8]"], "name": "join"}
{"time": 2.787706, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[7 2 1 0] [] [9] [8 6 3] [3]]) -> [7 2 1 0 9 8 6 3 3]", "(join [[] []]) -> []", "(join [[6 2 8 2 9] [4 0 1 3 9] [2 7 0 2]]) -> [6 2 8 2 9 4 0 1 3 9 2 7 0 2]"], "name": "join"}
{"time": 2.94241, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[0 4]]) -> [0 4]", "(join [[5 9 0 2] [0 6] [5 0 4 3]]) -> [5 9 0 2 0 6 5 0 4 3]", "(join [[3 1] [0 4 8 0 2] [7] [3 3 1 4] [5 4 2 1 6]]) -> [3 1 0 4 8 0 2 7 3 3 1 4 5 4 2 1 6]"], "name": "join"}
{"time": 3.358592, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[7 3 7 7] [9 6] [9] [5 7 6 7 9] [1 2 2 6]]) -> [7 3 7 7 9 6 9 5 7 6 7 9 1 2 2 6]", "(join [[1 2] [8 3 4 3]]) -> [1 2 8 3 4 3]"], "name": "join"}
{"time": 2.731209, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[] [4 7 7 4] [1] []]) -> [4 7 7 4 1]", "(join [[6 3 3 6 2] [] [0 4 5]]) -> [6 3 3 6 2 0 4 5]", "(join [[1 5]]) -> [1 5]"], "name": "join"}
{"time": 2.317981, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[5] [7 8 9] [4 5 1 2]]) -> [5 7 8 9 4 5 1 2]", "(join [[5 4 8 4] [] [6 5 7 5]]) -> [5 4 8 4 6 5 7 5]", "(join [[4] [] [8 0 6 7] [6 7]]) -> [4 8 0 6 7 6 7]"], "name": "join"}
{"time": 3.326516, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[2 5]]) -> [2 5]", "(join [[2 6] []]) -> [2 6]", "(join [[4 8 0] [1 7 0 7 4]]) -> [4 8 0 1 7 0 7 4]"], "name": "join"}
{"time": 2.158209, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join []) -> []", "(join [[7 3 6] [3 4] [4 4 7 7] []]) -> [7 3 6 3 4 4 4 7 7]", "(join [[5 5 5] [3 4 9 7 3] [5 7]]) -> [5 5 5 3 4 9 7 3 5 7]"], "name": "join"}
{"time": 2.197566, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[4]]) -> [4]", "(join [[0 9] [5 1 1 3] [3] [1 4 4]]) -> [0 9 5 1 1 3 3 1 4 4]", "(join [[9 7]]) -> [9 7]"], "name": "join"}
{"time": 1.218305, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[8 3]]) -> [8 3]", "(join [[] [1 0 5 1] [4 6 5 4]]) -> [1 0 5 1 4 6 5 4]", "(join [[3 8] [1 4]]) -> [3 8 1 4]"], "name": "join"}
{"time": 1.413827, "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "examples": ["(join []) -> []", "(join [[1 9 7 2 7] [7 4 9 4] [4 4] []]) -> [1 9 7 2 7 7 4 9 4 4 4]", "(join [[5 0] [] [0 2]]) -> [5 0 0 2]", "(join []) -> []"], "name": "join"}
