{"examples": ["(dupli []) -> []", "(dupli [8]) -> [8 8]", "(dupli [1]) -> [1 1]"], "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c b)) b)) _) _)", "time": 0.241438, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 6]) -> [2 2 6 6]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.975037, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 9 2 1 8]) -> [9 9 9 9 2 2 1 1 8 8]", "(dupli [8]) -> [8 8]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.937862, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 1]) -> [9 9 1 1]", "(dupli [8 1 2]) -> [8 8 1 1 2 2]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.94361, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 8 4]) -> [9 9 8 8 4 4]", "(dupli [5 9 2 2]) -> [5 5 9 9 2 2 2 2]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.829759, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 4 6 8 5]) -> [4 4 4 4 6 6 8 8 5 5]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.930828, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [2 6 1 6]) -> [2 2 6 6 1 1 6 6]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.997679, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6]) -> [6 6]", "(dupli [9 2 0 0]) -> [9 9 2 2 0 0 0 0]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.950175, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 2 4 3 6]) -> [2 2 2 2 4 4 3 3 6 6]", "(dupli [6 2 7 5 7]) -> [6 6 2 2 7 7 5 5 7 7]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.957079, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 1 2]) -> [9 9 1 1 2 2]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.984046, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1 8]) -> [1 1 8 8]", "(dupli [6 7]) -> [6 6 7 7]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.908722, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 1 1]) -> [2 2 1 1 1 1]", "(dupli [0 7 7]) -> [0 0 7 7 7 7]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 1.006167, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0]) -> [0 0]", "(dupli [9 6 9 5]) -> [9 9 6 6 9 9 5 5]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.96027, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 0 2]) -> [8 8 0 0 2 2]", "(dupli [7 0 1]) -> [7 7 0 0 1 1]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.916871, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1 5 2]) -> [1 1 5 5 2 2]", "(dupli [8]) -> [8 8]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 1.006968, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 8 6 2 4]) -> [7 7 8 8 6 6 2 2 4 4]", "(dupli [9]) -> [9 9]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.966269, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) []) _) _)", "time": 0.000363, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) []) _) _)", "time": 0.000348, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 6]) -> [9 9 6 6]", "(dupli [7]) -> [7 7]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.558872, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [3]) -> [3 3]"], "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c b)) b)) _) _)", "time": 0.094872, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 9 5]) -> [9 9 9 9 5 5]", "(dupli [2]) -> [2 2]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.457208, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8]) -> [8 8]", "(dupli [3 5]) -> [3 3 5 5]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.453257, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 1 6]) -> [9 9 1 1 6 6]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.507907, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 8 4 1]) -> [8 8 8 8 4 4 1 1]", "(dupli [2]) -> [2 2]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.476325, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1 5]) -> [1 1 5 5]", "(dupli [5 2]) -> [5 5 2 2]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.462829, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3]) -> [3 3]", "(dupli [8]) -> [8 8]"], "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c b)) b)) _) _)", "time": 0.059234, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 4 0]) -> [9 9 4 4 0 0]", "(dupli [1 3]) -> [1 1 3 3]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.801293, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [9 1 2 6]) -> [9 9 1 1 2 2 6 6]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.973288, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 7]) -> [0 0 7 7]", "(dupli [1]) -> [1 1]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.973631, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 3 0]) -> [6 6 3 3 0 0]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 1.014342, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1 7]) -> [1 1 7 7]", "(dupli [3 1 8]) -> [3 3 1 1 8 8]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 1.011937, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 5 4]) -> [7 7 5 5 4 4]", "(dupli [5]) -> [5 5]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.431245, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 9 5 8 0]) -> [9 9 9 9 5 5 8 8 0 0]", "(dupli [9 5 1 7 4]) -> [9 9 5 5 1 1 7 7 4 4]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.431595, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 3 0 6 3]) -> [9 9 3 3 0 0 6 6 3 3]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.432998, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 7 1 1]) -> [7 7 7 7 1 1 1 1]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 1.07143, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 8]) -> [4 4 8 8]", "(dupli [1 5 3]) -> [1 1 5 5 3 3]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 1.009263, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 1 1 0]) -> [6 6 1 1 1 1 0 0]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 1.012852, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 2 7 4 0]) -> [0 0 2 2 7 7 4 4 0 0]", "(dupli [4 9 2 4 2]) -> [4 4 9 9 2 2 4 4 2 2]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 1.030445, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 0]) -> [8 8 0 0]", "(dupli [3]) -> [3 3]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.887492, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1 2 1 3]) -> [1 1 2 2 1 1 3 3]", "(dupli [2 7]) -> [2 2 7 7]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.460468, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 5 6 1 6]) -> [6 6 5 5 6 6 1 1 6 6]", "(dupli [6 5 1]) -> [6 6 5 5 1 1]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.905202, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 9 3 9]) -> [0 0 9 9 3 3 9 9]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.752384, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1 6 4 2 0]) -> [1 1 6 6 4 4 2 2 0 0]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.679453, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 7 0 4]) -> [7 7 7 7 0 0 4 4]", "(dupli [8 2 7 1]) -> [8 8 2 2 7 7 1 1]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.515838, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 0 4 6]) -> [9 9 0 0 4 4 6 6]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.565678, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 0]) -> [3 3 0 0]", "(dupli [1 4 9]) -> [1 1 4 4 9 9]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.546117, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 2 1 4 7]) -> [4 4 2 2 1 1 4 4 7 7]", "(dupli [6 9 3]) -> [6 6 9 9 3 3]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.546482, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 2 6]) -> [4 4 2 2 6 6]", "(dupli [6 8 9 1 6]) -> [6 6 8 8 9 9 1 1 6 6]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.484095, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 1]) -> [2 2 1 1]", "(dupli [2]) -> [2 2]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.721375, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3]) -> [3 3]", "(dupli [6 2 6 4 4]) -> [6 6 2 2 6 6 4 4 4 4]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.440805, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 4 1]) -> [3 3 4 4 1 1]", "(dupli [7]) -> [7 7]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.80826, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 6 4]) -> [2 2 6 6 4 4]", "(dupli [7 9 6 3]) -> [7 7 9 9 6 6 3 3]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.854143, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7]) -> [7 7]", "(dupli [2]) -> [2 2]"], "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c b)) b)) _) _)", "time": 0.063242, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 8]) -> [2 2 8 8]", "(dupli [1 7]) -> [1 1 7 7]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.855973, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [3 4 4 7 1]) -> [3 3 4 4 4 4 7 7 1 1]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.96354, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 8]) -> [6 6 8 8]", "(dupli [2]) -> [2 2]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.456439, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7]) -> [7 7]", "(dupli [5 1 1 7]) -> [5 5 1 1 1 1 7 7]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.869912, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 8 4 4 0]) -> [6 6 8 8 4 4 4 4 0 0]", "(dupli [4 8 4 1]) -> [4 4 8 8 4 4 1 1]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.996222, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6]) -> [6 6]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c b)) b)) _) _)", "time": 0.18991, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 2]) -> [9 9 2 2]", "(dupli [4]) -> [4 4]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.414398, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 1 6 3]) -> [4 4 1 1 6 6 3 3]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.420796, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [5 4]) -> [5 5 4 4]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 1.114772, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 7 3]) -> [9 9 7 7 3 3]", "(dupli [6]) -> [6 6]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.369164, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 6 1 6]) -> [9 9 6 6 1 1 6 6]", "(dupli [1 1 1 6]) -> [1 1 1 1 1 1 6 6]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 1.034187, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1 1 2 3 4]) -> [1 1 1 1 2 2 3 3 4 4]", "(dupli [6 6]) -> [6 6 6 6]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.952258, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [8 6 3 5]) -> [8 8 6 6 3 3 5 5]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 1.028446, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 1]) -> [7 7 1 1]", "(dupli [1 1 8 4 8]) -> [1 1 1 1 8 8 4 4 8 8]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.943134, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5 4 2 2 9]) -> [5 5 4 4 2 2 2 2 9 9]", "(dupli [2 7]) -> [2 2 7 7]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.960909, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 3 1 2]) -> [0 0 3 3 1 1 2 2]", "(dupli [5]) -> [5 5]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.434841, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4]) -> [4 4]", "(dupli [1 0 8]) -> [1 1 0 0 8 8]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.410168, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 9]) -> [7 7 9 9]", "(dupli [5]) -> [5 5]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.440735, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 2 6]) -> [8 8 2 2 6 6]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.46562, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 9 7]) -> [7 7 9 9 7 7]", "(dupli [3 4 5 3]) -> [3 3 4 4 5 5 3 3]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.933371, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1 5 1 9 5]) -> [1 1 5 5 1 1 9 9 5 5]", "(dupli [7 0 7 1]) -> [7 7 0 0 7 7 1 1]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.972679, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) []) _) _)", "time": 0.000794, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3]) -> [3 3]", "(dupli [0 4 2 3]) -> [0 0 4 4 2 2 3 3]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.835111, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 1 7 0 1]) -> [6 6 1 1 7 7 0 0 1 1]", "(dupli [4 7 7]) -> [4 4 7 7 7 7]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.712366, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5 2 9]) -> [5 5 2 2 9 9]", "(dupli [0 5 6 4]) -> [0 0 5 5 6 6 4 4]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.630111, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5]) -> [5 5]", "(dupli [8 3]) -> [8 8 3 3]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.751969, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [4 8 4]) -> [4 4 8 8 4 4]"], "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.445377, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [0]) -> [0 0]"], "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons 0 b)) b)) _) _)", "time": 0.057587, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 9 7]) -> [9 9 9 9 7 7]", "(dupli [9 1 9 2 3]) -> [9 9 1 1 9 9 2 2 3 3]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.750717, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 6]) -> [0 0 6 6]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.596656, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 1 0]) -> [8 8 1 1 0 0]", "(dupli [3]) -> [3 3]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.64067, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 3]) -> [3 3 3 3]", "(dupli [3 9 8]) -> [3 3 9 9 8 8]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.681348, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 5]) -> [6 6 5 5]", "(dupli [6 4 6 4]) -> [6 6 4 4 6 6 4 4]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.729271, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5]) -> [5 5]", "(dupli [2 9 6 5 9]) -> [2 2 9 9 6 6 5 5 9 9]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.536739, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 5]) -> [2 2 5 5]", "(dupli [1]) -> [1 1]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.716107, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [1 8 5 1]) -> [1 1 8 8 5 5 1 1]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.729155, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [0]) -> [0 0]"], "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons 0 b)) b)) _) _)", "time": 0.14008, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [5]) -> [5 5]"], "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c b)) b)) _) _)", "time": 0.071588, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 2 4]) -> [0 0 2 2 4 4]", "(dupli [2 3 2 0]) -> [2 2 3 3 2 2 0 0]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.613608, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 5 4 1 9]) -> [0 0 5 5 4 4 1 1 9 9]", "(dupli [6]) -> [6 6]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.566021, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 3 7 3 7]) -> [6 6 3 3 7 7 3 3 7 7]", "(dupli [4 3 7 9 9]) -> [4 4 3 3 7 7 9 9 9 9]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.776792, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 4]) -> [2 2 4 4]", "(dupli [2 3]) -> [2 2 3 3]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.485061, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 1 7 8]) -> [4 4 1 1 7 7 8 8]", "(dupli [2 0]) -> [2 2 0 0]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.476332, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [6 7 6 5]) -> [6 6 7 7 6 6 5 5]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.508229, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9]) -> [9 9]", "(dupli [7 6 7 9]) -> [7 7 6 6 7 7 9 9]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.513462, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 4 3 0]) -> [3 3 4 4 3 3 0 0]", "(dupli []) -> []"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.500433, "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1 2]) -> [1 1 2 2]", "(dupli [0 4 0 2]) -> [0 0 4 4 0 0 2 2]"], "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "time": 0.428443, "name": "dupli"}
