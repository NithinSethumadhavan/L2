{"name": "max", "examples": ["(max [9 9]) -> 9", "(max [2]) -> 2", "(max [4 3]) -> 4", "(max [7 1 0 2 2]) -> 7"], "solution": "(let max (let a (lambda (b) (car b)) _) _)", "time": 0.001015}
{"name": "max", "examples": ["(max [0 3]) -> 3", "(max [1 6 4 1]) -> 6", "(max [2 7]) -> 7", "(max [1 7]) -> 7"], "solution": "(let max (let a (lambda (b) (car (cdr b))) _) _)", "time": 0.008027}
{"name": "max", "examples": ["(max [9 7 6 7 2]) -> 9", "(max [8 4 5]) -> 8", "(max [9 3]) -> 9", "(max [8 8 5 5]) -> 8"], "solution": "(let max (let a (lambda (b) (car b)) _) _)", "time": 0.000645}
{"name": "max", "examples": ["(max [7 2 6 5]) -> 7", "(max [2 6 7 2]) -> 7", "(max [6 0]) -> 6", "(max [6 9 7 5 8]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.185964}
{"name": "max", "examples": ["(max [5 0 8 0]) -> 8", "(max [1 9 4]) -> 9", "(max [7 7 1]) -> 7", "(max [5 2]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.327616}
{"name": "max", "examples": ["(max [4 0 9]) -> 9", "(max [8 4 7 0 7]) -> 8", "(max [6]) -> 6", "(max [3 7 3]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.474664}
{"name": "max", "examples": ["(max [8 0 5 7 6]) -> 8", "(max [2 9 0 6 3]) -> 9", "(max [3 6 8 8]) -> 8", "(max [3]) -> 3"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.534915}
{"name": "max", "examples": ["(max [7 8 8 6 9]) -> 9", "(max [5 1 2 2 0]) -> 5", "(max [8 3 2 7]) -> 8", "(max [5 8 5 4 4]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.576999}
{"name": "max", "examples": ["(max [5 5 3 1 2]) -> 5", "(max [7 1 1]) -> 7", "(max [8]) -> 8", "(max [2 0]) -> 2"], "solution": "(let max (let a (lambda (b) (car b)) _) _)", "time": 0.001134}
{"name": "max", "examples": ["(max [8 0 7 2 5]) -> 8", "(max [2 8 0 4]) -> 8", "(max [1 1 3 4]) -> 4", "(max [1 1 3 4]) -> 4"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.104077}
{"name": "max", "examples": ["(max [4]) -> 4", "(max [8 5 2 3 3]) -> 8", "(max [6 6 9 9]) -> 9", "(max [6 1 5 6]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.317696}
{"name": "max", "examples": ["(max [0 9]) -> 9", "(max [0 2]) -> 2", "(max [9 4 6 7]) -> 9", "(max [0 2]) -> 2"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 0 d) c d)) 0)) _) _)", "time": 9.375427}
{"name": "max", "examples": ["(max [0 3 0 8 1]) -> 8", "(max [1 5 6 0]) -> 6", "(max [1 8 8 5 4]) -> 8", "(max [9 7 4 6 1]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.37278}
{"name": "max", "examples": ["(max [9 7 9 0]) -> 9", "(max [3 3 5 9]) -> 9", "(max [1 2 7]) -> 7", "(max [4]) -> 4"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 0 c) d c)) 0)) _) _)", "time": 9.577173}
{"name": "max", "examples": ["(max [8 3]) -> 8", "(max [6 1]) -> 6", "(max [7 6 0]) -> 7", "(max [6 6 6 0]) -> 6"], "solution": "(let max (let a (lambda (b) (car b)) _) _)", "time": 0.000999}
{"name": "max", "examples": ["(max [5 8 9 6 9]) -> 9", "(max [8 7 9]) -> 9", "(max [1]) -> 1", "(max [7 2 7 2 1]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.469077}
{"name": "max", "examples": ["(max [1 2 6]) -> 6", "(max [2 4 2 8 8]) -> 8", "(max [4 9 4 0 3]) -> 9", "(max [2 2 9 6]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.561555}
{"name": "max", "examples": ["(max [4 2 3]) -> 4", "(max [6 0 9]) -> 9", "(max [1 9 0]) -> 9", "(max [6 9 4]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.397536}
{"name": "max", "examples": ["(max [4 3]) -> 4", "(max [4 3 9 8 8]) -> 9", "(max [6 9]) -> 9", "(max [6 5 4]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.743129}
{"name": "max", "examples": ["(max [5 1 4]) -> 5", "(max [0 7 8]) -> 8", "(max [8 1 8]) -> 8", "(max [5 7 1 6 7]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.659542}
{"name": "max", "examples": ["(max [9 1 3]) -> 9", "(max [7 3]) -> 7", "(max [5 7 4 4]) -> 7", "(max [1]) -> 1"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.866015}
{"name": "max", "examples": ["(max [1 3]) -> 3", "(max [4]) -> 4", "(max [2 6 0 4 8]) -> 8", "(max [3 9 6]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 7.294614}
{"name": "max", "examples": ["(max [6 4 6]) -> 6", "(max [6]) -> 6", "(max [6 3 6 1]) -> 6", "(max [5 5 6]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 1 c) d c)) 0)) _) _)", "time": 8.623492}
{"name": "max", "examples": ["(max [6 6 1]) -> 6", "(max [1 7 3 1 9]) -> 9", "(max [4 5]) -> 5", "(max [6 9 0 7 3]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.720144}
{"name": "max", "examples": ["(max [0 8 8]) -> 8", "(max [5]) -> 5", "(max [1 0 2 1]) -> 2", "(max [5 3 0 0 8]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 1 c) d c)) 0)) _) _)", "time": 7.959839}
{"name": "max", "examples": ["(max [3 3]) -> 3", "(max [5 4 1]) -> 5", "(max [2]) -> 2", "(max [6 5 9 6 2]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 7.789473}
{"name": "max", "examples": ["(max [0]) -> 0", "(max [5 6]) -> 6", "(max [4 3 4]) -> 4", "(max [0 3 4]) -> 4"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "time": 0.054985}
{"name": "max", "examples": ["(max [5 4 0 7]) -> 7", "(max [3]) -> 3", "(max [6 7 2 0]) -> 7", "(max [0 5]) -> 5"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.134681}
{"name": "max", "examples": ["(max [0 6 7 2]) -> 7", "(max [4 9 8 8]) -> 9", "(max [3 4 6 4]) -> 6", "(max [5 9 7 1]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.821288}
{"name": "max", "examples": ["(max [4 6 7 4 5]) -> 7", "(max [2 0 5]) -> 5", "(max [7 3 5]) -> 7", "(max [9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.473123}
{"name": "max", "examples": ["(max [6 9 9]) -> 9", "(max [0 6 0]) -> 6", "(max [6 5 2 7]) -> 7", "(max [6 2 5 9 6]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.197583}
{"name": "max", "examples": ["(max [6 1 9 8 4]) -> 9", "(max [1 3]) -> 3", "(max [4 8 7 4]) -> 8", "(max [0 3 9 0]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.615064}
{"name": "max", "examples": ["(max [9 1]) -> 9", "(max [3]) -> 3", "(max [8 3 7]) -> 8", "(max [6 3 0]) -> 6"], "solution": "(let max (let a (lambda (b) (car b)) _) _)", "time": 0.000804}
{"name": "max", "examples": ["(max [2 9 1 1 6]) -> 9", "(max [4 1 4 6]) -> 6", "(max [2 3]) -> 3", "(max [6 6]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (+ c (/ c d))) 1)) _) _)", "time": 2.189897}
{"name": "max", "examples": ["(max [2 3 6 8 1]) -> 8", "(max [0 6 7 6]) -> 7", "(max [0 2]) -> 2", "(max [2 7 7 2 6]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.851712}
{"name": "max", "examples": ["(max [2]) -> 2", "(max [8 5 6 7 9]) -> 9", "(max [0 6 0]) -> 6", "(max [3]) -> 3"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 0 c) d c)) 0)) _) _)", "time": 9.907895}
{"name": "max", "examples": ["(max [7 2 5]) -> 7", "(max [9 4 7 5]) -> 9", "(max [9]) -> 9", "(max [5 5]) -> 5"], "solution": "(let max (let a (lambda (b) (car b)) _) _)", "time": 0.000944}
{"name": "max", "examples": ["(max [7]) -> 7", "(max [1 3]) -> 3", "(max [0 5 2]) -> 5", "(max [2 6]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.408733}
{"name": "max", "examples": ["(max [3 6 2]) -> 6", "(max [3]) -> 3", "(max [2]) -> 2", "(max [1 8 9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.074975}
{"name": "max", "examples": ["(max [1 0 4]) -> 4", "(max [0 4 1 2]) -> 4", "(max [9]) -> 9", "(max [1 4]) -> 4"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< 1 d) d c)) 0)) _) _)", "time": 10.442796}
{"name": "max", "examples": ["(max [0 0 4 4 9]) -> 9", "(max [8 6]) -> 8", "(max [7 4 1]) -> 7", "(max [6 1 6]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.813913}
{"name": "max", "examples": ["(max [7 9 3]) -> 9", "(max [4]) -> 4", "(max [1 9]) -> 9", "(max [8 2]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 7.995519}
{"name": "max", "examples": ["(max [7 0]) -> 7", "(max [0 0 2 2]) -> 2", "(max [5 8 3 8 5]) -> 8", "(max [6 3 7]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.002567}
{"name": "max", "examples": ["(max [2 7 0]) -> 7", "(max [3 8]) -> 8", "(max [9 6]) -> 9", "(max [2 8]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 7.296719}
{"name": "max", "examples": ["(max [0 3 1]) -> 3", "(max [0 9 3 3 9]) -> 9", "(max [4 7 0 8 8]) -> 8", "(max [0 3 7 0 1]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< 1 c) c d)) 0)) _) _)", "time": 7.604102}
{"name": "max", "examples": ["(max [0 5 4 8 9]) -> 9", "(max [6]) -> 6", "(max [9 7 6 9 2]) -> 9", "(max [8 5 1]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 7.966392}
{"name": "max", "examples": ["(max [9]) -> 9", "(max [0]) -> 0", "(max [9 7]) -> 9", "(max [5 9 5 5 2]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.941851}
{"name": "max", "examples": ["(max [4 4 0]) -> 4", "(max [8 6 2]) -> 8", "(max [1 7 6 1]) -> 7", "(max [7 5 5 4 9]) -> 9"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 8.006093}
{"name": "max", "examples": ["(max [9 9 8 4]) -> 9", "(max [5 2 5]) -> 5", "(max [2 5 8 6]) -> 8", "(max [6 5 8]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.632373}
{"name": "max", "examples": ["(max [3 4 7]) -> 7", "(max [3]) -> 3", "(max [1 3 5 8 0]) -> 8", "(max [8 4 1 5]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.667748}
{"name": "max", "examples": ["(max [0 8 8 2]) -> 8", "(max [8 7]) -> 8", "(max [9 9 1 3]) -> 9", "(max [6 8]) -> 8"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 11.251632}
{"name": "max", "examples": ["(max [2 9 8 7]) -> 9", "(max [1]) -> 1", "(max [7 2 6 4]) -> 7", "(max [0 1 2]) -> 2"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.653926}
{"name": "max", "examples": ["(max [8]) -> 8", "(max [0 5 9 7]) -> 9", "(max [9 9 4]) -> 9", "(max [5 6 1]) -> 6"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 9.84861}
{"name": "max", "examples": ["(max [0 1 1]) -> 1", "(max [4 2]) -> 4", "(max [0]) -> 0", "(max [4 7]) -> 7"], "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "time": 10.785798}
