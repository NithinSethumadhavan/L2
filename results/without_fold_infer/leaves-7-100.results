{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.509312, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5 {7}}) -> [7]", "(leaves {6 {7} {0}}) -> [7 0]", "(leaves {7}) -> [7]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.498788, "examples": ["(leaves {}) -> []", "(leaves {7 {4}}) -> [4]", "(leaves {3 {9 {9 {1}} {5}}}) -> [1 5]", "(leaves {4}) -> [4]", "(leaves {2 {7} {3}}) -> [7 3]", "(leaves {1 {0 {7}}}) -> [7]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.590033, "examples": ["(leaves {}) -> []", "(leaves {0 {8 {4} {0}} {6 {7}}}) -> [4 0 7]", "(leaves {9}) -> [9]", "(leaves {5 {9 {6 {5} {3}} {3}} {4 {8 {1}} {9}}}) -> [5 3 3 1 9]", "(leaves {}) -> []", "(leaves {7 {8 {9}} {8}}) -> [9 8]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.654392, "examples": ["(leaves {}) -> []", "(leaves {2 {8} {8}}) -> [8 8]", "(leaves {0 {4} {9}}) -> [4 9]", "(leaves {}) -> []", "(leaves {1 {2}}) -> [2]", "(leaves {3 {9}}) -> [9]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.587327, "examples": ["(leaves {}) -> []", "(leaves {3 {1 {6 {8} {0}} {4 {5}}} {4}}) -> [8 0 5 4]", "(leaves {9 {7} {8 {7 {4} {7}} {8 {8}}}}) -> [7 4 7 8]", "(leaves {8}) -> [8]", "(leaves {3 {5} {9}}) -> [5 9]", "(leaves {8 {7 {3 {4}} {6}} {8}}) -> [4 6 8]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.698708, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {9 {0 {3} {4}} {0}}) -> [3 4 0]", "(leaves {5}) -> [5]", "(leaves {8}) -> [8]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.853427, "examples": ["(leaves {}) -> []", "(leaves {8 {8 {3 {5}}} {3}}) -> [5 3]", "(leaves {5}) -> [5]", "(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {5}) -> [5]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.767557, "examples": ["(leaves {}) -> []", "(leaves {0 {6} {7 {6}}}) -> [6 6]", "(leaves {}) -> []", "(leaves {1 {6 {6 {5} {5}} {8 {1} {5}}}}) -> [5 5 1 5]", "(leaves {7}) -> [7]", "(leaves {0}) -> [0]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "name": "leaves", "time": 0.078593, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {0}) -> [0]", "(leaves {}) -> []", "(leaves {4}) -> [4]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.973486, "examples": ["(leaves {}) -> []", "(leaves {8 {6 {1} {1}}}) -> [1 1]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.954875, "examples": ["(leaves {}) -> []", "(leaves {5 {8 {9} {0}} {0 {0} {1}}}) -> [9 0 0 1]", "(leaves {3 {2 {3}}}) -> [3]", "(leaves {8}) -> [8]", "(leaves {7 {5} {8}}) -> [5 8]", "(leaves {6}) -> [6]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.931249, "examples": ["(leaves {}) -> []", "(leaves {3 {1 {1 {3}}} {1}}) -> [3 1]", "(leaves {9 {4} {6 {3}}}) -> [4 3]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {0 {7}}) -> [7]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.925698, "examples": ["(leaves {}) -> []", "(leaves {8 {3 {3} {5}} {5}}) -> [3 5 5]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5 {0 {5} {4}} {1 {6}}}) -> [5 4 6]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.128199, "examples": ["(leaves {}) -> []", "(leaves {3 {9} {4}}) -> [9 4]", "(leaves {6}) -> [6]", "(leaves {1 {8} {4}}) -> [8 4]", "(leaves {9 {0 {9} {8}}}) -> [9 8]", "(leaves {1 {5}}) -> [5]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.078506, "examples": ["(leaves {}) -> []", "(leaves {3 {2} {5 {1}}}) -> [2 1]", "(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {1 {4}}) -> [4]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.131043, "examples": ["(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {8 {5 {4}} {7}}) -> [4 7]", "(leaves {2}) -> [2]", "(leaves {7 {4}}) -> [4]", "(leaves {5}) -> [5]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.023606, "examples": ["(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {2 {3 {0}} {5 {9}}}) -> [0 9]", "(leaves {1 {9}}) -> [9]", "(leaves {5 {0}}) -> [0]", "(leaves {6 {2} {6}}) -> [2 6]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.704403, "examples": ["(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {8}) -> [8]", "(leaves {3 {4}}) -> [4]", "(leaves {}) -> []", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.084496, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8 {3 {7} {0}} {4 {1} {5}}}) -> [7 0 1 5]", "(leaves {2}) -> [2]", "(leaves {9 {9}}) -> [9]", "(leaves {0}) -> [0]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.817051, "examples": ["(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {9 {2 {5}} {8 {6}}}) -> [5 6]", "(leaves {1 {6 {4} {3}}}) -> [4 3]", "(leaves {4 {8}}) -> [8]", "(leaves {9 {2 {8 {9} {0}} {9 {0}}}}) -> [9 0 0]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.875538, "examples": ["(leaves {}) -> []", "(leaves {9 {8 {4}} {3}}) -> [4 3]", "(leaves {7}) -> [7]", "(leaves {9 {0 {3} {3}}}) -> [3 3]", "(leaves {}) -> []", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.900055, "examples": ["(leaves {}) -> []", "(leaves {0 {3 {0}}}) -> [0]", "(leaves {7}) -> [7]", "(leaves {5 {1} {9}}) -> [1 9]", "(leaves {3 {7}}) -> [7]", "(leaves {9}) -> [9]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.849848, "examples": ["(leaves {}) -> []", "(leaves {8 {0} {5}}) -> [0 5]", "(leaves {0 {6 {2 {5} {0}} {5 {9} {3}}}}) -> [5 0 9 3]", "(leaves {3 {2 {1}}}) -> [1]", "(leaves {}) -> []", "(leaves {2}) -> [2]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.160466, "examples": ["(leaves {}) -> []", "(leaves {0 {7 {8} {2}} {1 {1}}}) -> [8 2 1]", "(leaves {0}) -> [0]", "(leaves {5}) -> [5]", "(leaves {7 {7}}) -> [7]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.325784, "examples": ["(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {4 {4}}) -> [4]", "(leaves {}) -> []", "(leaves {8 {7}}) -> [7]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.945469, "examples": ["(leaves {}) -> []", "(leaves {4 {3 {0}} {7 {9}}}) -> [0 9]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {0}) -> [0]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.902182, "examples": ["(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {0 {8} {6 {3 {8}} {0}}}) -> [8 8 0]", "(leaves {6 {1} {3}}) -> [1 3]", "(leaves {8 {5 {1 {9} {1}} {6}} {0 {8 {7}}}}) -> [9 1 6 7]", "(leaves {0}) -> [0]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.836723, "examples": ["(leaves {}) -> []", "(leaves {1 {8}}) -> [8]", "(leaves {}) -> []", "(leaves {8 {1 {6}} {9 {8} {6}}}) -> [6 8 6]", "(leaves {4}) -> [4]", "(leaves {9 {1 {7}} {8 {3} {3}}}) -> [7 3 3]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.702305, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {7 {9} {6 {4} {1}}}) -> [9 4 1]", "(leaves {6 {9} {4}}) -> [9 4]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.257832, "examples": ["(leaves {}) -> []", "(leaves {9 {0} {0}}) -> [0 0]", "(leaves {}) -> []", "(leaves {9 {0}}) -> [0]", "(leaves {0 {9 {7 {8} {5}}}}) -> [8 5]", "(leaves {8 {4 {3}} {1}}) -> [3 1]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.627551, "examples": ["(leaves {}) -> []", "(leaves {3 {7} {8 {0} {1}}}) -> [7 0 1]", "(leaves {5 {6}}) -> [6]", "(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {9}) -> [9]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.546125, "examples": ["(leaves {}) -> []", "(leaves {1 {5}}) -> [5]", "(leaves {2}) -> [2]", "(leaves {}) -> []", "(leaves {7 {2} {2 {9 {3} {0}} {0 {6}}}}) -> [2 3 0 6]", "(leaves {2 {4} {9 {8} {5}}}) -> [4 8 5]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.535397, "examples": ["(leaves {}) -> []", "(leaves {3 {8 {0} {3}}}) -> [0 3]", "(leaves {2 {3 {4}} {7 {0} {2}}}) -> [4 0 2]", "(leaves {8}) -> [8]", "(leaves {}) -> []", "(leaves {4 {5} {4}}) -> [5 4]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.670022, "examples": ["(leaves {}) -> []", "(leaves {9 {9} {0 {6}}}) -> [9 6]", "(leaves {7 {2 {6} {9}} {9}}) -> [6 9 9]", "(leaves {1 {7 {9} {6}}}) -> [9 6]", "(leaves {5}) -> [5]", "(leaves {7}) -> [7]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.742139, "examples": ["(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {5}) -> [5]", "(leaves {0 {1 {7 {3} {2}}}}) -> [3 2]", "(leaves {7 {7 {3} {0}} {5 {5}}}) -> [3 0 5]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.766907, "examples": ["(leaves {}) -> []", "(leaves {9 {0} {3 {0} {2}}}) -> [0 0 2]", "(leaves {6}) -> [6]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9 {8}}) -> [8]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.073283, "examples": ["(leaves {}) -> []", "(leaves {8 {3} {9}}) -> [3 9]", "(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {}) -> []", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.750705, "examples": ["(leaves {}) -> []", "(leaves {3 {9 {6} {8}}}) -> [6 8]", "(leaves {5 {2} {4 {0} {0}}}) -> [2 0 0]", "(leaves {4}) -> [4]", "(leaves {8 {9}}) -> [9]", "(leaves {6}) -> [6]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (cons (value (car (children b))) [])) [])) _) _)", "name": "leaves", "time": 2.394012, "examples": ["(leaves {}) -> []", "(leaves {1 {9}}) -> [9]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.693115, "examples": ["(leaves {}) -> []", "(leaves {8 {0}}) -> [0]", "(leaves {6}) -> [6]", "(leaves {0 {3 {3} {8}} {4 {9} {2}}}) -> [3 8 9 2]", "(leaves {4 {3} {7}}) -> [3 7]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.027549, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6 {8} {6 {1} {1}}}) -> [8 1 1]", "(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.791314, "examples": ["(leaves {}) -> []", "(leaves {5 {9} {5}}) -> [9 5]", "(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {}) -> []", "(leaves {4 {3 {7} {9}}}) -> [7 9]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.615224, "examples": ["(leaves {}) -> []", "(leaves {1 {2 {8} {5}}}) -> [8 5]", "(leaves {4}) -> [4]", "(leaves {}) -> []", "(leaves {6 {3 {5} {8 {1} {0}}}}) -> [5 1 0]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.224134, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2 {8}}) -> [8]", "(leaves {0}) -> [0]", "(leaves {9}) -> [9]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.989351, "examples": ["(leaves {}) -> []", "(leaves {0 {8 {2}} {2 {2}}}) -> [2 2]", "(leaves {8 {5} {0}}) -> [5 0]", "(leaves {7 {7 {4}} {4 {4}}}) -> [4 4]", "(leaves {4 {7 {8 {3} {0}}}}) -> [3 0]", "(leaves {5 {4 {5} {6}} {2}}) -> [5 6 2]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.016834, "examples": ["(leaves {}) -> []", "(leaves {1 {3} {2}}) -> [3 2]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3 {1 {9}} {8 {6} {8}}}) -> [9 6 8]", "(leaves {4 {7 {3}}}) -> [3]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.465947, "examples": ["(leaves {}) -> []", "(leaves {0 {4 {3} {3}} {2 {4} {5}}}) -> [3 3 4 5]", "(leaves {3 {5}}) -> [5]", "(leaves {7}) -> [7]", "(leaves {}) -> []", "(leaves {3}) -> [3]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.352855, "examples": ["(leaves {}) -> []", "(leaves {5 {2}}) -> [2]", "(leaves {9}) -> [9]", "(leaves {1 {4} {0}}) -> [4 0]", "(leaves {4 {7 {6 {3} {7}}} {7}}) -> [3 7 7]", "(leaves {7 {2 {8 {0}}}}) -> [0]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.097847, "examples": ["(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {0 {5 {5 {8}} {6 {8} {0}}} {8 {4 {5} {5}} {9}}}) -> [8 8 0 5 5 9]", "(leaves {8}) -> [8]", "(leaves {6}) -> [6]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.115089, "examples": ["(leaves {}) -> []", "(leaves {3 {8 {0 {7}}} {9}}) -> [7 9]", "(leaves {0 {1 {5}}}) -> [5]", "(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {9}) -> [9]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.166, "examples": ["(leaves {}) -> []", "(leaves {2 {2 {5}}}) -> [5]", "(leaves {0 {3} {9}}) -> [3 9]", "(leaves {2 {2} {6}}) -> [2 6]", "(leaves {}) -> []", "(leaves {8 {4} {7}}) -> [4 7]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.973453, "examples": ["(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {1}) -> [1]", "(leaves {8 {6 {5} {5}} {6 {5} {4}}}) -> [5 5 5 4]", "(leaves {4 {4} {4}}) -> [4 4]", "(leaves {0}) -> [0]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.081839, "examples": ["(leaves {}) -> []", "(leaves {8 {3}}) -> [3]", "(leaves {8}) -> [8]", "(leaves {5}) -> [5]", "(leaves {8}) -> [8]", "(leaves {1 {8 {1 {7}} {5 {4} {7}}}}) -> [7 4 7]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.682142, "examples": ["(leaves {}) -> []", "(leaves {3 {2}}) -> [2]", "(leaves {3}) -> [3]", "(leaves {9 {6 {5 {2} {2}} {5 {5}}}}) -> [2 2 5]", "(leaves {3 {6}}) -> [6]", "(leaves {1 {7 {7} {8}} {4}}) -> [7 8 4]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.216839, "examples": ["(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {5 {9} {1}}) -> [9 1]", "(leaves {5 {6}}) -> [6]", "(leaves {8}) -> [8]", "(leaves {4 {4}}) -> [4]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.850221, "examples": ["(leaves {}) -> []", "(leaves {3 {3} {4}}) -> [3 4]", "(leaves {3 {1}}) -> [1]", "(leaves {8 {0 {8} {7}} {0 {0}}}) -> [8 7 0]", "(leaves {6 {8 {1 {5} {1}} {8}}}) -> [5 1 8]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.720052, "examples": ["(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {8 {3}}) -> [3]", "(leaves {}) -> []", "(leaves {9 {1}}) -> [1]", "(leaves {0 {3}}) -> [3]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.49084, "examples": ["(leaves {}) -> []", "(leaves {5 {3 {9}}}) -> [9]", "(leaves {}) -> []", "(leaves {2 {8}}) -> [8]", "(leaves {}) -> []", "(leaves {3 {8 {9 {8}} {2}}}) -> [8 2]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.683511, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {8 {3}}) -> [3]", "(leaves {1 {6 {1} {7}}}) -> [1 7]", "(leaves {2}) -> [2]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.55749, "examples": ["(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {8 {6 {3}}}) -> [3]", "(leaves {}) -> []", "(leaves {0 {5} {3}}) -> [5 3]", "(leaves {0 {8 {2 {9} {2}} {9 {5} {9}}} {4 {7} {8 {7}}}}) -> [9 2 5 9 7 7]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.672844, "examples": ["(leaves {}) -> []", "(leaves {9 {0 {4} {4}} {7}}) -> [4 4 7]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9 {5} {5 {7}}}) -> [5 7]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.759944, "examples": ["(leaves {}) -> []", "(leaves {5 {3 {8}}}) -> [8]", "(leaves {}) -> []", "(leaves {1 {8} {9}}) -> [8 9]", "(leaves {5 {4 {7 {9} {8}}} {6}}) -> [9 8 6]", "(leaves {8 {8}}) -> [8]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.015158, "examples": ["(leaves {}) -> []", "(leaves {1 {5 {1 {4}}} {7}}) -> [4 7]", "(leaves {6 {9 {0}}}) -> [0]", "(leaves {7 {3 {0}} {8 {2 {2} {3}} {4 {3} {6}}}}) -> [0 2 3 3 6]", "(leaves {1 {0}}) -> [0]", "(leaves {1 {6 {5}}}) -> [5]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.064526, "examples": ["(leaves {}) -> []", "(leaves {9 {6}}) -> [6]", "(leaves {5 {7 {8} {7}} {6}}) -> [8 7 6]", "(leaves {3 {3}}) -> [3]", "(leaves {}) -> []", "(leaves {2}) -> [2]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.250478, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9 {3 {0} {8}} {7}}) -> [0 8 7]", "(leaves {}) -> []", "(leaves {2 {7} {9}}) -> [7 9]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.792256, "examples": ["(leaves {}) -> []", "(leaves {4 {4}}) -> [4]", "(leaves {4 {4} {0}}) -> [4 0]", "(leaves {1 {6} {8 {4} {9}}}) -> [6 4 9]", "(leaves {9 {2 {0 {7} {4}} {3 {9} {8}}}}) -> [7 4 9 8]", "(leaves {0 {3 {0}}}) -> [0]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.383327, "examples": ["(leaves {}) -> []", "(leaves {9 {2 {9 {7} {0}}} {7 {3} {6 {5}}}}) -> [7 0 3 5]", "(leaves {4 {6} {2}}) -> [6 2]", "(leaves {}) -> []", "(leaves {1 {5 {6 {9} {0}}}}) -> [9 0]", "(leaves {8 {2} {0}}) -> [2 0]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.875791, "examples": ["(leaves {}) -> []", "(leaves {2 {5} {1}}) -> [5 1]", "(leaves {9 {7 {4}}}) -> [4]", "(leaves {4 {9}}) -> [9]", "(leaves {}) -> []", "(leaves {9}) -> [9]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.677783, "examples": ["(leaves {}) -> []", "(leaves {1 {9}}) -> [9]", "(leaves {9 {1 {8} {1}} {0 {0} {8}}}) -> [8 1 0 8]", "(leaves {6 {5} {3}}) -> [5 3]", "(leaves {5 {2}}) -> [2]", "(leaves {4 {7} {8}}) -> [7 8]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.957547, "examples": ["(leaves {}) -> []", "(leaves {6 {7 {2} {8}}}) -> [2 8]", "(leaves {1 {0} {1}}) -> [0 1]", "(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {6 {9 {2}} {0 {4} {6}}}) -> [2 4 6]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "name": "leaves", "time": 0.123517, "examples": ["(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {3}) -> [3]", "(leaves {4}) -> [4]", "(leaves {}) -> []", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.150429, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8 {6}}) -> [6]", "(leaves {6}) -> [6]", "(leaves {7 {7}}) -> [7]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.032439, "examples": ["(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {6 {5}}) -> [5]", "(leaves {8 {1} {6}}) -> [1 6]", "(leaves {2 {2 {7}}}) -> [7]", "(leaves {7}) -> [7]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.551768, "examples": ["(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {}) -> []", "(leaves {8 {8} {6}}) -> [8 6]", "(leaves {7 {7}}) -> [7]", "(leaves {0 {4} {2}}) -> [4 2]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.747854, "examples": ["(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {8 {1 {5} {3}} {8 {9} {6}}}) -> [5 3 9 6]", "(leaves {3}) -> [3]", "(leaves {3 {4}}) -> [4]", "(leaves {9 {1} {6}}) -> [1 6]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 3.031996, "examples": ["(leaves {}) -> []", "(leaves {1 {4} {6 {9}}}) -> [4 9]", "(leaves {3 {1 {6}} {4 {1} {0}}}) -> [6 1 0]", "(leaves {2 {5} {3}}) -> [5 3]", "(leaves {0 {6 {5 {0}}}}) -> [0]", "(leaves {5}) -> [5]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.714346, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {0 {3}}) -> [3]", "(leaves {1 {8} {9}}) -> [8 9]", "(leaves {}) -> []", "(leaves {6 {4} {2 {7} {4}}}) -> [4 7 4]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.371689, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {8 {0 {6 {2} {6}}} {2 {4}}}) -> [2 6 4]", "(leaves {1}) -> [1]", "(leaves {1 {5} {8}}) -> [5 8]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.468435, "examples": ["(leaves {}) -> []", "(leaves {6 {5} {5}}) -> [5 5]", "(leaves {3 {4 {5} {2}}}) -> [5 2]", "(leaves {2 {3 {0}}}) -> [0]", "(leaves {2}) -> [2]", "(leaves {2}) -> [2]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.46294, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {}) -> []", "(leaves {0 {5 {7} {9}}}) -> [7 9]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.462796, "examples": ["(leaves {}) -> []", "(leaves {3 {1}}) -> [1]", "(leaves {0 {3} {1}}) -> [3 1]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {0 {6}}) -> [6]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.567022, "examples": ["(leaves {}) -> []", "(leaves {9 {7 {7} {7}} {7 {7} {3}}}) -> [7 7 7 3]", "(leaves {2 {6 {7 {6} {0}}}}) -> [6 0]", "(leaves {9 {5 {6} {8 {6}}}}) -> [6 6]", "(leaves {5 {9 {5 {0}}}}) -> [0]", "(leaves {2 {0}}) -> [0]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.697808, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8 {9} {2}}) -> [9 2]", "(leaves {2 {3} {0}}) -> [3 0]", "(leaves {}) -> []", "(leaves {9 {5}}) -> [5]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.305344, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {1 {6 {0} {9}}}) -> [0 9]", "(leaves {1 {9}}) -> [9]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.651984, "examples": ["(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {}) -> []", "(leaves {9 {8 {7}}}) -> [7]", "(leaves {9 {2 {4}} {4 {1}}}) -> [4 1]", "(leaves {2 {3}}) -> [3]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.728273, "examples": ["(leaves {}) -> []", "(leaves {1 {2 {3 {0}} {7 {6}}}}) -> [0 6]", "(leaves {2 {4}}) -> [4]", "(leaves {3 {3}}) -> [3]", "(leaves {3 {4 {6 {7} {8}}}}) -> [7 8]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.616649, "examples": ["(leaves {}) -> []", "(leaves {9 {9} {4}}) -> [9 4]", "(leaves {1 {3}}) -> [3]", "(leaves {9}) -> [9]", "(leaves {}) -> []", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.78974, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {}) -> []", "(leaves {7 {9 {6 {7} {9}} {2}}}) -> [7 9 2]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.603468, "examples": ["(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {1}) -> [1]", "(leaves {}) -> []", "(leaves {0 {3} {6}}) -> [3 6]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.236874, "examples": ["(leaves {}) -> []", "(leaves {9 {6}}) -> [6]", "(leaves {9 {3 {9} {6 {3}}} {4 {8}}}) -> [9 3 8]", "(leaves {5}) -> [5]", "(leaves {3 {7 {0}} {0}}) -> [0 0]", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.192089, "examples": ["(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {}) -> []", "(leaves {4 {2} {4}}) -> [2 4]", "(leaves {}) -> []", "(leaves {}) -> []"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.375666, "examples": ["(leaves {}) -> []", "(leaves {0 {4 {2}} {5 {6} {3}}}) -> [2 6 3]", "(leaves {9 {6}}) -> [6]", "(leaves {2}) -> [2]", "(leaves {}) -> []", "(leaves {9 {5} {9}}) -> [5 9]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.935752, "examples": ["(leaves {}) -> []", "(leaves {5 {9 {8}} {7}}) -> [8 7]", "(leaves {5}) -> [5]", "(leaves {8 {4} {7}}) -> [4 7]", "(leaves {3}) -> [3]", "(leaves {3 {0 {2 {7}}}}) -> [7]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.055555, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8 {7}}) -> [7]", "(leaves {3 {6} {5}}) -> [6 5]", "(leaves {0 {3}}) -> [3]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.66394, "examples": ["(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {}) -> []", "(leaves {3 {4 {2} {1}}}) -> [2 1]", "(leaves {9 {0 {3}} {1 {3} {1}}}) -> [3 3 1]", "(leaves {9}) -> [9]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.952324, "examples": ["(leaves {}) -> []", "(leaves {5 {0 {5} {2}}}) -> [5 2]", "(leaves {}) -> []", "(leaves {8 {0} {7}}) -> [0 7]", "(leaves {}) -> []", "(leaves {3 {5 {9} {6}} {9}}) -> [9 6 9]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 2.056682, "examples": ["(leaves {}) -> []", "(leaves {0 {2}}) -> [2]", "(leaves {2}) -> [2]", "(leaves {8 {3}}) -> [3]", "(leaves {0 {0} {8}}) -> [0 8]", "(leaves {2 {8 {9}} {1 {0} {0}}}) -> [9 0 0]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.358264, "examples": ["(leaves {}) -> []", "(leaves {9 {1}}) -> [1]", "(leaves {3 {8}}) -> [8]", "(leaves {0 {8} {4}}) -> [8 4]", "(leaves {}) -> []", "(leaves {0}) -> [0]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.669223, "examples": ["(leaves {}) -> []", "(leaves {6 {3}}) -> [3]", "(leaves {}) -> []", "(leaves {1 {4 {7} {9}}}) -> [7 9]", "(leaves {4 {5}}) -> [5]", "(leaves {1}) -> [1]"]}
{"solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "name": "leaves", "time": 1.068036, "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1 {5}}) -> [5]", "(leaves {0 {0 {4} {3}} {5}}) -> [4 3 5]", "(leaves {6 {6}}) -> [6]", "(leaves {}) -> []"]}
