{"name": "sums", "time": 0.000429, "solution": "(let sums (let a (lambda (b) []) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums []) -> []", "(sums []) -> []"]}
{"name": "sums", "time": 1.490825, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (+ (car c) (car (cdr c)))))) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[7 9]]) -> [16]", "(sums []) -> []"]}
{"name": "sums", "time": 1.728807, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[2 0] [6 5] [0] [7 1] []]) -> [2 11 0 8 0]", "(sums []) -> []", "(sums [[7 9]]) -> [16]"]}
{"name": "sums", "time": 1.702688, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[3 5 2 2 5] [8] [3 0] [0]]) -> [17 8 3 0]", "(sums [[8 9 3 0 3] [8] [8 8 3 5] []]) -> [23 8 24 0]", "(sums []) -> []"]}
{"name": "sums", "time": 1.833431, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[5 9] [] [2 4 6 8] [9 1 1]]) -> [14 0 20 11]", "(sums [[4] [3 1 8 1 4] [] [5 8 8 4 6] [1 7 1]]) -> [4 17 0 31 9]", "(sums [[0 4 2 3] [5 3] [8 4] [0 9 6 5]]) -> [9 8 12 20]"]}
{"name": "sums", "time": 1.933167, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[3 1 3] [3] [4 0 5] [9 2] [1 5 5 9 6]]) -> [7 3 9 11 26]", "(sums [[8] [8 5] [2 2]]) -> [8 13 4]"]}
{"name": "sums", "time": 1.921112, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[0 3 9 0 9] [8] [4 5 7 8] [6 4 0 7]]) -> [21 8 24 17]", "(sums [[4 7 3]]) -> [14]", "(sums []) -> []"]}
{"name": "sums", "time": 1.961428, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [8 1 4 1] [5 2 6 7 7]]) -> [0 14 27]", "(sums [[8 3 2 4 0]]) -> [17]", "(sums [[9 0 4 3 2] [8] [6 5 8]]) -> [18 8 19]"]}
{"name": "sums", "time": 2.134934, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[2]]) -> [2]", "(sums [[3 9 9 9 8] [0 0] [6 2 2 0 5]]) -> [38 0 15]"]}
{"name": "sums", "time": 2.11059, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[0 8 0 8] [] [6 8 4 1]]) -> [16 0 19]", "(sums [[9] [5 2 6] [1 2] [] [2 5 4]]) -> [9 13 3 0 11]", "(sums [[4 5 6 6 1] [8 5 0 6] [9 6 1 3 7] []]) -> [22 19 26 0]"]}
{"name": "sums", "time": 2.214058, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[0]]) -> [0]", "(sums [[7 8 0 4 0] [4 2 0 2 0] [0 7]]) -> [19 8 7]", "(sums [[0 2 2 7 2] [3 0 7 8] [] [3 7] [5 9 5]]) -> [13 18 0 10 19]"]}
{"name": "sums", "time": 2.22822, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[4 2]]) -> [6]", "(sums []) -> []", "(sums [[3 4] [4] [4] [4 1 1 9 6] [4 8 5 7]]) -> [7 4 4 21 24]"]}
{"name": "sums", "time": 0.000783, "solution": "(let sums (let a (lambda (b) []) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums []) -> []", "(sums []) -> []"]}
{"name": "sums", "time": 2.230529, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[9] [8 7 8] [2 8 4] [5 8] [3 1 8 7 9]]) -> [9 23 14 13 28]", "(sums [[5 5] [1 4 0 2] [6 4 2 1 9] [1 6]]) -> [10 7 22 7]", "(sums [[7 2 1 7] [6] [9 5] [8]]) -> [17 6 14 8]"]}
{"name": "sums", "time": 2.506974, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[9 8 6 5 1]]) -> [29]", "(sums [[3 9 7] [] [4 9] [8 1 9 9] [2 2 8 8]]) -> [19 0 13 27 20]", "(sums [[1 2 3 2 4] [2 7 1] [1 7 1 7] [2]]) -> [12 10 16 2]"]}
{"name": "sums", "time": 2.560474, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[3] [1 4 9 6 8] [4 5 5 0 9] [5]]) -> [3 28 23 5]", "(sums [[4 5 5 7 0] [3] [] [2 1 3 8] []]) -> [21 3 0 14 0]", "(sums [[4 8]]) -> [12]"]}
{"name": "sums", "time": 2.642291, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[4] [3 8 3 6] [4 6 1 2] [8 3 6]]) -> [4 20 13 17]", "(sums [[] [0] [1 1 3 7 4] [6 5 8 7] [7 8]]) -> [0 0 16 26 15]"]}
{"name": "sums", "time": 2.42032, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [7 7 2 5] [1 9 7] [9] [5]]) -> [0 21 17 9 5]", "(sums [[0 9] [8] [4]]) -> [9 8 4]", "(sums [[5 4]]) -> [9]"]}
{"name": "sums", "time": 1.750472, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[]]) -> [0]", "(sums []) -> []", "(sums [[8 2 2 7 0] [7 0 0 2] [7 9 3] [2 6]]) -> [19 9 19 8]"]}
{"name": "sums", "time": 1.477975, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[7 2] [6 3] [2 7] [5] [6 6 8]]) -> [9 9 9 5 20]", "(sums [[1 9 8 1] [0 7] []]) -> [19 7 0]", "(sums [[4 7] [1 8] [4 1 0] [1 9 3 2]]) -> [11 9 5 15]"]}
{"name": "sums", "time": 1.719635, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[8] [0 5] [9 0] [7 8 3] [0 3 5 9 5]]) -> [8 5 9 18 22]", "(sums []) -> []", "(sums [[4 2 6 6] [1 1 4]]) -> [18 6]"]}
{"name": "sums", "time": 1.759244, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[8 1 0 7 0] [2 1 0 4] [2 5 0]]) -> [16 7 7]", "(sums [[6 4] [7 4]]) -> [10 11]", "(sums [[] [4 8 2 0 1] []]) -> [0 15 0]"]}
{"name": "sums", "time": 1.759699, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[5 6]]) -> [11]", "(sums []) -> []", "(sums [[2 8 0] [1 0 6] [5 3] [2 2] [9 5 2 2]]) -> [10 7 8 4 18]"]}
{"name": "sums", "time": 1.871045, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [3] [5 0] []]) -> [0 3 5 0]", "(sums [[7 1 3] [0 0 6] [3] [2]]) -> [11 6 3 2]", "(sums [[5] [] [7 5 2 6] [5 4 9 1 0]]) -> [5 0 20 19]"]}
{"name": "sums", "time": 1.640712, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [1 0 1 0 1] [1] [3]]) -> [0 3 1 3]", "(sums [[5 6 4 6]]) -> [21]", "(sums [[8] [4 0 4]]) -> [8 8]"]}
{"name": "sums", "time": 1.875644, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [1] []]) -> [0 1 0]", "(sums [[3 8 3 1] [0]]) -> [15 0]", "(sums [[5 5 7] [0 8 2 8] [2 6 2 8] [8 4]]) -> [17 18 18 12]"]}
{"name": "sums", "time": 1.863037, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[2 5 5] [] [9 7] [0 6] [9 9 3 7 9]]) -> [12 0 16 6 37]", "(sums [[5 6 7 4] [9] [6 3 0 6 5]]) -> [22 9 20]", "(sums [[9 7 0] [8 5 4] [6]]) -> [16 17 6]"]}
{"name": "sums", "time": 1.835961, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[7 7 2] [8 9 6] [0 8 1 2] [9 5]]) -> [16 23 11 14]", "(sums []) -> []", "(sums [[1 5 9] [] [3 8 2 3 2]]) -> [15 0 18]"]}
{"name": "sums", "time": 1.887566, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [0 7] [4 6] [7 8]]) -> [0 7 10 15]", "(sums [[9 8 9 2]]) -> [28]", "(sums [[5] []]) -> [5 0]"]}
{"name": "sums", "time": 2.172246, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[] [2] [5 7 1] [1] []]) -> [0 2 13 1 0]", "(sums [[6] [] [7 6 4 7 2] [5 5 2]]) -> [6 0 26 12]"]}
{"name": "sums", "time": 1.678377, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[3 1] [6] [7 6 6 1 9] [6 3 5 2 5] [2 4 5 7]]) -> [4 6 29 21 18]", "(sums [[0 1 0] [5 4 5]]) -> [1 14]", "(sums [[2 3] [5 6 9 0 7]]) -> [5 27]"]}
{"name": "sums", "time": 1.919045, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[7] [9 3 9 4 1] [4 8] [8 3 6] [0 9 7 7 5]]) -> [7 26 12 17 28]", "(sums [[] [4] [8 8] [7] [2 3 9 0]]) -> [0 4 16 7 14]", "(sums [[0 6 7]]) -> [13]"]}
{"name": "sums", "time": 1.961117, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[4 3 8] [8 3 9] [7 2] [1 6 2 0 7]]) -> [15 20 9 16]", "(sums []) -> []", "(sums [[3] [0]]) -> [3 0]"]}
{"name": "sums", "time": 2.051337, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[6 6 6 8 3] [4 2] [2 7 4 7]]) -> [29 6 20]", "(sums [[1 1 3] [1 6]]) -> [5 7]", "(sums [[6 3 3 4]]) -> [16]"]}
{"name": "sums", "time": 1.322404, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[0 4 5] [7]]) -> [9 7]", "(sums [[5 9] [] []]) -> [14 0 0]", "(sums [[2 3 7 4] [8 9 8 4 2]]) -> [16 31]"]}
{"name": "sums", "time": 1.349217, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[0 7 6] [0 7 8 0 7] [0] [] [8 3]]) -> [13 22 0 0 11]", "(sums [[9] [9 8 8 6]]) -> [9 31]", "(sums []) -> []"]}
{"name": "sums", "time": 1.994168, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[8 2 8 6] [7] [6 9 4] [8 8 0] [4 6]]) -> [24 7 19 16 10]", "(sums [[9 9 9 1 0] [1 7] [7 7 6 8] [6 4] [9]]) -> [28 8 28 10 9]", "(sums [[] [7 1 9 6 0] [4 3]]) -> [0 23 7]"]}
{"name": "sums", "time": 1.473491, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[1 3 7 6]]) -> [17]", "(sums [[6] [0 1 8] []]) -> [6 9 0]", "(sums [[] [0 8] [] [] [5]]) -> [0 8 0 0 5]"]}
{"name": "sums", "time": 1.487406, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[8 2 5] [2 8 8 1 8] [6] [9 7 4] [4]]) -> [15 27 6 20 4]", "(sums [[1 2 9 2 6] [5 7 8] [7 6 4]]) -> [20 20 17]", "(sums [[4 5 6 7]]) -> [22]"]}
{"name": "sums", "time": 1.397092, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [7 8] [8] [] [3]]) -> [0 15 8 0 3]", "(sums [[] [5 6 3 5 3]]) -> [0 22]", "(sums [[9 7 1] [1 7 1]]) -> [17 9]"]}
{"name": "sums", "time": 1.354599, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [] [0 8 2] [9 2 1]]) -> [0 0 10 12]", "(sums [[] [3 6 0] [2 3 4 1]]) -> [0 9 10]", "(sums [[4] [4 1 6]]) -> [4 11]"]}
{"name": "sums", "time": 2.318687, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [0 6 7 9 0] [1 1] [7 8] [8 8 9 1]]) -> [0 22 2 15 26]", "(sums [[0 5 4 9]]) -> [18]", "(sums []) -> []"]}
{"name": "sums", "time": 2.235134, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[8 4 3] [2 3 5 5 4]]) -> [15 19]", "(sums [[9 1 0 6 9]]) -> [25]", "(sums []) -> []"]}
{"name": "sums", "time": 1.299336, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[4] [8 0 1 6] [8 8 7 2 2] [0 1] [7]]) -> [4 15 27 1 7]", "(sums [[8 5 7] [] [0 7 1 7] []]) -> [20 0 15 0]", "(sums [[0 3 2 5] [2 9 7 6] [3 0] [6 6 2 5 8] [2 0 7 1]]) -> [10 24 3 27 10]"]}
{"name": "sums", "time": 2.343872, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[1 1 8 7] [8] [0 9 2 6] [6 7] [3 8 8]]) -> [17 8 17 13 19]", "(sums [[4 8 8 7] [3] [] [3 3 7]]) -> [27 3 0 13]", "(sums []) -> []"]}
{"name": "sums", "time": 2.395952, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [9 5 5] [9 9 8 8]]) -> [0 19 34]", "(sums [[7 3 6] [] [6 6 4 9]]) -> [16 0 25]", "(sums [[5 6 1 1] [1 1 7 4 6] [1 4] [5 1 1]]) -> [13 19 5 7]"]}
{"name": "sums", "time": 2.081997, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[8 4] [8 3 2 1 9] []]) -> [12 23 0]", "(sums [[8] [0]]) -> [8 0]", "(sums [[6 9 9] [7 6 0] [3 2]]) -> [24 13 5]"]}
{"name": "sums", "time": 2.162582, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[5] [] [1 0 2 0]]) -> [5 0 3]", "(sums [[1 6 1 5 9]]) -> [22]", "(sums [[7 9 3 3 7]]) -> [29]"]}
{"name": "sums", "time": 2.123053, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[7 4 9 6 2] [7 1 6] [7 3 9 6 0]]) -> [28 14 25]", "(sums [[6 4 7 0 5] [9] [5 7 4] [9 4 6]]) -> [22 9 16 19]", "(sums [[7 6 1 7 5] [4 7 3 9] [9 6 2] [0 0 5]]) -> [26 23 17 5]"]}
{"name": "sums", "time": 1.493711, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[0 5 0 3]]) -> [8]", "(sums [[4 7 7 5] [9 3 6 5] [7]]) -> [23 23 7]", "(sums [[2 1 3 2] [2 9 0 4] [0 3 6 5 2] [5]]) -> [8 15 16 5]"]}
{"name": "sums", "time": 2.054851, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[9 9 8 9 5] [1] [4] [3 2 1 3 1]]) -> [40 1 4 10]", "(sums []) -> []", "(sums [[1 9 1 0] [7 8 7]]) -> [11 22]"]}
{"name": "sums", "time": 1.986526, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[9 9] [5 5] [5 5] [1 3 9 7 0]]) -> [18 10 10 20]", "(sums [[]]) -> [0]"]}
{"name": "sums", "time": 1.843729, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[2 9 5 2] [2 0 6]]) -> [18 8]", "(sums [[7 5 1] [6] [8 1 8] [6 9 6 7] [4 8 1 3 4]]) -> [13 6 17 28 20]", "(sums []) -> []"]}
{"name": "sums", "time": 1.814945, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[2] [0]]) -> [2 0]", "(sums [[4] [] [2 7] [2] []]) -> [4 0 9 2 0]", "(sums [[0 9 9] [6]]) -> [18 6]"]}
{"name": "sums", "time": 1.76167, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[9 0 8 7 0] [3 7 1 7 5] [5 9 1 8] [6 9] [7 8 6 3]]) -> [24 23 23 15 24]", "(sums []) -> []", "(sums []) -> []"]}
{"name": "sums", "time": 2.098642, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[0 3 9 6 4] [] [3 1] [3 8 6 8 0]]) -> [22 0 4 25]", "(sums [[3 3 8 7 4] [2 4 2 1] [7 1] [2 1 2 6]]) -> [25 9 8 11]", "(sums [[2 2 7 0]]) -> [11]"]}
{"name": "sums", "time": 1.639932, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [4 8 0 0] [2 9] [3 8 6 6 2] [1 0 3]]) -> [0 12 11 25 4]", "(sums [[1 0] [] [0 5] [4 9 5 6] [0 8 5]]) -> [1 0 5 24 13]", "(sums [[5]]) -> [5]"]}
{"name": "sums", "time": 1.560652, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [4] [3 7 1] [9 5 8 7]]) -> [0 4 11 29]", "(sums [[4 7 4] [] [0 8 6 8] [6 2] []]) -> [15 0 22 8 0]", "(sums [[0] [9 2 6 8 5]]) -> [0 30]"]}
{"name": "sums", "time": 1.659988, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[0 2] [0 7] [1 7 1] [5] [2 2 1]]) -> [2 7 9 5 5]", "(sums [[9] [1 5 7 6] [1 1]]) -> [9 19 2]"]}
{"name": "sums", "time": 1.469754, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[5 9 3]]) -> [17]", "(sums [[7] [9 9 6 9] [9 3 9 0] []]) -> [7 33 21 0]", "(sums [[9 6] [9 9 9 0] [5 5 3 8 1]]) -> [15 27 22]"]}
{"name": "sums", "time": 2.115977, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[2 2 3] [9 0 8] [] [8 1 2 1]]) -> [7 17 0 12]", "(sums [[3] [2] [9 9 5]]) -> [3 2 23]"]}
{"name": "sums", "time": 1.849525, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[4 3] [7 8 4] [1] [4 3 1]]) -> [7 19 1 8]", "(sums [[] [4 2] [] [9 2] [1 3 6 3]]) -> [0 6 0 11 13]", "(sums []) -> []"]}
{"name": "sums", "time": 2.166261, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[6 9] [3 2 6 2] [3 4] [3]]) -> [15 13 7 3]", "(sums [[8 2 7] [7 0 8 5]]) -> [17 20]", "(sums [[] [1 1 9 9 9] [5 5 2 3]]) -> [0 29 15]"]}
{"name": "sums", "time": 2.042642, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[8 6 1] [7 3 1 0]]) -> [15 11]", "(sums []) -> []", "(sums []) -> []"]}
{"name": "sums", "time": 1.592437, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[7] [0 7 3 4] [] [8 2] [6]]) -> [7 14 0 10 6]", "(sums []) -> []", "(sums [[7] [8 6 3]]) -> [7 17]"]}
{"name": "sums", "time": 2.01119, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[1 2] [3 9 2 1] [] [8 3] [7]]) -> [3 15 0 11 7]", "(sums [[4 6] [1 7 4 4] [8 4 5 9 6] [8 7 5 5]]) -> [10 16 32 25]"]}
{"name": "sums", "time": 1.698222, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[0 4] []]) -> [4 0]", "(sums [[4] [8 5 0 5 8] [8 5 3 7 0] [6 0 1 5]]) -> [4 26 23 12]", "(sums []) -> []"]}
{"name": "sums", "time": 1.665997, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[9 0] [3 1 2 3 5] [9] [] [4]]) -> [9 14 9 0 4]", "(sums [[5]]) -> [5]", "(sums []) -> []"]}
{"name": "sums", "time": 2.085904, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[6]]) -> [6]", "(sums [[5] [2 1] [5 1 3 9 4]]) -> [5 3 22]", "(sums [[4 6 1 9] [5 3 0 8] [4 6] [0 5]]) -> [20 16 10 5]"]}
{"name": "sums", "time": 1.76575, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[7 2 1 5 8]]) -> [23]", "(sums [[0]]) -> [0]", "(sums [[2]]) -> [2]"]}
{"name": "sums", "time": 1.62067, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[3 8 0]]) -> [11]", "(sums [[2 2 9 4] [3 0] [5 0 9 1 4] [8 1 5]]) -> [17 3 19 14]", "(sums [[3] [0 3 3]]) -> [3 6]"]}
{"name": "sums", "time": 1.741491, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[] [0] [4 1]]) -> [0 0 5]", "(sums [[] [2] [3 7 9 7] [7 2 0]]) -> [0 2 26 9]"]}
{"name": "sums", "time": 1.744518, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[0 0 7 4 8] [3 5 2] [3 3]]) -> [19 10 6]", "(sums [[1 5 8 9] [2] [5 6] [0]]) -> [23 2 11 0]", "(sums [[3 7 6] []]) -> [16 0]"]}
{"name": "sums", "time": 2.152711, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[2] [9 4 3 8] [] [2 5 8 9 7] [8 2 4 1]]) -> [2 24 0 31 15]", "(sums [[4]]) -> [4]", "(sums [[8 7 8 1] [9 1 2 8 3] [0 1 2] [7 9 9 2] []]) -> [24 23 3 27 0]"]}
{"name": "sums", "time": 1.614423, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[6 8 6] [8]]) -> [20 8]", "(sums [[5 9] [5 1]]) -> [14 6]"]}
{"name": "sums", "time": 1.883259, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[6 8 0 9 6] [3 1 3 3] [6 4] []]) -> [29 10 10 0]", "(sums [[] [5]]) -> [0 5]"]}
{"name": "sums", "time": 1.874457, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[3 5 7 1 1] [2 6] [3 9] [5 3 5 4 5]]) -> [17 8 12 22]", "(sums [[5 1 5 0 9] []]) -> [20 0]", "(sums []) -> []"]}
{"name": "sums", "time": 1.948849, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[3 8 5 0] [7 0]]) -> [16 7]", "(sums [[5 6 5 2 6] [8 2 1 2 7]]) -> [24 20]", "(sums [[2 5] [8 2 0 0] [0]]) -> [7 10 0]"]}
{"name": "sums", "time": 1.916904, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[1 7] [] [] [5 1 4] [6 2 4]]) -> [8 0 0 10 12]", "(sums [[9 5 3 9 1] [] [9] [4 1 8]]) -> [27 0 9 13]"]}
{"name": "sums", "time": 0.000442, "solution": "(let sums (let a (lambda (b) []) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums []) -> []", "(sums []) -> []"]}
{"name": "sums", "time": 1.549652, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[7 0 0] [0 8 8] [6 4] [0 0 9 3]]) -> [7 16 10 12]", "(sums [[] [0 0] [9 2 8] [5 8] [8 5]]) -> [0 0 19 13 13]"]}
{"name": "sums", "time": 1.463657, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [2 1 9 7]]) -> [0 19]", "(sums [[5] [3 4 0 7 0]]) -> [5 14]", "(sums [[6]]) -> [6]"]}
{"name": "sums", "time": 1.833481, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [2 2 3 4 3] [] [2 7 4] [5 3 9 6]]) -> [0 14 0 13 23]", "(sums [[9 2] [3 0 3 4 6] [8 8 9 2 4] [0 2 4 1 3]]) -> [11 16 31 10]", "(sums [[9 9] [0 2] [6 8 7 8]]) -> [18 2 29]"]}
{"name": "sums", "time": 1.874329, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[4 6 2 2 3] [6] [5]]) -> [17 6 5]", "(sums [[4 0 9 5 0] [9 0 0 3] [8 8 6] [6 7 2]]) -> [18 12 22 15]", "(sums [[] [9 3 9 2 1] [3 0 6 3 0]]) -> [0 24 12]"]}
{"name": "sums", "time": 1.827964, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[3 5 9 6 4] [6 2 9 2 7]]) -> [27 26]", "(sums [[9 6 2 1 2]]) -> [20]", "(sums [[8 9 4] [4 3 3 8 0] [3 2 0 9 4] [8 1 3] []]) -> [21 18 18 12 0]"]}
{"name": "sums", "time": 1.119002, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[7] [6 3 6 3 1] [4]]) -> [7 19 4]", "(sums [[8] [7 7 4 6 7] [2 5 6 1 4] [] [0 3 9 8 3]]) -> [8 31 18 0 23]"]}
{"name": "sums", "time": 1.909793, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[3 9 7 2 0] [7 0 9 4] [9]]) -> [21 20 9]", "(sums [[3 2] [4 1 0 5 9] [6 0 5 9 4] [5 7 5]]) -> [5 19 24 17]", "(sums [[0 0 3 4 3]]) -> [10]"]}
{"name": "sums", "time": 0.993234, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [2 9 0 7 6]]) -> [0 24]", "(sums [[3 2 8 7 3] [4 6]]) -> [23 10]", "(sums [[0] [1] [6] [2] [4 3 8 9 0]]) -> [0 1 6 2 24]"]}
{"name": "sums", "time": 0.937532, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[9 2 6 7 5] []]) -> [29 0]", "(sums [[9] [] [6 7 7] [1] [1 0 3 7 3]]) -> [9 0 20 1 14]", "(sums [[0] [4 4] [] [5] []]) -> [0 8 0 5 0]"]}
{"name": "sums", "time": 0.986979, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[9 6 1 8 2] [] [5 0 2] [8]]) -> [26 0 7 8]", "(sums []) -> []", "(sums [[9 4 4 5] [4 9] [2]]) -> [22 13 2]"]}
{"name": "sums", "time": 2.134368, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[9 6] [8 0 4] [6] [] []]) -> [15 12 6 0 0]", "(sums [[]]) -> [0]", "(sums [[0 4 1 4] [3 0 5] [8 0 7 2 4] [5 9]]) -> [9 8 21 14]"]}
{"name": "sums", "time": 2.139113, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[8 8 4 4] [2 4 7 4] [7 3 1 0]]) -> [24 17 11]", "(sums [[8] []]) -> [8 0]", "(sums [[4]]) -> [4]"]}
{"name": "sums", "time": 2.019007, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[8] [5 3 5] [7 1 8] [0 4 0]]) -> [8 13 16 4]", "(sums [[] [9 1 8 2] [1]]) -> [0 20 1]", "(sums []) -> []"]}
{"name": "sums", "time": 1.9118, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [8 5] [2 9 0 1]]) -> [0 13 12]", "(sums [[] [3 0 4 4] []]) -> [0 11 0]", "(sums [[3 5 7] [4 2 4 4]]) -> [15 14]"]}
{"name": "sums", "time": 1.827697, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[6 9 1 5] [] [2]]) -> [21 0 2]", "(sums []) -> []", "(sums [[]]) -> [0]"]}
{"name": "sums", "time": 1.882828, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [4 4 3 7] [0 0 9 4] [0 7] [8 3 8 6]]) -> [0 18 13 7 25]", "(sums [[] [7 3 7]]) -> [0 17]", "(sums [[5 9 3] [2 4 5] [2 3 7 4] []]) -> [17 11 16 0]"]}
{"name": "sums", "time": 1.994026, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[4 7] [1] [5 0 2] [3 0 2] [4 7 1 2 4]]) -> [11 1 7 5 18]", "(sums [[8 6 1 2 9] []]) -> [26 0]"]}
{"name": "sums", "time": 1.827224, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[3 6 8 0] [4 8 8 9] []]) -> [17 29 0]", "(sums [[] [2 0 8] [] [8 3]]) -> [0 10 0 11]", "(sums [[8 9 1 2 2] [] [0 4 8 2 2]]) -> [22 0 16]"]}
{"name": "sums", "time": 1.351925, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[3 6 8 2 4]]) -> [23]", "(sums [[9 7] [7]]) -> [16 7]", "(sums [[7 1 7] [7 0 8] [7 2 5 0] [0 5 7] [7]]) -> [15 15 14 12 7]"]}
{"name": "sums", "time": 1.483462, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[8 0] [7] [5 8] [2 6 8 7] [3 9 2]]) -> [8 7 13 23 14]", "(sums []) -> []", "(sums [[4]]) -> [4]"]}
