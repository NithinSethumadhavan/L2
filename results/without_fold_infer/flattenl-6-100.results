{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[9] {[8 1]} {[5 8 7]}}) -> [9 8 1 5 8 7]", "(flattenl {}) -> []", "(flattenl {[2 3 4 7 4]}) -> [2 3 4 7 4]", "(flattenl {[8 3 4 6]}) -> [8 3 4 6]"], "time": 0.285298}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[1 7 6 4 5] {[7 3] {[4 9 5 9] {[]}}}}) -> [1 7 6 4 5 7 3 4 9 5 9]", "(flattenl {[0 1 0 9] {[9 0 9]} {[7 3 0 1 1]}}) -> [0 1 0 9 9 0 9 7 3 0 1 1]", "(flattenl {[9 3 3] {[4 2 8 2] {[2 1 2 9]}}}) -> [9 3 3 4 2 8 2 2 1 2 9]", "(flattenl {[5] {[8 0 1]}}) -> [5 8 0 1]"], "time": 0.268482}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[3 0 8] {[0 0] {[] {[0 4]}}}}) -> [3 0 8 0 0 0 4]", "(flattenl {[7 7 0] {[9] {[6 7 6 7 8] {[9]}}}}) -> [7 7 0 9 6 7 6 7 8 9]", "(flattenl {[4 0 1] {[0] {[0]}}}) -> [4 0 1 0 0]", "(flattenl {[]}) -> []"], "time": 0.272007}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[3 5 2 8] {[2 1 3]} {[0 5 9 2]}}) -> [3 5 2 8 2 1 3 0 5 9 2]", "(flattenl {}) -> []", "(flattenl {[8 1 4 0 8]}) -> [8 1 4 0 8]", "(flattenl {[1 3] {[]} {[5 4 0 7 0] {[1 3 3 7 4]} {[4 6]}}}) -> [1 3 5 4 0 7 0 1 3 3 7 4 4 6]"], "time": 0.246991}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[0 5] {[4]} {[8 0 6] {[7 0 3] {[6 5 5 2]} {[]}} {[4 5] {[2 2 7 9]}}}}) -> [0 5 4 8 0 6 7 0 3 6 5 5 2 4 5 2 2 7 9]", "(flattenl {[1]}) -> [1]", "(flattenl {}) -> []", "(flattenl {}) -> []"], "time": 0.229311}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[4 3 6]}) -> [4 3 6]", "(flattenl {[]}) -> []", "(flattenl {[2] {[9 4 1 5]} {[]}}) -> [2 9 4 1 5]", "(flattenl {[5 2]}) -> [5 2]"], "time": 0.253355}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[5 9 6 7] {[] {[4 7 8 5]}} {[6 2]}}) -> [5 9 6 7 4 7 8 5 6 2]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[2 1 8 8 8] {[1 8 9 0 7]}}) -> [2 1 8 8 8 1 8 9 0 7]"], "time": 0.256246}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[6 7]}) -> [6 7]", "(flattenl {[0 8 2 2] {[2] {[2]} {[]}} {[1 5 3] {[7 1]}}}) -> [0 8 2 2 2 2 1 5 3 7 1]", "(flattenl {[]}) -> []"], "time": 0.281034}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[8 9 6 8 9]}) -> [8 9 6 8 9]", "(flattenl {[4] {[6 1 2] {[3] {[5 0 1]} {[3 0 8]}}} {[4] {[4 3 9 9]} {[2] {[6 1 6 4]}}}}) -> [4 6 1 2 3 5 0 1 3 0 8 4 4 3 9 9 2 6 1 6 4]", "(flattenl {[0 7 0 0 1] {[0 1 8]}}) -> [0 7 0 0 1 0 1 8]", "(flattenl {[]}) -> []"], "time": 0.292861}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[3 2 0 0 2] {[4 7 0] {[0] {[]} {[2 6 4]}} {[7] {[8 0 4 7]} {[1 2 4 6]}}} {[3 4] {[] {[4 6 1 2]}}}}) -> [3 2 0 0 2 4 7 0 0 2 6 4 7 8 0 4 7 1 2 4 6 3 4 4 6 1 2]", "(flattenl {[3 5 2] {[4 5 5 6 2]} {[]}}) -> [3 5 2 4 5 5 6 2]", "(flattenl {[2 3 8] {[8]} {[]}}) -> [2 3 8 8]", "(flattenl {}) -> []"], "time": 0.266599}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[9 6 4]}) -> [9 6 4]", "(flattenl {[9 6 8 5]}) -> [9 6 8 5]", "(flattenl {[1 8 9] {[1 0 2 2 7]} {[1 9 3]}}) -> [1 8 9 1 0 2 2 7 1 9 3]", "(flattenl {[7 5 6] {[3]} {[1 8]}}) -> [7 5 6 3 1 8]"], "time": 0.270187}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[2] {[9 7 3 6]}}) -> [2 9 7 3 6]", "(flattenl {[7 3 0] {[6]} {[1 4]}}) -> [7 3 0 6 1 4]", "(flattenl {[7 2 9] {[9 6 6 7]} {[5 6]}}) -> [7 2 9 9 6 6 7 5 6]"], "time": 0.280807}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[4 2 0]}) -> [4 2 0]", "(flattenl {}) -> []", "(flattenl {[0 6]}) -> [0 6]", "(flattenl {[4 2 7 8 6] {[8] {[1]}}}) -> [4 2 7 8 6 8 1]"], "time": 0.255703}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[8 8 1]}}) -> [8 8 1]", "(flattenl {[] {[]}}) -> []", "(flattenl {[2 0] {[2 6 5]}}) -> [2 0 2 6 5]", "(flattenl {[] {[1 2 6 8 1]} {[4 7 0 1 4]}}) -> [1 2 6 8 1 4 7 0 1 4]"], "time": 0.256885}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[6 8 1] {[] {[1 3]} {[3 5 2]}}}) -> [6 8 1 1 3 3 5 2]", "(flattenl {[8 2 7 0] {[7 4 7]}}) -> [8 2 7 0 7 4 7]", "(flattenl {}) -> []", "(flattenl {[4 1 2 1] {[7 8 8] {[7 1]}} {[6 9 7 1] {[4 5 8 5]} {[] {[3 6]}}}}) -> [4 1 2 1 7 8 8 7 1 6 9 7 1 4 5 8 5 3 6]"], "time": 0.24}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[4 4 9]}) -> [4 4 9]", "(flattenl {}) -> []", "(flattenl {[4 1 1 7 1] {[7 8]}}) -> [4 1 1 7 1 7 8]", "(flattenl {[0] {[]}}) -> [0]"], "time": 0.243463}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[8]}) -> [8]", "(flattenl {[9 3 0 2 5]}) -> [9 3 0 2 5]", "(flattenl {[4 1 2]}) -> [4 1 2]", "(flattenl {[9] {[]}}) -> [9]"], "time": 0.04035}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[2]}) -> [2]", "(flattenl {[6 0 2 9] {[5 4 0 9]}}) -> [6 0 2 9 5 4 0 9]", "(flattenl {[] {[7 3] {[3 6 0 3]}} {[5 9 7 1 3]}}) -> [7 3 3 6 0 3 5 9 7 1 3]"], "time": 0.212619}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[5 6 4 1]}}) -> [5 6 4 1]", "(flattenl {[0 0]}) -> [0 0]", "(flattenl {[] {[3 9 1] {[7 1 8]} {[4 6]}}}) -> [3 9 1 7 1 8 4 6]", "(flattenl {[8 4] {[]}}) -> [8 4]"], "time": 0.232044}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[9]}) -> [9]", "(flattenl {[1 4 3 4 8]}) -> [1 4 3 4 8]", "(flattenl {[9 4 4] {[1 6 4 2]}}) -> [9 4 4 1 6 4 2]", "(flattenl {[6] {[4 0 4 7] {[9] {[4 0 0 0 2]}}} {[8 0 7]}}) -> [6 4 0 4 7 9 4 0 0 0 2 8 0 7]"], "time": 0.24361}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[6 0 5 1 5]}) -> [6 0 5 1 5]", "(flattenl {[1] {[1 9 6 8] {[9 1 8]} {[2 7 9]}}}) -> [1 1 9 6 8 9 1 8 2 7 9]", "(flattenl {}) -> []", "(flattenl {[] {[9]}}) -> [9]"], "time": 0.231503}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[7]}) -> [7]", "(flattenl {[3]}) -> [3]", "(flattenl {[1 9] {[8 8 9]} {[8 1]}}) -> [1 9 8 8 9 8 1]", "(flattenl {[8] {[2 4 7]}}) -> [8 2 4 7]"], "time": 0.245426}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[5 1] {[] {[8 7]} {[]}}}) -> [5 1 8 7]", "(flattenl {[6] {[3 2 8 2] {[3 6 2]}} {[] {[6 4 7 3 8]}}}) -> [6 3 2 8 2 3 6 2 6 4 7 3 8]", "(flattenl {[0 7 6 0 2] {[5 9]} {[9]}}) -> [0 7 6 0 2 5 9 9]"], "time": 0.259128}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[2 8] {[6 5 4 6 4]} {[]}}) -> [2 8 6 5 4 6 4]", "(flattenl {[4 4 0]}) -> [4 4 0]", "(flattenl {[9 9] {[]}}) -> [9 9]", "(flattenl {[8] {[5 0 9 8]}}) -> [8 5 0 9 8]"], "time": 0.256758}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[1] {[]} {[5 7 7 4]}}) -> [1 5 7 7 4]", "(flattenl {[6 8 5] {[6 8]}}) -> [6 8 5 6 8]", "(flattenl {[] {[7]} {[3 3 3]}}) -> [7 3 3 3]", "(flattenl {}) -> []"], "time": 0.251417}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[8] {[1 7 8]}}) -> [8 1 7 8]", "(flattenl {[5 3 2 3] {[]}}) -> [5 3 2 3]", "(flattenl {}) -> []", "(flattenl {}) -> []"], "time": 0.240514}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[9 7 3 4 5]}) -> [9 7 3 4 5]", "(flattenl {}) -> []", "(flattenl {[7 7 7 9 2]}) -> [7 7 7 9 2]", "(flattenl {[] {[0 8 7 7 3] {[7]}}}) -> [0 8 7 7 3 7]"], "time": 0.249345}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[5 3 1 4] {[]} {[5 8 7 7]}}) -> [5 3 1 4 5 8 7 7]", "(flattenl {[1 9] {[3 8 5] {[9 7 4]}} {[2 7] {[7 1]}}}) -> [1 9 3 8 5 9 7 4 2 7 7 1]", "(flattenl {[6]}) -> [6]"], "time": 0.241422}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[6 1 0 8 8] {[4]}}) -> [6 1 0 8 8 4]", "(flattenl {}) -> []", "(flattenl {[4] {[0 9 0 6 0]}}) -> [4 0 9 0 6 0]", "(flattenl {}) -> []"], "time": 0.241484}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[7 5 5 7 7] {[4] {[6 3 1]}} {[] {[]} {[0 6 8 0 6]}}}}) -> [7 5 5 7 7 4 6 3 1 0 6 8 0 6]", "(flattenl {[5]}) -> [5]", "(flattenl {[7 2] {[5]} {[]}}) -> [7 2 5]", "(flattenl {[1 6 3 1 0] {[4 7 4 1 5]}}) -> [1 6 3 1 0 4 7 4 1 5]"], "time": 0.276762}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[6 9] {[] {[6 3 1]} {[4 7 2]}} {[8 6 7 8 9] {[1 3]}}}}) -> [6 9 6 3 1 4 7 2 8 6 7 8 9 1 3]", "(flattenl {[6 8 5 8]}) -> [6 8 5 8]", "(flattenl {}) -> []", "(flattenl {[6 5 0 7 3] {[1 5 0]} {[] {[4 7 4 4 0]} {[1 6]}}}) -> [6 5 0 7 3 1 5 0 4 7 4 4 0 1 6]"], "time": 0.239697}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[3] {[2 7 3 2] {[6 6]}} {[3 7 9]}}}) -> [3 2 7 3 2 6 6 3 7 9]", "(flattenl {[8 0 7 2 1]}) -> [8 0 7 2 1]", "(flattenl {[2 6 8 5 7] {[6 1] {[8 9 3]} {[5 2 4 1 6]}} {[] {[]} {[9 1 4]}}}) -> [2 6 8 5 7 6 1 8 9 3 5 2 4 1 6 9 1 4]", "(flattenl {[8 8 4] {[] {[6 3 8 9]}}}) -> [8 8 4 6 3 8 9]"], "time": 0.256973}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[4 0 3] {[0 9 3]}}) -> [4 0 3 0 9 3]", "(flattenl {[7 7 3]}) -> [7 7 3]", "(flattenl {[] {[]}}) -> []", "(flattenl {[2 8 4]}) -> [2 8 4]"], "time": 0.216777}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[7 7 9] {[6] {[7 9 0 4] {[8 5 4 6]} {[6 9 3 1 9]}} {[1]}} {[8 8 8 2]}}) -> [7 7 9 6 7 9 0 4 8 5 4 6 6 9 3 1 9 1 8 8 8 2]", "(flattenl {[6 3 9]}) -> [6 3 9]", "(flattenl {[0 7] {[1 3 1 9 9]} {[4 1]}}) -> [0 7 1 3 1 9 9 4 1]", "(flattenl {[0 1 3 3 5] {[9 4 5 0 8]} {[3 0] {[5 6 2]}}}) -> [0 1 3 3 5 9 4 5 0 8 3 0 5 6 2]"], "time": 0.2168}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[7 6 3] {[9 2 1] {[9 5]} {[5 4 4 1]}}}) -> [7 6 3 9 2 1 9 5 5 4 4 1]", "(flattenl {[3 4 1] {[8 0 6]} {[0 3]}}) -> [3 4 1 8 0 6 0 3]"], "time": 0.267185}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[4 2 6 1 1] {[8 4 0 1 5] {[5 7]}} {[4 5]}}) -> [4 2 6 1 1 8 4 0 1 5 5 7 4 5]", "(flattenl {[0 0 7 1 2] {[4]}}) -> [0 0 7 1 2 4]", "(flattenl {}) -> []", "(flattenl {[8 5 5 8 1] {[9 0 6] {[1 8 3 7 2]} {[9 3 9]}} {[0 7 0] {[9] {[9 9 9 8 1]}} {[9 5 5 7 7]}}}) -> [8 5 5 8 1 9 0 6 1 8 3 7 2 9 3 9 0 7 0 9 9 9 9 8 1 9 5 5 7 7]"], "time": 0.266829}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[7 6 4] {[] {[8 8 3] {[3 8]}}} {[0 6 3 3] {[4 6] {[2 4 9 9 9]}} {[0 2] {[]} {[8 8]}}}}) -> [7 6 4 8 8 3 3 8 0 6 3 3 4 6 2 4 9 9 9 0 2 8 8]", "(flattenl {}) -> []", "(flattenl {[7 2] {[]} {[2]}}) -> [7 2 2]", "(flattenl {}) -> []"], "time": 0.209999}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[6 0 4] {[4 2] {[]}} {[1 4 7]}}) -> [6 0 4 4 2 1 4 7]", "(flattenl {[] {[4] {[7 9 7 5 6]} {[9 5 1 1 9]}} {[2 4] {[5 1]}}}) -> [4 7 9 7 5 6 9 5 1 1 9 2 4 5 1]", "(flattenl {[4] {[4 0 5]}}) -> [4 4 0 5]", "(flattenl {[] {[6 8 0 9] {[5 8]}}}) -> [6 8 0 9 5 8]"], "time": 0.252345}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[0 4 9 0 7] {[6 1]}}) -> [0 4 9 0 7 6 1]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[]}) -> []"], "time": 0.245757}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[1] {[5 9 2 7 5] {[1 6 6 0 9] {[9 5 1 8]} {[4 1 0 9 9]}} {[5] {[4 1]} {[0 6 2 3 7]}}}}) -> [1 5 9 2 7 5 1 6 6 0 9 9 5 1 8 4 1 0 9 9 5 4 1 0 6 2 3 7]", "(flattenl {}) -> []", "(flattenl {[6 6 5 6 2]}) -> [6 6 5 6 2]", "(flattenl {[3 2 2]}) -> [3 2 2]"], "time": 0.280984}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[3 0 2 2 4]}) -> [3 0 2 2 4]", "(flattenl {[7]}) -> [7]", "(flattenl {[]}) -> []", "(flattenl {[] {[]} {[5 9 9 2]}}) -> [5 9 9 2]"], "time": 0.260835}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[5 6 9 2]} {[0 3] {[5 4 3]} {[0 0]}}}) -> [5 6 9 2 0 3 5 4 3 0 0]", "(flattenl {[1 7 9]}) -> [1 7 9]", "(flattenl {}) -> []", "(flattenl {}) -> []"], "time": 0.244695}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[0 9 8 3] {[4 3 6 5 7] {[1 2 5 0 4] {[4]}} {[0 1]}} {[]}}) -> [0 9 8 3 4 3 6 5 7 1 2 5 0 4 4 0 1]", "(flattenl {[9 2] {[7 3] {[8 2 0 1 7]}}}) -> [9 2 7 3 8 2 0 1 7]", "(flattenl {}) -> []", "(flattenl {[2 7 7] {[4 9 0 7 5]}}) -> [2 7 7 4 9 0 7 5]"], "time": 0.2457}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[7 4 9 0] {[1] {[0 4 0] {[]} {[7 1 9]}}} {[0] {[3 5 4 3] {[3]}}}}) -> [7 4 9 0 1 0 4 0 7 1 9 0 3 5 4 3 3]", "(flattenl {[2] {[3 1 2 6 2] {[] {[]}}} {[9 9 1]}}) -> [2 3 1 2 6 2 9 9 1]", "(flattenl {[7] {[5 6] {[8 4 7 2 5]} {[]}} {[9] {[8 5 1 9] {[]} {[8 5]}} {[3] {[8 7]}}}}) -> [7 5 6 8 4 7 2 5 9 8 5 1 9 8 5 3 8 7]"], "time": 0.223751}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[4 0] {[2 2 9] {[6 7 3]} {[8] {[]} {[7 6 2]}}}}) -> [4 0 2 2 9 6 7 3 8 7 6 2]", "(flattenl {[7 5] {[4] {[6 7 6 9]} {[1 3 2]}}}) -> [7 5 4 6 7 6 9 1 3 2]", "(flattenl {[0]}) -> [0]", "(flattenl {[9 4] {[2 3 7 9]}}) -> [9 4 2 3 7 9]"], "time": 0.260232}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[3] {[3]} {[3 2 7 0]}}) -> [3 3 3 2 7 0]"], "time": 0.232596}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[4 8 5]}) -> [4 8 5]", "(flattenl {[5 0 3 8 8] {[1 3 7 7 3] {[]}} {[2] {[6 5 5 0 2]}}}) -> [5 0 3 8 8 1 3 7 7 3 2 6 5 5 0 2]", "(flattenl {}) -> []", "(flattenl {[4 9] {[2] {[2 0 8 6]} {[0 0 9 9 8]}}}) -> [4 9 2 2 0 8 6 0 0 9 9 8]"], "time": 0.238352}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[7 0 5] {[7 6 8] {[0 0 3 6] {[0]}} {[4 6 3]}} {[7 0 9 3 9] {[] {[5 1 0 2 1]} {[5]}}}}) -> [7 0 5 7 6 8 0 0 3 6 0 4 6 3 7 0 9 3 9 5 1 0 2 1 5]", "(flattenl {[6 1 1 8 7] {[0 6 3]} {[6 2 5 5] {[0 3 1 7 7]} {[7] {[9 5]}}}}) -> [6 1 1 8 7 0 6 3 6 2 5 5 0 3 1 7 7 7 9 5]", "(flattenl {[7 9] {[6 0 3 3 8] {[5 8 8 9]}} {[0]}}) -> [7 9 6 0 3 3 8 5 8 8 9 0]", "(flattenl {[5 8 8 5]}) -> [5 8 8 5]"], "time": 0.255034}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {[8 1 0]}) -> [8 1 0]", "(flattenl {[7]}) -> [7]", "(flattenl {[6 0 9 8] {[] {[5 6 5 3]}} {[5 5] {[8]}}}) -> [6 0 9 8 5 6 5 3 5 5 8]"], "time": 0.194044}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[9 6 6] {[4 0] {[]} {[]}}}) -> [9 6 6 4 0]", "(flattenl {}) -> []", "(flattenl {[] {[2 1 5 1 5]}}) -> [2 1 5 1 5]", "(flattenl {[4 0] {[1 5 1 9]}}) -> [4 0 1 5 1 9]"], "time": 0.196762}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[3 7 8 5 1]}) -> [3 7 8 5 1]", "(flattenl {[6 3 4]}) -> [6 3 4]", "(flattenl {[1 3 8 6 0] {[9 3 7]}}) -> [1 3 8 6 0 9 3 7]", "(flattenl {}) -> []"], "time": 0.258886}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[5 2 0 4 4]}) -> [5 2 0 4 4]", "(flattenl {[4 8 8 6]}) -> [4 8 8 6]", "(flattenl {[6 9 8 6 7] {[3 0]} {[9 1 2]}}) -> [6 9 8 6 7 3 0 9 1 2]"], "time": 0.218133}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[7 5 1 8 3]}) -> [7 5 1 8 3]", "(flattenl {[3 2] {[1]} {[0 8 9 0]}}) -> [3 2 1 0 8 9 0]", "(flattenl {}) -> []", "(flattenl {[3 8] {[7 9 5 7 4] {[]}} {[4 2 7 1]}}) -> [3 8 7 9 5 7 4 4 2 7 1]"], "time": 0.267434}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[4] {[]} {[1 7 3 4]}}) -> [4 1 7 3 4]", "(flattenl {[7 8 4] {[1 7 1 2] {[9 8 1 6 3]}} {[8] {[7 0 0 4]}}}) -> [7 8 4 1 7 1 2 9 8 1 6 3 8 7 0 0 4]", "(flattenl {}) -> []", "(flattenl {[6] {[1 4 5] {[5 3] {[5]} {[8 8 3]}} {[4 8 2 0] {[3 5 3 7 7]} {[4 4 8 0]}}} {[8] {[3] {[8 7]}}}}) -> [6 1 4 5 5 3 5 8 8 3 4 8 2 0 3 5 3 7 7 4 4 8 0 8 3 8 7]"], "time": 0.210993}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[3 6]}) -> [3 6]", "(flattenl {[5 9] {[6 4 9]} {[4 8 2 6 1]}}) -> [5 9 6 4 9 4 8 2 6 1]", "(flattenl {[3 2 3] {[9 9 6 1]}}) -> [3 2 3 9 9 6 1]", "(flattenl {[9 9 3 1 6] {[3 1 7 5]}}) -> [9 9 3 1 6 3 1 7 5]"], "time": 0.215081}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[3 7 4 6] {[0 7] {[9 6 8 5]} {[] {[6 6 9]} {[8 8 5 6 7]}}}}) -> [3 7 4 6 0 7 9 6 8 5 6 6 9 8 8 5 6 7]", "(flattenl {[9 8] {[4] {[3 3 6 6] {[1]} {[1 4 6 9 4]}}} {[6 2 7 9 3]}}) -> [9 8 4 3 3 6 6 1 1 4 6 9 4 6 2 7 9 3]", "(flattenl {[2 8] {[1 1 3]} {[1]}}) -> [2 8 1 1 3 1]"], "time": 0.200167}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[5 9 3 6] {[3 5 7] {[]}} {[4 7 5 0 9] {[3 7 0 7 7]}}}) -> [5 9 3 6 3 5 7 4 7 5 0 9 3 7 0 7 7]", "(flattenl {[2] {[8]} {[]}}) -> [2 8]", "(flattenl {[] {[]} {[4 9 2] {[4 4 7 1 9]} {[9 8 1 5]}}}) -> [4 9 2 4 4 7 1 9 9 8 1 5]", "(flattenl {[6 0 8 9 0] {[]}}) -> [6 0 8 9 0]"], "time": 0.212105}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[9 6 2 6 6] {[0 0 6] {[4 9 6 6] {[]}} {[1 4 8]}} {[2 1 7 5 9] {[8 3 9 2] {[]}}}}) -> [9 6 2 6 6 0 0 6 4 9 6 6 1 4 8 2 1 7 5 9 8 3 9 2]", "(flattenl {[0 8] {[6 6 5 9]}}) -> [0 8 6 6 5 9]", "(flattenl {[5 0 1 2] {[2 0 3 9 6] {[7 0 8 0 9] {[5]}} {[2] {[0 4 2 0 9]} {[9 2]}}} {[3 1 0] {[4 9] {[9 0]}} {[] {[3]}}}}) -> [5 0 1 2 2 0 3 9 6 7 0 8 0 9 5 2 0 4 2 0 9 9 2 3 1 0 4 9 9 0 3]", "(flattenl {[5 7] {[]} {[3 1 6 1 0]}}) -> [5 7 3 1 6 1 0]"], "time": 0.270329}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[1]}) -> [1]", "(flattenl {[0 9] {[8 3]} {[6 9]}}) -> [0 9 8 3 6 9]", "(flattenl {[6 8]}) -> [6 8]", "(flattenl {[6 0 8 1 8] {[4 9 0 7 1]} {[]}}) -> [6 0 8 1 8 4 9 0 7 1]"], "time": 0.262043}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[5]}) -> [5]", "(flattenl {[0 1 6]}) -> [0 1 6]", "(flattenl {[7 3 5 6 7] {[5 5 9 0] {[7 5 9 0]}} {[1 5 6 3 9] {[6 5] {[3 7 1 6 5]} {[8]}} {[6] {[5 4 6 5]}}}}) -> [7 3 5 6 7 5 5 9 0 7 5 9 0 1 5 6 3 9 6 5 3 7 1 6 5 8 6 5 4 6 5]", "(flattenl {}) -> []"], "time": 0.267691}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[1 3 9] {[5 5 2 2 1]} {[4 4]}}) -> [1 3 9 5 5 2 2 1 4 4]", "(flattenl {[9] {[7 1 1]} {[2]}}) -> [9 7 1 1 2]", "(flattenl {[4] {[0 9 7 5 7]}}) -> [4 0 9 7 5 7]", "(flattenl {[6 0 7 0] {[3 7 0]} {[4 2 2 1 6]}}) -> [6 0 7 0 3 7 0 4 2 2 1 6]"], "time": 0.271257}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[3] {[8 7 9 2] {[5 1 2 4 4] {[2 7 4]}}}}) -> [3 8 7 9 2 5 1 2 4 4 2 7 4]", "(flattenl {[9 8 1]}) -> [9 8 1]", "(flattenl {[2] {[3] {[8]}}}) -> [2 3 8]", "(flattenl {[2 7 5]}) -> [2 7 5]"], "time": 0.289205}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[5 5 9] {[5 7 4 4 8] {[4]} {[4]}} {[2 9 4] {[]}}}) -> [5 5 9 5 7 4 4 8 4 4 2 9 4]", "(flattenl {[0 0 9 7 2] {[8]} {[8 5 9] {[8 1 7 6]}}}) -> [0 0 9 7 2 8 8 5 9 8 1 7 6]", "(flattenl {[2 8 7 6 2] {[4 0 7 9 9]}}) -> [2 8 7 6 2 4 0 7 9 9]", "(flattenl {[1 1 1] {[1 0 4 8]}}) -> [1 1 1 1 0 4 8]"], "time": 0.235706}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[5 5 7 4] {[1]}}) -> [5 5 7 4 1]", "(flattenl {[9]}) -> [9]", "(flattenl {[5 3 6]}) -> [5 3 6]"], "time": 0.258438}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[7] {[]} {[8] {[5]}}}) -> [7 8 5]", "(flattenl {[2 8 3]}) -> [2 8 3]", "(flattenl {[6 8 2 8 8]}) -> [6 8 2 8 8]", "(flattenl {[4 5 8 7 6] {[] {[3 1 0] {[0 8 8 8 8]}} {[1] {[2]}}}}) -> [4 5 8 7 6 3 1 0 0 8 8 8 8 1 2]"], "time": 0.150557}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[5 6 0 0]}) -> [5 6 0 0]", "(flattenl {}) -> []"], "time": 0.030741}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[5 7 7] {[0 3 6 1 0]}}) -> [5 7 7 0 3 6 1 0]", "(flattenl {[3 1 7] {[6 3]}}) -> [3 1 7 6 3]", "(flattenl {[] {[6]}}) -> [6]", "(flattenl {[4 4 4 1 6]}) -> [4 4 4 1 6]"], "time": 0.2012}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[4 8] {[2 9 2 2 1] {[0 8 0 1 2] {[4 0 2 2 0]} {[]}}}}) -> [4 8 2 9 2 2 1 0 8 0 1 2 4 0 2 2 0]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[5 9] {[1] {[5] {[2]} {[6 7 7]}}}}) -> [5 9 1 5 2 6 7 7]"], "time": 0.196812}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[6] {[8 3 2] {[4] {[2 5 2]} {[0 1 5 7 6]}}}}) -> [6 8 3 2 4 2 5 2 0 1 5 7 6]", "(flattenl {}) -> []", "(flattenl {[5] {[5 9 0 7 5]} {[0 4 6 5]}}) -> [5 5 9 0 7 5 0 4 6 5]", "(flattenl {[]}) -> []"], "time": 0.186289}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[3 5] {[3 2]}}) -> [3 5 3 2]", "(flattenl {}) -> []", "(flattenl {[] {[5 8 4] {[9] {[]}} {[7 7] {[]} {[1 8 4 5 9]}}}}) -> [5 8 4 9 7 7 1 8 4 5 9]"], "time": 0.224105}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[] {[8 2 4 2 0]} {[1 2 4]}}) -> [8 2 4 2 0 1 2 4]", "(flattenl {[9 3]}) -> [9 3]", "(flattenl {}) -> []"], "time": 0.215829}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[0] {[8 4 9 8] {[5 8 7 6]} {[0 2 5]}}}) -> [0 8 4 9 8 5 8 7 6 0 2 5]", "(flattenl {[9 2 3 7] {[4 3 1 6 6] {[8 8 6 7] {[5 9]} {[1]}} {[7 1 5 5] {[2 1 0 5]} {[5 2 1 0 7]}}} {[8 9]}}) -> [9 2 3 7 4 3 1 6 6 8 8 6 7 5 9 1 7 1 5 5 2 1 0 5 5 2 1 0 7 8 9]", "(flattenl {[7 9 4 7 0]}) -> [7 9 4 7 0]", "(flattenl {[0] {[8 0 5 0 9]} {[9]}}) -> [0 8 0 5 0 9 9]"], "time": 0.210035}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[5 5 8]}) -> [5 5 8]", "(flattenl {[] {[6 4 3 5 5]} {[]}}) -> [6 4 3 5 5]", "(flattenl {[5 1 6 9 5]}) -> [5 1 6 9 5]", "(flattenl {[2 5 7] {[7] {[3 3 0 3 2] {[2 4]}}}}) -> [2 5 7 7 3 3 0 3 2 2 4]"], "time": 0.215066}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[0 3 5 6] {[] {[6 7 7]}}}) -> [0 3 5 6 6 7 7]", "(flattenl {[3 3 0 4 9]}) -> [3 3 0 4 9]", "(flattenl {[] {[9 2 0 4]}}) -> [9 2 0 4]", "(flattenl {[8 2 9 4] {[4 3]}}) -> [8 2 9 4 4 3]"], "time": 0.264059}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[9] {[0 9 4 7 4]}}) -> [9 0 9 4 7 4]", "(flattenl {[1 5 0] {[2]} {[1]}}) -> [1 5 0 2 1]", "(flattenl {[]}) -> []", "(flattenl {[6 9] {[1 3 2 4 4]}}) -> [6 9 1 3 2 4 4]"], "time": 0.247162}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[5 3 8 8 0]}) -> [5 3 8 8 0]", "(flattenl {}) -> []", "(flattenl {[3]}) -> [3]", "(flattenl {[7 6 3] {[8 7 2] {[0 0] {[5]}}} {[]}}) -> [7 6 3 8 7 2 0 0 5]"], "time": 0.22254}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[2 3 4] {[] {[7 3 4 2 8]} {[1 8 5]}} {[] {[]}}}) -> [2 3 4 7 3 4 2 8 1 8 5]", "(flattenl {[4] {[] {[2 6 2 9]}} {[] {[0 4]} {[]}}}) -> [4 2 6 2 9 0 4]", "(flattenl {[4 5 3] {[] {[1 8]} {[]}}}) -> [4 5 3 1 8]", "(flattenl {[1 0 5 3 2] {[2 5 0 9]}}) -> [1 0 5 3 2 2 5 0 9]"], "time": 0.240573}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[0] {[6 0 9 4 5] {[2 1 0]}} {[4 0] {[2 0]}}}) -> [0 6 0 9 4 5 2 1 0 4 0 2 0]", "(flattenl {}) -> []", "(flattenl {[2 4 6 3] {[1 2 0 9 6]} {[] {[1 9 3] {[0]}} {[] {[7 5]} {[2 8]}}}}) -> [2 4 6 3 1 2 0 9 6 1 9 3 0 7 5 2 8]", "(flattenl {[4 2 1 0 9] {[3 0 9 7 8] {[]}}}) -> [4 2 1 0 9 3 0 9 7 8]"], "time": 0.223848}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[1 6 0]}}) -> [1 6 0]", "(flattenl {[5 5 0 6 1] {[]}}) -> [5 5 0 6 1]", "(flattenl {[1 3 8 5 7] {[8 3]} {[5 1 3 6]}}) -> [1 3 8 5 7 8 3 5 1 3 6]", "(flattenl {}) -> []"], "time": 0.272132}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[9]}) -> [9]", "(flattenl {[5 3 0 4 7]}) -> [5 3 0 4 7]", "(flattenl {[8 1 5 8] {[0] {[9 4 1]} {[]}} {[8 4 3 2 1]}}) -> [8 1 5 8 0 9 4 1 8 4 3 2 1]", "(flattenl {[] {[2 9 8 9 0]}}) -> [2 9 8 9 0]"], "time": 0.216324}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[1 6 0 6 3]}) -> [1 6 0 6 3]", "(flattenl {[3 4 1 0] {[] {[5 6] {[7 0 8 8 4]}}} {[2] {[2] {[4 2 3 8]} {[]}} {[3] {[]}}}}) -> [3 4 1 0 5 6 7 0 8 8 4 2 2 4 2 3 8 3]", "(flattenl {}) -> []", "(flattenl {[0 9 3] {[1 8 5 7] {[4 4 7 8 7] {[8]}} {[]}}}) -> [0 9 3 1 8 5 7 4 4 7 8 7 8]"], "time": 0.179896}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {[]}) -> []", "(flattenl {[6 9 0 0 0]}) -> [6 9 0 0 0]", "(flattenl {[]}) -> []"], "time": 0.022151}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[3] {[2 5 7] {[5 8]}}}) -> [3 2 5 7 5 8]", "(flattenl {[9 8 0] {[7 3 5]} {[7 8 5]}}) -> [9 8 0 7 3 5 7 8 5]", "(flattenl {}) -> []"], "time": 0.144745}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[0 6 0 4]}) -> [0 6 0 4]"], "time": 0.035365}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[6 6 8 2]}) -> [6 6 8 2]", "(flattenl {[3 6 1]}) -> [3 6 1]", "(flattenl {[5 4]}) -> [5 4]", "(flattenl {}) -> []"], "time": 0.042799}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[3 9 0 0] {[4]} {[] {[9 8 1]} {[2 7]}}}) -> [3 9 0 0 4 9 8 1 2 7]", "(flattenl {}) -> []", "(flattenl {[9 3 0 5 9] {[8 6 4] {[] {[3 6 2]} {[1]}} {[5 0] {[2 8 2 7 0]}}}}) -> [9 3 0 5 9 8 6 4 3 6 2 1 5 0 2 8 2 7 0]", "(flattenl {[9 6 0] {[] {[] {[2 2 5]}}} {[5 5] {[2 5 1]}}}) -> [9 6 0 2 2 5 5 5 2 5 1]"], "time": 0.223634}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[2 8 5 6 1] {[5 4 7] {[5 0 3] {[5 2 1 2 6]}} {[9 3 8 4 5]}} {[7] {[6 8 8 4 4]}}}) -> [2 8 5 6 1 5 4 7 5 0 3 5 2 1 2 6 9 3 8 4 5 7 6 8 8 4 4]", "(flattenl {[1] {[9 8] {[3 5]}} {[7 1 0 7] {[5 5 8]}}}) -> [1 9 8 3 5 7 1 0 7 5 5 8]", "(flattenl {[0] {[1 7]}}) -> [0 1 7]", "(flattenl {[] {[]} {[7 0]}}) -> [7 0]"], "time": 0.218388}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[1] {[7]} {[8 5 0 8 8]}}) -> [1 7 8 5 0 8 8]", "(flattenl {[8 8 2 1] {[] {[5 2 7 4 8]}} {[8 0 2] {[4 5 2 7 7]}}}) -> [8 8 2 1 5 2 7 4 8 8 0 2 4 5 2 7 7]", "(flattenl {[2 6 6] {[7]} {[6 6 8]}}) -> [2 6 6 7 6 6 8]", "(flattenl {[5 0 2] {[9 6 7 6] {[] {[5 0 1]}}} {[]}}) -> [5 0 2 9 6 7 6 5 0 1]"], "time": 0.240106}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[0 4]}) -> [0 4]", "(flattenl {[8 3 6 4]}) -> [8 3 6 4]", "(flattenl {[8] {[1 1 0 6 8] {[9 6 7 4]}}}) -> [8 1 1 0 6 8 9 6 7 4]", "(flattenl {[5 6 5]}) -> [5 6 5]"], "time": 0.215405}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[3] {[3]} {[8 3 3 1]}}) -> [3 3 8 3 3 1]", "(flattenl {}) -> []", "(flattenl {[1 2 9 9 8]}) -> [1 2 9 9 8]", "(flattenl {[8 5 4] {[3 8 0]}}) -> [8 5 4 3 8 0]"], "time": 0.225884}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[] {[0] {[3 0 9]} {[7 9 5 4 8]}}}}) -> [0 3 0 9 7 9 5 4 8]", "(flattenl {[2 2 5 4 9] {[]}}) -> [2 2 5 4 9]", "(flattenl {[7 9 9 6] {[3] {[3 8 0 3 9] {[3 1 1 0]}} {[7 3 1] {[1 3]}}}}) -> [7 9 9 6 3 3 8 0 3 9 3 1 1 0 7 3 1 1 3]", "(flattenl {[5 8 4 0]}) -> [5 8 4 0]"], "time": 0.198285}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[4 3 8 6] {[0 2 8 2]} {[3 1]}}) -> [4 3 8 6 0 2 8 2 3 1]", "(flattenl {[5 3 2 4 3] {[0 3] {[6] {[4 5 9 9]} {[7 8 5]}}} {[8 0 5]}}) -> [5 3 2 4 3 0 3 6 4 5 9 9 7 8 5 8 0 5]", "(flattenl {[7 5 9 8] {[] {[1 9]}} {[6 5] {[4 5 9 1]} {[3 1 1 6 9]}}}) -> [7 5 9 8 1 9 6 5 4 5 9 1 3 1 1 6 9]", "(flattenl {[] {[6 1]} {[] {[6 6 9 9 4]} {[3 8] {[5 4 1 4 2]} {[2 8 1 7]}}}}) -> [6 1 6 6 9 9 4 3 8 5 4 1 4 2 2 8 1 7]"], "time": 0.181872}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[7] {[3 1 9] {[7 1 5]} {[9 8]}}} {[3 4 2 0]}}) -> [7 3 1 9 7 1 5 9 8 3 4 2 0]", "(flattenl {[6] {[2 8 3]}}) -> [6 2 8 3]", "(flattenl {[]}) -> []", "(flattenl {}) -> []"], "time": 0.225545}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[6 2 6 3 1]}) -> [6 2 6 3 1]", "(flattenl {[] {[8] {[]} {[0]}} {[]}}) -> [8 0]", "(flattenl {[3] {[] {[2 5] {[2 9 0]} {[5 4 9]}} {[] {[7 7 2 8 2]}}} {[3 5]}}) -> [3 2 5 2 9 0 5 4 9 7 7 2 8 2 3 5]", "(flattenl {[4 2 3 7]}) -> [4 2 3 7]"], "time": 0.189414}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[1]}) -> [1]", "(flattenl {[4] {[2 0 3]} {[] {[8 1 5 4] {[]} {[8 2 1 0 9]}}}}) -> [4 2 0 3 8 1 5 4 8 2 1 0 9]", "(flattenl {[0 6 0 3 3]}) -> [0 6 0 3 3]", "(flattenl {[] {[] {[8 4 1 5]} {[4 9 7]}} {[0 0 0 6]}}) -> [8 4 1 5 4 9 7 0 0 0 6]"], "time": 0.185962}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[1 7 3 0] {[6] {[]} {[7 5]}}}) -> [1 7 3 0 6 7 5]", "(flattenl {[4 1 3 6] {[5 7]} {[2 9 3 1 3] {[]}}}) -> [4 1 3 6 5 7 2 9 3 1 3]", "(flattenl {[6 7] {[]}}) -> [6 7]"], "time": 0.207779}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[5 0] {[7 7]} {[2 7 9 2]}}) -> [5 0 7 7 2 7 9 2]", "(flattenl {}) -> []", "(flattenl {[5 9] {[]}}) -> [5 9]", "(flattenl {}) -> []"], "time": 0.219492}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[2 6 2]}) -> [2 6 2]", "(flattenl {[6 8 6 2 4] {[4 6]} {[0 7 6 5 2]}}) -> [6 8 6 2 4 4 6 0 7 6 5 2]", "(flattenl {}) -> []", "(flattenl {[6 0 5] {[9] {[6 1 3]} {[2 3 0 9]}}}) -> [6 0 5 9 6 1 3 2 3 0 9]"], "time": 0.144165}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[5 8 7] {[6 6 7]} {[1 4 2]}}) -> [5 8 7 6 6 7 1 4 2]", "(flattenl {[1]}) -> [1]", "(flattenl {[2] {[8 4] {[4 3 2 4]} {[]}}}) -> [2 8 4 4 3 2 4]", "(flattenl {[] {[2 8 3] {[8 7 5 6 9]}}}) -> [2 8 3 8 7 5 6 9]"], "time": 0.138509}
{"name": "flattenl", "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)", "examples": ["(flattenl {}) -> []", "(flattenl {[1 6 5 0 0] {[1 6 9 4] {[6 9 3 0 6] {[7 4]} {[5 6]}} {[2]}} {[1 5 5 2 9] {[1 7 5 9 8] {[]} {[8 1 8 9]}} {[0 4] {[]} {[]}}}}) -> [1 6 5 0 0 1 6 9 4 6 9 3 0 6 7 4 5 6 2 1 5 5 2 9 1 7 5 9 8 8 1 8 9 0 4]", "(flattenl {[3 9 1 3] {[1 3 1 4 2]}}) -> [3 9 1 3 1 3 1 4 2]", "(flattenl {[5 9]}) -> [5 9]", "(flattenl {[]}) -> []"], "time": 0.109814}
