{"time": 0.024393, "examples": ["(multlast []) -> []", "(multlast [2 3]) -> [3 3]", "(multlast [0 3]) -> [3 3]", "(multlast [7 7]) -> [7 7]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr b))))) _) _)"}
{"time": 0.158894, "examples": ["(multlast []) -> []", "(multlast [2]) -> [2]", "(multlast [4]) -> [4]", "(multlast [2 7]) -> [7 7]", "(multlast [3]) -> [3]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) b)) _) _)"}
{"time": 0.173524, "examples": ["(multlast []) -> []", "(multlast [0 1 0]) -> [0 0 0]", "(multlast [1 7 1]) -> [1 1 1]", "(multlast [4 2 7]) -> [7 7 7]", "(multlast [1 4 1]) -> [1 1 1]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr (cdr b)))))) _) _)"}
{"time": 0.682701, "examples": ["(multlast []) -> []", "(multlast [2 2 8]) -> [8 8 8]", "(multlast [9 1 8]) -> [8 8 8]", "(multlast [2 8]) -> [8 8]", "(multlast [3 7]) -> [7 7]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.732402, "examples": ["(multlast []) -> []", "(multlast [1 2 7]) -> [7 7 7]", "(multlast [3 4 4 0 1]) -> [1 1 1 1 1]", "(multlast [7 0 2]) -> [2 2 2]", "(multlast [7 2 5 7]) -> [7 7 7 7]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.734711, "examples": ["(multlast []) -> []", "(multlast [4 3 9 8]) -> [8 8 8 8]", "(multlast [4 4 5 3 1]) -> [1 1 1 1 1]", "(multlast [2 2 0]) -> [0 0 0]", "(multlast [9 2]) -> [2 2]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.732367, "examples": ["(multlast []) -> []", "(multlast [4 3 6 1 6]) -> [6 6 6 6 6]", "(multlast [3]) -> [3]", "(multlast [9 9 8]) -> [8 8 8]", "(multlast [8 5]) -> [5 5]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.698143, "examples": ["(multlast []) -> []", "(multlast [9 8 1]) -> [1 1 1]", "(multlast [3 8]) -> [8 8]", "(multlast [4 8 2 5]) -> [5 5 5 5]", "(multlast [5 8 0 9 2]) -> [2 2 2 2 2]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.728046, "examples": ["(multlast []) -> []", "(multlast [1 3 5 4]) -> [4 4 4 4]", "(multlast []) -> []", "(multlast [5 6]) -> [6 6]", "(multlast [3 3 1 2]) -> [2 2 2 2]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.974441, "examples": ["(multlast []) -> []", "(multlast [2 6 7 9]) -> [9 9 9 9]", "(multlast [6 5]) -> [5 5]", "(multlast [2 3]) -> [3 3]", "(multlast [7 7 3]) -> [3 3 3]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.013923, "examples": ["(multlast []) -> []", "(multlast [3 8]) -> [8 8]", "(multlast [6]) -> [6]", "(multlast [3 2 2]) -> [2 2 2]", "(multlast [5 0 8 3]) -> [3 3 3 3]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.89547, "examples": ["(multlast []) -> []", "(multlast [0 8 7]) -> [7 7 7]", "(multlast [3 2 5 1 9]) -> [9 9 9 9 9]", "(multlast [4 0 5 4 8]) -> [8 8 8 8 8]", "(multlast [0]) -> [0]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.053159, "examples": ["(multlast []) -> []", "(multlast [6]) -> [6]", "(multlast []) -> []", "(multlast [7 3 9 7 2]) -> [2 2 2 2 2]", "(multlast [5]) -> [5]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.073118, "examples": ["(multlast []) -> []", "(multlast [9 4 3 4]) -> [4 4 4 4]", "(multlast []) -> []", "(multlast [5 1 1]) -> [1 1 1]", "(multlast [0 5 2 9 4]) -> [4 4 4 4 4]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.008644, "examples": ["(multlast []) -> []", "(multlast [1]) -> [1]", "(multlast [5]) -> [5]", "(multlast [9 8 0 5 8]) -> [8 8 8 8 8]", "(multlast [1 3 4 2 7]) -> [7 7 7 7 7]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.020153, "examples": ["(multlast []) -> []", "(multlast [2 0 1 8 1]) -> [1 1 1 1 1]", "(multlast [8 1 7 1 7]) -> [7 7 7 7 7]", "(multlast [8]) -> [8]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.07706, "examples": ["(multlast []) -> []", "(multlast [3 8 1 9 8]) -> [8 8 8 8 8]", "(multlast []) -> []", "(multlast [9 1]) -> [1 1]", "(multlast [5 2]) -> [2 2]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr b))))) _) _)"}
{"time": 1.013621, "examples": ["(multlast []) -> []", "(multlast [4 7]) -> [7 7]", "(multlast [0 2 1 8 4]) -> [4 4 4 4 4]", "(multlast [0]) -> [0]", "(multlast [1 6 7]) -> [7 7 7]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.025552, "examples": ["(multlast []) -> []", "(multlast [1]) -> [1]", "(multlast []) -> []", "(multlast [6 6]) -> [6 6]", "(multlast [5 0 5]) -> [5 5 5]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)"}
{"time": 0.847697, "examples": ["(multlast []) -> []", "(multlast [6 1 6 5]) -> [5 5 5 5]", "(multlast [6 3 3 9]) -> [9 9 9 9]", "(multlast [0 3 5]) -> [5 5 5]", "(multlast [5 7 3]) -> [3 3 3]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.883631, "examples": ["(multlast []) -> []", "(multlast [6 6]) -> [6 6]", "(multlast [2 4]) -> [4 4]", "(multlast [9 7 3 7]) -> [7 7 7 7]", "(multlast [9 8 6 8 3]) -> [3 3 3 3 3]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.725325, "examples": ["(multlast []) -> []", "(multlast [7 0 6 7 0]) -> [0 0 0 0 0]", "(multlast [7 0 4]) -> [4 4 4]", "(multlast [1 4 2 8 0]) -> [0 0 0 0 0]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.16391, "examples": ["(multlast []) -> []", "(multlast [6 5]) -> [5 5]", "(multlast [2]) -> [2]", "(multlast [5]) -> [5]", "(multlast [5]) -> [5]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) b)) _) _)"}
{"time": 0.804275, "examples": ["(multlast []) -> []", "(multlast [3 4]) -> [4 4]", "(multlast [4]) -> [4]", "(multlast [6 0 1]) -> [1 1 1]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.825096, "examples": ["(multlast []) -> []", "(multlast [6 9 6 9]) -> [9 9 9 9]", "(multlast [2]) -> [2]", "(multlast [0 7 0 9]) -> [9 9 9 9]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.571994, "examples": ["(multlast []) -> []", "(multlast [1]) -> [1]", "(multlast [0 7 8]) -> [8 8 8]", "(multlast [8 4 4 7 0]) -> [0 0 0 0 0]", "(multlast [8 3]) -> [3 3]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.591897, "examples": ["(multlast []) -> []", "(multlast [0 4 3]) -> [3 3 3]", "(multlast [5]) -> [5]", "(multlast [0 1 6 8 2]) -> [2 2 2 2 2]", "(multlast [3 4 4 9]) -> [9 9 9 9]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.805477, "examples": ["(multlast []) -> []", "(multlast [5 3]) -> [3 3]", "(multlast [9 7 1 7 3]) -> [3 3 3 3 3]", "(multlast [2]) -> [2]", "(multlast [8]) -> [8]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.838624, "examples": ["(multlast []) -> []", "(multlast [4 7 4 2]) -> [2 2 2 2]", "(multlast [1 6 8 1]) -> [1 1 1 1]", "(multlast [0]) -> [0]", "(multlast [5 7 1 8 7]) -> [7 7 7 7 7]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.612491, "examples": ["(multlast []) -> []", "(multlast [6 0 8]) -> [8 8 8]", "(multlast [6 6]) -> [6 6]", "(multlast [8]) -> [8]", "(multlast [6 6]) -> [6 6]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.546485, "examples": ["(multlast []) -> []", "(multlast [3 4 4 4 2]) -> [2 2 2 2 2]", "(multlast [2 9 8 4]) -> [4 4 4 4]", "(multlast []) -> []", "(multlast [0 5 5 7]) -> [7 7 7 7]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.898071, "examples": ["(multlast []) -> []", "(multlast [2 6 4]) -> [4 4 4]", "(multlast [2 3 9]) -> [9 9 9]", "(multlast [8]) -> [8]", "(multlast [2 1 5 7]) -> [7 7 7 7]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.222307, "examples": ["(multlast []) -> []", "(multlast [0 3]) -> [3 3]", "(multlast []) -> []", "(multlast [6]) -> [6]", "(multlast [5 9]) -> [9 9]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) b)) _) _)"}
{"time": 0.850763, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [7 1 2 8]) -> [8 8 8 8]", "(multlast [6]) -> [6]", "(multlast [3 6 0]) -> [0 0 0]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.852792, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [8 0 3 5 6]) -> [6 6 6 6 6]", "(multlast [2 9 5 1]) -> [1 1 1 1]", "(multlast [5 9]) -> [9 9]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.869581, "examples": ["(multlast []) -> []", "(multlast [9 7 4 4 2]) -> [2 2 2 2 2]", "(multlast [5 3 2 4]) -> [4 4 4 4]", "(multlast [7 8 2]) -> [2 2 2]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.775291, "examples": ["(multlast []) -> []", "(multlast [5]) -> [5]", "(multlast [3 3 2 4 1]) -> [1 1 1 1 1]", "(multlast [3 2 5 3 1]) -> [1 1 1 1 1]", "(multlast [5 0 5]) -> [5 5 5]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.683787, "examples": ["(multlast []) -> []", "(multlast [1 6 8 6]) -> [6 6 6 6]", "(multlast [5 0 9 4 7]) -> [7 7 7 7 7]", "(multlast []) -> []", "(multlast [3 2 0 9]) -> [9 9 9 9]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.353335, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [0 1 8 5]) -> [5 5 5 5]", "(multlast [1 6 5 4]) -> [4 4 4 4]", "(multlast [3 1 3 2]) -> [2 2 2 2]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr (cdr (cdr b))))))) _) _)"}
{"time": 0.56542, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [7 0]) -> [0 0]", "(multlast [0 5 4]) -> [4 4 4]", "(multlast [8 9 3 3]) -> [3 3 3 3]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.476869, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [8 7 9 8]) -> [8 8 8 8]", "(multlast [0 3 7 5]) -> [5 5 5 5]", "(multlast [6 4]) -> [4 4]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.908236, "examples": ["(multlast []) -> []", "(multlast [9 8]) -> [8 8]", "(multlast []) -> []", "(multlast [3 7 5 5 4]) -> [4 4 4 4 4]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.448749, "examples": ["(multlast []) -> []", "(multlast [2 1]) -> [1 1]", "(multlast [0 6 6 4]) -> [4 4 4 4]", "(multlast [2 9]) -> [9 9]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.560703, "examples": ["(multlast []) -> []", "(multlast [0 3]) -> [3 3]", "(multlast [5 0 6 3]) -> [3 3 3 3]", "(multlast [8]) -> [8]", "(multlast [7 5]) -> [5 5]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.87145, "examples": ["(multlast []) -> []", "(multlast [0 0 1 2]) -> [2 2 2 2]", "(multlast [4]) -> [4]", "(multlast [4]) -> [4]", "(multlast [5]) -> [5]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.362202, "examples": ["(multlast []) -> []", "(multlast [6 6]) -> [6 6]", "(multlast [1 8]) -> [8 8]", "(multlast [9]) -> [9]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) b)) _) _)"}
{"time": 0.455791, "examples": ["(multlast []) -> []", "(multlast [1]) -> [1]", "(multlast [8 7]) -> [7 7]", "(multlast [1 5 1 8]) -> [8 8 8 8]", "(multlast [1 8 5 4]) -> [4 4 4 4]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.14853, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [6 1 7 2]) -> [2 2 2 2]", "(multlast [7 5 5]) -> [5 5 5]", "(multlast [2 6 0]) -> [0 0 0]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.036146, "examples": ["(multlast []) -> []", "(multlast [4 0]) -> [0 0]", "(multlast [4 2 5 8]) -> [8 8 8 8]", "(multlast []) -> []", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.142028, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [2 2 9 6 9]) -> [9 9 9 9 9]", "(multlast [9 4 4]) -> [4 4 4]", "(multlast [3]) -> [3]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.124326, "examples": ["(multlast []) -> []", "(multlast [8]) -> [8]", "(multlast []) -> []", "(multlast [9 4]) -> [4 4]", "(multlast [0]) -> [0]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) b)) _) _)"}
{"time": 0.24297, "examples": ["(multlast []) -> []", "(multlast [1 9 2]) -> [2 2 2]", "(multlast [3 8 9]) -> [9 9 9]", "(multlast [2 0 9]) -> [9 9 9]", "(multlast [1 4 6]) -> [6 6 6]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr (cdr b)))))) _) _)"}
{"time": 1.050475, "examples": ["(multlast []) -> []", "(multlast [7 7 6 4 1]) -> [1 1 1 1 1]", "(multlast [0 0]) -> [0 0]", "(multlast [5 2]) -> [2 2]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.083688, "examples": ["(multlast []) -> []", "(multlast [6 8 9 5 9]) -> [9 9 9 9 9]", "(multlast []) -> []", "(multlast [7]) -> [7]", "(multlast [9 5]) -> [5 5]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.518508, "examples": ["(multlast []) -> []", "(multlast [0 8 6]) -> [6 6 6]", "(multlast [4 5]) -> [5 5]", "(multlast [4 6]) -> [6 6]", "(multlast [6 0]) -> [0 0]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.1148, "examples": ["(multlast []) -> []", "(multlast [2]) -> [2]", "(multlast [7 4]) -> [4 4]", "(multlast [3 2 7]) -> [7 7 7]", "(multlast [9 6 0]) -> [0 0 0]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.173738, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [8 3 2]) -> [2 2 2]", "(multlast [3 0 2]) -> [2 2 2]", "(multlast [4 8 6]) -> [6 6 6]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr (cdr b)))))) _) _)"}
{"time": 1.158853, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [7]) -> [7]", "(multlast [5 1 8 6 7]) -> [7 7 7 7 7]", "(multlast [2 8 7 9 7]) -> [7 7 7 7 7]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.055708, "examples": ["(multlast []) -> []", "(multlast [9 8 0]) -> [0 0 0]", "(multlast [4 2]) -> [2 2]", "(multlast [6 4 9]) -> [9 9 9]", "(multlast [7 1 2 0 6]) -> [6 6 6 6 6]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.867614, "examples": ["(multlast []) -> []", "(multlast [9]) -> [9]", "(multlast [8 2 3 6 9]) -> [9 9 9 9 9]", "(multlast [9 1 5]) -> [5 5 5]", "(multlast [0 0 9 9]) -> [9 9 9 9]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.586309, "examples": ["(multlast []) -> []", "(multlast [5]) -> [5]", "(multlast [9 8 0 7 2]) -> [2 2 2 2 2]", "(multlast [1 3 5]) -> [5 5 5]", "(multlast [0 5 6]) -> [6 6 6]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.831514, "examples": ["(multlast []) -> []", "(multlast [5 5 4]) -> [4 4 4]", "(multlast [8]) -> [8]", "(multlast []) -> []", "(multlast [3 2]) -> [2 2]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.855154, "examples": ["(multlast []) -> []", "(multlast [5 8 4 5]) -> [5 5 5 5]", "(multlast [9 3 4]) -> [4 4 4]", "(multlast [5 6 4]) -> [4 4 4]", "(multlast [1 8 8 8 1]) -> [1 1 1 1 1]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.899948, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [3 2 0]) -> [0 0 0]", "(multlast [8 4]) -> [4 4]", "(multlast [0 5]) -> [5 5]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
