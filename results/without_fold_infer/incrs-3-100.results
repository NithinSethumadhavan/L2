{"solution": "(let incrs (let a (lambda (b) []) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []"], "name": "incrs", "time": 0.000609}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (cons 1 (cons 1 []))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[0 0]]) -> [[1 1]]"], "name": "incrs", "time": 0.274691}
{"solution": "(let incrs (let a (lambda (b) b) _) _)", "examples": ["(incrs []) -> []", "(incrs [[] []]) -> [[] []]"], "name": "incrs", "time": 0.000668}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[3 5 8 2]]) -> [[4 6 9 3]]"], "name": "incrs", "time": 0.955824}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[6 7 0 1] [9] [8]]) -> [[7 8 1 2] [10] [9]]"], "name": "incrs", "time": 0.95417}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[8 3 9 2 2] [4 9] [0 5 3 9] [0]]) -> [[9 4 10 3 3] [5 10] [1 6 4 10] [1]]"], "name": "incrs", "time": 0.968416}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[8 8] [6 9] [7 4 3] []]) -> [[9 9] [7 10] [8 5 4] []]"], "name": "incrs", "time": 1.007283}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[9 0] [5 1] [4 6 5 5 8]]) -> [[10 1] [6 2] [5 7 6 6 9]]"], "name": "incrs", "time": 1.00997}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[9] []]) -> [[10] []]"], "name": "incrs", "time": 1.013764}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[3] [8 5] [0 1 3 0] [8 1 9]]) -> [[4] [9 6] [1 2 4 1] [9 2 10]]"], "name": "incrs", "time": 1.070481}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[8] [7 6 0] [3 8]]) -> [[9] [8 7 1] [4 9]]"], "name": "incrs", "time": 1.062037}
{"solution": "(let incrs (let a (lambda (b) []) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []"], "name": "incrs", "time": 0.000351}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[3 1 2 1] [8 1 1 4 6] [8 7 7 2] [0 3] [4 3 4 8]]) -> [[4 2 3 2] [9 2 2 5 7] [9 8 8 3] [1 4] [5 4 5 9]]"], "name": "incrs", "time": 1.115833}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[3 2] [9 1 1 9 1] [2 6 6] [9 8 7]]) -> [[4 3] [10 2 2 10 2] [3 7 7] [10 9 8]]"], "name": "incrs", "time": 1.067967}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[9 4 5 8 0]]) -> [[10 5 6 9 1]]"], "name": "incrs", "time": 1.079242}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[0 3 3] [2 6 7]]) -> [[1 4 4] [3 7 8]]"], "name": "incrs", "time": 1.057078}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[] [3] [8 2 6 5 7] [] [4 0 5]]) -> [[] [4] [9 3 7 6 8] [] [5 1 6]]"], "name": "incrs", "time": 0.916169}
{"solution": "(let incrs (let a (lambda (b) b) _) _)", "examples": ["(incrs []) -> []", "(incrs [[]]) -> [[]]"], "name": "incrs", "time": 0.000379}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[9] [1 0] [1] [6 9]]) -> [[10] [2 1] [2] [7 10]]"], "name": "incrs", "time": 1.068819}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[8 5 2 1 4] [4] [8 8] [2 5 2]]) -> [[9 6 3 2 5] [5] [9 9] [3 6 3]]"], "name": "incrs", "time": 1.144783}
{"solution": "(let incrs (let a (lambda (b) []) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []"], "name": "incrs", "time": 0.000555}
{"solution": "(let incrs (let a (lambda (b) []) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []"], "name": "incrs", "time": 0.000797}
{"solution": "(let incrs (let a (lambda (b) []) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []"], "name": "incrs", "time": 0.000503}
{"solution": "(let incrs (let a (lambda (b) []) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []"], "name": "incrs", "time": 0.000312}
{"solution": "(let incrs (let a (lambda (b) []) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []"], "name": "incrs", "time": 0.000496}
{"solution": "(let incrs (let a (lambda (b) []) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []"], "name": "incrs", "time": 0.000554}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[6 6 2 3] [0 5 2 2]]) -> [[7 7 3 4] [1 6 3 3]]"], "name": "incrs", "time": 0.998867}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[0 1 0] [8 1 1 8 7]]) -> [[1 2 1] [9 2 2 9 8]]"], "name": "incrs", "time": 0.764951}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[] [1 0] [0 9 4]]) -> [[] [2 1] [1 10 5]]"], "name": "incrs", "time": 0.818292}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[4 8 0 9 8] [] [] [2 9 5] [5 3]]) -> [[5 9 1 10 9] [] [] [3 10 6] [6 4]]"], "name": "incrs", "time": 0.811002}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[4 9 5 8 9] [2] [1 1 9] [5 2 1 5] [5 1]]) -> [[5 10 6 9 10] [3] [2 2 10] [6 3 2 6] [6 2]]"], "name": "incrs", "time": 0.792993}
{"solution": "(let incrs (let a (lambda (b) []) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []"], "name": "incrs", "time": 0.000634}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[] [6]]) -> [[] [7]]"], "name": "incrs", "time": 0.833549}
{"solution": "(let incrs (let a (lambda (b) []) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []"], "name": "incrs", "time": 0.000601}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[3 6 5] [4 4 5 0 0] []]) -> [[4 7 6] [5 5 6 1 1] []]"], "name": "incrs", "time": 0.789581}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[] [7] [7 6 5 9 6] [1]]) -> [[] [8] [8 7 6 10 7] [2]]"], "name": "incrs", "time": 0.952595}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[9 6 6]]) -> [[10 7 7]]"], "name": "incrs", "time": 0.987369}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[0 3 4]]) -> [[1 4 5]]"], "name": "incrs", "time": 0.931838}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[5 2 6] [8 0] []]) -> [[6 3 7] [9 1] []]"], "name": "incrs", "time": 1.043634}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[2] [7 0 0 1] [0] [6 7 6 0 9]]) -> [[3] [8 1 1 2] [1] [7 8 7 1 10]]"], "name": "incrs", "time": 1.11446}
{"solution": "(let incrs (let a (lambda (b) []) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []"], "name": "incrs", "time": 0.000628}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[1 7 9] [0 5] [8 9] [4 5 4]]) -> [[2 8 10] [1 6] [9 10] [5 6 5]]"], "name": "incrs", "time": 1.120231}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[1 2 2 1]]) -> [[2 3 3 2]]"], "name": "incrs", "time": 1.109514}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[5] [1 9 8 9] [1] [2]]) -> [[6] [2 10 9 10] [2] [3]]"], "name": "incrs", "time": 1.143153}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[2 0 0] [2 0 0]]) -> [[3 1 1] [3 1 1]]"], "name": "incrs", "time": 0.539583}
{"solution": "(let incrs (let a (lambda (b) []) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []"], "name": "incrs", "time": 0.000576}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[9 0 2] [5 8] [1 8 6]]) -> [[10 1 3] [6 9] [2 9 7]]"], "name": "incrs", "time": 1.093471}
{"solution": "(let incrs (let a (lambda (b) []) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []"], "name": "incrs", "time": 0.000598}
