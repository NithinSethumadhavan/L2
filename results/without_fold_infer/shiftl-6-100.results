{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [5]) -> [5]", "(shiftl [9 5 3]) -> [5 3 9]", "(shiftl [0 7]) -> [7 0]", "(shiftl [1 8]) -> [8 1]", "(shiftl [7]) -> [7]"], "time": 0.479253}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [8 3]) -> [3 8]", "(shiftl [8 7 7]) -> [7 7 8]", "(shiftl [0 7 7 7]) -> [7 7 7 0]", "(shiftl [5 5]) -> [5 5]", "(shiftl [3 6 8]) -> [6 8 3]"], "time": 0.586189}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [7 4 2]) -> [4 2 7]", "(shiftl [6]) -> [6]", "(shiftl [9 8]) -> [8 9]", "(shiftl [8 1]) -> [1 8]", "(shiftl [3 9 0 0]) -> [9 0 0 3]"], "time": 0.56474}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (reverse b)) _) _)", "examples": ["(shiftl [1]) -> [1]", "(shiftl [4 2]) -> [2 4]", "(shiftl [7 2]) -> [2 7]", "(shiftl [7]) -> [7]", "(shiftl [3]) -> [3]"], "time": 0.001891}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2]) -> [2]", "(shiftl [4 3 1 5 9]) -> [3 1 5 9 4]", "(shiftl [3 1]) -> [1 3]", "(shiftl [9 2 2 2 5]) -> [2 2 2 5 9]", "(shiftl [7 4 8]) -> [4 8 7]"], "time": 2.067362}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [4 7 5 0]) -> [7 5 0 4]", "(shiftl [0]) -> [0]", "(shiftl [4 8 0 8]) -> [8 0 8 4]", "(shiftl [6]) -> [6]", "(shiftl [3]) -> [3]"], "time": 2.153324}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [4 5]) -> [5 4]", "(shiftl [1 9 6 0]) -> [9 6 0 1]", "(shiftl [3 6 0 6 7]) -> [6 0 6 7 3]", "(shiftl [2 5 9]) -> [5 9 2]", "(shiftl [3 4 5 1]) -> [4 5 1 3]"], "time": 2.117943}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9]) -> [9]", "(shiftl [1 1 3 9]) -> [1 3 9 1]", "(shiftl [5 9]) -> [9 5]", "(shiftl [5 3 5]) -> [3 5 5]", "(shiftl [7 3 3 0]) -> [3 3 0 7]"], "time": 2.266912}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 3 7 7 4]) -> [3 7 7 4 1]", "(shiftl [2]) -> [2]", "(shiftl [1 1]) -> [1 1]", "(shiftl [4 1 0 0 3]) -> [1 0 0 3 4]", "(shiftl [4 2]) -> [2 4]"], "time": 2.281961}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [4 9]) -> [9 4]", "(shiftl [3 6 0]) -> [6 0 3]", "(shiftl [1 6 3 3 5]) -> [6 3 3 5 1]", "(shiftl [1 1 4]) -> [1 4 1]", "(shiftl [4]) -> [4]"], "time": 2.371357}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 8 4]) -> [8 4 8]", "(shiftl [0 1 1 6]) -> [1 1 6 0]", "(shiftl [1 9 0]) -> [9 0 1]", "(shiftl [2 2 7]) -> [2 7 2]", "(shiftl [0 6 1 2 7]) -> [6 1 2 7 0]"], "time": 2.430292}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 2 0 9 7]) -> [2 0 9 7 5]", "(shiftl [0 9 6]) -> [9 6 0]", "(shiftl [3 4]) -> [4 3]", "(shiftl [4 2 4 6 7]) -> [2 4 6 7 4]", "(shiftl [5]) -> [5]"], "time": 2.472379}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 8 1 0]) -> [8 1 0 5]", "(shiftl [0 0 1]) -> [0 1 0]", "(shiftl [5 5 9 1]) -> [5 9 1 5]", "(shiftl [1 8 2]) -> [8 2 1]", "(shiftl [2 9 3 1 6]) -> [9 3 1 6 2]"], "time": 2.492732}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 0 6 1]) -> [0 6 1 1]", "(shiftl [7 3 0 1]) -> [3 0 1 7]", "(shiftl [7 8]) -> [8 7]", "(shiftl [8 5 9 5 5]) -> [5 9 5 5 8]", "(shiftl [4 0 2 7]) -> [0 2 7 4]"], "time": 2.515085}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 5 4 5 5]) -> [5 4 5 5 2]", "(shiftl [8]) -> [8]", "(shiftl [9]) -> [9]", "(shiftl [1 9 5 0]) -> [9 5 0 1]", "(shiftl [8 6 6]) -> [6 6 8]"], "time": 2.519069}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 3 9 0 6]) -> [3 9 0 6 9]", "(shiftl [9]) -> [9]", "(shiftl [4 1 7 1]) -> [1 7 1 4]", "(shiftl [4 5 2]) -> [5 2 4]", "(shiftl [6 4]) -> [4 6]"], "time": 2.739635}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 4 4 4 0]) -> [4 4 4 0 7]", "(shiftl [8 7 2 0 3]) -> [7 2 0 3 8]", "(shiftl [4]) -> [4]", "(shiftl [8 3]) -> [3 8]", "(shiftl [2 0]) -> [0 2]"], "time": 2.713079}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 1 1]) -> [1 1 3]", "(shiftl [2 9 3]) -> [9 3 2]", "(shiftl [6 3 7 0 8]) -> [3 7 0 8 6]", "(shiftl [3]) -> [3]", "(shiftl [1 9]) -> [9 1]"], "time": 2.479533}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 5 2 5 8]) -> [5 2 5 8 1]", "(shiftl [1]) -> [1]", "(shiftl [9 8 5 5 5]) -> [8 5 5 5 9]", "(shiftl [7 0]) -> [0 7]", "(shiftl [8 0]) -> [0 8]"], "time": 2.301824}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 2 6]) -> [2 6 7]", "(shiftl [4]) -> [4]", "(shiftl [1 5 2]) -> [5 2 1]", "(shiftl [6 8 7 0]) -> [8 7 0 6]", "(shiftl [0 2 8]) -> [2 8 0]"], "time": 2.504678}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [9]) -> [9]", "(shiftl [1]) -> [1]", "(shiftl [8 7]) -> [7 8]", "(shiftl [5 5]) -> [5 5]", "(shiftl [8 0 5]) -> [0 5 8]"], "time": 0.533331}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 7]) -> [7 1]", "(shiftl [0 6 6 4 0]) -> [6 6 4 0 0]", "(shiftl [9 9]) -> [9 9]", "(shiftl [1 3 5 0 2]) -> [3 5 0 2 1]", "(shiftl [9 4 7 4 3]) -> [4 7 4 3 9]"], "time": 1.896204}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 6]) -> [6 8]", "(shiftl [1 2 7 0 1]) -> [2 7 0 1 1]", "(shiftl [0 1 9 9 4]) -> [1 9 9 4 0]", "(shiftl [7 3]) -> [3 7]", "(shiftl [5 8 1 5]) -> [8 1 5 5]"], "time": 1.879833}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 7 2 2]) -> [7 2 2 8]", "(shiftl [7 8 1 2 4]) -> [8 1 2 4 7]", "(shiftl [4 9 1 7]) -> [9 1 7 4]", "(shiftl [5 3 0 2 9]) -> [3 0 2 9 5]", "(shiftl [1]) -> [1]"], "time": 1.917369}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 9 4]) -> [9 4 2]", "(shiftl [0 2 9 1 7]) -> [2 9 1 7 0]", "(shiftl [2 0 3 2]) -> [0 3 2 2]", "(shiftl [5 1]) -> [1 5]", "(shiftl [2]) -> [2]"], "time": 1.947841}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0]) -> [0]", "(shiftl [1 5 2 1]) -> [5 2 1 1]", "(shiftl [0]) -> [0]", "(shiftl [4]) -> [4]", "(shiftl [1 9 3 8 9]) -> [9 3 8 9 1]"], "time": 2.248187}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 6 6 3]) -> [6 6 3 1]", "(shiftl [1 4 0 6]) -> [4 0 6 1]", "(shiftl [1 4 6 5 2]) -> [4 6 5 2 1]", "(shiftl [7]) -> [7]", "(shiftl [3 9 2]) -> [9 2 3]"], "time": 2.383336}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2]) -> [2]", "(shiftl [4]) -> [4]", "(shiftl [9 3 1 1 8]) -> [3 1 1 8 9]", "(shiftl [6 8]) -> [8 6]", "(shiftl [6 7]) -> [7 6]"], "time": 2.475005}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 2 2 8 6]) -> [2 2 8 6 5]", "(shiftl [6]) -> [6]", "(shiftl [7 7 0 3]) -> [7 0 3 7]", "(shiftl [0 9 6 7 1]) -> [9 6 7 1 0]", "(shiftl [0 4 0 1 2]) -> [4 0 1 2 0]"], "time": 2.682733}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 7 0 6 7]) -> [7 0 6 7 9]", "(shiftl [7 8 2 6 2]) -> [8 2 6 2 7]", "(shiftl [3 7]) -> [7 3]", "(shiftl [3 3 9]) -> [3 9 3]", "(shiftl [9 4 2 0]) -> [4 2 0 9]"], "time": 2.350132}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6 2 5 6 3]) -> [2 5 6 3 6]", "(shiftl [3]) -> [3]", "(shiftl [1 2 3]) -> [2 3 1]", "(shiftl [6 8 3 7 7]) -> [8 3 7 7 6]", "(shiftl [5 7 0 2]) -> [7 0 2 5]"], "time": 2.177908}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 1 0]) -> [1 0 9]", "(shiftl [2 7]) -> [7 2]", "(shiftl [2 7 0 7]) -> [7 0 7 2]", "(shiftl [4 1 4 1 7]) -> [1 4 1 7 4]", "(shiftl [1 6 0]) -> [6 0 1]"], "time": 2.355362}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [5 6]) -> [6 5]", "(shiftl [5 6 4]) -> [6 4 5]", "(shiftl [5]) -> [5]", "(shiftl [1 1 3]) -> [1 3 1]", "(shiftl [0]) -> [0]"], "time": 0.385734}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [4 2 5 6]) -> [2 5 6 4]", "(shiftl [9 0 2 6 8]) -> [0 2 6 8 9]", "(shiftl [2 5 4]) -> [5 4 2]", "(shiftl [5]) -> [5]", "(shiftl [9]) -> [9]"], "time": 2.765832}
{"name": "shiftl", "examples": ["(shiftl [8]) -> [8]", "(shiftl [5 2 7 4]) -> [2 7 4 5]", "(shiftl [5 4 9]) -> [4 9 5]", "(shiftl [0 0]) -> [0 0]", "(shiftl [5]) -> [5]"], "time": "timeout"}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (reverse b)) _) _)", "examples": ["(shiftl [9 0]) -> [0 9]", "(shiftl [1]) -> [1]", "(shiftl [0]) -> [0]", "(shiftl [7 7 0 7]) -> [7 0 7 7]", "(shiftl [4]) -> [4]"], "time": 0.001241}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [4 2 7 2 4]) -> [2 7 2 4 4]", "(shiftl [6 1 9 3]) -> [1 9 3 6]", "(shiftl [0 1 1 4 9]) -> [1 1 4 9 0]", "(shiftl [4 8]) -> [8 4]", "(shiftl [4 9 5 8 7]) -> [9 5 8 7 4]"], "time": 2.380206}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 5 3 9 0]) -> [5 3 9 0 1]", "(shiftl [1 8 5 6 0]) -> [8 5 6 0 1]", "(shiftl [0 0 1]) -> [0 1 0]", "(shiftl [5 1 1 7]) -> [1 1 7 5]", "(shiftl [8 2]) -> [2 8]"], "time": 2.377734}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0 9 4 8 6]) -> [9 4 8 6 0]", "(shiftl [4 6]) -> [6 4]", "(shiftl [6 1 1]) -> [1 1 6]", "(shiftl [2 7 8]) -> [7 8 2]", "(shiftl [5 3 1 4]) -> [3 1 4 5]"], "time": 1.72275}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [3 8]) -> [8 3]", "(shiftl [1 8]) -> [8 1]", "(shiftl [1 7 1]) -> [7 1 1]", "(shiftl [3 5 0]) -> [5 0 3]", "(shiftl [4]) -> [4]"], "time": 0.659375}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [4 8 1 6 2]) -> [8 1 6 2 4]", "(shiftl [8 5 6]) -> [5 6 8]", "(shiftl [1 5 1]) -> [5 1 1]", "(shiftl [0]) -> [0]", "(shiftl [8]) -> [8]"], "time": 2.549137}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 7 9]) -> [7 9 9]", "(shiftl [5 9 8 4]) -> [9 8 4 5]", "(shiftl [6]) -> [6]", "(shiftl [2 2 8 6 9]) -> [2 8 6 9 2]", "(shiftl [5 5]) -> [5 5]"], "time": 1.691089}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 6 8 2]) -> [6 8 2 9]", "(shiftl [9]) -> [9]", "(shiftl [8 8]) -> [8 8]", "(shiftl [6 6 6 5 2]) -> [6 6 5 2 6]", "(shiftl [1]) -> [1]"], "time": 1.738314}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6]) -> [6]", "(shiftl [4 7]) -> [7 4]", "(shiftl [0 6 1 8 3]) -> [6 1 8 3 0]", "(shiftl [7 6]) -> [6 7]", "(shiftl [1 9]) -> [9 1]"], "time": 2.539519}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [4]) -> [4]", "(shiftl [4 0 3 4 6]) -> [0 3 4 6 4]", "(shiftl [7 8 5 1 3]) -> [8 5 1 3 7]", "(shiftl [3 2 8]) -> [2 8 3]", "(shiftl [7 9 6 8]) -> [9 6 8 7]"], "time": 1.534143}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 5 4 2 8]) -> [5 4 2 8 7]", "(shiftl [7 9 5 9 1]) -> [9 5 9 1 7]", "(shiftl [1 2 3 8 6]) -> [2 3 8 6 1]", "(shiftl [3 0 8]) -> [0 8 3]", "(shiftl [6 3 4 1 1]) -> [3 4 1 1 6]"], "time": 1.584719}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 8 1 7 2]) -> [8 1 7 2 1]", "(shiftl [7 2 9 2]) -> [2 9 2 7]", "(shiftl [9]) -> [9]", "(shiftl [2 8 3 9 2]) -> [8 3 9 2 2]", "(shiftl [9 2]) -> [2 9]"], "time": 3.087084}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 4 7 9]) -> [4 7 9 5]", "(shiftl [2]) -> [2]", "(shiftl [0 5]) -> [5 0]", "(shiftl [7 3]) -> [3 7]", "(shiftl [6 7 2 8]) -> [7 2 8 6]"], "time": 1.487884}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 1 0 3 7]) -> [1 0 3 7 3]", "(shiftl [7 5]) -> [5 7]", "(shiftl [7 9 8 7]) -> [9 8 7 7]", "(shiftl [0 3 7]) -> [3 7 0]", "(shiftl [1 8 0 3]) -> [8 0 3 1]"], "time": 2.673234}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6 5 6 0]) -> [5 6 0 6]", "(shiftl [0 9 5]) -> [9 5 0]", "(shiftl [8 7]) -> [7 8]", "(shiftl [4 5 5 5]) -> [5 5 5 4]", "(shiftl [6 2 4]) -> [2 4 6]"], "time": 2.602821}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1]) -> [1]", "(shiftl [2 3]) -> [3 2]", "(shiftl [5 3 8 6 0]) -> [3 8 6 0 5]", "(shiftl [2 6 3 7]) -> [6 3 7 2]", "(shiftl [3 4 1 0]) -> [4 1 0 3]"], "time": 3.225606}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 0 3 5]) -> [0 3 5 2]", "(shiftl [5 8]) -> [8 5]", "(shiftl [0 1 8 8]) -> [1 8 8 0]", "(shiftl [4 0]) -> [0 4]", "(shiftl [9 3]) -> [3 9]"], "time": 1.43555}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 0 6 5 9]) -> [0 6 5 9 7]", "(shiftl [0]) -> [0]", "(shiftl [9 5 7 5]) -> [5 7 5 9]", "(shiftl [9 2]) -> [2 9]", "(shiftl [6]) -> [6]"], "time": 3.369856}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 5 4 9]) -> [5 4 9 2]", "(shiftl [5 5 7 8 9]) -> [5 7 8 9 5]", "(shiftl [7 0 7]) -> [0 7 7]", "(shiftl [5 0 8]) -> [0 8 5]", "(shiftl [4]) -> [4]"], "time": 2.655707}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 5]) -> [5 2]", "(shiftl [0 3 2 1 5]) -> [3 2 1 5 0]", "(shiftl [5 7]) -> [7 5]", "(shiftl [8]) -> [8]", "(shiftl [8 9 3 5 3]) -> [9 3 5 3 8]"], "time": 2.92758}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 0 5]) -> [0 5 9]", "(shiftl [6 8 3 6 0]) -> [8 3 6 0 6]", "(shiftl [4 7 6 0]) -> [7 6 0 4]", "(shiftl [1 5 9]) -> [5 9 1]", "(shiftl [9 4]) -> [4 9]"], "time": 2.545249}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9]) -> [9]", "(shiftl [9 1 4 7 1]) -> [1 4 7 1 9]", "(shiftl [0 7 9]) -> [7 9 0]", "(shiftl [1 2]) -> [2 1]", "(shiftl [9 2 1 7 0]) -> [2 1 7 0 9]"], "time": 2.752672}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 7 7 5 2]) -> [7 7 5 2 3]", "(shiftl [8 2]) -> [2 8]", "(shiftl [9 7 1]) -> [7 1 9]", "(shiftl [7]) -> [7]", "(shiftl [5 2 0]) -> [2 0 5]"], "time": 1.983249}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (reverse b)) _) _)", "examples": ["(shiftl [5]) -> [5]", "(shiftl [8 7]) -> [7 8]", "(shiftl [6 7]) -> [7 6]", "(shiftl [8]) -> [8]", "(shiftl [6]) -> [6]"], "time": 0.001966}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [7 7]) -> [7 7]", "(shiftl [3]) -> [3]", "(shiftl [2 3 0]) -> [3 0 2]", "(shiftl [0 9 7]) -> [9 7 0]", "(shiftl [2 0 9]) -> [0 9 2]"], "time": 0.412999}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 1 2 7]) -> [1 2 7 8]", "(shiftl [2 8 3 4 4]) -> [8 3 4 4 2]", "(shiftl [2 9 1 7 6]) -> [9 1 7 6 2]", "(shiftl [8 7 3]) -> [7 3 8]", "(shiftl [5 0 0]) -> [0 0 5]"], "time": 1.704575}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 9]) -> [9 7]", "(shiftl [7 3 2 1]) -> [3 2 1 7]", "(shiftl [3]) -> [3]", "(shiftl [6 6 8 6 5]) -> [6 8 6 5 6]", "(shiftl [0 8]) -> [8 0]"], "time": 2.791098}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 4 1 1 5]) -> [4 1 1 5 9]", "(shiftl [0 4 1 5 6]) -> [4 1 5 6 0]", "(shiftl [6 6 4 4]) -> [6 4 4 6]", "(shiftl [5 6 5 1 8]) -> [6 5 1 8 5]", "(shiftl [2]) -> [2]"], "time": 1.667565}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6 1]) -> [1 6]", "(shiftl [3 9 1]) -> [9 1 3]", "(shiftl [5 2 5 5 5]) -> [2 5 5 5 5]", "(shiftl [3 1 9 5]) -> [1 9 5 3]", "(shiftl [0 4 2 6 1]) -> [4 2 6 1 0]"], "time": 2.607687}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 9 7 0]) -> [9 7 0 9]", "(shiftl [1 4]) -> [4 1]", "(shiftl [4 6 6 9 3]) -> [6 6 9 3 4]", "(shiftl [1 7 7]) -> [7 7 1]", "(shiftl [6 2 6 7]) -> [2 6 7 6]"], "time": 2.783731}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 2 5 0]) -> [2 5 0 7]", "(shiftl [0 8 7 6 2]) -> [8 7 6 2 0]", "(shiftl [7 3 3 5]) -> [3 3 5 7]", "(shiftl [1]) -> [1]", "(shiftl [2 6 0 2]) -> [6 0 2 2]"], "time": 2.722547}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 1 8 2 4]) -> [1 8 2 4 5]", "(shiftl [7 7]) -> [7 7]", "(shiftl [3]) -> [3]", "(shiftl [7 6 6 1]) -> [6 6 1 7]", "(shiftl [8 8 1 8]) -> [8 1 8 8]"], "time": 1.833945}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9]) -> [9]", "(shiftl [0 3 3 7 8]) -> [3 3 7 8 0]", "(shiftl [5]) -> [5]", "(shiftl [9 4]) -> [4 9]", "(shiftl [1 0 7 0 5]) -> [0 7 0 5 1]"], "time": 2.713299}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8]) -> [8]", "(shiftl [1]) -> [1]", "(shiftl [7 2 3]) -> [2 3 7]", "(shiftl [2 1 0 9]) -> [1 0 9 2]", "(shiftl [2 9 2]) -> [9 2 2]"], "time": 2.782068}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 1]) -> [1 9]", "(shiftl [6 1 6 9]) -> [1 6 9 6]", "(shiftl [5 8]) -> [8 5]", "(shiftl [8 9 7]) -> [9 7 8]", "(shiftl [4 3 3]) -> [3 3 4]"], "time": 1.574959}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 8]) -> [8 7]", "(shiftl [3 0]) -> [0 3]", "(shiftl [1 7 5 0]) -> [7 5 0 1]", "(shiftl [1 1 7 6 9]) -> [1 7 6 9 1]", "(shiftl [2 1 9 5 0]) -> [1 9 5 0 2]"], "time": 2.159546}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 7]) -> [7 7]", "(shiftl [3 8]) -> [8 3]", "(shiftl [0 0 8 3]) -> [0 8 3 0]", "(shiftl [0 3]) -> [3 0]", "(shiftl [8 2]) -> [2 8]"], "time": 2.395471}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 0 3 0]) -> [0 3 0 8]", "(shiftl [8 4 1 8]) -> [4 1 8 8]", "(shiftl [4]) -> [4]", "(shiftl [7 2 3]) -> [2 3 7]", "(shiftl [9 3]) -> [3 9]"], "time": 1.757122}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 7 0 2 3]) -> [7 0 2 3 2]", "(shiftl [2 8 6 0]) -> [8 6 0 2]", "(shiftl [0 2 8]) -> [2 8 0]", "(shiftl [6 2 2 2]) -> [2 2 2 6]", "(shiftl [2 3 6]) -> [3 6 2]"], "time": 3.069053}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [6 4 2]) -> [4 2 6]", "(shiftl [3 1 7]) -> [1 7 3]", "(shiftl [6 5]) -> [5 6]", "(shiftl [9]) -> [9]", "(shiftl [6 1]) -> [1 6]"], "time": 0.532895}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 0 4 4]) -> [0 4 4 8]", "(shiftl [7 4]) -> [4 7]", "(shiftl [4 2 0 9]) -> [2 0 9 4]", "(shiftl [9]) -> [9]", "(shiftl [5 3 6 4 3]) -> [3 6 4 3 5]"], "time": 1.699683}
{"name": "shiftl", "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7]) -> [7]", "(shiftl [4]) -> [4]", "(shiftl [3 2 7 1 9]) -> [2 7 1 9 3]", "(shiftl [4]) -> [4]", "(shiftl [0 3 5]) -> [3 5 0]"], "time": 2.588954}
