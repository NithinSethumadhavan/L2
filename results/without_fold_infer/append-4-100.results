{"examples": ["(append [] 8) -> [8]", "(append [] 2) -> [2]", "(append [3 3] 3) -> [3 3 3]"], "solution": "(let append (let a (lambda (c b) (cons b c)) _) _)", "name": "append", "time": 0.009211}
{"examples": ["(append [] 1) -> [1]", "(append [] 5) -> [5]", "(append [] 5) -> [5]"], "solution": "(let append (let a (lambda (c b) (cons b [])) _) _)", "name": "append", "time": 0.015925}
{"examples": ["(append [] 0) -> [0]", "(append [] 4) -> [4]", "(append [] 0) -> [0]"], "solution": "(let append (let a (lambda (c b) (cons b [])) _) _)", "name": "append", "time": 0.01084}
{"examples": ["(append [] 2) -> [2]", "(append [6 7 6] 9) -> [6 7 6 9]", "(append [] 5) -> [5]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.897309}
{"examples": ["(append [] 0) -> [0]", "(append [3] 8) -> [3 8]", "(append [6 7 4 0] 1) -> [6 7 4 0 1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.985967}
{"examples": ["(append [] 0) -> [0]", "(append [0] 0) -> [0 0]", "(append [] 5) -> [5]"], "solution": "(let append (let a (lambda (c b) (cons b c)) _) _)", "name": "append", "time": 0.007365}
{"examples": ["(append [] 3) -> [3]", "(append [9 3 2 7] 0) -> [9 3 2 7 0]", "(append [9 9 3 5] 8) -> [9 9 3 5 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.082198}
{"examples": ["(append [] 9) -> [9]", "(append [4 5] 6) -> [4 5 6]", "(append [8 4 0] 8) -> [8 4 0 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.087855}
{"examples": ["(append [] 1) -> [1]", "(append [4 8 9] 4) -> [4 8 9 4]", "(append [1 5 6 6 5] 5) -> [1 5 6 6 5 5]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.047539}
{"examples": ["(append [] 0) -> [0]", "(append [1 7 6] 2) -> [1 7 6 2]", "(append [8 7] 8) -> [8 7 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.142147}
{"examples": ["(append [] 1) -> [1]", "(append [1 8] 7) -> [1 8 7]", "(append [3 0] 8) -> [3 0 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.133684}
{"examples": ["(append [] 0) -> [0]", "(append [5 6 2 9] 7) -> [5 6 2 9 7]", "(append [3 9 3 9 3] 9) -> [3 9 3 9 3 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.133447}
{"examples": ["(append [] 2) -> [2]", "(append [2 6 6 0 4] 6) -> [2 6 6 0 4 6]", "(append [] 1) -> [1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.098929}
{"examples": ["(append [] 6) -> [6]", "(append [2 2 5 2 3] 6) -> [2 2 5 2 3 6]", "(append [9 2 9 6 6] 8) -> [9 2 9 6 6 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.146746}
{"examples": ["(append [] 5) -> [5]", "(append [7 2 8 5] 7) -> [7 2 8 5 7]", "(append [4 5] 0) -> [4 5 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.110986}
{"examples": ["(append [] 8) -> [8]", "(append [5 7 6] 0) -> [5 7 6 0]", "(append [2 2 6 6 5] 9) -> [2 2 6 6 5 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.082766}
{"examples": ["(append [] 9) -> [9]", "(append [3 0 4 0] 6) -> [3 0 4 0 6]", "(append [0 3 0] 0) -> [0 3 0 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.033553}
{"examples": ["(append [] 7) -> [7]", "(append [2 8 7] 1) -> [2 8 7 1]", "(append [3 1 6] 3) -> [3 1 6 3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.904148}
{"examples": ["(append [] 3) -> [3]", "(append [9 4 2 5 6] 0) -> [9 4 2 5 6 0]", "(append [1 1 4 5] 5) -> [1 1 4 5 5]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.926907}
{"examples": ["(append [] 4) -> [4]", "(append [4 3 3 2 6] 7) -> [4 3 3 2 6 7]", "(append [7 3 1 2] 0) -> [7 3 1 2 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.88879}
{"examples": ["(append [] 6) -> [6]", "(append [6] 6) -> [6 6]", "(append [] 0) -> [0]"], "solution": "(let append (let a (lambda (c b) (cons b c)) _) _)", "name": "append", "time": 0.009268}
{"examples": ["(append [] 1) -> [1]", "(append [0] 1) -> [0 1]", "(append [] 9) -> [9]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (cons 0 e)) (cons b []))) _) _)", "name": "append", "time": 0.315107}
{"examples": ["(append [] 3) -> [3]", "(append [3] 6) -> [3 6]", "(append [6] 1) -> [6 1]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.459896}
{"examples": ["(append [] 5) -> [5]", "(append [] 0) -> [0]", "(append [6 8 0 1 7] 1) -> [6 8 0 1 7 1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.519825}
{"examples": ["(append [] 2) -> [2]", "(append [4 1] 5) -> [4 1 5]", "(append [5 9 1 9] 6) -> [5 9 1 9 6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.539098}
{"examples": ["(append [] 9) -> [9]", "(append [9 1 7] 2) -> [9 1 7 2]", "(append [8 4 6 5 3] 8) -> [8 4 6 5 3 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.536207}
{"examples": ["(append [] 5) -> [5]", "(append [4 1 1] 1) -> [4 1 1 1]", "(append [4 2 1 8 5] 2) -> [4 2 1 8 5 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.635395}
{"examples": ["(append [] 9) -> [9]", "(append [7] 8) -> [7 8]", "(append [9 6 1 2] 5) -> [9 6 1 2 5]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.547878}
{"examples": ["(append [] 0) -> [0]", "(append [7 3 3] 4) -> [7 3 3 4]", "(append [9 6 7] 8) -> [9 6 7 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.184961}
{"examples": ["(append [] 8) -> [8]", "(append [9 7] 3) -> [9 7 3]", "(append [1] 2) -> [1 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.137322}
{"examples": ["(append [] 4) -> [4]", "(append [4 5 7 6] 9) -> [4 5 7 6 9]", "(append [] 6) -> [6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.561164}
{"examples": ["(append [] 7) -> [7]", "(append [6] 1) -> [6 1]", "(append [7 6] 6) -> [7 6 6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.241373}
{"examples": ["(append [] 4) -> [4]", "(append [6 7] 9) -> [6 7 9]", "(append [9 1 1 7 8] 9) -> [9 1 1 7 8 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.308204}
{"examples": ["(append [] 7) -> [7]", "(append [] 9) -> [9]", "(append [6] 7) -> [6 7]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.356585}
{"examples": ["(append [] 5) -> [5]", "(append [6 4 4] 9) -> [6 4 4 9]", "(append [7] 0) -> [7 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.351128}
{"examples": ["(append [] 6) -> [6]", "(append [7 0] 9) -> [7 0 9]", "(append [9 4 1] 2) -> [9 4 1 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.255988}
{"examples": ["(append [] 8) -> [8]", "(append [8 5 9 7] 2) -> [8 5 9 7 2]", "(append [0 6 8 6] 5) -> [0 6 8 6 5]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.59008}
{"examples": ["(append [] 6) -> [6]", "(append [8 0 1 2 0] 8) -> [8 0 1 2 0 8]", "(append [] 1) -> [1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.28715}
{"examples": ["(append [] 1) -> [1]", "(append [2 3 2 0 9] 6) -> [2 3 2 0 9 6]", "(append [5 7 9 2 0] 6) -> [5 7 9 2 0 6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.537411}
{"examples": ["(append [] 2) -> [2]", "(append [1 1 4] 0) -> [1 1 4 0]", "(append [7 6 9 8] 2) -> [7 6 9 8 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.26469}
{"examples": ["(append [] 3) -> [3]", "(append [] 2) -> [2]", "(append [1 8 3] 9) -> [1 8 3 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.139226}
{"examples": ["(append [] 5) -> [5]", "(append [4 2] 8) -> [4 2 8]", "(append [9] 0) -> [9 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.07948}
{"examples": ["(append [] 5) -> [5]", "(append [7 7 0] 6) -> [7 7 0 6]", "(append [6 3 8 9] 0) -> [6 3 8 9 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.910833}
{"examples": ["(append [] 7) -> [7]", "(append [3 5 3 5 8] 2) -> [3 5 3 5 8 2]", "(append [5 4 3] 9) -> [5 4 3 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.71019}
{"examples": ["(append [] 4) -> [4]", "(append [7 0 3 7 4] 9) -> [7 0 3 7 4 9]", "(append [5 8] 1) -> [5 8 1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.827086}
{"examples": ["(append [] 7) -> [7]", "(append [6 1 0 8] 1) -> [6 1 0 8 1]", "(append [3 0 8 1 9] 2) -> [3 0 8 1 9 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.724614}
{"examples": ["(append [] 2) -> [2]", "(append [0 8 8 8] 8) -> [0 8 8 8 8]", "(append [6 4 3 2 9] 3) -> [6 4 3 2 9 3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.722041}
{"examples": ["(append [] 7) -> [7]", "(append [0 1 4 3] 4) -> [0 1 4 3 4]", "(append [] 4) -> [4]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.714612}
{"examples": ["(append [] 9) -> [9]", "(append [1] 2) -> [1 2]", "(append [1 9 5 9 9] 6) -> [1 9 5 9 9 6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.680773}
{"examples": ["(append [] 4) -> [4]", "(append [] 4) -> [4]", "(append [9 2 3] 5) -> [9 2 3 5]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.887319}
{"examples": ["(append [] 1) -> [1]", "(append [6 3] 3) -> [6 3 3]", "(append [4 0 5 6] 0) -> [4 0 5 6 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.92872}
{"examples": ["(append [] 4) -> [4]", "(append [8 6] 0) -> [8 6 0]", "(append [] 0) -> [0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.005483}
{"examples": ["(append [] 8) -> [8]", "(append [1 2 8] 5) -> [1 2 8 5]", "(append [] 3) -> [3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.578056}
{"examples": ["(append [] 7) -> [7]", "(append [7 1] 0) -> [7 1 0]", "(append [4 8 7] 1) -> [4 8 7 1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.104636}
{"examples": ["(append [] 9) -> [9]", "(append [1 4 4 7 4] 1) -> [1 4 4 7 4 1]", "(append [5 2 5 3] 7) -> [5 2 5 3 7]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.059889}
{"examples": ["(append [] 7) -> [7]", "(append [3 9] 4) -> [3 9 4]", "(append [] 5) -> [5]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.116167}
{"examples": ["(append [] 9) -> [9]", "(append [0] 9) -> [0 9]", "(append [0 6] 4) -> [0 6 4]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.049648}
{"examples": ["(append [] 6) -> [6]", "(append [6 7 0 0 7] 0) -> [6 7 0 0 7 0]", "(append [] 3) -> [3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.130177}
{"examples": ["(append [] 2) -> [2]", "(append [] 6) -> [6]", "(append [9 6 3] 8) -> [9 6 3 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.966971}
{"examples": ["(append [] 8) -> [8]", "(append [6 8 4 7] 3) -> [6 8 4 7 3]", "(append [4 8 5 8] 9) -> [4 8 5 8 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.579561}
{"examples": ["(append [] 5) -> [5]", "(append [9 2 4 9 9] 8) -> [9 2 4 9 9 8]", "(append [6 2 7 3 9] 7) -> [6 2 7 3 9 7]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.640405}
{"examples": ["(append [] 8) -> [8]", "(append [5 2 3] 0) -> [5 2 3 0]", "(append [] 9) -> [9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.655772}
{"examples": ["(append [] 5) -> [5]", "(append [8 1 2 9] 0) -> [8 1 2 9 0]", "(append [1 9] 5) -> [1 9 5]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.737638}
{"examples": ["(append [] 1) -> [1]", "(append [] 8) -> [8]", "(append [1 8] 5) -> [1 8 5]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.644954}
{"examples": ["(append [] 4) -> [4]", "(append [8 7 3 0 1] 3) -> [8 7 3 0 1 3]", "(append [7 1 8 0] 3) -> [7 1 8 0 3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.605489}
{"examples": ["(append [] 1) -> [1]", "(append [3 5 8 1 1] 0) -> [3 5 8 1 1 0]", "(append [1 6 3] 6) -> [1 6 3 6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.933956}
{"examples": ["(append [] 3) -> [3]", "(append [0 5] 5) -> [0 5 5]", "(append [] 4) -> [4]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.981441}
{"examples": ["(append [] 1) -> [1]", "(append [3 9] 3) -> [3 9 3]", "(append [6 9] 7) -> [6 9 7]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.062365}
{"examples": ["(append [] 8) -> [8]", "(append [8 7] 7) -> [8 7 7]", "(append [7 5 8 7 8] 0) -> [7 5 8 7 8 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.542807}
{"examples": ["(append [] 7) -> [7]", "(append [2 8 3 8] 6) -> [2 8 3 8 6]", "(append [5] 9) -> [5 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.926401}
{"examples": ["(append [] 2) -> [2]", "(append [2] 1) -> [2 1]", "(append [] 8) -> [8]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.724726}
{"examples": ["(append [] 1) -> [1]", "(append [6 6 6 6] 3) -> [6 6 6 6 3]", "(append [0 4 8 3] 5) -> [0 4 8 3 5]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.685163}
{"examples": ["(append [] 8) -> [8]", "(append [8 8 5 5] 1) -> [8 8 5 5 1]", "(append [3 5 2] 0) -> [3 5 2 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.998298}
{"examples": ["(append [] 8) -> [8]", "(append [] 9) -> [9]", "(append [1 2 3 0 9] 3) -> [1 2 3 0 9 3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.002581}
{"examples": ["(append [] 8) -> [8]", "(append [9 2 2 4 1] 1) -> [9 2 2 4 1 1]", "(append [] 6) -> [6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.667727}
{"examples": ["(append [] 7) -> [7]", "(append [7 6] 1) -> [7 6 1]", "(append [5] 9) -> [5 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.70719}
{"examples": ["(append [] 4) -> [4]", "(append [5 8 3 7] 5) -> [5 8 3 7 5]", "(append [2 7 6 1] 3) -> [2 7 6 1 3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.887052}
{"examples": ["(append [] 2) -> [2]", "(append [] 6) -> [6]", "(append [9 8] 6) -> [9 8 6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.845547}
{"examples": ["(append [] 2) -> [2]", "(append [3 9] 5) -> [3 9 5]", "(append [9 7] 8) -> [9 7 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.057923}
{"examples": ["(append [] 4) -> [4]", "(append [8 8 2 6] 1) -> [8 8 2 6 1]", "(append [7 4 6 9 6] 0) -> [7 4 6 9 6 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.073919}
{"examples": ["(append [] 8) -> [8]", "(append [3 2 2] 2) -> [3 2 2 2]", "(append [4 9 8 7 4] 8) -> [4 9 8 7 4 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.879215}
{"examples": ["(append [] 3) -> [3]", "(append [1 0 8] 3) -> [1 0 8 3]", "(append [6 0 9 7] 3) -> [6 0 9 7 3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.932357}
{"examples": ["(append [] 1) -> [1]", "(append [4] 6) -> [4 6]", "(append [8 1 9 3 1] 9) -> [8 1 9 3 1 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.812683}
{"examples": ["(append [] 3) -> [3]", "(append [2 5 4 8] 3) -> [2 5 4 8 3]", "(append [3 0] 2) -> [3 0 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.833547}
{"examples": ["(append [] 6) -> [6]", "(append [1 7] 3) -> [1 7 3]", "(append [7] 3) -> [7 3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.898038}
{"examples": ["(append [] 9) -> [9]", "(append [1 1 9 9 6] 4) -> [1 1 9 9 6 4]", "(append [7 5 0 4 2] 0) -> [7 5 0 4 2 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.727246}
{"examples": ["(append [] 5) -> [5]", "(append [1 5 7 1 9] 2) -> [1 5 7 1 9 2]", "(append [] 8) -> [8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.815764}
{"examples": ["(append [] 6) -> [6]", "(append [3] 6) -> [3 6]", "(append [] 8) -> [8]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.569178}
{"examples": ["(append [] 1) -> [1]", "(append [8 3 4 2 8] 0) -> [8 3 4 2 8 0]", "(append [3] 7) -> [3 7]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.680053}
{"examples": ["(append [] 5) -> [5]", "(append [1] 5) -> [1 5]", "(append [3 5] 9) -> [3 5 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.718318}
{"examples": ["(append [] 0) -> [0]", "(append [3 6 3 9 0] 4) -> [3 6 3 9 0 4]", "(append [9 9 2 9] 1) -> [9 9 2 9 1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.669863}
{"examples": ["(append [] 9) -> [9]", "(append [2 8 9] 6) -> [2 8 9 6]", "(append [7 2 9] 0) -> [7 2 9 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.709962}
{"examples": ["(append [] 2) -> [2]", "(append [6 8 8] 6) -> [6 8 8 6]", "(append [] 8) -> [8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.772429}
{"examples": ["(append [] 8) -> [8]", "(append [] 6) -> [6]", "(append [0 2 4] 7) -> [0 2 4 7]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.70658}
{"examples": ["(append [] 8) -> [8]", "(append [3] 5) -> [3 5]", "(append [5 7 0] 6) -> [5 7 0 6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.67188}
{"examples": ["(append [] 0) -> [0]", "(append [7] 3) -> [7 3]", "(append [4] 4) -> [4 4]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.296145}
{"examples": ["(append [] 2) -> [2]", "(append [4 4 1 0 9] 2) -> [4 4 1 0 9 2]", "(append [3 1 2 2 0] 1) -> [3 1 2 2 0 1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.692069}
