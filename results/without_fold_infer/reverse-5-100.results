{"time": 0.131974, "examples": ["(reverse []) -> []", "(reverse [9 4 0 0]) -> [0 0 4 9]", "(reverse [1 7 9]) -> [9 7 1]", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.10591, "examples": ["(reverse []) -> []", "(reverse [8]) -> [8]", "(reverse [3 3 7 0 5]) -> [5 0 7 3 3]", "(reverse [8 7 6 6]) -> [6 6 7 8]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.122905, "examples": ["(reverse []) -> []", "(reverse [5]) -> [5]", "(reverse [4 3 4]) -> [4 3 4]", "(reverse [7 3 7 2]) -> [2 7 3 7]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.122774, "examples": ["(reverse []) -> []", "(reverse [6 9 2 9]) -> [9 2 9 6]", "(reverse [5 8]) -> [8 5]", "(reverse [9 2 1]) -> [1 2 9]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.126813, "examples": ["(reverse []) -> []", "(reverse [7]) -> [7]", "(reverse []) -> []", "(reverse [5 8 5 6]) -> [6 5 8 5]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.128945, "examples": ["(reverse []) -> []", "(reverse [0 9 2]) -> [2 9 0]", "(reverse [9 8 8 9 3]) -> [3 9 8 8 9]", "(reverse [5]) -> [5]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.145648, "examples": ["(reverse []) -> []", "(reverse [5 3]) -> [3 5]", "(reverse [7 2 5]) -> [5 2 7]", "(reverse [3 4 0 4 0]) -> [0 4 0 4 3]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.134328, "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [5 8]) -> [8 5]", "(reverse [8 7 0]) -> [0 7 8]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.102761, "examples": ["(reverse []) -> []", "(reverse [5 9 3]) -> [3 9 5]", "(reverse [1 8 8 4]) -> [4 8 8 1]", "(reverse [1 5 9 5]) -> [5 9 5 1]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.137231, "examples": ["(reverse []) -> []", "(reverse [4 5 5 3]) -> [3 5 5 4]", "(reverse [0 1 6]) -> [6 1 0]", "(reverse [3 7 7 8 0]) -> [0 8 7 7 3]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.107496, "examples": ["(reverse []) -> []", "(reverse [1 7]) -> [7 1]", "(reverse []) -> []", "(reverse [1 1 7 6]) -> [6 7 1 1]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.128888, "examples": ["(reverse []) -> []", "(reverse [6 3]) -> [3 6]", "(reverse [4 8 2 6 8]) -> [8 6 2 8 4]", "(reverse [3]) -> [3]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.134402, "examples": ["(reverse []) -> []", "(reverse [4 7 7 8]) -> [8 7 7 4]", "(reverse [3 3 3 2]) -> [2 3 3 3]", "(reverse [2 2 5 8]) -> [8 5 2 2]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.115259, "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [1 3 9 9 8]) -> [8 9 9 3 1]", "(reverse [8 0 4 7]) -> [7 4 0 8]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.114319, "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [5 2]) -> [2 5]", "(reverse [9 6 8]) -> [8 6 9]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.11627, "examples": ["(reverse []) -> []", "(reverse [6 4 9 9 4]) -> [4 9 9 4 6]", "(reverse [5 3 5 5 1]) -> [1 5 5 3 5]", "(reverse [8 2 4 5]) -> [5 4 2 8]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.000435, "examples": ["(reverse []) -> []", "(reverse [2]) -> [2]", "(reverse []) -> []", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)"}
{"time": 0.143949, "examples": ["(reverse []) -> []", "(reverse [9 0]) -> [0 9]", "(reverse [6 5 6 4 1]) -> [1 4 6 5 6]", "(reverse [9 5 1 7]) -> [7 1 5 9]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.08957, "examples": ["(reverse []) -> []", "(reverse [0 5]) -> [5 0]", "(reverse [3 5 9 5]) -> [5 9 5 3]", "(reverse [3 7 1]) -> [1 7 3]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.086987, "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [7]) -> [7]", "(reverse [7 7 4]) -> [4 7 7]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.09859, "examples": ["(reverse []) -> []", "(reverse [5]) -> [5]", "(reverse [7 4 6 0]) -> [0 6 4 7]", "(reverse [3 9 5 5 4]) -> [4 5 5 9 3]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.148251, "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [3 2 0 8 5]) -> [5 8 0 2 3]", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.165903, "examples": ["(reverse []) -> []", "(reverse [4 3 2 1]) -> [1 2 3 4]", "(reverse [6 3]) -> [3 6]", "(reverse [4 6]) -> [6 4]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.092289, "examples": ["(reverse []) -> []", "(reverse [7]) -> [7]", "(reverse [9 5 8]) -> [8 5 9]", "(reverse [8 7 7 2]) -> [2 7 7 8]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.138164, "examples": ["(reverse []) -> []", "(reverse [4 8 9 6]) -> [6 9 8 4]", "(reverse [8 0 3 1]) -> [1 3 0 8]", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.151575, "examples": ["(reverse []) -> []", "(reverse [2 1 6]) -> [6 1 2]", "(reverse [7 6 3 2 9]) -> [9 2 3 6 7]", "(reverse [6 6 5 8 1]) -> [1 8 5 6 6]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.165818, "examples": ["(reverse []) -> []", "(reverse [4 6 8 5]) -> [5 8 6 4]", "(reverse [2 1]) -> [1 2]", "(reverse [2]) -> [2]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.161214, "examples": ["(reverse []) -> []", "(reverse [8 4 9 3]) -> [3 9 4 8]", "(reverse [5]) -> [5]", "(reverse [9 7 8 9 7]) -> [7 9 8 7 9]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.150808, "examples": ["(reverse []) -> []", "(reverse [8 2]) -> [2 8]", "(reverse [3]) -> [3]", "(reverse [0]) -> [0]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.123152, "examples": ["(reverse []) -> []", "(reverse [6 8 1 6 5]) -> [5 6 1 8 6]", "(reverse []) -> []", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.100667, "examples": ["(reverse []) -> []", "(reverse [1]) -> [1]", "(reverse [5 2 3]) -> [3 2 5]", "(reverse [3 2 4]) -> [4 2 3]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.158965, "examples": ["(reverse []) -> []", "(reverse [3 7 2]) -> [2 7 3]", "(reverse [0 5 2]) -> [2 5 0]", "(reverse [8 4 7]) -> [7 4 8]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.130512, "examples": ["(reverse []) -> []", "(reverse [3]) -> [3]", "(reverse [1 5 4 4 0]) -> [0 4 4 5 1]", "(reverse [9]) -> [9]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.000399, "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [1]) -> [1]", "(reverse [5]) -> [5]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)"}
{"time": 0.11669, "examples": ["(reverse []) -> []", "(reverse [3 1 7]) -> [7 1 3]", "(reverse [7 5 0 7 9]) -> [9 7 0 5 7]", "(reverse [9 6]) -> [6 9]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.089812, "examples": ["(reverse []) -> []", "(reverse [1 6 4 8]) -> [8 4 6 1]", "(reverse [3 0 0 5 5]) -> [5 5 0 0 3]", "(reverse [4 0 7]) -> [7 0 4]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.107541, "examples": ["(reverse []) -> []", "(reverse [4]) -> [4]", "(reverse [9]) -> [9]", "(reverse [6 7]) -> [7 6]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.135474, "examples": ["(reverse []) -> []", "(reverse [6 8]) -> [8 6]", "(reverse [4 5 7 0]) -> [0 7 5 4]", "(reverse [9 5 9 8 8]) -> [8 8 9 5 9]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.124716, "examples": ["(reverse []) -> []", "(reverse [0]) -> [0]", "(reverse [3 8 1 4]) -> [4 1 8 3]", "(reverse [4 5]) -> [5 4]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.142918, "examples": ["(reverse []) -> []", "(reverse [4 4 5 5]) -> [5 5 4 4]", "(reverse []) -> []", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.093874, "examples": ["(reverse []) -> []", "(reverse [4 2 8 8]) -> [8 8 2 4]", "(reverse [1]) -> [1]", "(reverse [0 6 5 9 5]) -> [5 9 5 6 0]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.091414, "examples": ["(reverse []) -> []", "(reverse [5 0 4 7 6]) -> [6 7 4 0 5]", "(reverse [6 2 9 7]) -> [7 9 2 6]", "(reverse [9 5]) -> [5 9]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.120431, "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [6]) -> [6]", "(reverse [3 9 7 7]) -> [7 7 9 3]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.138788, "examples": ["(reverse []) -> []", "(reverse [3 4 7 8 2]) -> [2 8 7 4 3]", "(reverse [0 0 6 3]) -> [3 6 0 0]", "(reverse [7 6 4 1]) -> [1 4 6 7]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.126381, "examples": ["(reverse []) -> []", "(reverse [8 2 6 6]) -> [6 6 2 8]", "(reverse []) -> []", "(reverse [3]) -> [3]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.106134, "examples": ["(reverse []) -> []", "(reverse [0 9 4 9]) -> [9 4 9 0]", "(reverse [4 9]) -> [9 4]", "(reverse [8]) -> [8]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.125878, "examples": ["(reverse []) -> []", "(reverse [7 4 1 7 7]) -> [7 7 1 4 7]", "(reverse []) -> []", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.109275, "examples": ["(reverse []) -> []", "(reverse [6]) -> [6]", "(reverse []) -> []", "(reverse [9 6]) -> [6 9]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.11712, "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [9 8 8 1]) -> [1 8 8 9]", "(reverse [7 3]) -> [3 7]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.000672, "examples": ["(reverse []) -> []", "(reverse [5]) -> [5]", "(reverse []) -> []", "(reverse [9]) -> [9]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)"}
{"time": 0.000593, "examples": ["(reverse []) -> []", "(reverse [3]) -> [3]", "(reverse []) -> []", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)"}
{"time": 0.088224, "examples": ["(reverse []) -> []", "(reverse [9 5 1]) -> [1 5 9]", "(reverse [7 6 7 8 8]) -> [8 8 7 6 7]", "(reverse [1 4]) -> [4 1]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.115443, "examples": ["(reverse []) -> []", "(reverse [6 7 9]) -> [9 7 6]", "(reverse [8 0]) -> [0 8]", "(reverse [3 8]) -> [8 3]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.108748, "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [6 6 3 1]) -> [1 3 6 6]", "(reverse [3 9 1]) -> [1 9 3]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.114031, "examples": ["(reverse []) -> []", "(reverse [4 1 2 5]) -> [5 2 1 4]", "(reverse [7 7 3]) -> [3 7 7]", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.106488, "examples": ["(reverse []) -> []", "(reverse [6 1 5 6]) -> [6 5 1 6]", "(reverse [6]) -> [6]", "(reverse [5 8 3]) -> [3 8 5]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.112141, "examples": ["(reverse []) -> []", "(reverse [6 6 5 6]) -> [6 5 6 6]", "(reverse [9]) -> [9]", "(reverse [1 2]) -> [2 1]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.093209, "examples": ["(reverse []) -> []", "(reverse [0 9]) -> [9 0]", "(reverse []) -> []", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.084248, "examples": ["(reverse []) -> []", "(reverse [0 5 0]) -> [0 5 0]", "(reverse [2 9 4 5]) -> [5 4 9 2]", "(reverse [2 9 2 0 3]) -> [3 0 2 9 2]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.121773, "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse []) -> []", "(reverse [2 6 8 2]) -> [2 8 6 2]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.109834, "examples": ["(reverse []) -> []", "(reverse [6 9 9 3]) -> [3 9 9 6]", "(reverse [7 9 1 9]) -> [9 1 9 7]", "(reverse [7 2 1 2 8]) -> [8 2 1 2 7]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.102334, "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [2 5]) -> [5 2]", "(reverse [2 9 2 1]) -> [1 2 9 2]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.118348, "examples": ["(reverse []) -> []", "(reverse [3 4]) -> [4 3]", "(reverse [8 6]) -> [6 8]", "(reverse [6 6]) -> [6 6]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.121898, "examples": ["(reverse []) -> []", "(reverse [8]) -> [8]", "(reverse [8 2 8]) -> [8 2 8]", "(reverse [8 3 4]) -> [4 3 8]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.118007, "examples": ["(reverse []) -> []", "(reverse [2 1 9 8]) -> [8 9 1 2]", "(reverse [0 3 4 6 6]) -> [6 6 4 3 0]", "(reverse [4 5 9]) -> [9 5 4]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.115727, "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [0]) -> [0]", "(reverse [1 4 5 2]) -> [2 5 4 1]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.106083, "examples": ["(reverse []) -> []", "(reverse [4 7 1 8 7]) -> [7 8 1 7 4]", "(reverse [0 4 8 5]) -> [5 8 4 0]", "(reverse [4 4 0 8 4]) -> [4 8 0 4 4]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.000608, "examples": ["(reverse []) -> []", "(reverse [0]) -> [0]", "(reverse []) -> []", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)"}
{"time": 0.101465, "examples": ["(reverse []) -> []", "(reverse [4 0 5 0]) -> [0 5 0 4]", "(reverse []) -> []", "(reverse [4 1 7]) -> [7 1 4]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.000665, "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse []) -> []", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) []) _) _)"}
{"time": 0.114571, "examples": ["(reverse []) -> []", "(reverse [4 4 2 0]) -> [0 2 4 4]", "(reverse [7 7 4 0]) -> [0 4 7 7]", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.081635, "examples": ["(reverse []) -> []", "(reverse [8]) -> [8]", "(reverse [7 3]) -> [3 7]", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.11527, "examples": ["(reverse []) -> []", "(reverse [8 8 7 2]) -> [2 7 8 8]", "(reverse [3 5 1]) -> [1 5 3]", "(reverse [9 1 4 3]) -> [3 4 1 9]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.095412, "examples": ["(reverse []) -> []", "(reverse [9]) -> [9]", "(reverse [5 0]) -> [0 5]", "(reverse [2]) -> [2]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.100944, "examples": ["(reverse []) -> []", "(reverse [5 4 0 5]) -> [5 0 4 5]", "(reverse [7 9 5 7]) -> [7 5 9 7]", "(reverse [3]) -> [3]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.099135, "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [7 9 8]) -> [8 9 7]", "(reverse [9 2]) -> [2 9]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.112225, "examples": ["(reverse []) -> []", "(reverse [0 9]) -> [9 0]", "(reverse [5 7 8 3 9]) -> [9 3 8 7 5]", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.105066, "examples": ["(reverse []) -> []", "(reverse [4 8 2 5]) -> [5 2 8 4]", "(reverse [7 0 9 7 1]) -> [1 7 9 0 7]", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.110394, "examples": ["(reverse []) -> []", "(reverse [0]) -> [0]", "(reverse [4 7 9]) -> [9 7 4]", "(reverse [0 5]) -> [5 0]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.118825, "examples": ["(reverse []) -> []", "(reverse [1 6 3 5]) -> [5 3 6 1]", "(reverse [3 1 7 6]) -> [6 7 1 3]", "(reverse [3 7 9 5]) -> [5 9 7 3]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.126878, "examples": ["(reverse []) -> []", "(reverse [0 5 3]) -> [3 5 0]", "(reverse [2]) -> [2]", "(reverse [5 7 2 8 0]) -> [0 8 2 7 5]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.105173, "examples": ["(reverse []) -> []", "(reverse [8 2 6 1 1]) -> [1 1 6 2 8]", "(reverse [6 7 5 4]) -> [4 5 7 6]", "(reverse [2 9 4 1]) -> [1 4 9 2]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.118813, "examples": ["(reverse []) -> []", "(reverse [4 8 3 4]) -> [4 3 8 4]", "(reverse [3 5 7]) -> [7 5 3]", "(reverse [3 5 9]) -> [9 5 3]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.118748, "examples": ["(reverse []) -> []", "(reverse [9 1 5 0]) -> [0 5 1 9]", "(reverse [4]) -> [4]", "(reverse [2]) -> [2]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.113288, "examples": ["(reverse []) -> []", "(reverse [5 7 0 7]) -> [7 0 7 5]", "(reverse [8 7 4 1]) -> [1 4 7 8]", "(reverse [7]) -> [7]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.000363, "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [7]) -> [7]", "(reverse [2]) -> [2]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)"}
{"time": 0.098567, "examples": ["(reverse []) -> []", "(reverse [0 4 3]) -> [3 4 0]", "(reverse [2 2 8 4]) -> [4 8 2 2]", "(reverse [4 8]) -> [8 4]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.110293, "examples": ["(reverse []) -> []", "(reverse [5]) -> [5]", "(reverse [0 5 5 5]) -> [5 5 5 0]", "(reverse [5 8 3 3 1]) -> [1 3 3 8 5]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.085019, "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse []) -> []", "(reverse [4 1 4 7 7]) -> [7 7 4 1 4]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.09324, "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [0 1 8]) -> [8 1 0]", "(reverse [1 4 1 7 2]) -> [2 7 1 4 1]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.123198, "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [8 9]) -> [9 8]", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.114817, "examples": ["(reverse []) -> []", "(reverse [0 5 6 8]) -> [8 6 5 0]", "(reverse [3 7 4 1]) -> [1 4 7 3]", "(reverse [8 7]) -> [7 8]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.119231, "examples": ["(reverse []) -> []", "(reverse [9 7 7 1 0]) -> [0 1 7 7 9]", "(reverse [0]) -> [0]", "(reverse [7 0]) -> [0 7]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.096885, "examples": ["(reverse []) -> []", "(reverse [9 1]) -> [1 9]", "(reverse [1 9 5]) -> [5 9 1]", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.099315, "examples": ["(reverse []) -> []", "(reverse [7 9 3 5]) -> [5 3 9 7]", "(reverse [0 7]) -> [7 0]", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.09967, "examples": ["(reverse []) -> []", "(reverse [0 9 6 5 0]) -> [0 5 6 9 0]", "(reverse [1 5 6 5]) -> [5 6 5 1]", "(reverse []) -> []"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.106207, "examples": ["(reverse []) -> []", "(reverse [3 9 2 9]) -> [9 2 9 3]", "(reverse [3 3 9 9]) -> [9 9 3 3]", "(reverse [3]) -> [3]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.11218, "examples": ["(reverse []) -> []", "(reverse [5]) -> [5]", "(reverse [0 8 6]) -> [6 8 0]", "(reverse [2 4 5 2]) -> [2 5 4 2]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.104385, "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse []) -> []", "(reverse [2 2 3]) -> [3 2 2]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
{"time": 0.107283, "examples": ["(reverse []) -> []", "(reverse [4 5 4]) -> [4 5 4]", "(reverse [6]) -> [6]", "(reverse [1 5 7]) -> [7 5 1]"], "name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)"}
