{"name": "sums", "time": 0.032862, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) 0))) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[]]) -> [0]"]}
{"name": "sums", "time": 0.000457, "solution": "(let sums (let a (lambda (b) []) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums []) -> []"]}
{"name": "sums", "time": 0.12574, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (+ 1 (car c))))) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[8 1]]) -> [9]"]}
{"name": "sums", "time": 1.412987, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[2] [7 7 2 8] [8 5 3 5]]) -> [2 24 21]", "(sums [[6 2 4 7 8] [4 8 0 2 5] [8 4] [0 5 3] [8 7 2]]) -> [27 19 12 8 17]"]}
{"name": "sums", "time": 1.5268, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[4 5 7 0] [2 4] [5 2 6 1 3]]) -> [16 6 17]", "(sums [[1 2 8 2 9] [3 1]]) -> [22 4]"]}
{"name": "sums", "time": 1.466897, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[1 2 8 1 7] [1] [9 9 2] [9 8 4 8]]) -> [19 1 20 29]"]}
{"name": "sums", "time": 1.44838, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [4] [3 5 8 9]]) -> [0 4 25]", "(sums [[5 9 6] [4 3 4]]) -> [20 11]"]}
{"name": "sums", "time": 1.508198, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[6 8 0 7 9] [3 7 5]]) -> [30 15]", "(sums []) -> []"]}
{"name": "sums", "time": 1.501058, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[5 9] [7 7 7 0] [1 1 5 7 6]]) -> [14 21 20]"]}
{"name": "sums", "time": 0.060984, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (car c)))) _) _)", "examples": ["(sums []) -> []", "(sums [[6]]) -> [6]", "(sums []) -> []"]}
{"name": "sums", "time": 2.370175, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[7 7 8 9] [5 6 1] [6 5 1] [] [3 8 9 1 9]]) -> [31 12 12 0 30]", "(sums [[]]) -> [0]"]}
{"name": "sums", "time": 2.512037, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[6 0] [2 3] [3 3 1] [5 7 1 7 4]]) -> [6 5 7 24]", "(sums [[] [3 2 9 1 2]]) -> [0 17]"]}
{"name": "sums", "time": 2.507519, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[6]]) -> [6]", "(sums [[8 4 8 7] [6 2 0 5] [7 5] [0]]) -> [27 13 12 0]"]}
{"name": "sums", "time": 2.486354, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[4] [] [9 5] [1] []]) -> [4 0 14 1 0]", "(sums [[1] [5 7 6 8 4]]) -> [1 30]"]}
{"name": "sums", "time": 2.467225, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[8 0 2 2 3] [2 8 6 6 3] [9 7 9 5] [1]]) -> [15 25 30 1]", "(sums [[4] [4 0] [5 8 8 7 9] [0 2 4 9 4] [8 2 1 6 3]]) -> [4 4 37 19 20]"]}
{"name": "sums", "time": 2.541011, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[5 1 7] [1 5 7]]) -> [13 13]", "(sums [[6 0 7] [2 6 2 7 7] [3] [8 2 4 5 1] [8 6 7 3]]) -> [13 24 3 20 24]"]}
{"name": "sums", "time": 2.432369, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[0 1 0 0 4] [] [5 8 9 8 8]]) -> [5 0 38]", "(sums [[0 4 4 6] [1 8 6]]) -> [14 15]"]}
{"name": "sums", "time": 2.428537, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[1] [2] [8 8 1 9]]) -> [1 2 26]", "(sums [[] [3 9 0]]) -> [0 12]"]}
{"name": "sums", "time": 1.234116, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[7] [6 5 2 9] [5 2 0] [7 6 0]]) -> [7 22 7 13]", "(sums []) -> []"]}
{"name": "sums", "time": 2.668929, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[1] [8 5 9 0] [3 9 1 5] [6 8 1 0] [8 5]]) -> [1 22 18 15 13]", "(sums [[4 4 9 5 4] [0 1] [7] [5 1 7 3] []]) -> [26 1 7 16 0]"]}
{"name": "sums", "time": 0.000467, "solution": "(let sums (let a (lambda (b) []) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums []) -> []"]}
{"name": "sums", "time": 2.530744, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[2] [9 7 4 4 2]]) -> [2 26]", "(sums [[3 8 0 3 1] []]) -> [15 0]"]}
{"name": "sums", "time": 2.142746, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [7 8 3]]) -> [0 18]", "(sums [[6] [2 3 2] [0 2 9] [8 0 2 5 7]]) -> [6 7 11 22]"]}
{"name": "sums", "time": 2.226174, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[0 5 0 9] [6 8 6] [3 1 9 7] [8 1 0]]) -> [14 20 20 9]", "(sums [[6 4] [5 8 9 2 7]]) -> [10 31]"]}
{"name": "sums", "time": 2.130023, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[1 1] [5 4]]) -> [2 9]", "(sums [[1 3 3] [3] []]) -> [7 3 0]"]}
{"name": "sums", "time": 2.286976, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[7] [6 8 5 6 9] [4] [9 4 6] [8]]) -> [7 34 4 19 8]"]}
{"name": "sums", "time": 1.858799, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[2] [0 7 8 4]]) -> [2 19]", "(sums [[8 2 2 1 7]]) -> [20]"]}
{"name": "sums", "time": 1.69636, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[5 1 7] [0]]) -> [13 0]", "(sums [[1] [8 1 5 2 1] [1 6 1 5] [1 8 7 2 9] []]) -> [1 17 13 27 0]"]}
{"name": "sums", "time": 1.785072, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [1 7 9]]) -> [0 17]", "(sums [[0 5 7]]) -> [12]"]}
{"name": "sums", "time": 1.881853, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[9 4 6] [] [5 6] [5 2 6 9] [1 4 6 2]]) -> [19 0 11 22 13]"]}
{"name": "sums", "time": 1.80528, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[5 1 8] [6 0 1 6]]) -> [14 13]", "(sums [[] [6] [6 5 7 4 1] [0 2 6] [9 4 4 6 7]]) -> [0 6 23 8 30]"]}
{"name": "sums", "time": 1.701739, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[2] [5 9 6 9]]) -> [2 29]", "(sums [[4 8 2] [8 7] [0 6 1 1 1]]) -> [14 15 9]"]}
{"name": "sums", "time": 0.032446, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (car c)))) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[3]]) -> [3]"]}
{"name": "sums", "time": 2.063383, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[7 6 4]]) -> [17]", "(sums [[8 5 7 8 8] [4 3 8 2 7] [4 6 8 5 9] [3 2 9 4] []]) -> [36 24 32 18 0]"]}
{"name": "sums", "time": 2.034805, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[7 5 5] [2 3 7 3]]) -> [17 15]", "(sums [[] [] [3 9] [4] [6 1 8]]) -> [0 0 12 4 15]"]}
{"name": "sums", "time": 2.192724, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [7 1 7] [2 2 4 2]]) -> [0 15 10]", "(sums [[7 6 4] [] [1 8] [1 5 7 8 8]]) -> [17 0 9 29]"]}
{"name": "sums", "time": 2.210531, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[0 3] [] [] []]) -> [3 0 0 0]", "(sums [[6 1 4 9] [2 1 2] [9 0 9 1 3]]) -> [20 5 22]"]}
{"name": "sums", "time": 2.238438, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[0 1 6 5 5] []]) -> [17 0]"]}
{"name": "sums", "time": 1.479689, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[]]) -> [0]", "(sums [[8 6 2] [] [6 3] [3 5 9 1]]) -> [16 0 9 18]"]}
{"name": "sums", "time": 1.388584, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[]]) -> [0]", "(sums [[6] [5 6] [] [9 1]]) -> [6 11 0 10]"]}
{"name": "sums", "time": 2.282974, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[0 5] [9 1 4] [7] [1 3 4] [5 0 0 7]]) -> [5 14 7 8 12]"]}
{"name": "sums", "time": 1.463784, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[9 9 9] []]) -> [27 0]"]}
{"name": "sums", "time": 1.428221, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[1 0 8] [9 2] [9 3 1] [0 2 8]]) -> [9 11 13 10]", "(sums [[2 1 9] [5 7 3 2]]) -> [12 17]"]}
{"name": "sums", "time": 1.497473, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[4 5] [9] [5 6 8] []]) -> [9 9 19 0]", "(sums [[8 6 5 0 9] [9 3 1 2] [3 5 1 9 9]]) -> [28 15 27]"]}
{"name": "sums", "time": 1.631157, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[2] [8] [5 0] [3 3 4]]) -> [2 8 5 10]", "(sums [[1 1 5 1] [3 0 1] [4 1 9 2 5] [1 3 1 6 0]]) -> [8 4 21 11]"]}
{"name": "sums", "time": 2.168545, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[3 0 8 6 3]]) -> [20]", "(sums [[6 6] [9] [4 9 6 2 0] [7 9] []]) -> [12 9 21 16 0]"]}
{"name": "sums", "time": 2.173923, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[4] [9 4 5 7 5] [] [8]]) -> [4 30 0 8]", "(sums [[3]]) -> [3]"]}
{"name": "sums", "time": 2.195801, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[5] [2] [8]]) -> [5 2 8]", "(sums [[2 3 5 7] [0 0 0 6] [5 7 6 2] [1 8 0 2 8] [8 4 5]]) -> [17 6 20 19 17]"]}
{"name": "sums", "time": 1.826924, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [2 9 1 0 8]]) -> [0 20]", "(sums [[1 6 7 7] [1 8] [] [7 4 2] []]) -> [21 9 0 13 0]"]}
{"name": "sums", "time": 2.103979, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [] []]) -> [0 0 0]", "(sums [[0 9 2]]) -> [11]"]}
{"name": "sums", "time": 1.742785, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[6] [1 7 7 4 3] [] [7] [4 2 6]]) -> [6 22 0 7 12]", "(sums [[4 4 7 6 9] [2 8 5 3] [5 4 6]]) -> [30 18 15]"]}
{"name": "sums", "time": 2.230068, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[4 0 0 9 0]]) -> [13]", "(sums [[8 6 7 6] [0 0 4 4] [3 3 7 7]]) -> [27 8 20]"]}
{"name": "sums", "time": 1.819527, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[3 2 8] [3 2 7 9 3] [2] [] []]) -> [13 24 2 0 0]", "(sums [[] [1 9 8] [4 9 7 0 8] [5 2 2 7 1]]) -> [0 18 28 17]"]}
{"name": "sums", "time": 1.80576, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[9 9 5] [9 9] [] [6] [4]]) -> [23 18 0 6 4]", "(sums [[1 5] [9] [2 6 0 2] [1 6]]) -> [6 9 10 7]"]}
{"name": "sums", "time": 1.819839, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[9 1 8 2 0] [7 1 8 2] [7 9] [] [0 9 9 3]]) -> [20 18 16 0 21]", "(sums [[6 0 3]]) -> [9]"]}
{"name": "sums", "time": 1.75569, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[]]) -> [0]", "(sums [[9 5 5]]) -> [19]"]}
{"name": "sums", "time": 1.840325, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[6]]) -> [6]", "(sums [[2 5 3 8] [9 4 0 9 3] [3 5 1] [7]]) -> [18 25 9 7]"]}
{"name": "sums", "time": 1.872415, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[7 3]]) -> [10]", "(sums [[8 2 7] [3 5 9 4 0] [3] [6 8 6 2] [0 9 9 3 1]]) -> [17 21 3 22 22]"]}
{"name": "sums", "time": 1.817266, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[8 6] [2] [2]]) -> [14 2 2]", "(sums [[4 1 6 2 1] [2] []]) -> [14 2 0]"]}
{"name": "sums", "time": 0.04273, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) 0))) _) _)", "examples": ["(sums []) -> []", "(sums [[]]) -> [0]", "(sums []) -> []"]}
{"name": "sums", "time": 1.982622, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[3 9 9 6 8]]) -> [35]", "(sums [[9 9 4 5 7]]) -> [34]"]}
{"name": "sums", "time": 2.027114, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[1 1 4]]) -> [6]"]}
{"name": "sums", "time": 2.070281, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[1 4 3 4 1] [2 1] [6 1 8 2] [1 9]]) -> [13 3 17 10]", "(sums [[2 4 0 2] [0] [0 6 9]]) -> [8 0 15]"]}
{"name": "sums", "time": 2.082231, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[2 5 9] [5 3 3] [6 9 6 0] [0] [3 5 1 4]]) -> [16 11 21 0 13]", "(sums []) -> []"]}
{"name": "sums", "time": 1.583749, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[4 9] [0 4 7] [6 0 2]]) -> [13 11 8]", "(sums [[] [0 5 1] [7 2] [8 1] [0 8 6 9 3]]) -> [0 6 9 9 26]"]}
{"name": "sums", "time": 1.661966, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[]]) -> [0]", "(sums [[1 4 3 1] [1] [5 2 7 9] [2 0] [4 5 9 4 5]]) -> [9 1 23 2 27]"]}
{"name": "sums", "time": 1.937309, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[6 7] [3 5 5 7] [9 3 9 6]]) -> [13 20 27]", "(sums [[3 5 7] [7 5] [2 3 6 3 9] [2 4 8 8]]) -> [15 12 23 22]"]}
{"name": "sums", "time": 1.976444, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[4 7] [] [4 3 3 6] []]) -> [11 0 16 0]", "(sums [[7 4 4 2 6] [] [8 0 8 4 7]]) -> [23 0 27]"]}
{"name": "sums", "time": 2.050709, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[9 9 0] [9 6 6 4] [] [9 3 4 5] [2 2 5 4]]) -> [18 25 0 21 13]", "(sums [[9 7 5 7]]) -> [28]"]}
{"name": "sums", "time": 1.755261, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[4 7 5 7 3] [] [2] [1 4 1] [9 6 1 2]]) -> [26 0 2 6 18]", "(sums [[7 7] [6 4 0 2] [8] [5 3 3 7] [1 0 6 6]]) -> [14 12 8 18 13]"]}
{"name": "sums", "time": 1.886713, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[9 3 1 7 0] [6 6 8 2 1] [3]]) -> [20 23 3]", "(sums [[] [] [3 7 8 6 4] [7 8 5 0]]) -> [0 0 28 20]"]}
{"name": "sums", "time": 1.792484, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[4 2 6] [2 1 1 9] [3 9 0 7 4] [0 1 0 3 4] [8 3 9 3 3]]) -> [12 13 23 8 26]", "(sums [[4] [3 7 2] [0 4 8] [2] [9]]) -> [4 12 12 2 9]"]}
{"name": "sums", "time": 1.903151, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[3]]) -> [3]", "(sums [[0] [5 3 4 6] [3 8 9]]) -> [0 18 20]"]}
{"name": "sums", "time": 1.82205, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[0 5 5 1] [8 7 1] [7 8] [] [3 8 7]]) -> [11 16 15 0 18]", "(sums [[3 7] [2 1 8] [2]]) -> [10 11 2]"]}
{"name": "sums", "time": 1.877295, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[5 2 0 6 9] [6 6]]) -> [22 12]", "(sums [[2 7 4 5] []]) -> [18 0]"]}
{"name": "sums", "time": 1.53466, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[8 6 5] []]) -> [19 0]", "(sums [[2 8 8 2] [] [1] [1 9 4 8]]) -> [20 0 1 22]"]}
{"name": "sums", "time": 1.406387, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[8 3]]) -> [11]", "(sums [[] [7]]) -> [0 7]"]}
{"name": "sums", "time": 2.026295, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[1] [] [8]]) -> [1 0 8]", "(sums [[2 4 7 3 0] [8 6 5 8 6] [1 4] [5 7 6]]) -> [16 33 5 18]"]}
{"name": "sums", "time": 2.022601, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[3 1 7] [8 0 4 5 2] [9 0] [3 7 4] []]) -> [11 19 9 14 0]", "(sums [[5 5 5 8]]) -> [23]"]}
{"name": "sums", "time": 2.267557, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[1 8 1] [2 9]]) -> [10 11]", "(sums [[5 1 4] [5 0 6 5] [8 4 9 3] [3 1] [1 7 1 1]]) -> [10 16 24 4 10]"]}
{"name": "sums", "time": 1.56992, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [0 6 8 5] [1 4] [6 7 0 8]]) -> [0 19 5 21]", "(sums [[5 5 9 2] [4 9 1] [6 9 7]]) -> [21 14 22]"]}
{"name": "sums", "time": 2.188359, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[8 9 8] [1 3 4]]) -> [25 8]", "(sums [[5 1 3 8 4] [3] [5 2 2 7] [2 0 0 4] [0 1 3 8]]) -> [21 3 16 6 12]"]}
{"name": "sums", "time": 1.483092, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[0 4 0]]) -> [4]", "(sums [[2 4] [6 9 3 3] [] [3]]) -> [6 21 0 3]"]}
{"name": "sums", "time": 2.107246, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[3 9 4 1] [7 6 4 8 6] [8 4 8]]) -> [17 31 20]", "(sums [[8 7 9 0] [6 3 4 7] [0 8] [8 3] []]) -> [24 20 8 11 0]"]}
{"name": "sums", "time": 2.193093, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[3] [3] [1] [7] [2 3 0 0 2]]) -> [3 3 1 7 7]", "(sums [[9]]) -> [9]"]}
{"name": "sums", "time": 2.111991, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[7] [2 8] [0 6 0 0]]) -> [7 10 6]", "(sums [[] [9 3 7 1] [] [8 0 6 4 6]]) -> [0 20 0 24]"]}
{"name": "sums", "time": 1.537719, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[4 0 6] []]) -> [10 0]", "(sums [[0 4 4] [6] [4 2 2] [9 4 1 3] [1]]) -> [8 6 8 17 1]"]}
{"name": "sums", "time": 2.200382, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[3 8 5 1 0] [3 8]]) -> [17 11]", "(sums []) -> []"]}
{"name": "sums", "time": 1.66478, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[]]) -> [0]", "(sums [[3] [] [2 5 7] [5 6 8] []]) -> [3 0 14 19 0]"]}
{"name": "sums", "time": 1.691808, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[6 2 3 5] [6 6] [6 9 0] [] [2 1 2]]) -> [16 12 15 0 5]", "(sums [[7 8 5 3] [1]]) -> [23 1]"]}
{"name": "sums", "time": 2.034081, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[4 8 9 8] [8] [2 5 6 2 6] [2 2]]) -> [29 8 21 4]", "(sums [[5 6 8 2] []]) -> [21 0]"]}
{"name": "sums", "time": 1.75718, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [7 6 9 1] [7 7] [3] [6]]) -> [0 23 14 3 6]", "(sums [[5 6 9 1 7] []]) -> [28 0]"]}
{"name": "sums", "time": 1.446065, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[2 8] [0 3] []]) -> [10 3 0]", "(sums [[2] [7 3 3 8]]) -> [2 21]"]}
{"name": "sums", "time": 1.112804, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[0 5 7 7 2] [9] [] [7 0]]) -> [21 9 0 7]", "(sums [[2 4 6 3] [1] [6 8 3] [9 5 4 4 8] [3 9 5 8 3]]) -> [15 1 17 30 28]"]}
{"name": "sums", "time": 1.212515, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[8 2 3 3 4] [1] [4 1 1] []]) -> [20 1 6 0]", "(sums [[5 8 7 5 4]]) -> [29]"]}
{"name": "sums", "time": 1.36617, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[6 7 0]]) -> [13]", "(sums [[4 4 9 6] [2 7 5 6 0] [3 8 8] [0 4 2 0]]) -> [23 20 19 6]"]}
{"name": "sums", "time": 1.148464, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[4 0 0 9] [9 5 6 9] []]) -> [13 29 0]", "(sums []) -> []"]}
{"name": "sums", "time": 0.873746, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[1 7 3 1 3] [2]]) -> [15 2]", "(sums []) -> []"]}
{"name": "sums", "time": 0.87359, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[] [1] [3 0] [4 7 8 1]]) -> [0 1 3 20]", "(sums [[6 4 9 0] [1]]) -> [19 1]"]}
{"name": "sums", "time": 1.028987, "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)", "examples": ["(sums []) -> []", "(sums [[9 6 1 2] [9 9]]) -> [18 18]", "(sums [[] [2 7] [0 4 6 7 5] [] [7 4]]) -> [0 9 22 0 11]"]}
