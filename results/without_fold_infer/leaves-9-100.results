{"time": 2.039867, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {}) -> []", "(leaves {0 {2} {8}}) -> [2 8]", "(leaves {7}) -> [7]", "(leaves {9}) -> [9]", "(leaves {4 {7 {0}}}) -> [0]", "(leaves {0 {0} {0}}) -> [0 0]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.105846, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7 {6} {4}}) -> [6 4]", "(leaves {9}) -> [9]", "(leaves {6 {6 {1} {2}}}) -> [1 2]", "(leaves {9 {3}}) -> [3]", "(leaves {4}) -> [4]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.053198, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {1 {7} {9}}) -> [7 9]", "(leaves {7 {0}}) -> [0]", "(leaves {0}) -> [0]", "(leaves {}) -> []", "(leaves {6 {6}}) -> [6]", "(leaves {1 {7}}) -> [7]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.051272, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {9 {0}}) -> [0]", "(leaves {}) -> []", "(leaves {1 {5 {8}} {5}}) -> [8 5]", "(leaves {7 {8}}) -> [8]", "(leaves {2 {6 {6}}}) -> [6]", "(leaves {7}) -> [7]", "(leaves {8 {9} {6}}) -> [9 6]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.447243, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2 {0 {7 {3}} {9 {0} {7}}} {6 {1}}}) -> [3 0 7 1]", "(leaves {7}) -> [7]", "(leaves {6 {8 {2 {0}} {4}}}) -> [0 4]", "(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {6 {1 {5}} {2}}) -> [5 2]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.362686, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {3 {7 {9 {1} {2}} {9}} {8 {2} {8 {6}}}}) -> [1 2 9 2 6]", "(leaves {3 {1} {5}}) -> [1 5]", "(leaves {0 {7} {1}}) -> [7 1]", "(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {7 {7} {7}}) -> [7 7]", "(leaves {7}) -> [7]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.750111, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {1 {2 {0} {2}}}) -> [0 2]", "(leaves {3}) -> [3]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4 {7 {2}} {4 {1} {9}}}) -> [2 1 9]", "(leaves {5 {7 {6} {2}} {9}}) -> [6 2 9]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 3.001958, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {3 {4} {0 {7} {3 {6} {7}}}}) -> [4 7 6 7]", "(leaves {7 {8 {0}} {1}}) -> [0 1]", "(leaves {7 {8} {2}}) -> [8 2]", "(leaves {9 {7}}) -> [7]", "(leaves {}) -> []", "(leaves {8 {9}}) -> [9]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.961145, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {1 {6 {2 {3}} {4 {0}}}}) -> [3 0]", "(leaves {7}) -> [7]", "(leaves {3}) -> [3]", "(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {5 {9 {5} {0}}}) -> [5 0]", "(leaves {4}) -> [4]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.034456, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {0 {4}}) -> [4]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {3}) -> [3]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)"}
{"time": 1.426195, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {}) -> []", "(leaves {1 {1 {5}}}) -> [5]", "(leaves {}) -> []", "(leaves {8 {6 {3} {8 {9}}} {8 {1 {6} {7}}}}) -> [3 9 6 7]", "(leaves {4 {8}}) -> [8]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 3.551488, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {5 {0} {6}}) -> [0 6]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8 {0}}) -> [0]", "(leaves {1}) -> [1]", "(leaves {7 {2}}) -> [2]", "(leaves {1 {9} {1}}) -> [9 1]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 3.556988, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {1 {9} {5}}) -> [9 5]", "(leaves {4 {6} {0}}) -> [6 0]", "(leaves {7}) -> [7]", "(leaves {9 {8 {0} {7}}}) -> [0 7]", "(leaves {}) -> []", "(leaves {9 {2}}) -> [2]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 3.680935, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {8 {8} {8}}) -> [8 8]", "(leaves {}) -> []", "(leaves {6 {2 {3 {4}} {6 {6}}} {7 {7 {9} {7}} {0 {5} {8}}}}) -> [4 6 9 7 5 8]", "(leaves {}) -> []", "(leaves {1 {7 {1} {1 {7} {2}}}}) -> [1 7 2]", "(leaves {9 {9}}) -> [9]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 3.710438, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {9 {9 {6 {5}}}}) -> [5]", "(leaves {}) -> []", "(leaves {6 {5 {8}} {7 {2 {8}}}}) -> [8 8]", "(leaves {1}) -> [1]", "(leaves {3 {9}}) -> [9]", "(leaves {4 {4} {1 {9 {6}}}}) -> [4 6]", "(leaves {5 {2 {6 {2} {8}} {3 {1} {3}}} {8}}) -> [2 8 1 3 8]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 3.630232, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {4}) -> [4]", "(leaves {4 {4 {2} {0}}}) -> [2 0]", "(leaves {4 {6 {0 {7} {7}}} {9}}) -> [7 7 9]", "(leaves {6}) -> [6]", "(leaves {7 {8}}) -> [8]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 3.770649, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1 {8 {9} {9}}}) -> [9 9]", "(leaves {2 {0}}) -> [0]", "(leaves {3 {4}}) -> [4]", "(leaves {3}) -> [3]", "(leaves {}) -> []", "(leaves {1}) -> [1]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 3.726809, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {5 {3 {1} {6}} {5 {2}}}) -> [1 6 2]", "(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {0 {0} {5}}) -> [0 5]", "(leaves {5}) -> [5]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 0.131971, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {7}) -> [7]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 1.014599, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {9 {5}}) -> [5]", "(leaves {9 {9 {0}}}) -> [0]", "(leaves {6}) -> [6]", "(leaves {3 {1}}) -> [1]", "(leaves {7}) -> [7]", "(leaves {6}) -> [6]", "(leaves {4 {8 {7 {4}}}}) -> [4]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)"}
{"time": 1.9874, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {8 {3}}) -> [3]", "(leaves {4}) -> [4]", "(leaves {7}) -> [7]", "(leaves {4 {4}}) -> [4]", "(leaves {8}) -> [8]", "(leaves {4}) -> [4]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)"}
{"time": 3.321772, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {5 {3 {5} {8}} {2}}) -> [5 8 2]", "(leaves {6}) -> [6]", "(leaves {6 {7}}) -> [7]", "(leaves {7 {6 {6} {0}} {1}}) -> [6 0 1]", "(leaves {6 {4} {6}}) -> [4 6]", "(leaves {7 {8 {5}}}) -> [5]", "(leaves {7 {5 {9}} {9 {2} {7}}}) -> [9 2 7]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 3.248718, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {0 {2} {9 {8} {2}}}) -> [2 8 2]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5 {9 {4 {6}}}}) -> [6]", "(leaves {4 {8}}) -> [8]", "(leaves {6}) -> [6]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.809092, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {1 {1 {4} {4}} {1 {7} {4}}}) -> [4 4 7 4]", "(leaves {8 {0}}) -> [0]", "(leaves {6 {2} {3 {7} {4}}}) -> [2 7 4]", "(leaves {3 {9 {1 {2} {4}}} {4 {5 {1}} {0}}}) -> [2 4 1 0]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 3.41449, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {4 {1 {4} {2}}}) -> [4 2]", "(leaves {8 {5} {0}}) -> [5 0]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9 {3} {6 {8}}}) -> [3 8]", "(leaves {2 {9}}) -> [9]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.782145, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {4 {1 {7}}}) -> [7]", "(leaves {}) -> []", "(leaves {6 {6}}) -> [6]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {7 {2}}) -> [2]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)"}
{"time": 2.456534, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {6 {9 {7} {2}}}) -> [7 2]", "(leaves {1 {9} {2}}) -> [9 2]", "(leaves {1}) -> [1]", "(leaves {2 {6}}) -> [6]", "(leaves {7 {5 {9} {1}} {8 {6} {1}}}) -> [9 1 6 1]", "(leaves {9 {9} {5 {6 {0} {3}} {7}}}) -> [9 0 3 7]", "(leaves {9 {5}}) -> [5]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.307057, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6 {3 {5} {4}}}) -> [5 4]", "(leaves {6}) -> [6]", "(leaves {5 {8} {8 {0 {0} {0}} {5 {6}}}}) -> [8 0 0 6]", "(leaves {4}) -> [4]", "(leaves {}) -> []", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.380885, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {3 {6 {3 {0} {8}} {3 {1}}} {7}}) -> [0 8 1 7]", "(leaves {3}) -> [3]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5 {1 {4}} {5 {0} {9 {3} {7}}}}) -> [4 0 3 7]", "(leaves {9}) -> [9]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.252759, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {2 {3}}) -> [3]", "(leaves {6 {5} {4}}) -> [5 4]", "(leaves {8 {6}}) -> [6]", "(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {5}) -> [5]", "(leaves {0}) -> [0]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 3.543376, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {5 {4 {4} {2}} {4}}) -> [4 2 4]", "(leaves {}) -> []", "(leaves {8 {7}}) -> [7]", "(leaves {}) -> []", "(leaves {3 {9}}) -> [9]", "(leaves {1 {7 {7}}}) -> [7]", "(leaves {7}) -> [7]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.317094, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {8 {2} {4}}) -> [2 4]", "(leaves {3 {8} {2}}) -> [8 2]", "(leaves {7 {9}}) -> [9]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9}) -> [9]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.453829, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {6 {2 {4 {9}}}}) -> [9]", "(leaves {}) -> []", "(leaves {5 {7} {5}}) -> [7 5]", "(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {0}) -> [0]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.565005, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {3}) -> [3]", "(leaves {2 {8} {1}}) -> [8 1]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.69133, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {3}) -> [3]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8 {8 {1}} {7 {1}}}) -> [1 1]", "(leaves {5 {9}}) -> [9]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.42874, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {9 {7}}) -> [7]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2 {2 {6} {8 {5} {2}}}}) -> [6 5 2]", "(leaves {5}) -> [5]", "(leaves {6 {0} {3}}) -> [0 3]", "(leaves {7 {0}}) -> [0]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.514964, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {}) -> []", "(leaves {0 {3}}) -> [3]", "(leaves {1}) -> [1]", "(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {4}) -> [4]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)"}
{"time": 2.446953, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {5 {3}}) -> [3]", "(leaves {}) -> []", "(leaves {9 {8 {8 {4} {0}}} {3 {1 {6}}}}) -> [4 0 6]", "(leaves {9}) -> [9]", "(leaves {4 {7 {1 {6} {3}}}}) -> [6 3]", "(leaves {0}) -> [0]", "(leaves {5 {1} {5 {3}}}) -> [1 3]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.73438, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {0 {0}}) -> [0]", "(leaves {8 {6}}) -> [6]", "(leaves {4}) -> [4]", "(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {4}) -> [4]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)"}
{"time": 2.288357, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {3 {0} {1}}) -> [0 1]", "(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {0 {2 {0}} {4 {6}}}) -> [0 6]", "(leaves {8}) -> [8]", "(leaves {8}) -> [8]", "(leaves {9 {4}}) -> [4]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.659099, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {0 {1}}) -> [1]", "(leaves {8}) -> [8]", "(leaves {0 {4} {3 {9}}}) -> [4 9]", "(leaves {7 {7}}) -> [7]", "(leaves {3}) -> [3]", "(leaves {9}) -> [9]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.050417, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {8 {6} {8}}) -> [6 8]", "(leaves {3 {1} {9}}) -> [1 9]", "(leaves {9 {9}}) -> [9]", "(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {4 {8}}) -> [8]", "(leaves {2 {0} {3}}) -> [0 3]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.074842, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2 {7 {9} {6}}}) -> [9 6]", "(leaves {1 {0} {4}}) -> [0 4]", "(leaves {3 {8} {8}}) -> [8 8]", "(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {3}) -> [3]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.977301, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {8}) -> [8]", "(leaves {7 {9 {4}} {2 {6}}}) -> [4 6]", "(leaves {8 {5 {0 {2}}}}) -> [2]", "(leaves {3 {5 {1 {9} {0}} {2 {9} {5}}}}) -> [9 0 9 5]", "(leaves {}) -> []", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.165907, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {7 {4 {0} {5}} {1 {4} {3}}}) -> [0 5 4 3]", "(leaves {9 {6} {3 {7 {8} {8}} {2 {9} {8}}}}) -> [6 8 8 9 8]", "(leaves {3}) -> [3]", "(leaves {0}) -> [0]", "(leaves {}) -> []", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.654049, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {1 {9} {1 {9}}}) -> [9 9]", "(leaves {}) -> []", "(leaves {3 {8}}) -> [8]", "(leaves {9 {0 {6 {8} {2}}} {9 {8 {0}} {4}}}) -> [8 2 0 4]", "(leaves {3 {8 {4} {2}}}) -> [4 2]", "(leaves {1 {8}}) -> [8]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.561401, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {7 {0}}) -> [0]", "(leaves {7 {2}}) -> [2]", "(leaves {}) -> []", "(leaves {5 {2}}) -> [2]", "(leaves {9 {7 {4 {4} {2}} {3}} {6 {4} {9 {0}}}}) -> [4 2 3 4 0]", "(leaves {4}) -> [4]", "(leaves {9 {8} {8}}) -> [8 8]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.363883, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {5}) -> [5]", "(leaves {4 {9 {7 {1}}}}) -> [1]", "(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {9}) -> [9]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)"}
{"time": 2.836222, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {9 {2}}) -> [2]", "(leaves {}) -> []", "(leaves {5 {7} {5}}) -> [7 5]", "(leaves {4 {4} {8 {1} {9}}}) -> [4 1 9]", "(leaves {}) -> []", "(leaves {2 {1 {2}}}) -> [2]", "(leaves {7}) -> [7]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.933842, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {}) -> []", "(leaves {8 {0 {4}} {8 {9}}}) -> [4 9]", "(leaves {}) -> []", "(leaves {9 {4 {2} {8 {5} {9}}}}) -> [2 5 9]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.654943, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {8}) -> [8]", "(leaves {2 {3 {5} {8 {4}}} {4 {6} {5 {0} {1}}}}) -> [5 4 6 0 1]", "(leaves {}) -> []", "(leaves {9 {0 {4}}}) -> [4]", "(leaves {7 {8} {1}}) -> [8 1]", "(leaves {4}) -> [4]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.717272, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8 {4} {3 {2 {7}} {2}}}) -> [4 7 2]", "(leaves {9 {0}}) -> [0]", "(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {}) -> []", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 3.242688, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {8}) -> [8]", "(leaves {7 {3 {1}}}) -> [1]", "(leaves {1}) -> [1]", "(leaves {2 {3} {9 {3} {2}}}) -> [3 3 2]", "(leaves {1}) -> [1]", "(leaves {2 {1 {0}}}) -> [0]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.765175, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {7 {5} {1}}) -> [5 1]", "(leaves {2 {4}}) -> [4]", "(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {9 {1}}) -> [1]", "(leaves {6 {0} {6}}) -> [0 6]", "(leaves {1 {1}}) -> [1]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.869393, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {6 {9} {9}}) -> [9 9]", "(leaves {0 {7 {9 {3} {2}} {0 {7}}} {2}}) -> [3 2 7 2]", "(leaves {4}) -> [4]", "(leaves {3}) -> [3]", "(leaves {8 {8} {2 {0}}}) -> [8 0]", "(leaves {}) -> []", "(leaves {2 {6 {3} {1 {5}}} {8 {6 {4}}}}) -> [3 5 4]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.772466, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {2 {8 {5}}}) -> [5]", "(leaves {1}) -> [1]", "(leaves {3 {3 {0}} {8 {2}}}) -> [0 2]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7 {7}}) -> [7]", "(leaves {8 {0}}) -> [0]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.004204, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {4 {2} {6}}) -> [2 6]", "(leaves {9}) -> [9]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {7}) -> [7]", "(leaves {2 {7 {5} {5}} {5 {1} {2}}}) -> [5 5 1 2]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.872802, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {6 {6 {6}}}) -> [6]", "(leaves {2}) -> [2]", "(leaves {5}) -> [5]", "(leaves {9 {5} {8}}) -> [5 8]", "(leaves {5 {2}}) -> [2]", "(leaves {1 {4 {3}} {9 {5}}}) -> [3 5]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 3.258658, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {2 {6 {6 {4}} {3 {6}}}}) -> [4 6]", "(leaves {0}) -> [0]", "(leaves {7 {4}}) -> [4]", "(leaves {4 {4}}) -> [4]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.073701, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {3 {2} {0}}) -> [2 0]", "(leaves {3 {4 {1 {1}} {9 {3} {4}}}}) -> [1 3 4]", "(leaves {9}) -> [9]", "(leaves {9}) -> [9]", "(leaves {0 {0} {8}}) -> [0 8]", "(leaves {9 {9} {0}}) -> [9 0]", "(leaves {3 {5} {0 {5} {1}}}) -> [5 5 1]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.794235, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {1 {0 {5}}}) -> [5]", "(leaves {8 {8} {9}}) -> [8 9]", "(leaves {3 {8}}) -> [8]", "(leaves {5 {9}}) -> [9]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8 {8}}) -> [8]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.872123, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {3}) -> [3]", "(leaves {1}) -> [1]", "(leaves {8 {5} {3}}) -> [5 3]", "(leaves {0 {2 {7 {9} {1}}}}) -> [9 1]", "(leaves {0}) -> [0]", "(leaves {8 {7}}) -> [7]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 3.100084, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {0 {3 {5 {4} {9}} {5 {1} {9}}} {1 {2} {4 {8}}}}) -> [4 9 1 9 2 8]", "(leaves {2 {2}}) -> [2]", "(leaves {6}) -> [6]", "(leaves {}) -> []", "(leaves {0 {8}}) -> [8]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 3.203368, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {1 {7}}) -> [7]", "(leaves {4 {9 {7} {6}} {3 {4}}}) -> [7 6 4]", "(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {}) -> []", "(leaves {3 {6}}) -> [6]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.307432, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {5 {2} {1 {7}}}) -> [2 7]", "(leaves {0}) -> [0]", "(leaves {3 {5} {5}}) -> [5 5]", "(leaves {8 {9 {3 {6}} {8 {0} {8}}} {8 {4} {8 {4} {1}}}}) -> [6 0 8 4 4 1]", "(leaves {9 {4}}) -> [4]", "(leaves {}) -> []", "(leaves {0}) -> [0]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.817122, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {7 {0 {5 {9}}} {6}}) -> [9 6]", "(leaves {3 {3} {2}}) -> [3 2]", "(leaves {0 {8} {1}}) -> [8 1]", "(leaves {2 {2} {4}}) -> [2 4]", "(leaves {9 {4} {4 {9}}}) -> [4 9]", "(leaves {5 {3}}) -> [3]", "(leaves {5 {4} {5}}) -> [4 5]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.785962, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {8 {9 {8} {2}}}) -> [8 2]", "(leaves {8 {1 {9}} {1}}) -> [9 1]", "(leaves {}) -> []", "(leaves {2 {5}}) -> [5]", "(leaves {3}) -> [3]", "(leaves {9}) -> [9]", "(leaves {1}) -> [1]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.722109, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {0 {1 {5} {8}} {8 {5} {8}}}) -> [5 8 5 8]", "(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {1 {9}}) -> [9]", "(leaves {6}) -> [6]", "(leaves {}) -> []", "(leaves {2}) -> [2]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.152677, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {9 {8}}) -> [8]", "(leaves {8 {5 {4} {6}} {7 {2} {6}}}) -> [4 6 2 6]", "(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {3}) -> [3]", "(leaves {5}) -> [5]", "(leaves {5 {1} {9}}) -> [1 9]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.558292, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {1 {0}}) -> [0]", "(leaves {}) -> []", "(leaves {0 {4} {8}}) -> [4 8]", "(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {9 {3 {3} {0 {1} {8}}} {7 {8 {2} {1}}}}) -> [3 1 8 2 1]", "(leaves {4 {1} {5}}) -> [1 5]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.952899, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {}) -> []", "(leaves {4 {1} {5}}) -> [1 5]", "(leaves {1 {5} {9 {8 {8}} {1 {0}}}}) -> [5 8 0]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.727214, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {9 {3 {1}}}) -> [1]", "(leaves {9 {5 {6 {7} {1}} {8 {3} {9}}} {6 {5 {7} {9}} {0}}}) -> [7 1 3 9 7 9 0]", "(leaves {9 {6}}) -> [6]", "(leaves {}) -> []", "(leaves {4 {5 {2}}}) -> [2]", "(leaves {3}) -> [3]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.8503, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {1 {7 {1}}}) -> [1]", "(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {1 {3 {3 {6} {2}}}}) -> [6 2]", "(leaves {}) -> []", "(leaves {5 {4 {9 {2}}} {4}}) -> [2 4]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.758671, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {6 {4 {7}} {0}}) -> [7 0]", "(leaves {3 {0 {0} {6}}}) -> [0 6]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {0 {2}}) -> [2]", "(leaves {}) -> []", "(leaves {0 {2 {6}} {2}}) -> [6 2]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.786009, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {8 {9 {3}}}) -> [3]", "(leaves {1 {7 {8 {8}} {2}}}) -> [8 2]", "(leaves {7 {4 {2} {9}} {3 {5}}}) -> [2 9 5]", "(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {6 {2 {5}} {7 {6}}}) -> [5 6]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.665966, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {8 {0}}) -> [0]", "(leaves {}) -> []", "(leaves {8 {8 {0 {0}} {6 {5} {0}}} {1 {8 {4}}}}) -> [0 5 0 4]", "(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {1}) -> [1]", "(leaves {2}) -> [2]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 3.260563, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {3 {1 {9 {8}} {6 {0}}} {8 {1} {9}}}) -> [8 0 1 9]", "(leaves {}) -> []", "(leaves {5 {2 {1 {8} {2}} {4 {7}}} {0 {7 {4} {3}} {8}}}) -> [8 2 7 4 3 8]", "(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {6 {2}}) -> [2]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 3.275352, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {7 {5} {9}}) -> [5 9]", "(leaves {2}) -> [2]", "(leaves {6}) -> [6]", "(leaves {3}) -> [3]", "(leaves {2 {7} {5 {3}}}) -> [7 3]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.087223, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {1 {1} {9}}) -> [1 9]", "(leaves {9}) -> [9]", "(leaves {4 {3 {4} {2 {6} {2}}} {5 {9}}}) -> [4 6 2 9]", "(leaves {5 {6}}) -> [6]", "(leaves {1 {7}}) -> [7]", "(leaves {}) -> []", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.630677, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {3 {9}}) -> [9]", "(leaves {1}) -> [1]", "(leaves {5}) -> [5]", "(leaves {6}) -> [6]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)"}
{"time": 3.273645, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {7 {8} {2 {9} {9}}}) -> [8 9 9]", "(leaves {4}) -> [4]", "(leaves {3 {1}}) -> [1]", "(leaves {8}) -> [8]", "(leaves {6}) -> [6]", "(leaves {5 {5}}) -> [5]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 3.58395, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {1 {0 {1} {1}}}) -> [1 1]", "(leaves {7 {9 {2} {1}}}) -> [2 1]", "(leaves {}) -> []", "(leaves {8 {5}}) -> [5]", "(leaves {1}) -> [1]", "(leaves {0 {5}}) -> [5]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.908166, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {0 {2 {5} {2}} {2}}) -> [5 2 2]", "(leaves {9 {1 {6}}}) -> [6]", "(leaves {8}) -> [8]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5 {1 {8} {2 {8} {4}}}}) -> [8 8 4]", "(leaves {8 {6 {0 {8} {8}}}}) -> [8 8]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 3.406097, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {9 {4} {4}}) -> [4 4]", "(leaves {0}) -> [0]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9}) -> [9]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.351674, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {2 {9}}) -> [9]", "(leaves {1 {9}}) -> [9]", "(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {2}) -> [2]", "(leaves {8}) -> [8]", "(leaves {5}) -> [5]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)"}
{"time": 2.021181, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {}) -> []", "(leaves {8 {7} {3}}) -> [7 3]", "(leaves {7 {9}}) -> [9]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.06611, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {0 {7} {6}}) -> [7 6]", "(leaves {}) -> []", "(leaves {0 {1 {0}}}) -> [0]", "(leaves {4 {8 {5 {0} {4}}}}) -> [0 4]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 3.670574, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {6}) -> [6]", "(leaves {4 {4 {4 {6}}}}) -> [6]", "(leaves {9 {8}}) -> [8]", "(leaves {}) -> []", "(leaves {0 {9}}) -> [9]", "(leaves {9 {0} {0}}) -> [0 0]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.019099, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {9 {0 {2 {7} {8}} {3 {6} {4}}} {1 {4} {2 {6}}}}) -> [7 8 6 4 4 6]", "(leaves {2 {2} {2}}) -> [2 2]", "(leaves {9 {1}}) -> [1]", "(leaves {9}) -> [9]", "(leaves {9 {6} {5}}) -> [6 5]", "(leaves {0 {0} {9}}) -> [0 9]", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.889887, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {1 {3}}) -> [3]", "(leaves {5}) -> [5]", "(leaves {1 {8} {2}}) -> [8 2]", "(leaves {6 {4 {1 {8}}} {0}}) -> [8 0]", "(leaves {9 {5 {6} {6}} {8 {0}}}) -> [6 6 0]", "(leaves {}) -> []", "(leaves {3 {5}}) -> [5]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.691351, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {8 {0} {8}}) -> [0 8]", "(leaves {8 {9 {8}} {6 {6} {1}}}) -> [8 6 1]", "(leaves {}) -> []", "(leaves {8 {8} {7}}) -> [8 7]", "(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {8 {9 {9 {5} {2}} {3}}}) -> [5 2 3]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.032336, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {9}) -> [9]", "(leaves {}) -> []", "(leaves {3 {0} {9 {7} {0 {4} {7}}}}) -> [0 7 4 7]", "(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {0 {8} {8}}) -> [8 8]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 2.774045, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {7 {6 {6}} {9 {8} {0}}}) -> [6 8 0]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {2}) -> [2]", "(leaves {4 {9} {5 {1}}}) -> [9 1]", "(leaves {7 {8 {6}}}) -> [6]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.607069, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {6 {5} {8}}) -> [5 8]", "(leaves {2}) -> [2]", "(leaves {}) -> []", "(leaves {2 {3}}) -> [3]", "(leaves {0 {9 {7} {3}}}) -> [7 3]", "(leaves {5 {8}}) -> [8]", "(leaves {0 {9}}) -> [9]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.527106, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8 {8} {2}}) -> [8 2]", "(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {5 {3}}) -> [3]", "(leaves {7}) -> [7]", "(leaves {6 {8 {8} {5}} {9}}) -> [8 5 9]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 0.912053, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {5 {6}}) -> [6]", "(leaves {4}) -> [4]", "(leaves {7 {8}}) -> [8]", "(leaves {2}) -> [2]", "(leaves {}) -> []", "(leaves {7 {6}}) -> [6]", "(leaves {6}) -> [6]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)"}
{"time": 2.121803, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {2 {7 {6}}}) -> [6]", "(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {6 {1 {2 {1}}} {3 {2 {2} {1}}}}) -> [1 2 1]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.309629, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {}) -> []", "(leaves {5 {1 {3 {8}}} {9 {1 {9}}}}) -> [8 9]", "(leaves {4 {1} {4}}) -> [1 4]", "(leaves {4 {9} {9}}) -> [9 9]", "(leaves {9}) -> [9]", "(leaves {5 {5 {4 {4} {6}} {4 {8}}} {0 {0 {0} {3}}}}) -> [4 6 8 0 3]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.753172, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4 {7}}) -> [7]", "(leaves {5 {0}}) -> [0]", "(leaves {0 {0 {7 {5}} {8}} {6}}) -> [5 8 6]", "(leaves {4}) -> [4]", "(leaves {}) -> []", "(leaves {}) -> []"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
{"time": 1.578501, "name": "leaves", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3 {7 {9 {5} {6}}} {7 {6 {3} {8}}}}) -> [5 6 3 8]", "(leaves {4 {8 {8 {8}} {5}} {8 {5 {4} {6}} {6 {8}}}}) -> [8 5 4 6 8]", "(leaves {0}) -> [0]", "(leaves {2}) -> [2]"], "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)"}
