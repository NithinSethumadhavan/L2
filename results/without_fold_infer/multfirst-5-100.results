{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [3 7 3 8]) -> [3 3 3 3]", "(multfirst [3 7 7 3]) -> [3 3 3 3]", "(multfirst [2 5]) -> [2 2]"], "time": 0.027037}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [4]) -> [4]", "(multfirst [4 3 0]) -> [4 4 4]"], "time": 0.026435}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [6 8 4]) -> [6 6 6]", "(multfirst [1 5 1 8 9]) -> [1 1 1 1 1]", "(multfirst [8 5 6]) -> [8 8 8]"], "time": 0.036942}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [5 5 2 0]) -> [5 5 5 5]", "(multfirst [6 6]) -> [6 6]", "(multfirst [2 7]) -> [2 2]"], "time": 0.035206}
{"solution": "(let multfirst (let a (lambda (b) b) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [3]) -> [3]", "(multfirst [8]) -> [8]", "(multfirst [5]) -> [5]"], "time": 0.000559}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7 2 9 8]) -> [7 7 7 7]", "(multfirst [3 1 1]) -> [3 3 3]"], "time": 0.039101}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [5]) -> [5]", "(multfirst [0 6 5 2 7]) -> [0 0 0 0 0]"], "time": 0.034071}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [6 9 7]) -> [6 6 6]", "(multfirst [3 1 4]) -> [3 3 3]", "(multfirst [3 2 5 5]) -> [3 3 3 3]"], "time": 0.029789}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [3 6 4]) -> [3 3 3]", "(multfirst []) -> []", "(multfirst [5 5 7 6 4]) -> [5 5 5 5 5]"], "time": 0.032781}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [1 9 4 8]) -> [1 1 1 1]", "(multfirst [3 5 3 6]) -> [3 3 3 3]", "(multfirst [4 5]) -> [4 4]"], "time": 0.036422}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [5 0 0 7]) -> [5 5 5 5]", "(multfirst [9]) -> [9]", "(multfirst []) -> []"], "time": 0.023085}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [2 9 0]) -> [2 2 2]", "(multfirst [7 8 5]) -> [7 7 7]", "(multfirst []) -> []"], "time": 0.023444}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [9 8 1]) -> [9 9 9]", "(multfirst [8 4 0 2 5]) -> [8 8 8 8 8]", "(multfirst [1 0 3 7 8]) -> [1 1 1 1 1]"], "time": 0.023898}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [3 9 3]) -> [3 3 3]", "(multfirst []) -> []", "(multfirst [3 8 8]) -> [3 3 3]"], "time": 0.024056}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [4]) -> [4]", "(multfirst [0 3 5 6 2]) -> [0 0 0 0 0]", "(multfirst [9 4 0 1 3]) -> [9 9 9 9 9]"], "time": 0.02216}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [5 0 4 4]) -> [5 5 5 5]", "(multfirst [1 8 0]) -> [1 1 1]", "(multfirst [5 8]) -> [5 5]"], "time": 0.024517}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [8 4 1]) -> [8 8 8]", "(multfirst [5 3 8]) -> [5 5 5]", "(multfirst [5]) -> [5]"], "time": 0.021783}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [7 2 6 2]) -> [7 7 7 7]", "(multfirst [4 4]) -> [4 4]", "(multfirst [9 3 3 4 1]) -> [9 9 9 9 9]"], "time": 0.034192}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [0 9 7 2]) -> [0 0 0 0]", "(multfirst [3 3]) -> [3 3]", "(multfirst []) -> []"], "time": 0.032532}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [7 5 2 8 3]) -> [7 7 7 7 7]", "(multfirst []) -> []", "(multfirst [4 0 3 6]) -> [4 4 4 4]"], "time": 0.02374}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [6 8]) -> [6 6]", "(multfirst [8 8 2 9]) -> [8 8 8 8]", "(multfirst [9 1 3 3]) -> [9 9 9 9]"], "time": 0.023632}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [6 7 1 1 7]) -> [6 6 6 6 6]", "(multfirst []) -> []", "(multfirst [6 7]) -> [6 6]"], "time": 0.029123}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [5 1 7]) -> [5 5 5]", "(multfirst [2 9]) -> [2 2]", "(multfirst [9 1 2]) -> [9 9 9]"], "time": 0.024942}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [4]) -> [4]", "(multfirst [2 3]) -> [2 2]", "(multfirst [4 0 3 3 4]) -> [4 4 4 4 4]"], "time": 0.03509}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [3 6]) -> [3 3]", "(multfirst [5]) -> [5]", "(multfirst [7]) -> [7]"], "time": 0.031277}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [5 8]) -> [5 5]", "(multfirst [8 5 9]) -> [8 8 8]"], "time": 0.028236}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [7 8]) -> [7 7]", "(multfirst [5 7 4]) -> [5 5 5]", "(multfirst [7 3 2]) -> [7 7 7]"], "time": 0.025741}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [4 0 5]) -> [4 4 4]", "(multfirst [5 4 4 5 0]) -> [5 5 5 5 5]", "(multfirst [6 3]) -> [6 6]"], "time": 0.024053}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [0 1]) -> [0 0]", "(multfirst [4 2 8 8 2]) -> [4 4 4 4 4]", "(multfirst [2 1 7]) -> [2 2 2]"], "time": 0.022948}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [2 8 4]) -> [2 2 2]", "(multfirst []) -> []", "(multfirst [0 4 2]) -> [0 0 0]"], "time": 0.024108}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [0 4]) -> [0 0]", "(multfirst [5 1 8 9 6]) -> [5 5 5 5 5]", "(multfirst [2 7 5 6 6]) -> [2 2 2 2 2]"], "time": 0.025905}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [6 8 6 8]) -> [6 6 6 6]", "(multfirst []) -> []", "(multfirst []) -> []"], "time": 0.027762}
{"solution": "(let multfirst (let a (lambda (b) b) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7]) -> [7]", "(multfirst []) -> []"], "time": 0.000356}
{"solution": "(let multfirst (let a (lambda (b) b) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [5 5]) -> [5 5]", "(multfirst [9]) -> [9]", "(multfirst [1]) -> [1]"], "time": 0.000346}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [7]) -> [7]", "(multfirst [8 3 7 5 5]) -> [8 8 8 8 8]", "(multfirst []) -> []"], "time": 0.029098}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [0 2 6]) -> [0 0 0]", "(multfirst []) -> []", "(multfirst [4 0]) -> [4 4]"], "time": 0.033243}
{"solution": "(let multfirst (let a (lambda (b) b) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [0]) -> [0]", "(multfirst [9]) -> [9]", "(multfirst [7]) -> [7]"], "time": 0.000373}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [0 2 7]) -> [0 0 0]", "(multfirst [7]) -> [7]", "(multfirst [4 9 9 6]) -> [4 4 4 4]"], "time": 0.029421}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [7 0 0]) -> [7 7 7]", "(multfirst []) -> []", "(multfirst [9 7 3]) -> [9 9 9]"], "time": 0.03418}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [7 6 2 6 4]) -> [7 7 7 7 7]", "(multfirst [4 8]) -> [4 4]", "(multfirst []) -> []"], "time": 0.03088}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7]) -> [7]", "(multfirst [3 2 1 9]) -> [3 3 3 3]"], "time": 0.023732}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [6]) -> [6]", "(multfirst [1 2]) -> [1 1]", "(multfirst [8 7 0]) -> [8 8 8]"], "time": 0.026137}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [2 4]) -> [2 2]", "(multfirst [8]) -> [8]", "(multfirst []) -> []"], "time": 0.02665}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [8]) -> [8]", "(multfirst []) -> []", "(multfirst [9 0 6 1 1]) -> [9 9 9 9 9]"], "time": 0.023939}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [2 9 0 2 6]) -> [2 2 2 2 2]", "(multfirst [8 7 6 6 7]) -> [8 8 8 8 8]", "(multfirst [1 2 5 1 0]) -> [1 1 1 1 1]"], "time": 0.037145}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [9 3]) -> [9 9]", "(multfirst [8 6 8 3 0]) -> [8 8 8 8 8]", "(multfirst [7 8 4 8]) -> [7 7 7 7]"], "time": 0.031163}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [6 3]) -> [6 6]", "(multfirst []) -> []"], "time": 0.025132}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [2]) -> [2]", "(multfirst [4 8]) -> [4 4]", "(multfirst [3 9 8]) -> [3 3 3]"], "time": 0.029694}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [8 3]) -> [8 8]", "(multfirst [6 9 4 8]) -> [6 6 6 6]", "(multfirst [8 5]) -> [8 8]"], "time": 0.025758}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [8 5]) -> [8 8]", "(multfirst []) -> []", "(multfirst [1 0 0]) -> [1 1 1]"], "time": 0.035108}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [3 4]) -> [3 3]", "(multfirst [9 4]) -> [9 9]", "(multfirst [0 8 3]) -> [0 0 0]"], "time": 0.023072}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [5 4 3 6]) -> [5 5 5 5]", "(multfirst [6 5]) -> [6 6]", "(multfirst [6 1 4 5]) -> [6 6 6 6]"], "time": 0.022467}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [1 5 4 7 8]) -> [1 1 1 1 1]", "(multfirst []) -> []", "(multfirst [4 0 7]) -> [4 4 4]"], "time": 0.021699}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [3 2]) -> [3 3]", "(multfirst [2 7 6]) -> [2 2 2]", "(multfirst [0 4 4 5 9]) -> [0 0 0 0 0]"], "time": 0.021953}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [8 6 8]) -> [8 8 8]", "(multfirst [7]) -> [7]", "(multfirst [2 5 3 8 5]) -> [2 2 2 2 2]"], "time": 0.035923}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [2 9]) -> [2 2]", "(multfirst [7 7 3]) -> [7 7 7]", "(multfirst [5 7 3 3]) -> [5 5 5 5]"], "time": 0.023032}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [5 6 7 2]) -> [5 5 5 5]", "(multfirst [3 0 5 2]) -> [3 3 3 3]", "(multfirst [3 0]) -> [3 3]"], "time": 0.03573}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [3 1]) -> [3 3]", "(multfirst [1 4]) -> [1 1]", "(multfirst [9 4]) -> [9 9]"], "time": 0.038526}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [2 2 6 2 8]) -> [2 2 2 2 2]", "(multfirst [4 6]) -> [4 4]", "(multfirst [7 3 8 7 6]) -> [7 7 7 7 7]"], "time": 0.031436}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [7 6 5]) -> [7 7 7]", "(multfirst [4 0]) -> [4 4]", "(multfirst [0 9]) -> [0 0]"], "time": 0.033744}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [7]) -> [7]", "(multfirst [9 9 9 2 2]) -> [9 9 9 9 9]", "(multfirst []) -> []"], "time": 0.02266}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [2 1]) -> [2 2]", "(multfirst [1 6 4 9 9]) -> [1 1 1 1 1]", "(multfirst [4 1 1]) -> [4 4 4]"], "time": 0.022978}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [5 8]) -> [5 5]", "(multfirst []) -> []", "(multfirst [6 6]) -> [6 6]"], "time": 0.02339}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [1 0]) -> [1 1]", "(multfirst [7]) -> [7]", "(multfirst [2 6]) -> [2 2]"], "time": 0.037642}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [2 0 4 8 4]) -> [2 2 2 2 2]"], "time": 0.025082}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [8 7 4 2]) -> [8 8 8 8]", "(multfirst [5 0 8]) -> [5 5 5]"], "time": 0.025843}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [5 4 2 5 0]) -> [5 5 5 5 5]", "(multfirst [3 7 2 3]) -> [3 3 3 3]", "(multfirst [6 5 5 6 7]) -> [6 6 6 6 6]"], "time": 0.021718}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [2 9]) -> [2 2]", "(multfirst [3 8 8 3 6]) -> [3 3 3 3 3]", "(multfirst [8 4 9 5]) -> [8 8 8 8]"], "time": 0.021803}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [3]) -> [3]", "(multfirst [1 0 9]) -> [1 1 1]", "(multfirst [7 8]) -> [7 7]"], "time": 0.036718}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [5 7]) -> [5 5]", "(multfirst [2 0]) -> [2 2]", "(multfirst []) -> []"], "time": 0.029268}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [9 0 7]) -> [9 9 9]", "(multfirst [1 1 7 2 9]) -> [1 1 1 1 1]"], "time": 0.033144}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [3 9]) -> [3 3]", "(multfirst []) -> []", "(multfirst [0]) -> [0]"], "time": 0.022813}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [6 7 8 0 9]) -> [6 6 6 6 6]", "(multfirst [9]) -> [9]", "(multfirst [0]) -> [0]"], "time": 0.028742}
{"solution": "(let multfirst (let a (lambda (b) b) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [2]) -> [2]"], "time": 0.000568}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [9 4 3]) -> [9 9 9]", "(multfirst [7]) -> [7]", "(multfirst [3 7 4 9 3]) -> [3 3 3 3 3]"], "time": 0.029793}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [9 5]) -> [9 9]", "(multfirst []) -> []", "(multfirst [3]) -> [3]"], "time": 0.023909}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [6]) -> [6]", "(multfirst [6 0 0 7 2]) -> [6 6 6 6 6]", "(multfirst []) -> []"], "time": 0.027686}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [4 4 5 5]) -> [4 4 4 4]", "(multfirst [5 0]) -> [5 5]", "(multfirst [1 5 6]) -> [1 1 1]"], "time": 0.024842}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [5 8 3]) -> [5 5 5]", "(multfirst [6 8]) -> [6 6]", "(multfirst [6 6]) -> [6 6]"], "time": 0.025087}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [7 7 8 7]) -> [7 7 7 7]", "(multfirst []) -> []", "(multfirst []) -> []"], "time": 0.027393}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [0 1 8 2]) -> [0 0 0 0]", "(multfirst [5 4]) -> [5 5]", "(multfirst []) -> []"], "time": 0.0262}
{"solution": "(let multfirst (let a (lambda (b) b) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [4]) -> [4]", "(multfirst []) -> []"], "time": 0.000608}
{"solution": "(let multfirst (let a (lambda (b) b) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [1 1]) -> [1 1]", "(multfirst []) -> []", "(multfirst []) -> []"], "time": 0.000339}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [1 3 1 0]) -> [1 1 1 1]", "(multfirst []) -> []", "(multfirst [9 6 3]) -> [9 9 9]"], "time": 0.031871}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [8 0 7 6 3]) -> [8 8 8 8 8]", "(multfirst [5]) -> [5]", "(multfirst [3]) -> [3]"], "time": 0.035105}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [2]) -> [2]", "(multfirst [5 3]) -> [5 5]", "(multfirst [9 7 7 0]) -> [9 9 9 9]"], "time": 0.030963}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [9]) -> [9]", "(multfirst [8 1 0 8 7]) -> [8 8 8 8 8]"], "time": 0.02275}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [8 8 8 8 9]) -> [8 8 8 8 8]", "(multfirst [3 3 1 5 6]) -> [3 3 3 3 3]", "(multfirst [0 4]) -> [0 0]"], "time": 0.022747}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7 4]) -> [7 7]", "(multfirst [6 7 7 2]) -> [6 6 6 6]"], "time": 0.021845}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [1 8]) -> [1 1]", "(multfirst [0 2]) -> [0 0]", "(multfirst [5]) -> [5]"], "time": 0.023492}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [1 6 9 3]) -> [1 1 1 1]", "(multfirst [4 6 6]) -> [4 4 4]", "(multfirst [9 6 2 6 9]) -> [9 9 9 9 9]"], "time": 0.022905}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [5 2]) -> [5 5]", "(multfirst [6]) -> [6]", "(multfirst [4 4 6 1 4]) -> [4 4 4 4 4]"], "time": 0.030627}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [1 0 6]) -> [1 1 1]", "(multfirst [8 8 3]) -> [8 8 8]", "(multfirst []) -> []"], "time": 0.033241}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst [7 1]) -> [7 7]", "(multfirst []) -> []"], "time": 0.02354}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [3 6 4 9 2]) -> [3 3 3 3 3]", "(multfirst []) -> []", "(multfirst []) -> []"], "time": 0.028994}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [3]) -> [3]", "(multfirst []) -> []", "(multfirst [4 3]) -> [4 4]"], "time": 0.034031}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [9 9 6 2]) -> [9 9 9 9]", "(multfirst [5 0 7]) -> [5 5 5]"], "time": 0.022042}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [6 6]) -> [6 6]", "(multfirst [0 4 9 9 5]) -> [0 0 0 0 0]", "(multfirst [9 3]) -> [9 9]"], "time": 0.021358}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [7 5 6 9 0]) -> [7 7 7 7 7]", "(multfirst [2 1 6 6 0]) -> [2 2 2 2 2]", "(multfirst [4 0 2]) -> [4 4 4]"], "time": 0.021549}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [4]) -> [4]", "(multfirst [0 1 7]) -> [0 0 0]", "(multfirst [2]) -> [2]"], "time": 0.021042}
