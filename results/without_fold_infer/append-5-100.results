{"examples": ["(append [] 1) -> [1]", "(append [8 7] 6) -> [8 7 6]", "(append [] 5) -> [5]", "(append [5 9 7] 7) -> [5 9 7 7]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.900127}
{"examples": ["(append [] 6) -> [6]", "(append [4 4 8 5 4] 5) -> [4 4 8 5 4 5]", "(append [] 7) -> [7]", "(append [1 1 4 9] 2) -> [1 1 4 9 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.884116}
{"examples": ["(append [] 5) -> [5]", "(append [5] 7) -> [5 7]", "(append [1 5 6] 3) -> [1 5 6 3]", "(append [1 6 8] 3) -> [1 6 8 3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.921272}
{"examples": ["(append [] 5) -> [5]", "(append [0 4 0 2 7] 6) -> [0 4 0 2 7 6]", "(append [6 1 9] 3) -> [6 1 9 3]", "(append [0] 8) -> [0 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.976104}
{"examples": ["(append [] 7) -> [7]", "(append [] 9) -> [9]", "(append [0 4 7] 7) -> [0 4 7 7]", "(append [6 4 4 2] 2) -> [6 4 4 2 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.86367}
{"examples": ["(append [] 0) -> [0]", "(append [7 9] 9) -> [7 9 9]", "(append [0 7] 1) -> [0 7 1]", "(append [2 3] 0) -> [2 3 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.958524}
{"examples": ["(append [] 3) -> [3]", "(append [2 2 6 0 3] 4) -> [2 2 6 0 3 4]", "(append [] 1) -> [1]", "(append [1 4] 6) -> [1 4 6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.933771}
{"examples": ["(append [] 2) -> [2]", "(append [6] 6) -> [6 6]", "(append [] 9) -> [9]", "(append [] 0) -> [0]"], "solution": "(let append (let a (lambda (c b) (cons b c)) _) _)", "name": "append", "time": 0.003602}
{"examples": ["(append [] 5) -> [5]", "(append [] 1) -> [1]", "(append [0 6 7 9] 3) -> [0 6 7 9 3]", "(append [4 2 0 6] 4) -> [4 2 0 6 4]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.111617}
{"examples": ["(append [] 0) -> [0]", "(append [8 1 6] 7) -> [8 1 6 7]", "(append [7 5 6] 2) -> [7 5 6 2]", "(append [7 0 5 9] 0) -> [7 0 5 9 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.085485}
{"examples": ["(append [] 9) -> [9]", "(append [8 0 2 3 5] 2) -> [8 0 2 3 5 2]", "(append [0 2 3 5] 1) -> [0 2 3 5 1]", "(append [] 2) -> [2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.106364}
{"examples": ["(append [] 7) -> [7]", "(append [2 5] 5) -> [2 5 5]", "(append [1] 1) -> [1 1]", "(append [] 1) -> [1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.118597}
{"examples": ["(append [] 1) -> [1]", "(append [6 0 3 4] 3) -> [6 0 3 4 3]", "(append [2] 1) -> [2 1]", "(append [6] 8) -> [6 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.120891}
{"examples": ["(append [] 2) -> [2]", "(append [0 6 3 3] 0) -> [0 6 3 3 0]", "(append [5] 4) -> [5 4]", "(append [7] 2) -> [7 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.181379}
{"examples": ["(append [] 9) -> [9]", "(append [9 5 2 8] 5) -> [9 5 2 8 5]", "(append [8 5 5 1 8] 9) -> [8 5 5 1 8 9]", "(append [2 3 2] 6) -> [2 3 2 6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.159609}
{"examples": ["(append [] 5) -> [5]", "(append [] 2) -> [2]", "(append [] 2) -> [2]", "(append [5 4] 8) -> [5 4 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.18702}
{"examples": ["(append [] 0) -> [0]", "(append [4 7 1 6] 6) -> [4 7 1 6 6]", "(append [1 0] 3) -> [1 0 3]", "(append [] 9) -> [9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.174233}
{"examples": ["(append [] 3) -> [3]", "(append [3 2 6 6 6] 9) -> [3 2 6 6 6 9]", "(append [] 5) -> [5]", "(append [4 3 9] 1) -> [4 3 9 1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.761792}
{"examples": ["(append [] 8) -> [8]", "(append [2 0] 5) -> [2 0 5]", "(append [3 6 5] 1) -> [3 6 5 1]", "(append [8 2 1 1] 5) -> [8 2 1 1 5]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.759174}
{"examples": ["(append [] 1) -> [1]", "(append [8 5 1 5] 0) -> [8 5 1 5 0]", "(append [3 3 1 0] 0) -> [3 3 1 0 0]", "(append [1 9 5 6] 2) -> [1 9 5 6 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.916332}
{"examples": ["(append [] 7) -> [7]", "(append [1 4 0 3 9] 2) -> [1 4 0 3 9 2]", "(append [0 5 0 4] 5) -> [0 5 0 4 5]", "(append [2 7 3] 4) -> [2 7 3 4]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.688644}
{"examples": ["(append [] 9) -> [9]", "(append [8 3] 1) -> [8 3 1]", "(append [8 0 4 2 8] 5) -> [8 0 4 2 8 5]", "(append [5 8 1] 7) -> [5 8 1 7]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.035939}
{"examples": ["(append [] 4) -> [4]", "(append [1 4] 3) -> [1 4 3]", "(append [9 3 0 9] 4) -> [9 3 0 9 4]", "(append [6] 9) -> [6 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.715024}
{"examples": ["(append [] 9) -> [9]", "(append [2 9 8 4 5] 0) -> [2 9 8 4 5 0]", "(append [0] 9) -> [0 9]", "(append [9 6 3 0 4] 4) -> [9 6 3 0 4 4]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.980401}
{"examples": ["(append [] 0) -> [0]", "(append [3] 7) -> [3 7]", "(append [1 9 6 6] 3) -> [1 9 6 6 3]", "(append [1 6 9 8 8] 5) -> [1 6 9 8 8 5]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.667862}
{"examples": ["(append [] 4) -> [4]", "(append [] 1) -> [1]", "(append [4 7 8 7] 7) -> [4 7 8 7 7]", "(append [0 9 4 8] 4) -> [0 9 4 8 4]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.026365}
{"examples": ["(append [] 5) -> [5]", "(append [4 3 1] 3) -> [4 3 1 3]", "(append [9] 5) -> [9 5]", "(append [3 8] 9) -> [3 8 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.056888}
{"examples": ["(append [] 8) -> [8]", "(append [9] 7) -> [9 7]", "(append [8 5 1 5 8] 4) -> [8 5 1 5 8 4]", "(append [6 5 3 1 2] 1) -> [6 5 3 1 2 1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.21179}
{"examples": ["(append [] 2) -> [2]", "(append [] 3) -> [3]", "(append [4 6 2 5] 4) -> [4 6 2 5 4]", "(append [1 3 7] 3) -> [1 3 7 3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.144889}
{"examples": ["(append [] 4) -> [4]", "(append [1 4] 8) -> [1 4 8]", "(append [6 8 6 0 9] 3) -> [6 8 6 0 9 3]", "(append [5 8] 3) -> [5 8 3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.038268}
{"examples": ["(append [] 9) -> [9]", "(append [0 6] 2) -> [0 6 2]", "(append [1 7] 8) -> [1 7 8]", "(append [8 5 8 1] 0) -> [8 5 8 1 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.091473}
{"examples": ["(append [] 9) -> [9]", "(append [7 0 1 2] 1) -> [7 0 1 2 1]", "(append [9 9 0] 5) -> [9 9 0 5]", "(append [7 0 5 3] 7) -> [7 0 5 3 7]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.183034}
{"examples": ["(append [] 7) -> [7]", "(append [] 1) -> [1]", "(append [1 3] 4) -> [1 3 4]", "(append [] 3) -> [3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.222219}
{"examples": ["(append [] 1) -> [1]", "(append [8 4 0 3] 4) -> [8 4 0 3 4]", "(append [4 3 4 5 6] 4) -> [4 3 4 5 6 4]", "(append [9 4] 9) -> [9 4 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.699429}
{"examples": ["(append [] 2) -> [2]", "(append [6 4 3 7] 3) -> [6 4 3 7 3]", "(append [9 8] 4) -> [9 8 4]", "(append [5] 5) -> [5 5]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.75497}
{"examples": ["(append [] 7) -> [7]", "(append [6 2 6] 8) -> [6 2 6 8]", "(append [9 5 5 2] 2) -> [9 5 5 2 2]", "(append [5 3 6 5 6] 4) -> [5 3 6 5 6 4]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.740096}
{"examples": ["(append [] 8) -> [8]", "(append [1 4 3 9] 7) -> [1 4 3 9 7]", "(append [8 3] 3) -> [8 3 3]", "(append [] 6) -> [6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.798238}
{"examples": ["(append [] 6) -> [6]", "(append [1 3 6 8] 9) -> [1 3 6 8 9]", "(append [7 3 7 4 3] 4) -> [7 3 7 4 3 4]", "(append [3] 4) -> [3 4]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.873424}
{"examples": ["(append [] 7) -> [7]", "(append [2 8 2] 0) -> [2 8 2 0]", "(append [7 7 6 9 3] 3) -> [7 7 6 9 3 3]", "(append [0 8 4 7] 7) -> [0 8 4 7 7]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.758032}
{"examples": ["(append [] 2) -> [2]", "(append [8 7 6 2 7] 4) -> [8 7 6 2 7 4]", "(append [7] 3) -> [7 3]", "(append [] 8) -> [8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.969985}
{"examples": ["(append [] 0) -> [0]", "(append [] 3) -> [3]", "(append [8] 8) -> [8 8]", "(append [1 8] 4) -> [1 8 4]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.993465}
{"examples": ["(append [] 5) -> [5]", "(append [7 4 6 1] 7) -> [7 4 6 1 7]", "(append [8 0 4 7 7] 9) -> [8 0 4 7 7 9]", "(append [] 9) -> [9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.95643}
{"examples": ["(append [] 6) -> [6]", "(append [5 5 1 5 0] 6) -> [5 5 1 5 0 6]", "(append [2] 6) -> [2 6]", "(append [1 8] 5) -> [1 8 5]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.59986}
{"examples": ["(append [] 1) -> [1]", "(append [4 2 3 8] 7) -> [4 2 3 8 7]", "(append [4 3 6 4] 2) -> [4 3 6 4 2]", "(append [5] 0) -> [5 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.997421}
{"examples": ["(append [] 4) -> [4]", "(append [0 9 2 0 3] 1) -> [0 9 2 0 3 1]", "(append [] 4) -> [4]", "(append [1 5] 0) -> [1 5 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.619799}
{"examples": ["(append [] 1) -> [1]", "(append [5 8 2 2] 1) -> [5 8 2 2 1]", "(append [9 5] 5) -> [9 5 5]", "(append [0 3 9 9] 6) -> [0 3 9 9 6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.564593}
{"examples": ["(append [] 7) -> [7]", "(append [8 7 0 4] 3) -> [8 7 0 4 3]", "(append [0 6 8] 6) -> [0 6 8 6]", "(append [7 9 1 5 3] 9) -> [7 9 1 5 3 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.566238}
{"examples": ["(append [] 1) -> [1]", "(append [0 3 1 5] 1) -> [0 3 1 5 1]", "(append [3] 5) -> [3 5]", "(append [6 6] 5) -> [6 6 5]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.663067}
{"examples": ["(append [] 5) -> [5]", "(append [2] 8) -> [2 8]", "(append [2] 4) -> [2 4]", "(append [0 6 5] 2) -> [0 6 5 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.096031}
{"examples": ["(append [] 7) -> [7]", "(append [] 0) -> [0]", "(append [2] 1) -> [2 1]", "(append [4 5 0 3] 7) -> [4 5 0 3 7]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.59195}
{"examples": ["(append [] 9) -> [9]", "(append [4 5] 5) -> [4 5 5]", "(append [0] 0) -> [0 0]", "(append [9 8 8] 7) -> [9 8 8 7]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.136713}
{"examples": ["(append [] 7) -> [7]", "(append [8 0 9 3 7] 3) -> [8 0 9 3 7 3]", "(append [0 3 0 8 8] 1) -> [0 3 0 8 8 1]", "(append [8] 4) -> [8 4]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.498259}
{"examples": ["(append [] 4) -> [4]", "(append [4 6 8 3] 0) -> [4 6 8 3 0]", "(append [6 3] 5) -> [6 3 5]", "(append [4] 2) -> [4 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.216904}
{"examples": ["(append [] 8) -> [8]", "(append [1 0 7 5] 1) -> [1 0 7 5 1]", "(append [4 6 4 4] 3) -> [4 6 4 4 3]", "(append [6 1 3] 0) -> [6 1 3 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.127961}
{"examples": ["(append [] 0) -> [0]", "(append [8 9 1 5 5] 2) -> [8 9 1 5 5 2]", "(append [6 5] 7) -> [6 5 7]", "(append [4 8 1] 2) -> [4 8 1 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.154757}
{"examples": ["(append [] 8) -> [8]", "(append [0 4 3] 0) -> [0 4 3 0]", "(append [2 1 6] 5) -> [2 1 6 5]", "(append [1 1 6 5] 9) -> [1 1 6 5 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.207585}
{"examples": ["(append [] 7) -> [7]", "(append [4 3 5 3 5] 7) -> [4 3 5 3 5 7]", "(append [0] 1) -> [0 1]", "(append [0 1 6 7] 6) -> [0 1 6 7 6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.535233}
{"examples": ["(append [] 1) -> [1]", "(append [2] 9) -> [2 9]", "(append [] 8) -> [8]", "(append [0 9 0 2] 9) -> [0 9 0 2 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.581197}
{"examples": ["(append [] 6) -> [6]", "(append [2 7] 9) -> [2 7 9]", "(append [9 7] 4) -> [9 7 4]", "(append [7] 3) -> [7 3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.559924}
{"examples": ["(append [] 4) -> [4]", "(append [1 0 1] 1) -> [1 0 1 1]", "(append [1 0] 3) -> [1 0 3]", "(append [2 3 8] 3) -> [2 3 8 3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.562687}
{"examples": ["(append [] 6) -> [6]", "(append [] 9) -> [9]", "(append [7 1] 9) -> [7 1 9]", "(append [0 2 2] 2) -> [0 2 2 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.60092}
{"examples": ["(append [] 3) -> [3]", "(append [8 6 0] 9) -> [8 6 0 9]", "(append [4] 8) -> [4 8]", "(append [0 3 9 3] 5) -> [0 3 9 3 5]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.302239}
{"examples": ["(append [] 0) -> [0]", "(append [4 9] 0) -> [4 9 0]", "(append [9 8 6] 0) -> [9 8 6 0]", "(append [0 9 7] 4) -> [0 9 7 4]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.314932}
{"examples": ["(append [] 0) -> [0]", "(append [5 6 3 8] 7) -> [5 6 3 8 7]", "(append [8 9] 7) -> [8 9 7]", "(append [8 8] 8) -> [8 8 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.232775}
{"examples": ["(append [] 4) -> [4]", "(append [4 9] 0) -> [4 9 0]", "(append [0 3 1 3] 9) -> [0 3 1 3 9]", "(append [7 5 7 5 2] 6) -> [7 5 7 5 2 6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.304604}
{"examples": ["(append [] 3) -> [3]", "(append [] 6) -> [6]", "(append [6 2 8 3] 6) -> [6 2 8 3 6]", "(append [8 8] 2) -> [8 8 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.395252}
{"examples": ["(append [] 0) -> [0]", "(append [] 2) -> [2]", "(append [7 2 6 7 8] 8) -> [7 2 6 7 8 8]", "(append [2 5 6] 3) -> [2 5 6 3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.51883}
{"examples": ["(append [] 2) -> [2]", "(append [4 7 6] 7) -> [4 7 6 7]", "(append [6 5] 9) -> [6 5 9]", "(append [3] 2) -> [3 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.035202}
{"examples": ["(append [] 9) -> [9]", "(append [8] 5) -> [8 5]", "(append [7 7 1 5] 2) -> [7 7 1 5 2]", "(append [9 5 8 9 8] 3) -> [9 5 8 9 8 3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.547101}
{"examples": ["(append [] 6) -> [6]", "(append [4] 4) -> [4 4]", "(append [6] 4) -> [6 4]", "(append [4 6] 4) -> [4 6 4]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.269024}
{"examples": ["(append [] 2) -> [2]", "(append [] 9) -> [9]", "(append [6] 3) -> [6 3]", "(append [] 1) -> [1]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.608716}
{"examples": ["(append [] 3) -> [3]", "(append [6 1] 4) -> [6 1 4]", "(append [2 8 6 4] 4) -> [2 8 6 4 4]", "(append [] 0) -> [0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.195733}
{"examples": ["(append [] 9) -> [9]", "(append [4] 3) -> [4 3]", "(append [7 5 3 8] 7) -> [7 5 3 8 7]", "(append [9 2 4] 9) -> [9 2 4 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.56358}
{"examples": ["(append [] 5) -> [5]", "(append [4 3 9 1 8] 5) -> [4 3 9 1 8 5]", "(append [2 9] 1) -> [2 9 1]", "(append [] 0) -> [0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.26396}
{"examples": ["(append [] 6) -> [6]", "(append [1 7] 2) -> [1 7 2]", "(append [5 2 1 2] 6) -> [5 2 1 2 6]", "(append [8 8 8 1 3] 7) -> [8 8 8 1 3 7]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.621123}
{"examples": ["(append [] 8) -> [8]", "(append [1 6] 1) -> [1 6 1]", "(append [5 6 9 2 3] 9) -> [5 6 9 2 3 9]", "(append [1 1 4] 6) -> [1 1 4 6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.977122}
{"examples": ["(append [] 9) -> [9]", "(append [2 5] 6) -> [2 5 6]", "(append [5 6 5] 9) -> [5 6 5 9]", "(append [] 9) -> [9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.795675}
{"examples": ["(append [] 9) -> [9]", "(append [] 8) -> [8]", "(append [] 6) -> [6]", "(append [0 4 3 9 3] 5) -> [0 4 3 9 3 5]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.933537}
{"examples": ["(append [] 1) -> [1]", "(append [] 9) -> [9]", "(append [3 9 5 0] 7) -> [3 9 5 0 7]", "(append [6 4 8 8] 6) -> [6 4 8 8 6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.749013}
{"examples": ["(append [] 1) -> [1]", "(append [0 9] 5) -> [0 9 5]", "(append [8 2 4] 7) -> [8 2 4 7]", "(append [6 4 0] 8) -> [6 4 0 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.837263}
{"examples": ["(append [] 3) -> [3]", "(append [5 8] 0) -> [5 8 0]", "(append [9] 2) -> [9 2]", "(append [9] 9) -> [9 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.867457}
{"examples": ["(append [] 4) -> [4]", "(append [4 7 3 4 0] 4) -> [4 7 3 4 0 4]", "(append [] 8) -> [8]", "(append [9 6 4 0 0] 1) -> [9 6 4 0 0 1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.554974}
{"examples": ["(append [] 2) -> [2]", "(append [7 4 7] 0) -> [7 4 7 0]", "(append [] 9) -> [9]", "(append [] 6) -> [6]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.319624}
{"examples": ["(append [] 1) -> [1]", "(append [6 0 2 6] 1) -> [6 0 2 6 1]", "(append [2 1 2 6] 3) -> [2 1 2 6 3]", "(append [1 2 3 4 8] 3) -> [1 2 3 4 8 3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.524722}
{"examples": ["(append [] 6) -> [6]", "(append [7 7] 2) -> [7 7 2]", "(append [7] 5) -> [7 5]", "(append [4 6 3 2 9] 0) -> [4 6 3 2 9 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.917975}
{"examples": ["(append [] 7) -> [7]", "(append [4] 2) -> [4 2]", "(append [8] 7) -> [8 7]", "(append [4 0 9 3 0] 1) -> [4 0 9 3 0 1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.609775}
{"examples": ["(append [] 7) -> [7]", "(append [0 1 4] 2) -> [0 1 4 2]", "(append [7 9] 9) -> [7 9 9]", "(append [8 2] 0) -> [8 2 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.056938}
{"examples": ["(append [] 5) -> [5]", "(append [1] 0) -> [1 0]", "(append [9 5 7 4] 7) -> [9 5 7 4 7]", "(append [2 9] 6) -> [2 9 6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.050385}
{"examples": ["(append [] 4) -> [4]", "(append [0 1 2 5] 3) -> [0 1 2 5 3]", "(append [1 6 8 1 2] 6) -> [1 6 8 1 2 6]", "(append [] 0) -> [0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.133706}
{"examples": ["(append [] 1) -> [1]", "(append [6 7 8] 8) -> [6 7 8 8]", "(append [2 6 4 1 4] 6) -> [2 6 4 1 4 6]", "(append [8 3 1] 2) -> [8 3 1 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.046803}
{"examples": ["(append [] 5) -> [5]", "(append [2 4 0 2] 8) -> [2 4 0 2 8]", "(append [3 4 2 0] 6) -> [3 4 2 0 6]", "(append [2] 9) -> [2 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.882259}
{"examples": ["(append [] 2) -> [2]", "(append [6 6 7 5] 7) -> [6 6 7 5 7]", "(append [0] 6) -> [0 6]", "(append [6 0 9] 8) -> [6 0 9 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.984641}
{"examples": ["(append [] 3) -> [3]", "(append [8 6] 2) -> [8 6 2]", "(append [1 1] 3) -> [1 1 3]", "(append [5 9 1] 7) -> [5 9 1 7]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.561526}
{"examples": ["(append [] 6) -> [6]", "(append [4 6 7 0] 7) -> [4 6 7 0 7]", "(append [] 7) -> [7]", "(append [] 7) -> [7]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.551935}
{"examples": ["(append [] 2) -> [2]", "(append [8 9] 4) -> [8 9 4]", "(append [8 1 1 3] 1) -> [8 1 1 3 1]", "(append [5 3 7] 0) -> [5 3 7 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.937625}
{"examples": ["(append [] 5) -> [5]", "(append [] 0) -> [0]", "(append [1 0 5 7 6] 0) -> [1 0 5 7 6 0]", "(append [5] 6) -> [5 6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.515426}
{"examples": ["(append [] 2) -> [2]", "(append [4 8] 1) -> [4 8 1]", "(append [] 9) -> [9]", "(append [6 8 6 4 9] 0) -> [6 8 6 4 9 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.766861}
{"examples": ["(append [] 9) -> [9]", "(append [2 9 1] 2) -> [2 9 1 2]", "(append [3] 4) -> [3 4]", "(append [] 8) -> [8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.702647}
{"examples": ["(append [] 7) -> [7]", "(append [8 5 2 5 3] 6) -> [8 5 2 5 3 6]", "(append [4 8 8 7] 3) -> [4 8 8 7 3]", "(append [8 1 4 3] 8) -> [8 1 4 3 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.448484}
{"examples": ["(append [] 7) -> [7]", "(append [] 9) -> [9]", "(append [7] 9) -> [7 9]", "(append [4 0] 2) -> [4 0 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.484239}
