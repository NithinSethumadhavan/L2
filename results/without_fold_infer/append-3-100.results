{"examples": ["(append [] 9) -> [9]", "(append [] 7) -> [7]"], "solution": "(let append (let a (lambda (c b) (cons b [])) _) _)", "name": "append", "time": 0.00681}
{"examples": ["(append [] 7) -> [7]", "(append [3] 0) -> [3 0]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.547627}
{"examples": ["(append [] 9) -> [9]", "(append [4] 5) -> [4 5]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.702879}
{"examples": ["(append [] 9) -> [9]", "(append [0 3 2] 5) -> [0 3 2 5]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.800364}
{"examples": ["(append [] 9) -> [9]", "(append [5 0 2 8] 9) -> [5 0 2 8 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.831152}
{"examples": ["(append [] 6) -> [6]", "(append [5 9 5 9] 4) -> [5 9 5 9 4]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.850089}
{"examples": ["(append [] 5) -> [5]", "(append [9 6 4] 0) -> [9 6 4 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.779844}
{"examples": ["(append [] 5) -> [5]", "(append [1 9 3] 2) -> [1 9 3 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.830825}
{"examples": ["(append [] 7) -> [7]", "(append [3 7] 0) -> [3 7 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.834647}
{"examples": ["(append [] 3) -> [3]", "(append [] 2) -> [2]"], "solution": "(let append (let a (lambda (c b) (cons b [])) _) _)", "name": "append", "time": 0.003405}
{"examples": ["(append [] 0) -> [0]", "(append [4 3 7 2] 9) -> [4 3 7 2 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.025018}
{"examples": ["(append [] 5) -> [5]", "(append [4 1 3 9] 6) -> [4 1 3 9 6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.12358}
{"examples": ["(append [] 0) -> [0]", "(append [1 3] 4) -> [1 3 4]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.04246}
{"examples": ["(append [] 0) -> [0]", "(append [2 7] 5) -> [2 7 5]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.105001}
{"examples": ["(append [] 0) -> [0]", "(append [1 2 9] 1) -> [1 2 9 1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.151086}
{"examples": ["(append [] 4) -> [4]", "(append [] 3) -> [3]"], "solution": "(let append (let a (lambda (c b) (cons b [])) _) _)", "name": "append", "time": 0.005208}
{"examples": ["(append [] 9) -> [9]", "(append [1 1 2 1] 4) -> [1 1 2 1 4]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.17361}
{"examples": ["(append [] 2) -> [2]", "(append [6 5 7 5 4] 0) -> [6 5 7 5 4 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.163844}
{"examples": ["(append [] 2) -> [2]", "(append [3 7 1 3] 2) -> [3 7 1 3 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.038906}
{"examples": ["(append [] 8) -> [8]", "(append [3 2 7] 0) -> [3 2 7 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.732163}
{"examples": ["(append [] 4) -> [4]", "(append [7 5 8 9 0] 4) -> [7 5 8 9 0 4]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.807387}
{"examples": ["(append [] 3) -> [3]", "(append [1 7 1] 8) -> [1 7 1 8]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.508925}
{"examples": ["(append [] 8) -> [8]", "(append [2 5 5 7 3] 9) -> [2 5 5 7 3 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.643499}
{"examples": ["(append [] 1) -> [1]", "(append [1 4] 8) -> [1 4 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.767562}
{"examples": ["(append [] 7) -> [7]", "(append [] 2) -> [2]"], "solution": "(let append (let a (lambda (c b) (cons b [])) _) _)", "name": "append", "time": 0.003094}
{"examples": ["(append [] 8) -> [8]", "(append [1 7 1 1 8] 7) -> [1 7 1 1 8 7]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.846574}
{"examples": ["(append [] 3) -> [3]", "(append [4 4 3] 8) -> [4 4 3 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.881807}
{"examples": ["(append [] 2) -> [2]", "(append [5 5 0 3] 9) -> [5 5 0 3 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.644974}
{"examples": ["(append [] 2) -> [2]", "(append [] 6) -> [6]"], "solution": "(let append (let a (lambda (c b) (cons b [])) _) _)", "name": "append", "time": 0.002876}
{"examples": ["(append [] 8) -> [8]", "(append [1 7 2 9] 9) -> [1 7 2 9 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.563311}
{"examples": ["(append [] 6) -> [6]", "(append [1 7 3 4 0] 7) -> [1 7 3 4 0 7]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.548784}
{"examples": ["(append [] 6) -> [6]", "(append [] 6) -> [6]"], "solution": "(let append (let a (lambda (c b) (cons b [])) _) _)", "name": "append", "time": 0.004162}
{"examples": ["(append [] 0) -> [0]", "(append [3 7] 8) -> [3 7 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.96962}
{"examples": ["(append [] 6) -> [6]", "(append [7] 5) -> [7 5]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.768289}
{"examples": ["(append [] 5) -> [5]", "(append [] 1) -> [1]"], "solution": "(let append (let a (lambda (c b) (cons b [])) _) _)", "name": "append", "time": 0.004604}
{"examples": ["(append [] 0) -> [0]", "(append [5 2 3 4 7] 4) -> [5 2 3 4 7 4]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.455798}
{"examples": ["(append [] 4) -> [4]", "(append [0 0 5 4 1] 5) -> [0 0 5 4 1 5]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.47588}
{"examples": ["(append [] 6) -> [6]", "(append [] 7) -> [7]"], "solution": "(let append (let a (lambda (c b) (cons b [])) _) _)", "name": "append", "time": 0.004784}
{"examples": ["(append [] 7) -> [7]", "(append [7 6] 7) -> [7 6 7]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.94454}
{"examples": ["(append [] 9) -> [9]", "(append [1 6 4 0 7] 7) -> [1 6 4 0 7 7]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.254361}
{"examples": ["(append [] 7) -> [7]", "(append [2 3 1 4] 8) -> [2 3 1 4 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.25907}
{"examples": ["(append [] 6) -> [6]", "(append [8 8 5 1 7] 8) -> [8 8 5 1 7 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.476111}
{"examples": ["(append [] 1) -> [1]", "(append [7 0 6] 9) -> [7 0 6 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.301512}
{"examples": ["(append [] 0) -> [0]", "(append [3 5 6 4 9] 9) -> [3 5 6 4 9 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.589574}
{"examples": ["(append [] 6) -> [6]", "(append [3 2 4 5] 8) -> [3 2 4 5 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.601895}
{"examples": ["(append [] 7) -> [7]", "(append [4] 9) -> [4 9]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.753131}
{"examples": ["(append [] 1) -> [1]", "(append [0 0 1] 2) -> [0 0 1 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.221632}
{"examples": ["(append [] 5) -> [5]", "(append [0 3 0 8 4] 9) -> [0 3 0 8 4 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.628708}
{"examples": ["(append [] 5) -> [5]", "(append [1 0] 4) -> [1 0 4]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.106433}
{"examples": ["(append [] 8) -> [8]", "(append [2 7 9 9 2] 6) -> [2 7 9 9 2 6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.027987}
{"examples": ["(append [] 4) -> [4]", "(append [4 7 9] 0) -> [4 7 9 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 1.101507}
{"examples": ["(append [] 2) -> [2]", "(append [1] 0) -> [1 0]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (cons 1 e)) (cons b []))) _) _)", "name": "append", "time": 0.453417}
{"examples": ["(append [] 6) -> [6]", "(append [] 3) -> [3]"], "solution": "(let append (let a (lambda (c b) (cons b [])) _) _)", "name": "append", "time": 0.007094}
{"examples": ["(append [] 8) -> [8]", "(append [8 6 8 3 9] 4) -> [8 6 8 3 9 4]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "name": "append", "time": 0.978727}
