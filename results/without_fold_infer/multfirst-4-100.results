{"solution": "(let multfirst (let a (lambda (b) b) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [3]) -> [3]", "(multfirst []) -> []"], "time": 0.000556}
{"solution": "(let multfirst (let a (lambda (b) b) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [4]) -> [4]", "(multfirst [9]) -> [9]"], "time": 0.000493}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [6 4 6]) -> [6 6 6]", "(multfirst [7 6]) -> [7 7]"], "time": 0.024455}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [6 8 9]) -> [6 6 6]", "(multfirst []) -> []"], "time": 0.024481}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [3]) -> [3]", "(multfirst [8 6 5 1]) -> [8 8 8 8]"], "time": 0.034921}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [0 4 8]) -> [0 0 0]", "(multfirst [7 3 7 3]) -> [7 7 7 7]"], "time": 0.036268}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [9 6 5 9 9]) -> [9 9 9 9 9]", "(multfirst [1 8 4 6 7]) -> [1 1 1 1 1]"], "time": 0.029717}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [7 6]) -> [7 7]", "(multfirst [9 8]) -> [9 9]"], "time": 0.025269}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [3 2 1 9]) -> [3 3 3 3]"], "time": 0.033174}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [4 3 7 8 8]) -> [4 4 4 4 4]"], "time": 0.027661}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [2]) -> [2]", "(multfirst [2 3 4 0 1]) -> [2 2 2 2 2]"], "time": 0.036292}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [8 7 2]) -> [8 8 8]", "(multfirst [1 6]) -> [1 1]"], "time": 0.024871}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [0 3 5]) -> [0 0 0]", "(multfirst [4 7]) -> [4 4]"], "time": 0.025828}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [7 8 0 8]) -> [7 7 7 7]", "(multfirst [4 8 5 8]) -> [4 4 4 4]"], "time": 0.022379}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [3 6 3 9]) -> [3 3 3 3]", "(multfirst [3 0 7 4]) -> [3 3 3 3]"], "time": 0.034263}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [3 9 9 6 2]) -> [3 3 3 3 3]", "(multfirst [5 1 9 4]) -> [5 5 5 5]"], "time": 0.025597}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [7 8 7 3 9]) -> [7 7 7 7 7]", "(multfirst [2 0 7 2 3]) -> [2 2 2 2 2]"], "time": 0.021388}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) 1))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [1 1 6 6]) -> [1 1 1 1]", "(multfirst []) -> []"], "time": 0.021627}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [6]) -> [6]", "(multfirst [4 3 1]) -> [4 4 4]"], "time": 0.035247}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) 1))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [1 3]) -> [1 1]", "(multfirst [1 0 0]) -> [1 1 1]"], "time": 0.030121}
{"solution": "(let multfirst (let a (lambda (b) b) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [0]) -> [0]"], "time": 0.000388}
{"solution": "(let multfirst (let a (lambda (b) b) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [4]) -> [4]", "(multfirst [4 4]) -> [4 4]"], "time": 0.000342}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [9 5]) -> [9 9]"], "time": 0.0405}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [9 2 6 6 8]) -> [9 9 9 9 9]", "(multfirst [1 4 2 9 3]) -> [1 1 1 1 1]"], "time": 0.025399}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [6]) -> [6]", "(multfirst [7 0 4 5]) -> [7 7 7 7]"], "time": 0.030333}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [2 9 7]) -> [2 2 2]"], "time": 0.028241}
{"solution": "(let multfirst (let a (lambda (b) b) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst [3]) -> [3]"], "time": 0.000497}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [0 5]) -> [0 0]", "(multfirst [3]) -> [3]"], "time": 0.03075}
{"solution": "(let multfirst (let a (lambda (b) []) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []"], "time": 0.000479}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [8 7 7]) -> [8 8 8]"], "time": 0.032323}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [7]) -> [7]", "(multfirst [1 6 5]) -> [1 1 1]"], "time": 0.038446}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [0 4]) -> [0 0]", "(multfirst [4]) -> [4]"], "time": 0.027279}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) 1))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [1 8 1 2]) -> [1 1 1 1]"], "time": 0.022653}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) 1))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [1 4]) -> [1 1]", "(multfirst [1 9 5 4 5]) -> [1 1 1 1 1]"], "time": 0.029264}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) 0))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [0 5 0 5 2]) -> [0 0 0 0 0]"], "time": 0.022173}
{"solution": "(let multfirst (let a (lambda (b) b) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [7]) -> [7]", "(multfirst []) -> []"], "time": 0.000576}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [2 9 7 1]) -> [2 2 2 2]"], "time": 0.029783}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "name": "multfirst", "examples": ["(multfirst []) -> []", "(multfirst [7 1 0]) -> [7 7 7]", "(multfirst [0 3 0 6]) -> [0 0 0 0]"], "time": 0.03534}
