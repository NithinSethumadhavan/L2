{"examples": ["(add [] 4) -> []", "(add [] 8) -> []", "(add [] 8) -> []"], "solution": "(let add (let a (lambda (c b) []) _) _)", "name": "add", "time": 0.000726}
{"examples": ["(add [] 0) -> []", "(add [2] 9) -> [11]", "(add [3 6 8 8 6] 7) -> [10 13 15 15 13]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.044422}
{"examples": ["(add [] 9) -> []", "(add [7] 3) -> [10]", "(add [0] 5) -> [5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.03842}
{"examples": ["(add [] 6) -> []", "(add [3] 6) -> [9]", "(add [3 3] 5) -> [8 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.043377}
{"examples": ["(add [] 5) -> []", "(add [0 5 9 8] 7) -> [7 12 16 15]", "(add [8 6 5] 0) -> [8 6 5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.041959}
{"examples": ["(add [] 9) -> []", "(add [9 6 5 7] 1) -> [10 7 6 8]", "(add [0 2] 8) -> [8 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.057983}
{"examples": ["(add [] 9) -> []", "(add [] 6) -> []", "(add [8 9 3 5] 8) -> [16 17 11 13]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.054153}
{"examples": ["(add [] 0) -> []", "(add [7] 1) -> [8]", "(add [0] 1) -> [1]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.039578}
{"examples": ["(add [] 2) -> []", "(add [8 5 9] 4) -> [12 9 13]", "(add [6 1 0] 1) -> [7 2 1]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.053836}
{"examples": ["(add [] 8) -> []", "(add [4 0] 2) -> [6 2]", "(add [2] 2) -> [4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.038754}
{"examples": ["(add [] 3) -> []", "(add [1 2 7 3 9] 2) -> [3 4 9 5 11]", "(add [1 1] 2) -> [3 3]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.049028}
{"examples": ["(add [] 8) -> []", "(add [2 7] 7) -> [9 14]", "(add [] 7) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.055054}
{"examples": ["(add [] 1) -> []", "(add [8 4 1 7] 1) -> [9 5 2 8]", "(add [7 4 7 5] 1) -> [8 5 8 6]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.055671}
{"examples": ["(add [] 4) -> []", "(add [8] 0) -> [8]", "(add [6 6] 5) -> [11 11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.039595}
{"examples": ["(add [] 2) -> []", "(add [6 7 3 9 2] 1) -> [7 8 4 10 3]", "(add [4 3] 2) -> [6 5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.039496}
{"examples": ["(add [] 9) -> []", "(add [7 4 6 3 9] 1) -> [8 5 7 4 10]", "(add [] 3) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.042519}
{"examples": ["(add [] 2) -> []", "(add [] 8) -> []", "(add [] 7) -> []"], "solution": "(let add (let a (lambda (c b) []) _) _)", "name": "add", "time": 0.000418}
{"examples": ["(add [] 1) -> []", "(add [5 2 3 4 2] 0) -> [5 2 3 4 2]", "(add [4 3 5] 5) -> [9 8 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.061377}
{"examples": ["(add [] 3) -> []", "(add [9 4 0 0 7] 7) -> [16 11 7 7 14]", "(add [0 3] 5) -> [5 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.041193}
{"examples": ["(add [] 8) -> []", "(add [9] 0) -> [9]", "(add [1] 8) -> [9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.044117}
{"examples": ["(add [] 3) -> []", "(add [8] 5) -> [13]", "(add [4] 3) -> [7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.052562}
{"examples": ["(add [] 6) -> []", "(add [3 6 5 8 0] 2) -> [5 8 7 10 2]", "(add [3 3 5 2 5] 7) -> [10 10 12 9 12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.048338}
{"examples": ["(add [] 2) -> []", "(add [5 0 4 1] 4) -> [9 4 8 5]", "(add [4] 5) -> [9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.045965}
{"examples": ["(add [] 4) -> []", "(add [7 1 8 1] 4) -> [11 5 12 5]", "(add [2 6 3 0] 6) -> [8 12 9 6]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.041775}
{"examples": ["(add [] 0) -> []", "(add [5 4 5] 5) -> [10 9 10]", "(add [] 7) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.049174}
{"examples": ["(add [] 7) -> []", "(add [] 8) -> []", "(add [5 9 7] 5) -> [10 14 12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.044552}
{"examples": ["(add [] 5) -> []", "(add [] 4) -> []", "(add [3 5 8 7 9] 9) -> [12 14 17 16 18]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.047003}
{"examples": ["(add [] 4) -> []", "(add [] 0) -> []", "(add [1 6 3 3] 2) -> [3 8 5 5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.039094}
{"examples": ["(add [] 9) -> []", "(add [0 3 8 4 5] 6) -> [6 9 14 10 11]", "(add [6] 0) -> [6]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.042822}
{"examples": ["(add [] 2) -> []", "(add [2 3] 1) -> [3 4]", "(add [2 4 7 9 2] 2) -> [4 6 9 11 4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.054595}
{"examples": ["(add [] 6) -> []", "(add [9 4 5] 3) -> [12 7 8]", "(add [4 4 4] 3) -> [7 7 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.059061}
{"examples": ["(add [] 1) -> []", "(add [] 8) -> []", "(add [9] 6) -> [15]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.051333}
{"examples": ["(add [] 3) -> []", "(add [5 3 9] 7) -> [12 10 16]", "(add [9 4 0 1 6] 2) -> [11 6 2 3 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.067562}
{"examples": ["(add [] 2) -> []", "(add [1 4 4 7] 6) -> [7 10 10 13]", "(add [1 9 0 5 5] 0) -> [1 9 0 5 5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.058569}
{"examples": ["(add [] 6) -> []", "(add [3 9 3 2] 2) -> [5 11 5 4]", "(add [] 8) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.039489}
{"examples": ["(add [] 1) -> []", "(add [7 9] 7) -> [14 16]", "(add [] 2) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.036013}
{"examples": ["(add [] 3) -> []", "(add [1 0] 0) -> [1 0]", "(add [0 6 5] 6) -> [6 12 11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.038396}
{"examples": ["(add [] 5) -> []", "(add [] 2) -> []", "(add [1 5 2 2] 1) -> [2 6 3 3]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.03811}
{"examples": ["(add [] 9) -> []", "(add [7 2] 2) -> [9 4]", "(add [6 8 0] 1) -> [7 9 1]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.041097}
{"examples": ["(add [] 8) -> []", "(add [3 9 9] 7) -> [10 16 16]", "(add [2 4 8 5 2] 9) -> [11 13 17 14 11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.037113}
{"examples": ["(add [] 7) -> []", "(add [8 4] 4) -> [12 8]", "(add [1] 6) -> [7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.057442}
{"examples": ["(add [] 7) -> []", "(add [4] 2) -> [6]", "(add [5 7 4] 6) -> [11 13 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.036704}
{"examples": ["(add [] 6) -> []", "(add [0 3 3 4 0] 7) -> [7 10 10 11 7]", "(add [8] 8) -> [16]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.037926}
{"examples": ["(add [] 7) -> []", "(add [8 9] 6) -> [14 15]", "(add [4] 7) -> [11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.042292}
{"examples": ["(add [] 3) -> []", "(add [] 3) -> []", "(add [4 2] 4) -> [8 6]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.041984}
{"examples": ["(add [] 1) -> []", "(add [6] 8) -> [14]", "(add [3 6 2 8] 3) -> [6 9 5 11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.036814}
{"examples": ["(add [] 8) -> []", "(add [] 7) -> []", "(add [9 4 0 2] 8) -> [17 12 8 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.064107}
{"examples": ["(add [] 0) -> []", "(add [4] 8) -> [12]", "(add [2 4 4 0] 3) -> [5 7 7 3]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.054375}
{"examples": ["(add [] 2) -> []", "(add [] 0) -> []", "(add [4] 9) -> [13]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.051614}
{"examples": ["(add [] 0) -> []", "(add [2 3 3] 7) -> [9 10 10]", "(add [] 3) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.040877}
{"examples": ["(add [] 6) -> []", "(add [1] 0) -> [1]", "(add [] 1) -> []"], "solution": "(let add (let a (lambda (c b) c) _) _)", "name": "add", "time": 0.000388}
{"examples": ["(add [] 6) -> []", "(add [1 1 1] 2) -> [3 3 3]", "(add [2 9 6 3 0] 9) -> [11 18 15 12 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.038742}
{"examples": ["(add [] 6) -> []", "(add [0] 5) -> [5]", "(add [5 6 4 6] 6) -> [11 12 10 12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.05333}
{"examples": ["(add [] 4) -> []", "(add [8 5 5] 9) -> [17 14 14]", "(add [] 2) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.041821}
{"examples": ["(add [] 4) -> []", "(add [8 6 0] 2) -> [10 8 2]", "(add [1 5 4] 2) -> [3 7 6]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.060974}
{"examples": ["(add [] 2) -> []", "(add [0 8 7 3] 9) -> [9 17 16 12]", "(add [1] 8) -> [9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.051591}
{"examples": ["(add [] 4) -> []", "(add [1 1 7] 1) -> [2 2 8]", "(add [5 1 0 6 9] 4) -> [9 5 4 10 13]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.044443}
{"examples": ["(add [] 6) -> []", "(add [1 2 8 6] 9) -> [10 11 17 15]", "(add [2 4 8 6] 6) -> [8 10 14 12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.05894}
{"examples": ["(add [] 1) -> []", "(add [2 4 5 9] 4) -> [6 8 9 13]", "(add [0 2 8 8] 8) -> [8 10 16 16]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.038575}
{"examples": ["(add [] 9) -> []", "(add [3 1 0] 3) -> [6 4 3]", "(add [7 8 1 5] 5) -> [12 13 6 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.048088}
{"examples": ["(add [] 4) -> []", "(add [6 9 4] 1) -> [7 10 5]", "(add [4 3 5 4 4] 1) -> [5 4 6 5 5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.048005}
{"examples": ["(add [] 7) -> []", "(add [8 4] 0) -> [8 4]", "(add [2 0 3] 3) -> [5 3 6]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.042113}
{"examples": ["(add [] 1) -> []", "(add [4 2 0 0 9] 6) -> [10 8 6 6 15]", "(add [1 6 4 4 1] 5) -> [6 11 9 9 6]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.048568}
{"examples": ["(add [] 9) -> []", "(add [9] 9) -> [18]", "(add [0 8 9 4 8] 7) -> [7 15 16 11 15]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.041832}
{"examples": ["(add [] 8) -> []", "(add [5] 0) -> [5]", "(add [] 7) -> []"], "solution": "(let add (let a (lambda (c b) c) _) _)", "name": "add", "time": 0.000361}
{"examples": ["(add [] 3) -> []", "(add [6 2 1 0 6] 7) -> [13 9 8 7 13]", "(add [3 0] 9) -> [12 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.04245}
{"examples": ["(add [] 0) -> []", "(add [4 5 8 1] 9) -> [13 14 17 10]", "(add [8 5 2 1] 6) -> [14 11 8 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.039279}
{"examples": ["(add [] 0) -> []", "(add [9 8 8] 2) -> [11 10 10]", "(add [5] 1) -> [6]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.057712}
{"examples": ["(add [] 0) -> []", "(add [9 2] 3) -> [12 5]", "(add [8 0 6 6 6] 5) -> [13 5 11 11 11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.049384}
{"examples": ["(add [] 5) -> []", "(add [6 6 4 2] 3) -> [9 9 7 5]", "(add [] 3) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.048365}
{"examples": ["(add [] 2) -> []", "(add [6 7 6 7] 1) -> [7 8 7 8]", "(add [8] 3) -> [11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.039444}
{"examples": ["(add [] 9) -> []", "(add [9] 9) -> [18]", "(add [9 6 3 3 4] 9) -> [18 15 12 12 13]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.040222}
{"examples": ["(add [] 7) -> []", "(add [] 7) -> []", "(add [1 0] 8) -> [9 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.054638}
{"examples": ["(add [] 4) -> []", "(add [9 6 8] 6) -> [15 12 14]", "(add [] 6) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.051813}
{"examples": ["(add [] 8) -> []", "(add [6 8 2 1] 3) -> [9 11 5 4]", "(add [6 4 4 9 3] 2) -> [8 6 6 11 5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.036506}
{"examples": ["(add [] 7) -> []", "(add [3] 1) -> [4]", "(add [5] 2) -> [7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.052182}
{"examples": ["(add [] 0) -> []", "(add [9 0 1] 7) -> [16 7 8]", "(add [] 4) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.062231}
{"examples": ["(add [] 3) -> []", "(add [2 3 4] 4) -> [6 7 8]", "(add [9 7 3] 5) -> [14 12 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.04944}
{"examples": ["(add [] 2) -> []", "(add [] 8) -> []", "(add [7 1 0] 8) -> [15 9 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.048253}
{"examples": ["(add [] 0) -> []", "(add [] 2) -> []", "(add [7 2 0 6] 0) -> [7 2 0 6]"], "solution": "(let add (let a (lambda (c b) c) _) _)", "name": "add", "time": 0.00043}
{"examples": ["(add [] 5) -> []", "(add [] 8) -> []", "(add [5 0] 3) -> [8 3]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.053002}
{"examples": ["(add [] 3) -> []", "(add [3 8 7 5] 0) -> [3 8 7 5]", "(add [6] 6) -> [12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.035725}
{"examples": ["(add [] 0) -> []", "(add [8] 4) -> [12]", "(add [7 9 2 8] 9) -> [16 18 11 17]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.054697}
{"examples": ["(add [] 1) -> []", "(add [6 1 5] 5) -> [11 6 10]", "(add [3 3 0 6] 9) -> [12 12 9 15]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.036879}
{"examples": ["(add [] 2) -> []", "(add [8] 3) -> [11]", "(add [0] 4) -> [4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.036392}
{"examples": ["(add [] 0) -> []", "(add [7 9 5 5 2] 3) -> [10 12 8 8 5]", "(add [8] 3) -> [11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.042847}
{"examples": ["(add [] 4) -> []", "(add [8 9 6] 4) -> [12 13 10]", "(add [] 8) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.065751}
{"examples": ["(add [] 4) -> []", "(add [9 3 5 3] 1) -> [10 4 6 4]", "(add [5 2 4 4] 0) -> [5 2 4 4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.037634}
{"examples": ["(add [] 7) -> []", "(add [] 8) -> []", "(add [1 0 2] 3) -> [4 3 5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.065149}
{"examples": ["(add [] 5) -> []", "(add [] 8) -> []", "(add [7 4 4 1 8] 4) -> [11 8 8 5 12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.040202}
{"examples": ["(add [] 1) -> []", "(add [] 6) -> []", "(add [4 7 7 4 5] 6) -> [10 13 13 10 11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.045472}
{"examples": ["(add [] 1) -> []", "(add [9 9 5 1] 3) -> [12 12 8 4]", "(add [1 2 9 1 2] 6) -> [7 8 15 7 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.036399}
{"examples": ["(add [] 4) -> []", "(add [2 3 8] 6) -> [8 9 14]", "(add [4 5 4 8] 6) -> [10 11 10 14]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.037764}
{"examples": ["(add [] 1) -> []", "(add [5 4 4 7] 6) -> [11 10 10 13]", "(add [3] 9) -> [12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.036671}
{"examples": ["(add [] 9) -> []", "(add [7] 3) -> [10]", "(add [] 7) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.048875}
{"examples": ["(add [] 2) -> []", "(add [4 3 0 4 9] 6) -> [10 9 6 10 15]", "(add [4] 4) -> [8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.063743}
{"examples": ["(add [] 0) -> []", "(add [5 1 8 4] 2) -> [7 3 10 6]", "(add [9 2 5 4 0] 7) -> [16 9 12 11 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.035929}
{"examples": ["(add [] 6) -> []", "(add [] 6) -> []", "(add [5 2 1 0 1] 3) -> [8 5 4 3 4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.035583}
{"examples": ["(add [] 6) -> []", "(add [2 8 6 3 4] 8) -> [10 16 14 11 12]", "(add [8] 0) -> [8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.036013}
{"examples": ["(add [] 8) -> []", "(add [2 7 5 1 8] 3) -> [5 10 8 4 11]", "(add [0 9 3 5 4] 6) -> [6 15 9 11 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "name": "add", "time": 0.035238}
