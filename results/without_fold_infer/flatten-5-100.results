{"time": 0.219263, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {6 {9} {4}}) -> [6 9 4]", "(flatten {2}) -> [2]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.255255, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {4 {7}}) -> [4 7]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.120362, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {3}) -> [3]", "(flatten {8}) -> [8]", "(flatten {2}) -> [2]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 0.210252, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {2 {3} {7}}) -> [2 3 7]", "(flatten {5}) -> [5]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.259377, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {2 {9 {5}}}) -> [2 9 5]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.241606, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {9 {3}}) -> [9 3]", "(flatten {9 {1 {4}}}) -> [9 1 4]", "(flatten {6 {8}}) -> [6 8]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.219492, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {1}) -> [1]", "(flatten {4 {9}}) -> [4 9]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.214205, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {2}) -> [2]", "(flatten {1 {5 {9}}}) -> [1 5 9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.191541, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {4 {3} {2}}) -> [4 3 2]", "(flatten {3}) -> [3]", "(flatten {2}) -> [2]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.17831, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {1 {4}}) -> [1 4]", "(flatten {2}) -> [2]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.16108, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {4}) -> [4]", "(flatten {5 {1 {4} {0}}}) -> [5 1 4 0]", "(flatten {6 {7}}) -> [6 7]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.226562, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {8}) -> [8]", "(flatten {2 {5} {4}}) -> [2 5 4]", "(flatten {4}) -> [4]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.167147, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {0}) -> [0]", "(flatten {1}) -> [1]", "(flatten {9}) -> [9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 0.235943, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {3}) -> [3]", "(flatten {6 {5} {3}}) -> [6 5 3]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.21212, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {0 {1} {8}}) -> [0 1 8]", "(flatten {7 {1} {6}}) -> [7 1 6]", "(flatten {8 {0} {0}}) -> [8 0 0]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.202925, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {8 {5} {5}}) -> [8 5 5]", "(flatten {1 {3 {8 {9}} {4 {6}}} {2 {5 {1} {3}}}}) -> [1 3 8 9 4 6 2 5 1 3]", "(flatten {1}) -> [1]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.148147, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {5 {4 {2} {9}} {1 {7} {1}}}) -> [5 4 2 9 1 7 1]", "(flatten {0}) -> [0]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.189735, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {4}) -> [4]", "(flatten {2 {0} {7}}) -> [2 0 7]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.217059, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {9}) -> [9]", "(flatten {}) -> []", "(flatten {5 {0 {9} {9 {8}}} {1 {5}}}) -> [5 0 9 9 8 1 5]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.162152, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {3}) -> [3]", "(flatten {}) -> []", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 0.196722, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {3 {2} {7}}) -> [3 2 7]", "(flatten {1 {8} {9}}) -> [1 8 9]", "(flatten {9 {3}}) -> [9 3]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.21735, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {5 {8 {1}}}) -> [5 8 1]", "(flatten {2}) -> [2]", "(flatten {5 {6}}) -> [5 6]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.2009, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {1 {7} {3}}) -> [1 7 3]", "(flatten {3 {2}}) -> [3 2]", "(flatten {2 {2}}) -> [2 2]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.237053, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {2}) -> [2]", "(flatten {9 {6} {1}}) -> [9 6 1]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.230925, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {1 {9}}) -> [1 9]", "(flatten {1 {8}}) -> [1 8]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.19734, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {2}) -> [2]", "(flatten {}) -> []", "(flatten {5 {5} {7}}) -> [5 5 7]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.213063, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {9}) -> [9]", "(flatten {}) -> []", "(flatten {9 {1} {1 {3}}}) -> [9 1 1 3]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.23664, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {9 {7}}) -> [9 7]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.266443, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {0 {2 {0 {1} {3}} {2}}}) -> [0 2 0 1 3 2]", "(flatten {2}) -> [2]", "(flatten {1 {5 {6 {7} {0}}} {0 {9} {5 {0} {2}}}}) -> [1 5 6 7 0 0 9 5 0 2]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.177429, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {4 {0} {2}}) -> [4 0 2]", "(flatten {}) -> []", "(flatten {6}) -> [6]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.241893, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {5 {3 {4}} {6 {5} {2}}}) -> [5 3 4 6 5 2]", "(flatten {0 {5}}) -> [0 5]", "(flatten {3}) -> [3]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.207523, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {7 {8 {9}} {2 {6} {1}}}) -> [7 8 9 2 6 1]", "(flatten {}) -> []", "(flatten {9 {1}}) -> [9 1]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.240291, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {6 {2 {1}}}) -> [6 2 1]", "(flatten {4 {4 {0}}}) -> [4 4 0]", "(flatten {7 {1 {4 {4} {8}}}}) -> [7 1 4 4 8]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.26385, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {0 {0 {9}}}) -> [0 0 9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.238395, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {1 {5 {0}}}) -> [1 5 0]", "(flatten {}) -> []", "(flatten {3 {3 {9}}}) -> [3 3 9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.200188, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {3 {9 {8}}}) -> [3 9 8]", "(flatten {3 {7}}) -> [3 7]", "(flatten {7}) -> [7]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.24732, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {3 {8}}) -> [3 8]", "(flatten {3 {5 {8} {7}} {4}}) -> [3 5 8 7 4]", "(flatten {5}) -> [5]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.209479, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {7}) -> [7]", "(flatten {6 {3 {2} {9}} {7}}) -> [6 3 2 9 7]", "(flatten {4 {5 {6 {3}}} {8 {2 {9}} {9 {5} {6}}}}) -> [4 5 6 3 8 2 9 9 5 6]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.192737, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {6}) -> [6]", "(flatten {}) -> []", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 0.205903, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {5 {8 {2 {2}}}}) -> [5 8 2 2]", "(flatten {}) -> []", "(flatten {5}) -> [5]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.191046, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {2 {5 {5} {2}}}) -> [2 5 5 2]", "(flatten {4}) -> [4]", "(flatten {9}) -> [9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.17744, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {6 {6}}) -> [6 6]", "(flatten {}) -> []", "(flatten {5 {9} {7}}) -> [5 9 7]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.227884, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {4}) -> [4]", "(flatten {}) -> []", "(flatten {9 {5}}) -> [9 5]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.179537, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {1 {6 {6} {2}}}) -> [1 6 6 2]", "(flatten {}) -> []", "(flatten {9 {9 {0 {5}}} {6 {1 {7}}}}) -> [9 9 0 5 6 1 7]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.280117, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {4 {0 {3} {8}} {3 {0}}}) -> [4 0 3 8 3 0]", "(flatten {0 {5} {6}}) -> [0 5 6]", "(flatten {3}) -> [3]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.22379, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {6 {2 {5}} {6}}) -> [6 2 5 6]", "(flatten {}) -> []", "(flatten {8}) -> [8]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.181872, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {6}) -> [6]", "(flatten {}) -> []", "(flatten {4}) -> [4]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 0.235963, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {4 {1 {5} {2 {0} {8}}} {8}}) -> [4 1 5 2 0 8 8]", "(flatten {3 {8}}) -> [3 8]", "(flatten {4 {2} {3}}) -> [4 2 3]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.26937, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {2 {6 {9} {7}} {1 {9} {9}}}) -> [2 6 9 7 1 9 9]", "(flatten {}) -> []", "(flatten {7}) -> [7]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.197222, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {5 {6 {8} {2}} {5 {7} {6}}}) -> [5 6 8 2 5 7 6]", "(flatten {0 {3} {8}}) -> [0 3 8]", "(flatten {6}) -> [6]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.228088, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {2 {9}}) -> [2 9]", "(flatten {9 {2 {9 {2} {7}} {1 {0}}}}) -> [9 2 9 2 7 1 0]", "(flatten {8 {6 {2} {8}} {8}}) -> [8 6 2 8 8]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.215438, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {4}) -> [4]", "(flatten {0 {5 {7}}}) -> [0 5 7]", "(flatten {2 {5}}) -> [2 5]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.2284, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {6 {6}}) -> [6 6]", "(flatten {}) -> []", "(flatten {6 {6} {9}}) -> [6 6 9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.270378, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {2 {7 {2 {0}} {7 {6}}}}) -> [2 7 2 0 7 6]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.22249, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {2 {1 {6 {7} {2}}}}) -> [2 1 6 7 2]", "(flatten {8 {1}}) -> [8 1]", "(flatten {8 {9}}) -> [8 9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.207878, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {7 {3}}) -> [7 3]", "(flatten {2 {0}}) -> [2 0]", "(flatten {5 {5 {7}} {2 {5} {3}}}) -> [5 5 7 2 5 3]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.182087, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {4}) -> [4]", "(flatten {1 {9} {1}}) -> [1 9 1]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.161773, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {8}) -> [8]", "(flatten {}) -> []", "(flatten {2}) -> [2]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 0.235965, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {9 {1 {5} {8 {4}}} {4}}) -> [9 1 5 8 4 4]", "(flatten {9}) -> [9]", "(flatten {8 {3} {9 {0}}}) -> [8 3 9 0]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.271417, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {8 {6 {6} {4 {3} {5}}} {5 {9}}}) -> [8 6 6 4 3 5 5 9]", "(flatten {8 {0 {8}} {3}}) -> [8 0 8 3]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.177733, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {2 {0}}) -> [2 0]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.243281, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {7 {9 {9} {5}}}) -> [7 9 9 5]", "(flatten {3 {1} {1 {6}}}) -> [3 1 1 6]", "(flatten {9 {2} {6}}) -> [9 2 6]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.188537, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {5}) -> [5]", "(flatten {5 {7}}) -> [5 7]", "(flatten {1 {6 {5 {5} {9}}}}) -> [1 6 5 5 9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.190986, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {1 {2 {0} {4}} {8 {4} {2}}}) -> [1 2 0 4 8 4 2]", "(flatten {4}) -> [4]", "(flatten {1 {0} {0}}) -> [1 0 0]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.12807, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {8 {4} {0}}) -> [8 4 0]", "(flatten {}) -> []", "(flatten {8}) -> [8]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.16208, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {7 {1} {6}}) -> [7 1 6]", "(flatten {6 {7} {6}}) -> [6 7 6]", "(flatten {8}) -> [8]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.130923, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {9 {5} {9}}) -> [9 5 9]", "(flatten {7}) -> [7]", "(flatten {4 {9 {5}}}) -> [4 9 5]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.149863, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {2}) -> [2]", "(flatten {7}) -> [7]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 0.186153, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {9 {2} {2}}) -> [9 2 2]", "(flatten {1 {2} {6}}) -> [1 2 6]", "(flatten {6 {3} {3}}) -> [6 3 3]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.121425, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {3}) -> [3]", "(flatten {1}) -> [1]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 0.117744, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {8}) -> [8]", "(flatten {}) -> []", "(flatten {3}) -> [3]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 0.197321, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {3 {3}}) -> [3 3]", "(flatten {6 {2} {8}}) -> [6 2 8]", "(flatten {7 {9 {9}}}) -> [7 9 9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.226222, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {4 {1 {0}} {1 {3} {8}}}) -> [4 1 0 1 3 8]", "(flatten {4 {1} {6}}) -> [4 1 6]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.199251, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {4 {4} {8}}) -> [4 4 8]", "(flatten {8 {5 {8}} {8 {1 {6}} {6 {2} {7}}}}) -> [8 5 8 8 1 6 6 2 7]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.196629, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {7}) -> [7]", "(flatten {9}) -> [9]", "(flatten {0 {3 {5} {6 {9}}}}) -> [0 3 5 6 9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.209693, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {1 {1 {7}}}) -> [1 1 7]", "(flatten {6 {0 {6} {4}}}) -> [6 0 6 4]", "(flatten {1 {8 {9}} {9}}) -> [1 8 9 9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.206334, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {6 {8}}) -> [6 8]", "(flatten {2 {6} {7}}) -> [2 6 7]", "(flatten {0}) -> [0]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.208768, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {2 {8} {6 {2} {0}}}) -> [2 8 6 2 0]", "(flatten {6 {4 {3 {8} {8}} {5 {7}}}}) -> [6 4 3 8 8 5 7]", "(flatten {4}) -> [4]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.242565, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {4 {0 {0}} {0 {1}}}) -> [4 0 0 0 1]", "(flatten {}) -> []", "(flatten {5 {5}}) -> [5 5]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.212131, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {9}) -> [9]", "(flatten {3 {2} {3}}) -> [3 2 3]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.161007, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {2 {7}}) -> [2 7]", "(flatten {5}) -> [5]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.185014, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {6}) -> [6]", "(flatten {5 {7}}) -> [5 7]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.200934, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {1}) -> [1]", "(flatten {1 {6} {3}}) -> [1 6 3]", "(flatten {8}) -> [8]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.2442, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {4 {7 {8}} {7 {3 {0}} {2 {4}}}}) -> [4 7 8 7 3 0 2 4]", "(flatten {8}) -> [8]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.2246, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {0 {8}}) -> [0 8]", "(flatten {4}) -> [4]", "(flatten {5 {4 {6}}}) -> [5 4 6]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.236614, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {1 {8 {9 {0} {4}} {4}}}) -> [1 8 9 0 4 4]", "(flatten {}) -> []", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.192862, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {9}) -> [9]", "(flatten {5 {2 {6 {2} {9}}} {1}}) -> [5 2 6 2 9 1]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.158164, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {0}) -> [0]", "(flatten {}) -> []", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons 0 [])) [])) _) _)"}
{"time": 0.206749, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {4 {0} {2}}) -> [4 0 2]", "(flatten {}) -> []", "(flatten {2}) -> [2]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.228201, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {0 {7}}) -> [0 7]", "(flatten {}) -> []", "(flatten {1 {3} {2}}) -> [1 3 2]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.211467, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {6 {6}}) -> [6 6]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.165562, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {4}) -> [4]", "(flatten {9}) -> [9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 0.1996, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {0 {9}}) -> [0 9]", "(flatten {4 {4}}) -> [4 4]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.222444, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {9}) -> [9]", "(flatten {8 {4} {1}}) -> [8 4 1]", "(flatten {4 {2} {9}}) -> [4 2 9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.211393, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {5}) -> [5]", "(flatten {9 {5}}) -> [9 5]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
