{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) c) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [2 3] []) -> [2 3]", "(concat [] [7 6]) -> [7 6]", "(concat [] [1 2 4 6 5]) -> [1 2 4 6 5]"], "time": 0.033322, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d b)) c)) _) _)", "examples": ["(concat [] []) -> []", "(concat [5] [5 7 3 8 3]) -> [5 5 7 3 8 3]", "(concat [4] []) -> [4]", "(concat [2] [8]) -> [2 8]"], "time": 0.226032, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [7] []) -> [7]", "(concat [8 3 9 3 6] [5 3 0]) -> [8 3 9 3 6 5 3 0]", "(concat [5 4 2 5 9] [7 7 1 5 5]) -> [5 4 2 5 9 7 7 1 5 5]"], "time": 0.253672, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [6 4 1] [4]) -> [6 4 1 4]", "(concat [8 4] [5]) -> [8 4 5]", "(concat [3 8] []) -> [3 8]"], "time": 0.227683, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [7 7 0 9] [3 7]) -> [7 7 0 9 3 7]", "(concat [4 6 5 5] [4]) -> [4 6 5 5 4]", "(concat [2 5 5 3 8] [7 0 0 8]) -> [2 5 5 3 8 7 0 0 8]"], "time": 0.266514, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [3 9 4] [1 8 1]) -> [3 9 4 1 8 1]", "(concat [0 6 8] [5 5 3 4 3]) -> [0 6 8 5 5 3 4 3]", "(concat [] [8 4 8 6 9]) -> [8 4 8 6 9]"], "time": 0.253248, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d b)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [7] []) -> [7]", "(concat [] [9 3 4]) -> [9 3 4]", "(concat [9] [8 4 5 5 6]) -> [9 8 4 5 5 6]"], "time": 0.166104, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [7 2 9] [3 0 2 0]) -> [7 2 9 3 0 2 0]", "(concat [1] []) -> [1]", "(concat [] []) -> []"], "time": 0.239762, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [2] []) -> [2]", "(concat [9 3 9 3 7] [8 0 0 0 7]) -> [9 3 9 3 7 8 0 0 0 7]", "(concat [5] []) -> [5]"], "time": 0.261726, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [8 7 3 6] [5 8 2 8 4]) -> [8 7 3 6 5 8 2 8 4]", "(concat [3 4 9 3] [8 0 4 8 3]) -> [3 4 9 3 8 0 4 8 3]", "(concat [1 3] [2 5]) -> [1 3 2 5]"], "time": 0.231523, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [5 1 2 8 4] [8]) -> [5 1 2 8 4 8]", "(concat [1] [2 8 9]) -> [1 2 8 9]", "(concat [3 9 2 9 1] [5 3 9]) -> [3 9 2 9 1 5 3 9]"], "time": 0.25644, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [7 3 9] [0 7 0 4 0]) -> [7 3 9 0 7 0 4 0]", "(concat [0] []) -> [0]", "(concat [2 2 9] [2 1 7 9]) -> [2 2 9 2 1 7 9]"], "time": 0.240412, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [0] [3 6]) -> [0 3 6]", "(concat [0] [6 6]) -> [0 6 6]", "(concat [2 4 6] [0 1]) -> [2 4 6 0 1]"], "time": 0.24525, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [2 3] [2 5]) -> [2 3 2 5]", "(concat [1 4 9 6] [5 6 6 0 8]) -> [1 4 9 6 5 6 6 0 8]", "(concat [3 9 1 2] [1 5 6 6 7]) -> [3 9 1 2 1 5 6 6 7]"], "time": 0.245147, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [] [8 3 0 0]) -> [8 3 0 0]", "(concat [8 8 7 1 2] [7]) -> [8 8 7 1 2 7]", "(concat [8] [3 5]) -> [8 3 5]"], "time": 0.222068, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [6 3] []) -> [6 3]", "(concat [9] []) -> [9]", "(concat [4 1 9 3 4] [0 5]) -> [4 1 9 3 4 0 5]"], "time": 0.232694, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [3 2] [9]) -> [3 2 9]", "(concat [5 3 3] [0 9 2 8 4]) -> [5 3 3 0 9 2 8 4]", "(concat [] [9 5 5]) -> [9 5 5]"], "time": 0.210903, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [4 6 3 1] [1 5 1]) -> [4 6 3 1 1 5 1]", "(concat [9 4 7 0] [1 5]) -> [9 4 7 0 1 5]", "(concat [7 7] []) -> [7 7]"], "time": 0.222033, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [8 3 4 3] [6]) -> [8 3 4 3 6]", "(concat [5 3 5 9] [7 0]) -> [5 3 5 9 7 0]", "(concat [2] [6 7 5]) -> [2 6 7 5]"], "time": 0.229376, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [5 1 3 8] [9 6 1 5 6]) -> [5 1 3 8 9 6 1 5 6]", "(concat [0] [1 5 6]) -> [0 1 5 6]", "(concat [8] [9 5]) -> [8 9 5]"], "time": 0.230361, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [1 9 2 4] []) -> [1 9 2 4]", "(concat [1 3 4] []) -> [1 3 4]", "(concat [2 6 6 1] [3 9 9 2 3]) -> [2 6 6 1 3 9 9 2 3]"], "time": 0.248042, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [0] [5 8 6]) -> [0 5 8 6]", "(concat [6 8] [8 4 5 8]) -> [6 8 8 4 5 8]", "(concat [3 9 2 0 6] []) -> [3 9 2 0 6]"], "time": 0.228863, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [9] []) -> [9]", "(concat [9 2] [7]) -> [9 2 7]", "(concat [] [2]) -> [2]"], "time": 0.235505, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [] [3 7 8]) -> [3 7 8]", "(concat [0 4 0 6] [2]) -> [0 4 0 6 2]", "(concat [7 2 2 5] []) -> [7 2 2 5]"], "time": 0.202765, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [7 1 8] [9]) -> [7 1 8 9]", "(concat [0 7 3] []) -> [0 7 3]", "(concat [3 7 3 5 1] [8 6 7 8]) -> [3 7 3 5 1 8 6 7 8]"], "time": 0.2944, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [0 0 2] [3]) -> [0 0 2 3]", "(concat [] [1 3 4 5]) -> [1 3 4 5]", "(concat [1 5 4] []) -> [1 5 4]"], "time": 0.220279, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [4 5 1 4] [0]) -> [4 5 1 4 0]", "(concat [6 4 5] []) -> [6 4 5]", "(concat [] [1 6]) -> [1 6]"], "time": 0.266895, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [9 5 9 6 8] [3 2 8 9]) -> [9 5 9 6 8 3 2 8 9]", "(concat [3 4 3 6] [2 8]) -> [3 4 3 6 2 8]", "(concat [6 1] [6 9 5 6]) -> [6 1 6 9 5 6]"], "time": 0.243291, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [0] [6 2 0 1 2]) -> [0 6 2 0 1 2]", "(concat [] [5]) -> [5]", "(concat [7 2 3] []) -> [7 2 3]"], "time": 0.243986, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [2 1 0] [3]) -> [2 1 0 3]", "(concat [] [7 5]) -> [7 5]", "(concat [1 8 3 0 5] [9 8]) -> [1 8 3 0 5 9 8]"], "time": 0.232637, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [] [0 6 3 7 1]) -> [0 6 3 7 1]", "(concat [8 7 3 7 9] [6 8 0 5 7]) -> [8 7 3 7 9 6 8 0 5 7]", "(concat [8 5 3] [5 6 6 5]) -> [8 5 3 5 6 6 5]"], "time": 0.249056, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [5 3] [1 2 4 8]) -> [5 3 1 2 4 8]", "(concat [] [3 6 5 3 2]) -> [3 6 5 3 2]", "(concat [5] []) -> [5]"], "time": 0.236925, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [] [9 3 6]) -> [9 3 6]", "(concat [2 1 3] [1 6 9 5]) -> [2 1 3 1 6 9 5]", "(concat [3 2 5] [9 3 1]) -> [3 2 5 9 3 1]"], "time": 0.189578, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [3] [2 1 4]) -> [3 2 1 4]", "(concat [5 1 8 3] [5]) -> [5 1 8 3 5]", "(concat [1 9 6] [3 8 1]) -> [1 9 6 3 8 1]"], "time": 0.202523, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [7 5 8 2] [9 3 0 4 1]) -> [7 5 8 2 9 3 0 4 1]", "(concat [0] [0]) -> [0 0]", "(concat [3 8 0 2] [9]) -> [3 8 0 2 9]"], "time": 0.235855, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [4 9] [4 8 7]) -> [4 9 4 8 7]", "(concat [3 3 6 7 3] [4]) -> [3 3 6 7 3 4]", "(concat [3 1] [1 2 9 1]) -> [3 1 1 2 9 1]"], "time": 0.238821, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [0 4 8 9] [7]) -> [0 4 8 9 7]", "(concat [5] []) -> [5]", "(concat [] [8 6 9 2]) -> [8 6 9 2]"], "time": 0.199538, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [3 1 0 4] [3 7]) -> [3 1 0 4 3 7]", "(concat [8 9 6] [9 0 7 7]) -> [8 9 6 9 0 7 7]", "(concat [4] [9 7 9 6]) -> [4 9 7 9 6]"], "time": 0.242838, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [3 0 5] [3]) -> [3 0 5 3]", "(concat [5 4] [5 8 0]) -> [5 4 5 8 0]", "(concat [1] []) -> [1]"], "time": 0.264623, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [0 5 5 4] []) -> [0 5 5 4]", "(concat [9 2 5 3 0] [9 0 5 6 3]) -> [9 2 5 3 0 9 0 5 6 3]", "(concat [3 9] [8 6 0 3]) -> [3 9 8 6 0 3]"], "time": 0.231848, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [5 6] [5 2 4 0 2]) -> [5 6 5 2 4 0 2]", "(concat [7 5 4 4] []) -> [7 5 4 4]", "(concat [6] [0 2 0]) -> [6 0 2 0]"], "time": 0.244823, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [4 4 6 3] [3 5 8 5]) -> [4 4 6 3 3 5 8 5]", "(concat [2 1 8 4] [6 4 1 6]) -> [2 1 8 4 6 4 1 6]", "(concat [3 6 5 7 6] [7 5]) -> [3 6 5 7 6 7 5]"], "time": 0.249371, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [4 7 1] [1 1 7 3]) -> [4 7 1 1 1 7 3]", "(concat [] [3 5 4 2 9]) -> [3 5 4 2 9]", "(concat [2 2 4 2 3] [6 7 0 6 1]) -> [2 2 4 2 3 6 7 0 6 1]"], "time": 0.205468, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [7] [2 8 2 6 2]) -> [7 2 8 2 6 2]", "(concat [8 4 8] [8 5 7 3 5]) -> [8 4 8 8 5 7 3 5]", "(concat [9 2 4 1] [9]) -> [9 2 4 1 9]"], "time": 0.221131, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [2 5] [3 6 4 3 7]) -> [2 5 3 6 4 3 7]", "(concat [0 8 6] [4 9]) -> [0 8 6 4 9]", "(concat [9] [8]) -> [9 8]"], "time": 0.245741, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [4 6 7 6 4] [1 7]) -> [4 6 7 6 4 1 7]", "(concat [4 9 9] [3 2 1 1]) -> [4 9 9 3 2 1 1]", "(concat [9 5 0] [2 7 3 9]) -> [9 5 0 2 7 3 9]"], "time": 0.235113, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [4 6] [2]) -> [4 6 2]", "(concat [2] []) -> [2]", "(concat [9 9 4] [4 8 0]) -> [9 9 4 4 8 0]"], "time": 0.224635, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [] [4 9 7 2]) -> [4 9 7 2]", "(concat [7] [4 1 9 8 2]) -> [7 4 1 9 8 2]", "(concat [5 4 8 8 0] [1 6 2 3 5]) -> [5 4 8 8 0 1 6 2 3 5]"], "time": 0.250363, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [] [8 5 4 9 7]) -> [8 5 4 9 7]", "(concat [9 7 9 0 9] [6 3 9 8]) -> [9 7 9 0 9 6 3 9 8]", "(concat [1 7 2 2] [4 3]) -> [1 7 2 2 4 3]"], "time": 0.199083, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [7 1] [0 4 3 1 3]) -> [7 1 0 4 3 1 3]", "(concat [8 7] [3 0]) -> [8 7 3 0]", "(concat [6] [2]) -> [6 2]"], "time": 0.202907, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [3 0] [4 3 6 1]) -> [3 0 4 3 6 1]", "(concat [3 0 9 0 2] []) -> [3 0 9 0 2]", "(concat [6 4] [4]) -> [6 4 4]"], "time": 0.215335, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [6] [1 3 9 3]) -> [6 1 3 9 3]", "(concat [5] [7 9 7 1]) -> [5 7 9 7 1]", "(concat [5 0 9] [7]) -> [5 0 9 7]"], "time": 0.206987, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [8 9 4] [2]) -> [8 9 4 2]", "(concat [5 7 1] [6 2 0]) -> [5 7 1 6 2 0]", "(concat [5] []) -> [5]"], "time": 0.250197, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [] [9 5 2]) -> [9 5 2]", "(concat [7] [0 7 9 4]) -> [7 0 7 9 4]", "(concat [1 9] [4 0 5 7 4]) -> [1 9 4 0 5 7 4]"], "time": 0.229914, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [5 2 2] [8 3 1]) -> [5 2 2 8 3 1]", "(concat [8 0 7 3 2] [4 5 6 6]) -> [8 0 7 3 2 4 5 6 6]", "(concat [4 6 1] [0 4 3]) -> [4 6 1 0 4 3]"], "time": 0.246728, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [1] [5 4]) -> [1 5 4]", "(concat [8 3 5] [1 8 1 5]) -> [8 3 5 1 8 1 5]", "(concat [] [1]) -> [1]"], "time": 0.206919, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [6 9 4 7] [9 6 7 1]) -> [6 9 4 7 9 6 7 1]", "(concat [6 4] []) -> [6 4]", "(concat [5 6 3 9] [9 8 8]) -> [5 6 3 9 9 8 8]"], "time": 0.210757, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [6 7 9 4] [4 8]) -> [6 7 9 4 4 8]", "(concat [2 9] [6 6 4 1]) -> [2 9 6 6 4 1]", "(concat [6 7 1 3 7] [6 3 5]) -> [6 7 1 3 7 6 3 5]"], "time": 0.215671, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [8] [9 8]) -> [8 9 8]", "(concat [6 9 9] [6 3 0]) -> [6 9 9 6 3 0]", "(concat [3 5 1 9] [0 6 5]) -> [3 5 1 9 0 6 5]"], "time": 0.202297, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [] [0]) -> [0]", "(concat [7 5] [3 2 8 5]) -> [7 5 3 2 8 5]", "(concat [] [0 7 2 7 0]) -> [0 7 2 7 0]"], "time": 0.208493, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [1 7 4] [7 0 4 9 7]) -> [1 7 4 7 0 4 9 7]", "(concat [2 0] [0 6]) -> [2 0 0 6]", "(concat [0 0 9 4] [4]) -> [0 0 9 4 4]"], "time": 0.260576, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [9] [0 1 7 0]) -> [9 0 1 7 0]", "(concat [0 6 8 8 4] [6 7 2 0 6]) -> [0 6 8 8 4 6 7 2 0 6]", "(concat [3 4 9] [5 1 6 7]) -> [3 4 9 5 1 6 7]"], "time": 0.244451, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [4 3 5 3] [8]) -> [4 3 5 3 8]", "(concat [7 9 2 0] []) -> [7 9 2 0]", "(concat [7 9 6 0] [7 6 1]) -> [7 9 6 0 7 6 1]"], "time": 0.208236, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [0] [1 4 9 3 5]) -> [0 1 4 9 3 5]", "(concat [9 9 7] [9 8 3]) -> [9 9 7 9 8 3]", "(concat [4 6 6 6 3] []) -> [4 6 6 6 3]"], "time": 0.205159, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [9 8 6] [4]) -> [9 8 6 4]", "(concat [5 1 8] [3]) -> [5 1 8 3]", "(concat [] [1 3 6]) -> [1 3 6]"], "time": 0.197596, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) c) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [] [0 8 1]) -> [0 8 1]", "(concat [] [6 6 2 6]) -> [6 6 2 6]", "(concat [5 3 0 6] []) -> [5 3 0 6]"], "time": 0.05007, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [3 1 8 8] [2 9 3]) -> [3 1 8 8 2 9 3]", "(concat [] []) -> []", "(concat [3 5 8 8] [4 2 2 9]) -> [3 5 8 8 4 2 2 9]"], "time": 0.204955, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [0 3] [4 2 3]) -> [0 3 4 2 3]", "(concat [5 1 5 5 0] [5 2 9]) -> [5 1 5 5 0 5 2 9]", "(concat [2 9 6 3 9] [4 2 3]) -> [2 9 6 3 9 4 2 3]"], "time": 0.227401, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [9 2] []) -> [9 2]", "(concat [6 4 4] [3 0 7 4]) -> [6 4 4 3 0 7 4]", "(concat [8 2 0] [9 3]) -> [8 2 0 9 3]"], "time": 0.244677, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [] [6 3 9 5 6]) -> [6 3 9 5 6]", "(concat [1 3 3 6 7] [1]) -> [1 3 3 6 7 1]", "(concat [] [2 3 1 2]) -> [2 3 1 2]"], "time": 0.2528, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [1] [1 1]) -> [1 1 1]", "(concat [5] [7 0 1]) -> [5 7 0 1]", "(concat [7 4 3] [8]) -> [7 4 3 8]"], "time": 0.218496, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [6 0 6] [5 8]) -> [6 0 6 5 8]", "(concat [3] [8 6 2 2]) -> [3 8 6 2 2]", "(concat [9 4] [6]) -> [9 4 6]"], "time": 0.219728, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [7 7 1 7 6] [5]) -> [7 7 1 7 6 5]", "(concat [3 0] [0 7]) -> [3 0 0 7]", "(concat [] [7 2 8 9]) -> [7 2 8 9]"], "time": 0.20447, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [6] [3 3 3 4]) -> [6 3 3 3 4]", "(concat [3 8 6 7] [8 5 4 5 9]) -> [3 8 6 7 8 5 4 5 9]", "(concat [7 1] [7 2 7]) -> [7 1 7 2 7]"], "time": 0.224625, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [] [8]) -> [8]", "(concat [1 5 1] []) -> [1 5 1]", "(concat [5] [9 1 3 0 5]) -> [5 9 1 3 0 5]"], "time": 0.197803, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [6 4 0] [8 1 7 3]) -> [6 4 0 8 1 7 3]", "(concat [1 1] [8]) -> [1 1 8]", "(concat [3] []) -> [3]"], "time": 0.215322, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [1] [9 6 7]) -> [1 9 6 7]", "(concat [2 9 2 8] [3 1 7 3]) -> [2 9 2 8 3 1 7 3]", "(concat [0 6 2 3 1] [7 6]) -> [0 6 2 3 1 7 6]"], "time": 0.21481, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [3] [7 5]) -> [3 7 5]", "(concat [2 6] [6 5 5 1]) -> [2 6 6 5 5 1]", "(concat [4 2 8 3 5] [9 0 3 3]) -> [4 2 8 3 5 9 0 3 3]"], "time": 0.210356, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [] [0 5 5 3]) -> [0 5 5 3]", "(concat [4 9 3 9 1] [3 9 8 3 1]) -> [4 9 3 9 1 3 9 8 3 1]", "(concat [4 6 5 4] [9 0]) -> [4 6 5 4 9 0]"], "time": 0.217906, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [7 8 4 8 6] [8 9]) -> [7 8 4 8 6 8 9]", "(concat [] [4 8]) -> [4 8]", "(concat [5 9 2] [3 4]) -> [5 9 2 3 4]"], "time": 0.238775, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [] [9]) -> [9]", "(concat [6 0 6] [0 2 7 6]) -> [6 0 6 0 2 7 6]", "(concat [0] [0 9 5 8]) -> [0 0 9 5 8]"], "time": 0.143311, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) c) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [] []) -> []", "(concat [0 0] []) -> [0 0]", "(concat [] [1]) -> [1]"], "time": 0.038933, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [] [5 8 4]) -> [5 8 4]", "(concat [5 4 0 6 5] [2 0 4]) -> [5 4 0 6 5 2 0 4]", "(concat [9 6 3 5] [5 7 7 4 4]) -> [9 6 3 5 5 7 7 4 4]"], "time": 0.152829, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [1 3] []) -> [1 3]", "(concat [2 4 3 7 2] [6]) -> [2 4 3 7 2 6]", "(concat [9 6 5 4 5] [0 8 9 7 0]) -> [9 6 5 4 5 0 8 9 7 0]"], "time": 0.224556, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [7 4 7] [6 2]) -> [7 4 7 6 2]", "(concat [8] []) -> [8]", "(concat [3 6 6 6] [3 6 7 6]) -> [3 6 6 6 3 6 7 6]"], "time": 0.205221, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [] [3]) -> [3]", "(concat [0 7 6 0 0] []) -> [0 7 6 0 0]", "(concat [7 3] [3 1 5]) -> [7 3 3 1 5]"], "time": 0.196068, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [3 9] [2 0 6]) -> [3 9 2 0 6]", "(concat [6] [5]) -> [6 5]", "(concat [5] []) -> [5]"], "time": 0.212805, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [4 8 5 9 0] [0 9 2]) -> [4 8 5 9 0 0 9 2]", "(concat [] [0 8 1 0]) -> [0 8 1 0]", "(concat [2 6 3] [4 5]) -> [2 6 3 4 5]"], "time": 0.222118, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [1] [2 2 5 8]) -> [1 2 2 5 8]", "(concat [5 4 2] [6]) -> [5 4 2 6]", "(concat [7 0] [5 7 1 4 6]) -> [7 0 5 7 1 4 6]"], "time": 0.234447, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [6 6 4 0] [4 8 8 0 5]) -> [6 6 4 0 4 8 8 0 5]", "(concat [8 3 2 2 1] [1 7]) -> [8 3 2 2 1 1 7]", "(concat [7 9 4 5] [6 3 4 9]) -> [7 9 4 5 6 3 4 9]"], "time": 0.215994, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [0 2 1] [1 0 2 7]) -> [0 2 1 1 0 2 7]", "(concat [0 7 4 7] [6]) -> [0 7 4 7 6]", "(concat [9 3 5 0] [8 2 8 7]) -> [9 3 5 0 8 2 8 7]"], "time": 0.230824, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [0] []) -> [0]", "(concat [9] [6 5 3]) -> [9 6 5 3]", "(concat [0 3 4 2 2] [2]) -> [0 3 4 2 2 2]"], "time": 0.218632, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [1 7] [7]) -> [1 7 7]", "(concat [6] [3 7]) -> [6 3 7]", "(concat [0 5 2] []) -> [0 5 2]"], "time": 0.223888, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [7 7 9] [6 4 7 1]) -> [7 7 9 6 4 7 1]", "(concat [9] [5 6 8]) -> [9 5 6 8]", "(concat [] []) -> []"], "time": 0.184168, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [9 4 4 0] []) -> [9 4 4 0]", "(concat [5] [3 7 4]) -> [5 3 7 4]", "(concat [9 2] [3 2 8 2]) -> [9 2 3 2 8 2]"], "time": 0.186068, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [5 1 5] []) -> [5 1 5]", "(concat [3 2 2 1 8] [2]) -> [3 2 2 1 8 2]", "(concat [5 7 1 2 1] [7 0 1 1 9]) -> [5 7 1 2 1 7 0 1 1 9]"], "time": 0.190967, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [2] [8 6 2]) -> [2 8 6 2]", "(concat [1 0 0 0 8] [6 4 3 8 8]) -> [1 0 0 0 8 6 4 3 8 8]", "(concat [] [8 4 1 8]) -> [8 4 1 8]"], "time": 0.215689, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [8 1] [4 4 7 0]) -> [8 1 4 4 7 0]", "(concat [4 7 0 3 9] [5 6 5 8]) -> [4 7 0 3 9 5 6 5 8]", "(concat [3 9 4 6] [1 5 9]) -> [3 9 4 6 1 5 9]"], "time": 0.116852, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [] [4]) -> [4]", "(concat [] [9 8 4 1]) -> [9 8 4 1]", "(concat [0 9 7] [7 1 7 5]) -> [0 9 7 7 1 7 5]"], "time": 0.105025, "name": "concat"}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "examples": ["(concat [] []) -> []", "(concat [6] [7]) -> [6 7]", "(concat [2] []) -> [2]", "(concat [0 6] [0 2 3 3 1]) -> [0 6 0 2 3 3 1]"], "time": 0.09861, "name": "concat"}
