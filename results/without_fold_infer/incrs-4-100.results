{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[3 0 2 9]]) -> [[4 1 3 10]]", "(incrs [[7 3 3 1 0] [4 4 1 8]]) -> [[8 4 4 2 1] [5 5 2 9]]"], "name": "incrs", "time": 0.942868}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[6 5] [2] [0] []]) -> [[7 6] [3] [1] []]", "(incrs [[7 9 1 3 0] [3 4 7] []]) -> [[8 10 2 4 1] [4 5 8] []]"], "name": "incrs", "time": 0.980709}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[] [7 0 6 0] [1]]) -> [[] [8 1 7 1] [2]]", "(incrs [[1 7 8 7 9] [1 2] [] []]) -> [[2 8 9 8 10] [2 3] [] []]"], "name": "incrs", "time": 0.8845}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[1 3 7 8 1] [1 8] [6 0 8] [6 9 3 1 5] [4 3 0]]) -> [[2 4 8 9 2] [2 9] [7 1 9] [7 10 4 2 6] [5 4 1]]"], "name": "incrs", "time": 0.956969}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[6 9]]) -> [[7 10]]", "(incrs [[9 4]]) -> [[10 5]]"], "name": "incrs", "time": 1.030642}
{"solution": "(let incrs (let a (lambda (b) []) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs []) -> []"], "name": "incrs", "time": 0.000406}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[6 1] [4 7 0 6] [7 9 5] [] [0]]) -> [[7 2] [5 8 1 7] [8 10 6] [] [1]]", "(incrs [[3 4 9 6]]) -> [[4 5 10 7]]"], "name": "incrs", "time": 0.96144}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[8 2 6]]) -> [[9 3 7]]", "(incrs [[8 3 4] [5 0 3 5 4] [9 9 5 6 2] [3] [7]]) -> [[9 4 5] [6 1 4 6 5] [10 10 6 7 3] [4] [8]]"], "name": "incrs", "time": 1.558212}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[4] [4 7 4 7] [0 3 1 0]]) -> [[5] [5 8 5 8] [1 4 2 1]]", "(incrs [[] [9 0] []]) -> [[] [10 1] []]"], "name": "incrs", "time": 0.599458}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[1 5 0 3] [1 7 7 6] [1 1 3 0]]) -> [[2 6 1 4] [2 8 8 7] [2 2 4 1]]", "(incrs [[6 0] [9] [2 4 2 0 0] [6 3 0 4] [6 1]]) -> [[7 1] [10] [3 5 3 1 1] [7 4 1 5] [7 2]]"], "name": "incrs", "time": 0.57592}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[5 2 6] [] [3 1 1 9 6]]) -> [[6 3 7] [] [4 2 2 10 7]]", "(incrs [[8 7] [0 6 4] [5] [4]]) -> [[9 8] [1 7 5] [6] [5]]"], "name": "incrs", "time": 0.595644}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[1] [4] [3 7] [7 2 0] [8 9 8 3 4]]) -> [[2] [5] [4 8] [8 3 1] [9 10 9 4 5]]", "(incrs [[1 8 0]]) -> [[2 9 1]]"], "name": "incrs", "time": 1.682024}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[] [9] [5 8 9 4] [3] [4 7 5 9]]) -> [[] [10] [6 9 10 5] [4] [5 8 6 10]]", "(incrs [[6 7 8 6] [] [8 6] [8 3] [1 9 4 5]]) -> [[7 8 9 7] [] [9 7] [9 4] [2 10 5 6]]"], "name": "incrs", "time": 1.788469}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[1 0 7 2]]) -> [[2 1 8 3]]", "(incrs [[6 4 1 8]]) -> [[7 5 2 9]]"], "name": "incrs", "time": 1.802637}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[6] [] [7 0 8 3] [0 9 1]]) -> [[7] [] [8 1 9 4] [1 10 2]]"], "name": "incrs", "time": 0.61668}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[7 9] [7] [1 9 6 0] [3 4 1 6 6]]) -> [[8 10] [8] [2 10 7 1] [4 5 2 7 7]]", "(incrs [[] [0 9 8 2 6] [0 3 9] [8 8 5 7] []]) -> [[] [1 10 9 3 7] [1 4 10] [9 9 6 8] []]"], "name": "incrs", "time": 1.790743}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[1 3 4] [9 7 9 4 4] [7 5 4]]) -> [[2 4 5] [10 8 10 5 5] [8 6 5]]", "(incrs [[] [8] [3 6] [2 6 2 8]]) -> [[] [9] [4 7] [3 7 3 9]]"], "name": "incrs", "time": 1.898175}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[4 3 8] [] [6 1 2 9]]) -> [[5 4 9] [] [7 2 3 10]]", "(incrs []) -> []"], "name": "incrs", "time": 1.823802}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[2 2 9] [3] [1 2 6] [8] []]) -> [[3 3 10] [4] [2 3 7] [9] []]", "(incrs [[] [2 5 2 0 7] [6 7 3] [] []]) -> [[] [3 6 3 1 8] [7 8 4] [] []]"], "name": "incrs", "time": 1.789233}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[1 0 7 5] [2] [0 5] [3 1 7 8 9] [9 3 4 2 4]]) -> [[2 1 8 6] [3] [1 6] [4 2 8 9 10] [10 4 5 3 5]]", "(incrs [[8 8 1] [0 7 2] [] [9]]) -> [[9 9 2] [1 8 3] [] [10]]"], "name": "incrs", "time": 1.85365}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[3 2 5] [] [2 2 5] [3 6 1] [1 1 8]]) -> [[4 3 6] [] [3 3 6] [4 7 2] [2 2 9]]", "(incrs []) -> []"], "name": "incrs", "time": 0.630494}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[5 5] [3 1 6 1 4]]) -> [[6 6] [4 2 7 2 5]]", "(incrs [[0 3 6] [3]]) -> [[1 4 7] [4]]"], "name": "incrs", "time": 1.805311}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[1 5 9] [7 3 5] [7 4 2 4 2] [6 1 2 1 8]]) -> [[2 6 10] [8 4 6] [8 5 3 5 3] [7 2 3 2 9]]", "(incrs [[] [2 7 4 5]]) -> [[] [3 8 5 6]]"], "name": "incrs", "time": 1.160785}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[] [7] [5]]) -> [[] [8] [6]]", "(incrs []) -> []"], "name": "incrs", "time": 0.741633}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[4 1] [9 0 3 2] []]) -> [[5 2] [10 1 4 3] []]", "(incrs [[9 2] [8 4 6 3 5] [7 0 2 9]]) -> [[10 3] [9 5 7 4 6] [8 1 3 10]]"], "name": "incrs", "time": 0.74076}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[8 2 9 8 6] [1 1 9 3 2] [0] [6] [9 8 5]]) -> [[9 3 10 9 7] [2 2 10 4 3] [1] [7] [10 9 6]]", "(incrs []) -> []"], "name": "incrs", "time": 0.748738}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[8 7 4 4] [6 2 6 7 9] [6 9 4] [7 9 8]]) -> [[9 8 5 5] [7 3 7 8 10] [7 10 5] [8 10 9]]", "(incrs []) -> []"], "name": "incrs", "time": 0.777214}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[2 7 6 9 8] [4 5 2 5 6] [0 9 9] [6 2 6 9]]) -> [[3 8 7 10 9] [5 6 3 6 7] [1 10 10] [7 3 7 10]]", "(incrs [[1 7 5 9 9] [4 0 0 9]]) -> [[2 8 6 10 10] [5 1 1 10]]"], "name": "incrs", "time": 0.799605}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[3] [1]]) -> [[4] [2]]", "(incrs [[] [3 9 5 7] [] [] [4 1 4 9]]) -> [[] [4 10 6 8] [] [] [5 2 5 10]]"], "name": "incrs", "time": 0.724266}
{"solution": "(let incrs (let a (lambda (b) []) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs []) -> []"], "name": "incrs", "time": 0.000443}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[4] []]) -> [[5] []]", "(incrs [[4]]) -> [[5]]"], "name": "incrs", "time": 0.882962}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[3 7 1] [8 8 5]]) -> [[4 8 2] [9 9 6]]", "(incrs []) -> []"], "name": "incrs", "time": 1.060193}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[3 4 5]]) -> [[4 5 6]]", "(incrs [[8 1 1 2]]) -> [[9 2 2 3]]"], "name": "incrs", "time": 1.145074}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[5] [5 8 7 5] [8 4] [3 0]]) -> [[6] [6 9 8 6] [9 5] [4 1]]"], "name": "incrs", "time": 1.181661}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[4 6] [4]]) -> [[5 7] [5]]", "(incrs []) -> []"], "name": "incrs", "time": 1.196125}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[9 8 9 9] [8 8 0 6 2] [4 8 2 8 4]]) -> [[10 9 10 10] [9 9 1 7 3] [5 9 3 9 5]]", "(incrs [[1] [2] [9 0 0 1 0]]) -> [[2] [3] [10 1 1 2 1]]"], "name": "incrs", "time": 1.237248}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[9 0] [0 7 6 1]]) -> [[10 1] [1 8 7 2]]", "(incrs [[] [] [5] [2 4] [7]]) -> [[] [] [6] [3 5] [8]]"], "name": "incrs", "time": 1.242317}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[1] [9 2 5 2 5] [8 2 3 7] [3 9 1] [2 4]]) -> [[2] [10 3 6 3 6] [9 3 4 8] [4 10 2] [3 5]]"], "name": "incrs", "time": 1.263859}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[1 0 5 4]]) -> [[2 1 6 5]]", "(incrs [[3 6 4 0]]) -> [[4 7 5 1]]"], "name": "incrs", "time": 0.548002}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[] [5 6] [1 1 2 4] [8 8 3 6 9] [1]]) -> [[] [6 7] [2 2 3 5] [9 9 4 7 10] [2]]", "(incrs []) -> []"], "name": "incrs", "time": 0.641411}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[] [1] [5 6 4 9] [2 3] []]) -> [[] [2] [6 7 5 10] [3 4] []]"], "name": "incrs", "time": 1.268055}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[4 6 4] [4 6 0 2]]) -> [[5 7 5] [5 7 1 3]]", "(incrs []) -> []"], "name": "incrs", "time": 0.620558}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[9 2 6] [2 0 2] [8 6]]) -> [[10 3 7] [3 1 3] [9 7]]", "(incrs [[8 8 0 2 6] [8] [1 4 6 8 8] [2 9 3 8 6]]) -> [[9 9 1 3 7] [9] [2 5 7 9 9] [3 10 4 9 7]]"], "name": "incrs", "time": 0.962051}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[6 7] [5 0 0] [3 5 4 9 4] [6 2 5 0]]) -> [[7 8] [6 1 1] [4 6 5 10 5] [7 3 6 1]]", "(incrs [[] [6 4 2 0 0] [] [5 5 7 4 8] [8 4]]) -> [[] [7 5 3 1 1] [] [6 6 8 5 9] [9 5]]"], "name": "incrs", "time": 0.872076}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[5 1] [5 2 2 7]]) -> [[6 2] [6 3 3 8]]", "(incrs [[5 1] [5 0 0 0] [2 6 4] [1 1 7 6]]) -> [[6 2] [6 1 1 1] [3 7 5] [2 2 8 7]]"], "name": "incrs", "time": 0.792814}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[] [6] []]) -> [[] [7] []]", "(incrs [[3 1 4 4 2]]) -> [[4 2 5 5 3]]"], "name": "incrs", "time": 0.67028}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[]]) -> [[]]", "(incrs [[3 1] [4] [2] [5 4 8 8 6] [0]]) -> [[4 2] [5] [3] [6 5 9 9 7] [1]]"], "name": "incrs", "time": 0.635627}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[8 6 6 2 3] [9 7 0 2 3] [7 4 4 9] [1 4 2 4 2]]) -> [[9 7 7 3 4] [10 8 1 3 4] [8 5 5 10] [2 5 3 5 3]]", "(incrs [[9 9 6 2 4]]) -> [[10 10 7 3 5]]"], "name": "incrs", "time": 0.581722}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[5 8 4 5 2]]) -> [[6 9 5 6 3]]", "(incrs []) -> []"], "name": "incrs", "time": 1.048059}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[0 6 3 9]]) -> [[1 7 4 10]]", "(incrs [[6]]) -> [[7]]"], "name": "incrs", "time": 0.569479}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[3 2] [8 1 9 5 9] []]) -> [[4 3] [9 2 10 6 10] []]", "(incrs [[7 0 4 9 8] [1]]) -> [[8 1 5 10 9] [2]]"], "name": "incrs", "time": 0.653398}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[] [4 8 1] []]) -> [[] [5 9 2] []]", "(incrs [[] [3 7] [1 1 6 0] [5 3 9] [2 8 5 7]]) -> [[] [4 8] [2 2 7 1] [6 4 10] [3 9 6 8]]"], "name": "incrs", "time": 0.712648}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[0 6 5 5]]) -> [[1 7 6 6]]", "(incrs [[]]) -> [[]]"], "name": "incrs", "time": 1.224848}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[9] [3 4] [0 0 9 3 9]]) -> [[10] [4 5] [1 1 10 4 10]]", "(incrs [[8] [6 4 9 9 2] [] [4 7 5] []]) -> [[9] [7 5 10 10 3] [] [5 8 6] []]"], "name": "incrs", "time": 1.1827}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[8 1 1] [] [4 3 1] []]) -> [[9 2 2] [] [5 4 2] []]", "(incrs [[] [4] [1 6 0 1] [1 3] [6 3 2]]) -> [[] [5] [2 7 1 2] [2 4] [7 4 3]]"], "name": "incrs", "time": 1.378753}
{"solution": "(let incrs (let a (lambda (b) []) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs []) -> []"], "name": "incrs", "time": 0.00043}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[0] [3 1 2] [4 0 9 1] [9]]) -> [[1] [4 2 3] [5 1 10 2] [10]]", "(incrs []) -> []"], "name": "incrs", "time": 1.431927}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[4 2 6 1 4] [9 3] [7 5 0] [] [5 1 6]]) -> [[5 3 7 2 5] [10 4] [8 6 1] [] [6 2 7]]", "(incrs [[2 2 3 8 9]]) -> [[3 3 4 9 10]]"], "name": "incrs", "time": 1.287598}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[5 3 0 7 0] [9 2 9] [] [5] [4]]) -> [[6 4 1 8 1] [10 3 10] [] [6] [5]]", "(incrs [[1 5] [0 4 7] [8 0 7 8]]) -> [[2 6] [1 5 8] [9 1 8 9]]"], "name": "incrs", "time": 0.580027}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[5 2] []]) -> [[6 3] []]", "(incrs [[] [1 9] [1 1 7] [8 5 2 0] []]) -> [[] [2 10] [2 2 8] [9 6 3 1] []]"], "name": "incrs", "time": 1.242555}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[6]]) -> [[7]]", "(incrs [[2 4 7] [9 9] []]) -> [[3 5 8] [10 10] []]"], "name": "incrs", "time": 1.224715}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[1 6 3 4]]) -> [[2 7 4 5]]", "(incrs [[3 6] [2 7 2 5] [5] [1 9 8 7 0] [2 7 2]]) -> [[4 7] [3 8 3 6] [6] [2 10 9 8 1] [3 8 3]]"], "name": "incrs", "time": 1.361262}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[4 1] [2 4 2 3 5] [9]]) -> [[5 2] [3 5 3 4 6] [10]]", "(incrs [[9 6 5 3] [] []]) -> [[10 7 6 4] [] []]"], "name": "incrs", "time": 1.251911}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[9 6 5] [0 1] []]) -> [[10 7 6] [1 2] []]"], "name": "incrs", "time": 0.636015}
{"solution": "(let incrs (let a (lambda (b) b) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[]]) -> [[]]"], "name": "incrs", "time": 0.000835}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[7] [3 1] [0 4] [7 0 8]]) -> [[8] [4 2] [1 5] [8 1 9]]", "(incrs [[8 2 7 9 2]]) -> [[9 3 8 10 3]]"], "name": "incrs", "time": 0.625201}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[1 9 2 3 5] [] [9 2 0 8] []]) -> [[2 10 3 4 6] [] [10 3 1 9] []]", "(incrs []) -> []"], "name": "incrs", "time": 1.231993}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[2 8 6] [] [5 2 6 1] [8 7 0 5] []]) -> [[3 9 7] [] [6 3 7 2] [9 8 1 6] []]", "(incrs [[8 1] [3 2 0 8 8] [4 4] [6 8 7 9 8] [7 1 5]]) -> [[9 2] [4 3 1 9 9] [5 5] [7 9 8 10 9] [8 2 6]]"], "name": "incrs", "time": 0.797785}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[2 5 9] [0 4] [8 3 6] [1 9 7 2] [3 3 0 7 6]]) -> [[3 6 10] [1 5] [9 4 7] [2 10 8 3] [4 4 1 8 7]]", "(incrs [[1 7] [5 3 1] [4 3 8]]) -> [[2 8] [6 4 2] [5 4 9]]"], "name": "incrs", "time": 0.628634}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[2 0 3 3] [9] [1 4 3] [2 3] [8 6 1 5 0]]) -> [[3 1 4 4] [10] [2 5 4] [3 4] [9 7 2 6 1]]", "(incrs [[8 3] [2 2 7]]) -> [[9 4] [3 3 8]]"], "name": "incrs", "time": 0.723361}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[]]) -> [[]]", "(incrs [[6 5 1 3] [5 5] [] [] [9 1 1]]) -> [[7 6 2 4] [6 6] [] [] [10 2 2]]"], "name": "incrs", "time": 0.581473}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[8 7 7] [6 3 6 7 1] [8]]) -> [[9 8 8] [7 4 7 8 2] [9]]", "(incrs [[7 6] [] [4 0 0 7] [1 5] [9 7 0 7 6]]) -> [[8 7] [] [5 1 1 8] [2 6] [10 8 1 8 7]]"], "name": "incrs", "time": 0.608703}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[3 4] [7 3 4 6 0] [5 5 1 7 7] [7 1 8]]) -> [[4 5] [8 4 5 7 1] [6 6 2 8 8] [8 2 9]]", "(incrs [[6 0 1 9 5]]) -> [[7 1 2 10 6]]"], "name": "incrs", "time": 0.720756}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[7] [4 1 9 1 7] [] [] [9 5]]) -> [[8] [5 2 10 2 8] [] [] [10 6]]", "(incrs [[1 8 9 9] [7 6 2 6 0] [9 2]]) -> [[2 9 10 10] [8 7 3 7 1] [10 3]]"], "name": "incrs", "time": 1.071337}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[7 3] [7 5 8 5] [7 0 2 3]]) -> [[8 4] [8 6 9 6] [8 1 3 4]]", "(incrs [[0 3] [0 1 0 1 1] [9 1] [8 7 4 7]]) -> [[1 4] [1 2 1 2 2] [10 2] [9 8 5 8]]"], "name": "incrs", "time": 1.181747}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[9 0]]) -> [[10 1]]", "(incrs []) -> []"], "name": "incrs", "time": 1.102739}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[] [6 0 2] [1 4] [1 7 4] []]) -> [[] [7 1 3] [2 5] [2 8 5] []]", "(incrs []) -> []"], "name": "incrs", "time": 1.136256}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[5 4 1] [3] [3 8 0 9] [8 2 8]]) -> [[6 5 2] [4] [4 9 1 10] [9 3 9]]", "(incrs [[7] []]) -> [[8] []]"], "name": "incrs", "time": 1.150519}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[4 8]]) -> [[5 9]]"], "name": "incrs", "time": 1.104147}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[1 1] [0 1] [2 8 6] [6] [1 7 8 6]]) -> [[2 2] [1 2] [3 9 7] [7] [2 8 9 7]]", "(incrs [[0 8 9 4 6] [3 2 2] [2 5 3 3 6] [9] [5 4]]) -> [[1 9 10 5 7] [4 3 3] [3 6 4 4 7] [10] [6 5]]"], "name": "incrs", "time": 0.562273}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[7] [9 8 5 3] []]) -> [[8] [10 9 6 4] []]", "(incrs [[0 6 4] [3 8 7] [7 5 3 7]]) -> [[1 7 5] [4 9 8] [8 6 4 8]]"], "name": "incrs", "time": 0.6612}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[5 3 9 8 8] [] []]) -> [[6 4 10 9 9] [] []]", "(incrs [[2 1 4 2] [9 0] [6] [2 2] [4]]) -> [[3 2 5 3] [10 1] [7] [3 3] [5]]"], "name": "incrs", "time": 0.65944}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[6 5 7] [3 6 7]]) -> [[7 6 8] [4 7 8]]", "(incrs []) -> []"], "name": "incrs", "time": 1.190384}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[5 7 7 2 2] [8 7 3] [] [8 8 2 4]]) -> [[6 8 8 3 3] [9 8 4] [] [9 9 3 5]]", "(incrs [[] [8 8]]) -> [[] [9 9]]"], "name": "incrs", "time": 1.186536}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[3 3 4 9 7] [7] [5 2] [] [0 7]]) -> [[4 4 5 10 8] [8] [6 3] [] [1 8]]", "(incrs [[2 7 0 7 7] [] [3 6] [2 0 0]]) -> [[3 8 1 8 8] [] [4 7] [3 1 1]]"], "name": "incrs", "time": 1.152669}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[]]) -> [[]]", "(incrs [[7]]) -> [[8]]"], "name": "incrs", "time": 1.115732}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[3 0] [9 2 3 0] [9 2 6 9 9] [8 1 9] [4 8 7 3]]) -> [[4 1] [10 3 4 1] [10 3 7 10 10] [9 2 10] [5 9 8 4]]", "(incrs []) -> []"], "name": "incrs", "time": 0.599109}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[4 0 3 4] [4 6]]) -> [[5 1 4 5] [5 7]]", "(incrs []) -> []"], "name": "incrs", "time": 0.672261}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[9 3] [5]]) -> [[10 4] [6]]", "(incrs [[] [2] [3 1 0]]) -> [[] [3] [4 2 1]]"], "name": "incrs", "time": 0.565667}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[6 4] [8] [2 5 0 9 3] [8 1 0]]) -> [[7 5] [9] [3 6 1 10 4] [9 2 1]]", "(incrs [[5 6 3] [0] [] [6 6 6 6 2] [6 3 8 3]]) -> [[6 7 4] [1] [] [7 7 7 7 3] [7 4 9 4]]"], "name": "incrs", "time": 0.882647}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[4 9 9] [] [3 2 5]]) -> [[5 10 10] [] [4 3 6]]"], "name": "incrs", "time": 0.567724}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[8 2 4 5 9] [0 4] [0] []]) -> [[9 3 5 6 10] [1 5] [1] []]", "(incrs [[7 2 1] [9 8 1 8] [0 8] [7 4 9 9 7] [5 5 5 8]]) -> [[8 3 2] [10 9 2 9] [1 9] [8 5 10 10 8] [6 6 6 9]]"], "name": "incrs", "time": 0.427728}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[9 1 8]]) -> [[10 2 9]]", "(incrs []) -> []"], "name": "incrs", "time": 0.731855}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[0] [] [9 4 7 8 1] [3]]) -> [[1] [] [10 5 8 9 2] [4]]", "(incrs []) -> []"], "name": "incrs", "time": 0.431975}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[2 8 5 0] [2] [8 5 8 4]]) -> [[3 9 6 1] [3] [9 6 9 5]]", "(incrs [[]]) -> [[]]"], "name": "incrs", "time": 0.716434}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[6 7 7 3 4] []]) -> [[7 8 8 4 5] []]"], "name": "incrs", "time": 0.520654}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[] [5] [] [3 1] []]) -> [[] [6] [] [4 2] []]", "(incrs [[] [6] [5 5 6] [0]]) -> [[] [7] [6 6 7] [1]]"], "name": "incrs", "time": 0.749477}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[0] [8 0 0]]) -> [[1] [9 1 1]]"], "name": "incrs", "time": 0.61084}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs [[1 7 5 3] [3]]) -> [[2 8 6 4] [4]]", "(incrs [[] [] [3 1 9 2] [0 6] [7]]) -> [[] [] [4 2 10 3] [1 7] [8]]"], "name": "incrs", "time": 0.573687}
{"solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)", "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[5 1 2 2 9] [0 3 2 9 4] [3 4 8 9 5] [8 3 9 5 1] [6 0 7 6]]) -> [[6 2 3 3 10] [1 4 3 10 5] [4 5 9 10 6] [9 4 10 6 2] [7 1 8 7]]"], "name": "incrs", "time": 0.600023}
