{"time": 1.003317, "examples": ["(multlast []) -> []", "(multlast [9 0 3]) -> [3 3 3]", "(multlast []) -> []", "(multlast [6 7 8 2 3]) -> [3 3 3 3 3]", "(multlast [6 3 8]) -> [8 8 8]", "(multlast [2]) -> [2]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.062929, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [6 8 9 1]) -> [1 1 1 1]", "(multlast [2 1 8]) -> [8 8 8]", "(multlast [1 9 5 8]) -> [8 8 8 8]", "(multlast [5 1]) -> [1 1]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.001562, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [2 2 8 3 8]) -> [8 8 8 8 8]", "(multlast [1 3 6]) -> [6 6 6]", "(multlast []) -> []", "(multlast [9 7]) -> [7 7]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.038239, "examples": ["(multlast []) -> []", "(multlast [1]) -> [1]", "(multlast []) -> []", "(multlast [8 9 4]) -> [4 4 4]", "(multlast [3 1 3 8]) -> [8 8 8 8]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.013831, "examples": ["(multlast []) -> []", "(multlast [5]) -> [5]", "(multlast [0 3]) -> [3 3]", "(multlast [0 7 8 6]) -> [6 6 6 6]", "(multlast [8 5 3 8]) -> [8 8 8 8]", "(multlast [7 4 1 8]) -> [8 8 8 8]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.049859, "examples": ["(multlast []) -> []", "(multlast [1 1 2 4 0]) -> [0 0 0 0 0]", "(multlast [8 3 0 0]) -> [0 0 0 0]", "(multlast [1 6 0 4 8]) -> [8 8 8 8 8]", "(multlast [2]) -> [2]", "(multlast [7 1 7 8]) -> [8 8 8 8]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.043724, "examples": ["(multlast []) -> []", "(multlast [3 5 1 5 1]) -> [1 1 1 1 1]", "(multlast [7]) -> [7]", "(multlast [6 3]) -> [3 3]", "(multlast []) -> []", "(multlast [7 6 3 3]) -> [3 3 3 3]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.1409, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [3 0 3]) -> [3 3 3]", "(multlast []) -> []", "(multlast [6]) -> [6]", "(multlast [1 1 0]) -> [0 0 0]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.161655, "examples": ["(multlast []) -> []", "(multlast [0 6 7]) -> [7 7 7]", "(multlast [5]) -> [5]", "(multlast [1 2 5 6 3]) -> [3 3 3 3 3]", "(multlast [5 6 2 1 0]) -> [0 0 0 0 0]", "(multlast [9]) -> [9]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.202095, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [3 9 4 4]) -> [4 4 4 4]", "(multlast [8 3]) -> [3 3]", "(multlast [1 8]) -> [8 8]", "(multlast [6 4 1]) -> [1 1 1]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.195548, "examples": ["(multlast []) -> []", "(multlast [0]) -> [0]", "(multlast [7 0 4 3]) -> [3 3 3 3]", "(multlast [2 3 6]) -> [6 6 6]", "(multlast [2 4 6]) -> [6 6 6]", "(multlast [3]) -> [3]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.210444, "examples": ["(multlast []) -> []", "(multlast [8 3 8 4 9]) -> [9 9 9 9 9]", "(multlast [3]) -> [3]", "(multlast [2 5]) -> [5 5]", "(multlast []) -> []", "(multlast [8 6 7 4 3]) -> [3 3 3 3 3]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.169633, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [1 3 6]) -> [6 6 6]", "(multlast [1 3 5 2]) -> [2 2 2 2]", "(multlast [2 9 3 7]) -> [7 7 7 7]", "(multlast [5 4 6]) -> [6 6 6]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.125854, "examples": ["(multlast []) -> []", "(multlast [2 1]) -> [1 1]", "(multlast [1 6 4 8 9]) -> [9 9 9 9 9]", "(multlast [8 2]) -> [2 2]", "(multlast [0 1 0]) -> [0 0 0]", "(multlast [7 8 3 7]) -> [7 7 7 7]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.114337, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [0 3]) -> [3 3]", "(multlast [1 0 1]) -> [1 1 1]", "(multlast [9]) -> [9]", "(multlast [9 0 1 9]) -> [9 9 9 9]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.247687, "examples": ["(multlast []) -> []", "(multlast [3 8 6 5]) -> [5 5 5 5]", "(multlast [9 5 7 3 0]) -> [0 0 0 0 0]", "(multlast [0 5 4 4 9]) -> [9 9 9 9 9]", "(multlast [4]) -> [4]", "(multlast [1 8 0 0]) -> [0 0 0 0]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.195402, "examples": ["(multlast []) -> []", "(multlast [3]) -> [3]", "(multlast []) -> []", "(multlast [2 6]) -> [6 6]", "(multlast [3 7]) -> [7 7]", "(multlast [8 3]) -> [3 3]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) b)) _) _)"}
{"time": 0.102887, "examples": ["(multlast []) -> []", "(multlast [9 0]) -> [0 0]", "(multlast [5]) -> [5]", "(multlast []) -> []", "(multlast [3]) -> [3]", "(multlast [0 5]) -> [5 5]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) b)) _) _)"}
{"time": 0.572894, "examples": ["(multlast []) -> []", "(multlast [6 6 0 9]) -> [9 9 9 9]", "(multlast [4 0 6 5]) -> [5 5 5 5]", "(multlast []) -> []", "(multlast [0 7 6 6]) -> [6 6 6 6]", "(multlast [8 5]) -> [5 5]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.561348, "examples": ["(multlast []) -> []", "(multlast [7 1]) -> [1 1]", "(multlast [7 4]) -> [4 4]", "(multlast [9 3 0 5 2]) -> [2 2 2 2 2]", "(multlast []) -> []", "(multlast [5]) -> [5]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.573029, "examples": ["(multlast []) -> []", "(multlast [3 9 8]) -> [8 8 8]", "(multlast [7 1 1 7 5]) -> [5 5 5 5 5]", "(multlast [2]) -> [2]", "(multlast [1 9]) -> [9 9]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.604346, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [1]) -> [1]", "(multlast [1 8 4]) -> [4 4 4]", "(multlast [5 9 8 3 8]) -> [8 8 8 8 8]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.67834, "examples": ["(multlast []) -> []", "(multlast [9]) -> [9]", "(multlast [3 8 8 2 1]) -> [1 1 1 1 1]", "(multlast [8 0 4 8 5]) -> [5 5 5 5 5]", "(multlast [4 9 1 4 9]) -> [9 9 9 9 9]", "(multlast [9 7 0 7 4]) -> [4 4 4 4 4]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.875778, "examples": ["(multlast []) -> []", "(multlast [5 6]) -> [6 6]", "(multlast [7 5]) -> [5 5]", "(multlast [4 0 7 8 0]) -> [0 0 0 0 0]", "(multlast [0 1 2 9]) -> [9 9 9 9]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.597363, "examples": ["(multlast []) -> []", "(multlast [2]) -> [2]", "(multlast [6]) -> [6]", "(multlast [5 1]) -> [1 1]", "(multlast [2 7]) -> [7 7]", "(multlast [6 4 9 4]) -> [4 4 4 4]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.001138, "examples": ["(multlast []) -> []", "(multlast [1 1]) -> [1 1]", "(multlast [8 9]) -> [9 9]", "(multlast [2 0 4 0]) -> [0 0 0 0]", "(multlast [3 0 3]) -> [3 3 3]", "(multlast [0 7 9]) -> [9 9 9]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.038543, "examples": ["(multlast []) -> []", "(multlast [0 2 6 9]) -> [9 9 9 9]", "(multlast [0 9]) -> [9 9]", "(multlast [8 7 4 1]) -> [1 1 1 1]", "(multlast [6 2 7 1]) -> [1 1 1 1]", "(multlast [5 0 6]) -> [6 6 6]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.041652, "examples": ["(multlast []) -> []", "(multlast [4 1 6 2]) -> [2 2 2 2]", "(multlast [6 6 5 6]) -> [6 6 6 6]", "(multlast [2 7 3 4]) -> [4 4 4 4]", "(multlast [5 3 4]) -> [4 4 4]", "(multlast [7]) -> [7]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.056346, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [3 2 6 2]) -> [2 2 2 2]", "(multlast [1 5 7 6]) -> [6 6 6 6]", "(multlast [3 4 8 2 3]) -> [3 3 3 3 3]", "(multlast [2 0 3 4 1]) -> [1 1 1 1 1]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.067194, "examples": ["(multlast []) -> []", "(multlast [1 6 6]) -> [6 6 6]", "(multlast [6 7]) -> [7 7]", "(multlast []) -> []", "(multlast [0 4 0 0 2]) -> [2 2 2 2 2]", "(multlast [5 2 3 7 0]) -> [0 0 0 0 0]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.98452, "examples": ["(multlast []) -> []", "(multlast [3]) -> [3]", "(multlast [8]) -> [8]", "(multlast [1]) -> [1]", "(multlast [5 1 1 5 9]) -> [9 9 9 9 9]", "(multlast [2 1 2]) -> [2 2 2]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.973169, "examples": ["(multlast []) -> []", "(multlast [8]) -> [8]", "(multlast [1 2 9 0]) -> [0 0 0 0]", "(multlast [1 0 6 9 7]) -> [7 7 7 7 7]", "(multlast [7 1 4 5]) -> [5 5 5 5]", "(multlast [9]) -> [9]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.928232, "examples": ["(multlast []) -> []", "(multlast [1]) -> [1]", "(multlast [4]) -> [4]", "(multlast [0 5 7 8]) -> [8 8 8 8]", "(multlast [0 8 3 9]) -> [9 9 9 9]", "(multlast [4 7 6]) -> [6 6 6]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.491948, "examples": ["(multlast []) -> []", "(multlast [5 0 1]) -> [1 1 1]", "(multlast [2 0 5 3]) -> [3 3 3 3]", "(multlast [2 1]) -> [1 1]", "(multlast [3 8 9]) -> [9 9 9]", "(multlast [6]) -> [6]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.004983, "examples": ["(multlast []) -> []", "(multlast [0 9 3 7 4]) -> [4 4 4 4 4]", "(multlast [3 0 3]) -> [3 3 3]", "(multlast [5 6 8 3 8]) -> [8 8 8 8 8]", "(multlast []) -> []", "(multlast [3 4 0 3]) -> [3 3 3 3]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.470975, "examples": ["(multlast []) -> []", "(multlast [3 3 2]) -> [2 2 2]", "(multlast [0]) -> [0]", "(multlast [3 4 4]) -> [4 4 4]", "(multlast []) -> []", "(multlast [9 0 3 5 1]) -> [1 1 1 1 1]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.158012, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [0 5]) -> [5 5]", "(multlast [7]) -> [7]", "(multlast [1]) -> [1]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) b)) _) _)"}
{"time": 0.511896, "examples": ["(multlast []) -> []", "(multlast [8]) -> [8]", "(multlast [6 1 9 7]) -> [7 7 7 7]", "(multlast [9]) -> [9]", "(multlast [4 0 6 6]) -> [6 6 6 6]", "(multlast [1 6]) -> [6 6]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.54121, "examples": ["(multlast []) -> []", "(multlast [5 6 5 7 7]) -> [7 7 7 7 7]", "(multlast [6 6 6 0 9]) -> [9 9 9 9 9]", "(multlast []) -> []", "(multlast [5 0]) -> [0 0]", "(multlast [2 3 7 3 8]) -> [8 8 8 8 8]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.554263, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [0 5 9 3 9]) -> [9 9 9 9 9]", "(multlast [4 6 0 2 0]) -> [0 0 0 0 0]", "(multlast [8 6 9]) -> [9 9 9]", "(multlast [4 5]) -> [5 5]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.907984, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [5 9 5]) -> [5 5 5]", "(multlast [4 1]) -> [1 1]", "(multlast [0]) -> [0]", "(multlast [9 9 0 6 9]) -> [9 9 9 9 9]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.897408, "examples": ["(multlast []) -> []", "(multlast [0]) -> [0]", "(multlast [8 2 3 8 1]) -> [1 1 1 1 1]", "(multlast [6 9 8 2]) -> [2 2 2 2]", "(multlast [9 5 8 4 7]) -> [7 7 7 7 7]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.535478, "examples": ["(multlast []) -> []", "(multlast [3 2 6 2]) -> [2 2 2 2]", "(multlast [0 3 7 4 2]) -> [2 2 2 2 2]", "(multlast [9 7]) -> [7 7]", "(multlast [9 5 4]) -> [4 4 4]", "(multlast [2 6 9 1 3]) -> [3 3 3 3 3]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.953572, "examples": ["(multlast []) -> []", "(multlast [7 1 2]) -> [2 2 2]", "(multlast [4 7 3]) -> [3 3 3]", "(multlast [2 4 4]) -> [4 4 4]", "(multlast [0 4 1]) -> [1 1 1]", "(multlast [1]) -> [1]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.52448, "examples": ["(multlast []) -> []", "(multlast [6 1 9 2 2]) -> [2 2 2 2 2]", "(multlast [9 3]) -> [3 3]", "(multlast [0 0]) -> [0 0]", "(multlast [6 2]) -> [2 2]", "(multlast [2 7 8]) -> [8 8 8]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.538468, "examples": ["(multlast []) -> []", "(multlast [1 9 7 4]) -> [4 4 4 4]", "(multlast [3 0 8]) -> [8 8 8]", "(multlast [9]) -> [9]", "(multlast []) -> []", "(multlast [8 2 1]) -> [1 1 1]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.582049, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [1 6 3 4]) -> [4 4 4 4]", "(multlast [8 2]) -> [2 2]", "(multlast [8 8 8]) -> [8 8 8]", "(multlast [5 8 9 0 9]) -> [9 9 9 9 9]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.553301, "examples": ["(multlast []) -> []", "(multlast [5]) -> [5]", "(multlast [5 3]) -> [3 3]", "(multlast [1 8 3 7 8]) -> [8 8 8 8 8]", "(multlast [1 2 1]) -> [1 1 1]", "(multlast [9 4 8 5]) -> [5 5 5 5]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.070164, "examples": ["(multlast []) -> []", "(multlast [9 2]) -> [2 2]", "(multlast [3]) -> [3]", "(multlast [7 5 4 5]) -> [5 5 5 5]", "(multlast [6]) -> [6]", "(multlast [2 0]) -> [0 0]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.045703, "examples": ["(multlast []) -> []", "(multlast [1 7 9]) -> [9 9 9]", "(multlast [5]) -> [5]", "(multlast [2 5 8 0 6]) -> [6 6 6 6 6]", "(multlast [2 2 7 7 3]) -> [3 3 3 3 3]", "(multlast [2 7]) -> [7 7]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.067452, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [3 7 9]) -> [9 9 9]", "(multlast [6 4 5 7]) -> [7 7 7 7]", "(multlast [5 1 6 3]) -> [3 3 3 3]", "(multlast [9 8 9 8]) -> [8 8 8 8]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.135473, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [8 2 3 2]) -> [2 2 2 2]", "(multlast [2]) -> [2]", "(multlast []) -> []", "(multlast [6 1 6]) -> [6 6 6]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.133554, "examples": ["(multlast []) -> []", "(multlast [3 3]) -> [3 3]", "(multlast [5 1 3]) -> [3 3 3]", "(multlast [3 2 7]) -> [7 7 7]", "(multlast [1 3 4 8]) -> [8 8 8 8]", "(multlast [1]) -> [1]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.510429, "examples": ["(multlast []) -> []", "(multlast [1 2 0 5 1]) -> [1 1 1 1 1]", "(multlast [2 8]) -> [8 8]", "(multlast [4 2]) -> [2 2]", "(multlast [8 9]) -> [9 9]", "(multlast [9 8]) -> [8 8]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.879358, "examples": ["(multlast []) -> []", "(multlast [6]) -> [6]", "(multlast [3 2]) -> [2 2]", "(multlast [8 3 0]) -> [0 0 0]", "(multlast []) -> []", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.029387, "examples": ["(multlast []) -> []", "(multlast [9 1]) -> [1 1]", "(multlast [1 5 1]) -> [1 1 1]", "(multlast [2 8 3]) -> [3 3 3]", "(multlast [4 7 8]) -> [8 8 8]", "(multlast [8 9 1 1]) -> [1 1 1 1]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.833913, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [1 9 4 3 7]) -> [7 7 7 7 7]", "(multlast [2]) -> [2]", "(multlast [1 9 3 7]) -> [7 7 7 7]", "(multlast [9 2]) -> [2 2]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.723441, "examples": ["(multlast []) -> []", "(multlast [3 1 8 7 9]) -> [9 9 9 9 9]", "(multlast [1 4]) -> [4 4]", "(multlast [7 5]) -> [5 5]", "(multlast [1 0]) -> [0 0]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.731618, "examples": ["(multlast []) -> []", "(multlast [8 1 9]) -> [9 9 9]", "(multlast [9 0 6]) -> [6 6 6]", "(multlast [3 0 3]) -> [3 3 3]", "(multlast [1]) -> [1]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.630038, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [2 5]) -> [5 5]", "(multlast []) -> []", "(multlast [3 8 6 8]) -> [8 8 8 8]", "(multlast [8 7 9 9]) -> [9 9 9 9]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.72712, "examples": ["(multlast []) -> []", "(multlast [5 6]) -> [6 6]", "(multlast []) -> []", "(multlast [8 9 8 9 0]) -> [0 0 0 0 0]", "(multlast [7 0 0 9 4]) -> [4 4 4 4 4]", "(multlast [9 9 3]) -> [3 3 3]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.55773, "examples": ["(multlast []) -> []", "(multlast [4 6]) -> [6 6]", "(multlast [8]) -> [8]", "(multlast [1 8]) -> [8 8]", "(multlast [1 3 9 3]) -> [3 3 3 3]", "(multlast [7]) -> [7]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.769029, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [0]) -> [0]", "(multlast []) -> []", "(multlast [9 4 1 7]) -> [7 7 7 7]", "(multlast [6 5 2 5 5]) -> [5 5 5 5 5]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.754901, "examples": ["(multlast []) -> []", "(multlast [1 2 2 2]) -> [2 2 2 2]", "(multlast [8]) -> [8]", "(multlast [1]) -> [1]", "(multlast [9]) -> [9]", "(multlast [9 3 6 8]) -> [8 8 8 8]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.783486, "examples": ["(multlast []) -> []", "(multlast [5]) -> [5]", "(multlast [7 3 8 9 4]) -> [4 4 4 4 4]", "(multlast [2 2 4 3 2]) -> [2 2 2 2 2]", "(multlast [7 4 6 3]) -> [3 3 3 3]", "(multlast [2 9 0 2 0]) -> [0 0 0 0 0]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.198398, "examples": ["(multlast []) -> []", "(multlast [1 0 0]) -> [0 0 0]", "(multlast [0 0 5]) -> [5 5 5]", "(multlast []) -> []", "(multlast [9 1 3]) -> [3 3 3]", "(multlast [4 7 5]) -> [5 5 5]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr (cdr b)))))) _) _)"}
{"time": 0.699664, "examples": ["(multlast []) -> []", "(multlast [9 7 6 5 2]) -> [2 2 2 2 2]", "(multlast [5 4 3 1]) -> [1 1 1 1]", "(multlast [7]) -> [7]", "(multlast [4]) -> [4]", "(multlast [8 7 4 5 4]) -> [4 4 4 4 4]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.519179, "examples": ["(multlast []) -> []", "(multlast [2]) -> [2]", "(multlast [8 9 7]) -> [7 7 7]", "(multlast [7 4 4 9]) -> [9 9 9 9]", "(multlast [7 1 5]) -> [5 5 5]", "(multlast [8 8 2]) -> [2 2 2]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.900907, "examples": ["(multlast []) -> []", "(multlast [1]) -> [1]", "(multlast [2 1]) -> [1 1]", "(multlast [5 6]) -> [6 6]", "(multlast [2 1]) -> [1 1]", "(multlast [9 8 1 3]) -> [3 3 3 3]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.46199, "examples": ["(multlast []) -> []", "(multlast [3 2 3 1 2]) -> [2 2 2 2 2]", "(multlast [7 3]) -> [3 3]", "(multlast [1 1 9 1]) -> [1 1 1 1]", "(multlast [3 1]) -> [1 1]", "(multlast [6 7 1 0]) -> [0 0 0 0]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.467918, "examples": ["(multlast []) -> []", "(multlast [7]) -> [7]", "(multlast [8 2 5 4 5]) -> [5 5 5 5 5]", "(multlast []) -> []", "(multlast [7 0 2 7 2]) -> [2 2 2 2 2]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.089884, "examples": ["(multlast []) -> []", "(multlast [7 0]) -> [0 0]", "(multlast [1 1]) -> [1 1]", "(multlast [5 9 9 0]) -> [0 0 0 0]", "(multlast [3 9 2 3 5]) -> [5 5 5 5 5]", "(multlast [2 2 7]) -> [7 7 7]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.512068, "examples": ["(multlast []) -> []", "(multlast [3 9 4]) -> [4 4 4]", "(multlast [2]) -> [2]", "(multlast []) -> []", "(multlast [5 0 7 0 2]) -> [2 2 2 2 2]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.091402, "examples": ["(multlast []) -> []", "(multlast [7 9 6 0]) -> [0 0 0 0]", "(multlast [7 4 6]) -> [6 6 6]", "(multlast [4]) -> [4]", "(multlast [5 2 1 5]) -> [5 5 5 5]", "(multlast [7 0]) -> [0 0]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.084557, "examples": ["(multlast []) -> []", "(multlast [8 1 3 8]) -> [8 8 8 8]", "(multlast [5 2 9 6]) -> [6 6 6 6]", "(multlast [4 8 8]) -> [8 8 8]", "(multlast [3 1 7]) -> [7 7 7]", "(multlast [7 1 5 5 5]) -> [5 5 5 5 5]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.100831, "examples": ["(multlast []) -> []", "(multlast [1 1 9]) -> [9 9 9]", "(multlast [6 1 6 7 5]) -> [5 5 5 5 5]", "(multlast [5 8 2]) -> [2 2 2]", "(multlast [0 1 8]) -> [8 8 8]", "(multlast [1 1]) -> [1 1]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.472413, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [3]) -> [3]", "(multlast [7 1]) -> [1 1]", "(multlast [2 5 4]) -> [4 4 4]", "(multlast [4]) -> [4]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.087375, "examples": ["(multlast []) -> []", "(multlast [4 6 4 0]) -> [0 0 0 0]", "(multlast [1]) -> [1]", "(multlast []) -> []", "(multlast [9 9]) -> [9 9]", "(multlast [5 3 0 0 6]) -> [6 6 6 6 6]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.063864, "examples": ["(multlast []) -> []", "(multlast [2 6]) -> [6 6]", "(multlast [6 1 3]) -> [3 3 3]", "(multlast [0 6 9 4 7]) -> [7 7 7 7 7]", "(multlast [2 8]) -> [8 8]", "(multlast [4]) -> [4]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.144901, "examples": ["(multlast []) -> []", "(multlast [2 4 7]) -> [7 7 7]", "(multlast [6]) -> [6]", "(multlast []) -> []", "(multlast [8 1 7]) -> [7 7 7]", "(multlast [0 8 7]) -> [7 7 7]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 1.075488, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [5 9 1 9]) -> [9 9 9 9]", "(multlast [9 2 6 2 9]) -> [9 9 9 9 9]", "(multlast [2 3 3 3 7]) -> [7 7 7 7 7]", "(multlast [7 2 7 5 9]) -> [9 9 9 9 9]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.623191, "examples": ["(multlast []) -> []", "(multlast [2 5 8 3]) -> [3 3 3 3]", "(multlast [1 2 7]) -> [7 7 7]", "(multlast [9]) -> [9]", "(multlast [5 8 1 5 9]) -> [9 9 9 9 9]", "(multlast [8 5 9]) -> [9 9 9]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.628064, "examples": ["(multlast []) -> []", "(multlast [4 6 1 9]) -> [9 9 9 9]", "(multlast [3 2 6 7 3]) -> [3 3 3 3 3]", "(multlast [9 8 1 3 3]) -> [3 3 3 3 3]", "(multlast [2]) -> [2]", "(multlast [6 9 2 9 9]) -> [9 9 9 9 9]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.948157, "examples": ["(multlast []) -> []", "(multlast [0 5 9 1]) -> [1 1 1 1]", "(multlast [3 1 7]) -> [7 7 7]", "(multlast [3 0 3]) -> [3 3 3]", "(multlast []) -> []", "(multlast [7]) -> [7]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.603853, "examples": ["(multlast []) -> []", "(multlast [5]) -> [5]", "(multlast [8]) -> [8]", "(multlast [5 0 7]) -> [7 7 7]", "(multlast [4 9 1 5 4]) -> [4 4 4 4 4]", "(multlast [8]) -> [8]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.647678, "examples": ["(multlast []) -> []", "(multlast [7 2]) -> [2 2]", "(multlast []) -> []", "(multlast [8 2 4 9]) -> [9 9 9 9]", "(multlast [6 2 7]) -> [7 7 7]", "(multlast [4]) -> [4]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.627563, "examples": ["(multlast []) -> []", "(multlast [8 2]) -> [2 2]", "(multlast [9 0 4 6]) -> [6 6 6 6]", "(multlast [1 6 5 1]) -> [1 1 1 1]", "(multlast []) -> []", "(multlast [1 3 2]) -> [2 2 2]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.996979, "examples": ["(multlast []) -> []", "(multlast [3 6]) -> [6 6]", "(multlast [7 7 2 1]) -> [1 1 1 1]", "(multlast [2 5 7 0 3]) -> [3 3 3 3 3]", "(multlast [3 4 1 0 8]) -> [8 8 8 8 8]", "(multlast [1 4 8]) -> [8 8 8]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.95849, "examples": ["(multlast []) -> []", "(multlast [5 9 7]) -> [7 7 7]", "(multlast [0]) -> [0]", "(multlast [3 6 0 1 5]) -> [5 5 5 5 5]", "(multlast [3]) -> [3]", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.666102, "examples": ["(multlast []) -> []", "(multlast [9 5 7]) -> [7 7 7]", "(multlast [1 3 3 2 9]) -> [9 9 9 9 9]", "(multlast [7 0]) -> [0 0]", "(multlast [3 4 9 1]) -> [1 1 1 1]", "(multlast [6 9 1 4 6]) -> [6 6 6 6 6]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.856912, "examples": ["(multlast []) -> []", "(multlast [3 1 8 9 1]) -> [1 1 1 1 1]", "(multlast [6 7 0 9 4]) -> [4 4 4 4 4]", "(multlast []) -> []", "(multlast [2 2]) -> [2 2]", "(multlast [6 0 2 1]) -> [1 1 1 1]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.794286, "examples": ["(multlast []) -> []", "(multlast [5 4 4]) -> [4 4 4]", "(multlast [3]) -> [3]", "(multlast [7 2 6]) -> [6 6 6]", "(multlast []) -> []", "(multlast []) -> []"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.75216, "examples": ["(multlast []) -> []", "(multlast [5 0 7 8]) -> [8 8 8 8]", "(multlast [6 7 0]) -> [0 0 0]", "(multlast [6 8 0 0 5]) -> [5 5 5 5 5]", "(multlast [5 1 8 1 5]) -> [5 5 5 5 5]", "(multlast [3 5 5 1 3]) -> [3 3 3 3 3]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.457561, "examples": ["(multlast []) -> []", "(multlast [2]) -> [2]", "(multlast []) -> []", "(multlast [3 1 5 6]) -> [6 6 6 6]", "(multlast [9 1]) -> [1 1]", "(multlast [6 7]) -> [7 7]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.377062, "examples": ["(multlast []) -> []", "(multlast [3 9 7 5]) -> [5 5 5 5]", "(multlast [0 9]) -> [9 9]", "(multlast []) -> []", "(multlast [5 5]) -> [5 5]", "(multlast [5 9 9 6 8]) -> [8 8 8 8 8]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.380278, "examples": ["(multlast []) -> []", "(multlast [2 0 8]) -> [8 8 8]", "(multlast [1 7 2 4 8]) -> [8 8 8 8 8]", "(multlast [7 5 7]) -> [7 7 7]", "(multlast [3 5 7 0]) -> [0 0 0 0]", "(multlast [9 1]) -> [1 1]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.333941, "examples": ["(multlast []) -> []", "(multlast [9 7]) -> [7 7]", "(multlast [0 1 9 2 6]) -> [6 6 6 6 6]", "(multlast [8 4 9]) -> [9 9 9]", "(multlast [8 2 3]) -> [3 3 3]", "(multlast [2 9 0 4]) -> [4 4 4 4]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.364273, "examples": ["(multlast []) -> []", "(multlast [1 4 0 7 4]) -> [4 4 4 4 4]", "(multlast []) -> []", "(multlast [9 2]) -> [2 2]", "(multlast [0]) -> [0]", "(multlast [1 6 9 9 7]) -> [7 7 7 7 7]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.367954, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [9 7 8 1]) -> [1 1 1 1]", "(multlast [1 5 0 6 9]) -> [9 9 9 9 9]", "(multlast [6 3]) -> [3 3]", "(multlast [4 4]) -> [4 4]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
{"time": 0.344332, "examples": ["(multlast []) -> []", "(multlast [8 7 9]) -> [9 9 9]", "(multlast [1 9 8 1 9]) -> [9 9 9 9 9]", "(multlast [3 2 5 4 0]) -> [0 0 0 0 0]", "(multlast [2 2]) -> [2 2]", "(multlast [1 4 9 8 2]) -> [2 2 2 2 2]"], "name": "multlast", "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map d (lambda (e) c))) b)) _) _)"}
