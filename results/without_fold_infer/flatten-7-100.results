{"time": 0.243992, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {3 {0 {5}} {5}}) -> [3 0 5 5]", "(flatten {4 {1 {0}} {7 {1} {0}}}) -> [4 1 0 7 1 0]", "(flatten {4 {2}}) -> [4 2]", "(flatten {0 {2}}) -> [0 2]", "(flatten {2 {8}}) -> [2 8]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.256841, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {8}) -> [8]", "(flatten {5 {8} {3}}) -> [5 8 3]", "(flatten {5}) -> [5]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.234954, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {2 {5}}) -> [2 5]", "(flatten {1 {9} {9 {3}}}) -> [1 9 9 3]", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {4 {5} {1 {7 {7} {8}}}}) -> [4 5 1 7 7 8]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.275113, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {6 {1 {1 {2} {8}} {2 {7}}} {8 {5 {8} {0}} {9 {1} {3}}}}) -> [6 1 1 2 8 2 7 8 5 8 0 9 1 3]", "(flatten {7 {2 {1}}}) -> [7 2 1]", "(flatten {0 {4 {1 {3} {9}}} {8}}) -> [0 4 1 3 9 8]", "(flatten {3}) -> [3]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.215956, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {7 {9}}) -> [7 9]", "(flatten {6 {9}}) -> [6 9]", "(flatten {1}) -> [1]", "(flatten {}) -> []", "(flatten {2 {5} {3}}) -> [2 5 3]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.264877, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {0}) -> [0]", "(flatten {0 {1}}) -> [0 1]", "(flatten {3}) -> [3]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.158822, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {5 {7}}) -> [5 7]", "(flatten {2 {4 {8} {9}} {2}}) -> [2 4 8 9 2]", "(flatten {}) -> []", "(flatten {0 {8}}) -> [0 8]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.236102, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {5}) -> [5]", "(flatten {9 {9} {4}}) -> [9 9 4]", "(flatten {9}) -> [9]", "(flatten {8 {8 {8 {1} {9}} {8 {6} {7}}}}) -> [8 8 8 1 9 8 6 7]", "(flatten {1 {8}}) -> [1 8]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.226375, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {0}) -> [0]", "(flatten {6 {7 {6} {0}}}) -> [6 7 6 0]", "(flatten {7}) -> [7]", "(flatten {0}) -> [0]", "(flatten {2 {4 {6} {5}}}) -> [2 4 6 5]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.192105, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {1 {5}}) -> [1 5]", "(flatten {0 {9}}) -> [0 9]", "(flatten {5 {9} {3}}) -> [5 9 3]", "(flatten {}) -> []", "(flatten {3 {2} {5}}) -> [3 2 5]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.246251, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {7 {7 {1 {0}} {5 {3} {7}}}}) -> [7 7 1 0 5 3 7]", "(flatten {}) -> []", "(flatten {0 {3 {9 {4}}} {5 {3 {7}}}}) -> [0 3 9 4 5 3 7]", "(flatten {2 {0}}) -> [2 0]", "(flatten {6}) -> [6]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.180025, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {1 {5}}) -> [1 5]", "(flatten {7 {7 {0}} {7}}) -> [7 7 0 7]", "(flatten {1}) -> [1]", "(flatten {5}) -> [5]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.196755, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {7 {3} {6 {7} {9}}}) -> [7 3 6 7 9]", "(flatten {8 {0}}) -> [8 0]", "(flatten {9 {3} {2 {2}}}) -> [9 3 2 2]", "(flatten {0 {6 {0} {1}}}) -> [0 6 0 1]", "(flatten {7 {2} {7}}) -> [7 2 7]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.19912, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {7 {9}}) -> [7 9]", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {5 {1 {1} {5}}}) -> [5 1 1 5]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.198207, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {2}) -> [2]", "(flatten {9 {0} {6}}) -> [9 0 6]", "(flatten {1 {4} {0 {5}}}) -> [1 4 0 5]", "(flatten {8}) -> [8]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.257237, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {3 {8}}) -> [3 8]", "(flatten {0 {9 {8 {1} {3}}}}) -> [0 9 8 1 3]", "(flatten {}) -> []", "(flatten {9 {0}}) -> [9 0]", "(flatten {6}) -> [6]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.168175, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {9 {6}}) -> [9 6]", "(flatten {6 {9} {5 {9}}}) -> [6 9 5 9]", "(flatten {4 {9} {3}}) -> [4 9 3]", "(flatten {0 {7}}) -> [0 7]", "(flatten {8}) -> [8]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.20976, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {3 {8} {1}}) -> [3 8 1]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.205325, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {5}) -> [5]", "(flatten {}) -> []", "(flatten {1 {4 {1} {6}} {5 {4} {4}}}) -> [1 4 1 6 5 4 4]", "(flatten {7 {8}}) -> [7 8]", "(flatten {9}) -> [9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.224016, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {5 {0}}) -> [5 0]", "(flatten {2}) -> [2]", "(flatten {}) -> []", "(flatten {0 {9}}) -> [0 9]", "(flatten {4 {3}}) -> [4 3]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.209028, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {9 {0 {5} {8}} {8 {7}}}) -> [9 0 5 8 8 7]", "(flatten {0 {6} {5 {9 {0}}}}) -> [0 6 5 9 0]", "(flatten {}) -> []", "(flatten {7 {4} {9}}) -> [7 4 9]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.230363, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {4 {8 {4} {8}} {6 {8}}}) -> [4 8 4 8 6 8]", "(flatten {0 {5 {9} {7}}}) -> [0 5 9 7]", "(flatten {}) -> []", "(flatten {2 {1} {5}}) -> [2 1 5]", "(flatten {4}) -> [4]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.145942, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {6}) -> [6]", "(flatten {}) -> []", "(flatten {0}) -> [0]", "(flatten {0}) -> [0]", "(flatten {8}) -> [8]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 0.173115, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {2 {4 {0}} {2 {7}}}) -> [2 4 0 2 7]", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {2 {6 {4 {2}}}}) -> [2 6 4 2]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.218304, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {8 {5 {3} {0}}}) -> [8 5 3 0]", "(flatten {}) -> []", "(flatten {1}) -> [1]", "(flatten {9 {4}}) -> [9 4]", "(flatten {3 {8}}) -> [3 8]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.238907, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {3 {8 {5}}}) -> [3 8 5]", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {1 {6 {7 {5}} {4 {1} {8}}}}) -> [1 6 7 5 4 1 8]", "(flatten {8 {5 {4 {0} {2}} {2}} {3 {0} {7 {1} {3}}}}) -> [8 5 4 0 2 2 3 0 7 1 3]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.216524, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {5 {9} {2}}) -> [5 9 2]", "(flatten {5 {8}}) -> [5 8]", "(flatten {5}) -> [5]", "(flatten {4 {9 {2 {4}} {3 {4} {7}}} {2}}) -> [4 9 2 4 3 4 7 2]", "(flatten {5 {6} {1}}) -> [5 6 1]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.210656, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {3 {6}}) -> [3 6]", "(flatten {6 {5}}) -> [6 5]", "(flatten {}) -> []", "(flatten {4}) -> [4]", "(flatten {7}) -> [7]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.22758, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {8 {8 {0} {4}} {3}}) -> [8 8 0 4 3]", "(flatten {5 {1} {7}}) -> [5 1 7]", "(flatten {2 {1 {3}}}) -> [2 1 3]", "(flatten {}) -> []", "(flatten {0}) -> [0]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.206026, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {9 {1 {9} {2}}}) -> [9 1 9 2]", "(flatten {4 {0 {3}}}) -> [4 0 3]", "(flatten {1}) -> [1]", "(flatten {3 {5 {0 {4}}} {5}}) -> [3 5 0 4 5]", "(flatten {7 {0}}) -> [7 0]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.218799, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {8 {6} {1}}) -> [8 6 1]", "(flatten {3 {8 {1} {4}} {6 {2} {5}}}) -> [3 8 1 4 6 2 5]", "(flatten {7 {7}}) -> [7 7]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.203748, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {8}) -> [8]", "(flatten {}) -> []", "(flatten {2 {2} {9}}) -> [2 2 9]", "(flatten {}) -> []", "(flatten {7 {9 {3} {5}}}) -> [7 9 3 5]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.211173, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {0 {0} {5}}) -> [0 0 5]", "(flatten {2}) -> [2]", "(flatten {}) -> []", "(flatten {2}) -> [2]", "(flatten {1 {7 {8} {3 {8} {1}}}}) -> [1 7 8 3 8 1]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.20524, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {3}) -> [3]", "(flatten {}) -> []", "(flatten {3}) -> [3]", "(flatten {7 {9 {3} {7}}}) -> [7 9 3 7]", "(flatten {2 {5} {0}}) -> [2 5 0]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.184525, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {5 {1}}) -> [5 1]", "(flatten {9}) -> [9]", "(flatten {1 {0 {6} {2}}}) -> [1 0 6 2]", "(flatten {3 {4 {2} {9}} {4 {3}}}) -> [3 4 2 9 4 3]", "(flatten {5}) -> [5]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.184884, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {3 {1 {7 {9}}} {0 {2 {3} {8}}}}) -> [3 1 7 9 0 2 3 8]", "(flatten {2 {5}}) -> [2 5]", "(flatten {8 {1 {2} {1}} {2 {3} {8 {6}}}}) -> [8 1 2 1 2 3 8 6]", "(flatten {}) -> []", "(flatten {8 {8 {1} {7}} {9}}) -> [8 8 1 7 9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.219607, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {6 {0 {5} {0 {4} {5}}} {1}}) -> [6 0 5 0 4 5 1]", "(flatten {7 {0 {2 {2} {6}} {2}} {1 {7 {9} {0}}}}) -> [7 0 2 2 6 2 1 7 9 0]", "(flatten {9 {8} {1}}) -> [9 8 1]", "(flatten {}) -> []", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.211835, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {9}) -> [9]", "(flatten {}) -> []", "(flatten {3 {2 {7 {3}}}}) -> [3 2 7 3]", "(flatten {2 {6 {4}} {5 {4} {1 {5} {3}}}}) -> [2 6 4 5 4 1 5 3]", "(flatten {7}) -> [7]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.185629, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {7 {5} {2}}) -> [7 5 2]", "(flatten {2 {2 {2 {9} {2}}} {4}}) -> [2 2 2 9 2 4]", "(flatten {0 {3}}) -> [0 3]", "(flatten {6 {6 {6} {7 {4}}}}) -> [6 6 6 7 4]", "(flatten {5}) -> [5]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.236278, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {3 {6} {8}}) -> [3 6 8]", "(flatten {2 {2 {9} {9}}}) -> [2 2 9 9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.234647, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {5 {0}}) -> [5 0]", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {6}) -> [6]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.242478, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {9 {0} {8}}) -> [9 0 8]", "(flatten {0 {2}}) -> [0 2]", "(flatten {4 {6} {9}}) -> [4 6 9]", "(flatten {5 {7 {4 {9} {7}}} {8 {0} {0}}}) -> [5 7 4 9 7 8 0 0]", "(flatten {3}) -> [3]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.189821, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {8 {8} {0}}) -> [8 8 0]", "(flatten {4 {3}}) -> [4 3]", "(flatten {6 {3 {2}} {2 {1}}}) -> [6 3 2 2 1]", "(flatten {1 {8 {3}} {5}}) -> [1 8 3 5]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.189465, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {0 {1}}) -> [0 1]", "(flatten {}) -> []", "(flatten {1 {1 {0 {7} {5}}}}) -> [1 1 0 7 5]", "(flatten {9}) -> [9]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.248865, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {3 {6 {4} {8 {2}}}}) -> [3 6 4 8 2]", "(flatten {4}) -> [4]", "(flatten {0 {7} {5}}) -> [0 7 5]", "(flatten {4 {9}}) -> [4 9]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.189345, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {9}) -> [9]", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {3 {6 {2}} {6}}) -> [3 6 2 6]", "(flatten {2 {4} {3}}) -> [2 4 3]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.199491, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {0 {2 {8}} {5}}) -> [0 2 8 5]", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {5}) -> [5]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.249686, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {7 {0 {2 {3}} {8 {0}}} {0}}) -> [7 0 2 3 8 0 0]", "(flatten {2}) -> [2]", "(flatten {8 {0}}) -> [8 0]", "(flatten {}) -> []", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.226354, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {0}) -> [0]", "(flatten {}) -> []", "(flatten {0 {7}}) -> [0 7]", "(flatten {}) -> []", "(flatten {7 {3} {1}}) -> [7 3 1]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.157064, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {3 {3} {1}}) -> [3 3 1]", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {1}) -> [1]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.190019, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {6 {9} {2 {8 {2}}}}) -> [6 9 2 8 2]", "(flatten {6}) -> [6]", "(flatten {0}) -> [0]", "(flatten {3 {1}}) -> [3 1]", "(flatten {8 {9 {2}} {5 {8} {4}}}) -> [8 9 2 5 8 4]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.153271, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {7}) -> [7]", "(flatten {6}) -> [6]", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {1 {5}}) -> [1 5]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.199916, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {5 {4 {3 {5} {8}}} {9}}) -> [5 4 3 5 8 9]", "(flatten {8}) -> [8]", "(flatten {7}) -> [7]", "(flatten {2 {1}}) -> [2 1]", "(flatten {9 {8 {1 {9}}}}) -> [9 8 1 9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.209307, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {1 {7}}) -> [1 7]", "(flatten {2 {5} {6}}) -> [2 5 6]", "(flatten {2 {2 {1}} {5}}) -> [2 2 1 5]", "(flatten {0 {3} {1}}) -> [0 3 1]", "(flatten {7 {9} {9}}) -> [7 9 9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.22881, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {6 {8} {8}}) -> [6 8 8]", "(flatten {7 {0}}) -> [7 0]", "(flatten {5 {7}}) -> [5 7]", "(flatten {5 {0} {0}}) -> [5 0 0]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.198694, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {7}) -> [7]", "(flatten {}) -> []", "(flatten {0}) -> [0]", "(flatten {9 {8}}) -> [9 8]", "(flatten {8 {4}}) -> [8 4]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.209354, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {5 {7}}) -> [5 7]", "(flatten {4}) -> [4]", "(flatten {8 {0} {0}}) -> [8 0 0]", "(flatten {5 {8}}) -> [5 8]", "(flatten {2}) -> [2]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.185421, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {9 {4}}) -> [9 4]", "(flatten {5 {5} {1 {6 {7} {3}}}}) -> [5 5 1 6 7 3]", "(flatten {5}) -> [5]", "(flatten {2 {3 {7 {5} {9}} {7 {3}}} {4}}) -> [2 3 7 5 9 7 3 4]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.206833, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {7 {3} {7}}) -> [7 3 7]", "(flatten {1}) -> [1]", "(flatten {4}) -> [4]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.215973, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {4 {7 {3}}}) -> [4 7 3]", "(flatten {7 {6 {9} {0}}}) -> [7 6 9 0]", "(flatten {5}) -> [5]", "(flatten {3 {7 {7}}}) -> [3 7 7]", "(flatten {3 {3} {4}}) -> [3 3 4]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.215115, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {6 {5 {0} {4 {2} {1}}}}) -> [6 5 0 4 2 1]", "(flatten {6 {2} {8 {7 {3} {2}} {4 {2}}}}) -> [6 2 8 7 3 2 4 2]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.191081, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {4 {1 {0}}}) -> [4 1 0]", "(flatten {7 {6}}) -> [7 6]", "(flatten {9}) -> [9]", "(flatten {0 {7}}) -> [0 7]", "(flatten {6 {0}}) -> [6 0]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.226169, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {5 {1} {3}}) -> [5 1 3]", "(flatten {8 {4 {2} {7}} {4 {1}}}) -> [8 4 2 7 4 1]", "(flatten {8 {4 {0}}}) -> [8 4 0]", "(flatten {5}) -> [5]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.234725, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {8 {3 {9}} {0 {8} {6}}}) -> [8 3 9 0 8 6]", "(flatten {2 {5}}) -> [2 5]", "(flatten {3}) -> [3]", "(flatten {1 {8 {1}} {0 {4} {2}}}) -> [1 8 1 0 4 2]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.213538, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {6}) -> [6]", "(flatten {0 {0}}) -> [0 0]", "(flatten {}) -> []", "(flatten {6 {2} {6 {0}}}) -> [6 2 6 0]", "(flatten {7 {1}}) -> [7 1]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.233271, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {3 {0 {5 {0}}} {3 {1}}}) -> [3 0 5 0 3 1]", "(flatten {9 {9} {0}}) -> [9 9 0]", "(flatten {3}) -> [3]", "(flatten {8 {4 {9 {6} {0}}} {6 {7 {3}}}}) -> [8 4 9 6 0 6 7 3]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.158952, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {0 {8}}) -> [0 8]", "(flatten {7 {9}}) -> [7 9]", "(flatten {4 {7} {7}}) -> [4 7 7]", "(flatten {1 {2 {4}}}) -> [1 2 4]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.147099, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {5 {0} {5}}) -> [5 0 5]", "(flatten {2 {7}}) -> [2 7]", "(flatten {}) -> []", "(flatten {4 {9 {4} {0}} {4 {3}}}) -> [4 9 4 0 4 3]", "(flatten {3}) -> [3]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.226447, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {6 {1} {5}}) -> [6 1 5]", "(flatten {2 {5}}) -> [2 5]", "(flatten {8}) -> [8]", "(flatten {0}) -> [0]", "(flatten {4}) -> [4]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.218078, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {4 {1}}) -> [4 1]", "(flatten {5 {3} {8 {9}}}) -> [5 3 8 9]", "(flatten {}) -> []", "(flatten {0}) -> [0]", "(flatten {7 {6} {9}}) -> [7 6 9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.169523, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {3 {8} {2}}) -> [3 8 2]", "(flatten {4 {8}}) -> [4 8]", "(flatten {9 {3 {7}} {6 {8}}}) -> [9 3 7 6 8]", "(flatten {4 {5 {6}} {1 {8}}}) -> [4 5 6 1 8]", "(flatten {2 {5} {9}}) -> [2 5 9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.172477, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {2}) -> [2]", "(flatten {9}) -> [9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 0.162614, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {7}) -> [7]", "(flatten {0 {9} {9 {8 {3}} {8 {2} {8}}}}) -> [0 9 9 8 3 8 2 8]", "(flatten {2}) -> [2]", "(flatten {2 {4 {7}} {1 {4}}}) -> [2 4 7 1 4]", "(flatten {7}) -> [7]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.19626, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {3 {4 {1}} {5 {6} {8}}}) -> [3 4 1 5 6 8]", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {9}) -> [9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.170416, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {0 {1}}) -> [0 1]", "(flatten {7 {2}}) -> [7 2]", "(flatten {9}) -> [9]", "(flatten {}) -> []", "(flatten {6 {6}}) -> [6 6]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.183983, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {5 {7 {0} {9}} {3 {7} {0}}}) -> [5 7 0 9 3 7 0]", "(flatten {0 {2} {8}}) -> [0 2 8]", "(flatten {9 {8}}) -> [9 8]", "(flatten {}) -> []", "(flatten {0 {4 {1 {7}} {4 {9}}} {3 {4 {4}} {0}}}) -> [0 4 1 7 4 9 3 4 4 0]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.236179, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {8 {5}}) -> [8 5]", "(flatten {}) -> []", "(flatten {1 {7}}) -> [1 7]", "(flatten {9 {6} {3}}) -> [9 6 3]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.211521, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {9 {0 {8} {0}} {1}}) -> [9 0 8 0 1]", "(flatten {4 {0} {6}}) -> [4 0 6]", "(flatten {9 {2}}) -> [9 2]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.188977, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {7 {2}}) -> [7 2]", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {3}) -> [3]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.260135, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {1 {0 {3} {0}} {9 {0} {9}}}) -> [1 0 3 0 9 0 9]", "(flatten {6 {6 {6}} {7 {4} {4}}}) -> [6 6 6 7 4 4]", "(flatten {7}) -> [7]", "(flatten {8}) -> [8]", "(flatten {1 {9 {0 {6}}}}) -> [1 9 0 6]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.158659, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {8}) -> [8]", "(flatten {0 {4 {4} {8}}}) -> [0 4 4 8]", "(flatten {2 {6}}) -> [2 6]", "(flatten {0 {8} {5}}) -> [0 8 5]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.196553, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {6 {0 {1 {5} {0}} {8 {5}}}}) -> [6 0 1 5 0 8 5]", "(flatten {3 {9}}) -> [3 9]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.165045, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {8}) -> [8]", "(flatten {7 {3}}) -> [7 3]", "(flatten {}) -> []", "(flatten {6}) -> [6]", "(flatten {5 {0}}) -> [5 0]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.204067, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {5 {0} {2 {4}}}) -> [5 0 2 4]", "(flatten {8 {9}}) -> [8 9]", "(flatten {6 {7}}) -> [6 7]", "(flatten {}) -> []", "(flatten {9 {6}}) -> [9 6]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.187777, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {4}) -> [4]", "(flatten {}) -> []", "(flatten {2 {5 {4 {3} {0}}}}) -> [2 5 4 3 0]", "(flatten {3 {5 {0 {0}} {9 {5} {9}}}}) -> [3 5 0 0 9 5 9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.20123, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {6 {4} {5}}) -> [6 4 5]", "(flatten {7}) -> [7]", "(flatten {0}) -> [0]", "(flatten {1}) -> [1]", "(flatten {2 {0} {0}}) -> [2 0 0]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.20131, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {8 {7 {9} {0}} {8 {1} {7}}}) -> [8 7 9 0 8 1 7]", "(flatten {1 {7 {2} {9}} {9}}) -> [1 7 2 9 9]", "(flatten {5 {0} {0}}) -> [5 0 0]", "(flatten {1}) -> [1]", "(flatten {1 {7}}) -> [1 7]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.208583, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {7}) -> [7]", "(flatten {}) -> []", "(flatten {9 {2 {5} {6}} {9 {5} {6}}}) -> [9 2 5 6 9 5 6]", "(flatten {}) -> []", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.237701, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {0 {4} {9}}) -> [0 4 9]", "(flatten {4 {1}}) -> [4 1]", "(flatten {6}) -> [6]", "(flatten {8 {6 {0 {2} {3}} {7}}}) -> [8 6 0 2 3 7]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.225893, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {1}) -> [1]", "(flatten {2 {1 {8}}}) -> [2 1 8]", "(flatten {3 {2 {8 {9} {7}}} {4 {0 {9} {1}}}}) -> [3 2 8 9 7 4 0 9 1]", "(flatten {2}) -> [2]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.194482, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {1 {4} {7 {8 {8}} {0}}}) -> [1 4 7 8 8 0]", "(flatten {1 {1} {5}}) -> [1 1 5]", "(flatten {0 {3 {7}}}) -> [0 3 7]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.201346, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {1 {8 {4}}}) -> [1 8 4]", "(flatten {}) -> []", "(flatten {0}) -> [0]", "(flatten {}) -> []", "(flatten {9}) -> [9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.196877, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {7 {9 {7 {6}} {3 {8} {4}}} {3}}) -> [7 9 7 6 3 8 4 3]", "(flatten {}) -> []", "(flatten {6 {1} {8 {0} {7}}}) -> [6 1 8 0 7]", "(flatten {}) -> []", "(flatten {4 {7}}) -> [4 7]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.237066, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {6 {3} {3}}) -> [6 3 3]", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {0 {2 {7 {4} {3}}} {9 {6 {1}}}}) -> [0 2 7 4 3 9 6 1]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.195011, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {1 {0}}) -> [1 0]", "(flatten {5 {9} {6 {6} {9}}}) -> [5 9 6 6 9]", "(flatten {7 {1}}) -> [7 1]", "(flatten {3 {6}}) -> [3 6]", "(flatten {8}) -> [8]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.208199, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {8 {2 {9} {2}} {1 {1}}}) -> [8 2 9 2 1 1]", "(flatten {}) -> []", "(flatten {3 {8} {4 {3}}}) -> [3 8 4 3]", "(flatten {9 {2 {2} {2}}}) -> [9 2 2 2]", "(flatten {4 {4 {4 {8} {8}} {8 {1}}} {1 {2 {9}}}}) -> [4 4 4 8 8 8 1 1 2 9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.110346, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {5 {1 {9}}}) -> [5 1 9]", "(flatten {0 {7}}) -> [0 7]", "(flatten {8 {0 {3 {9}} {8 {3} {6}}} {2 {0}}}) -> [8 0 3 9 8 3 6 2 0]", "(flatten {1}) -> [1]", "(flatten {}) -> []"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.102144, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {1}) -> [1]", "(flatten {}) -> []", "(flatten {5}) -> [5]", "(flatten {6 {3}}) -> [6 3]", "(flatten {3 {5} {9 {3} {9}}}) -> [3 5 9 3 9]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.101654, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {2 {2}}) -> [2 2]", "(flatten {}) -> []", "(flatten {8}) -> [8]", "(flatten {8 {3} {1}}) -> [8 3 1]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
{"time": 0.10277, "name": "flatten", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {9}) -> [9]", "(flatten {}) -> []", "(flatten {8 {2}}) -> [8 2]"], "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)"}
