{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {4}) -> 1", "(count_nodes {6 {3 {8 {5}} {0}}}) -> 5", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.978344, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {4}}) -> 2", "(count_nodes {8}) -> 1", "(count_nodes {1}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {2 {3 {0} {0}}}) -> 4", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.046742, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {3 {7 {4} {8}}}) -> 4", "(count_nodes {3 {7}}) -> 2", "(count_nodes {7 {5} {2 {3 {5}}}}) -> 5", "(count_nodes {3 {2 {2}}}) -> 3", "(count_nodes {9 {9}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.03869, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {9 {6 {6} {9}}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {1 {5 {3}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {6 {0 {2}} {9 {8}}}) -> 5", "(count_nodes {1 {5} {3 {0}}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.172099, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {2}) -> 1", "(count_nodes {6}) -> 1", "(count_nodes {3 {1}}) -> 2", "(count_nodes {3 {9} {0}}) -> 3", "(count_nodes {5 {0}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 1.111095, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {9} {9}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {7 {0 {0}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.146907, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {4}) -> 1", "(count_nodes {6 {6 {4} {5}} {0 {0 {2} {9}}}}) -> 8", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.203746, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {4 {7 {0 {0} {5}} {2}} {0 {9} {4 {4}}}}) -> 10"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.295157, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {2}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {1}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 1)) 1)) 0)) _) _)", "time": 1.295326, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {1}) -> 1", "(count_nodes {8 {7}}) -> 2", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {7}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 1)) 1)) 0)) _) _)", "time": 1.294372, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8 {2}}) -> 2", "(count_nodes {9}) -> 1", "(count_nodes {0 {2} {7}}) -> 3", "(count_nodes {0 {6} {0}}) -> 3", "(count_nodes {4}) -> 1", "(count_nodes {4 {6} {0}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 1.292209, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8 {0}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {4}) -> 1", "(count_nodes {8 {7}}) -> 2", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 1)) 1)) 0)) _) _)", "time": 1.287019, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {0 {0} {6 {4}}}) -> 4", "(count_nodes {0}) -> 1", "(count_nodes {5}) -> 1", "(count_nodes {9}) -> 1", "(count_nodes {9}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f f)) 1)) 0)) _) _)", "time": 1.266616, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {9 {1 {9} {7}}}) -> 4", "(count_nodes {2 {5 {4 {0} {6}} {7 {0} {8}}}}) -> 8", "(count_nodes {5}) -> 1", "(count_nodes {5}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.391528, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {8 {8 {6} {5 {5} {3}}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {9 {9 {5 {6}}} {8 {7 {5} {9}} {2}}}) -> 9", "(count_nodes {1}) -> 1", "(count_nodes {5 {5} {9}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.351479, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {5 {9 {9}}}}) -> 4", "(count_nodes {8 {9}}) -> 2", "(count_nodes {1 {3} {9}}) -> 3", "(count_nodes {1 {4}}) -> 2", "(count_nodes {8 {7 {5}} {1 {7}}}) -> 5", "(count_nodes {4}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.366403, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {4 {1}}) -> 2", "(count_nodes {2 {3} {4 {2}}}) -> 4", "(count_nodes {1}) -> 1", "(count_nodes {9}) -> 1", "(count_nodes {7 {9 {0}} {3 {3}}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.722493, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {4} {0}}) -> 3", "(count_nodes {3 {0} {8}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {5 {8}}) -> 2", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 0.713525, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {1} {7}}) -> 3", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {6 {6} {4}}) -> 3", "(count_nodes {7 {1}}) -> 2", "(count_nodes {4 {3} {2 {0}}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.680634, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {7 {5 {5} {9}}}) -> 4", "(count_nodes {1}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1 {6 {1} {6 {5}}} {8}}) -> 6"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.733694, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {8 {8} {5}} {2}}) -> 5", "(count_nodes {6 {9}}) -> 2", "(count_nodes {3 {7} {4}}) -> 3", "(count_nodes {3}) -> 1", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.792898, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6 {3}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (+ 1 1)) 0)) _) _)", "time": 0.154342, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {5 {8} {7 {4}}}) -> 4", "(count_nodes {9 {0} {2}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.510743, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {5 {2 {3}} {4 {1} {6}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {8 {3}}) -> 2", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.438989, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {5 {6} {4 {6 {7}} {2 {3}}}}) -> 7", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.451682, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {1 {1}} {2 {1 {6} {1}} {8 {5} {5}}}}) -> 10", "(count_nodes {1 {5} {9 {9 {7} {2}} {7 {0} {8}}}}) -> 9", "(count_nodes {1 {3} {3}}) -> 3", "(count_nodes {6}) -> 1", "(count_nodes {8}) -> 1", "(count_nodes {1}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.620462, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8 {3 {6}}}) -> 3", "(count_nodes {4}) -> 1", "(count_nodes {4 {1} {8}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {8}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.619332, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {3}}) -> 2", "(count_nodes {1 {2}}) -> 2", "(count_nodes {2 {1 {0 {3}}} {3}}) -> 5", "(count_nodes {1}) -> 1", "(count_nodes {5 {0 {1}} {2}}) -> 4", "(count_nodes {5 {8 {4} {4}} {3 {7} {8}}}) -> 7"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.433886, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8 {6} {5}}) -> 3", "(count_nodes {0 {2 {2} {0}} {1 {6} {6}}}) -> 7", "(count_nodes {3 {0 {8} {1}} {3 {6} {0}}}) -> 7", "(count_nodes {2 {1}}) -> 2", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.400974, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {5 {4}}}) -> 3", "(count_nodes {7}) -> 1", "(count_nodes {7 {7 {8}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {6}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 e)) 1)) 0)) _) _)", "time": 1.531906, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {0} {5}}) -> 3", "(count_nodes {1 {0}}) -> 2", "(count_nodes {0 {1 {6 {0} {2}} {8 {8}}} {6}}) -> 8", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {6}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.415762, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {0}) -> 1", "(count_nodes {7}) -> 1", "(count_nodes {6 {1 {7} {0}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.338831, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {9 {4}} {9 {3}}}) -> 5", "(count_nodes {8 {9} {9}}) -> 3", "(count_nodes {9}) -> 1", "(count_nodes {5 {4 {6}} {3 {8}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.706362, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {7 {8 {9}} {1 {4}}}) -> 5", "(count_nodes {4 {3} {9}}) -> 3", "(count_nodes {4 {5 {3 {5}} {6 {3} {9}}} {5 {6 {0} {0}} {4}}}) -> 12", "(count_nodes {8}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.436807, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {9 {0}}}) -> 3", "(count_nodes {8 {0 {7}} {2}}) -> 4", "(count_nodes {7 {4}}) -> 2", "(count_nodes {0 {6 {8 {5}}}}) -> 4", "(count_nodes {9 {8}}) -> 2", "(count_nodes {7 {4 {9} {1}} {5}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.697975, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6 {1}}) -> 2", "(count_nodes {8 {8}}) -> 2", "(count_nodes {8 {5 {4} {3}} {2}}) -> 5", "(count_nodes {3 {0 {5 {7}} {4 {6}}}}) -> 6", "(count_nodes {5 {1 {1} {6}} {0}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.685006, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {9 {4 {1} {4}} {9 {7}}} {0}}) -> 8", "(count_nodes {4 {5}}) -> 2", "(count_nodes {8}) -> 1", "(count_nodes {0 {9 {8}} {5 {7}}}) -> 5", "(count_nodes {5 {2}}) -> 2", "(count_nodes {2}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.041057, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {0 {6 {5 {4}}} {4 {3 {4}}}}) -> 7", "(count_nodes {3 {8}}) -> 2", "(count_nodes {1 {5} {3}}) -> 3", "(count_nodes {2}) -> 1", "(count_nodes {5 {7} {2}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.748769, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {3 {2}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {4 {8}}) -> 2", "(count_nodes {9 {6} {1}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 0.822241, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {0 {4 {7}}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 e)) 1)) 0)) _) _)", "time": 0.839267, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {3 {4 {2 {9} {0}}} {8}}) -> 6", "(count_nodes {5 {2}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {3 {9 {9} {0 {7}}}}) -> 5", "(count_nodes {2 {3} {7 {6}}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.836219, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {5}) -> 1", "(count_nodes {8 {1} {0 {4 {4}}}}) -> 5", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {7}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.778463, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {5 {2 {1}} {4 {8} {2}}} {9}}) -> 8", "(count_nodes {}) -> 0", "(count_nodes {4 {6}}) -> 2", "(count_nodes {1 {5}}) -> 2", "(count_nodes {6 {5 {4 {2} {2}}} {1}}) -> 6", "(count_nodes {4 {5 {8 {9} {6}} {1}}}) -> 6"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.945668, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {2 {4}}}) -> 3", "(count_nodes {2 {5 {3}}}) -> 3", "(count_nodes {2 {0}}) -> 2", "(count_nodes {5 {4}}) -> 2", "(count_nodes {1 {3 {8 {3} {1}}} {4 {5 {9}} {8}}}) -> 9", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.846012, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {5 {3} {1}} {9 {3}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.198291, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {9}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {5 {0} {6}}) -> 3", "(count_nodes {3 {6} {9}}) -> 3", "(count_nodes {0 {7 {1 {9} {2}}} {4}}) -> 6", "(count_nodes {0}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.347482, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {1 {9 {3} {2}}}) -> 4", "(count_nodes {7 {7 {9 {9} {2}} {5 {3} {9}}}}) -> 8", "(count_nodes {5 {4} {1}}) -> 3", "(count_nodes {2 {8 {8}} {9}}) -> 4", "(count_nodes {1 {0 {3} {8}}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.389421, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {5}) -> 1", "(count_nodes {8 {1}}) -> 2", "(count_nodes {6 {7}}) -> 2", "(count_nodes {3}) -> 1", "(count_nodes {3 {5 {8}} {5 {5}}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.199752, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {7 {9} {3}}}) -> 4", "(count_nodes {4 {0 {0 {0}}} {7 {4 {3}}}}) -> 7", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.467619, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {6} {3}}) -> 3", "(count_nodes {8}) -> 1", "(count_nodes {7}) -> 1", "(count_nodes {4}) -> 1", "(count_nodes {9 {0 {1} {0 {5}}} {3}}) -> 6", "(count_nodes {3 {2 {4}}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.574142, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6 {9}}) -> 2", "(count_nodes {4 {2 {5 {5} {7}} {7 {7} {4}}}}) -> 8", "(count_nodes {8 {6}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {6 {7} {0}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.645948, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {0 {4} {4}}}) -> 4", "(count_nodes {2 {6}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {2 {2}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.491199, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {9 {6 {6}} {8 {9} {0}}}) -> 6", "(count_nodes {4 {3 {1}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {5 {6}}) -> 2", "(count_nodes {4}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.584318, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {4 {0 {2} {7}}}) -> 4", "(count_nodes {6 {1 {8} {0 {6} {1}}} {3 {8 {5} {3}} {8 {7}}}}) -> 12", "(count_nodes {9 {2 {6}}}) -> 3", "(count_nodes {2 {0 {5}} {7 {8 {6}}}}) -> 6", "(count_nodes {5 {2} {3 {3}}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.384076, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1 {5 {6}}}) -> 3", "(count_nodes {7}) -> 1", "(count_nodes {3 {9 {9 {7}}}}) -> 4", "(count_nodes {0 {6}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 e)) 1)) 0)) _) _)", "time": 0.728581, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {0 {8} {6}}) -> 3", "(count_nodes {0}) -> 1", "(count_nodes {3 {7 {2}} {2 {1} {4}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {0 {2 {2}} {7 {4} {8}}}) -> 6"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.695989, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {4} {7}}) -> 3", "(count_nodes {4 {4 {5 {0} {5}}} {5 {9}}}) -> 7", "(count_nodes {7}) -> 1", "(count_nodes {7 {4} {4 {1} {5}}}) -> 5", "(count_nodes {5 {0 {4} {7}}}) -> 4", "(count_nodes {6 {9} {1}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.675967, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {3}) -> 1", "(count_nodes {9 {2} {2 {4} {2}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {8 {2 {9 {9} {1}} {2 {0}}} {8 {4} {9 {9}}}}) -> 11", "(count_nodes {0 {0 {1}} {3}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.375501, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {1}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {5 {0}}) -> 2", "(count_nodes {2 {3} {9 {6} {8}}}) -> 5", "(count_nodes {5 {1 {9} {1}} {8}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.653862, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {0}) -> 1", "(count_nodes {5 {8} {2}}) -> 3", "(count_nodes {7 {2} {8 {0 {5}}}}) -> 5", "(count_nodes {5}) -> 1", "(count_nodes {7}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.644526, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {1 {9 {2} {4}} {7}}}) -> 6", "(count_nodes {0}) -> 1", "(count_nodes {5}) -> 1", "(count_nodes {4}) -> 1", "(count_nodes {4 {5}}) -> 2", "(count_nodes {5 {7 {9} {3}} {6}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.735673, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {4} {5}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {1 {3 {0}}}) -> 3", "(count_nodes {7 {9 {3} {1}} {5}}) -> 5", "(count_nodes {2 {4}}) -> 2", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.636785, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {4 {1 {2}} {8}}) -> 4", "(count_nodes {5 {2 {3 {1}} {0 {2}}} {3 {3}}}) -> 8", "(count_nodes {}) -> 0", "(count_nodes {8 {8} {0}}) -> 3", "(count_nodes {7}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.683681, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2 {1}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {9 {5} {3}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {5 {2 {9} {8}}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.496334, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {2 {3 {2} {3}} {1 {1}}} {0}}) -> 8", "(count_nodes {1}) -> 1", "(count_nodes {7 {9 {4 {4}}} {0}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {0 {3} {9 {8 {7} {5}} {2 {8} {5}}}}) -> 9", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.661311, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {4 {8 {3} {0}} {1 {8}}}) -> 6", "(count_nodes {8 {4 {7} {6}} {9 {3}}}) -> 6", "(count_nodes {2 {7 {3}}}) -> 3", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.652507, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {2 {0 {5} {7}}}) -> 4", "(count_nodes {9 {7}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {8 {2} {2}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.72456, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {7 {1}} {8 {0}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {6 {5} {0}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.405011, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {7 {4 {2}} {9 {1 {6}} {3 {5} {4}}}}) -> 9", "(count_nodes {4 {0}}) -> 2", "(count_nodes {8 {2 {3} {5}} {0 {3}}}) -> 6"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.919483, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {0 {6} {0}} {4}}) -> 5", "(count_nodes {3 {4 {6 {8} {7}} {5}} {0}}) -> 7", "(count_nodes {2 {6}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2 {6 {5}} {1 {6} {4}}}) -> 6"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.535632, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {2}) -> 1", "(count_nodes {4 {6 {8} {3}} {0 {1} {9}}}) -> 7", "(count_nodes {3 {4 {1}}}) -> 3", "(count_nodes {4 {9}}) -> 2", "(count_nodes {8 {2}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.508677, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {8} {5}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {5 {7}}) -> 2", "(count_nodes {1 {9 {3 {2}} {6 {1} {5}}} {2 {4}}}) -> 9", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.600963, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {6} {7 {3 {4}} {8}}}) -> 6", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {4 {2 {1} {1}}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.504116, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {0 {9 {2} {2}}} {7 {9 {0} {2}} {2}}}) -> 10", "(count_nodes {6}) -> 1", "(count_nodes {5 {2} {0}}) -> 3", "(count_nodes {6 {8}}) -> 2", "(count_nodes {8 {7 {7} {1 {3}}} {9}}) -> 6", "(count_nodes {3 {7}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.655598, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {8}) -> 1", "(count_nodes {0 {9} {4}}) -> 3", "(count_nodes {9}) -> 1", "(count_nodes {0 {3 {1}}}) -> 3", "(count_nodes {3 {4} {7}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.197645, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {7 {4} {7}}) -> 3", "(count_nodes {5}) -> 1", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {9}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 0.89269, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {6 {9 {9}} {6 {9} {8}}}) -> 6", "(count_nodes {4}) -> 1", "(count_nodes {6 {9}}) -> 2", "(count_nodes {4 {0 {2}} {5}}) -> 4", "(count_nodes {5}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.034953, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {1 {9} {4}}}) -> 4", "(count_nodes {7 {6} {5 {8 {9} {0}}}}) -> 6", "(count_nodes {5 {9}}) -> 2", "(count_nodes {8 {7}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {3 {2 {8 {3}}}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.936169, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2 {9} {2}}) -> 3", "(count_nodes {6}) -> 1", "(count_nodes {8}) -> 1", "(count_nodes {3}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ c 1)) 1)) 0)) _) _)", "time": 1.001129, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {0 {7} {5}}) -> 3", "(count_nodes {5 {3 {5}}}) -> 3", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {9}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.057375, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {8} {5 {8 {8} {8}} {7 {2}}}}) -> 8", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6 {8}}) -> 2", "(count_nodes {1 {2 {4} {1 {1} {8}}} {5 {9}}}) -> 8"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.005568, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {6} {7}}) -> 3", "(count_nodes {7 {6}}) -> 2", "(count_nodes {2 {3 {8 {1}} {3 {9}}} {2 {4 {7} {3}} {6}}}) -> 11", "(count_nodes {0 {8}}) -> 2", "(count_nodes {7 {8 {1} {1}}}) -> 4", "(count_nodes {6}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.0254, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {0}}) -> 2", "(count_nodes {0}) -> 1", "(count_nodes {3 {3 {2}}}) -> 3", "(count_nodes {4}) -> 1", "(count_nodes {4 {5}}) -> 2", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 e)) 1)) 0)) _) _)", "time": 0.754566, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3 {4 {7} {5}} {8 {1} {3}}}) -> 7", "(count_nodes {}) -> 0", "(count_nodes {7 {8 {1} {5}} {8 {0}}}) -> 6"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.694758, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {3}}) -> 2", "(count_nodes {1 {6 {5 {1} {7}}} {6 {1 {4} {0}}}}) -> 9", "(count_nodes {4 {5}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {2 {2 {8}}}) -> 3", "(count_nodes {0}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.113797, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {0 {2}}) -> 2", "(count_nodes {4}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 1)) 1)) 0)) _) _)", "time": 0.719509, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {2} {6}}) -> 3", "(count_nodes {2 {0}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {5 {9 {7 {1}} {5 {0} {6}}} {3}}) -> 8"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.123391, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {6 {4} {4 {9}}}) -> 4", "(count_nodes {6}) -> 1", "(count_nodes {0 {9} {7}}) -> 3", "(count_nodes {8 {7} {7}}) -> 3", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.791815, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {4 {5} {0}} {2 {9} {0}}}) -> 7", "(count_nodes {0 {0}}) -> 2", "(count_nodes {3}) -> 1", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.123628, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {3 {1 {6} {0}} {3 {0}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ c c)) 1)) 0)) _) _)", "time": 0.77707, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6 {5}}) -> 2", "(count_nodes {8 {9}}) -> 2", "(count_nodes {1 {7 {2} {2}} {2}}) -> 5", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.281806, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {2 {1}} {5 {1}}}) -> 5", "(count_nodes {8}) -> 1", "(count_nodes {2 {3}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {8 {5 {5}} {0 {2} {1}}}) -> 6", "(count_nodes {3}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.826587, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {4 {4} {2}}) -> 3", "(count_nodes {0 {8}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {3 {4 {1}} {0 {0} {0}}}) -> 6", "(count_nodes {0 {2}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.819545, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {5 {4 {9} {8}} {7 {1}}} {0 {3} {1 {3} {1}}}}) -> 12", "(count_nodes {8}) -> 1", "(count_nodes {7 {3 {6} {9}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {7}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.166104, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {5 {7}}}) -> 3", "(count_nodes {9 {7 {6 {7} {7}}}}) -> 5", "(count_nodes {1}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {3 {1}}) -> 2", "(count_nodes {7}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.920199, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2 {7 {4 {1}} {5 {4}}}}) -> 6", "(count_nodes {3 {2 {1}} {7 {3}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {5}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.848626, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {1 {3 {8} {6}} {0 {9}}} {5 {3}}}) -> 9", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1 {7} {4}}) -> 3", "(count_nodes {2 {7} {1}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.061497, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {5 {6}}}) -> 3", "(count_nodes {5 {0 {8} {5 {0}}} {2 {6 {1}} {7}}}) -> 9", "(count_nodes {4 {6}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3 {1 {6} {0}}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.609044, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1 {7} {1}}) -> 3", "(count_nodes {2 {1 {4 {0}}}}) -> 4", "(count_nodes {9 {2} {4 {1}}}) -> 4", "(count_nodes {8}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.626857, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2 {1}}) -> 2", "(count_nodes {6 {6 {3}} {5 {1 {4}} {0 {5} {8}}}}) -> 9", "(count_nodes {1}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.636323, "name": "count_nodes"}
