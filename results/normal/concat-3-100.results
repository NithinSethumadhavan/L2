{"name": "concat", "time": 0.214542, "examples": ["(concat [5] []) -> [5]", "(concat [9 9 8 6 1] [6 0]) -> [9 9 8 6 1 6 0]", "(concat [9 0 5] [5 6]) -> [9 0 5 5 6]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.19777, "examples": ["(concat [9] [2 8 0 6 3]) -> [9 2 8 0 6 3]", "(concat [] [0 0 9 6]) -> [0 0 9 6]", "(concat [9 4] [9]) -> [9 4 9]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.226495, "examples": ["(concat [3 5 3 1] []) -> [3 5 3 1]", "(concat [4 0 0 4] [7 0 1 7]) -> [4 0 0 4 7 0 1 7]", "(concat [2] []) -> [2]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.218029, "examples": ["(concat [1 8 0] [6 5 0]) -> [1 8 0 6 5 0]", "(concat [5] [0 8 4 7]) -> [5 0 8 4 7]", "(concat [7 2 7 3 9] [5 1]) -> [7 2 7 3 9 5 1]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.247277, "examples": ["(concat [1 2 8 4] [0 0 2]) -> [1 2 8 4 0 0 2]", "(concat [] [4 9]) -> [4 9]", "(concat [1] [1]) -> [1 1]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.292831, "examples": ["(concat [] [1]) -> [1]", "(concat [] [8 1]) -> [8 1]", "(concat [3 5 2 0] [9 1 0]) -> [3 5 2 0 9 1 0]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.239955, "examples": ["(concat [1 3 1] []) -> [1 3 1]", "(concat [9 2 0 4 6] [5 3 7 8]) -> [9 2 0 4 6 5 3 7 8]", "(concat [0 1 3 1] [1 2 6 7 6]) -> [0 1 3 1 1 2 6 7 6]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.254255, "examples": ["(concat [2 0] [8 1 5]) -> [2 0 8 1 5]", "(concat [] [9 0]) -> [9 0]", "(concat [7] [1 8 9]) -> [7 1 8 9]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.271185, "examples": ["(concat [] [8]) -> [8]", "(concat [7 6] [7 1]) -> [7 6 7 1]", "(concat [] [4]) -> [4]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.210644, "examples": ["(concat [3 4 9] []) -> [3 4 9]", "(concat [2 2] [3]) -> [2 2 3]", "(concat [8 1 4 1 0] [6]) -> [8 1 4 1 0 6]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.258747, "examples": ["(concat [0 7 7] [4 2]) -> [0 7 7 4 2]", "(concat [6 9 0] [7 1]) -> [6 9 0 7 1]", "(concat [8 5] []) -> [8 5]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.221731, "examples": ["(concat [2] [1 0 6]) -> [2 1 0 6]", "(concat [2] [3 0 0 6]) -> [2 3 0 0 6]", "(concat [5 0 2 4] [4 4]) -> [5 0 2 4 4 4]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.169836, "examples": ["(concat [6] [2 5 6 3]) -> [6 2 5 6 3]", "(concat [3] [6 9 8 1]) -> [3 6 9 8 1]", "(concat [9 9] [3]) -> [9 9 3]"], "solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.247171, "examples": ["(concat [8 4] [1]) -> [8 4 1]", "(concat [7 3 7] [7 6 3 1 9]) -> [7 3 7 7 6 3 1 9]", "(concat [0 3 5 0 2] [2]) -> [0 3 5 0 2 2]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.3005, "examples": ["(concat [7 4 2] [4]) -> [7 4 2 4]", "(concat [3 2 8 6] [6 6 6 5 4]) -> [3 2 8 6 6 6 6 5 4]", "(concat [] [7 9 8 4]) -> [7 9 8 4]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.274783, "examples": ["(concat [9 2 1 3 4] [2 5 9]) -> [9 2 1 3 4 2 5 9]", "(concat [8 3 2] [3]) -> [8 3 2 3]", "(concat [5 1 0 0 5] [6]) -> [5 1 0 0 5 6]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.212015, "examples": ["(concat [0 5 8] [5 0 7 2]) -> [0 5 8 5 0 7 2]", "(concat [0 0 7 6] [7 2]) -> [0 0 7 6 7 2]", "(concat [3 5 4] [6]) -> [3 5 4 6]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.221892, "examples": ["(concat [0 1 9 4 1] [3 1 8]) -> [0 1 9 4 1 3 1 8]", "(concat [6 3 1 0 0] [1]) -> [6 3 1 0 0 1]", "(concat [9 6] [6 4 1 7]) -> [9 6 6 4 1 7]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.208242, "examples": ["(concat [0 3 4 5] [0]) -> [0 3 4 5 0]", "(concat [5 7 3] [5 1 4 9 6]) -> [5 7 3 5 1 4 9 6]", "(concat [0 6] []) -> [0 6]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.249587, "examples": ["(concat [7] [4 3 6 3 8]) -> [7 4 3 6 3 8]", "(concat [4 0 1] [3 6 4]) -> [4 0 1 3 6 4]", "(concat [6 3] [0 4 0 1]) -> [6 3 0 4 0 1]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.266169, "examples": ["(concat [8 1] [9 0]) -> [8 1 9 0]", "(concat [4 5] [0 6 0 0 1]) -> [4 5 0 6 0 0 1]", "(concat [3 2] []) -> [3 2]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.213914, "examples": ["(concat [5 6 7] []) -> [5 6 7]", "(concat [9 0 5 5] [7 9]) -> [9 0 5 5 7 9]", "(concat [0 6 9] [7 5 3]) -> [0 6 9 7 5 3]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.208653, "examples": ["(concat [2] [8 3 0]) -> [2 8 3 0]", "(concat [2] [2 1 0]) -> [2 2 1 0]", "(concat [9 9 9] [2 9 9 8 6]) -> [9 9 9 2 9 9 8 6]"], "solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.216929, "examples": ["(concat [] []) -> []", "(concat [4] [8 8 6 2]) -> [4 8 8 6 2]", "(concat [0 1] [2 4]) -> [0 1 2 4]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.27296, "examples": ["(concat [7] [8 7 7]) -> [7 8 7 7]", "(concat [6 1 2] [8]) -> [6 1 2 8]", "(concat [] []) -> []"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.243255, "examples": ["(concat [0 1 4 6] []) -> [0 1 4 6]", "(concat [8] []) -> [8]", "(concat [7 1] [8 1 0 5 7]) -> [7 1 8 1 0 5 7]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.248406, "examples": ["(concat [1] [6]) -> [1 6]", "(concat [6 8] [6 1 9 3]) -> [6 8 6 1 9 3]", "(concat [4 5] []) -> [4 5]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.248513, "examples": ["(concat [2 0 6 6 0] []) -> [2 0 6 6 0]", "(concat [7 6 5] [3 7 7]) -> [7 6 5 3 7 7]", "(concat [0 7 6 4 2] [2 4 0 1 5]) -> [0 7 6 4 2 2 4 0 1 5]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.234902, "examples": ["(concat [0 8 4 7 0] [7 3 7 8]) -> [0 8 4 7 0 7 3 7 8]", "(concat [] [0 7]) -> [0 7]", "(concat [0 4 5 8 0] [6 7 6 5]) -> [0 4 5 8 0 6 7 6 5]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.22934, "examples": ["(concat [0 1 5 2 6] [5 0 9 2]) -> [0 1 5 2 6 5 0 9 2]", "(concat [6 8 7 3 3] [8]) -> [6 8 7 3 3 8]", "(concat [] [7 4 9]) -> [7 4 9]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.253078, "examples": ["(concat [1 1 4 9] [6 5 8 0]) -> [1 1 4 9 6 5 8 0]", "(concat [1 8 9 9 4] [3]) -> [1 8 9 9 4 3]", "(concat [3 9 1] []) -> [3 9 1]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.229513, "examples": ["(concat [] [3 8]) -> [3 8]", "(concat [7 5 1 8 3] [9 6 9]) -> [7 5 1 8 3 9 6 9]", "(concat [6 0 8] [1 6]) -> [6 0 8 1 6]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.213149, "examples": ["(concat [] [0]) -> [0]", "(concat [5 0 2 6 9] [7 6]) -> [5 0 2 6 9 7 6]", "(concat [4 6] [9 8 5 2]) -> [4 6 9 8 5 2]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.228949, "examples": ["(concat [6] [0 0 5 8]) -> [6 0 0 5 8]", "(concat [5 4] []) -> [5 4]", "(concat [4 5] [8 3]) -> [4 5 8 3]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.135694, "examples": ["(concat [] [0 1]) -> [0 1]", "(concat [3] [1 6 0 6 8]) -> [3 1 6 0 6 8]", "(concat [] [6 3 1 0 7]) -> [6 3 1 0 7]"], "solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d b)) b)) _) _)"}
{"name": "concat", "time": 0.21674, "examples": ["(concat [7 0] [3 9 8]) -> [7 0 3 9 8]", "(concat [] [7 2 0 9 0]) -> [7 2 0 9 0]", "(concat [1] [9 9]) -> [1 9 9]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.253396, "examples": ["(concat [8 8 7 7 6] [4 1 3]) -> [8 8 7 7 6 4 1 3]", "(concat [7 9] [0 1 9]) -> [7 9 0 1 9]", "(concat [9 9 7 1] [3]) -> [9 9 7 1 3]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.27482, "examples": ["(concat [2 2 9 6] [6 2 4 6]) -> [2 2 9 6 6 2 4 6]", "(concat [] []) -> []", "(concat [7 3 7 0] [2 7]) -> [7 3 7 0 2 7]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.253236, "examples": ["(concat [8 5 9] [2 7 4]) -> [8 5 9 2 7 4]", "(concat [6 5 0] []) -> [6 5 0]", "(concat [6] [9 0 3 3]) -> [6 9 0 3 3]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.221792, "examples": ["(concat [6 5] [5 9 4 1 2]) -> [6 5 5 9 4 1 2]", "(concat [3] [8 8 3]) -> [3 8 8 3]", "(concat [1 8 2 9] [2]) -> [1 8 2 9 2]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.249823, "examples": ["(concat [] []) -> []", "(concat [7 6 2 3] []) -> [7 6 2 3]", "(concat [6 6 2] [1 7 5 2 2]) -> [6 6 2 1 7 5 2 2]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.217941, "examples": ["(concat [8 0] [7 8]) -> [8 0 7 8]", "(concat [1 8] [4 5 7]) -> [1 8 4 5 7]", "(concat [1 7] [3 2 8]) -> [1 7 3 2 8]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.199752, "examples": ["(concat [0 5 5] [7 5 4 0 9]) -> [0 5 5 7 5 4 0 9]", "(concat [6 2 5 1] []) -> [6 2 5 1]", "(concat [7 6 7 1 7] [0]) -> [7 6 7 1 7 0]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.190837, "examples": ["(concat [] [9 1 2]) -> [9 1 2]", "(concat [0] [7 8]) -> [0 7 8]", "(concat [0] [8 0 9]) -> [0 8 0 9]"], "solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons 0 b)) b)) _) _)"}
{"name": "concat", "time": 0.256031, "examples": ["(concat [0 7 0 5 4] []) -> [0 7 0 5 4]", "(concat [9 1 2 7] [4 3]) -> [9 1 2 7 4 3]", "(concat [9 6] [0]) -> [9 6 0]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.24877, "examples": ["(concat [] [0]) -> [0]", "(concat [2 1 6 7 1] [0]) -> [2 1 6 7 1 0]", "(concat [0 8 3 3] [2 0]) -> [0 8 3 3 2 0]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.249432, "examples": ["(concat [] [1]) -> [1]", "(concat [0 3] [8 7 1 8 8]) -> [0 3 8 7 1 8 8]", "(concat [7 9 1 9] [0 9 7]) -> [7 9 1 9 0 9 7]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.248726, "examples": ["(concat [9 0 2] [0]) -> [9 0 2 0]", "(concat [0 3 8 5 9] [1 8 8 1]) -> [0 3 8 5 9 1 8 8 1]", "(concat [0] [6 0 9 1]) -> [0 6 0 9 1]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.181829, "examples": ["(concat [3 9 9 8 4] [0]) -> [3 9 9 8 4 0]", "(concat [8 9 6 6 1] []) -> [8 9 6 6 1]", "(concat [7 9 0 8] [5 3 4]) -> [7 9 0 8 5 3 4]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.215904, "examples": ["(concat [1] [0 8 5 2 1]) -> [1 0 8 5 2 1]", "(concat [6 6 0 2] [0 4]) -> [6 6 0 2 0 4]", "(concat [4 6 7 2] [1 0 7 1]) -> [4 6 7 2 1 0 7 1]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.222633, "examples": ["(concat [0 9] [5 3 0 2 0]) -> [0 9 5 3 0 2 0]", "(concat [5 0 7 6] [8]) -> [5 0 7 6 8]", "(concat [2 3 4] [7 6 2 3 5]) -> [2 3 4 7 6 2 3 5]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.161076, "examples": ["(concat [] [9 9 8 1 0]) -> [9 9 8 1 0]", "(concat [7] [9 2]) -> [7 9 2]", "(concat [0] [4 5 2]) -> [0 4 5 2]"], "solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d b)) b)) _) _)"}
{"name": "concat", "time": 0.225871, "examples": ["(concat [6 3] [5 0 2]) -> [6 3 5 0 2]", "(concat [6 9] [1]) -> [6 9 1]", "(concat [9 1 1 0 1] [5 4]) -> [9 1 1 0 1 5 4]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.211648, "examples": ["(concat [] [1 4 9]) -> [1 4 9]", "(concat [1 8 2] []) -> [1 8 2]", "(concat [1] [3 9]) -> [1 3 9]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.208952, "examples": ["(concat [] []) -> []", "(concat [3 7] [0]) -> [3 7 0]", "(concat [6 6 7 7 4] [0 5]) -> [6 6 7 7 4 0 5]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.280767, "examples": ["(concat [4 2 8 7] [1 6 4]) -> [4 2 8 7 1 6 4]", "(concat [2] []) -> [2]", "(concat [7 9 2] [7 6]) -> [7 9 2 7 6]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.232999, "examples": ["(concat [9 1 8 2 3] []) -> [9 1 8 2 3]", "(concat [1 7 7 4] [2 0 2 4]) -> [1 7 7 4 2 0 2 4]", "(concat [1 1 2 9] [1 8 1 7]) -> [1 1 2 9 1 8 1 7]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.218232, "examples": ["(concat [1 1 9] [9 7]) -> [1 1 9 9 7]", "(concat [9 9 1 5] []) -> [9 9 1 5]", "(concat [6 4] [1 7 0 7 2]) -> [6 4 1 7 0 7 2]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.243555, "examples": ["(concat [0 9 5 6 5] [1 8 1 0 8]) -> [0 9 5 6 5 1 8 1 0 8]", "(concat [8 3 7] [5 7 2]) -> [8 3 7 5 7 2]", "(concat [0 4 0 0 2] []) -> [0 4 0 0 2]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.204081, "examples": ["(concat [] []) -> []", "(concat [3 9 8 1 0] [9]) -> [3 9 8 1 0 9]", "(concat [5 2 6 9 9] [5 2 6]) -> [5 2 6 9 9 5 2 6]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.264216, "examples": ["(concat [6 3] [1 6 9]) -> [6 3 1 6 9]", "(concat [4 1 6 6] [8 2 6 6]) -> [4 1 6 6 8 2 6 6]", "(concat [0 5 6 2 0] [0 0 1]) -> [0 5 6 2 0 0 0 1]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.243536, "examples": ["(concat [2 4 1 1 6] [3 1 9 5 8]) -> [2 4 1 1 6 3 1 9 5 8]", "(concat [] [0 3 0]) -> [0 3 0]", "(concat [7 1 5] [9 0 4 2]) -> [7 1 5 9 0 4 2]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.23542, "examples": ["(concat [5 8 9 7 2] [4]) -> [5 8 9 7 2 4]", "(concat [3 9 5 3] [2 0 9 9]) -> [3 9 5 3 2 0 9 9]", "(concat [0] [0 1 7 4]) -> [0 0 1 7 4]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.217356, "examples": ["(concat [3 5 0 4 0] [5 7 7]) -> [3 5 0 4 0 5 7 7]", "(concat [7 7 2 3] [7 2 7 0 8]) -> [7 7 2 3 7 2 7 0 8]", "(concat [7 7 7 1 5] [7 3 5 1 1]) -> [7 7 7 1 5 7 3 5 1 1]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.197054, "examples": ["(concat [1 8 3] [4 0 8 6]) -> [1 8 3 4 0 8 6]", "(concat [] []) -> []", "(concat [1] [4 3 9 9 0]) -> [1 4 3 9 9 0]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.137132, "examples": ["(concat [] [2 8]) -> [2 8]", "(concat [0 3 0 5 1] [1 0 0]) -> [0 3 0 5 1 1 0 0]", "(concat [3 6 1] [3]) -> [3 6 1 3]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.217821, "examples": ["(concat [3] [7 3 2 3]) -> [3 7 3 2 3]", "(concat [1 4 6 3] [8 4 7]) -> [1 4 6 3 8 4 7]", "(concat [] [0 4]) -> [0 4]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.222351, "examples": ["(concat [0] [2 7]) -> [0 2 7]", "(concat [5 8] [5 2 1 0 1]) -> [5 8 5 2 1 0 1]", "(concat [2 9 8 3 2] []) -> [2 9 8 3 2]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.174426, "examples": ["(concat [4] [6 6 5 1]) -> [4 6 6 5 1]", "(concat [0] [1 4 8]) -> [0 1 4 8]", "(concat [7 3] [0 4 7 8 2]) -> [7 3 0 4 7 8 2]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.216149, "examples": ["(concat [2] [3]) -> [2 3]", "(concat [7] [8 4 9 6]) -> [7 8 4 9 6]", "(concat [5 0] [5 6 6 7 3]) -> [5 0 5 6 6 7 3]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.221891, "examples": ["(concat [4] [8]) -> [4 8]", "(concat [3 0 3 0] [5 7 4 7]) -> [3 0 3 0 5 7 4 7]", "(concat [1 8 9 0] []) -> [1 8 9 0]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.25447, "examples": ["(concat [2 1 9 6 3] [4 0]) -> [2 1 9 6 3 4 0]", "(concat [2 6] [6 8 5 5]) -> [2 6 6 8 5 5]", "(concat [7 8] []) -> [7 8]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.200584, "examples": ["(concat [4 0] [5]) -> [4 0 5]", "(concat [2 2 1 4 0] [8 5 5 4 0]) -> [2 2 1 4 0 8 5 5 4 0]", "(concat [5 5 7 8 0] []) -> [5 5 7 8 0]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.210557, "examples": ["(concat [] []) -> []", "(concat [2 8 8 7] [9 9 4 8 5]) -> [2 8 8 7 9 9 4 8 5]", "(concat [8 4 3] [4]) -> [8 4 3 4]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.243693, "examples": ["(concat [8 0] [8]) -> [8 0 8]", "(concat [0 4 8 7 6] []) -> [0 4 8 7 6]", "(concat [0 0 7 7 5] []) -> [0 0 7 7 5]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.208289, "examples": ["(concat [2 8 9] [1 4 2 0]) -> [2 8 9 1 4 2 0]", "(concat [3 3 5] []) -> [3 3 5]", "(concat [6 7 1 7 2] [7 5 8 2 2]) -> [6 7 1 7 2 7 5 8 2 2]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.233938, "examples": ["(concat [8 5 3] [8 0 1]) -> [8 5 3 8 0 1]", "(concat [8] [7]) -> [8 7]", "(concat [8] [2]) -> [8 2]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.246569, "examples": ["(concat [2 0 3 5] [4 6 1]) -> [2 0 3 5 4 6 1]", "(concat [7 5 0] [0]) -> [7 5 0 0]", "(concat [1 1] [7 9 4]) -> [1 1 7 9 4]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.21073, "examples": ["(concat [3] [9 5 7 4 8]) -> [3 9 5 7 4 8]", "(concat [] [3 9 1 4 0]) -> [3 9 1 4 0]", "(concat [9 2] [1]) -> [9 2 1]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.240011, "examples": ["(concat [9 3] [5 8]) -> [9 3 5 8]", "(concat [0 1 3 2 7] [4 2]) -> [0 1 3 2 7 4 2]", "(concat [5 3] [4 4 6 5 7]) -> [5 3 4 4 6 5 7]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.207576, "examples": ["(concat [7] [3 0 9 7 5]) -> [7 3 0 9 7 5]", "(concat [4 0 3] [4 2]) -> [4 0 3 4 2]", "(concat [8] [9 1]) -> [8 9 1]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.221929, "examples": ["(concat [1 7 2 4 8] [4 8 1 6]) -> [1 7 2 4 8 4 8 1 6]", "(concat [1] [6]) -> [1 6]", "(concat [4 9 4 8 5] [5 7 5 5 3]) -> [4 9 4 8 5 5 7 5 5 3]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.181605, "examples": ["(concat [5 4 6 5] [4 4 8]) -> [5 4 6 5 4 4 8]", "(concat [1 4 6 2 1] [5 6 2]) -> [1 4 6 2 1 5 6 2]", "(concat [] [4]) -> [4]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.230939, "examples": ["(concat [1 7 9] [0 8 8]) -> [1 7 9 0 8 8]", "(concat [] [8 3]) -> [8 3]", "(concat [] [3 5 8 8 9]) -> [3 5 8 8 9]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.193238, "examples": ["(concat [2] [2 1 4 3 7]) -> [2 2 1 4 3 7]", "(concat [1 2 7 3 4] [1 5 3]) -> [1 2 7 3 4 1 5 3]", "(concat [7 7 9 0] [2 7]) -> [7 7 9 0 2 7]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.225516, "examples": ["(concat [3 4 9 1 9] [3]) -> [3 4 9 1 9 3]", "(concat [0 3 5 0] [9]) -> [0 3 5 0 9]", "(concat [6 9 5 6] [7 5 5 7 8]) -> [6 9 5 6 7 5 5 7 8]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.165597, "examples": ["(concat [5 1 1] [6 0 7 8 0]) -> [5 1 1 6 0 7 8 0]", "(concat [7 3] [7 8 7 4 5]) -> [7 3 7 8 7 4 5]", "(concat [2 0 6] [6 2 9 6]) -> [2 0 6 6 2 9 6]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.22299, "examples": ["(concat [4 6 5 4 2] [5]) -> [4 6 5 4 2 5]", "(concat [] [4]) -> [4]", "(concat [] [8]) -> [8]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.198121, "examples": ["(concat [3 6 4] [1 7 3 7]) -> [3 6 4 1 7 3 7]", "(concat [6 8 7] [3 2 4 4 6]) -> [6 8 7 3 2 4 4 6]", "(concat [7 9] []) -> [7 9]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.21155, "examples": ["(concat [9 2 1] []) -> [9 2 1]", "(concat [1 6 6 6] [3 2 1 7]) -> [1 6 6 6 3 2 1 7]", "(concat [8 3 6 2] [6 8]) -> [8 3 6 2 6 8]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.174308, "examples": ["(concat [1] [4]) -> [1 4]", "(concat [7] []) -> [7]", "(concat [] [8 5]) -> [8 5]"], "solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d b)) b)) _) _)"}
{"name": "concat", "time": 0.211948, "examples": ["(concat [] [0 5 4 2]) -> [0 5 4 2]", "(concat [1 1 0 6 1] [5 9 6 6 6]) -> [1 1 0 6 1 5 9 6 6 6]", "(concat [2 1] [2 3 3 9]) -> [2 1 2 3 3 9]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.235527, "examples": ["(concat [4 1 9 2] [4 8]) -> [4 1 9 2 4 8]", "(concat [] []) -> []", "(concat [0 5] []) -> [0 5]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.204583, "examples": ["(concat [2] [1]) -> [2 1]", "(concat [2 1 3 8] []) -> [2 1 3 8]", "(concat [2 2] [7 7 4 4 6]) -> [2 2 7 7 4 4 6]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.242869, "examples": ["(concat [8 9 0 7] [8]) -> [8 9 0 7 8]", "(concat [1 4] [8 2 0 7 7]) -> [1 4 8 2 0 7 7]", "(concat [] [2 1 5 5 9]) -> [2 1 5 5 9]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.212232, "examples": ["(concat [0] [9 0]) -> [0 9 0]", "(concat [7 4 1 8] [5 2 9]) -> [7 4 1 8 5 2 9]", "(concat [8] [0 9 0 8]) -> [8 0 9 0 8]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.106601, "examples": ["(concat [6 4 4] [5]) -> [6 4 4 5]", "(concat [0 7 7] [8 2 3 1]) -> [0 7 7 8 2 3 1]", "(concat [1 3 0 0 5] [5 3 8 9 4]) -> [1 3 0 0 5 5 3 8 9 4]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.104387, "examples": ["(concat [3] []) -> [3]", "(concat [] [5 4 5]) -> [5 4 5]", "(concat [5 7 3 9 6] [0 3 9]) -> [5 7 3 9 6 0 3 9]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.09848, "examples": ["(concat [2 3 8] [1 2]) -> [2 3 8 1 2]", "(concat [9 0 9] []) -> [9 0 9]", "(concat [0 4 1 8 6] [2 1]) -> [0 4 1 8 6 2 1]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.097467, "examples": ["(concat [6 8] [1 1 4]) -> [6 8 1 1 4]", "(concat [5 1 7 6 7] []) -> [5 1 7 6 7]", "(concat [9 5] [4 4 1 5 3]) -> [9 5 4 4 1 5 3]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
