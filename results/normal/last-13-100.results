{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7 5]) -> 5", "(last [4 4]) -> 4", "(last [5]) -> 5", "(last [2 2 3]) -> 3", "(last [3 6 3]) -> 3", "(last [3 0 1]) -> 1", "(last [6 8]) -> 8", "(last [5 8 3]) -> 3", "(last [5]) -> 5", "(last [9 4]) -> 4", "(last [2 4 9]) -> 9", "(last [5 9 7 5 4]) -> 4"], "time": 0.035755}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9]) -> 9", "(last [3 4 9 9]) -> 9", "(last [3 7]) -> 7", "(last [6]) -> 6", "(last [0]) -> 0", "(last [4 1 3]) -> 3", "(last [2 5]) -> 5", "(last [8]) -> 8", "(last [7 5 5 5]) -> 5", "(last [3 3 9 7 9]) -> 9", "(last [2 9]) -> 9", "(last [1 2 0]) -> 0"], "time": 0.027091}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0 5 5]) -> 5", "(last [4]) -> 4", "(last [0 8]) -> 8", "(last [4 9 5]) -> 5", "(last [1]) -> 1", "(last [7 5 7 9 3]) -> 3", "(last [3 6 1 2 5]) -> 5", "(last [4 5 5]) -> 5", "(last [8]) -> 8", "(last [5 6 9]) -> 9", "(last [1 3]) -> 3", "(last [7 1 0]) -> 0"], "time": 0.04245}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9 7 1]) -> 1", "(last [1 9 7 7 2]) -> 2", "(last [4]) -> 4", "(last [1 2 9 7 9]) -> 9", "(last [1 1 0 1]) -> 1", "(last [5]) -> 5", "(last [3]) -> 3", "(last [1 5]) -> 5", "(last [3 8 3]) -> 3", "(last [5 1]) -> 1", "(last [0 8 7 8 5]) -> 5", "(last [7]) -> 7"], "time": 0.038037}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0 5]) -> 5", "(last [9 5 0 2]) -> 2", "(last [8 2 4 7]) -> 7", "(last [0 3 9 9 3]) -> 3", "(last [5 5]) -> 5", "(last [4 5 6]) -> 6", "(last [6 2]) -> 2", "(last [4 6]) -> 6", "(last [3 4]) -> 4", "(last [9]) -> 9", "(last [2 0]) -> 0", "(last [3 2 1]) -> 1"], "time": 0.028922}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7 9 4]) -> 4", "(last [8 2 9 9]) -> 9", "(last [0 5 6 2]) -> 2", "(last [7]) -> 7", "(last [5 5 5 6]) -> 6", "(last [5 4 2 7 3]) -> 3", "(last [7 5 9 6 4]) -> 4", "(last [9 6 8 6]) -> 6", "(last [5 5 5 4 5]) -> 5", "(last [8]) -> 8", "(last [6 5]) -> 5", "(last [9 0 8]) -> 8"], "time": 0.033389}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [6 8 6]) -> 6", "(last [7 8 1 9 3]) -> 3", "(last [8 4]) -> 4", "(last [3 4]) -> 4", "(last [7 4]) -> 4", "(last [7 7 3 1]) -> 1", "(last [6 9 5]) -> 5", "(last [1 8 8 8]) -> 8", "(last [1 2 7 1 7]) -> 7", "(last [6 7 2]) -> 2", "(last [0 6 6]) -> 6", "(last [4 3 2 2 4]) -> 4"], "time": 0.036458}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [4 4 8 7 8]) -> 8", "(last [3]) -> 3", "(last [6 7 0 4 6]) -> 6", "(last [7 2 1]) -> 1", "(last [9 9 7 1]) -> 1", "(last [4 2 3 8]) -> 8", "(last [7 6]) -> 6", "(last [1]) -> 1", "(last [5 5]) -> 5", "(last [5 1]) -> 1", "(last [0]) -> 0", "(last [0]) -> 0"], "time": 0.034983}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2 4 8]) -> 8", "(last [9 9 1 6 8]) -> 8", "(last [3 6 1 3]) -> 3", "(last [0]) -> 0", "(last [2 2]) -> 2", "(last [8 3 5]) -> 5", "(last [7 7 4 3]) -> 3", "(last [1 5 1 4]) -> 4", "(last [1 4]) -> 4", "(last [2 8 0 8 6]) -> 6", "(last [3 6 6 5]) -> 5", "(last [1]) -> 1"], "time": 0.032977}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7 6 8]) -> 8", "(last [4 5]) -> 5", "(last [9 3 1]) -> 1", "(last [5 5 3 8]) -> 8", "(last [5 4 1 2]) -> 2", "(last [9 0 4 7 9]) -> 9", "(last [5 2 2 2]) -> 2", "(last [5 6 2 0 8]) -> 8", "(last [5 8 9]) -> 9", "(last [8 4 3]) -> 3", "(last [5 5]) -> 5", "(last [9]) -> 9"], "time": 0.04508}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7 8]) -> 8", "(last [5 2 3]) -> 3", "(last [1 2 6 9 9]) -> 9", "(last [0 0]) -> 0", "(last [8 2 8 1 6]) -> 6", "(last [6 2 5]) -> 5", "(last [0 1 0 2 3]) -> 3", "(last [8 6 6]) -> 6", "(last [1 4 6 9 8]) -> 8", "(last [3]) -> 3", "(last [9 2 8 2 3]) -> 3", "(last [9 2]) -> 2"], "time": 0.04431}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7 7]) -> 7", "(last [6 5 7]) -> 7", "(last [5]) -> 5", "(last [5 2 6 6]) -> 6", "(last [1 6 4 9 6]) -> 6", "(last [7]) -> 7", "(last [3]) -> 3", "(last [5 7 2]) -> 2", "(last [5 7 8 2]) -> 2", "(last [3 5 5 9]) -> 9", "(last [0 0 2 5]) -> 5", "(last [1 9]) -> 9"], "time": 0.044538}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7 5]) -> 5", "(last [5 5 7]) -> 7", "(last [4]) -> 4", "(last [9]) -> 9", "(last [6 8 2]) -> 2", "(last [7 4 4 8 2]) -> 2", "(last [3 8 3 1]) -> 1", "(last [9 5]) -> 5", "(last [8 9 3 0 9]) -> 9", "(last [4]) -> 4", "(last [9 2]) -> 2", "(last [7 5 7]) -> 7"], "time": 0.036427}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9 1 5 6]) -> 6", "(last [7 3 3]) -> 3", "(last [6 6 6 0]) -> 0", "(last [9]) -> 9", "(last [6]) -> 6", "(last [6 5]) -> 5", "(last [8 1]) -> 1", "(last [7 7 1]) -> 1", "(last [9 7 6 5 8]) -> 8", "(last [7 7]) -> 7", "(last [3 1 4]) -> 4", "(last [4 3 7 4 8]) -> 8"], "time": 0.041595}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [6 3 7 8 1]) -> 1", "(last [9 4 0 7 8]) -> 8", "(last [9 7 6 2 8]) -> 8", "(last [3 7 5 8 7]) -> 7", "(last [9 5 3 7]) -> 7", "(last [0 0]) -> 0", "(last [5 2 4 6]) -> 6", "(last [3 4 8 0 3]) -> 3", "(last [0 2]) -> 2", "(last [0 6]) -> 6", "(last [9 8 6]) -> 6", "(last [2 8 2]) -> 2"], "time": 0.04172}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2 3 3]) -> 3", "(last [9 7]) -> 7", "(last [7 4 3]) -> 3", "(last [4 4 3]) -> 3", "(last [6 8 4]) -> 4", "(last [2 3 8 3 1]) -> 1", "(last [9]) -> 9", "(last [1 3]) -> 3", "(last [5 2 0 7]) -> 7", "(last [4]) -> 4", "(last [2 8 8 5 5]) -> 5", "(last [2 8]) -> 8"], "time": 0.037039}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [4]) -> 4", "(last [2 1 7 0 0]) -> 0", "(last [7 5 8 3 0]) -> 0", "(last [5]) -> 5", "(last [3 7 0 0 5]) -> 5", "(last [3 9 7]) -> 7", "(last [4 8 6 8]) -> 8", "(last [0 9 2]) -> 2", "(last [3 8]) -> 8", "(last [4 9]) -> 9", "(last [0 5]) -> 5", "(last [3 9 3 4]) -> 4"], "time": 0.029593}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [6 2 5]) -> 5", "(last [4 9 7]) -> 7", "(last [4 1]) -> 1", "(last [6 2 5 1]) -> 1", "(last [9 1 8 7 7]) -> 7", "(last [2 1 2 4 9]) -> 9", "(last [0 7 1]) -> 1", "(last [4 3]) -> 3", "(last [1]) -> 1", "(last [0 3 5 6]) -> 6", "(last [7 9 9]) -> 9", "(last [6]) -> 6"], "time": 0.032969}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [6]) -> 6", "(last [6]) -> 6", "(last [1 4]) -> 4", "(last [1 6]) -> 6", "(last [4 0 9]) -> 9", "(last [1 5 6]) -> 6", "(last [6 6]) -> 6", "(last [8 3 2]) -> 2", "(last [7 7 1]) -> 1", "(last [6 3 9]) -> 9", "(last [2 5 0 4 8]) -> 8", "(last [9]) -> 9"], "time": 0.03334}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9 2 9]) -> 9", "(last [8 7 1 1]) -> 1", "(last [6 2 2]) -> 2", "(last [0 6 1 6 0]) -> 0", "(last [4 0 5]) -> 5", "(last [8 8 7 4 4]) -> 4", "(last [2 6 0]) -> 0", "(last [6 1 4]) -> 4", "(last [5 7 2 6]) -> 6", "(last [4 7]) -> 7", "(last [0 9]) -> 9", "(last [0 0 7]) -> 7"], "time": 0.042549}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7 6 6]) -> 6", "(last [5 5]) -> 5", "(last [8 6 6]) -> 6", "(last [7 3 4 7 3]) -> 3", "(last [0 5]) -> 5", "(last [2 1 6]) -> 6", "(last [0 6 0 6]) -> 6", "(last [9 5]) -> 5", "(last [2 5]) -> 5", "(last [5 9 3 0 6]) -> 6", "(last [8]) -> 8", "(last [1 3 1 7 8]) -> 8"], "time": 0.031321}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2 4 1 4]) -> 4", "(last [0 2 7]) -> 7", "(last [4 2 5 1 2]) -> 2", "(last [1]) -> 1", "(last [1 9 6 8 5]) -> 5", "(last [4 5 7 5 4]) -> 4", "(last [9]) -> 9", "(last [7 2 2]) -> 2", "(last [8 2 1]) -> 1", "(last [3 7 2 3]) -> 3", "(last [2 4 5 3 5]) -> 5", "(last [0 2 0 0 9]) -> 9"], "time": 0.030565}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2 2 7 7]) -> 7", "(last [9 6 5 5 5]) -> 5", "(last [3 9 6]) -> 6", "(last [9 0 8 1]) -> 1", "(last [4 0]) -> 0", "(last [6 1 1 9]) -> 9", "(last [8]) -> 8", "(last [9]) -> 9", "(last [4 9 9 0]) -> 0", "(last [6 9 3 1 3]) -> 3", "(last [9 8 5]) -> 5", "(last [4 9 1 3 3]) -> 3"], "time": 0.037617}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9]) -> 9", "(last [4 7 5 1 2]) -> 2", "(last [8 3]) -> 3", "(last [0 4 1 1]) -> 1", "(last [1 8 4]) -> 4", "(last [1 9]) -> 9", "(last [9 6 8 6 2]) -> 2", "(last [3 2 2 7 8]) -> 8", "(last [7]) -> 7", "(last [9 9 0]) -> 0", "(last [1 8]) -> 8", "(last [6 9 6 8]) -> 8"], "time": 0.035186}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [3 2 5 0 6]) -> 6", "(last [1 9 5]) -> 5", "(last [4 0 7 6 5]) -> 5", "(last [5 5 0]) -> 0", "(last [7 1 6 0]) -> 0", "(last [3]) -> 3", "(last [3]) -> 3", "(last [5 3 7 6]) -> 6", "(last [0 7]) -> 7", "(last [4 8 3]) -> 3", "(last [1]) -> 1", "(last [2 5 2 6]) -> 6"], "time": 0.033147}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8 0 8 5 4]) -> 4", "(last [0 3 5]) -> 5", "(last [0 0 4]) -> 4", "(last [8]) -> 8", "(last [1 0 1]) -> 1", "(last [2 4 2 0 6]) -> 6", "(last [6 2 8 3 5]) -> 5", "(last [7 9 7 2 6]) -> 6", "(last [6 1 2]) -> 2", "(last [7 3 9]) -> 9", "(last [1 3]) -> 3", "(last [9 6 7 6 3]) -> 3"], "time": 0.028396}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 5 7 6 3]) -> 3", "(last [5 1 7]) -> 7", "(last [6 6 5 3 6]) -> 6", "(last [1 4 0 5 2]) -> 2", "(last [4 2 1]) -> 1", "(last [4 7]) -> 7", "(last [7 3]) -> 3", "(last [6]) -> 6", "(last [1 9 4 1]) -> 1", "(last [3 8]) -> 8", "(last [9 0 5]) -> 5", "(last [0 7 7 0 5]) -> 5"], "time": 0.027417}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8 4 6 5 8]) -> 8", "(last [2 7 1 1]) -> 1", "(last [7 6 1 0]) -> 0", "(last [3 6 0 0]) -> 0", "(last [5 8 5 6]) -> 6", "(last [0 1 7 8 2]) -> 2", "(last [0 6 4 2 6]) -> 6", "(last [2 8 2 6]) -> 6", "(last [7]) -> 7", "(last [2 2 1 3]) -> 3", "(last [7]) -> 7", "(last [0]) -> 0"], "time": 0.031652}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9 5 2 7]) -> 7", "(last [6 9 1]) -> 1", "(last [9 9]) -> 9", "(last [3 9 3 5]) -> 5", "(last [0 2 3 9]) -> 9", "(last [2]) -> 2", "(last [9 1 7]) -> 7", "(last [5]) -> 5", "(last [8 1]) -> 1", "(last [3 1 2 2 3]) -> 3", "(last [5 0 1 5 1]) -> 1", "(last [9]) -> 9"], "time": 0.033213}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7 4 0 8]) -> 8", "(last [6]) -> 6", "(last [7 3 9]) -> 9", "(last [0 2]) -> 2", "(last [8 6 9 2]) -> 2", "(last [4 8 0 6 2]) -> 2", "(last [7 5 7 4 2]) -> 2", "(last [1 1 9 8 8]) -> 8", "(last [5 5]) -> 5", "(last [4 5 4 9 2]) -> 2", "(last [2]) -> 2", "(last [4]) -> 4"], "time": 0.040692}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [6 8 7 5]) -> 5", "(last [3 1 6 6]) -> 6", "(last [4 6 5 8]) -> 8", "(last [5 1 9]) -> 9", "(last [9 0]) -> 0", "(last [2 2 5]) -> 5", "(last [4 9 3]) -> 3", "(last [2 4 4]) -> 4", "(last [2 0 8 8]) -> 8", "(last [1 1]) -> 1", "(last [4]) -> 4", "(last [9 8 1 4 9]) -> 9"], "time": 0.028069}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0 6]) -> 6", "(last [9]) -> 9", "(last [5 1 4 2]) -> 2", "(last [1 5]) -> 5", "(last [1]) -> 1", "(last [0 9]) -> 9", "(last [3 0 5]) -> 5", "(last [1 2]) -> 2", "(last [9 5 7]) -> 7", "(last [3]) -> 3", "(last [5 5]) -> 5", "(last [7 8 0]) -> 0"], "time": 0.028701}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8 4 3 3 5]) -> 5", "(last [7 9 4]) -> 4", "(last [8 6 1]) -> 1", "(last [2 7 2 8 7]) -> 7", "(last [1 1 9 8]) -> 8", "(last [8 8 0]) -> 0", "(last [5 1 4 2]) -> 2", "(last [0]) -> 0", "(last [2]) -> 2", "(last [2 1 7]) -> 7", "(last [8 5]) -> 5", "(last [7]) -> 7"], "time": 0.02551}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [3 2 2 6]) -> 6", "(last [8]) -> 8", "(last [9 6 0 7]) -> 7", "(last [5 4 8 8]) -> 8", "(last [4 3 2 3]) -> 3", "(last [8 7]) -> 7", "(last [1]) -> 1", "(last [0]) -> 0", "(last [4 8 5 5 7]) -> 7", "(last [8 9 4 4 9]) -> 9", "(last [7]) -> 7", "(last [3 8 4 3]) -> 3"], "time": 0.035604}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9 1 5]) -> 5", "(last [7 6]) -> 6", "(last [3 4 7]) -> 7", "(last [3 9]) -> 9", "(last [7 5 4 8]) -> 8", "(last [3 1 5]) -> 5", "(last [1]) -> 1", "(last [0 0 4]) -> 4", "(last [2 2]) -> 2", "(last [4 9 5 8]) -> 8", "(last [8 8]) -> 8", "(last [9]) -> 9"], "time": 0.032665}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [4 4 7 0]) -> 0", "(last [5 0 5]) -> 5", "(last [9 1]) -> 1", "(last [1 6]) -> 6", "(last [6 2 8 8 3]) -> 3", "(last [9 7 0 5 9]) -> 9", "(last [9]) -> 9", "(last [8 7 0 1 8]) -> 8", "(last [6]) -> 6", "(last [8 7 8 3 9]) -> 9", "(last [3]) -> 3", "(last [7 1 0 4 3]) -> 3"], "time": 0.030736}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [3 9]) -> 9", "(last [0]) -> 0", "(last [7 0]) -> 0", "(last [4 9 2 7]) -> 7", "(last [1 4 3 7]) -> 7", "(last [3 0 6]) -> 6", "(last [3 6 7 9]) -> 9", "(last [0 1 3 3 3]) -> 3", "(last [0 4]) -> 4", "(last [1 1]) -> 1", "(last [2]) -> 2", "(last [6 6 4 3]) -> 3"], "time": 0.026393}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 9]) -> 9", "(last [6 2]) -> 2", "(last [9]) -> 9", "(last [9 5 3]) -> 3", "(last [7 3 4]) -> 4", "(last [4 9 9 2 4]) -> 4", "(last [6 2 1 0 4]) -> 4", "(last [7]) -> 7", "(last [1 9]) -> 9", "(last [4 3 4 5 6]) -> 6", "(last [3]) -> 3", "(last [1 1 0]) -> 0"], "time": 0.026109}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7 5]) -> 5", "(last [9 4]) -> 4", "(last [6 2 9 6 7]) -> 7", "(last [1 6 4]) -> 4", "(last [7 2 6 5]) -> 5", "(last [4 8 5 6 7]) -> 7", "(last [9]) -> 9", "(last [8]) -> 8", "(last [2 0 1 6 2]) -> 2", "(last [3 3]) -> 3", "(last [4 3]) -> 3", "(last [6 7]) -> 7"], "time": 0.028614}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9 2 3]) -> 3", "(last [5 8 7]) -> 7", "(last [3 5 9 4 4]) -> 4", "(last [0 8]) -> 8", "(last [0 3 5]) -> 5", "(last [0]) -> 0", "(last [2 2]) -> 2", "(last [6 9]) -> 9", "(last [7 2 6]) -> 6", "(last [7]) -> 7", "(last [9 9]) -> 9", "(last [1]) -> 1"], "time": 0.030361}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [4 8 0 6 7]) -> 7", "(last [9 7]) -> 7", "(last [3]) -> 3", "(last [0 6 5]) -> 5", "(last [3 2 8 3 0]) -> 0", "(last [1 9 8 4 8]) -> 8", "(last [2 3]) -> 3", "(last [7 1]) -> 1", "(last [7 2 8 5 1]) -> 1", "(last [3 1 6]) -> 6", "(last [0 2 1]) -> 1", "(last [1 4 0]) -> 0"], "time": 0.027315}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0 1 2]) -> 2", "(last [6 1 5]) -> 5", "(last [3 8]) -> 8", "(last [8 5]) -> 5", "(last [4 2 1 8 1]) -> 1", "(last [5]) -> 5", "(last [4 8 7 7]) -> 7", "(last [0 6 5]) -> 5", "(last [8 6]) -> 6", "(last [3 3]) -> 3", "(last [8 2 7 7 4]) -> 4", "(last [6 7 7 3]) -> 3"], "time": 0.036641}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8 3 1 0 4]) -> 4", "(last [6 2]) -> 2", "(last [0 7 7 3]) -> 3", "(last [0 2]) -> 2", "(last [0 8]) -> 8", "(last [2 6 7 3]) -> 3", "(last [3 1 9 4 5]) -> 5", "(last [0 2]) -> 2", "(last [6 7 1]) -> 1", "(last [1 8]) -> 8", "(last [2 5 9]) -> 9", "(last [9 7 4 9 9]) -> 9"], "time": 0.036177}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8 4 4]) -> 4", "(last [1 7 0]) -> 0", "(last [7 3 8]) -> 8", "(last [7]) -> 7", "(last [1 8 6 2 6]) -> 6", "(last [7 3 0]) -> 0", "(last [3]) -> 3", "(last [9 7 7 6 1]) -> 1", "(last [7]) -> 7", "(last [6 8]) -> 8", "(last [6 2 6]) -> 6", "(last [4 1 1 6]) -> 6"], "time": 0.039918}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8 9 6 5 6]) -> 6", "(last [5]) -> 5", "(last [5]) -> 5", "(last [6 9 5 8 9]) -> 9", "(last [8 4]) -> 4", "(last [7 5]) -> 5", "(last [6]) -> 6", "(last [0 2]) -> 2", "(last [1]) -> 1", "(last [1 5 0 2 4]) -> 4", "(last [2]) -> 2", "(last [1 0]) -> 0"], "time": 0.034744}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0]) -> 0", "(last [4 0 7 8]) -> 8", "(last [4 7 1]) -> 1", "(last [7]) -> 7", "(last [4 0 0]) -> 0", "(last [0 8 1 8]) -> 8", "(last [7]) -> 7", "(last [6 5 9 9 9]) -> 9", "(last [3 8 2 8 5]) -> 5", "(last [2]) -> 2", "(last [9 0 6]) -> 6", "(last [4 6 6 3]) -> 3"], "time": 0.032889}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5]) -> 5", "(last [7 0 7 4 9]) -> 9", "(last [7 2 9 7]) -> 7", "(last [0 0 7 8]) -> 8", "(last [2 9]) -> 9", "(last [2 2 2 2 4]) -> 4", "(last [8 6]) -> 6", "(last [6]) -> 6", "(last [1 9]) -> 9", "(last [0 6 1]) -> 1", "(last [5 8 3 1 0]) -> 0", "(last [2]) -> 2"], "time": 0.045173}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8 1 9 2 4]) -> 4", "(last [1 9 5]) -> 5", "(last [9]) -> 9", "(last [4 4 4 8 8]) -> 8", "(last [7]) -> 7", "(last [2 1 7]) -> 7", "(last [6 0 5 3]) -> 3", "(last [0 4]) -> 4", "(last [2]) -> 2", "(last [5 8 2 0]) -> 0", "(last [0]) -> 0", "(last [8 3 1]) -> 1"], "time": 0.02733}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1 3 3 9 3]) -> 3", "(last [6 9]) -> 9", "(last [7 8 3]) -> 3", "(last [4 8 2 8 1]) -> 1", "(last [8 8 5]) -> 5", "(last [3 2]) -> 2", "(last [3 4 9 9 6]) -> 6", "(last [9 3 7 1]) -> 1", "(last [0 2 9 2]) -> 2", "(last [3 1 1 4]) -> 4", "(last [1 2 9 2 7]) -> 7", "(last [1 9]) -> 9"], "time": 0.02569}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [6 0]) -> 0", "(last [6 2 0 0]) -> 0", "(last [5 1]) -> 1", "(last [8]) -> 8", "(last [7 3 2 4]) -> 4", "(last [4]) -> 4", "(last [3 0]) -> 0", "(last [6 8]) -> 8", "(last [2 0 7 9 2]) -> 2", "(last [1]) -> 1", "(last [8]) -> 8", "(last [4 7 3 3]) -> 3"], "time": 0.024754}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0 8 2]) -> 2", "(last [0]) -> 0", "(last [9 1 1 4 7]) -> 7", "(last [4 2 3 2 4]) -> 4", "(last [5 1 7]) -> 7", "(last [7 6 8 6 1]) -> 1", "(last [1 0]) -> 0", "(last [1 1]) -> 1", "(last [2 8 7]) -> 7", "(last [5 7 5 4 2]) -> 2", "(last [0 6]) -> 6", "(last [3 2 5]) -> 5"], "time": 0.037215}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7 8]) -> 8", "(last [5]) -> 5", "(last [2 8 5]) -> 5", "(last [1 7 8 0 1]) -> 1", "(last [2 2 6]) -> 6", "(last [8 3 6 8]) -> 8", "(last [7 8 8 3 4]) -> 4", "(last [5 9]) -> 9", "(last [1 3 6 7 4]) -> 4", "(last [3]) -> 3", "(last [6 3 9 1 3]) -> 3", "(last [3 8 6]) -> 6"], "time": 0.035867}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1 7 8 3]) -> 3", "(last [2 8]) -> 8", "(last [0 8 1 3 1]) -> 1", "(last [8 3 6 6]) -> 6", "(last [8 2]) -> 2", "(last [3]) -> 3", "(last [6 7 7 1 8]) -> 8", "(last [4 5]) -> 5", "(last [1 2 2 5]) -> 5", "(last [9 2 6 4]) -> 4", "(last [1]) -> 1", "(last [0 6 8]) -> 8"], "time": 0.038199}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [4 2]) -> 2", "(last [4 0]) -> 0", "(last [5 1]) -> 1", "(last [0 2]) -> 2", "(last [7]) -> 7", "(last [3 3]) -> 3", "(last [4 2 5 5 4]) -> 4", "(last [6]) -> 6", "(last [7 3 1 0]) -> 0", "(last [3 3]) -> 3", "(last [1 3 1]) -> 1", "(last [1]) -> 1"], "time": 0.041642}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [4 5 3]) -> 3", "(last [2]) -> 2", "(last [2]) -> 2", "(last [8 5 6 3 2]) -> 2", "(last [5 4 1]) -> 1", "(last [4 6 6 1]) -> 1", "(last [0 4 5 0 5]) -> 5", "(last [9 4]) -> 4", "(last [0 1 9 3]) -> 3", "(last [3 4 1 3 6]) -> 6", "(last [9 4 0 2]) -> 2", "(last [2 0 0 3 3]) -> 3"], "time": 0.029916}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1 7 9 6]) -> 6", "(last [8]) -> 8", "(last [1 3 2]) -> 2", "(last [8 0 8]) -> 8", "(last [3 7 2 3 2]) -> 2", "(last [7 4 3 0]) -> 0", "(last [4 0 1 9]) -> 9", "(last [2 8 6 2 7]) -> 7", "(last [6 1 0]) -> 0", "(last [9 8]) -> 8", "(last [9 9]) -> 9", "(last [9 8 1 1]) -> 1"], "time": 0.028834}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1 8 0]) -> 0", "(last [3 4 3]) -> 3", "(last [6 3]) -> 3", "(last [8 5 6 0 2]) -> 2", "(last [7 9 6]) -> 6", "(last [5 0 4]) -> 4", "(last [3 3]) -> 3", "(last [7 2 2 0]) -> 0", "(last [4 3 3 8 3]) -> 3", "(last [6 9 7]) -> 7", "(last [8 4 9 8 5]) -> 5", "(last [3]) -> 3"], "time": 0.041438}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8 4 1 0 1]) -> 1", "(last [1 5 4 4]) -> 4", "(last [4 5 0 1 2]) -> 2", "(last [4 6 8 3]) -> 3", "(last [8 7 6 1]) -> 1", "(last [8 2 7 2]) -> 2", "(last [1 5]) -> 5", "(last [0 6 5]) -> 5", "(last [5 5]) -> 5", "(last [5 7 2 1 6]) -> 6", "(last [9 9 1 6]) -> 6", "(last [1 8 7 4 9]) -> 9"], "time": 0.026789}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 8 7]) -> 7", "(last [2 6 2 2 2]) -> 2", "(last [2 4 0 0 2]) -> 2", "(last [3 6 5]) -> 5", "(last [2 1 2]) -> 2", "(last [1 1 1]) -> 1", "(last [1]) -> 1", "(last [4 8]) -> 8", "(last [1 2 5 8]) -> 8", "(last [6 6 2 9]) -> 9", "(last [3 7 6 6 3]) -> 3", "(last [8 3]) -> 3"], "time": 0.039295}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2 4 5 2 9]) -> 9", "(last [5 8 1 4 9]) -> 9", "(last [4 8]) -> 8", "(last [4]) -> 4", "(last [4 0 0 4 8]) -> 8", "(last [1]) -> 1", "(last [4]) -> 4", "(last [8 2 6 1 1]) -> 1", "(last [9 3 1 2]) -> 2", "(last [3 7]) -> 7", "(last [1 5 2 4 4]) -> 4", "(last [1 7]) -> 7"], "time": 0.035096}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [3 2 2 9]) -> 9", "(last [7 2 1 6 4]) -> 4", "(last [1 6 4 1]) -> 1", "(last [2 6 8 7 6]) -> 6", "(last [2]) -> 2", "(last [8 1 9 1 8]) -> 8", "(last [6 3 2]) -> 2", "(last [4 5 3 9]) -> 9", "(last [7 3 8 6 7]) -> 7", "(last [5]) -> 5", "(last [4]) -> 4", "(last [1 5 4 8 1]) -> 1"], "time": 0.032281}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [6 3 8 2]) -> 2", "(last [4 8]) -> 8", "(last [9 4]) -> 4", "(last [3 3]) -> 3", "(last [2 0 1 6 1]) -> 1", "(last [5 3 6 4 1]) -> 1", "(last [6]) -> 6", "(last [6]) -> 6", "(last [1 7 9 5]) -> 5", "(last [4 4 4 0]) -> 0", "(last [5]) -> 5", "(last [0 5 0 0 4]) -> 4"], "time": 0.033486}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [4 6 8]) -> 8", "(last [8 4 4 6]) -> 6", "(last [6]) -> 6", "(last [2 1 5 4 7]) -> 7", "(last [8 4 7 1 2]) -> 2", "(last [2 4]) -> 4", "(last [8 0 0]) -> 0", "(last [9 2]) -> 2", "(last [6 9]) -> 9", "(last [0 7 9 4 4]) -> 4", "(last [6]) -> 6", "(last [3 5 4 6 7]) -> 7"], "time": 0.035725}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7 0 1 3]) -> 3", "(last [5 4 7 5 2]) -> 2", "(last [0 9 5]) -> 5", "(last [3 5 9]) -> 9", "(last [8 4 6 9]) -> 9", "(last [0 1 0 3 4]) -> 4", "(last [2 8 2]) -> 2", "(last [0 7 1 2]) -> 2", "(last [9 2 1 5]) -> 5", "(last [3 3 4]) -> 4", "(last [7 7 0 4]) -> 4", "(last [8 7 6 7 9]) -> 9"], "time": 0.042266}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0 4 4]) -> 4", "(last [7 2 9 4]) -> 4", "(last [2 1 7 2 1]) -> 1", "(last [3 9]) -> 9", "(last [3 6 1]) -> 1", "(last [6 1 5 7]) -> 7", "(last [2 7 9]) -> 9", "(last [9 3]) -> 3", "(last [2 5 1]) -> 1", "(last [9 2]) -> 2", "(last [2]) -> 2", "(last [9 4]) -> 4"], "time": 0.031024}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8 6 5 2]) -> 2", "(last [2]) -> 2", "(last [0 2 3 7]) -> 7", "(last [3 7 6]) -> 6", "(last [3]) -> 3", "(last [6 6 8 2]) -> 2", "(last [3 2 5]) -> 5", "(last [6]) -> 6", "(last [0 8 6]) -> 6", "(last [3 1 6]) -> 6", "(last [6 1]) -> 1", "(last [8 7]) -> 7"], "time": 0.035905}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9]) -> 9", "(last [5 6 0 9 2]) -> 2", "(last [8]) -> 8", "(last [8 4 5 4]) -> 4", "(last [8]) -> 8", "(last [1]) -> 1", "(last [2]) -> 2", "(last [0]) -> 0", "(last [7 1 4 1]) -> 1", "(last [0 3 2 2]) -> 2", "(last [1 6]) -> 6", "(last [8 2]) -> 2"], "time": 0.036766}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1 2 1 6]) -> 6", "(last [8 2 5 3]) -> 3", "(last [7]) -> 7", "(last [1]) -> 1", "(last [9]) -> 9", "(last [3 9 1]) -> 1", "(last [6]) -> 6", "(last [9]) -> 9", "(last [4]) -> 4", "(last [4 3]) -> 3", "(last [9 6]) -> 6", "(last [1 6 3 2]) -> 2"], "time": 0.024801}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9 4 2 6]) -> 6", "(last [7 3 6 9 3]) -> 3", "(last [4 0 5 2]) -> 2", "(last [3 0 5 7]) -> 7", "(last [3 4 8]) -> 8", "(last [1 4 4 7 3]) -> 3", "(last [6 9 1]) -> 1", "(last [3 4 3 8 4]) -> 4", "(last [5]) -> 5", "(last [6 3]) -> 3", "(last [4 9]) -> 9", "(last [9 5]) -> 5"], "time": 0.032758}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 1 4 4 1]) -> 1", "(last [7 1 6]) -> 6", "(last [3]) -> 3", "(last [0 4 2 2]) -> 2", "(last [4]) -> 4", "(last [7 7 3]) -> 3", "(last [8]) -> 8", "(last [2 4]) -> 4", "(last [3 2 2 8 2]) -> 2", "(last [3 1]) -> 1", "(last [9 4 4 4]) -> 4", "(last [5 8 7 1 2]) -> 2"], "time": 0.039884}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 0]) -> 0", "(last [0]) -> 0", "(last [1 0 3 8]) -> 8", "(last [6 1 3 9]) -> 9", "(last [0 3 9]) -> 9", "(last [2 4]) -> 4", "(last [2 5]) -> 5", "(last [4]) -> 4", "(last [3 3]) -> 3", "(last [2 7]) -> 7", "(last [4 9 5]) -> 5", "(last [6 0 1 4 3]) -> 3"], "time": 0.025266}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1 7]) -> 7", "(last [7 3 4 3]) -> 3", "(last [2 2 7]) -> 7", "(last [3 2]) -> 2", "(last [1 3 9 5 9]) -> 9", "(last [2 8]) -> 8", "(last [7 4]) -> 4", "(last [2 7 8 3 6]) -> 6", "(last [1 4 3]) -> 3", "(last [0 3]) -> 3", "(last [7]) -> 7", "(last [2 2]) -> 2"], "time": 0.038053}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7 6]) -> 6", "(last [1 0]) -> 0", "(last [7 0 9 4]) -> 4", "(last [2 1 4 5]) -> 5", "(last [2 4 1]) -> 1", "(last [2 2]) -> 2", "(last [9 4 0 6 5]) -> 5", "(last [1 5 6]) -> 6", "(last [6 6 6 0 9]) -> 9", "(last [9 9 1 7]) -> 7", "(last [1 2]) -> 2", "(last [9 6 3 0]) -> 0"], "time": 0.028049}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1 5 0 8 9]) -> 9", "(last [4 2 8 6 8]) -> 8", "(last [1 1 0 4]) -> 4", "(last [9 5 3 4 9]) -> 9", "(last [4 1]) -> 1", "(last [8]) -> 8", "(last [2 0]) -> 0", "(last [7 0 6]) -> 6", "(last [4 7 6 1 2]) -> 2", "(last [0 8]) -> 8", "(last [2 5 3]) -> 3", "(last [2]) -> 2"], "time": 0.038346}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [6 4]) -> 4", "(last [2 2]) -> 2", "(last [7]) -> 7", "(last [9]) -> 9", "(last [4]) -> 4", "(last [5 0 6]) -> 6", "(last [2]) -> 2", "(last [4 4 2 2]) -> 2", "(last [4 3 5 9]) -> 9", "(last [2 0 0 7 5]) -> 5", "(last [8 5 9 6]) -> 6", "(last [3 1 5 9]) -> 9"], "time": 0.02578}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8 4]) -> 4", "(last [8 3]) -> 3", "(last [6 2]) -> 2", "(last [8 3]) -> 3", "(last [8 3 0 3 6]) -> 6", "(last [0]) -> 0", "(last [5 9 1 4]) -> 4", "(last [2 3 5 5]) -> 5", "(last [7 7 9 7]) -> 7", "(last [8 0]) -> 0", "(last [2]) -> 2", "(last [3 3]) -> 3"], "time": 0.045617}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 4]) -> 4", "(last [7]) -> 7", "(last [0 4 4]) -> 4", "(last [6 3 7]) -> 7", "(last [9 3 0]) -> 0", "(last [3 5 0 0]) -> 0", "(last [5]) -> 5", "(last [1]) -> 1", "(last [1]) -> 1", "(last [5 7 6 6]) -> 6", "(last [1 4 8 3]) -> 3", "(last [1]) -> 1"], "time": 0.029735}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2 5]) -> 5", "(last [7]) -> 7", "(last [2]) -> 2", "(last [0 3 3 1 2]) -> 2", "(last [7 0 9]) -> 9", "(last [8 1 5 2 7]) -> 7", "(last [1 1 7 7 4]) -> 4", "(last [5 5 9]) -> 9", "(last [9 0 3 5 0]) -> 0", "(last [3 9 2 6]) -> 6", "(last [5 8]) -> 8", "(last [1 5 4 1]) -> 1"], "time": 0.042669}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 3]) -> 3", "(last [7 1 3 4 5]) -> 5", "(last [8 9 0 5 2]) -> 2", "(last [4 6 8 2 3]) -> 3", "(last [7 2]) -> 2", "(last [4 4 7 3 7]) -> 7", "(last [7]) -> 7", "(last [7 9 3]) -> 3", "(last [8 0 4 7]) -> 7", "(last [0 9 2 7]) -> 7", "(last [3 4]) -> 4", "(last [9]) -> 9"], "time": 0.034968}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [6 9 2 4]) -> 4", "(last [3 2 8 6]) -> 6", "(last [7]) -> 7", "(last [7 1 5 6 3]) -> 3", "(last [9 0]) -> 0", "(last [4 8 7 2 9]) -> 9", "(last [6 2]) -> 2", "(last [5 9 3]) -> 3", "(last [2]) -> 2", "(last [7 4]) -> 4", "(last [1 9]) -> 9", "(last [8]) -> 8"], "time": 0.039383}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2]) -> 2", "(last [0 9]) -> 9", "(last [2 1 2 6 6]) -> 6", "(last [2 4 4]) -> 4", "(last [0 1]) -> 1", "(last [8 0]) -> 0", "(last [0 2 0 0]) -> 0", "(last [0 6]) -> 6", "(last [5]) -> 5", "(last [0 8]) -> 8", "(last [5 2 1]) -> 1", "(last [8 9]) -> 9"], "time": 0.031105}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [6]) -> 6", "(last [5 0 7 2 8]) -> 8", "(last [3 7]) -> 7", "(last [9 3 1]) -> 1", "(last [0 8]) -> 8", "(last [5 2]) -> 2", "(last [7 8 3 2]) -> 2", "(last [4 2 2 5]) -> 5", "(last [9 8 3 3 7]) -> 7", "(last [1]) -> 1", "(last [5 8 0 2 5]) -> 5", "(last [4 2 8 0]) -> 0"], "time": 0.02495}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [6 4 8 7 3]) -> 3", "(last [6]) -> 6", "(last [6 9 4]) -> 4", "(last [5 5]) -> 5", "(last [9]) -> 9", "(last [3 1 4 2]) -> 2", "(last [0 3 5 3]) -> 3", "(last [1]) -> 1", "(last [4 3 2 6]) -> 6", "(last [1 6 0 7]) -> 7", "(last [4]) -> 4", "(last [2 9 0]) -> 0"], "time": 0.027039}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1 7]) -> 7", "(last [8 9 6]) -> 6", "(last [5 9]) -> 9", "(last [2 8 9 3]) -> 3", "(last [9]) -> 9", "(last [2 1 2 3 1]) -> 1", "(last [7 5 9]) -> 9", "(last [7 6 9 6]) -> 6", "(last [6]) -> 6", "(last [2]) -> 2", "(last [3 3 9]) -> 9", "(last [1 0 4]) -> 4"], "time": 0.027501}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [4]) -> 4", "(last [3 4 5 0 7]) -> 7", "(last [7 9 3]) -> 3", "(last [8 5 0]) -> 0", "(last [2]) -> 2", "(last [8 4]) -> 4", "(last [5 8 7 3]) -> 3", "(last [6 9 0 7]) -> 7", "(last [9 2 8 3]) -> 3", "(last [1]) -> 1", "(last [9]) -> 9", "(last [7 6 9 7]) -> 7"], "time": 0.025464}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9 3 7]) -> 7", "(last [2 1]) -> 1", "(last [1 9 4 9]) -> 9", "(last [3 9]) -> 9", "(last [0 3 4]) -> 4", "(last [1 7 1]) -> 1", "(last [0 3 6]) -> 6", "(last [3]) -> 3", "(last [1 2 0 6 2]) -> 2", "(last [7 2 1 4 3]) -> 3", "(last [9 5 7 7]) -> 7", "(last [7 2 3 6]) -> 6"], "time": 0.035475}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1 3]) -> 3", "(last [9 5 8 8 0]) -> 0", "(last [1 5 8 7 3]) -> 3", "(last [4]) -> 4", "(last [0 6 0 3 5]) -> 5", "(last [6 1 4]) -> 4", "(last [0 1 5 3]) -> 3", "(last [1 3 2 3]) -> 3", "(last [0 7 1 9]) -> 9", "(last [1]) -> 1", "(last [7]) -> 7", "(last [6 4 5]) -> 5"], "time": 0.038016}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7]) -> 7", "(last [4 4 5 3]) -> 3", "(last [7]) -> 7", "(last [2 8 8]) -> 8", "(last [3 9 9 0 1]) -> 1", "(last [6 2 9 5]) -> 5", "(last [6 9 6 7 3]) -> 3", "(last [4 4 4]) -> 4", "(last [8]) -> 8", "(last [5 1 9]) -> 9", "(last [7 7 5]) -> 5", "(last [1 0 6]) -> 6"], "time": 0.042998}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 0 3]) -> 3", "(last [4 1 6 9]) -> 9", "(last [0]) -> 0", "(last [6 5 7]) -> 7", "(last [8]) -> 8", "(last [3 2 0 6]) -> 6", "(last [1 8 4 1 7]) -> 7", "(last [7]) -> 7", "(last [3 4 5 3]) -> 3", "(last [5 0]) -> 0", "(last [4 6 6]) -> 6", "(last [6 2 2]) -> 2"], "time": 0.025903}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9 5 9 0 4]) -> 4", "(last [1 1 2 2]) -> 2", "(last [8 0]) -> 0", "(last [5 3 9]) -> 9", "(last [9 0 4 0 2]) -> 2", "(last [8 2 4 3 0]) -> 0", "(last [7 1 9]) -> 9", "(last [6 4]) -> 4", "(last [8 2 3 2]) -> 2", "(last [0]) -> 0", "(last [6 7 2 2 0]) -> 0", "(last [7 3 4]) -> 4"], "time": 0.033279}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [4 8 5]) -> 5", "(last [1 9 4 8 6]) -> 6", "(last [1]) -> 1", "(last [4 6 8 2]) -> 2", "(last [0 1 4 9 6]) -> 6", "(last [9 7 0 2 7]) -> 7", "(last [7 6 0]) -> 0", "(last [5 8 8 9]) -> 9", "(last [6 9 0]) -> 0", "(last [9 6 2 4]) -> 4", "(last [3]) -> 3", "(last [4 7 4 2 8]) -> 8"], "time": 0.036131}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0 0 3 1 6]) -> 6", "(last [7 3]) -> 3", "(last [7]) -> 7", "(last [6 5]) -> 5", "(last [9 9 0]) -> 0", "(last [9 4]) -> 4", "(last [4 0 0]) -> 0", "(last [7 4 9]) -> 9", "(last [4]) -> 4", "(last [9 1 6 2 4]) -> 4", "(last [9 7]) -> 7", "(last [4]) -> 4"], "time": 0.026684}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9 4 1 7]) -> 7", "(last [5]) -> 5", "(last [1 9 0 0]) -> 0", "(last [0 3 6 5]) -> 5", "(last [7 0 0 6 4]) -> 4", "(last [3 0 0 1]) -> 1", "(last [3]) -> 3", "(last [2]) -> 2", "(last [3 0 0]) -> 0", "(last [8 3 1]) -> 1", "(last [4 6]) -> 6", "(last [8 2 1]) -> 1"], "time": 0.02534}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8 5]) -> 5", "(last [9 8 2]) -> 2", "(last [9 0 3 4]) -> 4", "(last [0 1 6 7]) -> 7", "(last [3 3]) -> 3", "(last [1 7]) -> 7", "(last [0 3 8]) -> 8", "(last [3 4 8 7 0]) -> 0", "(last [4 4 8 6 8]) -> 8", "(last [9 4 3]) -> 3", "(last [6 0 8]) -> 8", "(last [5 4 3 8 9]) -> 9"], "time": 0.025412}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5]) -> 5", "(last [3 3 1]) -> 1", "(last [8 8 4 5]) -> 5", "(last [4 3 4 6 9]) -> 9", "(last [0 2]) -> 2", "(last [1 8 8 6 3]) -> 3", "(last [2 7 3 6 1]) -> 1", "(last [4 3 3 1 9]) -> 9", "(last [7]) -> 7", "(last [8 8 4]) -> 4", "(last [7 5 0 1]) -> 1", "(last [7 5]) -> 5"], "time": 0.025295}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8 0 7 0]) -> 0", "(last [1 9 1 8 6]) -> 6", "(last [5 7 9 7 8]) -> 8", "(last [2]) -> 2", "(last [6]) -> 6", "(last [4 3 0 1 4]) -> 4", "(last [7]) -> 7", "(last [2 2 8]) -> 8", "(last [1 2 2]) -> 2", "(last [4 7 8 6]) -> 6", "(last [2 0]) -> 0", "(last [1 5 2]) -> 2"], "time": 0.026252}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0 6 1 1 8]) -> 8", "(last [8 6 7 4]) -> 4", "(last [4 6 7 7]) -> 7", "(last [4 3 7 8]) -> 8", "(last [8 5 7]) -> 7", "(last [9]) -> 9", "(last [2 5]) -> 5", "(last [5 3 1 8 1]) -> 1", "(last [8 2]) -> 2", "(last [8 0 8 3 4]) -> 4", "(last [9 3 6 5]) -> 5", "(last [9 1 8 4 1]) -> 1"], "time": 0.025246}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7 4 2 9]) -> 9", "(last [3 3 5 2 4]) -> 4", "(last [2 9 6 2 0]) -> 0", "(last [1]) -> 1", "(last [6 2 1 3]) -> 3", "(last [0 0 5]) -> 5", "(last [9 2 7 7 0]) -> 0", "(last [1 0 2]) -> 2", "(last [3 1 9 1]) -> 1", "(last [6 5 2 1]) -> 1", "(last [6 4 3]) -> 3", "(last [5 3 7 3 1]) -> 1"], "time": 0.026549}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0 5 0]) -> 0", "(last [6 0 6]) -> 6", "(last [6]) -> 6", "(last [5 5 7 4]) -> 4", "(last [5 9 3 2 5]) -> 5", "(last [3 4]) -> 4", "(last [4 3 1 2]) -> 2", "(last [8 5 0 6 4]) -> 4", "(last [6 9 0]) -> 0", "(last [6 2 0 9]) -> 9", "(last [7 2 8 3 0]) -> 0", "(last [9 3 3 6]) -> 6"], "time": 0.025447}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8 9]) -> 9", "(last [4 7 8 1]) -> 1", "(last [1 0 7 4 3]) -> 3", "(last [1 2 5 4 6]) -> 6", "(last [1 5 2 8 8]) -> 8", "(last [8]) -> 8", "(last [2 4 3 6]) -> 6", "(last [6 7 0]) -> 0", "(last [5 7 6 6]) -> 6", "(last [5 4 6 0]) -> 0", "(last [5]) -> 5", "(last [0 0 5 2 7]) -> 7"], "time": 0.02495}
