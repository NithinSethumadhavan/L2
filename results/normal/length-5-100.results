{"name": "length", "examples": ["(length []) -> 0", "(length [3 4 9 8]) -> 4", "(length []) -> 0", "(length [8 5 6 6]) -> 4"], "time": 0.03574, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1 3 3]) -> 3", "(length [6 0 7 9 1]) -> 5", "(length [2]) -> 1"], "time": 0.032172, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 9 7 7 7]) -> 5", "(length []) -> 0", "(length []) -> 0"], "time": 0.037055, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7]) -> 1", "(length [0]) -> 1", "(length [6]) -> 1"], "time": 0.034665, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) 1) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 1 6 0 2]) -> 5", "(length [8]) -> 1", "(length []) -> 0"], "time": 0.035676, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 8 4]) -> 3", "(length []) -> 0", "(length [8 3 6]) -> 3"], "time": 0.042002, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [3 2 2]) -> 3", "(length [9 7 4 1]) -> 4"], "time": 0.043893, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7 3]) -> 2", "(length [1 5 1 0]) -> 4", "(length [3 6 7 7]) -> 4"], "time": 0.034919, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0]) -> 1", "(length [0 6 1 3 6]) -> 5", "(length [4 5]) -> 2"], "time": 0.035655, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1]) -> 1", "(length [0 8 7]) -> 3", "(length [8 1]) -> 2"], "time": 0.034274, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 2 5]) -> 3", "(length [4 6 0 4 8]) -> 5", "(length [2 9]) -> 2"], "time": 0.033506, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8 4 8 7 1]) -> 5", "(length [9 9 5 5 0]) -> 5", "(length [9 3]) -> 2"], "time": 0.037961, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9]) -> 1", "(length [1]) -> 1", "(length [1 7 0]) -> 3"], "time": 0.0333, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1 0 6 5 0]) -> 5", "(length []) -> 0", "(length [2 4]) -> 2"], "time": 0.037319, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6 0 8]) -> 3", "(length [7 4 1 3 6]) -> 5", "(length [8]) -> 1"], "time": 0.033423, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 4 8 8]) -> 4", "(length [7 8]) -> 2", "(length [0 5]) -> 2"], "time": 0.029426, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7]) -> 1", "(length [7 6 3 5 5]) -> 5", "(length [3 3 5 1]) -> 4"], "time": 0.029473, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 3 7]) -> 3", "(length [6 5 5]) -> 3", "(length [2 9 6 1 7]) -> 5"], "time": 0.044701, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [0 5 1 3]) -> 4", "(length [6 5 5 5]) -> 4"], "time": 0.0323, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [2 0 1 9]) -> 4", "(length [1 8]) -> 2", "(length [0 5 6 4]) -> 4"], "time": 0.0403, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 5 5 1]) -> 4", "(length []) -> 0", "(length [2 8 3 4 3]) -> 5"], "time": 0.035174, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6]) -> 1", "(length [0 3 2]) -> 3", "(length []) -> 0"], "time": 0.044682, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 2 4]) -> 3", "(length [0 1]) -> 2", "(length []) -> 0"], "time": 0.046586, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8 2]) -> 2", "(length [5 7]) -> 2", "(length [9 3 2 0 3]) -> 5"], "time": 0.03749, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6 9]) -> 2", "(length []) -> 0", "(length []) -> 0"], "time": 0.037024, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 1)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 9 3]) -> 3", "(length [5 0 8 5 6]) -> 5", "(length [2 5]) -> 2"], "time": 0.030151, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (car b)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 8 9]) -> 3", "(length []) -> 0", "(length [6]) -> 1"], "time": 0.036154, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 8 5 6]) -> 4", "(length []) -> 0", "(length [9]) -> 1"], "time": 0.040737, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 9 4]) -> 3", "(length [9]) -> 1", "(length [6 5 2 5]) -> 4"], "time": 0.032003, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7 1]) -> 2", "(length [7 6 4 8 7]) -> 5", "(length [1 7 3]) -> 3"], "time": 0.030553, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 9 5]) -> 3", "(length [7]) -> 1", "(length []) -> 0"], "time": 0.02952, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [7]) -> 1", "(length [1]) -> 1"], "time": 0.038754, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) 1) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [2]) -> 1", "(length [1 2]) -> 2", "(length [3 1 2]) -> 3"], "time": 0.049579, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 0]) -> 2", "(length [2 4]) -> 2", "(length []) -> 0"], "time": 0.046472, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 1)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 0 8]) -> 3", "(length [7]) -> 1", "(length []) -> 0"], "time": 0.036481, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 2 8 5]) -> 4", "(length [6]) -> 1", "(length [4]) -> 1"], "time": 0.034571, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1 5 8 0 8]) -> 5", "(length [8 6 1 8 8]) -> 5", "(length [4 1 8 7 9]) -> 5"], "time": 0.031827, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 4 6 9]) -> 4", "(length [4]) -> 1", "(length [8 7 4]) -> 3"], "time": 0.030745, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [4 1]) -> 2", "(length []) -> 0"], "time": 0.035086, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 1)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [3 1 4 2]) -> 4", "(length [8 8]) -> 2"], "time": 0.052135, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1 7 7 7 8]) -> 5", "(length [5 6]) -> 2", "(length [9 6 2 1 9]) -> 5"], "time": 0.029733, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [7 1 0]) -> 3"], "time": 0.032456, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5]) -> 1", "(length [5]) -> 1", "(length [8 2 9 0]) -> 4"], "time": 0.033276, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5]) -> 1", "(length [5]) -> 1", "(length [8 1 4 0]) -> 4"], "time": 0.037658, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1 9 7 2]) -> 4", "(length [9 1 7]) -> 3", "(length [7]) -> 1"], "time": 0.035163, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [2 4 5 4]) -> 4", "(length [0 0 9 1]) -> 4", "(length []) -> 0"], "time": 0.02943, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 9 4]) -> 3", "(length []) -> 0", "(length [7]) -> 1"], "time": 0.044936, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 6 8]) -> 3", "(length [8 7 2]) -> 3", "(length [8 5 0]) -> 3"], "time": 0.040214, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [1 4 5 0 9]) -> 5", "(length [9 3 2 4 5]) -> 5"], "time": 0.033125, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7]) -> 1", "(length [1 4]) -> 2", "(length [9 9 1 3 0]) -> 5"], "time": 0.044795, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7 6]) -> 2", "(length [3]) -> 1", "(length [0 9 9 1]) -> 4"], "time": 0.043358, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 0]) -> 2", "(length [8 5 9]) -> 3", "(length [8 5]) -> 2"], "time": 0.030151, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [2 2 7 8]) -> 4", "(length []) -> 0", "(length [0 3]) -> 2"], "time": 0.035319, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [6 8 3 3]) -> 4", "(length []) -> 0"], "time": 0.031495, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 6 5 0 9]) -> 5", "(length [3 4]) -> 2", "(length [9 2 8]) -> 3"], "time": 0.043055, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 9 7 1]) -> 4", "(length [8 7 8 5 8]) -> 5", "(length [8 4 7 4 9]) -> 5"], "time": 0.03522, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 4 1]) -> 3", "(length [2 6]) -> 2", "(length [1 3]) -> 2"], "time": 0.043393, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 5 6 9]) -> 4", "(length [5 9 5 9]) -> 4", "(length [3 9 1]) -> 3"], "time": 0.042489, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8 1 7]) -> 3", "(length [4]) -> 1", "(length []) -> 0"], "time": 0.031478, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 0 7 8 2]) -> 5", "(length [3]) -> 1", "(length [9 7 4 0]) -> 4"], "time": 0.039265, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6 0 8 0 6]) -> 5", "(length [5 0 3]) -> 3", "(length [2]) -> 1"], "time": 0.04021, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3]) -> 1", "(length [4 7 0 0 2]) -> 5", "(length [3 5 3 9]) -> 4"], "time": 0.032711, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6 9]) -> 2", "(length [9 5 5 5 0]) -> 5", "(length [7 7 5 7 9]) -> 5"], "time": 0.044062, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1 8 5]) -> 3", "(length [8]) -> 1", "(length [3]) -> 1"], "time": 0.033111, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 3 5 1]) -> 4", "(length [8 5 7 3 9]) -> 5", "(length [3]) -> 1"], "time": 0.042783, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [3]) -> 1", "(length [2 5 1 8 1]) -> 5"], "time": 0.048673, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [2 7 7 5]) -> 4", "(length []) -> 0"], "time": 0.029557, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 7 6 1]) -> 4", "(length [1 9 8]) -> 3", "(length [3]) -> 1"], "time": 0.037063, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [1 0 3 4]) -> 4", "(length [1 7]) -> 2"], "time": 0.031828, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1 1]) -> 2", "(length [8 9 9 3]) -> 4", "(length [0 9 7 1]) -> 4"], "time": 0.029765, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5]) -> 1", "(length [6]) -> 1", "(length []) -> 0"], "time": 0.026082, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) 1) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [6 8]) -> 2", "(length [4]) -> 1"], "time": 0.044025, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6]) -> 1", "(length [8 3 3 5]) -> 4", "(length [3 0 4 3]) -> 4"], "time": 0.030976, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [4 9 3 5]) -> 4", "(length [7 1]) -> 2"], "time": 0.048427, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [3 0 7 5]) -> 4", "(length [0 3]) -> 2"], "time": 0.032212, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [4]) -> 1", "(length [9 8 8 9 5]) -> 5"], "time": 0.0468, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7 5]) -> 2", "(length [0 5 3 8 1]) -> 5", "(length [7 6]) -> 2"], "time": 0.047863, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 8 1]) -> 3", "(length [7 9 7 9 7]) -> 5", "(length []) -> 0"], "time": 0.046613, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [4]) -> 1", "(length [2 8 2 3]) -> 4"], "time": 0.035248, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1]) -> 1", "(length []) -> 0", "(length [6 0]) -> 2"], "time": 0.044316, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [2 1 0]) -> 3", "(length [9 3 5]) -> 3", "(length [6 2 5 4]) -> 4"], "time": 0.028856, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1]) -> 1", "(length [2 9 9 4 4]) -> 5", "(length [1 5 3 8]) -> 4"], "time": 0.045232, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8 9 4 2 3]) -> 5", "(length [7 8 8 9 8]) -> 5", "(length [7]) -> 1"], "time": 0.047303, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7]) -> 1", "(length [6 3 3]) -> 3", "(length [0 6 0 5 4]) -> 5"], "time": 0.050419, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5]) -> 1", "(length [0 1 3 0]) -> 4", "(length [7]) -> 1"], "time": 0.029313, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 2]) -> 2", "(length [0 1 5 7]) -> 4", "(length [4 4 8 3 1]) -> 5"], "time": 0.029878, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7 3]) -> 2", "(length [9 4 6 4]) -> 4", "(length [8]) -> 1"], "time": 0.030451, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 5 2 0 3]) -> 5", "(length [1 1 4]) -> 3", "(length [0 7 9 4 0]) -> 5"], "time": 0.031094, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 9]) -> 2", "(length [3 2]) -> 2", "(length [1]) -> 1"], "time": 0.032733, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [2 5 2 4]) -> 4", "(length [2 7 9]) -> 3", "(length [0 6 2]) -> 3"], "time": 0.046253, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [7]) -> 1"], "time": 0.038949, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) 1) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7 7 9 3 7]) -> 5", "(length [7 4 4 7]) -> 4", "(length [0 0 2 7]) -> 4"], "time": 0.043828, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 4]) -> 2", "(length []) -> 0", "(length [1 3 4 8 3]) -> 5"], "time": 0.041386, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [5 2 0 8 9]) -> 5", "(length [9 0 2 4]) -> 4"], "time": 0.030411, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1 9]) -> 2", "(length [3 9 9 4 8]) -> 5", "(length [3 9 4]) -> 3"], "time": 0.035798, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 4 9 3]) -> 4", "(length []) -> 0", "(length [7 3 4 8 0]) -> 5"], "time": 0.030362, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8 6 0]) -> 3", "(length [8 7 3 6 6]) -> 5", "(length []) -> 0"], "time": 0.029002, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8 5 8 6]) -> 4", "(length [7 5 9]) -> 3", "(length [2 9 6]) -> 3"], "time": 0.028935, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6 9]) -> 2", "(length [6 2 2]) -> 3", "(length [2]) -> 1"], "time": 0.027985, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [1 8 8]) -> 3", "(length [9 1 8 3 6]) -> 5"], "time": 0.028833, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
