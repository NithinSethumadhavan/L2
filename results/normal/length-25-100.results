{"name": "length", "examples": ["(length []) -> 0", "(length [4 1 0]) -> 3", "(length [8]) -> 1", "(length []) -> 0", "(length [3 2]) -> 2", "(length [3 3 8]) -> 3", "(length []) -> 0", "(length [7 2 9]) -> 3", "(length [2 0]) -> 2", "(length [9 3]) -> 2", "(length [9 0 7 8 2]) -> 5", "(length []) -> 0", "(length [1 6 8]) -> 3", "(length [2 1 6 1]) -> 4", "(length [8]) -> 1", "(length [0 3]) -> 2", "(length [3 8 9 6]) -> 4", "(length [0 0]) -> 2", "(length [9 4 5]) -> 3", "(length [2 7]) -> 2", "(length [8 5 8 8 5]) -> 5", "(length [8 9]) -> 2", "(length [9 4 8]) -> 3", "(length [5 2 6 0 4]) -> 5"], "time": 0.032012, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 7 8 4]) -> 4", "(length [4]) -> 1", "(length [1 1 2]) -> 3", "(length [5 4]) -> 2", "(length [6 4 0 0]) -> 4", "(length [2 9 0 2 7]) -> 5", "(length [0 5 9]) -> 3", "(length [0 1 6 5 2]) -> 5", "(length [9 9 9]) -> 3", "(length [9]) -> 1", "(length [2]) -> 1", "(length [8]) -> 1", "(length []) -> 0", "(length [1 6 6 5]) -> 4", "(length [2 1 8 0]) -> 4", "(length [9]) -> 1", "(length [2]) -> 1", "(length [5 1 0 2 3]) -> 5", "(length [4 3 0]) -> 3", "(length []) -> 0", "(length [8 0 6 0]) -> 4", "(length [9 8 4 8]) -> 4", "(length [9 5 4]) -> 3"], "time": 0.035889, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [1 1 5 9]) -> 4", "(length [7 6 4 0 5]) -> 5", "(length [3 8 4]) -> 3", "(length [2]) -> 1", "(length [3 0 6]) -> 3", "(length []) -> 0", "(length [9]) -> 1", "(length [6 3 9 0 9]) -> 5", "(length [8 3 4 8 8]) -> 5", "(length [4 9 7]) -> 3", "(length [9 8 6 0]) -> 4", "(length [9]) -> 1", "(length [9 7 3 5 9]) -> 5", "(length [4]) -> 1", "(length [5 0 6]) -> 3", "(length [1 7 0 5]) -> 4", "(length [8 6 2]) -> 3", "(length [7]) -> 1", "(length [0 4 7 4]) -> 4", "(length [7 9 4 5 9]) -> 5", "(length [0 3 7 6]) -> 4", "(length [7]) -> 1"], "time": 0.035442, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8 5]) -> 2", "(length []) -> 0", "(length [0]) -> 1", "(length [5 2 8]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [4 5 3 6]) -> 4", "(length [2 3 3 0]) -> 4", "(length [5 2 0]) -> 3", "(length [0 2 5 9]) -> 4", "(length [4]) -> 1", "(length [3 7 6]) -> 3", "(length []) -> 0", "(length [5 6]) -> 2", "(length [2 3 1 3]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length [2]) -> 1", "(length [5 5 4 4 3]) -> 5", "(length [2]) -> 1", "(length [7 0 7 5 8]) -> 5", "(length [6 6]) -> 2"], "time": 0.037977, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 9 4 5]) -> 4", "(length [0 6 2 3 8]) -> 5", "(length []) -> 0", "(length [5 7 3 1 4]) -> 5", "(length [1 0 6 7 6]) -> 5", "(length [4 6 1 4 0]) -> 5", "(length [3 1 9 8 3]) -> 5", "(length [7 4 3 6]) -> 4", "(length [0 4]) -> 2", "(length [3 2]) -> 2", "(length [1]) -> 1", "(length []) -> 0", "(length [4 6 0 2]) -> 4", "(length [3 4]) -> 2", "(length []) -> 0", "(length [5 5 3 1 4]) -> 5", "(length [0]) -> 1", "(length [7 7 3 8 8]) -> 5", "(length []) -> 0", "(length [2 9]) -> 2", "(length [9 2 9 6 6]) -> 5", "(length [7 3 9]) -> 3", "(length [7 3 9 9]) -> 4"], "time": 0.054725, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 9]) -> 2", "(length [1 1]) -> 2", "(length [2 9 5 4 4]) -> 5", "(length [1]) -> 1", "(length [5]) -> 1", "(length [3 7 9 3]) -> 4", "(length [3 5 2]) -> 3", "(length [8 6 0 2]) -> 4", "(length [4]) -> 1", "(length [2 6 8]) -> 3", "(length [1 4 9 5]) -> 4", "(length []) -> 0", "(length [7 0]) -> 2", "(length [6 1 5]) -> 3", "(length [6 4]) -> 2", "(length [6]) -> 1", "(length [6]) -> 1", "(length [7 3 0 5 6]) -> 5", "(length [1 5 2 5]) -> 4", "(length [0 7]) -> 2", "(length [6 1]) -> 2", "(length [7 3 1]) -> 3", "(length [0 4 8 3]) -> 4"], "time": 0.045532, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 1 4]) -> 3", "(length [5 6 9 7]) -> 4", "(length [9 2]) -> 2", "(length [5 2]) -> 2", "(length [4 4 6 2 5]) -> 5", "(length [8 7 8 1]) -> 4", "(length [7 3]) -> 2", "(length [5 7 0 3]) -> 4", "(length [1 8 1 6]) -> 4", "(length [0 9 5]) -> 3", "(length [0 4]) -> 2", "(length [3 6 1 4]) -> 4", "(length [1 1 6 0 6]) -> 5", "(length [6]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [2 5 5 9 9]) -> 5", "(length [0 5 1]) -> 3", "(length [3 6 8]) -> 3", "(length [8 2 3 6 4]) -> 5", "(length [6 5 7 5 8]) -> 5", "(length [2 3]) -> 2", "(length [4]) -> 1"], "time": 0.033009, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 6 4]) -> 3", "(length [1 7 5 5]) -> 4", "(length [5 5]) -> 2", "(length [9 9 2]) -> 3", "(length [9 4 1]) -> 3", "(length [5 8 0]) -> 3", "(length [3 6 6 0]) -> 4", "(length [8 0 9 8 0]) -> 5", "(length [8]) -> 1", "(length [6 8]) -> 2", "(length [6 2]) -> 2", "(length [4 9]) -> 2", "(length [4 1 0 6]) -> 4", "(length [9 6 4 6 7]) -> 5", "(length [2]) -> 1", "(length [4 5 2 4 7]) -> 5", "(length [8 8 5]) -> 3", "(length [5]) -> 1", "(length [7]) -> 1", "(length [4 8 5]) -> 3", "(length [0 0]) -> 2", "(length [9 2 8 6]) -> 4", "(length []) -> 0"], "time": 0.051816, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9]) -> 1", "(length [1 8 5 7 7]) -> 5", "(length [7 2]) -> 2", "(length [5 3]) -> 2", "(length [1 0]) -> 2", "(length []) -> 0", "(length [8 9 5 2 6]) -> 5", "(length [9 9 7 7 7]) -> 5", "(length [3 2 0 9]) -> 4", "(length [8 4]) -> 2", "(length [7 7]) -> 2", "(length [8 7]) -> 2", "(length [0 8]) -> 2", "(length [8]) -> 1", "(length [1]) -> 1", "(length [9 7 6 3]) -> 4", "(length [8 6 8 7 3]) -> 5", "(length []) -> 0", "(length [7 1 8]) -> 3", "(length [1 7 4 4]) -> 4", "(length [3 6 1]) -> 3", "(length []) -> 0", "(length [0]) -> 1"], "time": 0.051476, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [2]) -> 1", "(length [9 5 1 2]) -> 4", "(length [0 3 8 1]) -> 4", "(length [0 9 7]) -> 3", "(length [4 6 6 1 3]) -> 5", "(length [0 0 4 5]) -> 4", "(length [6]) -> 1", "(length []) -> 0", "(length [5 6]) -> 2", "(length [6]) -> 1", "(length [0 2]) -> 2", "(length [8 8 6]) -> 3", "(length [5 2 6 7]) -> 4", "(length [1 3 7 5 3]) -> 5", "(length [3]) -> 1", "(length [1 6]) -> 2", "(length [3 1 0]) -> 3", "(length [0 5 3 6 9]) -> 5", "(length [1 5 8 5]) -> 4", "(length [3 7]) -> 2", "(length [9 4]) -> 2", "(length []) -> 0"], "time": 0.04741, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 7 3]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [8 1]) -> 2", "(length [9 2]) -> 2", "(length []) -> 0", "(length [1]) -> 1", "(length [6 3 1]) -> 3", "(length [8]) -> 1", "(length [8 5 2 8 1]) -> 5", "(length [4 8 8 0]) -> 4", "(length [8 5 1 2]) -> 4", "(length [9 9 8 5 8]) -> 5", "(length [6 0 5 0 9]) -> 5", "(length [4]) -> 1", "(length [2]) -> 1", "(length [3 5 7]) -> 3", "(length [3 6]) -> 2", "(length [6]) -> 1", "(length [7 5 0 9 2]) -> 5", "(length [0 1 1 8 5]) -> 5", "(length [3 7 0 9]) -> 4", "(length [6 4 3]) -> 3"], "time": 0.038834, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 0]) -> 2", "(length [7 7 2]) -> 3", "(length [3 5 9 3]) -> 4", "(length [8 2 7]) -> 3", "(length []) -> 0", "(length [5 3 4 7]) -> 4", "(length [7 1 9]) -> 3", "(length []) -> 0", "(length [9 3 3]) -> 3", "(length [7 6 0]) -> 3", "(length [3 7]) -> 2", "(length [5 2 1 2 4]) -> 5", "(length []) -> 0", "(length [8 3 7 8]) -> 4", "(length [0 4]) -> 2", "(length [1 3 1 7 8]) -> 5", "(length [4 5]) -> 2", "(length [2 5]) -> 2", "(length [8 2 8]) -> 3", "(length [8 9 6 7]) -> 4", "(length [9 0 6]) -> 3", "(length [7 5 8 6]) -> 4", "(length []) -> 0"], "time": 0.050224, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [1 3 5 8 1]) -> 5", "(length [5 0 7 2 5]) -> 5", "(length [3]) -> 1", "(length [2 1]) -> 2", "(length []) -> 0", "(length [3 4 8]) -> 3", "(length [2 6 8 1 0]) -> 5", "(length [3 0 3 8 5]) -> 5", "(length [0 2 3 8 0]) -> 5", "(length [5 8 2]) -> 3", "(length [3 9]) -> 2", "(length [4]) -> 1", "(length [5 2 5 5 2]) -> 5", "(length [4 6 9 0 6]) -> 5", "(length [6 5 2 3 8]) -> 5", "(length [5 8]) -> 2", "(length [2 1 3]) -> 3", "(length [1]) -> 1", "(length [6 5]) -> 2", "(length [2 7 2]) -> 3", "(length [9 1 7]) -> 3"], "time": 0.056766, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7 5 4]) -> 3", "(length [9]) -> 1", "(length [3 6]) -> 2", "(length [7 0 6]) -> 3", "(length [7 1 5 7]) -> 4", "(length [8 2]) -> 2", "(length [5 6 2]) -> 3", "(length [6 2 0 2 9]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [3 8 3 5 8]) -> 5", "(length []) -> 0", "(length [0 0 8 3]) -> 4", "(length [1 6 9 6 4]) -> 5", "(length [1 0]) -> 2", "(length [4 5 2 7 9]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [0 7]) -> 2", "(length [7]) -> 1", "(length [6 6]) -> 2", "(length [2 6 5 6 8]) -> 5", "(length [4 7 5 8]) -> 4"], "time": 0.034358, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [5 8 0]) -> 3", "(length [5]) -> 1", "(length []) -> 0", "(length [4 8 6 2]) -> 4", "(length [2 4 2 3]) -> 4", "(length [1 1]) -> 2", "(length [3]) -> 1", "(length [7 1]) -> 2", "(length [6 2 5 8 8]) -> 5", "(length [9 9]) -> 2", "(length [7 0 8 1]) -> 4", "(length [5 2 4 1 5]) -> 5", "(length [1]) -> 1", "(length [4]) -> 1", "(length [6 2 7 5]) -> 4", "(length [2 4 7 6]) -> 4", "(length []) -> 0", "(length [9 3]) -> 2", "(length [4 1]) -> 2", "(length [2]) -> 1", "(length [1 7]) -> 2", "(length [5]) -> 1"], "time": 0.043778, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 7 9 5]) -> 4", "(length [0]) -> 1", "(length [5]) -> 1", "(length [5 7 2]) -> 3", "(length [7 5 9 8]) -> 4", "(length [6 0]) -> 2", "(length [7 2 6 9 7]) -> 5", "(length [3 2]) -> 2", "(length []) -> 0", "(length [4 8]) -> 2", "(length [7 1]) -> 2", "(length [9 1 6 8 0]) -> 5", "(length [4 9]) -> 2", "(length [0 1]) -> 2", "(length [5]) -> 1", "(length [0 9]) -> 2", "(length [4 1 6]) -> 3", "(length [8 4 5 6]) -> 4", "(length [3 4]) -> 2", "(length [1 5 4 8 7]) -> 5", "(length [4]) -> 1", "(length [9 6 0]) -> 3", "(length [9 4 8]) -> 3"], "time": 0.03137, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 9 8]) -> 3", "(length [4]) -> 1", "(length [8 6]) -> 2", "(length [8 4 9 8 9]) -> 5", "(length [3]) -> 1", "(length [0 4 5 4 3]) -> 5", "(length [0 8 8 3]) -> 4", "(length [4 2 9 2 5]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [7 5 0]) -> 3", "(length [5]) -> 1", "(length []) -> 0", "(length [5 7]) -> 2", "(length [3 4]) -> 2", "(length [6 2 2 7]) -> 4", "(length [5]) -> 1", "(length [8 5 3]) -> 3", "(length [3 6]) -> 2", "(length [6 5 9 6]) -> 4", "(length [0]) -> 1", "(length [0 6]) -> 2"], "time": 0.040741, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7 2 1 3 3]) -> 5", "(length [6 8]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [0 8]) -> 2", "(length []) -> 0", "(length [8 9 5]) -> 3", "(length [4 6 5 5]) -> 4", "(length []) -> 0", "(length [0 5 8 5]) -> 4", "(length []) -> 0", "(length [0 3 1 9]) -> 4", "(length [2 0]) -> 2", "(length [1 1]) -> 2", "(length [6 4 2]) -> 3", "(length [7 1 7]) -> 3", "(length [6]) -> 1", "(length []) -> 0", "(length [3 2 7]) -> 3", "(length [3 2 4 5 0]) -> 5", "(length [3 6 2]) -> 3", "(length [2 2 1 0]) -> 4", "(length []) -> 0"], "time": 0.037876, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6 7]) -> 2", "(length [6]) -> 1", "(length [5 0 7 2 5]) -> 5", "(length [1 9 5]) -> 3", "(length [1 5 6 1]) -> 4", "(length [8 0 7 2 3]) -> 5", "(length [8 3 0 8]) -> 4", "(length [2 2 7 9 6]) -> 5", "(length [4 2 9]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [2]) -> 1", "(length [3 8 2]) -> 3", "(length [7 6]) -> 2", "(length [9]) -> 1", "(length [4 3]) -> 2", "(length [4 3 9]) -> 3", "(length [1 7 1 5]) -> 4", "(length [3 0 6 5]) -> 4", "(length [5 9 9 3 5]) -> 5", "(length [6 0 0 3 8]) -> 5", "(length []) -> 0", "(length [1]) -> 1"], "time": 0.031421, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 5]) -> 2", "(length [8 2 4]) -> 3", "(length [2]) -> 1", "(length [4]) -> 1", "(length [7]) -> 1", "(length [8 9 1 8]) -> 4", "(length [5]) -> 1", "(length [9 1 1 9]) -> 4", "(length [7 3 1 0 5]) -> 5", "(length [8 1]) -> 2", "(length [8 5]) -> 2", "(length [9 4 8]) -> 3", "(length [4]) -> 1", "(length [9]) -> 1", "(length [8 4 8 3 9]) -> 5", "(length [0 8 6]) -> 3", "(length [9 4 8 0 2]) -> 5", "(length [7]) -> 1", "(length [8 5]) -> 2", "(length [6]) -> 1", "(length [6 8 4 0]) -> 4", "(length []) -> 0", "(length [8 8]) -> 2"], "time": 0.050324, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 5 1]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [4 7 9 2]) -> 4", "(length [7 0 3 0 1]) -> 5", "(length [8]) -> 1", "(length [8 3 3 8 1]) -> 5", "(length [2 5 0 9]) -> 4", "(length [0 9]) -> 2", "(length [8]) -> 1", "(length [2 9 1 9 6]) -> 5", "(length [7 5 9]) -> 3", "(length [6 7 8]) -> 3", "(length [8 8 8 1]) -> 4", "(length [1 5]) -> 2", "(length [1 5 5 5]) -> 4", "(length [5 4 6 5]) -> 4", "(length [9 0]) -> 2", "(length []) -> 0", "(length [9 1]) -> 2", "(length []) -> 0", "(length [6 6]) -> 2", "(length [4 8]) -> 2"], "time": 0.042835, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [8 9]) -> 2", "(length []) -> 0", "(length [0 4 7]) -> 3", "(length [7 0]) -> 2", "(length [9]) -> 1", "(length [5 4 2]) -> 3", "(length [6 1]) -> 2", "(length [0 2 5 2]) -> 4", "(length []) -> 0", "(length [5 3 9 0]) -> 4", "(length [8 8]) -> 2", "(length [9 8 7 0 9]) -> 5", "(length [6 2 9 0 0]) -> 5", "(length []) -> 0", "(length [8 8 3 6]) -> 4", "(length []) -> 0", "(length [6]) -> 1", "(length []) -> 0", "(length [5 8 2 9 0]) -> 5", "(length [5 2 6 6 8]) -> 5", "(length [2]) -> 1", "(length [8 4 9 2 3]) -> 5"], "time": 0.039075, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 7 1]) -> 3", "(length [0 6 3 8 1]) -> 5", "(length [9]) -> 1", "(length [7]) -> 1", "(length [3 3 0]) -> 3", "(length [7 8]) -> 2", "(length [3 7]) -> 2", "(length []) -> 0", "(length [8 5 2 7]) -> 4", "(length [0 2 0 3 7]) -> 5", "(length [2 2 3]) -> 3", "(length []) -> 0", "(length [8 8 9]) -> 3", "(length [0 2 5 6]) -> 4", "(length [2 4 3 2 1]) -> 5", "(length []) -> 0", "(length [4]) -> 1", "(length []) -> 0", "(length [9]) -> 1", "(length [4 7 4 9 1]) -> 5", "(length [0 0 8]) -> 3", "(length [0 0 7]) -> 3", "(length [9 8]) -> 2"], "time": 0.051326, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [8 0]) -> 2", "(length [4]) -> 1", "(length [2 4 0]) -> 3", "(length [0 6 6]) -> 3", "(length [8]) -> 1", "(length [3 2 6]) -> 3", "(length [2 1 5 0 5]) -> 5", "(length [5]) -> 1", "(length [6 0 1 7]) -> 4", "(length [1]) -> 1", "(length []) -> 0", "(length [9 5]) -> 2", "(length []) -> 0", "(length [7 9 4 9]) -> 4", "(length []) -> 0", "(length [1 6 2 9 0]) -> 5", "(length [9]) -> 1", "(length [4]) -> 1", "(length [6]) -> 1", "(length []) -> 0", "(length [8 3 9]) -> 3", "(length []) -> 0"], "time": 0.043775, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [1 4]) -> 2", "(length [1 3 6]) -> 3", "(length [2 9 1 7 8]) -> 5", "(length [1 7 4 4]) -> 4", "(length [8 2]) -> 2", "(length [6 2 2 2 7]) -> 5", "(length [6 0 7]) -> 3", "(length [9 8 7 8 5]) -> 5", "(length [3 0 0 9 1]) -> 5", "(length [2 2 2]) -> 3", "(length [0 4 1 5]) -> 4", "(length [4 8]) -> 2", "(length [8 5 4 2]) -> 4", "(length [1]) -> 1", "(length [3]) -> 1", "(length [1 3 7 1 5]) -> 5", "(length [2]) -> 1", "(length []) -> 0", "(length [0 3 3 0]) -> 4", "(length [7 2 6]) -> 3", "(length [6 4 4]) -> 3", "(length [2 8 8 6 5]) -> 5"], "time": 0.046775, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [0 8]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [1 5]) -> 2", "(length []) -> 0", "(length [5 4 6 5]) -> 4", "(length [1 0 2]) -> 3", "(length [1 8]) -> 2", "(length [6 6]) -> 2", "(length [6 2]) -> 2", "(length [3]) -> 1", "(length [3 2 2]) -> 3", "(length [6 1 7 5 2]) -> 5", "(length [9 0]) -> 2", "(length [4 6 5]) -> 3", "(length [5 0 4 5 3]) -> 5", "(length [6 0]) -> 2", "(length [9]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [4 9]) -> 2", "(length [1 5 6 7 4]) -> 5"], "time": 0.050863, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [3 9 0 5]) -> 4", "(length [2 6 6 3 2]) -> 5", "(length [3 0 0 1 7]) -> 5", "(length [1 8 1 2]) -> 4", "(length [9 5 4]) -> 3", "(length [6]) -> 1", "(length [0]) -> 1", "(length [2 0]) -> 2", "(length [5]) -> 1", "(length [1 6 1]) -> 3", "(length [2 3 8 2]) -> 4", "(length [7 8 5 8 4]) -> 5", "(length [6 2]) -> 2", "(length [6 1 6]) -> 3", "(length [9 4]) -> 2", "(length [1 8]) -> 2", "(length [2 5 9]) -> 3", "(length [0 3 6]) -> 3", "(length [7 0 9]) -> 3", "(length [2 7 1]) -> 3", "(length [8]) -> 1", "(length [5 0 2 1]) -> 4"], "time": 0.033645, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3]) -> 1", "(length [3 9 3 4 6]) -> 5", "(length [1 8 7 4]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length [0 9]) -> 2", "(length [5 2 3 7 8]) -> 5", "(length [9 8 8 6]) -> 4", "(length [5 4 0 9 1]) -> 5", "(length [2 1]) -> 2", "(length [8 4]) -> 2", "(length [4 5 1 0]) -> 4", "(length [3]) -> 1", "(length [2 0 0 4]) -> 4", "(length []) -> 0", "(length [4 8 0 7]) -> 4", "(length [7 2 0 3 5]) -> 5", "(length [0]) -> 1", "(length [7]) -> 1", "(length [0 0 1]) -> 3", "(length [4]) -> 1", "(length [3 3 3 7 6]) -> 5", "(length [2 7 3]) -> 3"], "time": 0.03136, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 3]) -> 2", "(length [4 6 8 6 0]) -> 5", "(length []) -> 0", "(length [3]) -> 1", "(length []) -> 0", "(length [0]) -> 1", "(length [9]) -> 1", "(length []) -> 0", "(length [8 3 4 9 2]) -> 5", "(length [5 9 3]) -> 3", "(length [2 3 5 9]) -> 4", "(length [6 6]) -> 2", "(length [0]) -> 1", "(length [2 5]) -> 2", "(length [6 5]) -> 2", "(length [2 0 1]) -> 3", "(length [4 9 3 5 0]) -> 5", "(length [2]) -> 1", "(length [9 0 8 4]) -> 4", "(length [7 2]) -> 2", "(length [6 8 1]) -> 3", "(length []) -> 0", "(length [1 8 8]) -> 3"], "time": 0.038726, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 7]) -> 2", "(length []) -> 0", "(length [4 3 0 3 1]) -> 5", "(length []) -> 0", "(length [5 3 5]) -> 3", "(length [0]) -> 1", "(length [4 1 3 5]) -> 4", "(length [7 5]) -> 2", "(length [3]) -> 1", "(length []) -> 0", "(length [3 2 9]) -> 3", "(length [2]) -> 1", "(length [5 7]) -> 2", "(length []) -> 0", "(length [1 9 7 5 1]) -> 5", "(length []) -> 0", "(length [9 7 8]) -> 3", "(length []) -> 0", "(length [4 2]) -> 2", "(length [2 4 8]) -> 3", "(length [4 7]) -> 2", "(length [8 4 4 3 2]) -> 5", "(length [6 7 0 0]) -> 4"], "time": 0.043138, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8 1 5]) -> 3", "(length [6 2 8 2]) -> 4", "(length [0 0]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [1 7 9 1 6]) -> 5", "(length [7]) -> 1", "(length [6]) -> 1", "(length [6 9]) -> 2", "(length [1 6]) -> 2", "(length [9 6]) -> 2", "(length [9 7 4 7]) -> 4", "(length [5]) -> 1", "(length [7 5]) -> 2", "(length []) -> 0", "(length [0 7 7 7]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [9]) -> 1", "(length [4 0 7 8]) -> 4"], "time": 0.031594, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [4]) -> 1", "(length [4]) -> 1", "(length [7]) -> 1", "(length [4 4]) -> 2", "(length []) -> 0", "(length [7 6]) -> 2", "(length [7 7 5]) -> 3", "(length [5 3 4 7]) -> 4", "(length [4 1]) -> 2", "(length [4 6]) -> 2", "(length [7 0]) -> 2", "(length []) -> 0", "(length [4 2]) -> 2", "(length [9 2 8 2]) -> 4", "(length [7]) -> 1", "(length [4 8 0 9]) -> 4", "(length [4 0 3]) -> 3", "(length [5]) -> 1", "(length [8 0 0 0 3]) -> 5", "(length [8]) -> 1", "(length [4 0 7 0 1]) -> 5", "(length [8 3]) -> 2"], "time": 0.043564, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 0]) -> 2", "(length [0 2 2 6]) -> 4", "(length [3]) -> 1", "(length []) -> 0", "(length [3 9 1]) -> 3", "(length [8 6 5 7]) -> 4", "(length [0 3 5 4]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length [7]) -> 1", "(length [9 4 9 4]) -> 4", "(length [4 9 8 8 7]) -> 5", "(length [6 4 2 7]) -> 4", "(length [5 8 0 7 2]) -> 5", "(length [2]) -> 1", "(length []) -> 0", "(length [0 4 5]) -> 3", "(length [5 5 1 8 0]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [2 3 5 7 1]) -> 5", "(length [0]) -> 1", "(length [3 8]) -> 2"], "time": 0.031576, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [2 1 9 0]) -> 4", "(length [0 3 7]) -> 3", "(length [8]) -> 1", "(length [3 3 0 1]) -> 4", "(length []) -> 0", "(length [3 4 9 2]) -> 4", "(length [1 0 0]) -> 3", "(length [8]) -> 1", "(length [4]) -> 1", "(length [6 6 8]) -> 3", "(length [2 8 9]) -> 3", "(length [2 1]) -> 2", "(length []) -> 0", "(length [8 3]) -> 2", "(length [2 9 7 5 4]) -> 5", "(length [2 9 6]) -> 3", "(length []) -> 0", "(length [6 2]) -> 2", "(length [1 9]) -> 2", "(length [4]) -> 1"], "time": 0.037654, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5]) -> 1", "(length [7 7]) -> 2", "(length [1 1 8 0 6]) -> 5", "(length []) -> 0", "(length [4 2]) -> 2", "(length [6 7 3]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [4]) -> 1", "(length []) -> 0", "(length [3]) -> 1", "(length [8 7 3 6]) -> 4", "(length [2 3]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [2 6 7 3 1]) -> 5", "(length [6 9 6 7]) -> 4", "(length [7 2 3 2]) -> 4", "(length [0 5 1 4 6]) -> 5", "(length []) -> 0", "(length [1 1 6]) -> 3", "(length [8 7 2]) -> 3", "(length [7 0]) -> 2"], "time": 0.050748, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1]) -> 1", "(length [1 6 4 6]) -> 4", "(length [5 4 8 6 2]) -> 5", "(length [3 9 9]) -> 3", "(length [8 9]) -> 2", "(length []) -> 0", "(length [4 3 7 3]) -> 4", "(length [5 4 7]) -> 3", "(length []) -> 0", "(length [3 2 7]) -> 3", "(length [9 0]) -> 2", "(length [9 3]) -> 2", "(length [6 4 7 5]) -> 4", "(length [2 2 1]) -> 3", "(length [7 4 2]) -> 3", "(length [9 4 3 3 7]) -> 5", "(length [7 7]) -> 2", "(length [8]) -> 1", "(length [2 2 8 1]) -> 4", "(length []) -> 0", "(length [4 2 4]) -> 3", "(length [8 4 0]) -> 3", "(length [5]) -> 1"], "time": 0.050373, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8 5]) -> 2", "(length [4 8]) -> 2", "(length [2 5 0]) -> 3", "(length [0 5 1]) -> 3", "(length [5 6 0 5]) -> 4", "(length []) -> 0", "(length [3 2 8 1]) -> 4", "(length [5]) -> 1", "(length [0 6]) -> 2", "(length [8 1 4 6 7]) -> 5", "(length [6 5 4 6]) -> 4", "(length []) -> 0", "(length [4 5 2 4 0]) -> 5", "(length [4 4 9 5]) -> 4", "(length [0 2]) -> 2", "(length [1 8 7 2 5]) -> 5", "(length [8 3]) -> 2", "(length [2]) -> 1", "(length [6 5 9 1]) -> 4", "(length [5 6 0 4 7]) -> 5", "(length []) -> 0", "(length [2 8 9 5]) -> 4", "(length [9 7]) -> 2"], "time": 0.032337, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1]) -> 1", "(length [8 3]) -> 2", "(length [2 1 4 0]) -> 4", "(length [6 1]) -> 2", "(length [5 8 8 2 3]) -> 5", "(length [9]) -> 1", "(length [6]) -> 1", "(length [5 7]) -> 2", "(length [6 8]) -> 2", "(length [2 2]) -> 2", "(length [8 3]) -> 2", "(length [7 1 9]) -> 3", "(length [8 1 3]) -> 3", "(length [5 2]) -> 2", "(length [3 4 1]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [7 6 3 9 1]) -> 5", "(length [2 7 1 7 5]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [3]) -> 1", "(length []) -> 0"], "time": 0.044389, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 8]) -> 2", "(length [1 8]) -> 2", "(length [5 6]) -> 2", "(length [0]) -> 1", "(length [5]) -> 1", "(length [9]) -> 1", "(length [3]) -> 1", "(length [0]) -> 1", "(length [9 6 2]) -> 3", "(length []) -> 0", "(length [1]) -> 1", "(length []) -> 0", "(length [2 4]) -> 2", "(length [2 2 0]) -> 3", "(length [1]) -> 1", "(length [9 6]) -> 2", "(length [4 3]) -> 2", "(length [5 8 1]) -> 3", "(length []) -> 0", "(length [0 2 1 9 6]) -> 5", "(length [0 5 3 8 8]) -> 5", "(length [9 1 1]) -> 3", "(length [4 0 4 9]) -> 4"], "time": 0.047996, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [4 9]) -> 2", "(length [8]) -> 1", "(length [6 2]) -> 2", "(length [4 4 1]) -> 3", "(length [2 0]) -> 2", "(length [1]) -> 1", "(length [7 8]) -> 2", "(length [9 9 2 9 5]) -> 5", "(length [2 7 2 5 7]) -> 5", "(length []) -> 0", "(length [9 7 5]) -> 3", "(length [9]) -> 1", "(length [5 9 6 4]) -> 4", "(length [1]) -> 1", "(length [9]) -> 1", "(length []) -> 0", "(length [0 5 8 0 7]) -> 5", "(length [8 9 2]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [5]) -> 1", "(length [8 3 8 8 5]) -> 5"], "time": 0.051076, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1 9 0]) -> 3", "(length [8]) -> 1", "(length [6]) -> 1", "(length [9 4 3]) -> 3", "(length [0 7 9 2]) -> 4", "(length [2 4]) -> 2", "(length [4 5]) -> 2", "(length [6 6 6 6 8]) -> 5", "(length [9 4]) -> 2", "(length []) -> 0", "(length [7 3 4]) -> 3", "(length [1 1 4]) -> 3", "(length [2 0 9 9]) -> 4", "(length [6]) -> 1", "(length [2 4 0 6 2]) -> 5", "(length [2 1 7 5 2]) -> 5", "(length [7 1]) -> 2", "(length [5]) -> 1", "(length [1 3 1]) -> 3", "(length [6 7 1 9]) -> 4", "(length [6 2]) -> 2", "(length [2 4 0 1]) -> 4", "(length [3 9 2 7 2]) -> 5"], "time": 0.030787, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7 1]) -> 2", "(length [9 5 5 4]) -> 4", "(length [3 4 9]) -> 3", "(length [7]) -> 1", "(length []) -> 0", "(length [3 6 5]) -> 3", "(length [4 1]) -> 2", "(length [1 0 6]) -> 3", "(length [4 1]) -> 2", "(length []) -> 0", "(length [5]) -> 1", "(length [2 1]) -> 2", "(length [4 2 1 4 6]) -> 5", "(length [1 7 3 7]) -> 4", "(length [5 1 2 9]) -> 4", "(length [7 4]) -> 2", "(length []) -> 0", "(length [6 0 5 9 4]) -> 5", "(length [7 4 1]) -> 3", "(length [2 0]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [9 9 8 9]) -> 4"], "time": 0.035278, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 8 2 1 3]) -> 5", "(length [0 0]) -> 2", "(length [3 0]) -> 2", "(length [3 7 8]) -> 3", "(length [2 7]) -> 2", "(length [6 1 0]) -> 3", "(length []) -> 0", "(length [5 3]) -> 2", "(length [1]) -> 1", "(length [8 0 4 5 4]) -> 5", "(length [2 5 7]) -> 3", "(length [8 1 7 8]) -> 4", "(length [0]) -> 1", "(length [8]) -> 1", "(length [6 4]) -> 2", "(length [1 1 6 8]) -> 4", "(length [5 5 4 6]) -> 4", "(length [2 9]) -> 2", "(length [0]) -> 1", "(length [3 1]) -> 2", "(length [4]) -> 1", "(length [1 0 7]) -> 3", "(length [7]) -> 1"], "time": 0.037605, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 6]) -> 2", "(length [7 9 1 1]) -> 4", "(length [0]) -> 1", "(length []) -> 0", "(length [0]) -> 1", "(length [3 6 4]) -> 3", "(length []) -> 0", "(length [9 8 8 6 1]) -> 5", "(length [0 1 6 7 7]) -> 5", "(length [8]) -> 1", "(length []) -> 0", "(length [8 6]) -> 2", "(length [3 4 6]) -> 3", "(length [1 7 8 1]) -> 4", "(length [2 3]) -> 2", "(length [2 2 0 4]) -> 4", "(length [2 3 4 5 8]) -> 5", "(length [9 2]) -> 2", "(length [7 2 3 7]) -> 4", "(length [6 6 9 7 3]) -> 5", "(length [2]) -> 1", "(length [7 5 5 7 1]) -> 5", "(length [6 9 4 1]) -> 4"], "time": 0.042401, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8 3 4]) -> 3", "(length [8 1 4 8]) -> 4", "(length [4 6 3 8 2]) -> 5", "(length [8 9 1 4 9]) -> 5", "(length [0 6 7]) -> 3", "(length []) -> 0", "(length [2 9 0 5 3]) -> 5", "(length [4]) -> 1", "(length [5 4 4 8]) -> 4", "(length [7 4]) -> 2", "(length [3]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [1 4 8]) -> 3", "(length [7 5]) -> 2", "(length [0 6 3 6 8]) -> 5", "(length []) -> 0", "(length [9]) -> 1", "(length [3 4 9 8 5]) -> 5", "(length []) -> 0", "(length [4 2]) -> 2", "(length [3 8]) -> 2", "(length [9 2 8]) -> 3"], "time": 0.052815, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 9 4]) -> 3", "(length [6 2 5 5]) -> 4", "(length [7 9 2]) -> 3", "(length [0 2 2 8]) -> 4", "(length [9]) -> 1", "(length [5 1 3 6]) -> 4", "(length [7]) -> 1", "(length [4 8]) -> 2", "(length [4]) -> 1", "(length []) -> 0", "(length [6 9 4 3 2]) -> 5", "(length []) -> 0", "(length [3]) -> 1", "(length [8 3]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [9 6]) -> 2", "(length [0 7]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [7 2 5 7 0]) -> 5", "(length [3 8 6]) -> 3"], "time": 0.050653, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [0 0]) -> 2", "(length [8 2 6 8]) -> 4", "(length [7 8 7]) -> 3", "(length []) -> 0", "(length [8 8 8]) -> 3", "(length []) -> 0", "(length [5 9]) -> 2", "(length [7 1]) -> 2", "(length [7 2 2 0 1]) -> 5", "(length []) -> 0", "(length [5]) -> 1", "(length [8 9 2 5 8]) -> 5", "(length [1]) -> 1", "(length [5 5 3 3 3]) -> 5", "(length [4 4 9 6 6]) -> 5", "(length [8 3 4 2 1]) -> 5", "(length [1]) -> 1", "(length [1]) -> 1", "(length [1 6 9 2]) -> 4", "(length [6 9 3 4]) -> 4", "(length [7 4 7]) -> 3", "(length [1]) -> 1"], "time": 0.046093, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 5 1]) -> 3", "(length [5 0 3 7]) -> 4", "(length [1 9]) -> 2", "(length [5 5 4 4]) -> 4", "(length [2 7 3]) -> 3", "(length [5 6]) -> 2", "(length [9 8 2 8 3]) -> 5", "(length [3 5]) -> 2", "(length [2]) -> 1", "(length [3]) -> 1", "(length [1 5 9 9 1]) -> 5", "(length [5 3 8 6]) -> 4", "(length [9 5 9 6 1]) -> 5", "(length [8]) -> 1", "(length [7 2]) -> 2", "(length [1]) -> 1", "(length [2]) -> 1", "(length [3 2 2 9]) -> 4", "(length []) -> 0", "(length [2 1 8]) -> 3", "(length [0 8]) -> 2", "(length [9 9 5 7]) -> 4", "(length [4]) -> 1"], "time": 0.053658, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 1]) -> 2", "(length [9 0 6 6]) -> 4", "(length [7 2]) -> 2", "(length [2 5 2 0 9]) -> 5", "(length [9]) -> 1", "(length [6 1]) -> 2", "(length [6 2 9 9 8]) -> 5", "(length [3 1 1 2 5]) -> 5", "(length [5 0 2 8]) -> 4", "(length [9 7 8 8 1]) -> 5", "(length [8 9]) -> 2", "(length []) -> 0", "(length [8 5 7 6 5]) -> 5", "(length [0]) -> 1", "(length [6 8 7 7]) -> 4", "(length []) -> 0", "(length [6 3]) -> 2", "(length []) -> 0", "(length [5 2 2]) -> 3", "(length [0 2 5 7 0]) -> 5", "(length [6 7 4]) -> 3", "(length [1]) -> 1", "(length []) -> 0"], "time": 0.029814, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [1 4 5 4]) -> 4", "(length [9]) -> 1", "(length [3 4 2]) -> 3", "(length [0]) -> 1", "(length []) -> 0", "(length [1 7 5 4 8]) -> 5", "(length [2 1 2]) -> 3", "(length [6 0 2 3]) -> 4", "(length [1 2 3]) -> 3", "(length [9 5 9 0]) -> 4", "(length [1 2 9 3]) -> 4", "(length [4 2 0 0 6]) -> 5", "(length [5 9 8 7]) -> 4", "(length [7 5 5 1]) -> 4", "(length [5 1 9 3]) -> 4", "(length []) -> 0", "(length [2 4 7 4 9]) -> 5", "(length [8 1 2 6 1]) -> 5", "(length [1 7 3 9]) -> 4", "(length [6 8]) -> 2", "(length [2 7 0]) -> 3", "(length [1 5 6 2]) -> 4"], "time": 0.04834, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7 3 1 0]) -> 4", "(length [2 6 2 3 9]) -> 5", "(length [4]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [1]) -> 1", "(length []) -> 0", "(length [7 6 8 6]) -> 4", "(length [0]) -> 1", "(length [5 2 8]) -> 3", "(length [0 1 8 6 2]) -> 5", "(length [1 7 6 1 1]) -> 5", "(length [4 7 7 2 2]) -> 5", "(length [3 8 1 6]) -> 4", "(length [7 9]) -> 2", "(length [1 0 8]) -> 3", "(length [8]) -> 1", "(length [4 5]) -> 2", "(length [5 7 1 3]) -> 4", "(length []) -> 0", "(length [7 5 2 0]) -> 4", "(length [1]) -> 1", "(length [6 2]) -> 2"], "time": 0.031192, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 1 6]) -> 3", "(length []) -> 0", "(length [8 4 6 9 7]) -> 5", "(length [2 7 7 3]) -> 4", "(length [7 9 6 0 7]) -> 5", "(length [2 7 1 7]) -> 4", "(length [5 2 4 9 9]) -> 5", "(length []) -> 0", "(length [9 6 0 9]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [3 3 0 6]) -> 4", "(length [6 1 6]) -> 3", "(length [8 4 5 9 1]) -> 5", "(length [8]) -> 1", "(length [5]) -> 1", "(length [4 9 6 2 2]) -> 5", "(length [8 9 5 9 6]) -> 5", "(length [9 8 7 4]) -> 4", "(length [5 0]) -> 2", "(length [5]) -> 1"], "time": 0.050529, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1 9]) -> 2", "(length [7 1]) -> 2", "(length [2]) -> 1", "(length [5]) -> 1", "(length [8]) -> 1", "(length [9 1 1]) -> 3", "(length [3]) -> 1", "(length [2]) -> 1", "(length [7]) -> 1", "(length [9 5]) -> 2", "(length []) -> 0", "(length [8 1]) -> 2", "(length [8 3 9 9]) -> 4", "(length [1]) -> 1", "(length [5 6 7]) -> 3", "(length [3 5]) -> 2", "(length [0]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [0 1 8 5 4]) -> 5", "(length [7 1 1 0]) -> 4", "(length []) -> 0", "(length []) -> 0"], "time": 0.03114, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 4]) -> 2", "(length []) -> 0", "(length [2 9 6]) -> 3", "(length [1]) -> 1", "(length [9 9 9]) -> 3", "(length [8 8 2]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [2 3 1 0]) -> 4", "(length [5 9 7 2]) -> 4", "(length [6 4 0]) -> 3", "(length []) -> 0", "(length [0 5]) -> 2", "(length [7 9 3 5]) -> 4", "(length [8 1 9]) -> 3", "(length [7 3 0]) -> 3", "(length [8 2 4 0 7]) -> 5", "(length [8 0 3]) -> 3", "(length [9 3 7 3 8]) -> 5", "(length [6 0 2 8]) -> 4", "(length [2 4]) -> 2", "(length [9 0 1]) -> 3"], "time": 0.030364, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6 4]) -> 2", "(length [8 9 5]) -> 3", "(length []) -> 0", "(length [7 0 8 7]) -> 4", "(length [0]) -> 1", "(length [5 0 9]) -> 3", "(length [4]) -> 1", "(length [0]) -> 1", "(length []) -> 0", "(length [4 7 7 0]) -> 4", "(length [1 7]) -> 2", "(length [2 4]) -> 2", "(length [8 6 7 7 6]) -> 5", "(length [3 0 9 9 7]) -> 5", "(length [8 6 2 7]) -> 4", "(length []) -> 0", "(length [1 4 8]) -> 3", "(length [3 4 9 7]) -> 4", "(length [4]) -> 1", "(length [1]) -> 1", "(length [2]) -> 1", "(length [8 2 8]) -> 3", "(length [7]) -> 1"], "time": 0.051612, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 5]) -> 2", "(length [7 0 0 6]) -> 4", "(length [7 1 2]) -> 3", "(length [9 4 5 3]) -> 4", "(length [5 0]) -> 2", "(length [5 9 4 2]) -> 4", "(length [0 0 7]) -> 3", "(length [6 6 5]) -> 3", "(length [1 4 2 1 8]) -> 5", "(length []) -> 0", "(length [3 5 6 5]) -> 4", "(length [2 4]) -> 2", "(length [7 9]) -> 2", "(length [3]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [3 4 0 9]) -> 4", "(length [7 0 5 7]) -> 4", "(length [4 8 8]) -> 3", "(length [5 0 3]) -> 3", "(length [8 2 1 8 6]) -> 5", "(length [1]) -> 1", "(length []) -> 0"], "time": 0.049897, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 9]) -> 2", "(length [3 1 3 0]) -> 4", "(length [5 5 0 6]) -> 4", "(length [3 3 9 7]) -> 4", "(length [9 5 0 7 5]) -> 5", "(length [3 8 7]) -> 3", "(length [7 7]) -> 2", "(length [5]) -> 1", "(length [5]) -> 1", "(length [5 2 9 6]) -> 4", "(length [4]) -> 1", "(length [6 4 3 8 2]) -> 5", "(length [3 5 6 6 2]) -> 5", "(length [9 8 1]) -> 3", "(length []) -> 0", "(length [5 4 8 7]) -> 4", "(length [6 2 6 7 0]) -> 5", "(length [2 0 6 2]) -> 4", "(length [9]) -> 1", "(length [9]) -> 1", "(length [2 1]) -> 2", "(length [4 6 1 0]) -> 4", "(length [4 2 8 3 0]) -> 5"], "time": 0.0447, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 8 4 0 4]) -> 5", "(length [0]) -> 1", "(length [3 5 9 1]) -> 4", "(length [9 5 8 0]) -> 4", "(length []) -> 0", "(length [4 3 3 8]) -> 4", "(length []) -> 0", "(length [5 1]) -> 2", "(length [4 6 5 3 8]) -> 5", "(length [2]) -> 1", "(length [6 0 6 6]) -> 4", "(length [4 8 9 1 5]) -> 5", "(length [2 8 5 6 2]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [0 8 9]) -> 3", "(length [9 0 2 5 4]) -> 5", "(length [5 7 8 6]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length [2 5 9]) -> 3", "(length [1 0 4 7]) -> 4", "(length [1 5 2]) -> 3"], "time": 0.031982, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [2 0 4 8]) -> 4", "(length [1 5]) -> 2", "(length [2 0 0 2 2]) -> 5", "(length [7 2]) -> 2", "(length [8]) -> 1", "(length [9 8 9]) -> 3", "(length [7 2 5]) -> 3", "(length [2 4 6 6 7]) -> 5", "(length [5 9 8]) -> 3", "(length []) -> 0", "(length [8 5 8 9 2]) -> 5", "(length [7]) -> 1", "(length [6 3 8 3 1]) -> 5", "(length [2]) -> 1", "(length [1 3 6 4 4]) -> 5", "(length [1]) -> 1", "(length [0 1]) -> 2", "(length [2 1]) -> 2", "(length [8]) -> 1", "(length [2 7 2 4]) -> 4", "(length [2 2 3 6 6]) -> 5", "(length [7]) -> 1", "(length [2 6 4 0 9]) -> 5"], "time": 0.032055, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7 4]) -> 2", "(length [5 7 9 6 7]) -> 5", "(length [4 8 6]) -> 3", "(length []) -> 0", "(length [1 3 7 2]) -> 4", "(length [3 0 8]) -> 3", "(length [9 9]) -> 2", "(length [6 5 9 7 8]) -> 5", "(length [4 1 9 1 9]) -> 5", "(length [5 4 5 3 9]) -> 5", "(length [3 9 3]) -> 3", "(length [6 0 4]) -> 3", "(length [4 1 1]) -> 3", "(length [4 0 4]) -> 3", "(length []) -> 0", "(length [7 5 7]) -> 3", "(length [1 6 7 9 5]) -> 5", "(length []) -> 0", "(length [0 4 9]) -> 3", "(length []) -> 0", "(length [2]) -> 1", "(length [9 0]) -> 2", "(length [2 1]) -> 2"], "time": 0.040958, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [7 5]) -> 2", "(length [8 7 9 7 0]) -> 5", "(length []) -> 0", "(length [5 8 1]) -> 3", "(length []) -> 0", "(length [0]) -> 1", "(length [4]) -> 1", "(length [2 8 2 1]) -> 4", "(length []) -> 0", "(length [1 2 7 3 4]) -> 5", "(length [3 8]) -> 2", "(length [1 4 2 0 3]) -> 5", "(length [2 9]) -> 2", "(length [6]) -> 1", "(length [6]) -> 1", "(length [6 7 3]) -> 3", "(length [7 4 4 3]) -> 4", "(length [3]) -> 1", "(length [0]) -> 1", "(length [1 5 4]) -> 3", "(length [7]) -> 1", "(length [8 9]) -> 2"], "time": 0.049305, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 3 9]) -> 3", "(length [8 4 4 8 0]) -> 5", "(length []) -> 0", "(length [0 2 7 0 1]) -> 5", "(length [0 6]) -> 2", "(length [4 4 7 3]) -> 4", "(length [0 5 5 0 9]) -> 5", "(length [9 0]) -> 2", "(length [9 9]) -> 2", "(length [4 5 8 1]) -> 4", "(length [7 3 1 6 8]) -> 5", "(length [5 7 7 9]) -> 4", "(length [8 0 9]) -> 3", "(length []) -> 0", "(length [6]) -> 1", "(length [9]) -> 1", "(length [9 6 4 2]) -> 4", "(length [9 3 8 4]) -> 4", "(length [9 0 7 2]) -> 4", "(length []) -> 0", "(length [9 5 7]) -> 3", "(length [9]) -> 1", "(length [8 6 0 1]) -> 4"], "time": 0.043114, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6]) -> 1", "(length [1 8]) -> 2", "(length []) -> 0", "(length [0 5 5 8 6]) -> 5", "(length [6]) -> 1", "(length [7 6]) -> 2", "(length [7]) -> 1", "(length [6 3 5]) -> 3", "(length [1 3 5 4]) -> 4", "(length [2 1]) -> 2", "(length [6 3 5 3]) -> 4", "(length [8 9 1]) -> 3", "(length [7 1 0]) -> 3", "(length [1]) -> 1", "(length [3 5 0 6]) -> 4", "(length [4 1 7 2]) -> 4", "(length [3 4 2 1]) -> 4", "(length []) -> 0", "(length [3 8 0 1]) -> 4", "(length [5 8 1 5 6]) -> 5", "(length [0 0 1]) -> 3", "(length [9]) -> 1", "(length [8]) -> 1"], "time": 0.041553, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [8 7]) -> 2", "(length [0 1 8 6 8]) -> 5", "(length [5 6 8]) -> 3", "(length []) -> 0", "(length [2 5 7 7]) -> 4", "(length []) -> 0", "(length [0 4 6 3 5]) -> 5", "(length [3 3 5 4 6]) -> 5", "(length [5 6 3]) -> 3", "(length [8]) -> 1", "(length [2]) -> 1", "(length []) -> 0", "(length [2 4 7 4 4]) -> 5", "(length [6 4 3]) -> 3", "(length []) -> 0", "(length [3 4]) -> 2", "(length [6 4 6 8 9]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [7 2 7]) -> 3", "(length [5 5]) -> 2", "(length [4 8]) -> 2"], "time": 0.044252, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1 7 1 5 8]) -> 5", "(length []) -> 0", "(length [5 4]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [1 8]) -> 2", "(length [7 5]) -> 2", "(length []) -> 0", "(length [9 6 6 6 9]) -> 5", "(length []) -> 0", "(length [5 7]) -> 2", "(length [4 4 3 5]) -> 4", "(length [4]) -> 1", "(length [4 5]) -> 2", "(length [7 6 5 5 2]) -> 5", "(length [1 0 9 1]) -> 4", "(length [1 9 4]) -> 3", "(length [0 7 2]) -> 3", "(length [1 9 1 7]) -> 4", "(length [2]) -> 1", "(length [3 7 5 6 7]) -> 5", "(length []) -> 0", "(length [1 4 9 4]) -> 4"], "time": 0.044757, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 4 5 5]) -> 4", "(length [1 2 2 7]) -> 4", "(length [1 9 0 1]) -> 4", "(length [0 6]) -> 2", "(length [2 3 1 6 3]) -> 5", "(length [0 5 6]) -> 3", "(length [5]) -> 1", "(length [3 1 6 3 6]) -> 5", "(length [5]) -> 1", "(length [2 9 0 2 9]) -> 5", "(length [6 4 9 2]) -> 4", "(length [9 2 4]) -> 3", "(length [3]) -> 1", "(length [4]) -> 1", "(length [6 6 0 0 5]) -> 5", "(length [1 6 0 3]) -> 4", "(length [4 2]) -> 2", "(length [4 9 6 9 0]) -> 5", "(length []) -> 0", "(length [8 5 9 2]) -> 4", "(length [0 8 7]) -> 3", "(length [8 3]) -> 2", "(length []) -> 0"], "time": 0.036491, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [3 2 2 9 7]) -> 5", "(length [1]) -> 1", "(length []) -> 0", "(length [5 5 0 6]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length [3 8 9]) -> 3", "(length [2]) -> 1", "(length [0 7 2]) -> 3", "(length [5]) -> 1", "(length [4 9 6 0]) -> 4", "(length []) -> 0", "(length [7 3 3 9 6]) -> 5", "(length [3]) -> 1", "(length []) -> 0", "(length [7]) -> 1", "(length []) -> 0", "(length [7 9 5 6 9]) -> 5", "(length [4 3]) -> 2", "(length [5]) -> 1", "(length [9 7 5]) -> 3", "(length [8 5 5 4 4]) -> 5"], "time": 0.039169, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 2 7 9 6]) -> 5", "(length [4 3]) -> 2", "(length [2 2 6]) -> 3", "(length [7]) -> 1", "(length []) -> 0", "(length [3 6]) -> 2", "(length []) -> 0", "(length [2 6 5]) -> 3", "(length [5]) -> 1", "(length [9 7 6 9 1]) -> 5", "(length [9 0 8]) -> 3", "(length [9 0 7 2 0]) -> 5", "(length [5 2 7]) -> 3", "(length [4 1 2 3]) -> 4", "(length [3 2]) -> 2", "(length [1 6 4 5 7]) -> 5", "(length [8 4 4]) -> 3", "(length [9 5 0]) -> 3", "(length [1 3 9]) -> 3", "(length [6 0 8 8 8]) -> 5", "(length []) -> 0", "(length [1 6 4 0 7]) -> 5", "(length [4 7 3]) -> 3"], "time": 0.037212, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 2 8]) -> 3", "(length [3 7]) -> 2", "(length [4 9 8 8]) -> 4", "(length [3 3 6 6 7]) -> 5", "(length [3 3 0]) -> 3", "(length []) -> 0", "(length [2]) -> 1", "(length [1 5 8 7]) -> 4", "(length [3]) -> 1", "(length []) -> 0", "(length [5]) -> 1", "(length [5 3 2 0 4]) -> 5", "(length [1 0 1 7]) -> 4", "(length [4 3 0 6]) -> 4", "(length [5 6 1 7]) -> 4", "(length [2 1 8 9 5]) -> 5", "(length [0 7 5 0]) -> 4", "(length [0 1 0 1]) -> 4", "(length [6]) -> 1", "(length [0 4 5 1]) -> 4", "(length [0]) -> 1", "(length [1 7 9 4]) -> 4", "(length [2 0 4]) -> 3"], "time": 0.042472, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [7 1 8 6 7]) -> 5", "(length [5]) -> 1", "(length [8]) -> 1", "(length [3 1]) -> 2", "(length [0 8]) -> 2", "(length [8 2 1]) -> 3", "(length [3 3]) -> 2", "(length [1 2 6 3]) -> 4", "(length [1]) -> 1", "(length [3 6]) -> 2", "(length [2]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [1 1]) -> 2", "(length [2]) -> 1", "(length [9 4 7 2]) -> 4", "(length []) -> 0", "(length [8 6 7]) -> 3", "(length [1 1 4]) -> 3", "(length [7]) -> 1"], "time": 0.035504, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [7 1 1]) -> 3", "(length [7 9 8]) -> 3", "(length [7 9 1]) -> 3", "(length []) -> 0", "(length [8 3 7 5]) -> 4", "(length [9 0 7 8]) -> 4", "(length [1 9 6 9 1]) -> 5", "(length [2 4 5]) -> 3", "(length [4 7 4 5]) -> 4", "(length [6 0 4]) -> 3", "(length [7 4 7]) -> 3", "(length [6]) -> 1", "(length [2 4]) -> 2", "(length [3 8 6 4 8]) -> 5", "(length [0 9 5 6 4]) -> 5", "(length [4 2 8]) -> 3", "(length [6 8 6 0]) -> 4", "(length [3 6 1 3]) -> 4", "(length [9 8 2 9 0]) -> 5", "(length [2 6 4 7]) -> 4", "(length [3 1 8 3 3]) -> 5", "(length [5 2 8]) -> 3"], "time": 0.044088, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [3]) -> 1", "(length [3]) -> 1", "(length [3]) -> 1", "(length [4 7 0 6]) -> 4", "(length [6]) -> 1", "(length []) -> 0", "(length [4 8 7]) -> 3", "(length [0]) -> 1", "(length []) -> 0", "(length [9 9 5 0 7]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [1 4 7 8 9]) -> 5", "(length [6 6 1]) -> 3", "(length [5 9 5]) -> 3", "(length [4 9 0 8]) -> 4", "(length [2 8 3]) -> 3", "(length [5]) -> 1", "(length [2 7 6 7 4]) -> 5", "(length []) -> 0", "(length [0 9 6 6]) -> 4", "(length [4 9]) -> 2"], "time": 0.043671, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [2 8 7 8]) -> 4", "(length [6 5 1 9]) -> 4", "(length [6 7]) -> 2", "(length [4 2]) -> 2", "(length [9 0]) -> 2", "(length []) -> 0", "(length [4 7 2 7 6]) -> 5", "(length [2 8 9 7]) -> 4", "(length [3]) -> 1", "(length [8 2 9 2 2]) -> 5", "(length [1 7 5 0 4]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [1 8 8 0]) -> 4", "(length [8]) -> 1", "(length [4 5 7 8 1]) -> 5", "(length [3 3]) -> 2", "(length [2]) -> 1"], "time": 0.035909, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0]) -> 1", "(length [2 2]) -> 2", "(length [3 5 5 3 2]) -> 5", "(length [0]) -> 1", "(length [1 7 6 6]) -> 4", "(length [6 9 8 6]) -> 4", "(length []) -> 0", "(length [5 4 8 9 1]) -> 5", "(length [1]) -> 1", "(length [0 0 6 2 0]) -> 5", "(length [5 6 1]) -> 3", "(length [9 1 6 0 0]) -> 5", "(length [7 2 7 7]) -> 4", "(length [7 9]) -> 2", "(length [7]) -> 1", "(length [3 0 0 2 8]) -> 5", "(length [8]) -> 1", "(length [4]) -> 1", "(length []) -> 0", "(length [1 5 4 5]) -> 4", "(length []) -> 0", "(length [3 7 6 2]) -> 4", "(length [6 4 6 7 3]) -> 5"], "time": 0.033179, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6 5 4]) -> 3", "(length [7 0 3 7 0]) -> 5", "(length [3 4 9]) -> 3", "(length [4 6 8]) -> 3", "(length [7]) -> 1", "(length [4 7 3 2 5]) -> 5", "(length [0 6 4 5]) -> 4", "(length [3 3]) -> 2", "(length [3 9 6]) -> 3", "(length [6 8 3 7]) -> 4", "(length [6 2]) -> 2", "(length [7 6 1 1]) -> 4", "(length []) -> 0", "(length [0 3 8 9 1]) -> 5", "(length [3 3 7 6]) -> 4", "(length [0 6]) -> 2", "(length [2 0 9 9]) -> 4", "(length [7 8 0 9]) -> 4", "(length [0 0]) -> 2", "(length [7]) -> 1", "(length [8 7 2 2 9]) -> 5", "(length [4 4 5 8]) -> 4", "(length [5 2 9 9]) -> 4"], "time": 0.031843, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 1 7]) -> 3", "(length [2 1 8]) -> 3", "(length [0 9]) -> 2", "(length []) -> 0", "(length [3 1]) -> 2", "(length [9]) -> 1", "(length [1 2]) -> 2", "(length [1 8]) -> 2", "(length []) -> 0", "(length [5]) -> 1", "(length [6 4 5]) -> 3", "(length [4 6 8]) -> 3", "(length [0 3 1]) -> 3", "(length [7 7 2]) -> 3", "(length []) -> 0", "(length [1 2]) -> 2", "(length [2]) -> 1", "(length []) -> 0", "(length [6 9]) -> 2", "(length [9 7 4]) -> 3", "(length [9 5 8]) -> 3", "(length [0 5 0 4]) -> 4", "(length [7 5 0 4]) -> 4"], "time": 0.036461, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8 6 3]) -> 3", "(length [6 8 6 5 4]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [5 0 3 7]) -> 4", "(length [9]) -> 1", "(length [7 0 7]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [0 2]) -> 2", "(length []) -> 0", "(length [1 0]) -> 2", "(length [0]) -> 1", "(length [8 9 9 9]) -> 4", "(length [6 0 6 9]) -> 4", "(length [4 6]) -> 2", "(length [1 5]) -> 2", "(length [0 0 6 7]) -> 4", "(length [7 4 1]) -> 3", "(length []) -> 0", "(length [5 3 3 6 0]) -> 5", "(length [8 7 2]) -> 3"], "time": 0.049678, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [2 4]) -> 2", "(length [6 1 2]) -> 3", "(length [1]) -> 1", "(length [9 1 9]) -> 3", "(length [8 9 7]) -> 3", "(length [2 5 0]) -> 3", "(length [6 1 3 3 2]) -> 5", "(length [8 5 9 0]) -> 4", "(length [6 1]) -> 2", "(length []) -> 0", "(length [5 1]) -> 2", "(length [7 1]) -> 2", "(length [6 2 0]) -> 3", "(length [6 8 5 7 7]) -> 5", "(length [8 5 9]) -> 3", "(length [2 4 5]) -> 3", "(length [2 2 3]) -> 3", "(length []) -> 0", "(length [0 6 7]) -> 3", "(length [0 6 2]) -> 3", "(length [2 8 5]) -> 3", "(length [7 4 0]) -> 3", "(length [9 7 5 5]) -> 4"], "time": 0.036061, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 5]) -> 2", "(length [8]) -> 1", "(length [3 1 8 1]) -> 4", "(length [3 1]) -> 2", "(length [6 5 0 4 2]) -> 5", "(length [3 7 2]) -> 3", "(length [1 0 6 6]) -> 4", "(length [3 2]) -> 2", "(length [0 6 0]) -> 3", "(length [3 2 2 6 6]) -> 5", "(length []) -> 0", "(length [3 4 2 7 6]) -> 5", "(length []) -> 0", "(length [2 6 6 7]) -> 4", "(length [4]) -> 1", "(length [8 4 0 2 1]) -> 5", "(length [6 0 8]) -> 3", "(length [3]) -> 1", "(length [3 8 7 6 0]) -> 5", "(length [9 8 0 6]) -> 4", "(length [2 3 9 3 1]) -> 5", "(length [9]) -> 1", "(length [6 9]) -> 2"], "time": 0.038387, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 3 5 4 1]) -> 5", "(length [4 2 4]) -> 3", "(length []) -> 0", "(length [4 9 0]) -> 3", "(length [3 2 3 6]) -> 4", "(length []) -> 0", "(length [8]) -> 1", "(length [8]) -> 1", "(length [7]) -> 1", "(length [6 8 3 3 2]) -> 5", "(length [1]) -> 1", "(length [3 4 7]) -> 3", "(length [7]) -> 1", "(length [7 3 8 3]) -> 4", "(length [9 0 9 5 9]) -> 5", "(length [9]) -> 1", "(length [7 8]) -> 2", "(length [2 9]) -> 2", "(length [6 3]) -> 2", "(length [8 9 5]) -> 3", "(length [3 1 4 6 0]) -> 5", "(length [5 3 5 2]) -> 4", "(length [0 0]) -> 2"], "time": 0.05145, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [4 6 8 8 2]) -> 5", "(length [1]) -> 1", "(length [5 3]) -> 2", "(length [6 2 0 4 1]) -> 5", "(length [4 3 1 7 2]) -> 5", "(length [4 6 0]) -> 3", "(length []) -> 0", "(length [6 7 9 0]) -> 4", "(length [8 0 2 2]) -> 4", "(length [4]) -> 1", "(length [7 7 3 3]) -> 4", "(length [1]) -> 1", "(length [4 7]) -> 2", "(length [2]) -> 1", "(length [0]) -> 1", "(length [0 3 5 4]) -> 4", "(length [4]) -> 1", "(length [7 3 0 6 4]) -> 5", "(length [3 6 4]) -> 3", "(length [5]) -> 1", "(length [1 1]) -> 2"], "time": 0.032279, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 8 1 0 4]) -> 5", "(length [2 9 4]) -> 3", "(length [2 7 2]) -> 3", "(length [2 6]) -> 2", "(length [4]) -> 1", "(length []) -> 0", "(length [4 7 8 2]) -> 4", "(length [7 5 1]) -> 3", "(length [3 9 0]) -> 3", "(length [6 1]) -> 2", "(length [5 4 2]) -> 3", "(length [5 3 4 2 3]) -> 5", "(length [1 7 5 1]) -> 4", "(length [7]) -> 1", "(length [9 4 8]) -> 3", "(length [1 5]) -> 2", "(length [5 9 5]) -> 3", "(length [8 0 0]) -> 3", "(length []) -> 0", "(length [6 3 5 6]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length [8 1 0 9]) -> 4"], "time": 0.037776, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6]) -> 1", "(length [4 6]) -> 2", "(length [9 8 7 0]) -> 4", "(length [8]) -> 1", "(length [4 4 2]) -> 3", "(length [3 0 1 2 9]) -> 5", "(length [8 6 0 3]) -> 4", "(length [3 5 7]) -> 3", "(length [2 3 0]) -> 3", "(length [9 7 0 0 4]) -> 5", "(length [7]) -> 1", "(length [0]) -> 1", "(length [8 5 0]) -> 3", "(length [9 3 0]) -> 3", "(length [7 0]) -> 2", "(length []) -> 0", "(length [8 1 0 9 3]) -> 5", "(length [6 7]) -> 2", "(length [1 2]) -> 2", "(length [9 6 1 3]) -> 4", "(length []) -> 0", "(length [1 7]) -> 2", "(length [5 7]) -> 2"], "time": 0.04391, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6 6 1]) -> 3", "(length [9 7 0 5]) -> 4", "(length [2 2 0 9 7]) -> 5", "(length [4]) -> 1", "(length [0 3 6 1]) -> 4", "(length [1]) -> 1", "(length [2 3 9 6 0]) -> 5", "(length [3 4 6 0]) -> 4", "(length [5 4 5]) -> 3", "(length [3]) -> 1", "(length [7]) -> 1", "(length []) -> 0", "(length [0 4]) -> 2", "(length [1 5 0]) -> 3", "(length [0 3 4 7 5]) -> 5", "(length [8 1 7 9]) -> 4", "(length [8]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [3 5 4 8]) -> 4", "(length [5 0 9]) -> 3", "(length [3 1 6 7]) -> 4", "(length [8 9 3 1 9]) -> 5"], "time": 0.030894, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 7 9 4]) -> 4", "(length [1 2 8 5]) -> 4", "(length [5]) -> 1", "(length []) -> 0", "(length [9 3]) -> 2", "(length [6 9]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [8 5 1]) -> 3", "(length [7 0 5 8]) -> 4", "(length [8 9 8 9 3]) -> 5", "(length [1 4 3 3 5]) -> 5", "(length [9]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [8]) -> 1", "(length [9 2]) -> 2", "(length [1 0]) -> 2", "(length [8 7]) -> 2", "(length [2 3 0 4]) -> 4", "(length [0 6 0 3]) -> 4", "(length [8 7 4 8]) -> 4", "(length [7 9]) -> 2"], "time": 0.036537, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 6 8]) -> 3", "(length [8]) -> 1", "(length [9 2 7 2 8]) -> 5", "(length []) -> 0", "(length [5]) -> 1", "(length [0 7]) -> 2", "(length [9 3]) -> 2", "(length [7 5 0]) -> 3", "(length []) -> 0", "(length [4 9 2]) -> 3", "(length [8 3 2]) -> 3", "(length [2 9 2 0]) -> 4", "(length [7]) -> 1", "(length [9 4 6]) -> 3", "(length [8 6]) -> 2", "(length [0 0 5]) -> 3", "(length [2 6]) -> 2", "(length [5 8 6 8 0]) -> 5", "(length []) -> 0", "(length [4 0 9 3]) -> 4", "(length [8 8]) -> 2", "(length [9 2 3 7 1]) -> 5", "(length [8]) -> 1"], "time": 0.037453, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 9]) -> 2", "(length [3 7 8 3 6]) -> 5", "(length []) -> 0", "(length [6]) -> 1", "(length [3]) -> 1", "(length [7 9]) -> 2", "(length [6]) -> 1", "(length [2]) -> 1", "(length [2]) -> 1", "(length [4 0]) -> 2", "(length [0 3]) -> 2", "(length []) -> 0", "(length [2 4 5 4]) -> 4", "(length [8 7 3 7 8]) -> 5", "(length [6]) -> 1", "(length [8 6 1]) -> 3", "(length [0]) -> 1", "(length [1 2 1 9]) -> 4", "(length []) -> 0", "(length [4]) -> 1", "(length [0]) -> 1", "(length [6 4]) -> 2", "(length [8 2 8 1]) -> 4"], "time": 0.041438, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 3]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [2]) -> 1", "(length [9 2 2 2]) -> 4", "(length [0 9 7]) -> 3", "(length [5]) -> 1", "(length [8 7]) -> 2", "(length [9 4 2]) -> 3", "(length [6 9]) -> 2", "(length [1 2]) -> 2", "(length [2 3]) -> 2", "(length []) -> 0", "(length [9 5 6 2]) -> 4", "(length [6 5 6 2 5]) -> 5", "(length [8 9 1]) -> 3", "(length [6 9]) -> 2", "(length [0 1 3 8 3]) -> 5", "(length [7 1 1 9 9]) -> 5", "(length [7 5 9]) -> 3", "(length [9 3 5 7 6]) -> 5", "(length [3 9 4]) -> 3", "(length [5 6 8 8]) -> 4"], "time": 0.039655, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 0 4 2]) -> 4", "(length [4 4 7]) -> 3", "(length [2 0 1 2 7]) -> 5", "(length [1 3 3 9]) -> 4", "(length []) -> 0", "(length [4 0 3 8 0]) -> 5", "(length [4 9 1 8 8]) -> 5", "(length [4 6]) -> 2", "(length [0 5 2 6 5]) -> 5", "(length []) -> 0", "(length [1]) -> 1", "(length [3 6]) -> 2", "(length [9 7]) -> 2", "(length [4 4 8 7]) -> 4", "(length [6]) -> 1", "(length [6]) -> 1", "(length [7 0 4]) -> 3", "(length [4 1]) -> 2", "(length [5 0 2 1]) -> 4", "(length [5 3 9 6]) -> 4", "(length []) -> 0", "(length [5 3 9]) -> 3", "(length [4 1 9]) -> 3"], "time": 0.048584, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 1 8 8 7]) -> 5", "(length [0 3 3 0]) -> 4", "(length [3 5 0]) -> 3", "(length [5 6]) -> 2", "(length []) -> 0", "(length [6 3]) -> 2", "(length [7]) -> 1", "(length [5 0 4]) -> 3", "(length [8 6 1]) -> 3", "(length [3 9 7]) -> 3", "(length [6 0 6 0]) -> 4", "(length [7 0 7 7 4]) -> 5", "(length [3]) -> 1", "(length [4 7 4 1 3]) -> 5", "(length [9]) -> 1", "(length [9]) -> 1", "(length [0 5 6]) -> 3", "(length [1 2 6]) -> 3", "(length [2 6]) -> 2", "(length [4 8 2 5]) -> 4", "(length [7 0]) -> 2", "(length [6 6]) -> 2", "(length []) -> 0"], "time": 0.033312, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 9]) -> 2", "(length [9 7 9 4 0]) -> 5", "(length [8 0 9]) -> 3", "(length [8 7]) -> 2", "(length [8]) -> 1", "(length []) -> 0", "(length [0 0]) -> 2", "(length []) -> 0", "(length [6 8]) -> 2", "(length [1 3 3 0 7]) -> 5", "(length [2]) -> 1", "(length [7 1 0 3]) -> 4", "(length [8 7 4 6 9]) -> 5", "(length [6 5]) -> 2", "(length [6 1 5 4 1]) -> 5", "(length [1 0 7 4 0]) -> 5", "(length [8 2 4 4 4]) -> 5", "(length [3]) -> 1", "(length [2 5]) -> 2", "(length [4 7 6]) -> 3", "(length []) -> 0", "(length [0 2 6]) -> 3", "(length [9 4 7 2 9]) -> 5"], "time": 0.038094, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 8 3]) -> 3", "(length [2 7 2]) -> 3", "(length [2]) -> 1", "(length [7 5 2 6 3]) -> 5", "(length [5 2 8]) -> 3", "(length [3 8 3 6 3]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [5 4 9 9 6]) -> 5", "(length [3 3 8]) -> 3", "(length []) -> 0", "(length [2 3 6]) -> 3", "(length [0 9 1 4]) -> 4", "(length [7 6]) -> 2", "(length [9 4]) -> 2", "(length [4]) -> 1", "(length [3 0 2]) -> 3", "(length [1 9 9]) -> 3", "(length [2 5 3 2]) -> 4", "(length [1 2]) -> 2", "(length []) -> 0", "(length [6 6]) -> 2", "(length [0]) -> 1"], "time": 0.030841, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 1 7 2 5]) -> 5", "(length [1 0 9 0 2]) -> 5", "(length [4 9 2 9]) -> 4", "(length [4 8 9 4]) -> 4", "(length []) -> 0", "(length [6 3 1]) -> 3", "(length [3 4]) -> 2", "(length [0 4 2]) -> 3", "(length [5 6 7 2]) -> 4", "(length [9 5]) -> 2", "(length [9 4]) -> 2", "(length []) -> 0", "(length [4 3 9 1 0]) -> 5", "(length [5 0]) -> 2", "(length [9 7 4]) -> 3", "(length [8 9 3]) -> 3", "(length [5 2 6]) -> 3", "(length [3 5]) -> 2", "(length [4 0 1 6]) -> 4", "(length [1 5 6 4 5]) -> 5", "(length [8 6 1]) -> 3", "(length [9 9 7 0]) -> 4", "(length [8 0]) -> 2"], "time": 0.033241, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [9 6 8 2 6]) -> 5", "(length [2 3 2 5 3]) -> 5", "(length [3 1 0 6]) -> 4", "(length [4 0 2 2 3]) -> 5", "(length [7 0]) -> 2", "(length [0]) -> 1", "(length [2 7]) -> 2", "(length [6 8 3 4]) -> 4", "(length [0 0]) -> 2", "(length []) -> 0", "(length [3 9 5 1]) -> 4", "(length [8 2]) -> 2", "(length [7 5]) -> 2", "(length [6 3]) -> 2", "(length [0 0 3]) -> 3", "(length []) -> 0", "(length [2 8 9 6]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length [6 3 6 2]) -> 4", "(length [3 2 5]) -> 3"], "time": 0.041242, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8 4 1 6 7]) -> 5", "(length [7 9]) -> 2", "(length [0 9 8 1]) -> 4", "(length [2 4 9]) -> 3", "(length [0 0 6 7]) -> 4", "(length [2]) -> 1", "(length [7]) -> 1", "(length [6]) -> 1", "(length [3 3 4 7]) -> 4", "(length []) -> 0", "(length [0 3 6 5 1]) -> 5", "(length [8]) -> 1", "(length [9 9 3 3 5]) -> 5", "(length [4 5 3 3 1]) -> 5", "(length [9 0 6]) -> 3", "(length [2 8 2 3]) -> 4", "(length [3 9 8]) -> 3", "(length [0 8 3 4]) -> 4", "(length []) -> 0", "(length [8 8 8]) -> 3", "(length [2 6 3 0]) -> 4", "(length [2 1 9]) -> 3", "(length []) -> 0"], "time": 0.030631, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 4 3 4]) -> 4", "(length []) -> 0", "(length [2 8]) -> 2", "(length [0]) -> 1", "(length [9 3]) -> 2", "(length []) -> 0", "(length [3 2 1 0 9]) -> 5", "(length [9 2]) -> 2", "(length []) -> 0", "(length [6 8 3]) -> 3", "(length [0 7]) -> 2", "(length [6 4 0 8 3]) -> 5", "(length [4 5 1 7 1]) -> 5", "(length [0 1]) -> 2", "(length [3 7 0 6 8]) -> 5", "(length []) -> 0", "(length [5 4 8 0]) -> 4", "(length [7 6 6]) -> 3", "(length [7 3 2]) -> 3", "(length [0 4 6 1 1]) -> 5", "(length [1 3 5]) -> 3", "(length [0 9 1]) -> 3", "(length [3 1 3 5]) -> 4"], "time": 0.031555, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1]) -> 1", "(length [0 6 8 6 0]) -> 5", "(length [1 7]) -> 2", "(length [9 5 2]) -> 3", "(length [4 7 8]) -> 3", "(length []) -> 0", "(length [1 6 2]) -> 3", "(length [2 1 7 5 7]) -> 5", "(length [9]) -> 1", "(length []) -> 0", "(length [2 1 8 6]) -> 4", "(length [7 1 5]) -> 3", "(length [9 1 8 5 4]) -> 5", "(length []) -> 0", "(length [5]) -> 1", "(length [0]) -> 1", "(length []) -> 0", "(length [6 4 4 0]) -> 4", "(length [5 0 4]) -> 3", "(length [0 8 1 2 7]) -> 5", "(length [1 3 8 8 3]) -> 5", "(length [9 9]) -> 2", "(length [8 8 7 3]) -> 4"], "time": 0.031506, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 5 1 9 8]) -> 5", "(length [1 2 6]) -> 3", "(length [5 7 5 7]) -> 4", "(length []) -> 0", "(length [4]) -> 1", "(length [8]) -> 1", "(length []) -> 0", "(length [8 6 8 9]) -> 4", "(length [2 4 3 6]) -> 4", "(length [2 4 9]) -> 3", "(length [3 4 2 9 6]) -> 5", "(length [3 8]) -> 2", "(length [7 2 2 1 8]) -> 5", "(length [4 7 2 0 6]) -> 5", "(length [9 2 6 2 1]) -> 5", "(length [3 1 1 4 7]) -> 5", "(length [9 2 7]) -> 3", "(length [5 1 5 3]) -> 4", "(length [9 8 9 0]) -> 4", "(length [7]) -> 1", "(length [9]) -> 1", "(length [8 2 5 6 9]) -> 5", "(length [9 6 5]) -> 3"], "time": 0.03027, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [0 6 6 0 2]) -> 5", "(length [5 0 5 2 6]) -> 5", "(length []) -> 0", "(length [8 6]) -> 2", "(length [9]) -> 1", "(length [4 8 5]) -> 3", "(length [0]) -> 1", "(length []) -> 0", "(length [2 4 2 8 7]) -> 5", "(length [9 1 1 0 0]) -> 5", "(length [7]) -> 1", "(length [8 9]) -> 2", "(length [1 9 4]) -> 3", "(length [3 2 8 9]) -> 4", "(length [9 9 8 1 4]) -> 5", "(length [4 7 2 1]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length [3 2 6]) -> 3", "(length [7 8 3 1]) -> 4", "(length [4 1 0]) -> 3"], "time": 0.031942, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 0 4 1 2]) -> 5", "(length [2]) -> 1", "(length [3 2 5]) -> 3", "(length [8 5]) -> 2", "(length [7 8 2 1]) -> 4", "(length [1 5]) -> 2", "(length [7 4 5 0]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length [7 7 9]) -> 3", "(length [2 7]) -> 2", "(length [1 3]) -> 2", "(length []) -> 0", "(length [1 5 3]) -> 3", "(length [5 5 7 4 1]) -> 5", "(length [9 2]) -> 2", "(length []) -> 0", "(length [0 0 3]) -> 3", "(length [7 1 2 4 8]) -> 5", "(length [8 2 7]) -> 3", "(length [0 3]) -> 2", "(length []) -> 0", "(length []) -> 0"], "time": 0.02973, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
