{"name": "shiftl", "time": 0.770865, "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [5 9 5]) -> [9 5 5]", "(shiftl [5 3]) -> [3 5]", "(shiftl [1 3 2 2]) -> [3 2 2 1]", "(shiftl [8 7 8]) -> [7 8 8]", "(shiftl [2]) -> [2]"]}
{"name": "shiftl", "time": 0.879608, "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [9 3]) -> [3 9]", "(shiftl [3 9 3]) -> [9 3 3]", "(shiftl [4]) -> [4]", "(shiftl [2 7 5]) -> [7 5 2]", "(shiftl [2 6 0]) -> [6 0 2]"]}
{"name": "shiftl", "time": 0.919545, "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [0]) -> [0]", "(shiftl [9]) -> [9]", "(shiftl [4 6 9]) -> [6 9 4]", "(shiftl [6 6]) -> [6 6]", "(shiftl [8]) -> [8]"]}
{"name": "shiftl", "time": 1.081875, "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [4]) -> [4]", "(shiftl [9 5 4]) -> [5 4 9]", "(shiftl [4 7 0]) -> [7 0 4]", "(shiftl [7 7]) -> [7 7]", "(shiftl [7]) -> [7]"]}
{"name": "shiftl", "time": 1.114409, "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [9 6 1]) -> [6 1 9]", "(shiftl [4]) -> [4]", "(shiftl [2]) -> [2]", "(shiftl [1]) -> [1]", "(shiftl [0 2 5]) -> [2 5 0]"]}
{"name": "shiftl", "time": 2.983425, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0]) -> [0]", "(shiftl [4 0 5]) -> [0 5 4]", "(shiftl [5 1 3 7 9]) -> [1 3 7 9 5]", "(shiftl [2]) -> [2]", "(shiftl [5 8 9]) -> [8 9 5]"]}
{"name": "shiftl", "time": 2.728875, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3]) -> [3]", "(shiftl [0 6 6 4 9]) -> [6 6 4 9 0]", "(shiftl [5 0]) -> [0 5]", "(shiftl [2 2]) -> [2 2]", "(shiftl [0 7 8 2]) -> [7 8 2 0]"]}
{"name": "shiftl", "time": 3.13018, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7]) -> [7]", "(shiftl [9 2 9 9]) -> [2 9 9 9]", "(shiftl [5 6 3 9 6]) -> [6 3 9 6 5]", "(shiftl [5 9]) -> [9 5]", "(shiftl [6 4 1 3 2]) -> [4 1 3 2 6]"]}
{"name": "shiftl", "time": 3.205689, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 6]) -> [6 8]", "(shiftl [5]) -> [5]", "(shiftl [0 2 6 8 9]) -> [2 6 8 9 0]", "(shiftl [2 8]) -> [8 2]", "(shiftl [6 3 5]) -> [3 5 6]"]}
{"name": "shiftl", "time": 3.199064, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 8 1]) -> [8 1 9]", "(shiftl [3 8 6 2 2]) -> [8 6 2 2 3]", "(shiftl [5 4 2 3 1]) -> [4 2 3 1 5]", "(shiftl [1 1 1 3 1]) -> [1 1 3 1 1]", "(shiftl [2 6 9 2]) -> [6 9 2 2]"]}
{"name": "shiftl", "time": 3.096588, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0 4 3 3 8]) -> [4 3 3 8 0]", "(shiftl [0]) -> [0]", "(shiftl [2]) -> [2]", "(shiftl [5 8 6 2]) -> [8 6 2 5]", "(shiftl [3 2]) -> [2 3]"]}
{"name": "shiftl", "time": 3.233514, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0 3 9 7]) -> [3 9 7 0]", "(shiftl [5 4]) -> [4 5]", "(shiftl [4 3 5]) -> [3 5 4]", "(shiftl [3 0 2 6]) -> [0 2 6 3]", "(shiftl [8 7 3 8 1]) -> [7 3 8 1 8]"]}
{"name": "shiftl", "time": 3.384791, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6]) -> [6]", "(shiftl [0 7 1 4]) -> [7 1 4 0]", "(shiftl [7]) -> [7]", "(shiftl [5 5]) -> [5 5]", "(shiftl [4]) -> [4]"]}
{"name": "shiftl", "time": 3.253313, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 6 5 7]) -> [6 5 7 1]", "(shiftl [9 3 1 5]) -> [3 1 5 9]", "(shiftl [1]) -> [1]", "(shiftl [0 7 4]) -> [7 4 0]", "(shiftl [1 5 3 9 4]) -> [5 3 9 4 1]"]}
{"name": "shiftl", "time": 2.15603, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2]) -> [2]", "(shiftl [7 4]) -> [4 7]", "(shiftl [3 7]) -> [7 3]", "(shiftl [7 5 4 5 0]) -> [5 4 5 0 7]", "(shiftl [3 9 2]) -> [9 2 3]"]}
{"name": "shiftl", "time": 3.28058, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 7 2 0]) -> [7 2 0 9]", "(shiftl [1]) -> [1]", "(shiftl [4 3 0 9 7]) -> [3 0 9 7 4]", "(shiftl [7 4]) -> [4 7]", "(shiftl [6 1]) -> [1 6]"]}
{"name": "shiftl", "time": 3.452223, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [4 3 5 9 8]) -> [3 5 9 8 4]", "(shiftl [3]) -> [3]", "(shiftl [1 9]) -> [9 1]", "(shiftl [9 9]) -> [9 9]", "(shiftl [4 7 4 2 3]) -> [7 4 2 3 4]"]}
{"name": "shiftl", "time": 0.483341, "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [1 1 8]) -> [1 8 1]", "(shiftl [4]) -> [4]", "(shiftl [9 1 7]) -> [1 7 9]", "(shiftl [2]) -> [2]", "(shiftl [2 4]) -> [4 2]"]}
{"name": "shiftl", "time": 2.64596, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 5]) -> [5 1]", "(shiftl [7 3 5 8 1]) -> [3 5 8 1 7]", "(shiftl [4 8 1]) -> [8 1 4]", "(shiftl [2 4 0 4 1]) -> [4 0 4 1 2]", "(shiftl [1 0 6 7]) -> [0 6 7 1]"]}
{"name": "shiftl", "time": 2.754506, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9]) -> [9]", "(shiftl [6 0]) -> [0 6]", "(shiftl [8 6 7 0]) -> [6 7 0 8]", "(shiftl [1 2 4 0]) -> [2 4 0 1]", "(shiftl [6 5 2 9 4]) -> [5 2 9 4 6]"]}
{"name": "shiftl", "time": 2.27201, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 4]) -> [4 8]", "(shiftl [5]) -> [5]", "(shiftl [9 3 5 9 6]) -> [3 5 9 6 9]", "(shiftl [6 8]) -> [8 6]", "(shiftl [4 7]) -> [7 4]"]}
{"name": "shiftl", "time": 2.8853, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [4 9 6 7]) -> [9 6 7 4]", "(shiftl [1]) -> [1]", "(shiftl [2 7 6 8 5]) -> [7 6 8 5 2]", "(shiftl [6 8 8 8 9]) -> [8 8 8 9 6]", "(shiftl [5 5 7 2 7]) -> [5 7 2 7 5]"]}
{"name": "shiftl", "time": 1.598367, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6 0]) -> [0 6]", "(shiftl [2 3 4 4 0]) -> [3 4 4 0 2]", "(shiftl [8 9 7]) -> [9 7 8]", "(shiftl [4 9 9 1]) -> [9 9 1 4]", "(shiftl [9]) -> [9]"]}
{"name": "shiftl", "time": 0.352164, "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [9]) -> [9]", "(shiftl [5 6 5]) -> [6 5 5]", "(shiftl [8 3]) -> [3 8]", "(shiftl [4 0 1 1]) -> [0 1 1 4]", "(shiftl [9 2 6]) -> [2 6 9]"]}
{"name": "shiftl", "time": 1.665116, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 5]) -> [5 9]", "(shiftl [7]) -> [7]", "(shiftl [9 6 1 2 6]) -> [6 1 2 6 9]", "(shiftl [3 0 9 3]) -> [0 9 3 3]", "(shiftl [8 1 7 2 3]) -> [1 7 2 3 8]"]}
{"name": "shiftl", "time": 1.733961, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6 7 6 0]) -> [7 6 0 6]", "(shiftl [2 9]) -> [9 2]", "(shiftl [8 7 3 0]) -> [7 3 0 8]", "(shiftl [6 6]) -> [6 6]", "(shiftl [9]) -> [9]"]}
{"name": "shiftl", "time": 1.76094, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 0 9 1]) -> [0 9 1 5]", "(shiftl [4 6]) -> [6 4]", "(shiftl [6 0]) -> [0 6]", "(shiftl [4]) -> [4]", "(shiftl [6 7]) -> [7 6]"]}
{"name": "shiftl", "time": 1.440455, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0 1]) -> [1 0]", "(shiftl [0 5]) -> [5 0]", "(shiftl [7 8 2 8 5]) -> [8 2 8 5 7]", "(shiftl [7]) -> [7]", "(shiftl [4 6 6]) -> [6 6 4]"]}
{"name": "shiftl", "time": 2.751083, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 8 9 6 3]) -> [8 9 6 3 3]", "(shiftl [6 0]) -> [0 6]", "(shiftl [6 3]) -> [3 6]", "(shiftl [6 0]) -> [0 6]", "(shiftl [3 3 1 7]) -> [3 1 7 3]"]}
{"name": "shiftl", "time": 2.54999, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [4 9 7 6]) -> [9 7 6 4]", "(shiftl [2 7 2]) -> [7 2 2]", "(shiftl [6 9 7 3 7]) -> [9 7 3 7 6]", "(shiftl [9 1]) -> [1 9]", "(shiftl [2]) -> [2]"]}
{"name": "shiftl", "time": 2.492142, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 0 9]) -> [0 9 9]", "(shiftl [1 7]) -> [7 1]", "(shiftl [1 7]) -> [7 1]", "(shiftl [5 3 4 6 6]) -> [3 4 6 6 5]", "(shiftl [3 4 1 4 1]) -> [4 1 4 1 3]"]}
{"name": "shiftl", "time": 2.792375, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 4 1]) -> [4 1 7]", "(shiftl [8 1 5 5]) -> [1 5 5 8]", "(shiftl [4 8 4 3 3]) -> [8 4 3 3 4]", "(shiftl [2 0]) -> [0 2]", "(shiftl [8 7]) -> [7 8]"]}
{"name": "shiftl", "time": 2.663445, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5]) -> [5]", "(shiftl [1 2 8 6 5]) -> [2 8 6 5 1]", "(shiftl [2 9 3]) -> [9 3 2]", "(shiftl [8 9 4 9 8]) -> [9 4 9 8 8]", "(shiftl [7 9 2 3 2]) -> [9 2 3 2 7]"]}
{"name": "shiftl", "time": 2.928491, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 2 4 8]) -> [2 4 8 1]", "(shiftl [2 8 0 8]) -> [8 0 8 2]", "(shiftl [2]) -> [2]", "(shiftl [6 1 3 3 0]) -> [1 3 3 0 6]", "(shiftl [6 2]) -> [2 6]"]}
{"name": "shiftl", "time": 2.572948, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 7 3 3]) -> [7 3 3 1]", "(shiftl [9 6 2 0 2]) -> [6 2 0 2 9]", "(shiftl [6 3 2]) -> [3 2 6]", "(shiftl [6]) -> [6]", "(shiftl [8]) -> [8]"]}
{"name": "shiftl", "time": 3.137038, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0 5 2 7]) -> [5 2 7 0]", "(shiftl [1 3 3 5 8]) -> [3 3 5 8 1]", "(shiftl [3 2 2 7 8]) -> [2 2 7 8 3]", "(shiftl [7 4 1]) -> [4 1 7]", "(shiftl [1 7]) -> [7 1]"]}
{"name": "shiftl", "time": 3.096038, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 3 4 6]) -> [3 4 6 7]", "(shiftl [0 1 3 5 2]) -> [1 3 5 2 0]", "(shiftl [5 2 4 7 0]) -> [2 4 7 0 5]", "(shiftl [4 3 6]) -> [3 6 4]", "(shiftl [4 8 4 1 7]) -> [8 4 1 7 4]"]}
{"name": "shiftl", "time": 2.009138, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6 9 8 6]) -> [9 8 6 6]", "(shiftl [8 9]) -> [9 8]", "(shiftl [3 0 8 5 7]) -> [0 8 5 7 3]", "(shiftl [0 9 9 8]) -> [9 9 8 0]", "(shiftl [7 9 0]) -> [9 0 7]"]}
{"name": "shiftl", "time": 2.115861, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 1 8 9]) -> [1 8 9 1]", "(shiftl [3 2 7 8 2]) -> [2 7 8 2 3]", "(shiftl [6 9 0 7]) -> [9 0 7 6]", "(shiftl [9 6]) -> [6 9]", "(shiftl [1 8 5 9 5]) -> [8 5 9 5 1]"]}
{"name": "shiftl", "time": 0.001215, "solution": "(let shiftl (let a (lambda (b) (reverse b)) _) _)", "examples": ["(shiftl [8]) -> [8]", "(shiftl [2 5]) -> [5 2]", "(shiftl [9 4]) -> [4 9]", "(shiftl [2 4]) -> [4 2]", "(shiftl [2]) -> [2]"]}
{"name": "shiftl", "time": 3.189791, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 2 4 3]) -> [2 4 3 9]", "(shiftl [0]) -> [0]", "(shiftl [9]) -> [9]", "(shiftl [0 6]) -> [6 0]", "(shiftl [2 3]) -> [3 2]"]}
{"name": "shiftl", "time": 2.150193, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 9 4 8]) -> [9 4 8 3]", "(shiftl [7 3 2 2]) -> [3 2 2 7]", "(shiftl [5 5 6 9 8]) -> [5 6 9 8 5]", "(shiftl [6]) -> [6]", "(shiftl [1 6]) -> [6 1]"]}
{"name": "shiftl", "time": 2.175987, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 8 1 3 3]) -> [8 1 3 3 3]", "(shiftl [6 0]) -> [0 6]", "(shiftl [0 0 6 3 1]) -> [0 6 3 1 0]", "(shiftl [8 2]) -> [2 8]", "(shiftl [6 8 1 2]) -> [8 1 2 6]"]}
{"name": "shiftl", "time": 2.530296, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [4]) -> [4]", "(shiftl [4 2]) -> [2 4]", "(shiftl [1 1]) -> [1 1]", "(shiftl [5 0 6 8 1]) -> [0 6 8 1 5]", "(shiftl [5 7]) -> [7 5]"]}
{"name": "shiftl", "time": 1.827597, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1]) -> [1]", "(shiftl [2]) -> [2]", "(shiftl [5 4 3 9 5]) -> [4 3 9 5 5]", "(shiftl [1]) -> [1]", "(shiftl [0 5 4]) -> [5 4 0]"]}
{"name": "shiftl", "time": 0.504889, "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [4 7 3]) -> [7 3 4]", "(shiftl [7]) -> [7]", "(shiftl [4 9]) -> [9 4]", "(shiftl [5 3]) -> [3 5]", "(shiftl [4 5 7 7]) -> [5 7 7 4]"]}
{"name": "shiftl", "time": 2.196462, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 4 6 2]) -> [4 6 2 9]", "(shiftl [4 9 4]) -> [9 4 4]", "(shiftl [2 0 8 0 8]) -> [0 8 0 8 2]", "(shiftl [8 0 1 4 0]) -> [0 1 4 0 8]", "(shiftl [0]) -> [0]"]}
{"name": "shiftl", "time": 2.049444, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 5 9 3]) -> [5 9 3 5]", "(shiftl [9 4 2 2 3]) -> [4 2 2 3 9]", "(shiftl [7 3 2 4]) -> [3 2 4 7]", "(shiftl [6 5 9 0]) -> [5 9 0 6]", "(shiftl [6 1]) -> [1 6]"]}
{"name": "shiftl", "time": 1.886447, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1]) -> [1]", "(shiftl [9 1 4]) -> [1 4 9]", "(shiftl [1 3]) -> [3 1]", "(shiftl [8 9 7 6 9]) -> [9 7 6 9 8]", "(shiftl [8 3 2 3 7]) -> [3 2 3 7 8]"]}
{"name": "shiftl", "time": 2.142764, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 8 6]) -> [8 6 3]", "(shiftl [6]) -> [6]", "(shiftl [2 6 7 9 6]) -> [6 7 9 6 2]", "(shiftl [0 0 8 6 5]) -> [0 8 6 5 0]", "(shiftl [0]) -> [0]"]}
{"name": "shiftl", "time": 2.398324, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 0 1 2]) -> [0 1 2 5]", "(shiftl [7 2 9 5 2]) -> [2 9 5 2 7]", "(shiftl [8]) -> [8]", "(shiftl [9 5 8 7]) -> [5 8 7 9]", "(shiftl [5 4 9 1]) -> [4 9 1 5]"]}
{"name": "shiftl", "time": 1.512178, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0 1 2]) -> [1 2 0]", "(shiftl [7 6 7]) -> [6 7 7]", "(shiftl [5 8 4 4]) -> [8 4 4 5]", "(shiftl [4 2 1 0 5]) -> [2 1 0 5 4]", "(shiftl [3 6 0]) -> [6 0 3]"]}
{"name": "shiftl", "time": 1.568989, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0 9 9 8]) -> [9 9 8 0]", "(shiftl [8 1]) -> [1 8]", "(shiftl [8 7 9 4]) -> [7 9 4 8]", "(shiftl [4 1 1 8]) -> [1 1 8 4]", "(shiftl [4 4 2 1]) -> [4 2 1 4]"]}
{"name": "shiftl", "time": 2.605682, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 2 9 4 3]) -> [2 9 4 3 3]", "(shiftl [8 9 0 9 7]) -> [9 0 9 7 8]", "(shiftl [5]) -> [5]", "(shiftl [4 0 5 4]) -> [0 5 4 4]", "(shiftl [5 5]) -> [5 5]"]}
{"name": "shiftl", "time": 1.928693, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 9 5 2]) -> [9 5 2 2]", "(shiftl [9]) -> [9]", "(shiftl [4 7]) -> [7 4]", "(shiftl [4 2]) -> [2 4]", "(shiftl [9]) -> [9]"]}
{"name": "shiftl", "time": 0.001061, "solution": "(let shiftl (let a (lambda (b) (reverse b)) _) _)", "examples": ["(shiftl [7]) -> [7]", "(shiftl [9 2]) -> [2 9]", "(shiftl [0 5 5]) -> [5 5 0]", "(shiftl [9]) -> [9]", "(shiftl [2]) -> [2]"]}
{"name": "shiftl", "time": 1.80671, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 1 4]) -> [1 4 3]", "(shiftl [2 1]) -> [1 2]", "(shiftl [8 0]) -> [0 8]", "(shiftl [2 0 3 5]) -> [0 3 5 2]", "(shiftl [5 3 9]) -> [3 9 5]"]}
{"name": "shiftl", "time": 2.995959, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 1 1 6 5]) -> [1 1 6 5 9]", "(shiftl [3 6]) -> [6 3]", "(shiftl [3 8]) -> [8 3]", "(shiftl [3 8 4 2 0]) -> [8 4 2 0 3]", "(shiftl [6 3 3]) -> [3 3 6]"]}
{"name": "shiftl", "time": 1.354556, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2]) -> [2]", "(shiftl [9 8]) -> [8 9]", "(shiftl [3]) -> [3]", "(shiftl [5 2]) -> [2 5]", "(shiftl [3 1 0 6 0]) -> [1 0 6 0 3]"]}
{"name": "shiftl", "time": 2.460064, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7]) -> [7]", "(shiftl [0 4 9 5 4]) -> [4 9 5 4 0]", "(shiftl [2 6 7 8 5]) -> [6 7 8 5 2]", "(shiftl [4 6 3 0]) -> [6 3 0 4]", "(shiftl [8 8 3 8 2]) -> [8 3 8 2 8]"]}
{"name": "shiftl", "time": 2.815135, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6]) -> [6]", "(shiftl [4 5 8]) -> [5 8 4]", "(shiftl [3 0 4 4 5]) -> [0 4 4 5 3]", "(shiftl [5 9 1]) -> [9 1 5]", "(shiftl [9 7 8]) -> [7 8 9]"]}
{"name": "shiftl", "time": 2.838008, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0 3 6]) -> [3 6 0]", "(shiftl [1 3 8]) -> [3 8 1]", "(shiftl [3 1 5 1]) -> [1 5 1 3]", "(shiftl [9 1 8 5 2]) -> [1 8 5 2 9]", "(shiftl [9 8]) -> [8 9]"]}
{"name": "shiftl", "time": 2.688279, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 8]) -> [8 1]", "(shiftl [3 9 4 8 2]) -> [9 4 8 2 3]", "(shiftl [7 1 4 6]) -> [1 4 6 7]", "(shiftl [3]) -> [3]", "(shiftl [4 7]) -> [7 4]"]}
{"name": "shiftl", "time": 1.533633, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 0 8 5]) -> [0 8 5 5]", "(shiftl [2 0 3 1 3]) -> [0 3 1 3 2]", "(shiftl [3]) -> [3]", "(shiftl [9]) -> [9]", "(shiftl [4 2 1]) -> [2 1 4]"]}
{"name": "shiftl", "time": 2.927411, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9]) -> [9]", "(shiftl [6 3 8]) -> [3 8 6]", "(shiftl [5 6 7 1]) -> [6 7 1 5]", "(shiftl [0 8 8 7 6]) -> [8 8 7 6 0]", "(shiftl [0 0]) -> [0 0]"]}
{"name": "shiftl", "time": 2.835086, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6 1 6 5 8]) -> [1 6 5 8 6]", "(shiftl [0]) -> [0]", "(shiftl [3 5 6 6]) -> [5 6 6 3]", "(shiftl [9]) -> [9]", "(shiftl [9 3 4 0 0]) -> [3 4 0 0 9]"]}
{"name": "shiftl", "time": 3.11204, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 7 0]) -> [7 0 3]", "(shiftl [4 3 4]) -> [3 4 4]", "(shiftl [2 4 4 7]) -> [4 4 7 2]", "(shiftl [0 4]) -> [4 0]", "(shiftl [9 8 9 8]) -> [8 9 8 9]"]}
{"name": "shiftl", "time": 1.683106, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 3]) -> [3 2]", "(shiftl [3 0 8]) -> [0 8 3]", "(shiftl [7 8]) -> [8 7]", "(shiftl [3 8 0 2]) -> [8 0 2 3]", "(shiftl [1 3 6 1 2]) -> [3 6 1 2 1]"]}
{"name": "shiftl", "time": 2.853758, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 3]) -> [3 3]", "(shiftl [8 4 8 5 0]) -> [4 8 5 0 8]", "(shiftl [9]) -> [9]", "(shiftl [8 5 0]) -> [5 0 8]", "(shiftl [2 3 2 2 6]) -> [3 2 2 6 2]"]}
{"name": "shiftl", "time": 1.758234, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6]) -> [6]", "(shiftl [7]) -> [7]", "(shiftl [5 7 9]) -> [7 9 5]", "(shiftl [2 4 3 2]) -> [4 3 2 2]", "(shiftl [9 0 3 9 2]) -> [0 3 9 2 9]"]}
{"name": "shiftl", "time": 1.693788, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 1]) -> [1 1]", "(shiftl [6 2]) -> [2 6]", "(shiftl [0]) -> [0]", "(shiftl [6 2 4 2 7]) -> [2 4 2 7 6]", "(shiftl [0 5 8 7]) -> [5 8 7 0]"]}
{"name": "shiftl", "time": 2.121007, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 9 2 9 9]) -> [9 2 9 9 7]", "(shiftl [0 7 2]) -> [7 2 0]", "(shiftl [0 7]) -> [7 0]", "(shiftl [7]) -> [7]", "(shiftl [7]) -> [7]"]}
{"name": "shiftl", "time": 2.766527, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [4 3 3]) -> [3 3 4]", "(shiftl [2 5 0]) -> [5 0 2]", "(shiftl [8 1 3 2]) -> [1 3 2 8]", "(shiftl [6 3 6]) -> [3 6 6]", "(shiftl [4 4 0]) -> [4 0 4]"]}
{"name": "shiftl", "time": 1.690058, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 8]) -> [8 3]", "(shiftl [6 1 7 3 3]) -> [1 7 3 3 6]", "(shiftl [6 1 6 5 2]) -> [1 6 5 2 6]", "(shiftl [9 0 3 0 9]) -> [0 3 0 9 9]", "(shiftl [9 2]) -> [2 9]"]}
{"name": "shiftl", "time": 3.083627, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2]) -> [2]", "(shiftl [7 2]) -> [2 7]", "(shiftl [1 0 8 5 7]) -> [0 8 5 7 1]", "(shiftl [3 2 6 1 9]) -> [2 6 1 9 3]", "(shiftl [6 4 3 5]) -> [4 3 5 6]"]}
{"name": "shiftl", "time": 1.689612, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 6]) -> [6 3]", "(shiftl [1 1 9 6 4]) -> [1 9 6 4 1]", "(shiftl [8 5 2]) -> [5 2 8]", "(shiftl [9 2]) -> [2 9]", "(shiftl [7 1 1 1]) -> [1 1 1 7]"]}
{"name": "shiftl", "time": 2.639063, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 9 0]) -> [9 0 9]", "(shiftl [9]) -> [9]", "(shiftl [2 4]) -> [4 2]", "(shiftl [6]) -> [6]", "(shiftl [7 2 3 4]) -> [2 3 4 7]"]}
{"name": "shiftl", "time": 3.032012, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6 7 9 8 0]) -> [7 9 8 0 6]", "(shiftl [3]) -> [3]", "(shiftl [0 7 4 5 6]) -> [7 4 5 6 0]", "(shiftl [9 3]) -> [3 9]", "(shiftl [9 3 0]) -> [3 0 9]"]}
{"name": "shiftl", "time": 2.518983, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 6 0 5 7]) -> [6 0 5 7 3]", "(shiftl [0 8 3]) -> [8 3 0]", "(shiftl [2 2 8]) -> [2 8 2]", "(shiftl [8 4 6 1]) -> [4 6 1 8]", "(shiftl [0 2]) -> [2 0]"]}
{"name": "shiftl", "time": 2.518053, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 8 4 4]) -> [8 4 4 9]", "(shiftl [3 9 5 8 8]) -> [9 5 8 8 3]", "(shiftl [9 0]) -> [0 9]", "(shiftl [6]) -> [6]", "(shiftl [6 6 3 3 4]) -> [6 3 3 4 6]"]}
{"name": "shiftl", "time": 0.435431, "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [9]) -> [9]", "(shiftl [2]) -> [2]", "(shiftl [0]) -> [0]", "(shiftl [5 9]) -> [9 5]", "(shiftl [7 8 2 2]) -> [8 2 2 7]"]}
{"name": "shiftl", "time": 1.886828, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8]) -> [8]", "(shiftl [5 3 6]) -> [3 6 5]", "(shiftl [5 4 7 2]) -> [4 7 2 5]", "(shiftl [0]) -> [0]", "(shiftl [7]) -> [7]"]}
{"name": "shiftl", "time": 2.791417, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 4 8]) -> [4 8 7]", "(shiftl [1 7 4]) -> [7 4 1]", "(shiftl [0 2 2 7 2]) -> [2 2 7 2 0]", "(shiftl [3 4 3 4]) -> [4 3 4 3]", "(shiftl [5]) -> [5]"]}
{"name": "shiftl", "time": 2.069034, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 5 8]) -> [5 8 9]", "(shiftl [8 1]) -> [1 8]", "(shiftl [9 2 4 8 8]) -> [2 4 8 8 9]", "(shiftl [1 5 6 8]) -> [5 6 8 1]", "(shiftl [7]) -> [7]"]}
{"name": "shiftl", "time": 2.30714, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 9 4 2 7]) -> [9 4 2 7 8]", "(shiftl [4]) -> [4]", "(shiftl [2 1 3]) -> [1 3 2]", "(shiftl [6 3 5 9]) -> [3 5 9 6]", "(shiftl [4 4 5]) -> [4 5 4]"]}
{"name": "shiftl", "time": 2.661881, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 2 1]) -> [2 1 5]", "(shiftl [3 1 9 2]) -> [1 9 2 3]", "(shiftl [2 2 3]) -> [2 3 2]", "(shiftl [4 9 7 2]) -> [9 7 2 4]", "(shiftl [3 4 7 8]) -> [4 7 8 3]"]}
{"name": "shiftl", "time": 2.699814, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 7 4 5 7]) -> [7 4 5 7 2]", "(shiftl [7 8]) -> [8 7]", "(shiftl [3]) -> [3]", "(shiftl [2]) -> [2]", "(shiftl [1 3 8 5 8]) -> [3 8 5 8 1]"]}
{"name": "shiftl", "time": 2.043102, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3]) -> [3]", "(shiftl [7 7]) -> [7 7]", "(shiftl [5 8 5]) -> [8 5 5]", "(shiftl [7 0 5 2 4]) -> [0 5 2 4 7]", "(shiftl [3]) -> [3]"]}
{"name": "shiftl", "time": 2.091756, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3]) -> [3]", "(shiftl [7 9 2]) -> [9 2 7]", "(shiftl [2]) -> [2]", "(shiftl [5 0 9 7]) -> [0 9 7 5]", "(shiftl [8]) -> [8]"]}
{"name": "shiftl", "time": 2.304232, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 6 3 0 3]) -> [6 3 0 3 1]", "(shiftl [6 3 7 4 1]) -> [3 7 4 1 6]", "(shiftl [5 9 3 8 6]) -> [9 3 8 6 5]", "(shiftl [2 6 4]) -> [6 4 2]", "(shiftl [1 0]) -> [0 1]"]}
{"name": "shiftl", "time": 2.528634, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 1 8 0]) -> [1 8 0 5]", "(shiftl [0 1 4 6 8]) -> [1 4 6 8 0]", "(shiftl [6 0 9 1 4]) -> [0 9 1 4 6]", "(shiftl [8 4 5 9 7]) -> [4 5 9 7 8]", "(shiftl [6 6]) -> [6 6]"]}
{"name": "shiftl", "time": 2.130753, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 2]) -> [2 9]", "(shiftl [7 4 3 1]) -> [4 3 1 7]", "(shiftl [1 3]) -> [3 1]", "(shiftl [5 6]) -> [6 5]", "(shiftl [8 1 5 3 6]) -> [1 5 3 6 8]"]}
