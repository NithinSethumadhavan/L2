{"name": "max", "time": 0.001176, "solution": "(let max (let a (lambda (b) (car b)) _) _)", "examples": ["(max [9 0 1 2 2]) -> 9", "(max [2]) -> 2", "(max [6]) -> 6", "(max [6 1 0 5 5]) -> 6", "(max [3 1 1 2 1]) -> 3"]}
{"name": "max", "time": 12.949482, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 8 3 0]) -> 8", "(max [7 4 1 8]) -> 8", "(max [0 0 2]) -> 2", "(max [6 3 9 6 3]) -> 9", "(max [2 2]) -> 2"]}
{"name": "max", "time": 13.175877, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1]) -> 1", "(max [2 2 4 7]) -> 7", "(max [3 1 5]) -> 5", "(max [5 5 6 1 4]) -> 6", "(max [7]) -> 7"]}
{"name": "max", "time": 13.264543, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 7 7 3 7]) -> 7", "(max [6 6]) -> 6", "(max [4 2 9 3 2]) -> 9", "(max [1]) -> 1", "(max [6]) -> 6"]}
{"name": "max", "time": 14.561148, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 8 8 2]) -> 8", "(max [8 8 8]) -> 8", "(max [5 8 3]) -> 8", "(max [6 6 0]) -> 6", "(max [6 5 3]) -> 6"]}
{"name": "max", "time": 14.518072, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 2 4]) -> 4", "(max [4]) -> 4", "(max [2 4 1 9 2]) -> 9", "(max [4]) -> 4", "(max [4 0 0 5 9]) -> 9"]}
{"name": "max", "time": 14.665429, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 3 1]) -> 7", "(max [6 2 8]) -> 8", "(max [5 7]) -> 7", "(max [2]) -> 2", "(max [5 0 8 0 8]) -> 8"]}
{"name": "max", "time": 14.860953, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8]) -> 8", "(max [8 3 0]) -> 8", "(max [9 8 3 1]) -> 9", "(max [5]) -> 5", "(max [2 2 6]) -> 6"]}
{"name": "max", "time": 14.955214, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 1]) -> 7", "(max [7 7 4 3 6]) -> 7", "(max [2 0 2 5]) -> 5", "(max [0]) -> 0", "(max [7 7]) -> 7"]}
{"name": "max", "time": 0.028371, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(max [4 8]) -> 8", "(max [1 6 9]) -> 9", "(max [1]) -> 1", "(max [2 3 3 4]) -> 4", "(max [6]) -> 6"]}
{"name": "max", "time": 15.404777, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 6 5]) -> 9", "(max [4 4 6 1 8]) -> 8", "(max [6 6 0 2 2]) -> 6", "(max [5 8 9 9]) -> 9", "(max [7 8 3]) -> 8"]}
{"name": "max", "time": 15.593232, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 0 4 2]) -> 4", "(max [2 6 7]) -> 7", "(max [3]) -> 3", "(max [2 5]) -> 5", "(max [3 6]) -> 6"]}
{"name": "max", "time": 15.952679, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 9 5]) -> 9", "(max [6 5 7 5 7]) -> 7", "(max [5 5]) -> 5", "(max [1 6 1 7 9]) -> 9", "(max [0 1 2]) -> 2"]}
{"name": "max", "time": 16.022509, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 0 8]) -> 8", "(max [1 7]) -> 7", "(max [6 3 6]) -> 6", "(max [3 4 5]) -> 5", "(max [8 1 5 1 5]) -> 8"]}
{"name": "max", "time": 16.37191, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 4 6]) -> 6", "(max [4 0 5 1 3]) -> 5", "(max [8]) -> 8", "(max [7]) -> 7", "(max [6 5 8]) -> 8"]}
{"name": "max", "time": 16.130527, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 5 6 8]) -> 8", "(max [9 0 1]) -> 9", "(max [2 9 7 7]) -> 9", "(max [7 4 3 6 5]) -> 7", "(max [9 1]) -> 9"]}
{"name": "max", "time": 16.470672, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6]) -> 6", "(max [5 1 7 2 7]) -> 7", "(max [4 6 2 5 1]) -> 6", "(max [5 2 9 4]) -> 9", "(max [1]) -> 1"]}
{"name": "max", "time": 16.169853, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 1 c) d c)) 0)) _) _)", "examples": ["(max [5 0 2 5 1]) -> 5", "(max [4]) -> 4", "(max [3]) -> 3", "(max [0 3 1]) -> 3", "(max [5 8]) -> 8"]}
{"name": "max", "time": 7.80872, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 9 1 6]) -> 9", "(max [7 7 6 7 3]) -> 7", "(max [5]) -> 5", "(max [0 2]) -> 2", "(max [5 8]) -> 8"]}
{"name": "max", "time": 8.857819, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6]) -> 6", "(max [5]) -> 5", "(max [2 6 3 7 1]) -> 7", "(max [1 7 8 3]) -> 8", "(max [2 0 9 7 4]) -> 9"]}
{"name": "max", "time": 9.426396, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 9 8 8 5]) -> 9", "(max [4 9 1 0]) -> 9", "(max [2 0]) -> 2", "(max [0 0]) -> 0", "(max [9]) -> 9"]}
{"name": "max", "time": 7.787166, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3]) -> 3", "(max [8 8 3 3 4]) -> 8", "(max [7 3 3 1]) -> 7", "(max [6 8]) -> 8", "(max [0 1 5 5 7]) -> 7"]}
{"name": "max", "time": 8.157649, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 7 4 1]) -> 7", "(max [0 3 7 8 7]) -> 8", "(max [7 5 1 8]) -> 8", "(max [5 1]) -> 5", "(max [2 7 4]) -> 7"]}
{"name": "max", "time": 8.866499, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6]) -> 6", "(max [1 1 2 4 5]) -> 5", "(max [8 3 5]) -> 8", "(max [5 5 0]) -> 5", "(max [9 5 6 9 6]) -> 9"]}
{"name": "max", "time": 8.546458, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 4]) -> 4", "(max [7 0 6 4 9]) -> 9", "(max [6]) -> 6", "(max [4 7 8 9]) -> 9", "(max [9 2 8 4]) -> 9"]}
{"name": "max", "time": 8.899386, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< 1 c) c d)) 1)) _) _)", "examples": ["(max [3 1]) -> 3", "(max [0 1 1 1]) -> 1", "(max [4 0]) -> 4", "(max [1 6 0 8]) -> 8", "(max [2 3 0]) -> 3"]}
{"name": "max", "time": 8.113354, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 0]) -> 8", "(max [9 0]) -> 9", "(max [5 3 3 4]) -> 5", "(max [3 0 8 8]) -> 8", "(max [4 8 4 7 3]) -> 8"]}
{"name": "max", "time": 8.538506, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 4]) -> 4", "(max [2 0 8 4 3]) -> 8", "(max [6 9]) -> 9", "(max [8 5 6 3 3]) -> 8", "(max [5 0 4 8 8]) -> 8"]}
{"name": "max", "time": 9.008712, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 1]) -> 2", "(max [9 3]) -> 9", "(max [7 2 7 1 2]) -> 7", "(max [2 5 6]) -> 6", "(max [0 3]) -> 3"]}
{"name": "max", "time": 8.587029, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 7 3]) -> 7", "(max [7 6 3 0]) -> 7", "(max [1 6 0 7 4]) -> 7", "(max [0 9 6]) -> 9", "(max [5]) -> 5"]}
{"name": "max", "time": 9.016233, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 7]) -> 8", "(max [8 5 5 4 4]) -> 8", "(max [1 8 3 1]) -> 8", "(max [2 5 9]) -> 9", "(max [3]) -> 3"]}
{"name": "max", "time": 8.939474, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 5 2]) -> 5", "(max [0 5]) -> 5", "(max [9 0]) -> 9", "(max [1 5 3]) -> 5", "(max [6 8]) -> 8"]}
{"name": "max", "time": 8.665342, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 1 7]) -> 9", "(max [7]) -> 7", "(max [0 2 0 2 4]) -> 4", "(max [0 6 7 1 5]) -> 7", "(max [5 2 3]) -> 5"]}
{"name": "max", "time": 9.11654, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 8 4]) -> 8", "(max [7]) -> 7", "(max [1 4 9]) -> 9", "(max [7 4]) -> 7", "(max [7 9 4 6]) -> 9"]}
{"name": "max", "time": 9.395177, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 4 5 2 5]) -> 5", "(max [8 5 9 9 0]) -> 9", "(max [7 3]) -> 7", "(max [5 9]) -> 9", "(max [0 9 9 7]) -> 9"]}
{"name": "max", "time": 8.319567, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 8 3]) -> 8", "(max [4 8 6]) -> 8", "(max [3 6]) -> 6", "(max [7 6 8]) -> 8", "(max [7 4 1 2 1]) -> 7"]}
{"name": "max", "time": 8.422621, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 7]) -> 7", "(max [5 2 8]) -> 8", "(max [4 5]) -> 5", "(max [5 5 2 7]) -> 7", "(max [7 2 3 3 2]) -> 7"]}
{"name": "max", "time": 7.733724, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2]) -> 2", "(max [0 4 6 3 2]) -> 6", "(max [5 3 8]) -> 8", "(max [3 9 7 0]) -> 9", "(max [1]) -> 1"]}
{"name": "max", "time": 9.333422, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 9 7]) -> 9", "(max [4]) -> 4", "(max [1 6 5 3]) -> 6", "(max [4]) -> 4", "(max [3 1 7]) -> 7"]}
{"name": "max", "time": 7.995741, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 1 c) d c)) 0)) _) _)", "examples": ["(max [3 0 5 1]) -> 5", "(max [7 7]) -> 7", "(max [0 0 4]) -> 4", "(max [4 6]) -> 6", "(max [8]) -> 8"]}
{"name": "max", "time": 8.237643, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 4 8 6]) -> 8", "(max [9 2 3 5 7]) -> 9", "(max [6 6 1]) -> 6", "(max [0 6 4 2 1]) -> 6", "(max [6 2 9 7]) -> 9"]}
{"name": "max", "time": 7.461954, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 7 8 3 1]) -> 9", "(max [9 3 5 7]) -> 9", "(max [8]) -> 8", "(max [0 9]) -> 9", "(max [6 8 3 6]) -> 8"]}
{"name": "max", "time": 9.168099, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 9 2 7 5]) -> 9", "(max [7 1 4 3 9]) -> 9", "(max [1 7 5]) -> 7", "(max [8]) -> 8", "(max [5]) -> 5"]}
{"name": "max", "time": 7.67429, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0]) -> 0", "(max [3 3]) -> 3", "(max [4 1 8]) -> 8", "(max [9 3]) -> 9", "(max [5 6]) -> 6"]}
{"name": "max", "time": 9.236724, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 3]) -> 6", "(max [2 7 2 3]) -> 7", "(max [2 4]) -> 4", "(max [5 1]) -> 5", "(max [8 9 7]) -> 9"]}
{"name": "max", "time": 9.545865, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8]) -> 8", "(max [5]) -> 5", "(max [3 0 0 3 6]) -> 6", "(max [7 4]) -> 7", "(max [9 9]) -> 9"]}
{"name": "max", "time": 8.944574, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 3 3 2 7]) -> 7", "(max [9 2 0 1 0]) -> 9", "(max [8 4]) -> 8", "(max [0 3 2]) -> 3", "(max [3]) -> 3"]}
{"name": "max", "time": 10.124641, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 7 1 0 2]) -> 7", "(max [7 4 2 7 2]) -> 7", "(max [7 6 1 6]) -> 7", "(max [7 4 5 6]) -> 7", "(max [8 2 3 2 6]) -> 8"]}
{"name": "max", "time": 10.047978, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 5 9]) -> 9", "(max [7 2]) -> 7", "(max [6]) -> 6", "(max [5 1 7 1 1]) -> 7", "(max [7 8 4 8 3]) -> 8"]}
{"name": "max", "time": 10.071662, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 0 5 0]) -> 5", "(max [7 5 6 4]) -> 7", "(max [3]) -> 3", "(max [0 1 2]) -> 2", "(max [2 9 1]) -> 9"]}
{"name": "max", "time": 7.767033, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 2 9 4]) -> 9", "(max [8 1 9 0 2]) -> 9", "(max [8]) -> 8", "(max [2]) -> 2", "(max [4 2 7 5]) -> 7"]}
{"name": "max", "time": 9.129148, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 5]) -> 6", "(max [1 3 5 8]) -> 8", "(max [9 2]) -> 9", "(max [8 1 1]) -> 8", "(max [5 4 6]) -> 6"]}
{"name": "max", "time": 9.173102, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 6 6 6]) -> 6", "(max [0 7 7 7]) -> 7", "(max [5 0 2 9 7]) -> 9", "(max [4 6 0 2 9]) -> 9", "(max [8 0 0]) -> 8"]}
{"name": "max", "time": 8.733055, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 7]) -> 7", "(max [8]) -> 8", "(max [7 8 4]) -> 8", "(max [2 4 4]) -> 4", "(max [0 5]) -> 5"]}
{"name": "max", "time": 8.937463, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 4]) -> 5", "(max [9]) -> 9", "(max [2 8 6 8]) -> 8", "(max [8 1 4]) -> 8", "(max [4 5 2]) -> 5"]}
{"name": "max", "time": 7.936281, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 3 2]) -> 8", "(max [3 7 3 7]) -> 7", "(max [5 0]) -> 5", "(max [1 9 4 8 2]) -> 9", "(max [5]) -> 5"]}
{"name": "max", "time": 8.729701, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 0 d) c d)) 0)) _) _)", "examples": ["(max [0 7]) -> 7", "(max [8 4]) -> 8", "(max [6 1 4 6]) -> 6", "(max [8 5 3]) -> 8", "(max [7 6 6 2]) -> 7"]}
{"name": "max", "time": 9.236496, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 3]) -> 5", "(max [1 4 6 7]) -> 7", "(max [5 2]) -> 5", "(max [1 8 8]) -> 8", "(max [4 1 5 1]) -> 5"]}
{"name": "max", "time": 8.944274, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5]) -> 5", "(max [2 7 2 0 5]) -> 7", "(max [3]) -> 3", "(max [4 2]) -> 4", "(max [2]) -> 2"]}
{"name": "max", "time": 8.876387, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 4 2 2 7]) -> 7", "(max [7 6 2 7]) -> 7", "(max [5 9]) -> 9", "(max [2 5 0 2]) -> 5", "(max [2 6]) -> 6"]}
{"name": "max", "time": 9.558324, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9]) -> 9", "(max [8 4 0 3 7]) -> 8", "(max [4 1 0 2 7]) -> 7", "(max [8 0]) -> 8", "(max [8]) -> 8"]}
{"name": "max", "time": 0.032258, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(max [3 8]) -> 8", "(max [5 0 9]) -> 9", "(max [1 4]) -> 4", "(max [1 1 6 7]) -> 7", "(max [3 3 6]) -> 6"]}
{"name": "max", "time": 0.034423, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(max [2 3 7 8]) -> 8", "(max [0 5 4 8]) -> 8", "(max [0 5 8]) -> 8", "(max [1]) -> 1", "(max [6]) -> 6"]}
{"name": "max", "time": 9.515357, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 6 1 5]) -> 6", "(max [8 8 9 9 8]) -> 9", "(max [9 7]) -> 9", "(max [1 5 9 8 9]) -> 9", "(max [1 7 2 2 4]) -> 7"]}
{"name": "max", "time": 7.98261, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0]) -> 0", "(max [4 2 0 2 4]) -> 4", "(max [7 0 4]) -> 7", "(max [0 4 7]) -> 7", "(max [2 2 6 0]) -> 6"]}
{"name": "max", "time": 9.081906, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 3]) -> 4", "(max [6 9 3 2]) -> 9", "(max [9 7 3 5 9]) -> 9", "(max [7 8 0 3]) -> 8", "(max [3 2]) -> 3"]}
{"name": "max", "time": 7.847218, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 4]) -> 5", "(max [2 7 4 8]) -> 8", "(max [3]) -> 3", "(max [4]) -> 4", "(max [1 9 1 4]) -> 9"]}
{"name": "max", "time": 9.777912, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 5 9 5 6]) -> 9", "(max [2 8 1 0 7]) -> 8", "(max [8 9 5]) -> 9", "(max [0 1]) -> 1", "(max [6 5 3]) -> 6"]}
{"name": "max", "time": 0.001197, "solution": "(let max (let a (lambda (b) (car b)) _) _)", "examples": ["(max [9 9 6]) -> 9", "(max [4 2]) -> 4", "(max [3]) -> 3", "(max [7 2 0 3 4]) -> 7", "(max [4 4 4]) -> 4"]}
{"name": "max", "time": 1.900732, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (+ c (/ 1 c))) 0)) _) _)", "examples": ["(max [7 3 6 8]) -> 8", "(max [2 1]) -> 2", "(max [8]) -> 8", "(max [6]) -> 6", "(max [7 8]) -> 8"]}
{"name": "max", "time": 9.087224, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7]) -> 7", "(max [8 2 1]) -> 8", "(max [9 0]) -> 9", "(max [7]) -> 7", "(max [7 4 9 9 0]) -> 9"]}
{"name": "max", "time": 7.790752, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 9 0]) -> 9", "(max [9 5 2 6 1]) -> 9", "(max [2 9 8 8]) -> 9", "(max [3 6]) -> 6", "(max [9 2 9]) -> 9"]}
{"name": "max", "time": 9.198956, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 0 3 7]) -> 7", "(max [0 7]) -> 7", "(max [2 0 3 9]) -> 9", "(max [4]) -> 4", "(max [9 3 4]) -> 9"]}
{"name": "max", "time": 8.058619, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9]) -> 9", "(max [9]) -> 9", "(max [4 4 5 8 7]) -> 8", "(max [0 8 9 4]) -> 9", "(max [2 4 6]) -> 6"]}
{"name": "max", "time": 8.728109, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 7 8 2]) -> 8", "(max [9 6 0]) -> 9", "(max [5 9]) -> 9", "(max [7 1]) -> 7", "(max [4 1 2]) -> 4"]}
{"name": "max", "time": 8.774396, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 8 5]) -> 8", "(max [0 6]) -> 6", "(max [0 0 9 5]) -> 9", "(max [4 0 6 7]) -> 7", "(max [1 0 4]) -> 4"]}
{"name": "max", "time": 10.121172, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 8 0 5 7]) -> 8", "(max [3 9 6 6 4]) -> 9", "(max [0 4 1]) -> 4", "(max [1 8 6]) -> 8", "(max [9 1 8 9 8]) -> 9"]}
{"name": "max", "time": 9.124224, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1]) -> 1", "(max [3 2]) -> 3", "(max [6 3 7]) -> 7", "(max [7 0 2 0 6]) -> 7", "(max [3 0]) -> 3"]}
{"name": "max", "time": 9.030395, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 5]) -> 8", "(max [5 5 3 5 8]) -> 8", "(max [0]) -> 0", "(max [1 9 5]) -> 9", "(max [3 8 7 4]) -> 8"]}
{"name": "max", "time": 9.829883, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 3 2 9]) -> 9", "(max [8 3 2 3]) -> 8", "(max [8 3 5 2]) -> 8", "(max [1 4 8 3 1]) -> 8", "(max [4 9 5]) -> 9"]}
{"name": "max", "time": 8.38195, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 7 6 3]) -> 7", "(max [2 9 9 1]) -> 9", "(max [2 3 3 7 2]) -> 7", "(max [9 7]) -> 9", "(max [1 1 0]) -> 1"]}
{"name": "max", "time": 8.167683, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4]) -> 4", "(max [6 7]) -> 7", "(max [8]) -> 8", "(max [9]) -> 9", "(max [1 9 0 0 4]) -> 9"]}
{"name": "max", "time": 9.381063, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 5 1 3 0]) -> 6", "(max [0 3]) -> 3", "(max [5 1]) -> 5", "(max [4 7 7 8]) -> 8", "(max [1 3 7 9 2]) -> 9"]}
{"name": "max", "time": 8.28366, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 2 6]) -> 9", "(max [4 5 1 3 5]) -> 5", "(max [1 5]) -> 5", "(max [9 6 1]) -> 9", "(max [4 3 5 8]) -> 8"]}
{"name": "max", "time": 8.984397, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3]) -> 3", "(max [2 4 0]) -> 4", "(max [1 5 6]) -> 6", "(max [0 8 3 4]) -> 8", "(max [0]) -> 0"]}
{"name": "max", "time": 8.83378, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 7 9 7]) -> 9", "(max [4 9 1]) -> 9", "(max [7 9 0]) -> 9", "(max [3 7 7 8 7]) -> 8", "(max [3 1]) -> 3"]}
{"name": "max", "time": 7.71823, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 0 d) c d)) 0)) _) _)", "examples": ["(max [7]) -> 7", "(max [0]) -> 0", "(max [3 3 1]) -> 3", "(max [4]) -> 4", "(max [0 6]) -> 6"]}
{"name": "max", "time": 7.856728, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 0]) -> 3", "(max [2 1 5 8]) -> 8", "(max [2 9 4 9 4]) -> 9", "(max [2]) -> 2", "(max [8 6]) -> 8"]}
{"name": "max", "time": 7.131389, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 9 6]) -> 9", "(max [4 8 3 9]) -> 9", "(max [0 8 7 2]) -> 8", "(max [4 2]) -> 4", "(max [2 2]) -> 2"]}
{"name": "max", "time": 8.144143, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 6 3]) -> 6", "(max [3 6 9]) -> 9", "(max [2 1]) -> 2", "(max [8 0]) -> 8", "(max [2 6]) -> 6"]}
{"name": "max", "time": 8.31137, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 3 5 4]) -> 7", "(max [9 1 4 0 5]) -> 9", "(max [4 4]) -> 4", "(max [1 3 9 6 0]) -> 9", "(max [8 9 2]) -> 9"]}
{"name": "max", "time": 7.229556, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7]) -> 7", "(max [2 1]) -> 2", "(max [3 7 4 9 6]) -> 9", "(max [3 5]) -> 5", "(max [5 6]) -> 6"]}
{"name": "max", "time": 7.957045, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 8 0 2 3]) -> 8", "(max [4 6 9]) -> 9", "(max [9 9]) -> 9", "(max [1]) -> 1", "(max [1 1 4 5]) -> 5"]}
{"name": "max", "time": 6.349017, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 9 3 9]) -> 9", "(max [2 2]) -> 2", "(max [6 0]) -> 6", "(max [7 5 8 6]) -> 8", "(max [1 4 5 5 3]) -> 5"]}
{"name": "max", "time": 6.36797, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 3 9]) -> 9", "(max [6 5 0 8]) -> 8", "(max [9 0 5 0]) -> 9", "(max [4 5 5]) -> 5", "(max [7 6 6 7 4]) -> 7"]}
{"name": "max", "time": 7.617505, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 5 9 9]) -> 9", "(max [3 4 2 6]) -> 6", "(max [4 0 9 5]) -> 9", "(max [1 6 0 6 5]) -> 6", "(max [4 8 0]) -> 8"]}
{"name": "max", "time": 6.05698, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 9]) -> 9", "(max [5 4]) -> 5", "(max [8]) -> 8", "(max [3 5 4 1 2]) -> 5", "(max [0 2 3]) -> 3"]}
{"name": "max", "time": 6.610113, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 0 c) d c)) 0)) _) _)", "examples": ["(max [8]) -> 8", "(max [6 8]) -> 8", "(max [1 3]) -> 3", "(max [9]) -> 9", "(max [1 0 2 5 0]) -> 5"]}
{"name": "max", "time": 6.949704, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 1 9 5 6]) -> 9", "(max [6 3 4 7]) -> 7", "(max [5 3 1 0 1]) -> 5", "(max [5 1 1 0 0]) -> 5", "(max [5 3 9]) -> 9"]}
{"name": "max", "time": 6.226441, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 3 6 4]) -> 6", "(max [7 0]) -> 7", "(max [3]) -> 3", "(max [5 8 8]) -> 8", "(max [1]) -> 1"]}
