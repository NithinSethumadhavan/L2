{"time": 0.000636, "examples": ["(incrt {}) -> {}", "(incrt {}) -> {}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) b) _) _)"}
{"time": 0.000483, "examples": ["(incrt {}) -> {}", "(incrt {}) -> {}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) b) _) _)"}
{"time": 0.026124, "examples": ["(incrt {}) -> {}", "(incrt {8 {7 {3}}}) -> {9 {8 {4}}}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.00064, "examples": ["(incrt {}) -> {}", "(incrt {}) -> {}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) b) _) _)"}
{"time": 0.025091, "examples": ["(incrt {}) -> {}", "(incrt {6 {1 {2} {4}}}) -> {7 {2 {3} {5}}}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.039068, "examples": ["(incrt {}) -> {}", "(incrt {4 {1}}) -> {5 {2}}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.024663, "examples": ["(incrt {}) -> {}", "(incrt {7}) -> {8}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.031986, "examples": ["(incrt {}) -> {}", "(incrt {2 {1} {5}}) -> {3 {2} {6}}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.000589, "examples": ["(incrt {}) -> {}", "(incrt {}) -> {}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) b) _) _)"}
{"time": 0.024288, "examples": ["(incrt {}) -> {}", "(incrt {3}) -> {4}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.03376, "examples": ["(incrt {}) -> {}", "(incrt {8}) -> {9}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.044829, "examples": ["(incrt {}) -> {}", "(incrt {6 {3 {1 {9}} {5 {6} {1}}} {5 {8 {9} {4}}}}) -> {7 {4 {2 {10}} {6 {7} {2}}} {6 {9 {10} {5}}}}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.031338, "examples": ["(incrt {}) -> {}", "(incrt {0}) -> {1}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) 1))) _) _)"}
{"time": 0.026337, "examples": ["(incrt {}) -> {}", "(incrt {8 {3 {4 {2} {0}}} {2}}) -> {9 {4 {5 {3} {1}}} {3}}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.032066, "examples": ["(incrt {}) -> {}", "(incrt {0 {6} {2}}) -> {1 {7} {3}}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.03768, "examples": ["(incrt {}) -> {}", "(incrt {4 {5}}) -> {5 {6}}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.000635, "examples": ["(incrt {}) -> {}", "(incrt {}) -> {}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) b) _) _)"}
{"time": 0.027983, "examples": ["(incrt {}) -> {}", "(incrt {1 {6} {5}}) -> {2 {7} {6}}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.019684, "examples": ["(incrt {}) -> {}", "(incrt {0}) -> {1}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) 1))) _) _)"}
{"time": 0.000672, "examples": ["(incrt {}) -> {}", "(incrt {}) -> {}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) b) _) _)"}
{"time": 0.000632, "examples": ["(incrt {}) -> {}", "(incrt {}) -> {}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) b) _) _)"}
{"time": 0.0334, "examples": ["(incrt {}) -> {}", "(incrt {7 {6 {2 {5} {5}} {6}}}) -> {8 {7 {3 {6} {6}} {7}}}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.030703, "examples": ["(incrt {}) -> {}", "(incrt {0 {0 {9}}}) -> {1 {1 {10}}}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.024928, "examples": ["(incrt {}) -> {}", "(incrt {9}) -> {10}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.000391, "examples": ["(incrt {}) -> {}", "(incrt {}) -> {}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) b) _) _)"}
{"time": 0.026572, "examples": ["(incrt {}) -> {}", "(incrt {6 {1 {6 {4} {6}} {6}} {8 {2 {6}} {5}}}) -> {7 {2 {7 {5} {7}} {7}} {9 {3 {7}} {6}}}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.025543, "examples": ["(incrt {}) -> {}", "(incrt {7 {2 {6}}}) -> {8 {3 {7}}}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.029513, "examples": ["(incrt {}) -> {}", "(incrt {2 {8 {2 {5} {3}}}}) -> {3 {9 {3 {6} {4}}}}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.028371, "examples": ["(incrt {}) -> {}", "(incrt {4 {2 {1} {6}}}) -> {5 {3 {2} {7}}}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.028851, "examples": ["(incrt {}) -> {}", "(incrt {6 {8 {5 {1}}}}) -> {7 {9 {6 {2}}}}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.035685, "examples": ["(incrt {}) -> {}", "(incrt {8}) -> {9}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.034748, "examples": ["(incrt {}) -> {}", "(incrt {3}) -> {4}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.034148, "examples": ["(incrt {}) -> {}", "(incrt {6 {8 {3}}}) -> {7 {9 {4}}}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.023205, "examples": ["(incrt {}) -> {}", "(incrt {4}) -> {5}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.038413, "examples": ["(incrt {}) -> {}", "(incrt {3 {1}}) -> {4 {2}}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.02398, "examples": ["(incrt {}) -> {}", "(incrt {3}) -> {4}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.000637, "examples": ["(incrt {}) -> {}", "(incrt {}) -> {}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) b) _) _)"}
{"time": 0.035348, "examples": ["(incrt {}) -> {}", "(incrt {2}) -> {3}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.000442, "examples": ["(incrt {}) -> {}", "(incrt {}) -> {}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) b) _) _)"}
{"time": 0.025852, "examples": ["(incrt {}) -> {}", "(incrt {6}) -> {7}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.024615, "examples": ["(incrt {}) -> {}", "(incrt {6 {4 {4}}}) -> {7 {5 {5}}}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.024358, "examples": ["(incrt {}) -> {}", "(incrt {2 {9} {2}}) -> {3 {10} {3}}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.023796, "examples": ["(incrt {}) -> {}", "(incrt {3 {5} {2}}) -> {4 {6} {3}}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.036909, "examples": ["(incrt {}) -> {}", "(incrt {9 {9}}) -> {10 {10}}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.027409, "examples": ["(incrt {}) -> {}", "(incrt {1 {5 {4}} {7}}) -> {2 {6 {5}} {8}}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.028209, "examples": ["(incrt {}) -> {}", "(incrt {0}) -> {1}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) 1))) _) _)"}
{"time": 0.03882, "examples": ["(incrt {}) -> {}", "(incrt {1}) -> {2}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 1)))) _) _)"}
{"time": 0.028267, "examples": ["(incrt {}) -> {}", "(incrt {6 {2 {1}}}) -> {7 {3 {2}}}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.000374, "examples": ["(incrt {}) -> {}", "(incrt {}) -> {}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) b) _) _)"}
{"time": 0.027671, "examples": ["(incrt {}) -> {}", "(incrt {2}) -> {3}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.023809, "examples": ["(incrt {}) -> {}", "(incrt {0 {9 {9}} {7 {9}}}) -> {1 {10 {10}} {8 {10}}}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.044147, "examples": ["(incrt {}) -> {}", "(incrt {4 {3 {8} {2 {1} {5}}} {9 {7}}}) -> {5 {4 {9} {3 {2} {6}}} {10 {8}}}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.025516, "examples": ["(incrt {}) -> {}", "(incrt {9}) -> {10}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.024451, "examples": ["(incrt {}) -> {}", "(incrt {5}) -> {6}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.030574, "examples": ["(incrt {}) -> {}", "(incrt {7}) -> {8}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 c)))) _) _)"}
{"time": 0.000645, "examples": ["(incrt {}) -> {}", "(incrt {}) -> {}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) b) _) _)"}
{"time": 0.021196, "examples": ["(incrt {}) -> {}", "(incrt {0}) -> {1}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) 1))) _) _)"}
{"time": 0.023868, "examples": ["(incrt {}) -> {}", "(incrt {1}) -> {2}"], "name": "incrt", "solution": "(let incrt (let a (lambda (b) (mapt b (lambda (c) (+ 1 1)))) _) _)"}
