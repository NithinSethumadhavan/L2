{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7 {5 {3 {0}} {2}}}) -> [7 5 3 0 2]", "(flatten {4}) -> [4]", "(flatten {9 {3}}) -> [9 3]"], "time": 0.092522}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {5 {2}}) -> [5 2]", "(flatten {0 {5 {9}}}) -> [0 5 9]"], "time": 0.176647}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {1 {8 {1 {1}}}}) -> [1 8 1 1]", "(flatten {0}) -> [0]"], "time": 0.16405}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {0 {3} {9 {3} {8}}}) -> [0 3 9 3 8]", "(flatten {7 {5} {6 {9} {1 {6}}}}) -> [7 5 6 9 1 6]"], "time": 0.147796}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0 {3 {3 {2}} {6 {3} {1}}} {8 {2 {1} {1}} {3 {8}}}}) -> [0 3 3 2 6 3 1 8 2 1 1 3 8]", "(flatten {1 {3 {3}}}) -> [1 3 3]", "(flatten {9 {9}}) -> [9 9]"], "time": 0.18321}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {1 {3 {7}} {6}}) -> [1 3 7 6]", "(flatten {2 {1} {9}}) -> [2 1 9]", "(flatten {0}) -> [0]"], "time": 0.094896}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {9 {6 {8}}}) -> [9 6 8]", "(flatten {4 {2} {1}}) -> [4 2 1]", "(flatten {2 {9} {8 {3 {8} {1}}}}) -> [2 9 8 3 8 1]"], "time": 0.10344}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {9}) -> [9]", "(flatten {}) -> []", "(flatten {}) -> []"], "time": 0.165029}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {7 {6 {1}}}) -> [7 6 1]"], "time": 0.181872}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {4}) -> [4]", "(flatten {3 {8} {3 {5}}}) -> [3 8 3 5]", "(flatten {0}) -> [0]"], "time": 0.156466}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {4 {6 {2 {3} {9}}}}) -> [4 6 2 3 9]", "(flatten {}) -> []", "(flatten {2 {3}}) -> [2 3]"], "time": 0.177728}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {1}) -> [1]", "(flatten {}) -> []", "(flatten {5 {7}}) -> [5 7]"], "time": 0.106499}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {8}) -> [8]", "(flatten {5}) -> [5]", "(flatten {2}) -> [2]"], "time": 0.152716}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {6 {6} {7}}) -> [6 6 7]", "(flatten {8}) -> [8]", "(flatten {7 {4}}) -> [7 4]"], "time": 0.196948}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {8}) -> [8]", "(flatten {2 {9} {3}}) -> [2 9 3]", "(flatten {2 {9 {4}} {9 {2} {7}}}) -> [2 9 4 9 2 7]"], "time": 0.113751}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {9 {8} {1 {7 {0}} {4}}}) -> [9 8 1 7 0 4]", "(flatten {4 {8 {8} {5}}}) -> [4 8 8 5]", "(flatten {3 {3 {2 {0}}}}) -> [3 3 2 0]"], "time": 0.108994}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0 {7 {0}}}) -> [0 7 0]", "(flatten {}) -> []", "(flatten {1 {8 {5} {4}}}) -> [1 8 5 4]"], "time": 0.130367}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0 {2}}) -> [0 2]", "(flatten {0}) -> [0]", "(flatten {5 {8} {7 {3}}}) -> [5 8 7 3]"], "time": 0.123641}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {1 {7}}) -> [1 7]", "(flatten {4 {9} {2}}) -> [4 9 2]", "(flatten {}) -> []"], "time": 0.13246}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {8}) -> [8]", "(flatten {0 {1} {2}}) -> [0 1 2]", "(flatten {}) -> []"], "time": 0.129585}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {4 {5 {7} {3}}}) -> [4 5 7 3]", "(flatten {1}) -> [1]", "(flatten {3 {3}}) -> [3 3]"], "time": 0.154795}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3 {7 {6 {1} {4}}}}) -> [3 7 6 1 4]", "(flatten {4}) -> [4]", "(flatten {5 {0 {4}}}) -> [5 0 4]"], "time": 0.15177}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0 {5} {5}}) -> [0 5 5]", "(flatten {9 {3 {8}}}) -> [9 3 8]", "(flatten {6}) -> [6]"], "time": 0.147957}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {9 {5}}) -> [9 5]", "(flatten {3 {6 {8} {5}}}) -> [3 6 8 5]", "(flatten {1 {3}}) -> [1 3]"], "time": 0.143961}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {5 {9} {4}}) -> [5 9 4]", "(flatten {}) -> []", "(flatten {}) -> []"], "time": 0.139721}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {8}) -> [8]", "(flatten {5}) -> [5]", "(flatten {4}) -> [4]"], "time": 0.145264}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0 {5 {7} {7}}}) -> [0 5 7 7]", "(flatten {}) -> []", "(flatten {}) -> []"], "time": 0.111166}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0}) -> [0]", "(flatten {}) -> []", "(flatten {4 {6 {0 {3}}}}) -> [4 6 0 3]"], "time": 0.129979}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {2 {3 {1} {9}} {6 {5 {4}} {0}}}) -> [2 3 1 9 6 5 4 0]", "(flatten {6 {6 {6}}}) -> [6 6 6]"], "time": 0.151414}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {4 {0 {7 {7}} {2 {2}}} {3}}) -> [4 0 7 7 2 2 3]", "(flatten {0 {7 {0 {4}}} {1}}) -> [0 7 0 4 1]"], "time": 0.147233}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {5 {5}}) -> [5 5]", "(flatten {6}) -> [6]", "(flatten {7 {8}}) -> [7 8]"], "time": 0.170039}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {6}) -> [6]", "(flatten {6 {9 {9}} {3}}) -> [6 9 9 3]", "(flatten {8}) -> [8]"], "time": 0.148055}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {2}) -> [2]", "(flatten {}) -> []", "(flatten {}) -> []"], "time": 0.072369}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {4}) -> [4]", "(flatten {4 {5 {2} {8}} {7 {5}}}) -> [4 5 2 8 7 5]", "(flatten {1 {9} {6}}) -> [1 9 6]"], "time": 0.120364}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {9 {9 {8 {2} {4}} {7}} {5 {6} {2}}}) -> [9 9 8 2 4 7 5 6 2]", "(flatten {3 {8}}) -> [3 8]", "(flatten {}) -> []"], "time": 0.126056}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {5 {6} {6}}) -> [5 6 6]", "(flatten {8 {3}}) -> [8 3]", "(flatten {7 {7}}) -> [7 7]"], "time": 0.182065}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3 {9 {0 {2} {2}}} {6}}) -> [3 9 0 2 2 6]", "(flatten {}) -> []", "(flatten {1 {1 {8 {9} {7}} {8 {3} {4}}}}) -> [1 1 8 9 7 8 3 4]"], "time": 0.182306}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7}) -> [7]", "(flatten {5 {4} {6}}) -> [5 4 6]", "(flatten {8 {9} {3 {0 {5}} {5 {8}}}}) -> [8 9 3 0 5 5 8]"], "time": 0.164695}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7 {3 {2} {0}} {4 {3} {0}}}) -> [7 3 2 0 4 3 0]", "(flatten {}) -> []", "(flatten {7 {7} {8}}) -> [7 7 8]"], "time": 0.10533}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons 0 [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0}) -> [0]", "(flatten {}) -> []", "(flatten {}) -> []"], "time": 0.158032}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {7 {8} {1}}) -> [7 8 1]", "(flatten {6}) -> [6]"], "time": 0.169472}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0 {0} {4}}) -> [0 0 4]", "(flatten {2}) -> [2]", "(flatten {}) -> []"], "time": 0.170203}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {3}) -> [3]", "(flatten {}) -> []"], "time": 0.153002}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {8}) -> [8]", "(flatten {5 {7 {5 {3}} {9}} {2}}) -> [5 7 5 3 9 2]"], "time": 0.164497}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {2 {6 {5} {8 {2}}} {4 {1 {9} {6}}}}) -> [2 6 5 8 2 4 1 9 6]", "(flatten {1}) -> [1]", "(flatten {7}) -> [7]"], "time": 0.136717}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7 {2 {1}} {9 {8} {1}}}) -> [7 2 1 9 8 1]", "(flatten {7}) -> [7]", "(flatten {8}) -> [8]"], "time": 0.096938}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {2 {9 {7 {6}} {6 {8}}}}) -> [2 9 7 6 6 8]", "(flatten {7 {8 {4} {2}} {5}}) -> [7 8 4 2 5]", "(flatten {6}) -> [6]"], "time": 0.130192}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {6 {3}}) -> [6 3]", "(flatten {1 {6 {7 {6}} {3 {6}}} {9 {2 {5} {9}} {7}}}) -> [1 6 7 6 3 6 9 2 5 9 7]", "(flatten {}) -> []"], "time": 0.166788}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {6 {4 {7 {6} {9}} {2 {6} {3}}}}) -> [6 4 7 6 9 2 6 3]", "(flatten {1 {4}}) -> [1 4]", "(flatten {}) -> []"], "time": 0.124389}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {8 {4 {6 {7} {4}}}}) -> [8 4 6 7 4]", "(flatten {4}) -> [4]"], "time": 0.129444}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {5}) -> [5]", "(flatten {3}) -> [3]"], "time": 0.101899}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7 {6} {4}}) -> [7 6 4]", "(flatten {3}) -> [3]", "(flatten {3 {3}}) -> [3 3]"], "time": 0.136904}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {5}) -> [5]", "(flatten {9 {6 {2}} {3 {7} {5}}}) -> [9 6 2 3 7 5]", "(flatten {9 {8} {5}}) -> [9 8 5]"], "time": 0.130185}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {1 {8 {9} {1 {2}}}}) -> [1 8 9 1 2]", "(flatten {5 {2}}) -> [5 2]", "(flatten {3 {2} {3 {3 {0} {6}} {0 {1} {5}}}}) -> [3 2 3 3 0 6 0 1 5]"], "time": 0.14432}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {5}) -> [5]", "(flatten {}) -> []"], "time": 0.083052}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {4}) -> [4]", "(flatten {6 {8 {8 {2} {8}} {6 {8} {9}}} {5}}) -> [6 8 8 2 8 6 8 9 5]", "(flatten {2 {0}}) -> [2 0]"], "time": 0.142481}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {5 {9 {3 {7} {3}}}}) -> [5 9 3 7 3]"], "time": 0.145563}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0}) -> [0]", "(flatten {7 {3 {8 {2} {9}}}}) -> [7 3 8 2 9]", "(flatten {7 {3 {4}} {9 {9} {4}}}) -> [7 3 4 9 9 4]"], "time": 0.142557}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {5 {1} {7}}) -> [5 1 7]", "(flatten {7 {7}}) -> [7 7]", "(flatten {1 {4 {6 {8} {9}} {4}} {0}}) -> [1 4 6 8 9 4 0]"], "time": 0.131026}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3 {8}}) -> [3 8]", "(flatten {5}) -> [5]", "(flatten {9}) -> [9]"], "time": 0.115277}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {3 {9 {1 {1} {9}} {7}}}) -> [3 9 1 1 9 7]", "(flatten {8}) -> [8]"], "time": 0.121187}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {7 {2}}) -> [7 2]", "(flatten {7 {0}}) -> [7 0]"], "time": 0.148313}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {6}) -> [6]", "(flatten {}) -> []", "(flatten {7}) -> [7]"], "time": 0.114732}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {9}) -> [9]", "(flatten {5 {2 {7 {7}} {8 {5} {2}}} {6 {7 {2}} {3 {6}}}}) -> [5 2 7 7 8 5 2 6 7 2 3 6]", "(flatten {1 {3} {5}}) -> [1 3 5]"], "time": 0.141222}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {6 {7} {9}}) -> [6 7 9]", "(flatten {}) -> []", "(flatten {}) -> []"], "time": 0.115914}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0 {7} {0}}) -> [0 7 0]", "(flatten {7 {1 {1 {1}} {1}}}) -> [7 1 1 1 1]", "(flatten {4 {4}}) -> [4 4]"], "time": 0.149808}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {1 {5}}) -> [1 5]"], "time": 0.094261}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7}) -> [7]", "(flatten {5}) -> [5]", "(flatten {6 {4 {3}} {8 {2}}}) -> [6 4 3 8 2]"], "time": 0.116298}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {6 {1 {5}} {4}}) -> [6 1 5 4]", "(flatten {}) -> []", "(flatten {}) -> []"], "time": 0.150586}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {2 {8 {1}} {0}}) -> [2 8 1 0]", "(flatten {}) -> []", "(flatten {0 {8}}) -> [0 8]"], "time": 0.149688}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {9}) -> [9]", "(flatten {9 {8}}) -> [9 8]", "(flatten {3 {9 {4}} {3 {6}}}) -> [3 9 4 3 6]"], "time": 0.153657}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {5 {8 {9}} {2 {0 {0}} {4 {2}}}}) -> [5 8 9 2 0 0 4 2]", "(flatten {5}) -> [5]", "(flatten {7 {2 {3 {2}} {6 {2}}}}) -> [7 2 3 2 6 2]"], "time": 0.153709}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {6 {6 {5} {4}}}) -> [6 6 5 4]", "(flatten {}) -> []"], "time": 0.132659}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {2 {5} {8}}) -> [2 5 8]", "(flatten {}) -> []", "(flatten {7}) -> [7]"], "time": 0.162583}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {9 {7}}) -> [9 7]", "(flatten {4 {9} {2}}) -> [4 9 2]", "(flatten {3 {2 {3}} {0}}) -> [3 2 3 0]"], "time": 0.135897}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {9 {3 {4}} {2 {2} {0}}}) -> [9 3 4 2 2 0]"], "time": 0.127117}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {6 {4 {5} {1}}}) -> [6 4 5 1]", "(flatten {0 {4} {0}}) -> [0 4 0]", "(flatten {}) -> []"], "time": 0.147771}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {6}) -> [6]"], "time": 0.12991}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {1 {8 {4} {1}} {9 {0}}}) -> [1 8 4 1 9 0]", "(flatten {}) -> []", "(flatten {2 {2} {5}}) -> [2 2 5]"], "time": 0.115549}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons 0 [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {0}) -> [0]"], "time": 0.122772}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {9 {7}}) -> [9 7]", "(flatten {1 {0 {4 {6}}} {9}}) -> [1 0 4 6 9]"], "time": 0.115002}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7 {8}}) -> [7 8]", "(flatten {}) -> []", "(flatten {}) -> []"], "time": 0.095655}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {2 {1 {2}} {5 {8} {8}}}) -> [2 1 2 5 8 8]", "(flatten {}) -> []", "(flatten {3 {7}}) -> [3 7]"], "time": 0.134033}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {9}) -> [9]", "(flatten {6 {6} {1}}) -> [6 6 1]", "(flatten {}) -> []"], "time": 0.122181}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0 {8} {1 {2}}}) -> [0 8 1 2]", "(flatten {}) -> []", "(flatten {0}) -> [0]"], "time": 0.124004}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0}) -> [0]", "(flatten {}) -> []", "(flatten {6 {7 {0 {4} {1}}}}) -> [6 7 0 4 1]"], "time": 0.134359}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {2}) -> [2]", "(flatten {7 {8 {2 {5}} {1}}}) -> [7 8 2 5 1]", "(flatten {}) -> []"], "time": 0.118698}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7}) -> [7]", "(flatten {5 {8 {7 {7}} {7 {8} {5}}}}) -> [5 8 7 7 7 8 5]", "(flatten {}) -> []"], "time": 0.11452}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7 {9}}) -> [7 9]", "(flatten {9 {4 {8} {0}}}) -> [9 4 8 0]", "(flatten {4}) -> [4]"], "time": 0.122835}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {6 {7 {7} {3}} {0 {4} {5}}}) -> [6 7 7 3 0 4 5]", "(flatten {5}) -> [5]"], "time": 0.148309}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0 {8} {3}}) -> [0 8 3]", "(flatten {7}) -> [7]", "(flatten {4 {4} {5}}) -> [4 4 5]"], "time": 0.145711}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7}) -> [7]", "(flatten {7 {4} {8}}) -> [7 4 8]", "(flatten {6 {8}}) -> [6 8]"], "time": 0.125283}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {1 {3 {1 {8}} {4 {4} {1}}} {5 {2} {1}}}) -> [1 3 1 8 4 4 1 5 2 1]", "(flatten {}) -> []", "(flatten {9 {0}}) -> [9 0]"], "time": 0.12778}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {9}) -> [9]", "(flatten {2}) -> [2]", "(flatten {}) -> []"], "time": 0.126861}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3 {3}}) -> [3 3]", "(flatten {4 {9 {1}} {7 {4 {2}} {3 {2} {0}}}}) -> [4 9 1 7 4 2 3 2 0]", "(flatten {2 {6} {7}}) -> [2 6 7]"], "time": 0.121421}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {4 {1}}) -> [4 1]"], "time": 0.13699}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {6}) -> [6]", "(flatten {6}) -> [6]", "(flatten {5 {7}}) -> [5 7]"], "time": 0.106925}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {1 {4 {2} {2}}}) -> [1 4 2 2]", "(flatten {5 {0} {1}}) -> [5 0 1]", "(flatten {5}) -> [5]"], "time": 0.079674}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {5 {6 {2 {6} {4}} {4 {6}}}}) -> [5 6 2 6 4 4 6]", "(flatten {}) -> []", "(flatten {1 {0} {5 {2}}}) -> [1 0 5 2]"], "time": 0.079948}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7}) -> [7]", "(flatten {9 {9 {3}} {3}}) -> [9 9 3 3]", "(flatten {9 {4 {6}} {9 {2}}}) -> [9 4 6 9 2]"], "time": 0.078168}
