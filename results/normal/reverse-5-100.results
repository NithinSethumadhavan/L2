{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [1 4 6 8 6]) -> [6 8 6 4 1]", "(reverse [9 3 0 2]) -> [2 0 3 9]", "(reverse [1 5 5 3 6]) -> [6 3 5 5 1]"], "time": 0.028966}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [4 4]) -> [4 4]", "(reverse [5 6 7 5 4]) -> [4 5 7 6 5]", "(reverse [3 9]) -> [9 3]"], "time": 0.037216}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [8 6 5 8]) -> [8 5 6 8]", "(reverse [4 9 0 3 9]) -> [9 3 0 9 4]", "(reverse [1 3 2 8]) -> [8 2 3 1]"], "time": 0.036461}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [6 2 6 2 6]) -> [6 2 6 2 6]", "(reverse [4 4 3 2]) -> [2 3 4 4]", "(reverse [8 4 3 6]) -> [6 3 4 8]"], "time": 0.030362}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [9 7]) -> [7 9]", "(reverse [4]) -> [4]", "(reverse [8 9 2 2]) -> [2 2 9 8]"], "time": 0.04527}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [1 1 3 8]) -> [8 3 1 1]", "(reverse [6]) -> [6]", "(reverse [4 4 7 8 4]) -> [4 8 7 4 4]"], "time": 0.035753}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [7]) -> [7]", "(reverse [7 2]) -> [2 7]"], "time": 0.035413}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [0]) -> [0]", "(reverse [8 2]) -> [2 8]", "(reverse [9 8 2 3]) -> [3 2 8 9]"], "time": 0.047042}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [6 8]) -> [8 6]", "(reverse [7 1 4 9 5]) -> [5 9 4 1 7]", "(reverse [7 0 5]) -> [5 0 7]"], "time": 0.034698}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [8 6 0 6]) -> [6 0 6 8]", "(reverse [9]) -> [9]", "(reverse [0 2 8 7]) -> [7 8 2 0]"], "time": 0.034367}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [5 7 5 5]) -> [5 5 7 5]", "(reverse []) -> []", "(reverse []) -> []"], "time": 0.043693}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [3]) -> [3]", "(reverse [8 4 9 3]) -> [3 9 4 8]", "(reverse [4 3]) -> [3 4]"], "time": 0.042714}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [4 7 2 6 0]) -> [0 6 2 7 4]", "(reverse [7 1 9 6 6]) -> [6 6 9 1 7]"], "time": 0.027042}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [4 2]) -> [2 4]", "(reverse [6]) -> [6]", "(reverse [0 9 5]) -> [5 9 0]"], "time": 0.04672}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [7 6]) -> [6 7]", "(reverse [5 4]) -> [4 5]", "(reverse []) -> []"], "time": 0.032614}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse []) -> []", "(reverse [0 4 0 8 1]) -> [1 8 0 4 0]"], "time": 0.033761}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)", "examples": ["(reverse []) -> []", "(reverse [2]) -> [2]", "(reverse []) -> []", "(reverse [2]) -> [2]"], "time": 0.000373}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [4 8 9 0 5]) -> [5 0 9 8 4]", "(reverse [1 3 4 4 5]) -> [5 4 4 3 1]", "(reverse [3]) -> [3]"], "time": 0.026198}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [4 0 8 7]) -> [7 8 0 4]", "(reverse [1 4 8 0 9]) -> [9 0 8 4 1]", "(reverse [6 9 8]) -> [8 9 6]"], "time": 0.029828}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [2]) -> [2]", "(reverse []) -> []"], "time": 0.000361}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [8]) -> [8]", "(reverse [1 5 6 3 2]) -> [2 3 6 5 1]", "(reverse [1]) -> [1]"], "time": 0.033422}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [8 2]) -> [2 8]", "(reverse []) -> []", "(reverse [2 0]) -> [0 2]"], "time": 0.031164}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [7 1 7 5]) -> [5 7 1 7]", "(reverse [4 8 1 8 6]) -> [6 8 1 8 4]", "(reverse [8 8]) -> [8 8]"], "time": 0.04345}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [9]) -> [9]", "(reverse [8]) -> [8]", "(reverse [2 0 7]) -> [7 0 2]"], "time": 0.047051}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [6 4 6]) -> [6 4 6]", "(reverse [5 7 7]) -> [7 7 5]", "(reverse [3 1]) -> [1 3]"], "time": 0.027715}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [3 1 8 3]) -> [3 8 1 3]", "(reverse [7 3]) -> [3 7]", "(reverse [6]) -> [6]"], "time": 0.031696}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [5 7 9]) -> [9 7 5]", "(reverse []) -> []", "(reverse [3]) -> [3]"], "time": 0.043089}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [0 8 9 1]) -> [1 9 8 0]", "(reverse [1 4]) -> [4 1]", "(reverse [3 9]) -> [9 3]"], "time": 0.052469}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [1 6 0]) -> [0 6 1]", "(reverse [3 5 3 3]) -> [3 3 5 3]", "(reverse [8]) -> [8]"], "time": 0.04019}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [3 5 1]) -> [1 5 3]", "(reverse [3 2]) -> [2 3]", "(reverse [4 8 6 9 3]) -> [3 9 6 8 4]"], "time": 0.039746}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [1 8 6 3 8]) -> [8 3 6 8 1]", "(reverse [5 2 3 3]) -> [3 3 2 5]", "(reverse [1]) -> [1]"], "time": 0.030418}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [3 1 9 3]) -> [3 9 1 3]", "(reverse [7 5 9 1 0]) -> [0 1 9 5 7]", "(reverse [8 2 9]) -> [9 2 8]"], "time": 0.046979}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) []) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse []) -> []", "(reverse []) -> []"], "time": 0.000734}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [3]) -> [3]", "(reverse [3 6 5 3 4]) -> [4 3 5 6 3]", "(reverse []) -> []"], "time": 0.025027}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)", "examples": ["(reverse []) -> []", "(reverse [9 9]) -> [9 9]", "(reverse []) -> []", "(reverse [0]) -> [0]"], "time": 0.000361}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [8 0]) -> [0 8]", "(reverse [6]) -> [6]", "(reverse [3 5 9]) -> [9 5 3]"], "time": 0.039617}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [9]) -> [9]", "(reverse [9 1 5 8]) -> [8 5 1 9]", "(reverse [9]) -> [9]"], "time": 0.043502}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [5 2 3 9 7]) -> [7 9 3 2 5]", "(reverse [8 4 3 7 3]) -> [3 7 3 4 8]", "(reverse [5 4]) -> [4 5]"], "time": 0.042573}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [8 2 5 8]) -> [8 5 2 8]", "(reverse [8 9 6 0 8]) -> [8 0 6 9 8]", "(reverse [7 7]) -> [7 7]"], "time": 0.036716}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [2 6 8]) -> [8 6 2]", "(reverse []) -> []", "(reverse [4 9 3 8]) -> [8 3 9 4]"], "time": 0.036316}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [4 0 5]) -> [5 0 4]", "(reverse []) -> []", "(reverse [1 4]) -> [4 1]"], "time": 0.041332}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [4 5]) -> [5 4]", "(reverse [9 5]) -> [5 9]", "(reverse []) -> []"], "time": 0.029884}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [2 0 0 6 6]) -> [6 6 0 0 2]", "(reverse [5]) -> [5]", "(reverse [0 5 6 8]) -> [8 6 5 0]"], "time": 0.028164}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [6]) -> [6]", "(reverse [5 3 5 5]) -> [5 5 3 5]", "(reverse []) -> []"], "time": 0.026393}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [3 1 3 0 5]) -> [5 0 3 1 3]", "(reverse [4 5 9 2]) -> [2 9 5 4]", "(reverse [4 3]) -> [3 4]"], "time": 0.039022}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [3 2 2 5]) -> [5 2 2 3]", "(reverse [8 2 3]) -> [3 2 8]", "(reverse [6 0 1]) -> [1 0 6]"], "time": 0.041416}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [6 1 2 6 7]) -> [7 6 2 1 6]", "(reverse [1 8 0 6 1]) -> [1 6 0 8 1]", "(reverse [1 9 7]) -> [7 9 1]"], "time": 0.029217}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [5 0 7]) -> [7 0 5]", "(reverse [7]) -> [7]", "(reverse [9 5 6]) -> [6 5 9]"], "time": 0.035612}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [5 2 1 9 7]) -> [7 9 1 2 5]", "(reverse [2 7 5 9]) -> [9 5 7 2]", "(reverse []) -> []"], "time": 0.049268}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [0 4]) -> [4 0]", "(reverse []) -> []", "(reverse []) -> []"], "time": 0.031788}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [9 8 3]) -> [3 8 9]", "(reverse [2 4 1]) -> [1 4 2]", "(reverse [7 8]) -> [8 7]"], "time": 0.030488}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [9]) -> [9]", "(reverse [1]) -> [1]", "(reverse [5 2 3]) -> [3 2 5]"], "time": 0.03325}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [8 6 0 9]) -> [9 0 6 8]", "(reverse [1 8 4 1 2]) -> [2 1 4 8 1]", "(reverse [8 0 9 6 3]) -> [3 6 9 0 8]"], "time": 0.045305}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [3]) -> [3]", "(reverse [5 5 0 2]) -> [2 0 5 5]", "(reverse [0 2 0 0 1]) -> [1 0 0 2 0]"], "time": 0.03313}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [2 7]) -> [7 2]", "(reverse [1 9 6]) -> [6 9 1]", "(reverse [1 1 3]) -> [3 1 1]"], "time": 0.029529}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [1 1 5]) -> [5 1 1]", "(reverse [0 9 3]) -> [3 9 0]", "(reverse [4 9]) -> [9 4]"], "time": 0.045245}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [4]) -> [4]", "(reverse [5 8 9 5 2]) -> [2 5 9 8 5]", "(reverse [1 2 6 9 6]) -> [6 9 6 2 1]"], "time": 0.045032}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [1 3]) -> [3 1]", "(reverse [6 8 4 0 5]) -> [5 0 4 8 6]", "(reverse [4]) -> [4]"], "time": 0.033408}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [1]) -> [1]", "(reverse [7 7]) -> [7 7]", "(reverse [5 8 2 9]) -> [9 2 8 5]"], "time": 0.036179}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [0 9 4 6]) -> [6 4 9 0]", "(reverse [4]) -> [4]", "(reverse [7 2 9 9 6]) -> [6 9 9 2 7]"], "time": 0.025838}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [9 5 1]) -> [1 5 9]", "(reverse []) -> []", "(reverse [2 5 3]) -> [3 5 2]"], "time": 0.030582}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [0 5 2 5 6]) -> [6 5 2 5 0]", "(reverse [2 6 0 6]) -> [6 0 6 2]", "(reverse [4 7 7 4 0]) -> [0 4 7 7 4]"], "time": 0.036184}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [3 7]) -> [7 3]", "(reverse [5 6 9 6]) -> [6 9 6 5]", "(reverse [3 9 2 3 4]) -> [4 3 2 9 3]"], "time": 0.030542}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [7 7 4 7]) -> [7 4 7 7]", "(reverse [0 9 8 3 9]) -> [9 3 8 9 0]", "(reverse [6 5 4 6]) -> [6 4 5 6]"], "time": 0.025664}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [6 7 7 0]) -> [0 7 7 6]", "(reverse []) -> []", "(reverse []) -> []"], "time": 0.029758}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [4]) -> [4]", "(reverse [5 0 2 6]) -> [6 2 0 5]", "(reverse [4]) -> [4]"], "time": 0.030383}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [6 3 6 4]) -> [4 6 3 6]", "(reverse [0 8]) -> [8 0]"], "time": 0.029024}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [7 5]) -> [5 7]", "(reverse []) -> []", "(reverse [8 7 2 9 5]) -> [5 9 2 7 8]"], "time": 0.045181}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [1 0]) -> [0 1]", "(reverse []) -> []", "(reverse [9]) -> [9]"], "time": 0.030305}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [2]) -> [2]", "(reverse [4 0 2 7]) -> [7 2 0 4]", "(reverse [4 5]) -> [5 4]"], "time": 0.033506}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [1]) -> [1]", "(reverse []) -> []", "(reverse [2 4 5]) -> [5 4 2]"], "time": 0.037023}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [3]) -> [3]", "(reverse [2 6]) -> [6 2]", "(reverse [5 1]) -> [1 5]"], "time": 0.033064}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [1 6 0 3]) -> [3 0 6 1]", "(reverse [8 3 1 2 0]) -> [0 2 1 3 8]", "(reverse [8 7 1 0]) -> [0 1 7 8]"], "time": 0.045331}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [8 0 4 0]) -> [0 4 0 8]", "(reverse []) -> []", "(reverse []) -> []"], "time": 0.044546}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [7 8 5 4 4]) -> [4 4 5 8 7]", "(reverse [6 4 6 5]) -> [5 6 4 6]"], "time": 0.035502}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [2 8 0 4 3]) -> [3 4 0 8 2]", "(reverse []) -> []", "(reverse []) -> []"], "time": 0.034809}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [6 9 1 8]) -> [8 1 9 6]", "(reverse [0]) -> [0]", "(reverse [1 7]) -> [7 1]"], "time": 0.046374}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [6]) -> [6]", "(reverse [2 2 4]) -> [4 2 2]", "(reverse [8 9 4 2]) -> [2 4 9 8]"], "time": 0.038004}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [3 1]) -> [1 3]", "(reverse [4 3 7 3 4]) -> [4 3 7 3 4]", "(reverse [3]) -> [3]"], "time": 0.030889}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [2 7 3 3]) -> [3 3 7 2]", "(reverse [9 3 9 6]) -> [6 9 3 9]", "(reverse [5 7 7 8 3]) -> [3 8 7 7 5]"], "time": 0.027054}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [7 9 4 7]) -> [7 4 9 7]", "(reverse [7 2 1 1 7]) -> [7 1 1 2 7]", "(reverse [9 6]) -> [6 9]"], "time": 0.043443}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [5]) -> [5]", "(reverse [4 2 6 6 7]) -> [7 6 6 2 4]", "(reverse [3]) -> [3]"], "time": 0.026596}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [6 8 2 4 1]) -> [1 4 2 8 6]", "(reverse [2 7 0 7]) -> [7 0 7 2]", "(reverse [1 1]) -> [1 1]"], "time": 0.039536}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [5 8]) -> [8 5]", "(reverse [0 2]) -> [2 0]", "(reverse [2 5 1]) -> [1 5 2]"], "time": 0.037984}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [9 5]) -> [5 9]", "(reverse [5 3 6 0]) -> [0 6 3 5]", "(reverse [6 6 7 3]) -> [3 7 6 6]"], "time": 0.027491}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [8]) -> [8]", "(reverse []) -> []", "(reverse [1 6]) -> [6 1]"], "time": 0.042165}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [4 1]) -> [1 4]", "(reverse [8 9]) -> [9 8]", "(reverse [5 2 3 6]) -> [6 3 2 5]"], "time": 0.047623}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [1 5 8]) -> [8 5 1]", "(reverse [6 0 8 4]) -> [4 8 0 6]", "(reverse [9 9 4 1 3]) -> [3 1 4 9 9]"], "time": 0.032423}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [8 8 1 4]) -> [4 1 8 8]", "(reverse [0 4 7]) -> [7 4 0]"], "time": 0.028239}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [2]) -> [2]", "(reverse [9 8 4 3]) -> [3 4 8 9]", "(reverse []) -> []"], "time": 0.031273}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [1 0 2 6 4]) -> [4 6 2 0 1]", "(reverse [7]) -> [7]", "(reverse [1 2 1 7 2]) -> [2 7 1 2 1]"], "time": 0.033468}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [4 8 5 6 2]) -> [2 6 5 8 4]", "(reverse [2 4 6]) -> [6 4 2]", "(reverse []) -> []"], "time": 0.041268}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [3 3 6]) -> [6 3 3]", "(reverse [3 4 6 1]) -> [1 6 4 3]", "(reverse [9 7]) -> [7 9]"], "time": 0.035112}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [3 6 0]) -> [0 6 3]", "(reverse [6 8 8 2]) -> [2 8 8 6]", "(reverse [9]) -> [9]"], "time": 0.036134}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [9 5]) -> [5 9]", "(reverse [5 5]) -> [5 5]", "(reverse [0 8]) -> [8 0]"], "time": 0.032297}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [8]) -> [8]", "(reverse [5 1 2 9]) -> [9 2 1 5]", "(reverse []) -> []"], "time": 0.05132}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [5]) -> [5]", "(reverse [3 7 9]) -> [9 7 3]", "(reverse [4 3]) -> [3 4]"], "time": 0.031212}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [9 4 9 0 3]) -> [3 0 9 4 9]", "(reverse [1 3 9]) -> [9 3 1]", "(reverse [9]) -> [9]"], "time": 0.026043}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [0 1 8 2 2]) -> [2 2 8 1 0]", "(reverse [0 4 7]) -> [7 4 0]", "(reverse [4 1 8 6 8]) -> [8 6 8 1 4]"], "time": 0.025459}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [0 5 2 8 6]) -> [6 8 2 5 0]", "(reverse []) -> []", "(reverse [6 4 7 5]) -> [5 7 4 6]"], "time": 0.029194}
