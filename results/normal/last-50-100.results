{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 1]) -> 1", "(last [6]) -> 6", "(last [9 6 1]) -> 1", "(last [8 9 0 7]) -> 7", "(last [3 0 4 6 3]) -> 3", "(last [5 8 3 5 2]) -> 2", "(last [0 7 2 5 6]) -> 6", "(last [8 4 3]) -> 3", "(last [3 9]) -> 9", "(last [2 5 4]) -> 4", "(last [8 5 4 9]) -> 9", "(last [8]) -> 8", "(last [3]) -> 3", "(last [3 9 5]) -> 5", "(last [8 3 0 9 6]) -> 6", "(last [0 9 0 8]) -> 8", "(last [5 7 2 6]) -> 6", "(last [4 9 7]) -> 7", "(last [7]) -> 7", "(last [9 7 6 6 7]) -> 7", "(last [3]) -> 3", "(last [9 5 2]) -> 2", "(last [8 0 7 1 1]) -> 1", "(last [0 9 5]) -> 5", "(last [4 3 1 1 6]) -> 6", "(last [7]) -> 7", "(last [1 5 8 4]) -> 4", "(last [7]) -> 7", "(last [7 2 1]) -> 1", "(last [3]) -> 3", "(last [7 2 9]) -> 9", "(last [3 8 5 5]) -> 5", "(last [8]) -> 8", "(last [8 9 2 2]) -> 2", "(last [6 5]) -> 5", "(last [5 0 3 4 8]) -> 8", "(last [9 6]) -> 6", "(last [4 4 7]) -> 7", "(last [9 1 8 2 2]) -> 2", "(last [4]) -> 4", "(last [7]) -> 7", "(last [9 1 2 1 0]) -> 0", "(last [7 7]) -> 7", "(last [7 2 5 0 0]) -> 0", "(last [2 1]) -> 1", "(last [8 1 2 2 7]) -> 7", "(last [0]) -> 0", "(last [2]) -> 2", "(last [2 9 8 5]) -> 5"], "time": 0.030374}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1 7]) -> 7", "(last [9 5 1]) -> 1", "(last [7 4 7 4]) -> 4", "(last [4 5 1 6 4]) -> 4", "(last [1 8 6 1 5]) -> 5", "(last [3 9]) -> 9", "(last [2 3]) -> 3", "(last [1]) -> 1", "(last [2 2 4 2 4]) -> 4", "(last [1 1 9]) -> 9", "(last [0 6 5 7]) -> 7", "(last [0 8 3 1]) -> 1", "(last [8 6]) -> 6", "(last [1]) -> 1", "(last [1 2]) -> 2", "(last [7]) -> 7", "(last [7 0 4 9 5]) -> 5", "(last [2 9 9 4]) -> 4", "(last [8]) -> 8", "(last [8 8 9 9 4]) -> 4", "(last [4]) -> 4", "(last [7 2 6 0]) -> 0", "(last [0]) -> 0", "(last [5]) -> 5", "(last [9 7 8]) -> 8", "(last [2 6 9 9]) -> 9", "(last [2 5 5 3 8]) -> 8", "(last [1 6 0 4]) -> 4", "(last [1 4 9]) -> 9", "(last [3]) -> 3", "(last [2 3 1]) -> 1", "(last [4 6]) -> 6", "(last [9 3 5]) -> 5", "(last [0 8 0]) -> 0", "(last [9 5 5 7 4]) -> 4", "(last [1 4 0 0 7]) -> 7", "(last [9]) -> 9", "(last [9 8 9 6]) -> 6", "(last [0 3]) -> 3", "(last [7 2 2]) -> 2", "(last [0 2 4 6 2]) -> 2", "(last [1 6 3 6 2]) -> 2", "(last [1]) -> 1", "(last [1 9 8]) -> 8", "(last [1]) -> 1", "(last [5 8 5]) -> 5", "(last [0 7 5]) -> 5", "(last [9 2 0 3]) -> 3", "(last [2 7 5 5]) -> 5"], "time": 0.032958}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2 9 6 7]) -> 7", "(last [2 3]) -> 3", "(last [2]) -> 2", "(last [4 2]) -> 2", "(last [6 9 5]) -> 5", "(last [2 3 8 7 1]) -> 1", "(last [3 0 3 4]) -> 4", "(last [0 7 0]) -> 0", "(last [9 5 7 7]) -> 7", "(last [2 4]) -> 4", "(last [0 9 2 0]) -> 0", "(last [1 9]) -> 9", "(last [1 5 2]) -> 2", "(last [4 2]) -> 2", "(last [3 4 1]) -> 1", "(last [8 0]) -> 0", "(last [5]) -> 5", "(last [9 7 8]) -> 8", "(last [0 7 4]) -> 4", "(last [9 8 4 1]) -> 1", "(last [7]) -> 7", "(last [0]) -> 0", "(last [2]) -> 2", "(last [5 7 8 5]) -> 5", "(last [2 0 5 3]) -> 3", "(last [4 4]) -> 4", "(last [3]) -> 3", "(last [1 5]) -> 5", "(last [6 7 6 4 4]) -> 4", "(last [5 9 6]) -> 6", "(last [6 5 5]) -> 5", "(last [6]) -> 6", "(last [6]) -> 6", "(last [5 0 6]) -> 6", "(last [2 6 8]) -> 8", "(last [3]) -> 3", "(last [0 0]) -> 0", "(last [1 3 7 7]) -> 7", "(last [7]) -> 7", "(last [2 5 4 6 1]) -> 1", "(last [7 3]) -> 3", "(last [4 4]) -> 4", "(last [4 2 1 9 7]) -> 7", "(last [8 2]) -> 2", "(last [3 4]) -> 4", "(last [5 5 7 6 2]) -> 2", "(last [7 6]) -> 6", "(last [0 5]) -> 5", "(last [1 3 9 4]) -> 4"], "time": 0.03558}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [3 4 2 2]) -> 2", "(last [4 8]) -> 8", "(last [2 2 7 0 8]) -> 8", "(last [3 9 1]) -> 1", "(last [6 9 1 7 4]) -> 4", "(last [5]) -> 5", "(last [5 9]) -> 9", "(last [1 8 1]) -> 1", "(last [3 6 5 2 2]) -> 2", "(last [6 9 3 6]) -> 6", "(last [5 7 9 5 7]) -> 7", "(last [4 0 3]) -> 3", "(last [5 4 9]) -> 9", "(last [0 0 6 1]) -> 1", "(last [4 4 9 4 1]) -> 1", "(last [2 8 8 7 1]) -> 1", "(last [4 3]) -> 3", "(last [2 5 5 2]) -> 2", "(last [8 3]) -> 3", "(last [1 0 3]) -> 3", "(last [7]) -> 7", "(last [4 6]) -> 6", "(last [3 2 4 8]) -> 8", "(last [0 6 5 9 6]) -> 6", "(last [3]) -> 3", "(last [2 2]) -> 2", "(last [4 0 2]) -> 2", "(last [4 4]) -> 4", "(last [1 2 8 2 8]) -> 8", "(last [6]) -> 6", "(last [0]) -> 0", "(last [9 6 2 4 3]) -> 3", "(last [8 9]) -> 9", "(last [1 1 1]) -> 1", "(last [7]) -> 7", "(last [7 2]) -> 2", "(last [1 0]) -> 0", "(last [6 0]) -> 0", "(last [3 0 3]) -> 3", "(last [6 4 0]) -> 0", "(last [8 4 7]) -> 7", "(last [1]) -> 1", "(last [7 9 5 2 7]) -> 7", "(last [6 3 9 5]) -> 5", "(last [7 7 6 7 3]) -> 3", "(last [7 1 0 2 9]) -> 9", "(last [0]) -> 0", "(last [2 9 5]) -> 5", "(last [5]) -> 5"], "time": 0.035055}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0 4 3 7 9]) -> 9", "(last [0 0 3 3]) -> 3", "(last [8 3]) -> 3", "(last [6 0 7 3]) -> 3", "(last [3 9 7]) -> 7", "(last [3 1 2 4 9]) -> 9", "(last [2 6 5]) -> 5", "(last [2 7 4 5]) -> 5", "(last [0 6]) -> 6", "(last [7]) -> 7", "(last [4 6 8]) -> 8", "(last [2 9 2 6]) -> 6", "(last [2]) -> 2", "(last [2 6]) -> 6", "(last [7 7]) -> 7", "(last [1 8]) -> 8", "(last [0 6]) -> 6", "(last [3 8]) -> 8", "(last [7 3 6 1 0]) -> 0", "(last [3 8 0 3]) -> 3", "(last [5 0 2 7]) -> 7", "(last [0 9 0 0 6]) -> 6", "(last [0]) -> 0", "(last [1 6]) -> 6", "(last [7 0 7]) -> 7", "(last [0 7 2 3]) -> 3", "(last [7]) -> 7", "(last [8]) -> 8", "(last [4 3 9]) -> 9", "(last [7 9 4 7 7]) -> 7", "(last [9]) -> 9", "(last [3 8 1 3 2]) -> 2", "(last [3 8]) -> 8", "(last [6 0]) -> 0", "(last [3 3 0 9 3]) -> 3", "(last [8 9]) -> 9", "(last [2 5]) -> 5", "(last [1]) -> 1", "(last [2 2 1 0 9]) -> 9", "(last [0 5 5]) -> 5", "(last [7 5 6]) -> 6", "(last [3 9]) -> 9", "(last [5 3 7 9]) -> 9", "(last [1 0]) -> 0", "(last [4 9 7 6 8]) -> 8", "(last [7 7 3 9]) -> 9", "(last [7 8 1]) -> 1", "(last [9 7 1 6 9]) -> 9", "(last [8 5 6 8 0]) -> 0"], "time": 0.048768}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [3 9 5 7]) -> 7", "(last [5 8 8]) -> 8", "(last [7 8 4 0 9]) -> 9", "(last [3 4 0 9]) -> 9", "(last [5 0 5 9]) -> 9", "(last [0 4]) -> 4", "(last [7]) -> 7", "(last [4 6 8 9 0]) -> 0", "(last [6 2 0 0 4]) -> 4", "(last [6 4 4]) -> 4", "(last [8]) -> 8", "(last [2 5]) -> 5", "(last [0 4]) -> 4", "(last [7 8 3 0 8]) -> 8", "(last [6 3 8 2]) -> 2", "(last [2 1 5 4 9]) -> 9", "(last [6 9 2 5]) -> 5", "(last [2]) -> 2", "(last [1 4 4 3]) -> 3", "(last [6 2 4]) -> 4", "(last [6 0 3 2 3]) -> 3", "(last [8 6 1 5]) -> 5", "(last [3 4 5]) -> 5", "(last [2 5 7]) -> 7", "(last [8 2]) -> 2", "(last [6 5 0 2 9]) -> 9", "(last [8 4]) -> 4", "(last [9 2 9 4 4]) -> 4", "(last [4 3 4 3 2]) -> 2", "(last [9 3 2]) -> 2", "(last [6 3 1 8 7]) -> 7", "(last [7]) -> 7", "(last [5 4]) -> 4", "(last [1 0]) -> 0", "(last [7]) -> 7", "(last [5 2 0 6]) -> 6", "(last [9 8 5]) -> 5", "(last [2 7]) -> 7", "(last [0 3 7 6]) -> 6", "(last [3 6 8 4 4]) -> 4", "(last [7 7 8 5 4]) -> 4", "(last [6]) -> 6", "(last [3 1 5]) -> 5", "(last [4 2 1 4 2]) -> 2", "(last [1 4 1 7]) -> 7", "(last [0 2 7]) -> 7", "(last [8]) -> 8", "(last [5 9 9 1]) -> 1", "(last [6 0 4 9]) -> 9"], "time": 0.050082}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7 7 6 4]) -> 4", "(last [1]) -> 1", "(last [9 8 7 8 2]) -> 2", "(last [5]) -> 5", "(last [2 2]) -> 2", "(last [5 1 2 7 1]) -> 1", "(last [6 9]) -> 9", "(last [8 5]) -> 5", "(last [1]) -> 1", "(last [1 4 6 3 8]) -> 8", "(last [1]) -> 1", "(last [2]) -> 2", "(last [7 5 5]) -> 5", "(last [8 9 9]) -> 9", "(last [1 3 9]) -> 9", "(last [2]) -> 2", "(last [2 0 6]) -> 6", "(last [1 3 2 6]) -> 6", "(last [4 4 3 1 1]) -> 1", "(last [7 5 2 5]) -> 5", "(last [5 8 5 9]) -> 9", "(last [7]) -> 7", "(last [1 3 1 4]) -> 4", "(last [3]) -> 3", "(last [7 5]) -> 5", "(last [6 0 1]) -> 1", "(last [9]) -> 9", "(last [4]) -> 4", "(last [2 3 6 7]) -> 7", "(last [8 3 7 9]) -> 9", "(last [2]) -> 2", "(last [7 9 4 2]) -> 2", "(last [2 5]) -> 5", "(last [0 3 7 6]) -> 6", "(last [1 7 5 8 1]) -> 1", "(last [5 9 5]) -> 5", "(last [9]) -> 9", "(last [2 2 5]) -> 5", "(last [1 7 0]) -> 0", "(last [9 5 6]) -> 6", "(last [4 0]) -> 0", "(last [8 3 4]) -> 4", "(last [5 3 8]) -> 8", "(last [9]) -> 9", "(last [2 5 6 5]) -> 5", "(last [2]) -> 2", "(last [9 6 6 7]) -> 7", "(last [4 0 4]) -> 4", "(last [4 6]) -> 6"], "time": 0.034274}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7 0 3]) -> 3", "(last [0]) -> 0", "(last [7]) -> 7", "(last [2]) -> 2", "(last [0 6 7]) -> 7", "(last [6 1 7 6 6]) -> 6", "(last [6 1]) -> 1", "(last [2 5]) -> 5", "(last [5 3 4 4]) -> 4", "(last [3 0 6 0]) -> 0", "(last [2 1 9]) -> 9", "(last [5]) -> 5", "(last [3]) -> 3", "(last [0]) -> 0", "(last [1 5 2 5 4]) -> 4", "(last [9]) -> 9", "(last [2 3 9 1 6]) -> 6", "(last [7 2 8]) -> 8", "(last [3 7 0 5 8]) -> 8", "(last [0]) -> 0", "(last [6 8 0]) -> 0", "(last [4 2 1]) -> 1", "(last [8 1 0 6]) -> 6", "(last [2 5 4 9 9]) -> 9", "(last [5 5 8 3 1]) -> 1", "(last [6 2]) -> 2", "(last [8 9 6 0]) -> 0", "(last [1]) -> 1", "(last [4 2 5 0]) -> 0", "(last [9 7 6 9 9]) -> 9", "(last [9 8 5 2]) -> 2", "(last [3 0]) -> 0", "(last [5 9 7 9 3]) -> 3", "(last [2 6 0 1 8]) -> 8", "(last [1 5 5 0 1]) -> 1", "(last [3 3 4]) -> 4", "(last [2 1]) -> 1", "(last [0 9 3 4]) -> 4", "(last [1 9]) -> 9", "(last [2 3 1 3 6]) -> 6", "(last [2 8 8 0 1]) -> 1", "(last [5 5 6 7]) -> 7", "(last [0 4]) -> 4", "(last [5 5 0 2 4]) -> 4", "(last [1 1 9]) -> 9", "(last [4 1]) -> 1", "(last [4 3]) -> 3", "(last [0]) -> 0", "(last [0 4 5 9 4]) -> 4"], "time": 0.046797}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0 7 6 7]) -> 7", "(last [8 1]) -> 1", "(last [4 6 1 2]) -> 2", "(last [3 8]) -> 8", "(last [4]) -> 4", "(last [8 9 2 8]) -> 8", "(last [2 8 9]) -> 9", "(last [4 4 0 1]) -> 1", "(last [2 9 2 1 6]) -> 6", "(last [8 0 2]) -> 2", "(last [0 4]) -> 4", "(last [9 6 4 8]) -> 8", "(last [7]) -> 7", "(last [5 0]) -> 0", "(last [7 0]) -> 0", "(last [9 7 4]) -> 4", "(last [2 3 9 2 0]) -> 0", "(last [7 2 7 8]) -> 8", "(last [1 4 3]) -> 3", "(last [9 3 9 8]) -> 8", "(last [5 4]) -> 4", "(last [1 4]) -> 4", "(last [9]) -> 9", "(last [4 1 6]) -> 6", "(last [8 3]) -> 3", "(last [2 8 8 0 8]) -> 8", "(last [2]) -> 2", "(last [2 9 0 6]) -> 6", "(last [5 4 0]) -> 0", "(last [7 5 5]) -> 5", "(last [7 7 4 2 2]) -> 2", "(last [6 8 0]) -> 0", "(last [4 4 5 8]) -> 8", "(last [4]) -> 4", "(last [4 8 3]) -> 3", "(last [2 0 1 7]) -> 7", "(last [2 4 8 6 4]) -> 4", "(last [7 4]) -> 4", "(last [6 2 7 5 6]) -> 6", "(last [0]) -> 0", "(last [3 8]) -> 8", "(last [4 2]) -> 2", "(last [7 1 5 7]) -> 7", "(last [2 1 1 6]) -> 6", "(last [1]) -> 1", "(last [1 8 1 6 0]) -> 0", "(last [3 9 5 5]) -> 5", "(last [8 0 6 2 9]) -> 9", "(last [3 0]) -> 0"], "time": 0.033327}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7]) -> 7", "(last [8 1 2]) -> 2", "(last [5 3]) -> 3", "(last [1 1 5]) -> 5", "(last [4]) -> 4", "(last [5 1 9 5 8]) -> 8", "(last [3 2]) -> 2", "(last [4 0 3 7 7]) -> 7", "(last [8 0 1 1 6]) -> 6", "(last [0 4 7 8]) -> 8", "(last [2 5 8 9 7]) -> 7", "(last [3 2 9]) -> 9", "(last [6 7]) -> 7", "(last [2]) -> 2", "(last [8]) -> 8", "(last [5 0 6 9 3]) -> 3", "(last [5 5 7 5 0]) -> 0", "(last [1 8 1 2]) -> 2", "(last [2 6 7 9 6]) -> 6", "(last [4 4 3 7]) -> 7", "(last [3 1]) -> 1", "(last [4 1]) -> 1", "(last [4]) -> 4", "(last [1 4]) -> 4", "(last [6]) -> 6", "(last [6 2]) -> 2", "(last [5 5 0 6]) -> 6", "(last [6]) -> 6", "(last [2 8 4]) -> 4", "(last [4 3 8 3 9]) -> 9", "(last [3 7 1 5 4]) -> 4", "(last [3 2 3 4 4]) -> 4", "(last [7 7]) -> 7", "(last [2 5 8]) -> 8", "(last [9 6 3 1 8]) -> 8", "(last [5 0 0 3]) -> 3", "(last [8 1 6]) -> 6", "(last [7]) -> 7", "(last [3 9 0 1 4]) -> 4", "(last [4 8]) -> 8", "(last [2 5 4 9]) -> 9", "(last [3 0 2 8 7]) -> 7", "(last [3 4]) -> 4", "(last [0 0]) -> 0", "(last [5 4 3 9]) -> 9", "(last [3 2 9 6]) -> 6", "(last [7 9 4]) -> 4", "(last [4 2]) -> 2", "(last [4 1 3 3 3]) -> 3"], "time": 0.033774}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [3 6 1]) -> 1", "(last [3 0 7 6]) -> 6", "(last [7 3 1 3]) -> 3", "(last [3 3 4]) -> 4", "(last [2 8 6 6]) -> 6", "(last [0 4 4]) -> 4", "(last [3 6 6]) -> 6", "(last [4 0 1]) -> 1", "(last [9]) -> 9", "(last [9 6 9 2 9]) -> 9", "(last [9 5 2 2 9]) -> 9", "(last [3 6 6]) -> 6", "(last [0 9 2]) -> 2", "(last [5 1 4 0]) -> 0", "(last [0 1 5 2 8]) -> 8", "(last [1 4 4 7]) -> 7", "(last [9 6 9]) -> 9", "(last [4 4 2 8]) -> 8", "(last [1 3 9 6]) -> 6", "(last [0 3 5 1 7]) -> 7", "(last [8 6 5]) -> 5", "(last [9]) -> 9", "(last [5 8 9]) -> 9", "(last [3 4 5 7]) -> 7", "(last [6]) -> 6", "(last [7 5]) -> 5", "(last [9 9 1 8 3]) -> 3", "(last [5 0 9]) -> 9", "(last [2]) -> 2", "(last [7 4 4 3 0]) -> 0", "(last [8 6]) -> 6", "(last [0]) -> 0", "(last [9 9 7 2]) -> 2", "(last [4 5 2 0 5]) -> 5", "(last [7 8 1 2]) -> 2", "(last [7 7 4]) -> 4", "(last [8 9 6 2]) -> 2", "(last [4]) -> 4", "(last [1 0]) -> 0", "(last [8]) -> 8", "(last [6 5]) -> 5", "(last [4 9 2 2 4]) -> 4", "(last [1 7]) -> 7", "(last [1 1]) -> 1", "(last [9 4 1 5]) -> 5", "(last [7 8 9 2 5]) -> 5", "(last [2 8 1 1]) -> 1", "(last [1]) -> 1", "(last [9 3 8 4 7]) -> 7"], "time": 0.046663}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9]) -> 9", "(last [6 6 5 3]) -> 3", "(last [8]) -> 8", "(last [4 7 8]) -> 8", "(last [9 3 9 9]) -> 9", "(last [3 5 2]) -> 2", "(last [8 0 3]) -> 3", "(last [2 9 5 9]) -> 9", "(last [1 4 8 8 4]) -> 4", "(last [9 6]) -> 6", "(last [4 2 2 6]) -> 6", "(last [8 2]) -> 2", "(last [9 9]) -> 9", "(last [3 7 9 0]) -> 0", "(last [1]) -> 1", "(last [0 8 2]) -> 2", "(last [9 3 3]) -> 3", "(last [4 1 7 8]) -> 8", "(last [7 4 0]) -> 0", "(last [9]) -> 9", "(last [0 4 9 0]) -> 0", "(last [2 5 7 4]) -> 4", "(last [4 9 6 3]) -> 3", "(last [5 7]) -> 7", "(last [2 2]) -> 2", "(last [6]) -> 6", "(last [1 1 8 3]) -> 3", "(last [8 6 1 1]) -> 1", "(last [3]) -> 3", "(last [7 0 4 1 2]) -> 2", "(last [0 1 8 9 1]) -> 1", "(last [3 3]) -> 3", "(last [4 3 3 5]) -> 5", "(last [3 6 3]) -> 3", "(last [2 1 4]) -> 4", "(last [6 2]) -> 2", "(last [1 0]) -> 0", "(last [2 3]) -> 3", "(last [9 0 5 9]) -> 9", "(last [0 6 5 8 4]) -> 4", "(last [4]) -> 4", "(last [6 2 6]) -> 6", "(last [9 6 7 9 4]) -> 4", "(last [8 7 9 4]) -> 4", "(last [7]) -> 7", "(last [3 2]) -> 2", "(last [6 9]) -> 9", "(last [1 8 8]) -> 8", "(last [9 0]) -> 0"], "time": 0.033874}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8 6 0 6]) -> 6", "(last [7]) -> 7", "(last [5 1 4]) -> 4", "(last [2]) -> 2", "(last [8 1]) -> 1", "(last [3 2 7 0]) -> 0", "(last [4 0]) -> 0", "(last [2 9 2]) -> 2", "(last [2 6]) -> 6", "(last [9 5]) -> 5", "(last [1 0]) -> 0", "(last [0 9]) -> 9", "(last [9 9 9 5]) -> 5", "(last [6 7 8 3]) -> 3", "(last [6 7 8]) -> 8", "(last [9 2 6 5]) -> 5", "(last [6 1 4]) -> 4", "(last [9]) -> 9", "(last [9 1 1 8]) -> 8", "(last [4]) -> 4", "(last [3]) -> 3", "(last [0 8 5 4]) -> 4", "(last [0 2 9 1]) -> 1", "(last [6]) -> 6", "(last [3 1 4 1]) -> 1", "(last [8 3 7]) -> 7", "(last [0 1 0 0]) -> 0", "(last [3 4]) -> 4", "(last [2 7]) -> 7", "(last [5 6 8]) -> 8", "(last [5 4 7 1 1]) -> 1", "(last [4 0 9 1]) -> 1", "(last [4 8 3]) -> 3", "(last [5 8 2]) -> 2", "(last [8 7 5]) -> 5", "(last [5 8 4 6 9]) -> 9", "(last [0 4 7]) -> 7", "(last [7 2]) -> 2", "(last [6 4 4]) -> 4", "(last [7 2 8 1]) -> 1", "(last [8 9]) -> 9", "(last [9 3 4 6]) -> 6", "(last [1 9 1 9]) -> 9", "(last [7 9 9]) -> 9", "(last [3 2 9]) -> 9", "(last [4 9 5 9]) -> 9", "(last [8 7]) -> 7", "(last [7 9 5 6 4]) -> 4", "(last [7 4 5 4]) -> 4"], "time": 0.049124}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8 9 5 7]) -> 7", "(last [6 0]) -> 0", "(last [3 5]) -> 5", "(last [8 2 7 6]) -> 6", "(last [4 5]) -> 5", "(last [1]) -> 1", "(last [2 6 0 6 2]) -> 2", "(last [9 1 6]) -> 6", "(last [3]) -> 3", "(last [0 5 6 7]) -> 7", "(last [4 2 2]) -> 2", "(last [0 6]) -> 6", "(last [1 3]) -> 3", "(last [4 1 4]) -> 4", "(last [6 6 2 1 7]) -> 7", "(last [6 7]) -> 7", "(last [9 9 6 7]) -> 7", "(last [4 2 2 9 1]) -> 1", "(last [2]) -> 2", "(last [8 9 7 4 0]) -> 0", "(last [2 2 8 5 4]) -> 4", "(last [9]) -> 9", "(last [7]) -> 7", "(last [2 5 2 3 5]) -> 5", "(last [0 4 0 6 7]) -> 7", "(last [9 8 4]) -> 4", "(last [3 1 4 5]) -> 5", "(last [6 3]) -> 3", "(last [0 4]) -> 4", "(last [7 1]) -> 1", "(last [4 4 7 0]) -> 0", "(last [4 6]) -> 6", "(last [0 4 0 4]) -> 4", "(last [8 4 0 2]) -> 2", "(last [1]) -> 1", "(last [1]) -> 1", "(last [0 3 2]) -> 2", "(last [9 5 8]) -> 8", "(last [7 3 5]) -> 5", "(last [2]) -> 2", "(last [1]) -> 1", "(last [3 2]) -> 2", "(last [4]) -> 4", "(last [8 1 9 4]) -> 4", "(last [5 6 3 9]) -> 9", "(last [0 1 4 6 2]) -> 2", "(last [1 1 5]) -> 5", "(last [5]) -> 5", "(last [5]) -> 5"], "time": 0.049613}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1 0]) -> 0", "(last [6 0 3 1 2]) -> 2", "(last [7 8 0]) -> 0", "(last [8 3 9 4]) -> 4", "(last [8]) -> 8", "(last [8 3]) -> 3", "(last [4 9 8 7 3]) -> 3", "(last [8 7 8]) -> 8", "(last [5 7 3 4 8]) -> 8", "(last [4 7]) -> 7", "(last [5 4]) -> 4", "(last [5 9]) -> 9", "(last [1 1 4 5]) -> 5", "(last [1]) -> 1", "(last [6 6]) -> 6", "(last [6 8 8 4]) -> 4", "(last [5 8 4]) -> 4", "(last [4 6 3 4]) -> 4", "(last [7 6 9 9]) -> 9", "(last [7 9 7 4]) -> 4", "(last [5 6]) -> 6", "(last [7 2]) -> 2", "(last [8 3 8 0 8]) -> 8", "(last [3 3]) -> 3", "(last [5 2]) -> 2", "(last [8 7 1 5 5]) -> 5", "(last [6 8 1 2 3]) -> 3", "(last [8]) -> 8", "(last [2 6 0 9]) -> 9", "(last [1]) -> 1", "(last [1 9 6 4 8]) -> 8", "(last [6 5 5]) -> 5", "(last [5 5 1 8]) -> 8", "(last [3 6 7 4 0]) -> 0", "(last [2 8]) -> 8", "(last [9 7]) -> 7", "(last [6 2 5 0 3]) -> 3", "(last [8]) -> 8", "(last [2 0 5 5 1]) -> 1", "(last [4 3 6]) -> 6", "(last [6]) -> 6", "(last [0]) -> 0", "(last [8 0 0 9]) -> 9", "(last [9 2 7 9 7]) -> 7", "(last [3 4 9 8]) -> 8", "(last [5 9 3 8]) -> 8", "(last [3]) -> 3", "(last [9 1 0 8 2]) -> 2", "(last [1 1 5 3]) -> 3"], "time": 0.044052}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1 5]) -> 5", "(last [1 2]) -> 2", "(last [7]) -> 7", "(last [5 3]) -> 3", "(last [8 8 1 5 6]) -> 6", "(last [7 1]) -> 1", "(last [9 4 9]) -> 9", "(last [8 6]) -> 6", "(last [4 6]) -> 6", "(last [2 0]) -> 0", "(last [4 1]) -> 1", "(last [3 3]) -> 3", "(last [0 6 6 9]) -> 9", "(last [0 3 1]) -> 1", "(last [0 8 3 1]) -> 1", "(last [6 4 3 5]) -> 5", "(last [7 2 9]) -> 9", "(last [6 8]) -> 8", "(last [0 5 0]) -> 0", "(last [9 1 2 4 5]) -> 5", "(last [1 0 3]) -> 3", "(last [6 0 5 5 7]) -> 7", "(last [4 4 4]) -> 4", "(last [1 0 1 2 5]) -> 5", "(last [7 8]) -> 8", "(last [5 9 6 8 9]) -> 9", "(last [6 1 1 4]) -> 4", "(last [0 8 7 0]) -> 0", "(last [8]) -> 8", "(last [0 4 2 7 6]) -> 6", "(last [8 2 6 5]) -> 5", "(last [6 2]) -> 2", "(last [7 4 0 3 7]) -> 7", "(last [1 3 1 1]) -> 1", "(last [4 6 6 9 4]) -> 4", "(last [1 3 0]) -> 0", "(last [5 3 6 3 8]) -> 8", "(last [8 4]) -> 4", "(last [7]) -> 7", "(last [1 5]) -> 5", "(last [8]) -> 8", "(last [5 5 3 7 9]) -> 9", "(last [2 6 5 1]) -> 1", "(last [9 6 6 4 7]) -> 7", "(last [1 7 7 9 8]) -> 8", "(last [4 9 8 6]) -> 6", "(last [4 8 0 4 6]) -> 6", "(last [3 4 0 6 7]) -> 7", "(last [4]) -> 4"], "time": 0.035481}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0 5 5 0]) -> 0", "(last [8 0 8]) -> 8", "(last [0 6 7 1 3]) -> 3", "(last [3 8]) -> 8", "(last [4]) -> 4", "(last [1 4]) -> 4", "(last [6]) -> 6", "(last [9 1 3 3]) -> 3", "(last [8]) -> 8", "(last [7 7 7 2]) -> 2", "(last [9 2]) -> 2", "(last [0 4 1 2 8]) -> 8", "(last [7 2 7 8 7]) -> 7", "(last [6 4 5]) -> 5", "(last [1]) -> 1", "(last [0 9 2]) -> 2", "(last [6 8 8 3]) -> 3", "(last [5]) -> 5", "(last [6]) -> 6", "(last [2]) -> 2", "(last [0 5]) -> 5", "(last [2 1 1 1 1]) -> 1", "(last [7 5]) -> 5", "(last [5 7 0 7 7]) -> 7", "(last [2 3 5]) -> 5", "(last [8 8 3]) -> 3", "(last [4 6 0 0]) -> 0", "(last [4 9]) -> 9", "(last [9 5 2 4]) -> 4", "(last [4 2 9 6 2]) -> 2", "(last [4 3]) -> 3", "(last [9 3]) -> 3", "(last [8 4 4]) -> 4", "(last [5 4 3]) -> 3", "(last [0 1 9]) -> 9", "(last [4 3]) -> 3", "(last [0 2 5 4]) -> 4", "(last [8]) -> 8", "(last [1]) -> 1", "(last [9 8 9 7 8]) -> 8", "(last [0 0]) -> 0", "(last [7 3 3 1]) -> 1", "(last [6 9 1 1]) -> 1", "(last [0 6 5 9]) -> 9", "(last [6 9 4]) -> 4", "(last [5 0 6 6]) -> 6", "(last [6 7]) -> 7", "(last [5 4]) -> 4", "(last [3 3]) -> 3"], "time": 0.037761}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 9 4]) -> 4", "(last [0 9 7 9 6]) -> 6", "(last [0]) -> 0", "(last [4 2 9]) -> 9", "(last [9]) -> 9", "(last [7 6]) -> 6", "(last [5]) -> 5", "(last [7 8 8 3 0]) -> 0", "(last [9 4]) -> 4", "(last [8 0]) -> 0", "(last [9 0 5]) -> 5", "(last [7 1 5]) -> 5", "(last [2 9]) -> 9", "(last [6 5]) -> 5", "(last [2 8 2]) -> 2", "(last [7 9]) -> 9", "(last [1 6 1]) -> 1", "(last [2 8 0 9 3]) -> 3", "(last [2]) -> 2", "(last [8 0]) -> 0", "(last [5 0 4]) -> 4", "(last [9 8 5 3]) -> 3", "(last [4 6 7 9 8]) -> 8", "(last [5 3]) -> 3", "(last [0]) -> 0", "(last [6 1 7 4 2]) -> 2", "(last [2 4 1 0]) -> 0", "(last [6]) -> 6", "(last [3 9 6]) -> 6", "(last [2 6 6]) -> 6", "(last [1 1 5]) -> 5", "(last [1 4]) -> 4", "(last [0]) -> 0", "(last [1 1]) -> 1", "(last [0 3 7]) -> 7", "(last [3]) -> 3", "(last [2 6 7 9 7]) -> 7", "(last [5 3 2 0]) -> 0", "(last [1]) -> 1", "(last [0 8 4 1 7]) -> 7", "(last [2 4 6]) -> 6", "(last [2 8 3 2]) -> 2", "(last [2 4 9 9 8]) -> 8", "(last [7 6 4 6]) -> 6", "(last [5 5 3]) -> 3", "(last [6 6 2 9 3]) -> 3", "(last [2 2 3 4 4]) -> 4", "(last [8 9 1 6 7]) -> 7", "(last [2 0 9 9]) -> 9"], "time": 0.044839}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1]) -> 1", "(last [0]) -> 0", "(last [7]) -> 7", "(last [7 0 2]) -> 2", "(last [9 8 6 4]) -> 4", "(last [0 8 5 6]) -> 6", "(last [5 1 7 9 6]) -> 6", "(last [0]) -> 0", "(last [7]) -> 7", "(last [0]) -> 0", "(last [0 5]) -> 5", "(last [1 9 6 6]) -> 6", "(last [9]) -> 9", "(last [1 7 8]) -> 8", "(last [5 6 1 2 7]) -> 7", "(last [4 4]) -> 4", "(last [6 1 0 5]) -> 5", "(last [6 1 8 6 0]) -> 0", "(last [0 3 1 6]) -> 6", "(last [2 2 6 6]) -> 6", "(last [2]) -> 2", "(last [2 9 6 0 9]) -> 9", "(last [1 8]) -> 8", "(last [2]) -> 2", "(last [9 4 1]) -> 1", "(last [8 5 1 3]) -> 3", "(last [2 7 3 9 3]) -> 3", "(last [4 9 6]) -> 6", "(last [3 9 8 1 4]) -> 4", "(last [5 3]) -> 3", "(last [9 5 6 0]) -> 0", "(last [2 2 2]) -> 2", "(last [6 8]) -> 8", "(last [9 4 1]) -> 1", "(last [6]) -> 6", "(last [6 7 6 3 2]) -> 2", "(last [5 9 1]) -> 1", "(last [8 8 3 9 2]) -> 2", "(last [9 0]) -> 0", "(last [4 2 3 5 7]) -> 7", "(last [9 7 0 2 0]) -> 0", "(last [5]) -> 5", "(last [5 9 8 1]) -> 1", "(last [6 9]) -> 9", "(last [1 2 3]) -> 3", "(last [8 1 7]) -> 7", "(last [9]) -> 9", "(last [6 5 5 8 4]) -> 4", "(last [9 7 8]) -> 8"], "time": 0.029893}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2 8 4]) -> 4", "(last [0 5]) -> 5", "(last [6 5 9 0]) -> 0", "(last [3 4 4]) -> 4", "(last [8 0 8 0]) -> 0", "(last [8 0 7 5]) -> 5", "(last [9 2 2]) -> 2", "(last [2 7 0 6]) -> 6", "(last [6 1 9 8]) -> 8", "(last [0 6]) -> 6", "(last [6]) -> 6", "(last [7 3 5]) -> 5", "(last [8 1 9 5]) -> 5", "(last [3 8 6 2]) -> 2", "(last [1 0 5 9 7]) -> 7", "(last [8 9 9]) -> 9", "(last [1]) -> 1", "(last [2 8]) -> 8", "(last [2 8 5 2]) -> 2", "(last [0 4 7]) -> 7", "(last [3 3 4 8 8]) -> 8", "(last [9 5 3 8 0]) -> 0", "(last [4]) -> 4", "(last [5 4]) -> 4", "(last [7 8]) -> 8", "(last [8]) -> 8", "(last [7 6 4 8 1]) -> 1", "(last [9 5 8]) -> 8", "(last [6 7 3 5 5]) -> 5", "(last [1]) -> 1", "(last [8]) -> 8", "(last [4 4 6 7 1]) -> 1", "(last [5]) -> 5", "(last [5]) -> 5", "(last [7 2 6]) -> 6", "(last [6 0]) -> 0", "(last [0]) -> 0", "(last [9 2 5]) -> 5", "(last [1 3 5 6]) -> 6", "(last [4 3 5 6]) -> 6", "(last [6 2]) -> 2", "(last [5 7 2 8 0]) -> 0", "(last [6 7 3]) -> 3", "(last [0]) -> 0", "(last [4 5 5 1]) -> 1", "(last [2 6 5]) -> 5", "(last [8 1]) -> 1", "(last [7]) -> 7", "(last [8 2 8 9 9]) -> 9"], "time": 0.04662}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [6 3]) -> 3", "(last [9 9]) -> 9", "(last [3 5 5 1 1]) -> 1", "(last [5 6 1]) -> 1", "(last [7 0 6]) -> 6", "(last [1]) -> 1", "(last [4 6 8 6 6]) -> 6", "(last [7 6 0 7]) -> 7", "(last [3]) -> 3", "(last [5 3]) -> 3", "(last [8]) -> 8", "(last [8]) -> 8", "(last [0]) -> 0", "(last [0 8 9]) -> 9", "(last [1 6 0 4 6]) -> 6", "(last [0 0 6]) -> 6", "(last [9 0 1 6]) -> 6", "(last [5 5 5 8]) -> 8", "(last [5 8 8]) -> 8", "(last [7 7]) -> 7", "(last [9]) -> 9", "(last [5]) -> 5", "(last [3 1]) -> 1", "(last [7]) -> 7", "(last [0 2 9 7]) -> 7", "(last [1 2 3 5]) -> 5", "(last [7 9 8]) -> 8", "(last [6]) -> 6", "(last [0 4 6]) -> 6", "(last [3 0 5]) -> 5", "(last [4 6 7 3]) -> 3", "(last [5 7 2 0]) -> 0", "(last [7 1]) -> 1", "(last [9 9 9 1]) -> 1", "(last [1]) -> 1", "(last [4]) -> 4", "(last [9 1 4 0 7]) -> 7", "(last [8 3 6 7]) -> 7", "(last [8 9]) -> 9", "(last [2 7]) -> 7", "(last [3 3 8 8]) -> 8", "(last [8 9 2 5]) -> 5", "(last [7 9 9 6]) -> 6", "(last [3 0 4]) -> 4", "(last [1 6 3 8]) -> 8", "(last [7 9 5 1 8]) -> 8", "(last [9 8 5]) -> 5", "(last [0 0]) -> 0", "(last [8 2 7 6 2]) -> 2"], "time": 0.040118}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [3 2]) -> 2", "(last [6 5]) -> 5", "(last [8 1 7 5]) -> 5", "(last [8 2 1 4 3]) -> 3", "(last [3 1 7]) -> 7", "(last [4]) -> 4", "(last [0 9 6 2]) -> 2", "(last [2]) -> 2", "(last [2 6 0 0 0]) -> 0", "(last [3 8 2 8]) -> 8", "(last [3 3 4 6]) -> 6", "(last [7]) -> 7", "(last [9]) -> 9", "(last [0 1 0 6 8]) -> 8", "(last [4 2]) -> 2", "(last [9]) -> 9", "(last [4 6]) -> 6", "(last [3]) -> 3", "(last [7 2 9]) -> 9", "(last [8 6]) -> 6", "(last [1 1 7]) -> 7", "(last [0 2]) -> 2", "(last [2 6 9 9 0]) -> 0", "(last [5 0 4]) -> 4", "(last [4 4 7 1 8]) -> 8", "(last [2 7]) -> 7", "(last [1 7 7]) -> 7", "(last [6 3 3 4]) -> 4", "(last [2]) -> 2", "(last [3 0 7 1]) -> 1", "(last [3 1 4 8]) -> 8", "(last [5 9 5 5]) -> 5", "(last [7 7 6 5 2]) -> 2", "(last [0]) -> 0", "(last [1 8 6 1 1]) -> 1", "(last [1 4 0 5 3]) -> 3", "(last [9 9 8 3 4]) -> 4", "(last [3 7 8]) -> 8", "(last [1 0 3]) -> 3", "(last [8 5]) -> 5", "(last [2]) -> 2", "(last [3 1 4]) -> 4", "(last [9 4 9 6]) -> 6", "(last [2]) -> 2", "(last [2 2]) -> 2", "(last [1 3]) -> 3", "(last [8]) -> 8", "(last [3 9 2]) -> 2", "(last [6 4 0 8]) -> 8"], "time": 0.046955}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 1 1 5]) -> 5", "(last [4 0 6 8 5]) -> 5", "(last [0 3 0 3]) -> 3", "(last [1]) -> 1", "(last [3 1]) -> 1", "(last [5 3 4 1]) -> 1", "(last [2 6 1 1]) -> 1", "(last [5 7 2 9 6]) -> 6", "(last [5 4 3 0 3]) -> 3", "(last [9 2 0 9]) -> 9", "(last [6 2 4 4 0]) -> 0", "(last [9 8 7 1]) -> 1", "(last [2 9]) -> 9", "(last [5 3 4]) -> 4", "(last [6 6 0 2 8]) -> 8", "(last [7 8 4]) -> 4", "(last [2]) -> 2", "(last [2 2]) -> 2", "(last [0 0]) -> 0", "(last [6 3 4 0 9]) -> 9", "(last [1]) -> 1", "(last [8]) -> 8", "(last [1 5 6 8 6]) -> 6", "(last [7 2 4 4 0]) -> 0", "(last [4 9]) -> 9", "(last [6 3 6]) -> 6", "(last [0]) -> 0", "(last [7 3 0 0 9]) -> 9", "(last [5 6 7]) -> 7", "(last [2 3 4]) -> 4", "(last [0 7 8 6]) -> 6", "(last [3]) -> 3", "(last [2 1 7 1 2]) -> 2", "(last [7 4 9 4 0]) -> 0", "(last [6 1 9 3]) -> 3", "(last [7]) -> 7", "(last [1 1 5 7 0]) -> 0", "(last [8]) -> 8", "(last [3 1 8]) -> 8", "(last [2 8 2 6 0]) -> 0", "(last [2 9 4]) -> 4", "(last [3 7]) -> 7", "(last [8]) -> 8", "(last [9 8 5 3]) -> 3", "(last [0 0 8 3]) -> 3", "(last [5 6 3 9]) -> 9", "(last [7]) -> 7", "(last [1 4 0]) -> 0", "(last [8 7 7 9]) -> 9"], "time": 0.030132}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1 3]) -> 3", "(last [8 0 3]) -> 3", "(last [2]) -> 2", "(last [6 4 8]) -> 8", "(last [4 5 1 4 7]) -> 7", "(last [5 0 7 8]) -> 8", "(last [0 4 9 1]) -> 1", "(last [0 6]) -> 6", "(last [9 9 3]) -> 3", "(last [0 6 6 9]) -> 9", "(last [8 9 9 1 0]) -> 0", "(last [8 1 7]) -> 7", "(last [7 8]) -> 8", "(last [4 8]) -> 8", "(last [4 3 2 0]) -> 0", "(last [0]) -> 0", "(last [4]) -> 4", "(last [9]) -> 9", "(last [9]) -> 9", "(last [8 9 6 0 0]) -> 0", "(last [9 0 4 6 8]) -> 8", "(last [3 2 1 6 8]) -> 8", "(last [0 4 3]) -> 3", "(last [9 1 1]) -> 1", "(last [1 2 3]) -> 3", "(last [5 8 8 3 2]) -> 2", "(last [3 5 1 8]) -> 8", "(last [0 0 0 9]) -> 9", "(last [8 0]) -> 0", "(last [0 8 2 1 5]) -> 5", "(last [7 6 7 9]) -> 9", "(last [4 6]) -> 6", "(last [0 5 6 9 1]) -> 1", "(last [5 2 7]) -> 7", "(last [8 5]) -> 5", "(last [5]) -> 5", "(last [9 4 9 5 9]) -> 9", "(last [2 6 9 5]) -> 5", "(last [7 6 2 4 0]) -> 0", "(last [2 6 1]) -> 1", "(last [7 4]) -> 4", "(last [4 3]) -> 3", "(last [1 6 8 9]) -> 9", "(last [9]) -> 9", "(last [1]) -> 1", "(last [7 0]) -> 0", "(last [9]) -> 9", "(last [5 5 8 3 7]) -> 7", "(last [8 1 8 0 9]) -> 9"], "time": 0.043847}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9]) -> 9", "(last [2]) -> 2", "(last [6 6 2 8 5]) -> 5", "(last [8 5 6 0]) -> 0", "(last [4 1 3 3 2]) -> 2", "(last [0]) -> 0", "(last [3 8]) -> 8", "(last [0 9]) -> 9", "(last [7 9 3]) -> 3", "(last [9 4 1 1]) -> 1", "(last [7 6 6]) -> 6", "(last [0]) -> 0", "(last [5]) -> 5", "(last [0]) -> 0", "(last [1 2 2 1 5]) -> 5", "(last [5 1 8]) -> 8", "(last [0 6 9]) -> 9", "(last [6 0]) -> 0", "(last [7 7 9 4]) -> 4", "(last [9 7 7 8]) -> 8", "(last [5 9 3 4 1]) -> 1", "(last [4 8 5 4 8]) -> 8", "(last [1]) -> 1", "(last [5 7]) -> 7", "(last [6 5 2]) -> 2", "(last [3 5 8]) -> 8", "(last [3 6]) -> 6", "(last [5]) -> 5", "(last [2]) -> 2", "(last [6 8 2 6]) -> 6", "(last [6 3 1]) -> 1", "(last [0 7]) -> 7", "(last [4 6 3 3 9]) -> 9", "(last [0 4 3 3]) -> 3", "(last [3 1 7 6 6]) -> 6", "(last [3 4 0]) -> 0", "(last [2 6 7 6 7]) -> 7", "(last [1 5 7]) -> 7", "(last [4 4 7 1]) -> 1", "(last [0]) -> 0", "(last [4 0 5 2 0]) -> 0", "(last [1 3 3 8 3]) -> 3", "(last [8 5]) -> 5", "(last [1 2 2]) -> 2", "(last [5 7 1]) -> 1", "(last [9 8]) -> 8", "(last [2]) -> 2", "(last [0 0]) -> 0", "(last [5 0]) -> 0"], "time": 0.040514}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7 8]) -> 8", "(last [0]) -> 0", "(last [0 1 0 3 9]) -> 9", "(last [9 1 0 7]) -> 7", "(last [8 6 8]) -> 8", "(last [2 8 1 8 4]) -> 4", "(last [2 0 1]) -> 1", "(last [1 2 0 3 0]) -> 0", "(last [8 5 5 3]) -> 3", "(last [3]) -> 3", "(last [4 4 9 3]) -> 3", "(last [3 3]) -> 3", "(last [3]) -> 3", "(last [5 0 7]) -> 7", "(last [4 2 6 5 2]) -> 2", "(last [2]) -> 2", "(last [5 6 7 2]) -> 2", "(last [3 4 3 6 8]) -> 8", "(last [9 5 9 4]) -> 4", "(last [3 5 6]) -> 6", "(last [5 3 6]) -> 6", "(last [5]) -> 5", "(last [3 7 0 0]) -> 0", "(last [6]) -> 6", "(last [8 4 3 8 8]) -> 8", "(last [3 7 1 5 0]) -> 0", "(last [5 6 0 1 6]) -> 6", "(last [7 1 1]) -> 1", "(last [0 8]) -> 8", "(last [9 7 5 7]) -> 7", "(last [2 8 3]) -> 3", "(last [9]) -> 9", "(last [9 7]) -> 7", "(last [7 2]) -> 2", "(last [9]) -> 9", "(last [7]) -> 7", "(last [3 1 3 0 2]) -> 2", "(last [2 1 7 5 3]) -> 3", "(last [6 5 2 1 7]) -> 7", "(last [2]) -> 2", "(last [5 1]) -> 1", "(last [4 3 7 2 7]) -> 7", "(last [4 5 9 0]) -> 0", "(last [5 4 5]) -> 5", "(last [2 9 2 1 5]) -> 5", "(last [2 6 4 5 8]) -> 8", "(last [6 7]) -> 7", "(last [1 8 5]) -> 5", "(last [1 7 9]) -> 9"], "time": 0.031942}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [4 7 9 2 1]) -> 1", "(last [0]) -> 0", "(last [2]) -> 2", "(last [5]) -> 5", "(last [3 6]) -> 6", "(last [0 1 6]) -> 6", "(last [5 5]) -> 5", "(last [2 1 1 7 7]) -> 7", "(last [0 6 4]) -> 4", "(last [2 0 7 2 5]) -> 5", "(last [3 2 8 4]) -> 4", "(last [1 9 1]) -> 1", "(last [0 4]) -> 4", "(last [9 3 7 7]) -> 7", "(last [9 1 2 0 0]) -> 0", "(last [5 9 1 4]) -> 4", "(last [3 1]) -> 1", "(last [7 9 0 6 6]) -> 6", "(last [7 0 7]) -> 7", "(last [4]) -> 4", "(last [7]) -> 7", "(last [0 5 2]) -> 2", "(last [7 6 2]) -> 2", "(last [4 0]) -> 0", "(last [1]) -> 1", "(last [6 3 6 9 5]) -> 5", "(last [0 6 6]) -> 6", "(last [3 7]) -> 7", "(last [4 9]) -> 9", "(last [5 8 4 7 1]) -> 1", "(last [3 0]) -> 0", "(last [2 9 2 4 0]) -> 0", "(last [9 9 8 1]) -> 1", "(last [9 9 2 3]) -> 3", "(last [9 1 3]) -> 3", "(last [3 4 2 1 3]) -> 3", "(last [1 1 8 0]) -> 0", "(last [8 4 1 9]) -> 9", "(last [3 4 9]) -> 9", "(last [0 8 8 3]) -> 3", "(last [7 5 4]) -> 4", "(last [3]) -> 3", "(last [8]) -> 8", "(last [8 6]) -> 6", "(last [0 8]) -> 8", "(last [6]) -> 6", "(last [0 1]) -> 1", "(last [9 1 0 2 3]) -> 3", "(last [8 9 9]) -> 9"], "time": 0.037413}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7 0 8]) -> 8", "(last [2 3]) -> 3", "(last [3 8 1]) -> 1", "(last [1]) -> 1", "(last [4 7]) -> 7", "(last [2 2]) -> 2", "(last [5 6 3]) -> 3", "(last [2 8]) -> 8", "(last [7 2 2 3]) -> 3", "(last [0 4 2 1]) -> 1", "(last [7 6 7 8 6]) -> 6", "(last [6 2 7 0]) -> 0", "(last [6 0]) -> 0", "(last [8 8]) -> 8", "(last [1 6 3]) -> 3", "(last [3]) -> 3", "(last [9 0 7 4]) -> 4", "(last [4]) -> 4", "(last [4 4 8]) -> 8", "(last [2 1 5]) -> 5", "(last [7 3]) -> 3", "(last [3 5 2 4 4]) -> 4", "(last [8 1]) -> 1", "(last [2]) -> 2", "(last [1 9]) -> 9", "(last [9 1]) -> 1", "(last [4 3 5 4 0]) -> 0", "(last [2 7]) -> 7", "(last [4 4 9 9 5]) -> 5", "(last [2 3]) -> 3", "(last [8 0 9]) -> 9", "(last [4]) -> 4", "(last [7 9 2 0 5]) -> 5", "(last [1 8 6]) -> 6", "(last [5 2 9 6 1]) -> 1", "(last [6 6]) -> 6", "(last [2]) -> 2", "(last [9 9 3 5 2]) -> 2", "(last [2 1 4 3]) -> 3", "(last [3 6 3 6]) -> 6", "(last [6]) -> 6", "(last [1 5 8 5]) -> 5", "(last [3 0]) -> 0", "(last [6 2 1 2 4]) -> 4", "(last [5 9]) -> 9", "(last [4]) -> 4", "(last [8 6 4 8 2]) -> 2", "(last [8 1 7 5]) -> 5", "(last [4]) -> 4"], "time": 0.038199}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [4 5 0]) -> 0", "(last [0 0 1 7]) -> 7", "(last [8 4 7 4 2]) -> 2", "(last [1]) -> 1", "(last [9 0 6 6]) -> 6", "(last [9 3]) -> 3", "(last [7]) -> 7", "(last [9 4]) -> 4", "(last [6 8 5 3]) -> 3", "(last [6 0 0]) -> 0", "(last [7 3 1 2 8]) -> 8", "(last [8]) -> 8", "(last [5 8 5 8 6]) -> 6", "(last [5]) -> 5", "(last [0 2 1 0]) -> 0", "(last [3 7]) -> 7", "(last [6 3 0 0 4]) -> 4", "(last [9 0 0]) -> 0", "(last [1 9 1 4 6]) -> 6", "(last [7 7 3]) -> 3", "(last [0 9 0 8]) -> 8", "(last [3 6 1]) -> 1", "(last [0 3 8 0]) -> 0", "(last [7 1]) -> 1", "(last [3 5 8]) -> 8", "(last [6 4]) -> 4", "(last [9 9 6]) -> 6", "(last [9 7]) -> 7", "(last [4 9 3 6 0]) -> 0", "(last [2 7 3 5 2]) -> 2", "(last [9 9 6]) -> 6", "(last [7]) -> 7", "(last [2 9]) -> 9", "(last [0 5]) -> 5", "(last [6 9 7]) -> 7", "(last [5]) -> 5", "(last [4]) -> 4", "(last [0 0 7]) -> 7", "(last [7 4 6 0]) -> 0", "(last [3 1]) -> 1", "(last [3 7 8 6 4]) -> 4", "(last [7 3 7]) -> 7", "(last [0 2 5 3]) -> 3", "(last [9 9 6]) -> 6", "(last [0 5 1 3 3]) -> 3", "(last [6 2 2 0 5]) -> 5", "(last [5 3 7 4]) -> 4", "(last [0 0]) -> 0", "(last [3 6 9 2]) -> 2"], "time": 0.045499}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8 3 5]) -> 5", "(last [7 1 6 0]) -> 0", "(last [4 7 9]) -> 9", "(last [4 2 6 4 0]) -> 0", "(last [1 5 3]) -> 3", "(last [0 4]) -> 4", "(last [6 9 2 4]) -> 4", "(last [6 1 0 2 8]) -> 8", "(last [1 5 4 1]) -> 1", "(last [0 8 6]) -> 6", "(last [3 2 4]) -> 4", "(last [4 0]) -> 0", "(last [4 3 5 6]) -> 6", "(last [2]) -> 2", "(last [4]) -> 4", "(last [2]) -> 2", "(last [0]) -> 0", "(last [7 9]) -> 9", "(last [8 4 1]) -> 1", "(last [4 5 7]) -> 7", "(last [9 2 8 4]) -> 4", "(last [0 0 4 0]) -> 0", "(last [2 4 1 9]) -> 9", "(last [1 7 5 3 6]) -> 6", "(last [8 5 3 0]) -> 0", "(last [7 4]) -> 4", "(last [4 8 7 5]) -> 5", "(last [2]) -> 2", "(last [2 7 3 8 0]) -> 0", "(last [0 9]) -> 9", "(last [9]) -> 9", "(last [1 8 6]) -> 6", "(last [7]) -> 7", "(last [3]) -> 3", "(last [6 0 7 2 2]) -> 2", "(last [6]) -> 6", "(last [5 2 1 7]) -> 7", "(last [9 8 1 8]) -> 8", "(last [1 7]) -> 7", "(last [6 2 6]) -> 6", "(last [3 1]) -> 1", "(last [2 7 6 1]) -> 1", "(last [9 6 1 5]) -> 5", "(last [3 2 7]) -> 7", "(last [3 1 3 7]) -> 7", "(last [0 9 5]) -> 5", "(last [1 3 6 6]) -> 6", "(last [7 8 3 3]) -> 3", "(last [4 0]) -> 0"], "time": 0.045653}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [4]) -> 4", "(last [2 8]) -> 8", "(last [2]) -> 2", "(last [5 6 3 1 2]) -> 2", "(last [9 6 4 5 3]) -> 3", "(last [2]) -> 2", "(last [5 6]) -> 6", "(last [1 4]) -> 4", "(last [4 2 4 3]) -> 3", "(last [3 9 4]) -> 4", "(last [2 9]) -> 9", "(last [2]) -> 2", "(last [1]) -> 1", "(last [8 3 5 6]) -> 6", "(last [8 9 5]) -> 5", "(last [8]) -> 8", "(last [1 2 6 5]) -> 5", "(last [3 1 2 6 8]) -> 8", "(last [4 6 1 4 9]) -> 9", "(last [7 7 6]) -> 6", "(last [8 7 0]) -> 0", "(last [1 1 8]) -> 8", "(last [4 8 0 6]) -> 6", "(last [5 0]) -> 0", "(last [5 5]) -> 5", "(last [3 1 5 2 1]) -> 1", "(last [8 7]) -> 7", "(last [5 7]) -> 7", "(last [1 1 6 3 2]) -> 2", "(last [2 1]) -> 1", "(last [0 6 3 4 7]) -> 7", "(last [6 9]) -> 9", "(last [6 1]) -> 1", "(last [2 3 9 9 1]) -> 1", "(last [7 4 0]) -> 0", "(last [9 2 7]) -> 7", "(last [1]) -> 1", "(last [8 1 3 6]) -> 6", "(last [0 0 0 7 2]) -> 2", "(last [8 9 8 9 5]) -> 5", "(last [0]) -> 0", "(last [2 0]) -> 0", "(last [7 7 7]) -> 7", "(last [6 5]) -> 5", "(last [3 6 2 8 5]) -> 5", "(last [0 2 6]) -> 6", "(last [3 6 9]) -> 9", "(last [6 8]) -> 8", "(last [5 4 0 3]) -> 3"], "time": 0.032818}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1 7 1 8]) -> 8", "(last [3 7 3 1 0]) -> 0", "(last [6 2 5 2]) -> 2", "(last [3]) -> 3", "(last [2]) -> 2", "(last [9 3 5 2 7]) -> 7", "(last [5 8 7 5]) -> 5", "(last [1 4]) -> 4", "(last [2]) -> 2", "(last [8 3 5 6]) -> 6", "(last [7 0 8]) -> 8", "(last [6 2 2 1]) -> 1", "(last [8]) -> 8", "(last [1 6 7 3]) -> 3", "(last [1 1]) -> 1", "(last [3]) -> 3", "(last [6 7 6]) -> 6", "(last [1 6 5]) -> 5", "(last [5 9]) -> 9", "(last [2 0 5 6]) -> 6", "(last [9 5]) -> 5", "(last [2 3 2 7 5]) -> 5", "(last [1]) -> 1", "(last [0]) -> 0", "(last [5]) -> 5", "(last [5]) -> 5", "(last [4 4]) -> 4", "(last [1 8 4 8]) -> 8", "(last [5 7 2 6 0]) -> 0", "(last [9 5]) -> 5", "(last [0 9]) -> 9", "(last [1 6 9 2]) -> 2", "(last [8]) -> 8", "(last [9]) -> 9", "(last [4 3 6 5 3]) -> 3", "(last [4 8 0]) -> 0", "(last [9 5 2]) -> 2", "(last [7 2 6]) -> 6", "(last [9]) -> 9", "(last [9 2 9 7 1]) -> 1", "(last [2 6 7 4 4]) -> 4", "(last [1 8 9]) -> 9", "(last [9 4 4]) -> 4", "(last [9 3 4 3 6]) -> 6", "(last [7 2 1]) -> 1", "(last [9 9 8 3 6]) -> 6", "(last [9 4]) -> 4", "(last [1 7 2 8 3]) -> 3", "(last [1 2]) -> 2"], "time": 0.044695}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1 3 2 6]) -> 6", "(last [4 1 7 5 3]) -> 3", "(last [4 7 9 8]) -> 8", "(last [3 5 5 8]) -> 8", "(last [1 2]) -> 2", "(last [7 1 6 5 6]) -> 6", "(last [7]) -> 7", "(last [5 5 1 0 6]) -> 6", "(last [0 9 7 9 5]) -> 5", "(last [3]) -> 3", "(last [2 9 9]) -> 9", "(last [7]) -> 7", "(last [0 2]) -> 2", "(last [8 1 2 7 0]) -> 0", "(last [3 9 1 4 5]) -> 5", "(last [4 5]) -> 5", "(last [1 6]) -> 6", "(last [1]) -> 1", "(last [8]) -> 8", "(last [1 0 5]) -> 5", "(last [3 6 9 0 3]) -> 3", "(last [9]) -> 9", "(last [6 3]) -> 3", "(last [4 2 7]) -> 7", "(last [3 4 3]) -> 3", "(last [1 6 6 8 0]) -> 0", "(last [2 3 6 5]) -> 5", "(last [7 0 7 5]) -> 5", "(last [6 6 8 9 0]) -> 0", "(last [4 9 4 8 8]) -> 8", "(last [9]) -> 9", "(last [5 1 2]) -> 2", "(last [8 5 7]) -> 7", "(last [2 6 2 4]) -> 4", "(last [8 1]) -> 1", "(last [8]) -> 8", "(last [3 1 0]) -> 0", "(last [4 9 6 3]) -> 3", "(last [7 8]) -> 8", "(last [3 4 7 0 8]) -> 8", "(last [7 1]) -> 1", "(last [9 6]) -> 6", "(last [6 8 5 8]) -> 8", "(last [3 3 9]) -> 9", "(last [7 1]) -> 1", "(last [4 0 7 9]) -> 9", "(last [5 4]) -> 4", "(last [0 4 1 9]) -> 9", "(last [0 9 5]) -> 5"], "time": 0.028339}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7 0 1]) -> 1", "(last [0]) -> 0", "(last [1 5 6]) -> 6", "(last [1 3 5 5 7]) -> 7", "(last [0 6 6 9]) -> 9", "(last [8]) -> 8", "(last [7 1 3 7 1]) -> 1", "(last [7 5]) -> 5", "(last [5 0 2 4 0]) -> 0", "(last [8 2 4]) -> 4", "(last [8 8 1 9 8]) -> 8", "(last [3]) -> 3", "(last [5 6 2]) -> 2", "(last [3 5 8]) -> 8", "(last [6 5]) -> 5", "(last [1 2 8 9]) -> 9", "(last [8 9]) -> 9", "(last [8]) -> 8", "(last [5 5 6 5 7]) -> 7", "(last [0 4 9 4]) -> 4", "(last [5 1 9]) -> 9", "(last [5 7]) -> 7", "(last [9 6 8 6 0]) -> 0", "(last [4 6]) -> 6", "(last [5 5 3]) -> 3", "(last [1]) -> 1", "(last [2]) -> 2", "(last [6 5]) -> 5", "(last [3 7]) -> 7", "(last [9 9 6 2 4]) -> 4", "(last [7 6 6]) -> 6", "(last [0 0 1]) -> 1", "(last [2 7 1]) -> 1", "(last [6]) -> 6", "(last [4 4 6 7 1]) -> 1", "(last [4]) -> 4", "(last [0]) -> 0", "(last [2 1 1]) -> 1", "(last [6]) -> 6", "(last [0]) -> 0", "(last [7 9 8 6]) -> 6", "(last [5]) -> 5", "(last [3 2 4]) -> 4", "(last [4 3]) -> 3", "(last [6 8 3]) -> 3", "(last [2 4 5]) -> 5", "(last [4]) -> 4", "(last [2 4 5 2]) -> 2", "(last [6 7]) -> 7"], "time": 0.04625}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7 8]) -> 8", "(last [5]) -> 5", "(last [1 6 9]) -> 9", "(last [6 7 6]) -> 6", "(last [6]) -> 6", "(last [4 7 1 2]) -> 2", "(last [6 7]) -> 7", "(last [4 3 0 3 7]) -> 7", "(last [6 1 2 2]) -> 2", "(last [2 0 5 1 3]) -> 3", "(last [2 7]) -> 7", "(last [7 2]) -> 2", "(last [5 0]) -> 0", "(last [0 3]) -> 3", "(last [4 5]) -> 5", "(last [7 9]) -> 9", "(last [6 9]) -> 9", "(last [6 9 1 4 8]) -> 8", "(last [7 5]) -> 5", "(last [9 5]) -> 5", "(last [7]) -> 7", "(last [5 7 1]) -> 1", "(last [8 3 0]) -> 0", "(last [1 0]) -> 0", "(last [0 1 9 3]) -> 3", "(last [9 4 5 6 4]) -> 4", "(last [6 4 6 6]) -> 6", "(last [0 3 1 8 6]) -> 6", "(last [7 6 3]) -> 3", "(last [7 1 9]) -> 9", "(last [1 4 1]) -> 1", "(last [4 2 6 1]) -> 1", "(last [7 8 3 6 3]) -> 3", "(last [5 7 4]) -> 4", "(last [9 7 9 7 8]) -> 8", "(last [4 0 1 9 1]) -> 1", "(last [3 0]) -> 0", "(last [9]) -> 9", "(last [3]) -> 3", "(last [9]) -> 9", "(last [4 0 8 8]) -> 8", "(last [3]) -> 3", "(last [8 9 4 9]) -> 9", "(last [6]) -> 6", "(last [8]) -> 8", "(last [1 8 3 0 0]) -> 0", "(last [7]) -> 7", "(last [8]) -> 8", "(last [1 9 5 9]) -> 9"], "time": 0.039426}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 9 3 1]) -> 1", "(last [4 8 1 9 4]) -> 4", "(last [9 5]) -> 5", "(last [2 4 7]) -> 7", "(last [5 2 4 4 8]) -> 8", "(last [8 1 0]) -> 0", "(last [4]) -> 4", "(last [8 8 0 3]) -> 3", "(last [3 7 6]) -> 6", "(last [5 3 5 6]) -> 6", "(last [5]) -> 5", "(last [3 5 2]) -> 2", "(last [1 7 9 2 0]) -> 0", "(last [7 8 0 5]) -> 5", "(last [4 4 1]) -> 1", "(last [0 8 5 3]) -> 3", "(last [1]) -> 1", "(last [4 2 9 4 5]) -> 5", "(last [9 5 1 7]) -> 7", "(last [7 8 6 0 9]) -> 9", "(last [1 1]) -> 1", "(last [7 5 0 3]) -> 3", "(last [6 4 4]) -> 4", "(last [6 9]) -> 9", "(last [3]) -> 3", "(last [4 3 0 4]) -> 4", "(last [4 1]) -> 1", "(last [6]) -> 6", "(last [4]) -> 4", "(last [1 2 8 3]) -> 3", "(last [9 8 8]) -> 8", "(last [2]) -> 2", "(last [0]) -> 0", "(last [8 1 1 2]) -> 2", "(last [9]) -> 9", "(last [4 5 8]) -> 8", "(last [8]) -> 8", "(last [1 6 1]) -> 1", "(last [2 4]) -> 4", "(last [2 3 4 1]) -> 1", "(last [4 7 3 4]) -> 4", "(last [9]) -> 9", "(last [1]) -> 1", "(last [0]) -> 0", "(last [5 6 7 5 1]) -> 1", "(last [8]) -> 8", "(last [7]) -> 7", "(last [4 5 9 1 2]) -> 2", "(last [0 9 7 5 7]) -> 7"], "time": 0.033752}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0 5 9 8 0]) -> 0", "(last [6]) -> 6", "(last [1 7 2 2 9]) -> 9", "(last [7 9 7]) -> 7", "(last [8 5 4 6]) -> 6", "(last [9 3 0 9 5]) -> 5", "(last [7 8 8]) -> 8", "(last [9 6 9]) -> 9", "(last [1 0 1 3]) -> 3", "(last [5 8]) -> 8", "(last [9 2 3 3]) -> 3", "(last [9 8]) -> 8", "(last [0 4]) -> 4", "(last [8 8 7 1]) -> 1", "(last [6 6 3 4]) -> 4", "(last [1 8 6 8 0]) -> 0", "(last [9 5 7 8 9]) -> 9", "(last [8 1 3 1 1]) -> 1", "(last [5 9 8 7]) -> 7", "(last [6 3]) -> 3", "(last [6 4 5]) -> 5", "(last [6 3 0]) -> 0", "(last [3 9]) -> 9", "(last [2 7 2 1]) -> 1", "(last [4 6]) -> 6", "(last [9 4 0 1 4]) -> 4", "(last [9 0 6 4 5]) -> 5", "(last [7 6]) -> 6", "(last [4 7 4 4 7]) -> 7", "(last [7 7 7]) -> 7", "(last [4]) -> 4", "(last [9 1]) -> 1", "(last [0 8 6 0 3]) -> 3", "(last [5]) -> 5", "(last [0 1]) -> 1", "(last [8 3 0 5]) -> 5", "(last [9 2 7]) -> 7", "(last [5]) -> 5", "(last [6 5 9 1]) -> 1", "(last [3 2]) -> 2", "(last [9 1 5 2 7]) -> 7", "(last [8 1 6 7]) -> 7", "(last [4 5 9 5]) -> 5", "(last [6 0]) -> 0", "(last [8 2]) -> 2", "(last [1 6 0 9]) -> 9", "(last [6 5 8 2]) -> 2", "(last [5 4 2 7 7]) -> 7", "(last [9 3]) -> 3"], "time": 0.035989}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8 9 0 2]) -> 2", "(last [0 7 2 8]) -> 8", "(last [5]) -> 5", "(last [2 2 1 7]) -> 7", "(last [4 4 3 3]) -> 3", "(last [9 7 0]) -> 0", "(last [3 6 7 6 4]) -> 4", "(last [7 7 0 4]) -> 4", "(last [5 6 5 4]) -> 4", "(last [0]) -> 0", "(last [5 4]) -> 4", "(last [2 0]) -> 0", "(last [2]) -> 2", "(last [6 9 9 6 5]) -> 5", "(last [8 3 0]) -> 0", "(last [2 9 2 3]) -> 3", "(last [3 7]) -> 7", "(last [0 1 5]) -> 5", "(last [2 0 6 3 4]) -> 4", "(last [1 1]) -> 1", "(last [1 7 6]) -> 6", "(last [8]) -> 8", "(last [1 3 4 6]) -> 6", "(last [8]) -> 8", "(last [5 4 0 5 4]) -> 4", "(last [1 1 2 9 4]) -> 4", "(last [4 0 8 6 5]) -> 5", "(last [6 2 9 6 9]) -> 9", "(last [8 8]) -> 8", "(last [9 7 0 4 3]) -> 3", "(last [2 4 0 7]) -> 7", "(last [9 5 5]) -> 5", "(last [6]) -> 6", "(last [7]) -> 7", "(last [5 1 2]) -> 2", "(last [8 2 9]) -> 9", "(last [5 0 2 5 8]) -> 8", "(last [4 1 9 8]) -> 8", "(last [3 8 3]) -> 3", "(last [7 2 6 5]) -> 5", "(last [7 7 6 6]) -> 6", "(last [1 4]) -> 4", "(last [8 1 6 9 4]) -> 4", "(last [4 4 9 8]) -> 8", "(last [3 3]) -> 3", "(last [0 9 5 4 2]) -> 2", "(last [7 8 3 9]) -> 9", "(last [6 3]) -> 3", "(last [7]) -> 7"], "time": 0.048837}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2 2]) -> 2", "(last [2 7 4 9]) -> 9", "(last [2]) -> 2", "(last [1 2 4 2]) -> 2", "(last [8 1 8 1 2]) -> 2", "(last [4 3 9]) -> 9", "(last [4 1]) -> 1", "(last [8 0 5 7]) -> 7", "(last [4 4 5]) -> 5", "(last [9 2]) -> 2", "(last [5 3 3 5]) -> 5", "(last [6 7]) -> 7", "(last [0 7 7 3 3]) -> 3", "(last [1 8 2 0 1]) -> 1", "(last [4 7]) -> 7", "(last [8 7 5 5]) -> 5", "(last [5 4]) -> 4", "(last [5]) -> 5", "(last [2 5]) -> 5", "(last [3]) -> 3", "(last [5 6 6 6]) -> 6", "(last [3]) -> 3", "(last [3]) -> 3", "(last [0 1]) -> 1", "(last [8]) -> 8", "(last [2 8 9 2 3]) -> 3", "(last [7 4 2]) -> 2", "(last [4 4]) -> 4", "(last [9 9 3 8 2]) -> 2", "(last [8]) -> 8", "(last [8 2 6]) -> 6", "(last [8 2]) -> 2", "(last [5 7 2]) -> 2", "(last [7 4 9 5 4]) -> 4", "(last [1 2]) -> 2", "(last [3]) -> 3", "(last [7 3 4 7]) -> 7", "(last [1 6 7 7 8]) -> 8", "(last [8 7]) -> 7", "(last [0 9 3]) -> 3", "(last [5 7 5]) -> 5", "(last [1 1 7]) -> 7", "(last [1 4]) -> 4", "(last [3]) -> 3", "(last [1 9 6]) -> 6", "(last [4 1 4 5 7]) -> 7", "(last [6 5 3 8]) -> 8", "(last [5]) -> 5", "(last [8 8 7]) -> 7"], "time": 0.048579}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [3]) -> 3", "(last [8 3 3 4 2]) -> 2", "(last [0 4 3 5 4]) -> 4", "(last [2 8 1]) -> 1", "(last [3 3 5]) -> 5", "(last [9 5 2]) -> 2", "(last [6 0 4]) -> 4", "(last [8 4 3 6 9]) -> 9", "(last [9 8 5]) -> 5", "(last [4 6 6 8]) -> 8", "(last [6]) -> 6", "(last [6]) -> 6", "(last [7 7 6]) -> 6", "(last [0]) -> 0", "(last [8 5]) -> 5", "(last [3 5 8 0 2]) -> 2", "(last [7 4 6]) -> 6", "(last [2 7 1 9]) -> 9", "(last [7 3 0]) -> 0", "(last [4 0 4]) -> 4", "(last [3]) -> 3", "(last [8 7]) -> 7", "(last [2 1]) -> 1", "(last [6 6 7 3]) -> 3", "(last [1 6 2 5]) -> 5", "(last [9 5 0 8 3]) -> 3", "(last [9 0 7 2 0]) -> 0", "(last [3 1 8 4]) -> 4", "(last [3 0 4 8]) -> 8", "(last [4 8 1 6]) -> 6", "(last [5 9]) -> 9", "(last [3 7]) -> 7", "(last [2]) -> 2", "(last [6 6 0]) -> 0", "(last [7 9 6 5 5]) -> 5", "(last [7 9 5 0 1]) -> 1", "(last [8 5 2]) -> 2", "(last [4 7]) -> 7", "(last [7 0]) -> 0", "(last [9]) -> 9", "(last [9 5 4 8 5]) -> 5", "(last [7]) -> 7", "(last [5 0 6]) -> 6", "(last [9 7 6]) -> 6", "(last [9 2 3 9]) -> 9", "(last [4 9]) -> 9", "(last [2]) -> 2", "(last [2 0 0]) -> 0", "(last [2 6 2 0 3]) -> 3"], "time": 0.029436}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [4 8 5]) -> 5", "(last [6 8 2 9 2]) -> 2", "(last [4 6 7 9 6]) -> 6", "(last [8 6 6]) -> 6", "(last [6]) -> 6", "(last [5 0 8 2 1]) -> 1", "(last [3 0 5 2]) -> 2", "(last [3 1 1 3 0]) -> 0", "(last [5 6 8]) -> 8", "(last [9 5 2 5 8]) -> 8", "(last [8 1 1 8 0]) -> 0", "(last [9]) -> 9", "(last [5 5 9]) -> 9", "(last [2 3 4 5 4]) -> 4", "(last [1 3]) -> 3", "(last [4]) -> 4", "(last [5 9 6 7]) -> 7", "(last [7 1 2 0]) -> 0", "(last [3 7 1 4]) -> 4", "(last [7]) -> 7", "(last [5]) -> 5", "(last [6 1 3 7]) -> 7", "(last [7 9 7]) -> 7", "(last [9]) -> 9", "(last [0]) -> 0", "(last [6]) -> 6", "(last [2 9 5 2 3]) -> 3", "(last [3 3 4]) -> 4", "(last [6 6 0 6 1]) -> 1", "(last [1 3 7]) -> 7", "(last [1 2]) -> 2", "(last [2 3 3 0 4]) -> 4", "(last [2 5 5 4]) -> 4", "(last [8]) -> 8", "(last [4 3]) -> 3", "(last [4 1 0]) -> 0", "(last [1]) -> 1", "(last [6 7 1 8 7]) -> 7", "(last [0]) -> 0", "(last [6 5]) -> 5", "(last [2 0]) -> 0", "(last [1 2 7 3]) -> 3", "(last [0 2 4 1 6]) -> 6", "(last [1]) -> 1", "(last [8 9 1 8]) -> 8", "(last [9]) -> 9", "(last [8 9 8 6 4]) -> 4", "(last [7 5 3]) -> 3", "(last [3 5 6 2 6]) -> 6"], "time": 0.029505}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0 8 0 6]) -> 6", "(last [6 1 4]) -> 4", "(last [6 1]) -> 1", "(last [2 3 7]) -> 7", "(last [6]) -> 6", "(last [8]) -> 8", "(last [7]) -> 7", "(last [1 2]) -> 2", "(last [9 6 7 1]) -> 1", "(last [0 5 5 5 8]) -> 8", "(last [2 0 6 7 7]) -> 7", "(last [5]) -> 5", "(last [4]) -> 4", "(last [4 8 3 3 0]) -> 0", "(last [4 1 4]) -> 4", "(last [7 1 0 6]) -> 6", "(last [9 5]) -> 5", "(last [6 4 4]) -> 4", "(last [2 7 4]) -> 4", "(last [4 3 1 2 0]) -> 0", "(last [9]) -> 9", "(last [7]) -> 7", "(last [5 7 3 3 4]) -> 4", "(last [1 5 4 8]) -> 8", "(last [3 0 9]) -> 9", "(last [1 8 8 4 4]) -> 4", "(last [6 0]) -> 0", "(last [8 4 7 3]) -> 3", "(last [5 7 1 7 4]) -> 4", "(last [5 9 4 6 4]) -> 4", "(last [0 7 0 1]) -> 1", "(last [0 5]) -> 5", "(last [5]) -> 5", "(last [5]) -> 5", "(last [3 0]) -> 0", "(last [4 5 2 4]) -> 4", "(last [2 0 6]) -> 6", "(last [2 4 5 5]) -> 5", "(last [3 5 4]) -> 4", "(last [0 4 2 4]) -> 4", "(last [4 0]) -> 0", "(last [3]) -> 3", "(last [2 6]) -> 6", "(last [9 1 3 0 2]) -> 2", "(last [9 4 0 4 0]) -> 0", "(last [9]) -> 9", "(last [0 5 9 7]) -> 7", "(last [1 2 6 2]) -> 2", "(last [0]) -> 0"], "time": 0.049665}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7 5 6 3 4]) -> 4", "(last [1 2 1]) -> 1", "(last [0 4 9 0 5]) -> 5", "(last [2 9]) -> 9", "(last [6]) -> 6", "(last [2 5 6 9]) -> 9", "(last [1 2 3]) -> 3", "(last [8 3 4 1 4]) -> 4", "(last [7 1 3]) -> 3", "(last [6 0]) -> 0", "(last [6 1 8 8]) -> 8", "(last [7 3]) -> 3", "(last [3 8 1 8]) -> 8", "(last [7]) -> 7", "(last [1 1]) -> 1", "(last [2 7 1 9]) -> 9", "(last [5 9]) -> 9", "(last [1 7 7 8]) -> 8", "(last [0]) -> 0", "(last [7 6 6]) -> 6", "(last [0]) -> 0", "(last [5 7]) -> 7", "(last [4 2 4]) -> 4", "(last [3 2 1]) -> 1", "(last [3 6 8]) -> 8", "(last [4 1 2]) -> 2", "(last [8 4 7 2]) -> 2", "(last [3]) -> 3", "(last [3]) -> 3", "(last [0]) -> 0", "(last [5 6 0 7]) -> 7", "(last [9 5 9]) -> 9", "(last [3]) -> 3", "(last [0 3 5]) -> 5", "(last [3 0 9]) -> 9", "(last [3 8]) -> 8", "(last [7]) -> 7", "(last [5 5 1 3]) -> 3", "(last [9 3 1 8]) -> 8", "(last [3 5]) -> 5", "(last [8 4 3 8]) -> 8", "(last [9 5 3 8 3]) -> 3", "(last [4 1 8]) -> 8", "(last [4 3]) -> 3", "(last [8 9 4 8]) -> 8", "(last [7 9 8 9]) -> 9", "(last [2 6 3]) -> 3", "(last [7 3 6 0 5]) -> 5", "(last [7]) -> 7"], "time": 0.030855}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 5 7]) -> 7", "(last [8 5 1]) -> 1", "(last [3 6 8]) -> 8", "(last [4]) -> 4", "(last [3]) -> 3", "(last [9 6 5 2 1]) -> 1", "(last [1 2 5]) -> 5", "(last [8]) -> 8", "(last [9]) -> 9", "(last [3 1 3]) -> 3", "(last [9 6]) -> 6", "(last [2 4 4 1]) -> 1", "(last [2 9 9 6 5]) -> 5", "(last [1 4]) -> 4", "(last [4 5 4 5 1]) -> 1", "(last [8 3 4 2 8]) -> 8", "(last [3 0 8 0]) -> 0", "(last [6]) -> 6", "(last [8 5]) -> 5", "(last [7 7 3 9 8]) -> 8", "(last [9 8]) -> 8", "(last [1 7 0 8 5]) -> 5", "(last [0 9 8 3]) -> 3", "(last [3 9]) -> 9", "(last [9 2 5]) -> 5", "(last [4 4 2 9]) -> 9", "(last [2 6 9 1]) -> 1", "(last [9]) -> 9", "(last [6]) -> 6", "(last [0 0 7 8]) -> 8", "(last [9]) -> 9", "(last [5]) -> 5", "(last [6]) -> 6", "(last [5 8 0 9 8]) -> 8", "(last [0]) -> 0", "(last [5 1]) -> 1", "(last [5 4 6]) -> 6", "(last [1]) -> 1", "(last [9 8]) -> 8", "(last [5 1]) -> 1", "(last [9 1 7 5 6]) -> 6", "(last [1 0 1]) -> 1", "(last [3]) -> 3", "(last [9]) -> 9", "(last [1 2 9]) -> 9", "(last [0 8 1]) -> 1", "(last [5 4]) -> 4", "(last [7 5]) -> 5", "(last [5 6 9]) -> 9"], "time": 0.042659}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0 1 0 9 2]) -> 2", "(last [5 4 6 7]) -> 7", "(last [8 0 6]) -> 6", "(last [6 1 4 5]) -> 5", "(last [9 2 0 4]) -> 4", "(last [7 6]) -> 6", "(last [4 6 5]) -> 5", "(last [2 7]) -> 7", "(last [5 4 7]) -> 7", "(last [0 7]) -> 7", "(last [7 0 3 6 5]) -> 5", "(last [5 7 7]) -> 7", "(last [6 8 8 4]) -> 4", "(last [1 8 7 0 3]) -> 3", "(last [5]) -> 5", "(last [5 3]) -> 3", "(last [0 9]) -> 9", "(last [7 5 1 8 0]) -> 0", "(last [9 6 1]) -> 1", "(last [2 8 9]) -> 9", "(last [6 1 7]) -> 7", "(last [3]) -> 3", "(last [1 9 3]) -> 3", "(last [2 8 5 9 6]) -> 6", "(last [6]) -> 6", "(last [0]) -> 0", "(last [1 9 5 1]) -> 1", "(last [1 3 5 0]) -> 0", "(last [5 1]) -> 1", "(last [5 8 2]) -> 2", "(last [0 6 6]) -> 6", "(last [6]) -> 6", "(last [2 6]) -> 6", "(last [3 0 9 4 8]) -> 8", "(last [1 9]) -> 9", "(last [0]) -> 0", "(last [2 7 5 1]) -> 1", "(last [5 1]) -> 1", "(last [3 3 3]) -> 3", "(last [0 9 5 5 3]) -> 3", "(last [7]) -> 7", "(last [5 5 3]) -> 3", "(last [8 6 6 6]) -> 6", "(last [3]) -> 3", "(last [1 5 2 6 7]) -> 7", "(last [5 0 2 5]) -> 5", "(last [2 9 4 4 5]) -> 5", "(last [1 8 6 5]) -> 5", "(last [3 6 6 2 9]) -> 9"], "time": 0.044893}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 9 3 0]) -> 0", "(last [2 0 9 5]) -> 5", "(last [6 7 1 3]) -> 3", "(last [4 7 3 2 3]) -> 3", "(last [0 7 8 1 9]) -> 9", "(last [9 5 1 9]) -> 9", "(last [6 7]) -> 7", "(last [9 4 4 7]) -> 7", "(last [9 6 1 4]) -> 4", "(last [0 9]) -> 9", "(last [7 8 6 2]) -> 2", "(last [2 6]) -> 6", "(last [2 2 1]) -> 1", "(last [6 3 8 9 9]) -> 9", "(last [2 1 4 8 6]) -> 6", "(last [8 4]) -> 4", "(last [4 4 8 2]) -> 2", "(last [0 8 9 1 8]) -> 8", "(last [4 4 3]) -> 3", "(last [8 5 0 0]) -> 0", "(last [2 1 0]) -> 0", "(last [8 7 2 1]) -> 1", "(last [1 5]) -> 5", "(last [8 2 9 5]) -> 5", "(last [8 7 4]) -> 4", "(last [2 0 7]) -> 7", "(last [3 5]) -> 5", "(last [5 4]) -> 4", "(last [5 8 1 1]) -> 1", "(last [3 9 2 1 6]) -> 6", "(last [9]) -> 9", "(last [9]) -> 9", "(last [1]) -> 1", "(last [3]) -> 3", "(last [7 2 0]) -> 0", "(last [8 2 8]) -> 8", "(last [7 4 8 1 5]) -> 5", "(last [5 5 9 7 6]) -> 6", "(last [6]) -> 6", "(last [2 3 3 2 0]) -> 0", "(last [5]) -> 5", "(last [6 0 7 3]) -> 3", "(last [4 6 5]) -> 5", "(last [0 7 1 8]) -> 8", "(last [4 4]) -> 4", "(last [9]) -> 9", "(last [2 0 3 7 2]) -> 2", "(last [4 0 6 7 6]) -> 6", "(last [2 8 2]) -> 2"], "time": 0.047128}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 4 5 0 5]) -> 5", "(last [2 1]) -> 1", "(last [5]) -> 5", "(last [7 8 3]) -> 3", "(last [7]) -> 7", "(last [5 8 3 2]) -> 2", "(last [8 3 0 2 2]) -> 2", "(last [5]) -> 5", "(last [9 5]) -> 5", "(last [9 6]) -> 6", "(last [8 8 4 0]) -> 0", "(last [3 5 0 8]) -> 8", "(last [2]) -> 2", "(last [8]) -> 8", "(last [2 4 9 2]) -> 2", "(last [0 3]) -> 3", "(last [5 2 7]) -> 7", "(last [8 5 0 7 3]) -> 3", "(last [8 6 6 7]) -> 7", "(last [6 8 3]) -> 3", "(last [7 7 9 4]) -> 4", "(last [7]) -> 7", "(last [0 2 0 9]) -> 9", "(last [6]) -> 6", "(last [3 1 3 1]) -> 1", "(last [6 4 4]) -> 4", "(last [7 7 2 5]) -> 5", "(last [7 2 9 1 0]) -> 0", "(last [7 2 6]) -> 6", "(last [1 1]) -> 1", "(last [6 0 9 4]) -> 4", "(last [5 7 1 8]) -> 8", "(last [9 9]) -> 9", "(last [6 7 4 2 6]) -> 6", "(last [4 4]) -> 4", "(last [7]) -> 7", "(last [6 4]) -> 4", "(last [5 5 8 4 2]) -> 2", "(last [7]) -> 7", "(last [2 1 4 1]) -> 1", "(last [3 1]) -> 1", "(last [5]) -> 5", "(last [1 0 5 4]) -> 4", "(last [6 6 2 4]) -> 4", "(last [4 4 4]) -> 4", "(last [2 4 5 5 0]) -> 0", "(last [4 4 0 5 1]) -> 1", "(last [7 1 8 4]) -> 4", "(last [9 0 4 4]) -> 4"], "time": 0.040959}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2 1 0 2]) -> 2", "(last [8 0]) -> 0", "(last [0]) -> 0", "(last [5 3 3]) -> 3", "(last [7 3 7 9]) -> 9", "(last [1]) -> 1", "(last [6 5]) -> 5", "(last [3]) -> 3", "(last [3 8 9]) -> 9", "(last [0 5 9 0]) -> 0", "(last [6 0 0 7]) -> 7", "(last [0]) -> 0", "(last [2 1 5 6 5]) -> 5", "(last [7 0 7 3 7]) -> 7", "(last [3 1]) -> 1", "(last [7 3]) -> 3", "(last [0]) -> 0", "(last [2 0 6 4]) -> 4", "(last [6 9 6 6 0]) -> 0", "(last [9 5 8]) -> 8", "(last [1 6 7 4 2]) -> 2", "(last [3 3 1 4 4]) -> 4", "(last [5 8 1 7]) -> 7", "(last [9 1 8 8 6]) -> 6", "(last [2]) -> 2", "(last [9 4 7]) -> 7", "(last [0 5 1 4 5]) -> 5", "(last [8 7 8 3 1]) -> 1", "(last [4 4 9 2]) -> 2", "(last [1 3 6 2 9]) -> 9", "(last [7 2 3 7]) -> 7", "(last [8]) -> 8", "(last [9 1 9 7]) -> 7", "(last [4 5 7 4]) -> 4", "(last [9 9]) -> 9", "(last [0 8 7 8]) -> 8", "(last [6 0]) -> 0", "(last [3 4 4]) -> 4", "(last [1 4 9 8]) -> 8", "(last [4 3 5]) -> 5", "(last [0]) -> 0", "(last [4 5 8 1]) -> 1", "(last [7 0 2 6]) -> 6", "(last [3 7 7 1]) -> 1", "(last [9]) -> 9", "(last [5 2]) -> 2", "(last [3]) -> 3", "(last [0 1 6 4 5]) -> 5", "(last [4 8]) -> 8"], "time": 0.04296}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [6 9 7 9 7]) -> 7", "(last [5]) -> 5", "(last [0 9 4 1]) -> 1", "(last [1 3 4 7]) -> 7", "(last [1]) -> 1", "(last [8 1 7]) -> 7", "(last [3 2 7 8]) -> 8", "(last [8 4 2]) -> 2", "(last [2]) -> 2", "(last [8 1]) -> 1", "(last [3 4 7 7 6]) -> 6", "(last [6]) -> 6", "(last [6 9]) -> 9", "(last [3 9]) -> 9", "(last [0 2]) -> 2", "(last [5 4]) -> 4", "(last [9 8 0 1]) -> 1", "(last [0 2 9]) -> 9", "(last [3 8 2]) -> 2", "(last [7 2 7 0]) -> 0", "(last [5 1 7 6]) -> 6", "(last [5 9 3 8 1]) -> 1", "(last [1 8 1]) -> 1", "(last [9 5 3 3 5]) -> 5", "(last [7 6]) -> 6", "(last [6]) -> 6", "(last [3 0 8 2 4]) -> 4", "(last [8 7 4 6 6]) -> 6", "(last [7 7 7 5 5]) -> 5", "(last [3 1 2 3]) -> 3", "(last [1 9 8 6]) -> 6", "(last [3 2 8 5 4]) -> 4", "(last [1 3 6 0 4]) -> 4", "(last [5 6]) -> 6", "(last [7 7 5 1 4]) -> 4", "(last [6 1]) -> 1", "(last [9 0 4 8 1]) -> 1", "(last [9 4 2]) -> 2", "(last [5 9 7]) -> 7", "(last [5 7 0 0]) -> 0", "(last [6]) -> 6", "(last [5 3]) -> 3", "(last [3 9]) -> 9", "(last [8 0]) -> 0", "(last [3 7 0 8]) -> 8", "(last [4 7 7 4]) -> 4", "(last [4 6]) -> 6", "(last [5 0]) -> 0", "(last [5 9 8 8 7]) -> 7"], "time": 0.034271}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8 9 8 8 3]) -> 3", "(last [1 5]) -> 5", "(last [0 1]) -> 1", "(last [1 8]) -> 8", "(last [4 0 8 2 2]) -> 2", "(last [2 9 9 4 8]) -> 8", "(last [7 2]) -> 2", "(last [6 0 8 0 8]) -> 8", "(last [2]) -> 2", "(last [7]) -> 7", "(last [0]) -> 0", "(last [4 2]) -> 2", "(last [1 3 4 9]) -> 9", "(last [2]) -> 2", "(last [6 1 8 2]) -> 2", "(last [1 9]) -> 9", "(last [3 9 5]) -> 5", "(last [6 7]) -> 7", "(last [9 0 2]) -> 2", "(last [0 7 8 3 8]) -> 8", "(last [6 2 4 8 3]) -> 3", "(last [4 2 1]) -> 1", "(last [9 9 4 7]) -> 7", "(last [8 6 7]) -> 7", "(last [6 1 4]) -> 4", "(last [7 7 4 7]) -> 7", "(last [4 6 4 7]) -> 7", "(last [1]) -> 1", "(last [9 1]) -> 1", "(last [3 8 3 2 1]) -> 1", "(last [9]) -> 9", "(last [6 8 6]) -> 6", "(last [0 3 2 6]) -> 6", "(last [7 3 4 0 4]) -> 4", "(last [3]) -> 3", "(last [1]) -> 1", "(last [0 5 1]) -> 1", "(last [3 7 3 8 8]) -> 8", "(last [3 5 8 8]) -> 8", "(last [1 1 9 2]) -> 2", "(last [0]) -> 0", "(last [3 7 8 6 5]) -> 5", "(last [6]) -> 6", "(last [0 5 7 8 2]) -> 2", "(last [6 3]) -> 3", "(last [4 7 6]) -> 6", "(last [4 2]) -> 2", "(last [2 4 9 1 5]) -> 5", "(last [5 3 8 4 3]) -> 3"], "time": 0.029029}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [3]) -> 3", "(last [7 5]) -> 5", "(last [7 4 0]) -> 0", "(last [7 3 0 8]) -> 8", "(last [8]) -> 8", "(last [1 4]) -> 4", "(last [8]) -> 8", "(last [4 5 5 6 9]) -> 9", "(last [2]) -> 2", "(last [9 4 1]) -> 1", "(last [7 2 8 8]) -> 8", "(last [3]) -> 3", "(last [8 7]) -> 7", "(last [6 2 2 2 7]) -> 7", "(last [6 2 1 5 0]) -> 0", "(last [5 2 1 5 4]) -> 4", "(last [6 6]) -> 6", "(last [1 0 7 1 9]) -> 9", "(last [2 4 0 6 2]) -> 2", "(last [0 8]) -> 8", "(last [6 4]) -> 4", "(last [0]) -> 0", "(last [9 3]) -> 3", "(last [2 3]) -> 3", "(last [3 0 7]) -> 7", "(last [7 7 6 4 0]) -> 0", "(last [5]) -> 5", "(last [0]) -> 0", "(last [6 8 1 2]) -> 2", "(last [7 6 2 7]) -> 7", "(last [0 3 2 3 4]) -> 4", "(last [1 2 8 7 5]) -> 5", "(last [7 0 4 9 7]) -> 7", "(last [9 0 9 5]) -> 5", "(last [5 7 6 8 0]) -> 0", "(last [5]) -> 5", "(last [2 9 5 4]) -> 4", "(last [6 3 5 1 3]) -> 3", "(last [6 0 8 8]) -> 8", "(last [4 9 4 7]) -> 7", "(last [8 3 0 2 9]) -> 9", "(last [3 3 7 4]) -> 4", "(last [0 6 8]) -> 8", "(last [1 0 1]) -> 1", "(last [9 2 7 8 6]) -> 6", "(last [2 6 8 8]) -> 8", "(last [9]) -> 9", "(last [7 9 2 0]) -> 0", "(last [4]) -> 4"], "time": 0.030349}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 2 4]) -> 4", "(last [2 5 9]) -> 9", "(last [0 7]) -> 7", "(last [0]) -> 0", "(last [3 9 8 8]) -> 8", "(last [9]) -> 9", "(last [8]) -> 8", "(last [0 9 0]) -> 0", "(last [0 3 5]) -> 5", "(last [3 2 1]) -> 1", "(last [8 2 8 4]) -> 4", "(last [3 8]) -> 8", "(last [5 1 3 5 6]) -> 6", "(last [2]) -> 2", "(last [7 0 0]) -> 0", "(last [2 7 0]) -> 0", "(last [1 1 8]) -> 8", "(last [7 1 9 7]) -> 7", "(last [3 4 3 9]) -> 9", "(last [9 6 8 1 7]) -> 7", "(last [4 0 2]) -> 2", "(last [2]) -> 2", "(last [7 8 2 0 9]) -> 9", "(last [5 0 0 5 1]) -> 1", "(last [8 8 0]) -> 0", "(last [0 8 5 6 3]) -> 3", "(last [1 2]) -> 2", "(last [2 9 5 8 9]) -> 9", "(last [9 9 2 6]) -> 6", "(last [0 4 9]) -> 9", "(last [3 6]) -> 6", "(last [6 2 3 1 9]) -> 9", "(last [2]) -> 2", "(last [8 3 0]) -> 0", "(last [1 9]) -> 9", "(last [8]) -> 8", "(last [5 9 3]) -> 3", "(last [6 2]) -> 2", "(last [9]) -> 9", "(last [5 2]) -> 2", "(last [7 5 6 1]) -> 1", "(last [9]) -> 9", "(last [9 3]) -> 3", "(last [0 1 8 4 2]) -> 2", "(last [9 1 9]) -> 9", "(last [1 9 3 4 6]) -> 6", "(last [4 8 6]) -> 6", "(last [3]) -> 3", "(last [2]) -> 2"], "time": 0.044095}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0 7 8 5]) -> 5", "(last [3 9 1 6 9]) -> 9", "(last [7 2 3]) -> 3", "(last [2 1 1 7]) -> 7", "(last [8 6 4]) -> 4", "(last [7 9 5 1]) -> 1", "(last [5 0 5]) -> 5", "(last [6 0 9]) -> 9", "(last [4 1 4 8]) -> 8", "(last [1 8 0]) -> 0", "(last [1 0]) -> 0", "(last [6 3]) -> 3", "(last [0 8]) -> 8", "(last [4 2 6 0 7]) -> 7", "(last [9 9 7]) -> 7", "(last [7 7 4]) -> 4", "(last [3]) -> 3", "(last [3]) -> 3", "(last [5 1]) -> 1", "(last [2 6 4 7 7]) -> 7", "(last [2 2 6 4 1]) -> 1", "(last [2 7 0 2]) -> 2", "(last [3 2 0 7]) -> 7", "(last [7 3 6 3]) -> 3", "(last [9 6 8 5 2]) -> 2", "(last [4 1 5]) -> 5", "(last [5 6]) -> 6", "(last [3 3 4 7 8]) -> 8", "(last [0 7 8]) -> 8", "(last [3]) -> 3", "(last [2 4 4 4]) -> 4", "(last [5 7 8]) -> 8", "(last [6 5 6]) -> 6", "(last [1 9 2]) -> 2", "(last [7]) -> 7", "(last [1 1 0]) -> 0", "(last [1]) -> 1", "(last [5]) -> 5", "(last [1 6 3 6]) -> 6", "(last [0 8]) -> 8", "(last [6 0 4]) -> 4", "(last [9 3 0]) -> 0", "(last [5 5]) -> 5", "(last [6 4 0]) -> 0", "(last [5 0 1 8 7]) -> 7", "(last [8 5 4 3]) -> 3", "(last [4 3]) -> 3", "(last [2 1]) -> 1", "(last [5 0]) -> 0"], "time": 0.029673}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [6 7 8 8 1]) -> 1", "(last [8 9]) -> 9", "(last [3 3 4 6 9]) -> 9", "(last [2 3]) -> 3", "(last [0 4]) -> 4", "(last [6 7 8 9]) -> 9", "(last [7 6 6 6]) -> 6", "(last [8]) -> 8", "(last [5 6 1 7 1]) -> 1", "(last [0]) -> 0", "(last [7 8 5]) -> 5", "(last [5 1 4 8]) -> 8", "(last [8 5 3]) -> 3", "(last [8 1 3 4]) -> 4", "(last [6 3]) -> 3", "(last [0 0 3 5]) -> 5", "(last [4]) -> 4", "(last [6 7 5 9]) -> 9", "(last [5 4]) -> 4", "(last [2 2 4]) -> 4", "(last [9 2]) -> 2", "(last [8 0 7 9]) -> 9", "(last [8]) -> 8", "(last [1 8 6]) -> 6", "(last [7 0 0 4 9]) -> 9", "(last [7 8 3 1]) -> 1", "(last [7 2 8]) -> 8", "(last [0 7 3 1 1]) -> 1", "(last [9 9 1]) -> 1", "(last [1 3 2]) -> 2", "(last [7 8 4]) -> 4", "(last [9 4]) -> 4", "(last [9 9 8]) -> 8", "(last [0 2 0]) -> 0", "(last [3 5 2 1 0]) -> 0", "(last [2 2]) -> 2", "(last [9]) -> 9", "(last [1 7 8]) -> 8", "(last [6 3 4]) -> 4", "(last [4 6 8]) -> 8", "(last [6 2 7 3 6]) -> 6", "(last [4 6 5]) -> 5", "(last [8]) -> 8", "(last [5]) -> 5", "(last [6 6 2]) -> 2", "(last [9 2 2 9 8]) -> 8", "(last [1 8 3 3]) -> 3", "(last [6 9]) -> 9", "(last [9]) -> 9"], "time": 0.030334}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2 8 1 0 8]) -> 8", "(last [2 3 9 3 0]) -> 0", "(last [2]) -> 2", "(last [7 3 3 1 8]) -> 8", "(last [0 7 1 3 5]) -> 5", "(last [2]) -> 2", "(last [4 7]) -> 7", "(last [3 7 2]) -> 2", "(last [2 1 3]) -> 3", "(last [2 3 2]) -> 2", "(last [6 7]) -> 7", "(last [2 1 1 2]) -> 2", "(last [8 0 1 1]) -> 1", "(last [5 8 3]) -> 3", "(last [7 2]) -> 2", "(last [3 0 8 7 8]) -> 8", "(last [5 3 8 2]) -> 2", "(last [1]) -> 1", "(last [6]) -> 6", "(last [1 3]) -> 3", "(last [4 1 7 7]) -> 7", "(last [4 5 0 7 2]) -> 2", "(last [3 9 6 4]) -> 4", "(last [2 3 6]) -> 6", "(last [4 0 6 9]) -> 9", "(last [0 7 0]) -> 0", "(last [6]) -> 6", "(last [5 5 3 4 4]) -> 4", "(last [8]) -> 8", "(last [0]) -> 0", "(last [4 7 0 3]) -> 3", "(last [2 1 0]) -> 0", "(last [0 8]) -> 8", "(last [6]) -> 6", "(last [0 7]) -> 7", "(last [3 3 1 8 8]) -> 8", "(last [0]) -> 0", "(last [6]) -> 6", "(last [9 6 3 7]) -> 7", "(last [8 1 7]) -> 7", "(last [0 4 7 9]) -> 9", "(last [5 0 0 6 5]) -> 5", "(last [0 9]) -> 9", "(last [3 2 1 7 0]) -> 0", "(last [5 5 6]) -> 6", "(last [0]) -> 0", "(last [8 7 3]) -> 3", "(last [0 8 9 5 1]) -> 1", "(last [3 7]) -> 7"], "time": 0.030117}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7 7 0]) -> 0", "(last [9 8 3 6 0]) -> 0", "(last [2 6]) -> 6", "(last [1 6 5 4 3]) -> 3", "(last [1]) -> 1", "(last [0]) -> 0", "(last [6 7]) -> 7", "(last [6 9 1]) -> 1", "(last [8]) -> 8", "(last [0 5]) -> 5", "(last [6 4]) -> 4", "(last [4]) -> 4", "(last [6 9 4]) -> 4", "(last [5 2 0]) -> 0", "(last [4 7 2 9]) -> 9", "(last [6]) -> 6", "(last [0 2]) -> 2", "(last [2 0 2 2 2]) -> 2", "(last [0 5]) -> 5", "(last [3]) -> 3", "(last [5 4 0]) -> 0", "(last [7 3 5 8 6]) -> 6", "(last [1]) -> 1", "(last [9 4 4 2]) -> 2", "(last [0 8 7 6 1]) -> 1", "(last [7 0 7]) -> 7", "(last [6]) -> 6", "(last [9]) -> 9", "(last [0 1 6 1 1]) -> 1", "(last [3 9 5 3]) -> 3", "(last [7 4 7 0]) -> 0", "(last [7 8 8]) -> 8", "(last [5 4 2 0]) -> 0", "(last [2 6 8 3 2]) -> 2", "(last [2 4 3 0 6]) -> 6", "(last [4 2 5 6 4]) -> 4", "(last [9 9 5]) -> 5", "(last [6 1 1]) -> 1", "(last [5 2]) -> 2", "(last [2]) -> 2", "(last [3 6 5 7]) -> 7", "(last [9 7 7]) -> 7", "(last [7]) -> 7", "(last [6 1 6]) -> 6", "(last [6 2 6]) -> 6", "(last [5]) -> 5", "(last [0 1 7]) -> 7", "(last [3 7 5 0 3]) -> 3", "(last [0 6]) -> 6"], "time": 0.041591}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [6 5 0 2 5]) -> 5", "(last [5]) -> 5", "(last [9 0 1]) -> 1", "(last [0 4]) -> 4", "(last [4 3 4]) -> 4", "(last [4 0]) -> 0", "(last [2 8]) -> 8", "(last [3]) -> 3", "(last [8 6]) -> 6", "(last [0 1]) -> 1", "(last [3 9 6 1 3]) -> 3", "(last [2 6 2 9 4]) -> 4", "(last [1]) -> 1", "(last [3 3 4 8 1]) -> 1", "(last [0 2 4 6 6]) -> 6", "(last [2 7 0]) -> 0", "(last [6 7 1 6]) -> 6", "(last [1 1]) -> 1", "(last [3 8 6]) -> 6", "(last [8 9 6 6 4]) -> 4", "(last [3 2 4 1]) -> 1", "(last [9 5 5 5 8]) -> 8", "(last [5 9 7]) -> 7", "(last [6]) -> 6", "(last [7 3 0 5]) -> 5", "(last [8 8 6]) -> 6", "(last [0 6 8 1]) -> 1", "(last [2 9 0 3]) -> 3", "(last [6]) -> 6", "(last [0]) -> 0", "(last [7 0 6 4]) -> 4", "(last [2 9 9 0]) -> 0", "(last [6 2 7 5 7]) -> 7", "(last [4 8 5 4 8]) -> 8", "(last [7 8 1 8]) -> 8", "(last [8]) -> 8", "(last [1 4]) -> 4", "(last [0 6 9 4 1]) -> 1", "(last [2 4 5 1 2]) -> 2", "(last [3 6 4 6]) -> 6", "(last [6 8]) -> 8", "(last [4 3 4 8]) -> 8", "(last [0]) -> 0", "(last [7 6 1 4]) -> 4", "(last [8 9]) -> 9", "(last [4 2 5]) -> 5", "(last [7]) -> 7", "(last [1 2]) -> 2", "(last [0 2]) -> 2"], "time": 0.048125}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [3 6 8]) -> 8", "(last [6 5 8 3 2]) -> 2", "(last [7 8]) -> 8", "(last [7 8 3 0]) -> 0", "(last [0 7]) -> 7", "(last [7 7]) -> 7", "(last [9 6 6]) -> 6", "(last [6 3]) -> 3", "(last [4 6 9]) -> 9", "(last [4 2]) -> 2", "(last [6 3 1]) -> 1", "(last [0 5 6 5]) -> 5", "(last [7 3]) -> 3", "(last [5 0 8 0]) -> 0", "(last [9 0]) -> 0", "(last [2 4 2]) -> 2", "(last [0 7 3]) -> 3", "(last [6 9 0 8 5]) -> 5", "(last [2 6]) -> 6", "(last [9 7 2 5 2]) -> 2", "(last [8 7]) -> 7", "(last [6 1 5]) -> 5", "(last [0 0 8]) -> 8", "(last [0]) -> 0", "(last [8 1 7]) -> 7", "(last [4 1 7 5]) -> 5", "(last [1 7 0]) -> 0", "(last [7 7 2 7]) -> 7", "(last [3 3 6]) -> 6", "(last [7]) -> 7", "(last [8 9 9 2 6]) -> 6", "(last [1 8]) -> 8", "(last [8]) -> 8", "(last [0]) -> 0", "(last [0 8 7 5 5]) -> 5", "(last [4 1 8 1 4]) -> 4", "(last [7]) -> 7", "(last [2]) -> 2", "(last [7 0]) -> 0", "(last [8]) -> 8", "(last [0 6]) -> 6", "(last [6 6 9 2]) -> 2", "(last [3]) -> 3", "(last [1 7]) -> 7", "(last [5 5 1]) -> 1", "(last [3 5 7 1]) -> 1", "(last [7 3 3 4]) -> 4", "(last [1]) -> 1", "(last [7]) -> 7"], "time": 0.043412}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9 1 0 0]) -> 0", "(last [6 8 5]) -> 5", "(last [9]) -> 9", "(last [3 2 6]) -> 6", "(last [0 5 1 6]) -> 6", "(last [6 3]) -> 3", "(last [8 5 6 5 3]) -> 3", "(last [6]) -> 6", "(last [2 6 9]) -> 9", "(last [2 5 0]) -> 0", "(last [5 2]) -> 2", "(last [4 6]) -> 6", "(last [2 4 5 2]) -> 2", "(last [1 1 3 6]) -> 6", "(last [5]) -> 5", "(last [4]) -> 4", "(last [3 4]) -> 4", "(last [4 9 5 7]) -> 7", "(last [8 7 7]) -> 7", "(last [2 3 0]) -> 0", "(last [2]) -> 2", "(last [7 6 5 1 6]) -> 6", "(last [2 2 0 1]) -> 1", "(last [1]) -> 1", "(last [1 4 4 9]) -> 9", "(last [8 0 7 8]) -> 8", "(last [9 6]) -> 6", "(last [9]) -> 9", "(last [5 9]) -> 9", "(last [7 0 7 4]) -> 4", "(last [8 5 2 8]) -> 8", "(last [6 0 4 7]) -> 7", "(last [4 4 3]) -> 3", "(last [8 1 8 7]) -> 7", "(last [6]) -> 6", "(last [2 4 9 3 2]) -> 2", "(last [5]) -> 5", "(last [4 4 2 9 6]) -> 6", "(last [4 4 9 2 7]) -> 7", "(last [8 4 4]) -> 4", "(last [3 6]) -> 6", "(last [7 0 9 6 3]) -> 3", "(last [9 5 6]) -> 6", "(last [3 2 9 5 8]) -> 8", "(last [3 7 3 8]) -> 8", "(last [4 3]) -> 3", "(last [5 8 5]) -> 5", "(last [1 5]) -> 5", "(last [8 5 6]) -> 6"], "time": 0.036069}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [6 7 0 1 4]) -> 4", "(last [3 7 9]) -> 9", "(last [5 9 7 8]) -> 8", "(last [7]) -> 7", "(last [5 3 4 0 3]) -> 3", "(last [7 0 5 1 5]) -> 5", "(last [1 8 0]) -> 0", "(last [0 3 1]) -> 1", "(last [4 4 6 8 7]) -> 7", "(last [6 5 8 4 9]) -> 9", "(last [0 0 2]) -> 2", "(last [0 6 4 1 9]) -> 9", "(last [4 3 8 8]) -> 8", "(last [4 8 8 2]) -> 2", "(last [9 7 0 4]) -> 4", "(last [0 5 5 9 2]) -> 2", "(last [2 3 5 6]) -> 6", "(last [1 9 4 7]) -> 7", "(last [2 7 9 4 4]) -> 4", "(last [7 9 6 8 5]) -> 5", "(last [4 4 4]) -> 4", "(last [5 9 1 0 1]) -> 1", "(last [1 1 0]) -> 0", "(last [1]) -> 1", "(last [9]) -> 9", "(last [6 9 2]) -> 2", "(last [5]) -> 5", "(last [1 9 6]) -> 6", "(last [3]) -> 3", "(last [7 6 9]) -> 9", "(last [6]) -> 6", "(last [2]) -> 2", "(last [0]) -> 0", "(last [2 5]) -> 5", "(last [5 2 3 7 4]) -> 4", "(last [4]) -> 4", "(last [5 4]) -> 4", "(last [7 3 6 7]) -> 7", "(last [0 4 0 8]) -> 8", "(last [5 7 8 9 4]) -> 4", "(last [7]) -> 7", "(last [5]) -> 5", "(last [5 7 1 7 8]) -> 8", "(last [0 8 3 7]) -> 7", "(last [0 4 1 9]) -> 9", "(last [2]) -> 2", "(last [4 2 0 7]) -> 7", "(last [2 8 5 9]) -> 9", "(last [5 9 9]) -> 9"], "time": 0.039695}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [6 8 1 4]) -> 4", "(last [5]) -> 5", "(last [7 4 5]) -> 5", "(last [1 2 7 1 8]) -> 8", "(last [3]) -> 3", "(last [5 7]) -> 7", "(last [0 6 6]) -> 6", "(last [4 2]) -> 2", "(last [5 8 9 1 2]) -> 2", "(last [4]) -> 4", "(last [8 2]) -> 2", "(last [0 5 6 2 1]) -> 1", "(last [9 6]) -> 6", "(last [8 5 2 0 0]) -> 0", "(last [5 1 6 8 1]) -> 1", "(last [6 8]) -> 8", "(last [2]) -> 2", "(last [1]) -> 1", "(last [5]) -> 5", "(last [1 9]) -> 9", "(last [5 6 8 3]) -> 3", "(last [4 9 0]) -> 0", "(last [1]) -> 1", "(last [6 4 5 4 7]) -> 7", "(last [9]) -> 9", "(last [3 3 2]) -> 2", "(last [7 6 9]) -> 9", "(last [4]) -> 4", "(last [9 8 4]) -> 4", "(last [5 8 2]) -> 2", "(last [8 3 6 9]) -> 9", "(last [7 3 4 2 6]) -> 6", "(last [4 5 9 5]) -> 5", "(last [8 1 1 4 1]) -> 1", "(last [2 9 0]) -> 0", "(last [4 6]) -> 6", "(last [7 6 1]) -> 1", "(last [4]) -> 4", "(last [1]) -> 1", "(last [9 0 6 6 0]) -> 0", "(last [6]) -> 6", "(last [2 4 2]) -> 2", "(last [1 3]) -> 3", "(last [0 8 9]) -> 9", "(last [0 7 5 0]) -> 0", "(last [1 0]) -> 0", "(last [0 4]) -> 4", "(last [3 2]) -> 2", "(last [1]) -> 1"], "time": 0.037562}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [3]) -> 3", "(last [0 5]) -> 5", "(last [0 6 5 6 5]) -> 5", "(last [0 2 5]) -> 5", "(last [9 6 2 0]) -> 0", "(last [0 7 7 4 4]) -> 4", "(last [8 3 8]) -> 8", "(last [2 4 1 9 6]) -> 6", "(last [2 1 0 9 6]) -> 6", "(last [2 6 9 3 3]) -> 3", "(last [2 6 9]) -> 9", "(last [0 2]) -> 2", "(last [2]) -> 2", "(last [6]) -> 6", "(last [1 8 1 1]) -> 1", "(last [2 2 0 3]) -> 3", "(last [3 2]) -> 2", "(last [4 3]) -> 3", "(last [2]) -> 2", "(last [6 1 7]) -> 7", "(last [6 0 5 3 0]) -> 0", "(last [7 4 2]) -> 2", "(last [2 0]) -> 0", "(last [0 8 2 6]) -> 6", "(last [3 4]) -> 4", "(last [0 1 8 5 9]) -> 9", "(last [5 9 0 0]) -> 0", "(last [5]) -> 5", "(last [2 3 9]) -> 9", "(last [5 0 4]) -> 4", "(last [6 6 1 2]) -> 2", "(last [7 6 8 9]) -> 9", "(last [5 6 5]) -> 5", "(last [1 5 8 9 7]) -> 7", "(last [6 0 7]) -> 7", "(last [2 7]) -> 7", "(last [1 3 9]) -> 9", "(last [8 5 8 6 6]) -> 6", "(last [1 9 1]) -> 1", "(last [1 2]) -> 2", "(last [9]) -> 9", "(last [5 2 4]) -> 4", "(last [1 6]) -> 6", "(last [3 3 6]) -> 6", "(last [4 9 3]) -> 3", "(last [4 1]) -> 1", "(last [1 3 7 1 6]) -> 6", "(last [7 4 9 6]) -> 6", "(last [8]) -> 8"], "time": 0.03591}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8 6 3]) -> 3", "(last [7 4 7 8 8]) -> 8", "(last [4 2]) -> 2", "(last [0 1]) -> 1", "(last [5 7]) -> 7", "(last [2 3]) -> 3", "(last [4 4 3 1]) -> 1", "(last [1 2]) -> 2", "(last [6 7 9 7]) -> 7", "(last [6]) -> 6", "(last [8]) -> 8", "(last [9 7 6 9 9]) -> 9", "(last [6]) -> 6", "(last [4 7 8 4 9]) -> 9", "(last [1 4 8]) -> 8", "(last [6 1 0 0]) -> 0", "(last [6 7 7 4]) -> 4", "(last [2]) -> 2", "(last [2 1]) -> 1", "(last [7 6]) -> 6", "(last [4 8]) -> 8", "(last [9 1 3 8 0]) -> 0", "(last [8 6 4 5 7]) -> 7", "(last [5 8 2 1]) -> 1", "(last [8 4 9 6]) -> 6", "(last [4 0 6 7 4]) -> 4", "(last [3 6]) -> 6", "(last [9 7 5 8]) -> 8", "(last [8]) -> 8", "(last [3 1]) -> 1", "(last [5 2 7]) -> 7", "(last [0 2]) -> 2", "(last [2]) -> 2", "(last [4 3]) -> 3", "(last [9 0 3]) -> 3", "(last [3]) -> 3", "(last [5 6]) -> 6", "(last [3 7 2 2]) -> 2", "(last [7 8 4 6]) -> 6", "(last [2 3 7 6]) -> 6", "(last [8 7 6 8]) -> 8", "(last [9 7 2]) -> 2", "(last [4 5]) -> 5", "(last [8 9 0 5]) -> 5", "(last [7 0]) -> 0", "(last [2 4 8 8]) -> 8", "(last [2 3 9 2]) -> 2", "(last [4 3 7]) -> 7", "(last [7]) -> 7"], "time": 0.04195}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2]) -> 2", "(last [2 7 5 5]) -> 5", "(last [0]) -> 0", "(last [2]) -> 2", "(last [1 2 0 0 1]) -> 1", "(last [3]) -> 3", "(last [3 8 9 6 5]) -> 5", "(last [3 3]) -> 3", "(last [0]) -> 0", "(last [4 9]) -> 9", "(last [4 8 5 6 8]) -> 8", "(last [1 0]) -> 0", "(last [5 8 4 7]) -> 7", "(last [5 1 5 8 2]) -> 2", "(last [6]) -> 6", "(last [8 2]) -> 2", "(last [7 5 7]) -> 7", "(last [7 9 5]) -> 5", "(last [3 0 4 2]) -> 2", "(last [3 0]) -> 0", "(last [1]) -> 1", "(last [6 2 5]) -> 5", "(last [8 8 5 1 1]) -> 1", "(last [4 9 9]) -> 9", "(last [6 0 2]) -> 2", "(last [8]) -> 8", "(last [8 2 6 2]) -> 2", "(last [7 4 9 3 8]) -> 8", "(last [3]) -> 3", "(last [7 4 6 6]) -> 6", "(last [6]) -> 6", "(last [3 0 1]) -> 1", "(last [5 4 6 1 5]) -> 5", "(last [7 5 1 7 8]) -> 8", "(last [9 2]) -> 2", "(last [4 5 9 9]) -> 9", "(last [6 4 3 8 7]) -> 7", "(last [5 0 5 5]) -> 5", "(last [0 6 4]) -> 4", "(last [6 7 9]) -> 9", "(last [8 1]) -> 1", "(last [0]) -> 0", "(last [8 1]) -> 1", "(last [2 1 7 9]) -> 9", "(last [1 7]) -> 7", "(last [7 5 4 3 8]) -> 8", "(last [5 5 1]) -> 1", "(last [8 3 2 3 8]) -> 8", "(last [8]) -> 8"], "time": 0.045478}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [4 6 8]) -> 8", "(last [4]) -> 4", "(last [4 1 8 2]) -> 2", "(last [5 7]) -> 7", "(last [9 9 5]) -> 5", "(last [6]) -> 6", "(last [6 8 3]) -> 3", "(last [7 5]) -> 5", "(last [1 7 8]) -> 8", "(last [6 2 7 5]) -> 5", "(last [7 6 1 8 8]) -> 8", "(last [3 0 8]) -> 8", "(last [2 0 1]) -> 1", "(last [1 6]) -> 6", "(last [4 4 0 5]) -> 5", "(last [4 3]) -> 3", "(last [3 2 7 6]) -> 6", "(last [5 4 7 1]) -> 1", "(last [0 6]) -> 6", "(last [8 6 7 3]) -> 3", "(last [1 4 3 1 4]) -> 4", "(last [9 8 9 2 5]) -> 5", "(last [6 7 8]) -> 8", "(last [2]) -> 2", "(last [5]) -> 5", "(last [6 5 0 9]) -> 9", "(last [0 9 2 6 1]) -> 1", "(last [1 5 4 1]) -> 1", "(last [5 5]) -> 5", "(last [3]) -> 3", "(last [5 9 2 1]) -> 1", "(last [3 6 8 9]) -> 9", "(last [4 6 8 0 9]) -> 9", "(last [5 6 0 3 0]) -> 0", "(last [4 2 0 2]) -> 2", "(last [8 9 0 0]) -> 0", "(last [4 6]) -> 6", "(last [7 3 3]) -> 3", "(last [3 4 7 0]) -> 0", "(last [2]) -> 2", "(last [9 6 2 9]) -> 9", "(last [3]) -> 3", "(last [6 6 0 7]) -> 7", "(last [9]) -> 9", "(last [8 8]) -> 8", "(last [9 5 9]) -> 9", "(last [2 0 0]) -> 0", "(last [0 2 3 2 3]) -> 3", "(last [9 1]) -> 1"], "time": 0.031155}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0 0 6 1]) -> 1", "(last [6]) -> 6", "(last [5 6 1]) -> 1", "(last [0 8 6]) -> 6", "(last [2 6 7]) -> 7", "(last [5 8 7 6 0]) -> 0", "(last [2 9 3 6 1]) -> 1", "(last [7]) -> 7", "(last [5 4 1 3]) -> 3", "(last [2 8 2 3 7]) -> 7", "(last [1 8 7 1 5]) -> 5", "(last [6 9]) -> 9", "(last [0]) -> 0", "(last [3]) -> 3", "(last [2]) -> 2", "(last [8 9]) -> 9", "(last [4 0 7 1 3]) -> 3", "(last [6 2]) -> 2", "(last [5 7 6]) -> 6", "(last [7 0]) -> 0", "(last [8 1]) -> 1", "(last [5 9 5 1]) -> 1", "(last [6 7 8 1 5]) -> 5", "(last [8 2 2 8]) -> 8", "(last [6 1 2 7]) -> 7", "(last [2]) -> 2", "(last [9 3 4 0 2]) -> 2", "(last [0 1]) -> 1", "(last [0 4 6]) -> 6", "(last [0 6]) -> 6", "(last [0]) -> 0", "(last [2 5 4 9 2]) -> 2", "(last [9]) -> 9", "(last [7]) -> 7", "(last [1]) -> 1", "(last [6]) -> 6", "(last [1]) -> 1", "(last [6 7]) -> 7", "(last [1 2 4]) -> 4", "(last [3 7]) -> 7", "(last [3]) -> 3", "(last [8 0 8 4]) -> 4", "(last [5]) -> 5", "(last [2 8]) -> 8", "(last [6]) -> 6", "(last [7]) -> 7", "(last [2 7 0]) -> 0", "(last [5 4 3 4 2]) -> 2", "(last [5 3]) -> 3"], "time": 0.03092}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2 8]) -> 8", "(last [4 5 1]) -> 1", "(last [9]) -> 9", "(last [5 9 3]) -> 3", "(last [9 3 4]) -> 4", "(last [0 2 7 7]) -> 7", "(last [1 8 0 0 6]) -> 6", "(last [6 7]) -> 7", "(last [9 0 2 5 4]) -> 4", "(last [4 8 1 3 4]) -> 4", "(last [8]) -> 8", "(last [5 8 0 1 4]) -> 4", "(last [3 3]) -> 3", "(last [1 1 4 3 0]) -> 0", "(last [2 6]) -> 6", "(last [2 8 5]) -> 5", "(last [5 3 4 2]) -> 2", "(last [5 1 2 6]) -> 6", "(last [4 3 5 5]) -> 5", "(last [9 9 6]) -> 6", "(last [6 9 7]) -> 7", "(last [6 3 2 9]) -> 9", "(last [3 4 3 1]) -> 1", "(last [6 1 9 0]) -> 0", "(last [1 3 1 5]) -> 5", "(last [2 0 4]) -> 4", "(last [2 2 1 8]) -> 8", "(last [8 0]) -> 0", "(last [5 0 5 3 0]) -> 0", "(last [4 3 0 3]) -> 3", "(last [4 5 2]) -> 2", "(last [9 9 9]) -> 9", "(last [5 7 2 0 9]) -> 9", "(last [9 3]) -> 3", "(last [6 5]) -> 5", "(last [5]) -> 5", "(last [2]) -> 2", "(last [5]) -> 5", "(last [0]) -> 0", "(last [1 7 3 4]) -> 4", "(last [2 5]) -> 5", "(last [2 1 7]) -> 7", "(last [0 8]) -> 8", "(last [4]) -> 4", "(last [1 9 5 7 0]) -> 0", "(last [5 8 1 4]) -> 4", "(last [5 2]) -> 2", "(last [2 4 5]) -> 5", "(last [5 7 7 9 5]) -> 5"], "time": 0.049186}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7]) -> 7", "(last [3]) -> 3", "(last [4 9 3]) -> 3", "(last [0 8]) -> 8", "(last [9 1]) -> 1", "(last [7]) -> 7", "(last [8 5 8]) -> 8", "(last [4]) -> 4", "(last [3 4 7 1]) -> 1", "(last [5 5 9]) -> 9", "(last [0 7 8 0]) -> 0", "(last [8 7 2 6]) -> 6", "(last [2 0 8 9 3]) -> 3", "(last [6 4 0]) -> 0", "(last [9 5 1 7 8]) -> 8", "(last [7 6 5 9]) -> 9", "(last [3 5 6 4 3]) -> 3", "(last [1 6]) -> 6", "(last [1 5]) -> 5", "(last [6 3]) -> 3", "(last [0 9 9 9]) -> 9", "(last [9 3]) -> 3", "(last [5]) -> 5", "(last [4 6]) -> 6", "(last [4 4 2]) -> 2", "(last [5 3 2 4]) -> 4", "(last [0]) -> 0", "(last [2 8]) -> 8", "(last [7 5]) -> 5", "(last [4 9 9 6]) -> 6", "(last [0 6]) -> 6", "(last [1 1 2 0 6]) -> 6", "(last [5 6]) -> 6", "(last [6 0]) -> 0", "(last [4 3 1 3]) -> 3", "(last [6 8]) -> 8", "(last [8 9 1]) -> 1", "(last [5 1 7]) -> 7", "(last [5 1 3 4]) -> 4", "(last [0 4 0 3]) -> 3", "(last [5 3 1 9 8]) -> 8", "(last [6 4]) -> 4", "(last [7 4 6 9]) -> 9", "(last [4 9]) -> 9", "(last [6 2 4 3 6]) -> 6", "(last [1 1 3 2 4]) -> 4", "(last [0 9 5]) -> 5", "(last [9 1 2 5 2]) -> 2", "(last [1 3 1]) -> 1"], "time": 0.030078}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2 3 7 7]) -> 7", "(last [3 1 5 9 4]) -> 4", "(last [7 3 9 4]) -> 4", "(last [0 8]) -> 8", "(last [2 9 9 3]) -> 3", "(last [3 6 1 8 2]) -> 2", "(last [8 0 3]) -> 3", "(last [8 9 0 1]) -> 1", "(last [9 6 7 6 1]) -> 1", "(last [5]) -> 5", "(last [1 1]) -> 1", "(last [4]) -> 4", "(last [9 5 3 4]) -> 4", "(last [6 5 2 4]) -> 4", "(last [4 5 2]) -> 2", "(last [6 4]) -> 4", "(last [9 2]) -> 2", "(last [2 1 5]) -> 5", "(last [1 9 0 5 2]) -> 2", "(last [2 5 1 9]) -> 9", "(last [1 8 2]) -> 2", "(last [5 2]) -> 2", "(last [7 2 7]) -> 7", "(last [1 8]) -> 8", "(last [1 2 0 9]) -> 9", "(last [8 6]) -> 6", "(last [0 6]) -> 6", "(last [7 8 2 7 0]) -> 0", "(last [1 2 6 2]) -> 2", "(last [2 3]) -> 3", "(last [2 4]) -> 4", "(last [2 8 5 3 3]) -> 3", "(last [6]) -> 6", "(last [6 4 4 9]) -> 9", "(last [7 4 6]) -> 6", "(last [4]) -> 4", "(last [3 0]) -> 0", "(last [2 2 4 2 3]) -> 3", "(last [0 8 2 4]) -> 4", "(last [0 1 9 1 9]) -> 9", "(last [3 6 1 0 2]) -> 2", "(last [6]) -> 6", "(last [0 6]) -> 6", "(last [8 4 4]) -> 4", "(last [5 6]) -> 6", "(last [5 2]) -> 2", "(last [2 1]) -> 1", "(last [6 9]) -> 9", "(last [8]) -> 8"], "time": 0.029073}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2 2 4]) -> 4", "(last [8 4 7]) -> 7", "(last [6 7 6 7]) -> 7", "(last [4 9 4]) -> 4", "(last [1 5]) -> 5", "(last [6 5 4 0 9]) -> 9", "(last [4 9]) -> 9", "(last [2 1]) -> 1", "(last [0 3 3]) -> 3", "(last [6 0 9 2 2]) -> 2", "(last [0 3 7]) -> 7", "(last [1 6 7]) -> 7", "(last [2 6]) -> 6", "(last [0 0 1 7]) -> 7", "(last [2 0]) -> 0", "(last [9]) -> 9", "(last [3 0 6 5]) -> 5", "(last [3 7]) -> 7", "(last [3 2 1 9]) -> 9", "(last [8 7 3]) -> 3", "(last [9 7 6 6 5]) -> 5", "(last [4 4]) -> 4", "(last [8 5 7 0 7]) -> 7", "(last [5 9 6]) -> 6", "(last [7 8 5 5 6]) -> 6", "(last [0]) -> 0", "(last [5 1 8 3]) -> 3", "(last [5 3 1 3]) -> 3", "(last [4 2 7 9 2]) -> 2", "(last [1 7 2]) -> 2", "(last [1 7 4 9]) -> 9", "(last [9 8 8 3 3]) -> 3", "(last [7 7]) -> 7", "(last [5 4 2 4]) -> 4", "(last [8 6 0]) -> 0", "(last [4 5 1 3 5]) -> 5", "(last [4 1 8 4]) -> 4", "(last [2 8]) -> 8", "(last [9]) -> 9", "(last [7 6 7 0]) -> 0", "(last [2 1 3 0 2]) -> 2", "(last [0 6 4 8]) -> 8", "(last [6]) -> 6", "(last [4 4 7 2]) -> 2", "(last [0 7 9 4]) -> 4", "(last [0 6 2]) -> 2", "(last [3]) -> 3", "(last [8 9 3 5]) -> 5", "(last [8 2]) -> 2"], "time": 0.041819}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2]) -> 2", "(last [6 6 8]) -> 8", "(last [5 1 7 8]) -> 8", "(last [3]) -> 3", "(last [8 3 7]) -> 7", "(last [3 1 0]) -> 0", "(last [7 2 0 0 8]) -> 8", "(last [5 8 2]) -> 2", "(last [1]) -> 1", "(last [7 3 9 9]) -> 9", "(last [6 5]) -> 5", "(last [5 1 4 3]) -> 3", "(last [0 8 5]) -> 5", "(last [3 4 2]) -> 2", "(last [8 4 7 6 6]) -> 6", "(last [6 7 4]) -> 4", "(last [6 1]) -> 1", "(last [8 6 2 6 6]) -> 6", "(last [0 6 7]) -> 7", "(last [5 8 9 6 1]) -> 1", "(last [6 3 1 0]) -> 0", "(last [7]) -> 7", "(last [9 8]) -> 8", "(last [9 9]) -> 9", "(last [3]) -> 3", "(last [8 1 3 0]) -> 0", "(last [9]) -> 9", "(last [1 4 4 8 0]) -> 0", "(last [7 8 6 9 7]) -> 7", "(last [3 0]) -> 0", "(last [5 0 8]) -> 8", "(last [5 7 0 5]) -> 5", "(last [4 5]) -> 5", "(last [5 9 8]) -> 8", "(last [1 4 2 8 0]) -> 0", "(last [5 6 9 9]) -> 9", "(last [6]) -> 6", "(last [4 4]) -> 4", "(last [1 2 8]) -> 8", "(last [6 2]) -> 2", "(last [6 1 7 1 7]) -> 7", "(last [9 8 0]) -> 0", "(last [1 8 0 0]) -> 0", "(last [6]) -> 6", "(last [2]) -> 2", "(last [0 3 1]) -> 1", "(last [2]) -> 2", "(last [2 6 0 8]) -> 8", "(last [0 7]) -> 7"], "time": 0.048352}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1 2 6 1 5]) -> 5", "(last [2 5 5 2 3]) -> 3", "(last [7 0 8 1 3]) -> 3", "(last [3 7 6 3]) -> 3", "(last [4 2 1]) -> 1", "(last [3 4 8]) -> 8", "(last [5 8]) -> 8", "(last [5 9 3 7 6]) -> 6", "(last [9 1 6]) -> 6", "(last [0 9]) -> 9", "(last [5 3 9]) -> 9", "(last [3 0]) -> 0", "(last [2 4 6 3]) -> 3", "(last [4 9]) -> 9", "(last [3 3 5 0]) -> 0", "(last [3 5 0]) -> 0", "(last [8 9 6 2 3]) -> 3", "(last [1 2 7 0 3]) -> 3", "(last [4 3 5 5 0]) -> 0", "(last [2 2 8 4 1]) -> 1", "(last [3]) -> 3", "(last [3]) -> 3", "(last [9 9]) -> 9", "(last [3 1 4 0 2]) -> 2", "(last [5 4 4 3]) -> 3", "(last [2 7 2]) -> 2", "(last [0 8 6]) -> 6", "(last [7 7]) -> 7", "(last [5 0 3 6 1]) -> 1", "(last [5 4 8]) -> 8", "(last [3 6 3]) -> 3", "(last [5 9 4 9]) -> 9", "(last [0 4 0 6]) -> 6", "(last [3]) -> 3", "(last [5 6 5]) -> 5", "(last [1 6]) -> 6", "(last [9]) -> 9", "(last [1 6 6 9 3]) -> 3", "(last [4 2 6 0 9]) -> 9", "(last [1 8 4 3]) -> 3", "(last [2]) -> 2", "(last [9]) -> 9", "(last [2 7]) -> 7", "(last [7 2 2]) -> 2", "(last [3 8 2]) -> 2", "(last [0 0 4 7]) -> 7", "(last [5]) -> 5", "(last [7]) -> 7", "(last [3 2]) -> 2"], "time": 0.03064}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [6 1]) -> 1", "(last [3 7 7]) -> 7", "(last [4 8 5 0]) -> 0", "(last [0 1 1 8 4]) -> 4", "(last [8 1 6 9 4]) -> 4", "(last [8 3 9 8 0]) -> 0", "(last [9 8 8 8 5]) -> 5", "(last [8 2 1 9]) -> 9", "(last [6 4 2]) -> 2", "(last [4 8 2]) -> 2", "(last [6 5 8 6]) -> 6", "(last [2 1 4 6]) -> 6", "(last [2 1 7]) -> 7", "(last [0 3 4 7]) -> 7", "(last [7 2]) -> 2", "(last [9 0 3]) -> 3", "(last [2]) -> 2", "(last [7 0 9 1 5]) -> 5", "(last [0]) -> 0", "(last [2 5]) -> 5", "(last [8 8 6]) -> 6", "(last [5 4 1 3]) -> 3", "(last [0]) -> 0", "(last [5]) -> 5", "(last [9]) -> 9", "(last [3 2 6 1 8]) -> 8", "(last [9 9 0 5 8]) -> 8", "(last [4]) -> 4", "(last [0 4]) -> 4", "(last [5 2 2 7 5]) -> 5", "(last [2 7]) -> 7", "(last [9 1]) -> 1", "(last [6 2 2]) -> 2", "(last [8 2 5]) -> 5", "(last [2 3 9 9 2]) -> 2", "(last [5]) -> 5", "(last [9 6 5 8 5]) -> 5", "(last [2 2 5]) -> 5", "(last [9 2]) -> 2", "(last [1]) -> 1", "(last [2 1 4 3 0]) -> 0", "(last [4 4 2 9]) -> 9", "(last [1 9 1]) -> 1", "(last [2 9 7 0 0]) -> 0", "(last [7 9 3 6]) -> 6", "(last [5 7]) -> 7", "(last [1 5]) -> 5", "(last [4 6 8 8]) -> 8", "(last [0 1 6]) -> 6"], "time": 0.031206}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [4 8]) -> 8", "(last [1 1 4]) -> 4", "(last [2 1 1 6 0]) -> 0", "(last [3 1 2]) -> 2", "(last [8]) -> 8", "(last [1 6 5]) -> 5", "(last [2 2 3 8]) -> 8", "(last [1]) -> 1", "(last [3 5]) -> 5", "(last [6 3]) -> 3", "(last [3 9 1]) -> 1", "(last [7 7 6 6]) -> 6", "(last [9 8 2 8]) -> 8", "(last [8 8 9 9]) -> 9", "(last [7 2 2 5]) -> 5", "(last [1 7 7 3 1]) -> 1", "(last [2 5 6 1]) -> 1", "(last [7 4 1 3]) -> 3", "(last [9 4]) -> 4", "(last [9 7 9 3]) -> 3", "(last [5 8 6 9]) -> 9", "(last [7 4]) -> 4", "(last [2 9 2]) -> 2", "(last [6 9 8]) -> 8", "(last [5 4]) -> 4", "(last [5 1]) -> 1", "(last [1 3]) -> 3", "(last [7 3 8 6]) -> 6", "(last [8]) -> 8", "(last [7 8 4 8]) -> 8", "(last [8]) -> 8", "(last [8]) -> 8", "(last [5]) -> 5", "(last [6]) -> 6", "(last [1]) -> 1", "(last [2 2 5 1 0]) -> 0", "(last [1 0 1 3 0]) -> 0", "(last [5 4 7 5]) -> 5", "(last [8 5 4 5]) -> 5", "(last [0 7 4 9 7]) -> 7", "(last [4 0 0]) -> 0", "(last [0 2 7 7]) -> 7", "(last [6]) -> 6", "(last [3 1]) -> 1", "(last [9 8 8 3]) -> 3", "(last [3 7 5 5 3]) -> 3", "(last [1 1]) -> 1", "(last [0 8 6]) -> 6", "(last [4 0]) -> 0"], "time": 0.031328}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [3 3 7]) -> 7", "(last [4 1 7 8]) -> 8", "(last [1 0 9 0]) -> 0", "(last [3 4]) -> 4", "(last [5 4 4 1 0]) -> 0", "(last [0]) -> 0", "(last [6 5 0 5]) -> 5", "(last [7 1 1 0]) -> 0", "(last [7 2]) -> 2", "(last [8 7]) -> 7", "(last [1]) -> 1", "(last [4 9 8]) -> 8", "(last [1 4 7 4 5]) -> 5", "(last [5 8 7 7 0]) -> 0", "(last [6]) -> 6", "(last [2 2 7 4 6]) -> 6", "(last [5]) -> 5", "(last [8]) -> 8", "(last [0]) -> 0", "(last [6 8]) -> 8", "(last [8 3 8]) -> 8", "(last [3]) -> 3", "(last [1 5 7 5]) -> 5", "(last [2 0 9]) -> 9", "(last [0 0 4]) -> 4", "(last [4 4 7]) -> 7", "(last [9 0 4 2 8]) -> 8", "(last [3 6]) -> 6", "(last [3]) -> 3", "(last [8 2 8 3]) -> 3", "(last [8 1]) -> 1", "(last [6 0 6 7]) -> 7", "(last [2 4]) -> 4", "(last [4 1 3]) -> 3", "(last [7 9 5 1 7]) -> 7", "(last [7 2 7 1 5]) -> 5", "(last [6 9 0]) -> 0", "(last [3 2 9 5]) -> 5", "(last [6 3]) -> 3", "(last [4 8 3]) -> 3", "(last [8 4 4 0]) -> 0", "(last [2]) -> 2", "(last [1 4]) -> 4", "(last [6 0 2 7 4]) -> 4", "(last [0 6]) -> 6", "(last [3]) -> 3", "(last [7 0]) -> 0", "(last [8 2 9 8]) -> 8", "(last [8 5 0 5]) -> 5"], "time": 0.04266}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7 9]) -> 9", "(last [1 2 4 6]) -> 6", "(last [9 5 0 5]) -> 5", "(last [9 0 2 6 2]) -> 2", "(last [8 9 7 1 1]) -> 1", "(last [5 2 6 0 7]) -> 7", "(last [6 2 1 3 8]) -> 8", "(last [3 9 6]) -> 6", "(last [3]) -> 3", "(last [9 7 0]) -> 0", "(last [9 9]) -> 9", "(last [9 7 8]) -> 8", "(last [8 4 3 1]) -> 1", "(last [2]) -> 2", "(last [0 7 0 4]) -> 4", "(last [0 8 7 2 0]) -> 0", "(last [8]) -> 8", "(last [2 5 0 0]) -> 0", "(last [2 4 3]) -> 3", "(last [7 5 1 4]) -> 4", "(last [3 5 6 7 9]) -> 9", "(last [2 3 7 9 4]) -> 4", "(last [4 9 0 6]) -> 6", "(last [5]) -> 5", "(last [1]) -> 1", "(last [5 0 9]) -> 9", "(last [0 4 0]) -> 0", "(last [4 6 5 0 7]) -> 7", "(last [7 1 4 3]) -> 3", "(last [4 7 2 4]) -> 4", "(last [1 3 8 3 8]) -> 8", "(last [8 8]) -> 8", "(last [0 1 3 9]) -> 9", "(last [3]) -> 3", "(last [4 8 9 4 8]) -> 8", "(last [4 4 7 8 8]) -> 8", "(last [2 7 2 5]) -> 5", "(last [6 0 5 8]) -> 8", "(last [5 3 4 2 1]) -> 1", "(last [2 0 4 6 1]) -> 1", "(last [4 2]) -> 2", "(last [1 3 2]) -> 2", "(last [6 7 1 4 2]) -> 2", "(last [2 3 7 2]) -> 2", "(last [1 5 2 9 6]) -> 6", "(last [0 8 3 2 6]) -> 6", "(last [1 7 3 4]) -> 4", "(last [9 7]) -> 7", "(last [2 2 8 6 9]) -> 9"], "time": 0.030632}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9]) -> 9", "(last [4 1]) -> 1", "(last [2 0]) -> 0", "(last [0 8 5]) -> 5", "(last [1 4 1 1]) -> 1", "(last [8 0 9 2 1]) -> 1", "(last [0]) -> 0", "(last [6 1 5 4]) -> 4", "(last [2 0 2 4 2]) -> 2", "(last [3 3 4]) -> 4", "(last [9 8 9 2]) -> 2", "(last [3]) -> 3", "(last [4]) -> 4", "(last [8 4 1 9]) -> 9", "(last [8 3 8]) -> 8", "(last [2 4 9 2 6]) -> 6", "(last [5]) -> 5", "(last [3 0 5 0 3]) -> 3", "(last [1 0]) -> 0", "(last [8 3 9]) -> 9", "(last [7 7 7 3 8]) -> 8", "(last [8 1]) -> 1", "(last [3 5]) -> 5", "(last [3 0 9 8 5]) -> 5", "(last [7 8 7 5 5]) -> 5", "(last [2 3 7 2 8]) -> 8", "(last [2]) -> 2", "(last [3 5]) -> 5", "(last [3 6 2 5]) -> 5", "(last [9 6 2]) -> 2", "(last [7 0 8 1 9]) -> 9", "(last [4]) -> 4", "(last [1]) -> 1", "(last [0 0 0 9]) -> 9", "(last [4 7]) -> 7", "(last [8]) -> 8", "(last [1 0 3]) -> 3", "(last [7]) -> 7", "(last [7 5]) -> 5", "(last [9 5 7]) -> 7", "(last [6 2]) -> 2", "(last [6 6]) -> 6", "(last [3 9]) -> 9", "(last [8 8]) -> 8", "(last [3 8 1 1]) -> 1", "(last [5 8]) -> 8", "(last [7]) -> 7", "(last [4 9 3 2 7]) -> 7", "(last [9 3 1]) -> 1"], "time": 0.029464}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8 0 7 2 6]) -> 6", "(last [8 2]) -> 2", "(last [2 0 6 8]) -> 8", "(last [3]) -> 3", "(last [7 3 7 6]) -> 6", "(last [2 8 4 2]) -> 2", "(last [8 9]) -> 9", "(last [3]) -> 3", "(last [3 4 4 9 9]) -> 9", "(last [2]) -> 2", "(last [3 6 3]) -> 3", "(last [9 8]) -> 8", "(last [5 6 6 4 0]) -> 0", "(last [0 8 4]) -> 4", "(last [8 6 0]) -> 0", "(last [0 7 6 4]) -> 4", "(last [1 3 2]) -> 2", "(last [8 9]) -> 9", "(last [5 2 0 6 1]) -> 1", "(last [6 7 2 5]) -> 5", "(last [7 4]) -> 4", "(last [5 2 3 9 2]) -> 2", "(last [7 5]) -> 5", "(last [1 4 9 7]) -> 7", "(last [4]) -> 4", "(last [7]) -> 7", "(last [8]) -> 8", "(last [9]) -> 9", "(last [7 6]) -> 6", "(last [1 0]) -> 0", "(last [2 0 1]) -> 1", "(last [5 9 4 5 5]) -> 5", "(last [7 9]) -> 9", "(last [7 5 0 5 3]) -> 3", "(last [1 0 6 2]) -> 2", "(last [6 0]) -> 0", "(last [8 4]) -> 4", "(last [2]) -> 2", "(last [0 4 7 6 3]) -> 3", "(last [8 0 5 0 4]) -> 4", "(last [2 9 3 7]) -> 7", "(last [8]) -> 8", "(last [5 1 7 9 2]) -> 2", "(last [4 9]) -> 9", "(last [7 1 4 1 1]) -> 1", "(last [4]) -> 4", "(last [4 0 1 4]) -> 4", "(last [4]) -> 4", "(last [5]) -> 5"], "time": 0.029724}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0 0]) -> 0", "(last [5 5 7 1]) -> 1", "(last [9]) -> 9", "(last [7 1 0 5]) -> 5", "(last [6 6 3 6]) -> 6", "(last [4 7 4 9]) -> 9", "(last [5 7 5]) -> 5", "(last [8 9 9 7]) -> 7", "(last [8]) -> 8", "(last [9 2]) -> 2", "(last [3 3 1]) -> 1", "(last [9 5 3 8 3]) -> 3", "(last [2 6 6 4 9]) -> 9", "(last [7 5 5 5 8]) -> 8", "(last [2]) -> 2", "(last [8 0 5 2]) -> 2", "(last [5 2 3 3 6]) -> 6", "(last [4 8 1 6]) -> 6", "(last [1]) -> 1", "(last [0 3 0]) -> 0", "(last [3 0]) -> 0", "(last [2 6 9 6]) -> 6", "(last [5 4 5]) -> 5", "(last [3]) -> 3", "(last [3 6 2]) -> 2", "(last [0 0 2 4 5]) -> 5", "(last [7]) -> 7", "(last [5 9 5]) -> 5", "(last [0 7 1 9]) -> 9", "(last [3]) -> 3", "(last [0]) -> 0", "(last [7 4 2 1]) -> 1", "(last [9 7]) -> 7", "(last [7 9 4]) -> 4", "(last [7]) -> 7", "(last [1 1]) -> 1", "(last [9]) -> 9", "(last [4 3]) -> 3", "(last [8 3 8 4]) -> 4", "(last [9 9 9 9]) -> 9", "(last [5 3 1]) -> 1", "(last [0 6]) -> 6", "(last [2]) -> 2", "(last [5]) -> 5", "(last [1 4 5 9]) -> 9", "(last [2 3 9 8 3]) -> 3", "(last [2 1 4]) -> 4", "(last [2 8 1 1]) -> 1", "(last [1 7 3]) -> 3"], "time": 0.034489}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [4 0 6 1 2]) -> 2", "(last [0 4 2 1]) -> 1", "(last [8 0 3 9 0]) -> 0", "(last [1 1]) -> 1", "(last [2 8 6 6 7]) -> 7", "(last [5 9]) -> 9", "(last [6]) -> 6", "(last [6]) -> 6", "(last [5]) -> 5", "(last [9 1 2 7 6]) -> 6", "(last [5 8]) -> 8", "(last [3 2 0 2]) -> 2", "(last [5 6]) -> 6", "(last [2 4]) -> 4", "(last [2 1]) -> 1", "(last [2 3 1]) -> 1", "(last [3 7 7]) -> 7", "(last [1]) -> 1", "(last [2]) -> 2", "(last [5 9 6 6]) -> 6", "(last [5 7 2 3]) -> 3", "(last [1]) -> 1", "(last [3 8 9 9]) -> 9", "(last [7 5]) -> 5", "(last [9]) -> 9", "(last [5]) -> 5", "(last [2]) -> 2", "(last [9 2 6 4]) -> 4", "(last [1 7 6 1]) -> 1", "(last [3 5 5]) -> 5", "(last [7 1 4 5]) -> 5", "(last [0]) -> 0", "(last [7 7 4 2 9]) -> 9", "(last [8 4]) -> 4", "(last [3 1]) -> 1", "(last [2 9 0 5]) -> 5", "(last [0 7 1 5 4]) -> 4", "(last [3 6 3 2 6]) -> 6", "(last [1 2]) -> 2", "(last [5 2 6]) -> 6", "(last [1 9]) -> 9", "(last [5 1 2 3]) -> 3", "(last [7 6]) -> 6", "(last [4 7 9]) -> 9", "(last [5]) -> 5", "(last [7 6 0 5]) -> 5", "(last [3 8 6 4]) -> 4", "(last [1 6 2 1 9]) -> 9", "(last [8 6 2 6]) -> 6"], "time": 0.03357}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9 2]) -> 2", "(last [0 9 0 8]) -> 8", "(last [0 6]) -> 6", "(last [9 1 9 9 2]) -> 2", "(last [8]) -> 8", "(last [5]) -> 5", "(last [6]) -> 6", "(last [3 8]) -> 8", "(last [1 7 0]) -> 0", "(last [7 7]) -> 7", "(last [4 9 9 5 4]) -> 4", "(last [3 4 9]) -> 9", "(last [5 0 1 8 0]) -> 0", "(last [5 8 1]) -> 1", "(last [5 5]) -> 5", "(last [1 1]) -> 1", "(last [7]) -> 7", "(last [5 9 8 9 0]) -> 0", "(last [4]) -> 4", "(last [1 3 7 2 6]) -> 6", "(last [4 6 8 5]) -> 5", "(last [0 4]) -> 4", "(last [0 7 1 6]) -> 6", "(last [7]) -> 7", "(last [5 9]) -> 9", "(last [4 1 9]) -> 9", "(last [3]) -> 3", "(last [8]) -> 8", "(last [2 8 2 0 7]) -> 7", "(last [6]) -> 6", "(last [9 4]) -> 4", "(last [9 3]) -> 3", "(last [5 9]) -> 9", "(last [5 2 9 6 7]) -> 7", "(last [5 9 4]) -> 4", "(last [0 6 8 4 5]) -> 5", "(last [0 9 6 7]) -> 7", "(last [5 9 0 6]) -> 6", "(last [9 0 8]) -> 8", "(last [3 2 0]) -> 0", "(last [3]) -> 3", "(last [8 1 3 8]) -> 8", "(last [8 0]) -> 0", "(last [7 5 8]) -> 8", "(last [6 9 3]) -> 3", "(last [9]) -> 9", "(last [1 5]) -> 5", "(last [5 5]) -> 5", "(last [2 2 5]) -> 5"], "time": 0.04569}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1]) -> 1", "(last [5 1 6]) -> 6", "(last [6 9 1]) -> 1", "(last [8 7 7]) -> 7", "(last [9 9 2 4 0]) -> 0", "(last [3]) -> 3", "(last [3 6 0 2]) -> 2", "(last [9 0 1 4 5]) -> 5", "(last [9 9 1 1 9]) -> 9", "(last [5 2 5]) -> 5", "(last [9 1 5 0]) -> 0", "(last [5]) -> 5", "(last [9 5]) -> 5", "(last [9 8 5 4]) -> 4", "(last [8 5]) -> 5", "(last [9 3]) -> 3", "(last [8 1 7]) -> 7", "(last [1 0 3 4 5]) -> 5", "(last [9 5 7 0 4]) -> 4", "(last [1 8 1 2]) -> 2", "(last [6]) -> 6", "(last [1 7 9 2 8]) -> 8", "(last [1 7 3]) -> 3", "(last [8 4 8]) -> 8", "(last [1 3 2 5 5]) -> 5", "(last [3 4]) -> 4", "(last [2 1 0 0 3]) -> 3", "(last [4 7 3]) -> 3", "(last [6 0 7 6]) -> 6", "(last [8 3]) -> 3", "(last [1 0 1]) -> 1", "(last [5 2 1 5 7]) -> 7", "(last [8 2 8]) -> 8", "(last [4]) -> 4", "(last [4]) -> 4", "(last [8]) -> 8", "(last [3 6 8 3 5]) -> 5", "(last [9 5]) -> 5", "(last [1 8 2 7]) -> 7", "(last [7]) -> 7", "(last [7 0]) -> 0", "(last [6]) -> 6", "(last [9 6 2 0]) -> 0", "(last [0 6 2 0 2]) -> 2", "(last [8 7 6 3 5]) -> 5", "(last [3]) -> 3", "(last [0 2 1 6]) -> 6", "(last [3 9 7 9]) -> 9", "(last [4 3 7 3]) -> 3"], "time": 0.039771}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2 6]) -> 6", "(last [5 2 9]) -> 9", "(last [3 9 7 2 8]) -> 8", "(last [8 4 9 5 0]) -> 0", "(last [1]) -> 1", "(last [9 7 3 9]) -> 9", "(last [0 1 5 2]) -> 2", "(last [1 6 8 7]) -> 7", "(last [2 6 0]) -> 0", "(last [6 9 2 3]) -> 3", "(last [4 6 9 9 8]) -> 8", "(last [6 6 6]) -> 6", "(last [0 9]) -> 9", "(last [6 7 5 4 3]) -> 3", "(last [4]) -> 4", "(last [7 9 9 7 2]) -> 2", "(last [3 6 8]) -> 8", "(last [6 1]) -> 1", "(last [9 2 5 6]) -> 6", "(last [5]) -> 5", "(last [6 6 8 6]) -> 6", "(last [5 6 3]) -> 3", "(last [2]) -> 2", "(last [6 7]) -> 7", "(last [2 0 5 7]) -> 7", "(last [6 6]) -> 6", "(last [7]) -> 7", "(last [7 9]) -> 9", "(last [0 8 1 7]) -> 7", "(last [0 3]) -> 3", "(last [9 9 0 9 1]) -> 1", "(last [8 3 3 7 0]) -> 0", "(last [3 2 6 9]) -> 9", "(last [3 8]) -> 8", "(last [9 3]) -> 3", "(last [6 1 4 7 6]) -> 6", "(last [1 0 3 0 3]) -> 3", "(last [1 4]) -> 4", "(last [9 6 3]) -> 3", "(last [8]) -> 8", "(last [6 1 0 7 8]) -> 8", "(last [6 5 3 3 5]) -> 5", "(last [4 1 2]) -> 2", "(last [0 4 7]) -> 7", "(last [8 4 2 3 1]) -> 1", "(last [4 5]) -> 5", "(last [1 0 7]) -> 7", "(last [3 3 7 7 4]) -> 4", "(last [5 1 9 1]) -> 1"], "time": 0.029393}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8 6 2 8 4]) -> 4", "(last [3 1 2 6 0]) -> 0", "(last [9 6 2 0 6]) -> 6", "(last [5 2]) -> 2", "(last [5 8 5 4 9]) -> 9", "(last [3 1 9]) -> 9", "(last [6 9 0]) -> 0", "(last [7 8 6 7]) -> 7", "(last [4 6 5]) -> 5", "(last [0 8 5]) -> 5", "(last [4 6 2 5]) -> 5", "(last [7 1 3]) -> 3", "(last [3 6 3]) -> 3", "(last [0]) -> 0", "(last [3 1 3]) -> 3", "(last [8 1]) -> 1", "(last [5 8 8 0]) -> 0", "(last [1 6 1]) -> 1", "(last [9 3 0 4]) -> 4", "(last [1 7]) -> 7", "(last [8 3]) -> 3", "(last [1 8]) -> 8", "(last [4]) -> 4", "(last [0 4 7]) -> 7", "(last [7 2 7 2 2]) -> 2", "(last [9 7 5 2 3]) -> 3", "(last [2 2 7 1]) -> 1", "(last [0 1 7 9]) -> 9", "(last [1]) -> 1", "(last [3 4 7]) -> 7", "(last [0]) -> 0", "(last [4 0 1]) -> 1", "(last [5]) -> 5", "(last [5 7]) -> 7", "(last [0 8 2 5 8]) -> 8", "(last [7]) -> 7", "(last [8 0 6 3 2]) -> 2", "(last [3 9 2]) -> 2", "(last [5]) -> 5", "(last [6]) -> 6", "(last [7]) -> 7", "(last [5 0]) -> 0", "(last [8 2 0]) -> 0", "(last [3 5]) -> 5", "(last [2 2 6]) -> 6", "(last [7 0 9]) -> 9", "(last [6]) -> 6", "(last [8]) -> 8", "(last [6 4 7]) -> 7"], "time": 0.037088}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1]) -> 1", "(last [1 0 1 2]) -> 2", "(last [1 4 7 9 0]) -> 0", "(last [3 8]) -> 8", "(last [0 7 2 9]) -> 9", "(last [9 8 7]) -> 7", "(last [1 6 0 4]) -> 4", "(last [2 8]) -> 8", "(last [8 3 1 5 1]) -> 1", "(last [6 3 7 3]) -> 3", "(last [7]) -> 7", "(last [6]) -> 6", "(last [8 7 3]) -> 3", "(last [4 0 0 5 8]) -> 8", "(last [1 9 6 9 5]) -> 5", "(last [2 1]) -> 1", "(last [8 8 2 7 6]) -> 6", "(last [7 2 3 1 2]) -> 2", "(last [8 0]) -> 0", "(last [2 9 8 1 5]) -> 5", "(last [5 6 0 5]) -> 5", "(last [9 5 5 7 2]) -> 2", "(last [4 0 3 0]) -> 0", "(last [0]) -> 0", "(last [4 3 1]) -> 1", "(last [4 0]) -> 0", "(last [4 1 7 1 5]) -> 5", "(last [0 3 0 0 4]) -> 4", "(last [4 7 6 6 8]) -> 8", "(last [5 2]) -> 2", "(last [8]) -> 8", "(last [7 5 4 0 6]) -> 6", "(last [4 9]) -> 9", "(last [6 1 0 9]) -> 9", "(last [2]) -> 2", "(last [8 1 6 6]) -> 6", "(last [4]) -> 4", "(last [1 5 2 2 6]) -> 6", "(last [1]) -> 1", "(last [3 3]) -> 3", "(last [5]) -> 5", "(last [7]) -> 7", "(last [1 1 1 2]) -> 2", "(last [5 6 2 3 3]) -> 3", "(last [5]) -> 5", "(last [4]) -> 4", "(last [3 2 1]) -> 1", "(last [3]) -> 3", "(last [3 0 6]) -> 6"], "time": 0.049966}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9 9 8 7]) -> 7", "(last [1 9 2]) -> 2", "(last [9 6 5 0 4]) -> 4", "(last [3 9 8 5]) -> 5", "(last [0 8 0]) -> 0", "(last [8 9 0 1 9]) -> 9", "(last [0 8 9 4 6]) -> 6", "(last [9]) -> 9", "(last [2]) -> 2", "(last [4 4 7]) -> 7", "(last [0 5 7 2]) -> 2", "(last [3 9 6 4]) -> 4", "(last [8]) -> 8", "(last [5 8 0 9 4]) -> 4", "(last [1 3 3]) -> 3", "(last [1 5 8]) -> 8", "(last [1 1 2]) -> 2", "(last [2 3 0]) -> 0", "(last [3 6]) -> 6", "(last [3 5 0]) -> 0", "(last [2 6 6 2]) -> 2", "(last [6 9 2 5 8]) -> 8", "(last [4 4 3]) -> 3", "(last [4 8 3 0]) -> 0", "(last [5 5 3 6 5]) -> 5", "(last [1 5 2 7 8]) -> 8", "(last [5 5]) -> 5", "(last [5 9]) -> 9", "(last [7 5 7 4 7]) -> 7", "(last [6 3 2 5]) -> 5", "(last [3 2]) -> 2", "(last [2 8 6]) -> 6", "(last [2]) -> 2", "(last [4 9 4 6 3]) -> 3", "(last [2 6 9 1]) -> 1", "(last [3 2]) -> 2", "(last [0 4 4]) -> 4", "(last [3]) -> 3", "(last [0 5 6 8]) -> 8", "(last [6 8 5 2]) -> 2", "(last [4 0]) -> 0", "(last [0 9 6 4]) -> 4", "(last [5 0 8 7]) -> 7", "(last [4]) -> 4", "(last [2 3 3 7 1]) -> 1", "(last [8]) -> 8", "(last [3 1 2]) -> 2", "(last [0]) -> 0", "(last [6]) -> 6"], "time": 0.030396}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0 2]) -> 2", "(last [2 3 0]) -> 0", "(last [9 4 3]) -> 3", "(last [9 0]) -> 0", "(last [2 3 1 4]) -> 4", "(last [6 9]) -> 9", "(last [1 0]) -> 0", "(last [1 6 6 4]) -> 4", "(last [1]) -> 1", "(last [8 2]) -> 2", "(last [0 4 4]) -> 4", "(last [5 4]) -> 4", "(last [4 5 7 1]) -> 1", "(last [5]) -> 5", "(last [8 6 5 3]) -> 3", "(last [7 3 2]) -> 2", "(last [9 4]) -> 4", "(last [2 5 1 0 5]) -> 5", "(last [1 1]) -> 1", "(last [3 7 6 0 0]) -> 0", "(last [2 2]) -> 2", "(last [6 8]) -> 8", "(last [3 3]) -> 3", "(last [3]) -> 3", "(last [9 3 8 6]) -> 6", "(last [3]) -> 3", "(last [6 4 7 2]) -> 2", "(last [9]) -> 9", "(last [8 5]) -> 5", "(last [4 5]) -> 5", "(last [6 3 9]) -> 9", "(last [9]) -> 9", "(last [8 6 0]) -> 0", "(last [1]) -> 1", "(last [0 8 4]) -> 4", "(last [1]) -> 1", "(last [3 8 9 4]) -> 4", "(last [7 4 3]) -> 3", "(last [3 8 9]) -> 9", "(last [0 7 3 1]) -> 1", "(last [8 7 7]) -> 7", "(last [0 9 0]) -> 0", "(last [7 6 0 2 1]) -> 1", "(last [4 7 1 3 6]) -> 6", "(last [4 2 3]) -> 3", "(last [1 0]) -> 0", "(last [8]) -> 8", "(last [9 6 3]) -> 3", "(last [7]) -> 7"], "time": 0.030427}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1]) -> 1", "(last [5 9 7]) -> 7", "(last [5 7 9]) -> 9", "(last [2 4]) -> 4", "(last [8 0 0 7]) -> 7", "(last [7 9]) -> 9", "(last [8 6 6]) -> 6", "(last [1 4]) -> 4", "(last [9 3]) -> 3", "(last [6]) -> 6", "(last [2 8]) -> 8", "(last [6]) -> 6", "(last [6]) -> 6", "(last [2]) -> 2", "(last [4 2 4 1 3]) -> 3", "(last [6 6]) -> 6", "(last [9]) -> 9", "(last [0 2]) -> 2", "(last [9 4 4]) -> 4", "(last [4 7 1 0 2]) -> 2", "(last [9 4 1 0]) -> 0", "(last [7 4 3 7 4]) -> 4", "(last [7 0]) -> 0", "(last [2 5 7 7 6]) -> 6", "(last [3]) -> 3", "(last [6 3 5 7 5]) -> 5", "(last [1 7 5 7]) -> 7", "(last [4]) -> 4", "(last [2 5 1 1 9]) -> 9", "(last [4 7 4]) -> 4", "(last [1 5 1 8]) -> 8", "(last [6 0 6 5 8]) -> 8", "(last [3 9 3 7]) -> 7", "(last [1 5 6]) -> 6", "(last [8 4 1 4]) -> 4", "(last [4 7]) -> 7", "(last [4 3 8]) -> 8", "(last [2 0 8]) -> 8", "(last [4 7 7 3 4]) -> 4", "(last [9]) -> 9", "(last [2 6 9 6 6]) -> 6", "(last [8 2 0 9 2]) -> 2", "(last [8 8 3 2 7]) -> 7", "(last [8 8 1 5]) -> 5", "(last [1]) -> 1", "(last [0 7]) -> 7", "(last [1 9]) -> 9", "(last [2 6 4]) -> 4", "(last [8 7]) -> 7"], "time": 0.040096}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1 3 1 7 2]) -> 2", "(last [1 5 2 0 3]) -> 3", "(last [1 6 9 3 7]) -> 7", "(last [0]) -> 0", "(last [0 3 6]) -> 6", "(last [9 7 3 5]) -> 5", "(last [0 9]) -> 9", "(last [8 6 9 3]) -> 3", "(last [6 3 5 6]) -> 6", "(last [1 4]) -> 4", "(last [5 6]) -> 6", "(last [2 4]) -> 4", "(last [1 6]) -> 6", "(last [9 5 5 7 6]) -> 6", "(last [2 3 6]) -> 6", "(last [8 2 3 2]) -> 2", "(last [2 3 7 7 1]) -> 1", "(last [7 0 5 2]) -> 2", "(last [1 4]) -> 4", "(last [5 0 1]) -> 1", "(last [0]) -> 0", "(last [3 8 3 0 3]) -> 3", "(last [8 2 1 4 7]) -> 7", "(last [2 6 0 1]) -> 1", "(last [2 3]) -> 3", "(last [3]) -> 3", "(last [1 6 8 6]) -> 6", "(last [8 0]) -> 0", "(last [1 2]) -> 2", "(last [2 6]) -> 6", "(last [1]) -> 1", "(last [0 1]) -> 1", "(last [4 3 3]) -> 3", "(last [5 3 3 1]) -> 1", "(last [9 7 6 6 5]) -> 5", "(last [4]) -> 4", "(last [3]) -> 3", "(last [4 2]) -> 2", "(last [7 7 7 8]) -> 8", "(last [4 6 2 1]) -> 1", "(last [5 4 6 7 0]) -> 0", "(last [3 7 3 2 7]) -> 7", "(last [6 4 5 5]) -> 5", "(last [8 4 6]) -> 6", "(last [5 9 5 2]) -> 2", "(last [5 9]) -> 9", "(last [4 3 5 8 1]) -> 1", "(last [2 9 9]) -> 9", "(last [5 8]) -> 8"], "time": 0.034065}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1 5]) -> 5", "(last [3]) -> 3", "(last [8 4 6]) -> 6", "(last [6 2 9]) -> 9", "(last [8 1]) -> 1", "(last [2 4 0 2]) -> 2", "(last [5]) -> 5", "(last [6 4 8]) -> 8", "(last [0 1 3 1 9]) -> 9", "(last [6 1 7 1 7]) -> 7", "(last [6 7 5]) -> 5", "(last [2 4 6]) -> 6", "(last [3 5 3]) -> 3", "(last [8 5 9 7 7]) -> 7", "(last [6 5 9]) -> 9", "(last [1 8 8 2]) -> 2", "(last [0 2 1 1 7]) -> 7", "(last [8 0 1 1 6]) -> 6", "(last [5 1]) -> 1", "(last [1 0]) -> 0", "(last [6 8 9 0]) -> 0", "(last [8 1 8 0 0]) -> 0", "(last [0 1 8 6]) -> 6", "(last [5]) -> 5", "(last [3 2 0 9]) -> 9", "(last [5]) -> 5", "(last [6]) -> 6", "(last [8 1 0]) -> 0", "(last [1 3]) -> 3", "(last [4 8 9 7 0]) -> 0", "(last [5 6]) -> 6", "(last [8 8 0]) -> 0", "(last [8 9 7]) -> 7", "(last [1]) -> 1", "(last [2 6]) -> 6", "(last [7 1]) -> 1", "(last [5 1 4 1]) -> 1", "(last [6 4 0 2 5]) -> 5", "(last [0 6 2 9 8]) -> 8", "(last [7 3 9 6]) -> 6", "(last [0 9 0]) -> 0", "(last [7 3 5]) -> 5", "(last [0]) -> 0", "(last [0 6 0]) -> 0", "(last [6 8]) -> 8", "(last [0 0 4 0]) -> 0", "(last [3 1 3 1 4]) -> 4", "(last [9 9 9 0]) -> 0", "(last [6 2 1 4]) -> 4"], "time": 0.030204}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 0]) -> 0", "(last [3 3]) -> 3", "(last [1 6 1 1 3]) -> 3", "(last [0]) -> 0", "(last [8 3 8]) -> 8", "(last [2 1 0 9]) -> 9", "(last [8 0 3]) -> 3", "(last [1]) -> 1", "(last [5 1 3]) -> 3", "(last [9]) -> 9", "(last [4 3 8 5]) -> 5", "(last [5 9 7]) -> 7", "(last [3 2 1 4 2]) -> 2", "(last [0]) -> 0", "(last [8 1 1]) -> 1", "(last [6]) -> 6", "(last [0 1]) -> 1", "(last [6 1]) -> 1", "(last [8 7 1 6]) -> 6", "(last [4 5 0 0 2]) -> 2", "(last [7 5 8]) -> 8", "(last [3 4 1 9 3]) -> 3", "(last [2 8 5 7 9]) -> 9", "(last [9]) -> 9", "(last [8 8 4 5]) -> 5", "(last [1 1 6 9 7]) -> 7", "(last [3 7 4]) -> 4", "(last [2 5 5 0 1]) -> 1", "(last [5 5 8]) -> 8", "(last [9]) -> 9", "(last [8 7]) -> 7", "(last [5 7 2 1]) -> 1", "(last [9 1]) -> 1", "(last [5]) -> 5", "(last [8 1 2 4]) -> 4", "(last [4 5 7 8]) -> 8", "(last [4 7 7 9 2]) -> 2", "(last [0 8 9 5]) -> 5", "(last [8 3 5 7 2]) -> 2", "(last [6 0]) -> 0", "(last [1]) -> 1", "(last [7 2 1]) -> 1", "(last [0 9 4 6]) -> 6", "(last [0]) -> 0", "(last [6 8]) -> 8", "(last [5]) -> 5", "(last [7]) -> 7", "(last [8 4 2 0]) -> 0", "(last [0 6 8]) -> 8"], "time": 0.031018}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1]) -> 1", "(last [8 3 5]) -> 5", "(last [7 1 5 5]) -> 5", "(last [9 2 5 2 5]) -> 5", "(last [6 0 1 9 6]) -> 6", "(last [8]) -> 8", "(last [5 6]) -> 6", "(last [4 8 4 2]) -> 2", "(last [7 9 3 9]) -> 9", "(last [4 5]) -> 5", "(last [4]) -> 4", "(last [8 2]) -> 2", "(last [9]) -> 9", "(last [2 4]) -> 4", "(last [2]) -> 2", "(last [3 1]) -> 1", "(last [9 3 5]) -> 5", "(last [6 3 4]) -> 4", "(last [9 9]) -> 9", "(last [6 0 6 0 9]) -> 9", "(last [1 2]) -> 2", "(last [9 6 7 0]) -> 0", "(last [5 1]) -> 1", "(last [5 4]) -> 4", "(last [1]) -> 1", "(last [3 9]) -> 9", "(last [6 2 7 2]) -> 2", "(last [4 1 0 4]) -> 4", "(last [8 6]) -> 6", "(last [8]) -> 8", "(last [1 9 8 7]) -> 7", "(last [4 5]) -> 5", "(last [6 4 1]) -> 1", "(last [6 3]) -> 3", "(last [2 9]) -> 9", "(last [7 1 8 9]) -> 9", "(last [3 0 7]) -> 7", "(last [9 1]) -> 1", "(last [2 0 1 3 9]) -> 9", "(last [0]) -> 0", "(last [4 4]) -> 4", "(last [3]) -> 3", "(last [7 7 9]) -> 9", "(last [4 8 9 9 2]) -> 2", "(last [1 1 3 0 8]) -> 8", "(last [4 7]) -> 7", "(last [3 0 5]) -> 5", "(last [2]) -> 2", "(last [6 1 4]) -> 4"], "time": 0.048846}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 4 5 4 2]) -> 2", "(last [4]) -> 4", "(last [5]) -> 5", "(last [0 5 9]) -> 9", "(last [0]) -> 0", "(last [8 0 3]) -> 3", "(last [6 0 4 5 8]) -> 8", "(last [2 6 3]) -> 3", "(last [9]) -> 9", "(last [0 1 8 8]) -> 8", "(last [2 3]) -> 3", "(last [4 2]) -> 2", "(last [6 1 2 1]) -> 1", "(last [4 9]) -> 9", "(last [1]) -> 1", "(last [9 1 1]) -> 1", "(last [9 4]) -> 4", "(last [9 0]) -> 0", "(last [8 2 6 7]) -> 7", "(last [3 2 7 2]) -> 2", "(last [4 0 9 9]) -> 9", "(last [3 8]) -> 8", "(last [1 1 9 0 8]) -> 8", "(last [4]) -> 4", "(last [6]) -> 6", "(last [3 5]) -> 5", "(last [4 4]) -> 4", "(last [8 8 9]) -> 9", "(last [2]) -> 2", "(last [3 8 0 3 4]) -> 4", "(last [4 4 7 4]) -> 4", "(last [5 4]) -> 4", "(last [7 5]) -> 5", "(last [3 7 1 9 7]) -> 7", "(last [3 8]) -> 8", "(last [1 5 3 5 1]) -> 1", "(last [3 1]) -> 1", "(last [8]) -> 8", "(last [8 9]) -> 9", "(last [9 3]) -> 3", "(last [1 1 0 7]) -> 7", "(last [1 3 8]) -> 8", "(last [3 3 0]) -> 0", "(last [2 3 8 9]) -> 9", "(last [4 5]) -> 5", "(last [7 7 0 0 4]) -> 4", "(last [5 3 6 5]) -> 5", "(last [5 0 9 0]) -> 0", "(last [3 0]) -> 0"], "time": 0.028598}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0 7 7 2 3]) -> 3", "(last [1]) -> 1", "(last [8 3 5 6 6]) -> 6", "(last [7 7]) -> 7", "(last [6 7 9 9]) -> 9", "(last [2 0 6]) -> 6", "(last [1 0 2 0]) -> 0", "(last [9]) -> 9", "(last [4 8 2 5]) -> 5", "(last [5]) -> 5", "(last [5 7 8 8 2]) -> 2", "(last [7 7 4 9 8]) -> 8", "(last [1 7 0]) -> 0", "(last [5 2]) -> 2", "(last [8 8 8 4 5]) -> 5", "(last [8]) -> 8", "(last [8 0]) -> 0", "(last [1 2 8 7 0]) -> 0", "(last [1]) -> 1", "(last [0 3 3 8]) -> 8", "(last [2 5 2 5]) -> 5", "(last [3 7 9 7 3]) -> 3", "(last [3 7 8 6]) -> 6", "(last [9]) -> 9", "(last [0 8]) -> 8", "(last [6 8]) -> 8", "(last [8 0 9 6]) -> 6", "(last [8]) -> 8", "(last [1]) -> 1", "(last [0 4 4]) -> 4", "(last [6]) -> 6", "(last [6 8]) -> 8", "(last [5 6]) -> 6", "(last [1 1 8 3]) -> 3", "(last [0 0 9 8 0]) -> 0", "(last [5 1]) -> 1", "(last [3 3 9]) -> 9", "(last [5 2 7 2]) -> 2", "(last [7]) -> 7", "(last [2 3 7]) -> 7", "(last [2]) -> 2", "(last [3]) -> 3", "(last [0 7]) -> 7", "(last [9]) -> 9", "(last [5]) -> 5", "(last [4]) -> 4", "(last [3 1 0 3 3]) -> 3", "(last [1]) -> 1", "(last [1 7]) -> 7"], "time": 0.043441}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 8 1]) -> 1", "(last [9 8 9 2]) -> 2", "(last [4 0 8 0]) -> 0", "(last [8 4]) -> 4", "(last [4 2]) -> 2", "(last [6]) -> 6", "(last [9 1 7 4]) -> 4", "(last [7 1 1]) -> 1", "(last [0 3 0]) -> 0", "(last [4 8 7]) -> 7", "(last [2 6 4]) -> 4", "(last [3 1 8 5 9]) -> 9", "(last [4 5 8 3]) -> 3", "(last [0 5 3 4]) -> 4", "(last [1 3]) -> 3", "(last [7]) -> 7", "(last [0 4 3 4 3]) -> 3", "(last [6]) -> 6", "(last [3 2 8 2]) -> 2", "(last [9 2 1 6 5]) -> 5", "(last [4 3 8]) -> 8", "(last [8 6 7 4 6]) -> 6", "(last [8 5 6 9 2]) -> 2", "(last [0 0 8]) -> 8", "(last [6 4 5 1 0]) -> 0", "(last [2]) -> 2", "(last [2]) -> 2", "(last [4]) -> 4", "(last [9 5 6]) -> 6", "(last [3 6 0 2 2]) -> 2", "(last [3]) -> 3", "(last [9]) -> 9", "(last [2 8 9 3]) -> 3", "(last [8]) -> 8", "(last [5]) -> 5", "(last [1 1 8 9]) -> 9", "(last [6 5 3 4]) -> 4", "(last [9 5 8 8 7]) -> 7", "(last [6 5]) -> 5", "(last [2 2 8 0]) -> 0", "(last [2 9 3 5 8]) -> 8", "(last [0 1 2 2 1]) -> 1", "(last [8 3]) -> 3", "(last [6 4]) -> 4", "(last [0 5 5 9 0]) -> 0", "(last [8 6 2]) -> 2", "(last [4 0 8]) -> 8", "(last [6]) -> 6", "(last [7 4 5 3 5]) -> 5"], "time": 0.030603}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 4 5]) -> 5", "(last [7]) -> 7", "(last [8 2 4]) -> 4", "(last [1 4]) -> 4", "(last [4]) -> 4", "(last [2 3 3 4 4]) -> 4", "(last [1 2]) -> 2", "(last [0]) -> 0", "(last [4 9 9 1]) -> 1", "(last [3 8 5]) -> 5", "(last [7 3 3 2 6]) -> 6", "(last [4 3 5 3]) -> 3", "(last [7 1 2 2]) -> 2", "(last [4 6 5 6 0]) -> 0", "(last [0 9 0 5]) -> 5", "(last [9 0 2 7]) -> 7", "(last [6 5]) -> 5", "(last [1 6 1]) -> 1", "(last [4]) -> 4", "(last [9 3 6 9]) -> 9", "(last [5]) -> 5", "(last [9 8 3 4 0]) -> 0", "(last [5 9]) -> 9", "(last [0 4 8 0]) -> 0", "(last [7 4]) -> 4", "(last [9 8 5 7 5]) -> 5", "(last [5 3 1 7]) -> 7", "(last [6 5 0 7]) -> 7", "(last [5 6]) -> 6", "(last [1]) -> 1", "(last [5 5 7 8]) -> 8", "(last [1 5 8]) -> 8", "(last [1 5 5 6]) -> 6", "(last [7]) -> 7", "(last [5 9]) -> 9", "(last [5 4]) -> 4", "(last [1 4]) -> 4", "(last [2]) -> 2", "(last [7 7]) -> 7", "(last [4 3 0 3 7]) -> 7", "(last [4 5 7 4]) -> 4", "(last [5 2 4 0 8]) -> 8", "(last [6 4 4 1]) -> 1", "(last [8 5 7 4]) -> 4", "(last [8 1]) -> 1", "(last [3 0 5 7 2]) -> 2", "(last [1 1 1 3 3]) -> 3", "(last [1]) -> 1", "(last [8 0]) -> 0"], "time": 0.038452}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0 7 8]) -> 8", "(last [8 1 7]) -> 7", "(last [4]) -> 4", "(last [7 5 9 4]) -> 4", "(last [3 0 1]) -> 1", "(last [4]) -> 4", "(last [2 7 5 6 3]) -> 3", "(last [9 3 7 4]) -> 4", "(last [9 6 6 5 4]) -> 4", "(last [6 3 3]) -> 3", "(last [6 0 2 5 2]) -> 2", "(last [1 4 6 2 9]) -> 9", "(last [7 2 0 2 1]) -> 1", "(last [0 5]) -> 5", "(last [6 6 2 1 7]) -> 7", "(last [9 0 8 1]) -> 1", "(last [8]) -> 8", "(last [0]) -> 0", "(last [2 2 0]) -> 0", "(last [3 9 6 6]) -> 6", "(last [1 7 3 2 3]) -> 3", "(last [0]) -> 0", "(last [7 9]) -> 9", "(last [4 0 9 2]) -> 2", "(last [4 3]) -> 3", "(last [7 8]) -> 8", "(last [5 9 4 4 6]) -> 6", "(last [6 5]) -> 5", "(last [7 6 2 4 9]) -> 9", "(last [8 3 7 4]) -> 4", "(last [7]) -> 7", "(last [0 0 8 0 8]) -> 8", "(last [7 8]) -> 8", "(last [2 8 4 0]) -> 0", "(last [4 7 0 6 4]) -> 4", "(last [9 0]) -> 0", "(last [1 5]) -> 5", "(last [5 3 5 5 8]) -> 8", "(last [6 1]) -> 1", "(last [4 2 4 9 1]) -> 1", "(last [1 1 9 1]) -> 1", "(last [0 5]) -> 5", "(last [8 7]) -> 7", "(last [0 3 3]) -> 3", "(last [9 1]) -> 1", "(last [6 6]) -> 6", "(last [2 2 5 1]) -> 1", "(last [1 5 9 3]) -> 3", "(last [9]) -> 9"], "time": 0.038154}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1 3 9]) -> 9", "(last [6 2 5 2]) -> 2", "(last [3]) -> 3", "(last [0 8 0]) -> 0", "(last [3 3 5 7 9]) -> 9", "(last [0 7 8]) -> 8", "(last [1 9 9 4 8]) -> 8", "(last [8 6 9]) -> 9", "(last [6 8]) -> 8", "(last [5 1 1 6 5]) -> 5", "(last [3 1 4 1 9]) -> 9", "(last [5]) -> 5", "(last [5 7 2 6 8]) -> 8", "(last [5 2 0 2 6]) -> 6", "(last [8 3 2]) -> 2", "(last [1 6 2 2 4]) -> 4", "(last [9 6 1 5 9]) -> 9", "(last [4 8]) -> 8", "(last [9 3 8 3]) -> 3", "(last [1 3 1 2]) -> 2", "(last [9 5 9]) -> 9", "(last [1 8 3 9]) -> 9", "(last [4 6 3 9 8]) -> 8", "(last [8 9 1 1]) -> 1", "(last [8 5 0]) -> 0", "(last [1]) -> 1", "(last [3 3 8 2]) -> 2", "(last [4 4 4 4]) -> 4", "(last [3]) -> 3", "(last [2 0 1 3]) -> 3", "(last [4 3 5 0]) -> 0", "(last [2 2]) -> 2", "(last [5 8]) -> 8", "(last [9]) -> 9", "(last [6 9 5]) -> 5", "(last [0 1 0 2 3]) -> 3", "(last [6 2]) -> 2", "(last [5 2]) -> 2", "(last [8 6 8 0 0]) -> 0", "(last [3]) -> 3", "(last [1 7 3]) -> 3", "(last [3 9 3]) -> 3", "(last [0 6 8]) -> 8", "(last [8 3 4]) -> 4", "(last [9 5 0 7]) -> 7", "(last [8 6 4 1 7]) -> 7", "(last [6 8 4 0 1]) -> 1", "(last [4 1 0 7]) -> 7", "(last [0]) -> 0"], "time": 0.028397}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [3 3 2]) -> 2", "(last [0 4 2 0 4]) -> 4", "(last [6]) -> 6", "(last [8 4 4 9]) -> 9", "(last [2 5 3]) -> 3", "(last [8]) -> 8", "(last [0 6]) -> 6", "(last [9 1 9]) -> 9", "(last [9 0 6 5]) -> 5", "(last [6 1 8 0]) -> 0", "(last [8 3]) -> 3", "(last [9 8]) -> 8", "(last [1 0 4 0 0]) -> 0", "(last [1 2]) -> 2", "(last [4 3 4]) -> 4", "(last [2 6 2 6 0]) -> 0", "(last [4]) -> 4", "(last [3]) -> 3", "(last [7 3]) -> 3", "(last [5 3]) -> 3", "(last [0 7 9]) -> 9", "(last [9 5]) -> 5", "(last [8]) -> 8", "(last [9 8 0 2]) -> 2", "(last [2 0 0]) -> 0", "(last [9 1 9]) -> 9", "(last [5]) -> 5", "(last [7]) -> 7", "(last [2]) -> 2", "(last [3 7 0 0]) -> 0", "(last [8 7]) -> 7", "(last [4]) -> 4", "(last [5 4 8 4 1]) -> 1", "(last [4 2 4]) -> 4", "(last [6 4]) -> 4", "(last [4 8 2]) -> 2", "(last [8 1 9 1]) -> 1", "(last [4 0]) -> 0", "(last [2 3 0]) -> 0", "(last [3 0]) -> 0", "(last [5 6 3 1]) -> 1", "(last [0 3]) -> 3", "(last [6 2]) -> 2", "(last [0 6 8 2 6]) -> 6", "(last [6 1 4 7 4]) -> 4", "(last [5 9 2 8]) -> 8", "(last [2 3 3 8]) -> 8", "(last [9 5 1 9 2]) -> 2", "(last [3]) -> 3"], "time": 0.028023}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [3]) -> 3", "(last [3]) -> 3", "(last [4 3]) -> 3", "(last [8 2 0 9 7]) -> 7", "(last [9 9 5]) -> 5", "(last [8 4 3 4 0]) -> 0", "(last [0 3 6 3 6]) -> 6", "(last [0 6]) -> 6", "(last [8 9 6 8 0]) -> 0", "(last [4 5 2 8 7]) -> 7", "(last [6 9 8 3]) -> 3", "(last [8 3 6]) -> 6", "(last [9 9]) -> 9", "(last [9 3 9 9]) -> 9", "(last [4 1 2 7]) -> 7", "(last [3 7 3 8 7]) -> 7", "(last [4 0 5 7]) -> 7", "(last [3 5 8]) -> 8", "(last [1 4 6 9]) -> 9", "(last [3]) -> 3", "(last [3]) -> 3", "(last [5 1 3 4]) -> 4", "(last [4]) -> 4", "(last [0 9 5 2]) -> 2", "(last [9]) -> 9", "(last [4 2 9 4 5]) -> 5", "(last [5 9]) -> 9", "(last [1 9 4]) -> 4", "(last [4]) -> 4", "(last [5 0]) -> 0", "(last [3 6 3]) -> 3", "(last [9]) -> 9", "(last [3 1 4 6 9]) -> 9", "(last [8 1 4 9 5]) -> 5", "(last [6 4]) -> 4", "(last [7]) -> 7", "(last [2 9 7 8 0]) -> 0", "(last [4 6 9]) -> 9", "(last [5 2]) -> 2", "(last [9]) -> 9", "(last [1]) -> 1", "(last [9 3]) -> 3", "(last [1 6 9 5]) -> 5", "(last [6]) -> 6", "(last [9 1 9 9]) -> 9", "(last [6 1 4 6]) -> 6", "(last [6 6 5 8]) -> 8", "(last [6 2 2 6 4]) -> 4", "(last [7 0 5 2 1]) -> 1"], "time": 0.028473}
