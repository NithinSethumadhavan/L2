{"time": 0.169737, "name": "flattenl", "examples": ["(flattenl {[9 2 3] {[0 2]} {[4 5 1]}}) -> [9 2 3 0 2 4 5 1]", "(flattenl {[] {[6 6]}}) -> [6 6]", "(flattenl {[3 6 8 7 2] {[5 0 1]}}) -> [3 6 8 7 2 5 0 1]", "(flattenl {[6 4]}) -> [6 4]", "(flattenl {[] {[8 1]}}) -> [8 1]", "(flattenl {[9 7 8]}) -> [9 7 8]", "(flattenl {}) -> []", "(flattenl {[6 1 7 4] {[1 1 6 5] {[5 2 9 6] {[8 5]} {[]}}}}) -> [6 1 7 4 1 1 6 5 5 2 9 6 8 5]", "(flattenl {[6 9 9 8 5]}) -> [6 9 9 8 5]", "(flattenl {[] {[4]}}) -> [4]", "(flattenl {[5]}) -> [5]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.172748, "name": "flattenl", "examples": ["(flattenl {[4 7 7 0 0] {[4 8 7]}}) -> [4 7 7 0 0 4 8 7]", "(flattenl {[6] {[8 0 7] {[]} {[6 7]}}}) -> [6 8 0 7 6 7]", "(flattenl {}) -> []", "(flattenl {[8]}) -> [8]", "(flattenl {[1]}) -> [1]", "(flattenl {}) -> []", "(flattenl {[3 5]}) -> [3 5]", "(flattenl {[4 4 7]}) -> [4 4 7]", "(flattenl {[] {[6 8 7] {[3] {[7 7]}} {[5] {[6 2 0 3]} {[3 9 2]}}}}) -> [6 8 7 3 7 7 5 6 2 0 3 3 9 2]", "(flattenl {[7 0]}) -> [7 0]", "(flattenl {[6 3 3]}) -> [6 3 3]", "(flattenl {[1 9 9 8 3] {[4 8 8]}}) -> [1 9 9 8 3 4 8 8]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.176879, "name": "flattenl", "examples": ["(flattenl {[0 8 5 4 7] {[] {[8 0]}}}) -> [0 8 5 4 7 8 0]", "(flattenl {[]}) -> []", "(flattenl {[4 2 6] {[]} {[] {[6 8 5 7 1]} {[6 4 1]}}}) -> [4 2 6 6 8 5 7 1 6 4 1]", "(flattenl {[3 0 1] {[2 9 9]}}) -> [3 0 1 2 9 9]", "(flattenl {[9 6 3]}) -> [9 6 3]", "(flattenl {[5 6 2] {[8 3 7 7]}}) -> [5 6 2 8 3 7 7]", "(flattenl {}) -> []", "(flattenl {[0 4]}) -> [0 4]", "(flattenl {[]}) -> []", "(flattenl {[] {[]}}) -> []", "(flattenl {}) -> []", "(flattenl {[] {[7 9 8 6 9]} {[8] {[] {[5 4 7]}}}}) -> [7 9 8 6 9 8 5 4 7]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.177223, "name": "flattenl", "examples": ["(flattenl {[2 4 7 9 2] {[6 0 3 7 3] {[5 3 9 0 9] {[3 5 1 2]} {[2 5 3 8 2]}} {[] {[6 4]} {[4 8]}}}}) -> [2 4 7 9 2 6 0 3 7 3 5 3 9 0 9 3 5 1 2 2 5 3 8 2 6 4 4 8]", "(flattenl {}) -> []", "(flattenl {[9 6 8 8] {[2 1 7] {[]}} {[6 7 9 2 8] {[1 6 3 6 4]}}}) -> [9 6 8 8 2 1 7 6 7 9 2 8 1 6 3 6 4]", "(flattenl {[8 4 8] {[2 9 2 6 7] {[1] {[6 6 7]} {[]}} {[3 6 6 2]}}}) -> [8 4 8 2 9 2 6 7 1 6 6 7 3 6 6 2]", "(flattenl {[]}) -> []", "(flattenl {[5] {[5 0 0 0 2]} {[4 9]}}) -> [5 5 0 0 0 2 4 9]", "(flattenl {[5 1 9 5 9] {[3 3]} {[]}}) -> [5 1 9 5 9 3 3]", "(flattenl {[1]}) -> [1]", "(flattenl {[6 2 4 9] {[7 9 0] {[6 2] {[2 7 7]} {[9 1 5 4]}} {[4 0 9] {[2]} {[9]}}}}) -> [6 2 4 9 7 9 0 6 2 2 7 7 9 1 5 4 4 0 9 2 9]", "(flattenl {[0 4 6 5] {[6] {[] {[4 3 5 7]} {[6 5]}} {[9 8 4 5] {[9 0 7 1]}}}}) -> [0 4 6 5 6 4 3 5 7 6 5 9 8 4 5 9 0 7 1]", "(flattenl {[2 1 1 2 4] {[9 3 4 7 1]}}) -> [2 1 1 2 4 9 3 4 7 1]", "(flattenl {[4 8 9 6] {[7 9 1 3] {[7 0 8] {[2 0 9]}} {[] {[1 6]}}} {[0 1 2 7 9] {[9 7 0 4 1] {[9]}} {[]}}}) -> [4 8 9 6 7 9 1 3 7 0 8 2 0 9 1 6 0 1 2 7 9 9 7 0 4 1 9]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.108632, "name": "flattenl", "examples": ["(flattenl {[9] {[0 6 3] {[0 2 6 4 7]} {[1]}}}) -> [9 0 6 3 0 2 6 4 7 1]", "(flattenl {[1 3] {[9 5 7 6]}}) -> [1 3 9 5 7 6]", "(flattenl {[3 8] {[2 5 6 1 8] {[5 0]}} {[7 6 8] {[5 8]} {[0 6]}}}) -> [3 8 2 5 6 1 8 5 0 7 6 8 5 8 0 6]", "(flattenl {}) -> []", "(flattenl {[7 0] {[8 8 2 3]} {[3]}}) -> [7 0 8 8 2 3 3]", "(flattenl {}) -> []", "(flattenl {[0] {[8] {[0 8 5 6 1] {[8 4]}} {[9 5 0] {[2 7 7 3 4]} {[]}}}}) -> [0 8 0 8 5 6 1 8 4 9 5 0 2 7 7 3 4]", "(flattenl {[5 3 6 3 2]}) -> [5 3 6 3 2]", "(flattenl {[1 0 7 6] {[1 1 0 7 5]}}) -> [1 0 7 6 1 1 0 7 5]", "(flattenl {[1 0 7 0 4]}) -> [1 0 7 0 4]", "(flattenl {[9 0 4] {[3 7]} {[6]}}) -> [9 0 4 3 7 6]", "(flattenl {[6 8 3 9]}) -> [6 8 3 9]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.17947, "name": "flattenl", "examples": ["(flattenl {[9 9]}) -> [9 9]", "(flattenl {[4 7 1 9] {[6 2 7] {[3 4]}}}) -> [4 7 1 9 6 2 7 3 4]", "(flattenl {[7 1 1]}) -> [7 1 1]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[1 8 0 1]}) -> [1 8 0 1]", "(flattenl {[9 1 2]}) -> [9 1 2]", "(flattenl {[4 7]}) -> [4 7]", "(flattenl {[3 7 1 0] {[9 6 9]}}) -> [3 7 1 0 9 6 9]", "(flattenl {[2 2 2 5]}) -> [2 2 2 5]", "(flattenl {[0]}) -> [0]", "(flattenl {[8 2 3 2] {[8 4 2] {[8 5 0 6 6] {[0 4 8]} {[4 5]}} {[3 3 3 5] {[]} {[4]}}}}) -> [8 2 3 2 8 4 2 8 5 0 6 6 0 4 8 4 5 3 3 3 5 4]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.164609, "name": "flattenl", "examples": ["(flattenl {[8 9 2 3] {[]} {[9 9 8 1 6] {[2 6 9 8 7]} {[6 6 0 3]}}}) -> [8 9 2 3 9 9 8 1 6 2 6 9 8 7 6 6 0 3]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[9 7 7 8 6] {[3 4 3 4 7]}}) -> [9 7 7 8 6 3 4 3 4 7]", "(flattenl {[7 0 3 8] {[6]} {[3 3 8 9 0]}}) -> [7 0 3 8 6 3 3 8 9 0]", "(flattenl {[4 1 8 1 5] {[8 2 6 5 7]} {[1 1 5 0 7]}}) -> [4 1 8 1 5 8 2 6 5 7 1 1 5 0 7]", "(flattenl {[8 6 0 0 9] {[0 5 1 2 6]} {[3]}}) -> [8 6 0 0 9 0 5 1 2 6 3]", "(flattenl {[3 9 5]}) -> [3 9 5]", "(flattenl {[] {[0]}}) -> [0]", "(flattenl {[6 9 9] {[5 9]}}) -> [6 9 9 5 9]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.186034, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[5] {[7] {[] {[4 0 2]} {[0]}}} {[7 4 9] {[2 9 7 8] {[]}} {[]}}}) -> [5 7 4 0 2 0 7 4 9 2 9 7 8]", "(flattenl {[8 5] {[4]} {[4 5 8 4 6] {[1 6 9 0]}}}) -> [8 5 4 4 5 8 4 6 1 6 9 0]", "(flattenl {[8 2 1 4 3] {[6 6] {[0 2 6 0 5] {[5 0]}}}}) -> [8 2 1 4 3 6 6 0 2 6 0 5 5 0]", "(flattenl {[1 4 2 8] {[8 7 7 9 8]} {[5 5 8 6 5]}}) -> [1 4 2 8 8 7 7 9 8 5 5 8 6 5]", "(flattenl {[6]}) -> [6]", "(flattenl {[2] {[9] {[7 9 8 6]} {[]}} {[9 5 3 7 5] {[0 1 3 7 8]} {[0]}}}) -> [2 9 7 9 8 6 9 5 3 7 5 0 1 3 7 8 0]", "(flattenl {[7 8] {[7 6 8]} {[7 2]}}) -> [7 8 7 6 8 7 2]", "(flattenl {[9 2 3]}) -> [9 2 3]", "(flattenl {}) -> []", "(flattenl {[4] {[3 4 3 1] {[4]} {[9 4 5 8 4]}}}) -> [4 3 4 3 1 4 9 4 5 8 4]", "(flattenl {[3 4 1]}) -> [3 4 1]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.13124, "name": "flattenl", "examples": ["(flattenl {[5 1 2 4] {[6 8]}}) -> [5 1 2 4 6 8]", "(flattenl {}) -> []", "(flattenl {[7 8 0 4] {[6 0 2]} {[2 6]}}) -> [7 8 0 4 6 0 2 2 6]", "(flattenl {[8 4]}) -> [8 4]", "(flattenl {[1 1 5 0 0] {[6 3 6 2] {[3 4 5 0]}} {[] {[5] {[3 2 0 4 8]}} {[5 8 7 3 1] {[]}}}}) -> [1 1 5 0 0 6 3 6 2 3 4 5 0 5 3 2 0 4 8 5 8 7 3 1]", "(flattenl {[9 0]}) -> [9 0]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[2 3]}) -> [2 3]", "(flattenl {[] {[] {[5]}} {[] {[]} {[5 3 0]}}}) -> [5 5 3 0]", "(flattenl {[0 3 2 0 9] {[] {[6 5]}}}) -> [0 3 2 0 9 6 5]", "(flattenl {[4 0 6 9 9] {[3 8]} {[4 0 6 8] {[8 6 2 8 3] {[4 6]} {[0 6]}} {[8 7 8]}}}) -> [4 0 6 9 9 3 8 4 0 6 8 8 6 2 8 3 4 6 0 6 8 7 8]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.171438, "name": "flattenl", "examples": ["(flattenl {[] {[8 4 2 1 8]}}) -> [8 4 2 1 8]", "(flattenl {}) -> []", "(flattenl {[3 7] {[3 0 6 1 5] {[]} {[1 5 8 6 1]}}}) -> [3 7 3 0 6 1 5 1 5 8 6 1]", "(flattenl {[7 2] {[3]} {[9]}}) -> [7 2 3 9]", "(flattenl {[4 2 0 3 9]}) -> [4 2 0 3 9]", "(flattenl {[7 7 4 8 2]}) -> [7 7 4 8 2]", "(flattenl {[]}) -> []", "(flattenl {[4 6]}) -> [4 6]", "(flattenl {[4 6 0] {[6 8 2 6]}}) -> [4 6 0 6 8 2 6]", "(flattenl {}) -> []", "(flattenl {[3 2 1 8]}) -> [3 2 1 8]", "(flattenl {[] {[5 5 4]} {[4 5 1]}}) -> [5 5 4 4 5 1]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.144563, "name": "flattenl", "examples": ["(flattenl {[2] {[8 0 9 4]}}) -> [2 8 0 9 4]", "(flattenl {[3 0 8]}) -> [3 0 8]", "(flattenl {[9] {[5 9 3 0 9] {[5 7 9]} {[2 6]}}}) -> [9 5 9 3 0 9 5 7 9 2 6]", "(flattenl {}) -> []", "(flattenl {[0 6 5] {[6 9] {[] {[2 2 3]}} {[7 1 1 1]}}}) -> [0 6 5 6 9 2 2 3 7 1 1 1]", "(flattenl {}) -> []", "(flattenl {[9 2 4 5] {[] {[6]}} {[5 3 4] {[]} {[0 8 5] {[3]} {[4]}}}}) -> [9 2 4 5 6 5 3 4 0 8 5 3 4]", "(flattenl {}) -> []", "(flattenl {[6 2 0 6] {[4 6 8 8]} {[5 7]}}) -> [6 2 0 6 4 6 8 8 5 7]", "(flattenl {[7 6 4] {[]}}) -> [7 6 4]", "(flattenl {[1 9]}) -> [1 9]", "(flattenl {[] {[3 9 8 0 7] {[4 4 2 7]}}}) -> [3 9 8 0 7 4 4 2 7]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.131688, "name": "flattenl", "examples": ["(flattenl {[8 1 8] {[]}}) -> [8 1 8]", "(flattenl {[4 4 4] {[7]} {[1 9 0 9 5]}}) -> [4 4 4 7 1 9 0 9 5]", "(flattenl {[6 7 8 7] {[0 9 8 0] {[8 6 1]}}}) -> [6 7 8 7 0 9 8 0 8 6 1]", "(flattenl {[9 2]}) -> [9 2]", "(flattenl {[6 2]}) -> [6 2]", "(flattenl {}) -> []", "(flattenl {[3 4 9]}) -> [3 4 9]", "(flattenl {[3 8 7 9 8] {[2 0 6 5]} {[6 9 4 6 4]}}) -> [3 8 7 9 8 2 0 6 5 6 9 4 6 4]", "(flattenl {[8 0]}) -> [8 0]", "(flattenl {[7 4] {[]}}) -> [7 4]", "(flattenl {[6] {[0 1 7 9 2]} {[]}}) -> [6 0 1 7 9 2]", "(flattenl {[8] {[8 6 6 7]} {[1 5 2 1 4]}}) -> [8 8 6 6 7 1 5 2 1 4]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.123086, "name": "flattenl", "examples": ["(flattenl {[5 8 8 5] {[] {[3 2 8]}} {[4 4 4 4]}}) -> [5 8 8 5 3 2 8 4 4 4 4]", "(flattenl {[0]}) -> [0]", "(flattenl {[9 7 9] {[] {[]}}}) -> [9 7 9]", "(flattenl {[8 2 3] {[2 2 5]}}) -> [8 2 3 2 2 5]", "(flattenl {[9]}) -> [9]", "(flattenl {[0 4 2] {[9 3 7] {[]} {[3 0 5]}} {[7 8 4 2 0]}}) -> [0 4 2 9 3 7 3 0 5 7 8 4 2 0]", "(flattenl {[9 9 0 2] {[5 8 6]}}) -> [9 9 0 2 5 8 6]", "(flattenl {}) -> []", "(flattenl {[] {[9 2 9] {[5 3 9 5]} {[5 4 4] {[]}}} {[8]}}) -> [9 2 9 5 3 9 5 5 4 4 8]", "(flattenl {[9 1 4 6 7]}) -> [9 1 4 6 7]", "(flattenl {[2 9 7 4 6]}) -> [2 9 7 4 6]", "(flattenl {[2 3 5]}) -> [2 3 5]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.175707, "name": "flattenl", "examples": ["(flattenl {[7 1] {[9 1 0] {[4 0 7 3]}} {[2 6 1 2] {[8 0 3 0 0]} {[]}}}) -> [7 1 9 1 0 4 0 7 3 2 6 1 2 8 0 3 0 0]", "(flattenl {[] {[1 6 5 7 9]} {[7 8 0]}}) -> [1 6 5 7 9 7 8 0]", "(flattenl {[1 4]}) -> [1 4]", "(flattenl {[6 6] {[3]} {[]}}) -> [6 6 3]", "(flattenl {[] {[7 7 2] {[8 3 3 3]} {[6 9]}} {[4] {[3 4 0 0 5]} {[1]}}}) -> [7 7 2 8 3 3 3 6 9 4 3 4 0 0 5 1]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[7 1 4 3 9] {[4 6 2 0] {[]}} {[4] {[8 2 2] {[4 0 1 4]}}}}) -> [7 1 4 3 9 4 6 2 0 4 8 2 2 4 0 1 4]", "(flattenl {[3 2 9 2 4] {[8 0 7]} {[9 9 7 5]}}) -> [3 2 9 2 4 8 0 7 9 9 7 5]", "(flattenl {[1 1 4 7]}) -> [1 1 4 7]", "(flattenl {}) -> []", "(flattenl {[2 3 2 1] {[4 0 4]}}) -> [2 3 2 1 4 0 4]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.155409, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[] {[]}}}) -> []", "(flattenl {[9 9 6 2 8] {[4 5 7 2 9] {[3 9 7 9 2]} {[] {[6]} {[]}}} {[9 1 1 3] {[5 1 7 9] {[6]}}}}) -> [9 9 6 2 8 4 5 7 2 9 3 9 7 9 2 6 9 1 1 3 5 1 7 9 6]", "(flattenl {[] {[5 4 4] {[7]}}}) -> [5 4 4 7]", "(flattenl {[5 5 9 9 6] {[5 6]} {[] {[] {[9 0 3 4]} {[6 1 4 8]}} {[4] {[3 5 9 8 9]} {[1 3 3]}}}}) -> [5 5 9 9 6 5 6 9 0 3 4 6 1 4 8 4 3 5 9 8 9 1 3 3]", "(flattenl {[] {[3 9 8 6 9] {[]} {[3 7 3 7 3]}} {[8] {[1 1 3 8 5]} {[8 6 3 1]}}}) -> [3 9 8 6 9 3 7 3 7 3 8 1 1 3 8 5 8 6 3 1]", "(flattenl {[3 4]}) -> [3 4]", "(flattenl {}) -> []", "(flattenl {[7 0 8 4]}) -> [7 0 8 4]", "(flattenl {[7 0 9] {[6 0 7 6 3] {[8 1 8 9] {[7 2 4]} {[7 0 3 1 8]}}}}) -> [7 0 9 6 0 7 6 3 8 1 8 9 7 2 4 7 0 3 1 8]", "(flattenl {}) -> []", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.187764, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[1] {[1 4 4 3 4]} {[6] {[6 4]}}}) -> [1 1 4 4 3 4 6 6 4]", "(flattenl {}) -> []", "(flattenl {[8 5 8 3 3]}) -> [8 5 8 3 3]", "(flattenl {[8 7 3 9] {[] {[0 1] {[8 2]} {[3]}} {[5 2 8] {[0 4 1 0]} {[1 9 2]}}} {[7 7 3 4 1] {[2]} {[1 1] {[]} {[8 8 6 9]}}}}) -> [8 7 3 9 0 1 8 2 3 5 2 8 0 4 1 0 1 9 2 7 7 3 4 1 2 1 1 8 8 6 9]", "(flattenl {[] {[0 2] {[3 9 5 8]}}}) -> [0 2 3 9 5 8]", "(flattenl {}) -> []", "(flattenl {[] {[0 6 8 2 8] {[6 4] {[4 1]} {[6 1 7 9 1]}}} {[7]}}) -> [0 6 8 2 8 6 4 4 1 6 1 7 9 1 7]", "(flattenl {[]}) -> []", "(flattenl {[8]}) -> [8]", "(flattenl {[4 7 8] {[2 9 7 6]}}) -> [4 7 8 2 9 7 6]", "(flattenl {[1 5] {[6 0 6 9]} {[] {[9 9]} {[4 0] {[4 0 8 4 7]}}}}) -> [1 5 6 0 6 9 9 9 4 0 4 0 8 4 7]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.093008, "name": "flattenl", "examples": ["(flattenl {[7 0 5 2 9] {[0 8 0 3 2]}}) -> [7 0 5 2 9 0 8 0 3 2]", "(flattenl {[0 9 0 6] {[0 9 0 1]}}) -> [0 9 0 6 0 9 0 1]", "(flattenl {}) -> []", "(flattenl {[] {[]}}) -> []", "(flattenl {[]}) -> []", "(flattenl {[1 3 7]}) -> [1 3 7]", "(flattenl {[] {[8 5 9 4 4]}}) -> [8 5 9 4 4]", "(flattenl {[] {[]} {[5 8 5]}}) -> [5 8 5]", "(flattenl {}) -> []", "(flattenl {[2 4 7 6] {[8 5 3 7 5] {[]} {[4 6 3 3]}} {[7 7 4 1] {[0 6 8 2]}}}) -> [2 4 7 6 8 5 3 7 5 4 6 3 3 7 7 4 1 0 6 8 2]", "(flattenl {[]}) -> []", "(flattenl {[] {[7 6 4 0] {[0 2 0 3 9] {[6 6 7 9 3]} {[6 8 2 1 3]}} {[2 5 8]}} {[4 4 4 2] {[1]} {[7 7 2 7 1] {[7]}}}}) -> [7 6 4 0 0 2 0 3 9 6 6 7 9 3 6 8 2 1 3 2 5 8 4 4 4 2 1 7 7 2 7 1 7]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.170851, "name": "flattenl", "examples": ["(flattenl {[7 6]}) -> [7 6]", "(flattenl {}) -> []", "(flattenl {[0 5] {[3 2 5 0 4] {[5 0] {[]}}}}) -> [0 5 3 2 5 0 4 5 0]", "(flattenl {[7]}) -> [7]", "(flattenl {[6] {[1 9]}}) -> [6 1 9]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[0 1]}) -> [0 1]", "(flattenl {[3 6 0 4] {[8 4 1 4] {[7 7 1 4 3] {[3 7]}} {[2 0 9 0] {[5 7]} {[2 7 6]}}}}) -> [3 6 0 4 8 4 1 4 7 7 1 4 3 3 7 2 0 9 0 5 7 2 7 6]", "(flattenl {[4 3 3 0 2] {[6 4] {[6 2 1 7 1]} {[3 1 0 6 6]}}}) -> [4 3 3 0 2 6 4 6 2 1 7 1 3 1 0 6 6]", "(flattenl {[7 7 5 6]}) -> [7 7 5 6]", "(flattenl {[0 9 2]}) -> [0 9 2]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.148141, "name": "flattenl", "examples": ["(flattenl {[0 5 5 4] {[6 3 6] {[7 8 1 9 1]} {[5 9 4]}}}) -> [0 5 5 4 6 3 6 7 8 1 9 1 5 9 4]", "(flattenl {}) -> []", "(flattenl {[7 9 3 8]}) -> [7 9 3 8]", "(flattenl {}) -> []", "(flattenl {[8 3] {[9 7 0 5]}}) -> [8 3 9 7 0 5]", "(flattenl {[] {[9 5 7 3]} {[9 6]}}) -> [9 5 7 3 9 6]", "(flattenl {[4 5]}) -> [4 5]", "(flattenl {[3 3 6 6]}) -> [3 3 6 6]", "(flattenl {[8 6 8 9] {[0 3 8 4]} {[4 8]}}) -> [8 6 8 9 0 3 8 4 4 8]", "(flattenl {[] {[2 4 9 6] {[6 5 5 3 0]} {[9 0 9 0 6]}}}) -> [2 4 9 6 6 5 5 3 0 9 0 9 0 6]", "(flattenl {[3 4 6 1]}) -> [3 4 6 1]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.168264, "name": "flattenl", "examples": ["(flattenl {[8 9]}) -> [8 9]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[] {[0 2 4 4]}}) -> [0 2 4 4]", "(flattenl {[5 6] {[3 4 4]}}) -> [5 6 3 4 4]", "(flattenl {[] {[0 8 8 3] {[4 6 5 1 3]}} {[4 6]}}) -> [0 8 8 3 4 6 5 1 3 4 6]", "(flattenl {}) -> []", "(flattenl {[5 5 5 3] {[1 2]}}) -> [5 5 5 3 1 2]", "(flattenl {[3 0 2 7] {[7 9 1 1]}}) -> [3 0 2 7 7 9 1 1]", "(flattenl {[9 2] {[4]}}) -> [9 2 4]", "(flattenl {[] {[9 3] {[8] {[4]} {[0 1 0 8]}}}}) -> [9 3 8 4 0 1 0 8]", "(flattenl {[]}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.132812, "name": "flattenl", "examples": ["(flattenl {[5 3 3 2] {[7 0 2]}}) -> [5 3 3 2 7 0 2]", "(flattenl {[6 7 8 7 7] {[8 1 2]} {[9 6 5]}}) -> [6 7 8 7 7 8 1 2 9 6 5]", "(flattenl {[9 0] {[4 1]}}) -> [9 0 4 1]", "(flattenl {[] {[0 0]}}) -> [0 0]", "(flattenl {[3 6] {[]}}) -> [3 6]", "(flattenl {[4 2] {[1 7]}}) -> [4 2 1 7]", "(flattenl {[6 2 1] {[4 1 9 0 2] {[4 7 2 6]} {[3 8 3 0]}} {[4 8] {[4]}}}) -> [6 2 1 4 1 9 0 2 4 7 2 6 3 8 3 0 4 8 4]", "(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {[0 7 5 8 0]}) -> [0 7 5 8 0]", "(flattenl {[2]}) -> [2]", "(flattenl {[9 8]}) -> [9 8]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.147934, "name": "flattenl", "examples": ["(flattenl {[6] {[3 7 8]}}) -> [6 3 7 8]", "(flattenl {[] {[]}}) -> []", "(flattenl {[3 5 2 0] {[9 6 5 6]} {[6 4] {[3 3] {[5]}}}}) -> [3 5 2 0 9 6 5 6 6 4 3 3 5]", "(flattenl {[8 3 8 9 5]}) -> [8 3 8 9 5]", "(flattenl {[6 1 7 8 8]}) -> [6 1 7 8 8]", "(flattenl {[0]}) -> [0]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[5 4]}) -> [5 4]", "(flattenl {[0 2 4 8 9]}) -> [0 2 4 8 9]", "(flattenl {[]}) -> []", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.119946, "name": "flattenl", "examples": ["(flattenl {[1] {[0 6 1 4 7] {[9 8 3 0] {[7 2 8 3 1]}}} {[5 6] {[6] {[7 5 3]} {[7 3 2 5 8]}} {[] {[2]} {[5 6 4 1]}}}}) -> [1 0 6 1 4 7 9 8 3 0 7 2 8 3 1 5 6 6 7 5 3 7 3 2 5 8 2 5 6 4 1]", "(flattenl {[] {[0 3 2 5]}}) -> [0 3 2 5]", "(flattenl {[] {[1 5 7]}}) -> [1 5 7]", "(flattenl {[7 9 5] {[6 2 2] {[6 1]}}}) -> [7 9 5 6 2 2 6 1]", "(flattenl {[3 8 7 9 4]}) -> [3 8 7 9 4]", "(flattenl {[] {[2 7 5 4 7] {[] {[1 1 6 6]} {[4 7]}}} {[5 6 9 9] {[4 1 3] {[7 8]} {[9 1 1]}} {[6]}}}) -> [2 7 5 4 7 1 1 6 6 4 7 5 6 9 9 4 1 3 7 8 9 1 1 6]", "(flattenl {[] {[9]}}) -> [9]", "(flattenl {}) -> []", "(flattenl {[3] {[6 8]} {[]}}) -> [3 6 8]", "(flattenl {}) -> []", "(flattenl {[2 8]}) -> [2 8]", "(flattenl {[2 4 6 8 0]}) -> [2 4 6 8 0]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.155127, "name": "flattenl", "examples": ["(flattenl {[3] {[3 7 0 5 0] {[0 4 0 8 3]}}}) -> [3 3 7 0 5 0 0 4 0 8 3]", "(flattenl {[4] {[] {[]}} {[6 8 0]}}) -> [4 6 8 0]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[0 9]}) -> [0 9]", "(flattenl {}) -> []", "(flattenl {[] {[3 9] {[8 4 7 7 9]} {[1 1]}} {[]}}) -> [3 9 8 4 7 7 9 1 1]", "(flattenl {[5 4 6 9 5]}) -> [5 4 6 9 5]", "(flattenl {}) -> []", "(flattenl {[7 4]}) -> [7 4]", "(flattenl {}) -> []", "(flattenl {[2 4]}) -> [2 4]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.153244, "name": "flattenl", "examples": ["(flattenl {[3 8]}) -> [3 8]", "(flattenl {[3 9]}) -> [3 9]", "(flattenl {[3 3 6]}) -> [3 3 6]", "(flattenl {[]}) -> []", "(flattenl {[1 9 0 0 5] {[4 4 9] {[9 5 2 9]} {[6 7 5 8]}}}) -> [1 9 0 0 5 4 4 9 9 5 2 9 6 7 5 8]", "(flattenl {[6 4 8 7]}) -> [6 4 8 7]", "(flattenl {[1 6 1 5 0] {[7 6 9] {[6 1 6 6 9]}}}) -> [1 6 1 5 0 7 6 9 6 1 6 6 9]", "(flattenl {[5 0] {[] {[8 4 4 9 9]}}}) -> [5 0 8 4 4 9 9]", "(flattenl {}) -> []", "(flattenl {[0]}) -> [0]", "(flattenl {[5] {[0]}}) -> [5 0]", "(flattenl {[5 4 5 8]}) -> [5 4 5 8]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.140995, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[1] {[]} {[5 3 9 2 7]}}}) -> [1 5 3 9 2 7]", "(flattenl {[5 4] {[8 5 4 4 8] {[9 3 0 1]} {[] {[7 0 7 4]} {[1 6 4 5 4]}}} {[6 5]}}) -> [5 4 8 5 4 4 8 9 3 0 1 7 0 7 4 1 6 4 5 4 6 5]", "(flattenl {[6 3 8 0]}) -> [6 3 8 0]", "(flattenl {[4] {[8 6 0 5] {[4 0] {[5 4 5 9 8]} {[]}}}}) -> [4 8 6 0 5 4 0 5 4 5 9 8]", "(flattenl {[] {[4 1 1] {[]} {[2 5]}}}) -> [4 1 1 2 5]", "(flattenl {[8] {[0 5 9]}}) -> [8 0 5 9]", "(flattenl {[1 2]}) -> [1 2]", "(flattenl {}) -> []", "(flattenl {[1] {[4 5 7 3]}}) -> [1 4 5 7 3]", "(flattenl {[]}) -> []", "(flattenl {[9]}) -> [9]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.153583, "name": "flattenl", "examples": ["(flattenl {[1]}) -> [1]", "(flattenl {}) -> []", "(flattenl {[0 4] {[] {[8]}} {[0 7]}}) -> [0 4 8 0 7]", "(flattenl {[7 6 5 5 3]}) -> [7 6 5 5 3]", "(flattenl {[7] {[8 0 5] {[]} {[5 9 9]}} {[0 3 0 4] {[1 1 7]}}}) -> [7 8 0 5 5 9 9 0 3 0 4 1 1 7]", "(flattenl {}) -> []", "(flattenl {[0 9 2 2] {[3 0] {[9 0 6 0] {[9 4 4 2]}} {[5 8 0]}}}) -> [0 9 2 2 3 0 9 0 6 0 9 4 4 2 5 8 0]", "(flattenl {[0] {[] {[2 3 4 2]} {[] {[8]}}}}) -> [0 2 3 4 2 8]", "(flattenl {[4 5 6 7 1] {[9 4 0] {[]}} {[7]}}) -> [4 5 6 7 1 9 4 0 7]", "(flattenl {[] {[2] {[8] {[2 5]} {[4 0 6 0]}} {[6 7 5 5 9] {[]}}} {[]}}) -> [2 8 2 5 4 0 6 0 6 7 5 5 9]", "(flattenl {[0 6 4 6 2] {[9 4]} {[5]}}) -> [0 6 4 6 2 9 4 5]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.163627, "name": "flattenl", "examples": ["(flattenl {[] {[7 7 3 4 4]}}) -> [7 7 3 4 4]", "(flattenl {}) -> []", "(flattenl {[1 3] {[0 1 6] {[0 1 5]}}}) -> [1 3 0 1 6 0 1 5]", "(flattenl {}) -> []", "(flattenl {[3 2 9 3 5] {[8 4] {[8 7 0 3] {[6 0 5]}}} {[7] {[8]} {[9 3] {[2 7 0 5]} {[0 9]}}}}) -> [3 2 9 3 5 8 4 8 7 0 3 6 0 5 7 8 9 3 2 7 0 5 0 9]", "(flattenl {}) -> []", "(flattenl {[] {[0 9 0]}}) -> [0 9 0]", "(flattenl {[4 6] {[0]}}) -> [4 6 0]", "(flattenl {[] {[5] {[2 7] {[6 0]} {[]}}} {[4]}}) -> [5 2 7 6 0 4]", "(flattenl {[7 4 0 7 2]}) -> [7 4 0 7 2]", "(flattenl {[9 5 7]}) -> [9 5 7]", "(flattenl {[3 7 5 0] {[3 6 7 9] {[0 4 6] {[4 6 9 3 6]}} {[4 5 7 3] {[2 4]}}} {[9 6] {[3 9 6] {[6 5]}} {[6 9 7 0] {[]}}}}) -> [3 7 5 0 3 6 7 9 0 4 6 4 6 9 3 6 4 5 7 3 2 4 9 6 3 9 6 6 5 6 9 7 0]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.154005, "name": "flattenl", "examples": ["(flattenl {[9 6 9 9 7] {[9 6]}}) -> [9 6 9 9 7 9 6]", "(flattenl {[9 6 5 9 8] {[5 2 3 7 6] {[7 9 4 3]} {[2 1 8]}} {[4 4 2] {[]} {[4]}}}) -> [9 6 5 9 8 5 2 3 7 6 7 9 4 3 2 1 8 4 4 2 4]", "(flattenl {[] {[8 8]} {[7 1] {[0 9 5 7 3] {[6 8 8 8]} {[0 8 9 1 8]}} {[]}}}) -> [8 8 7 1 0 9 5 7 3 6 8 8 8 0 8 9 1 8]", "(flattenl {}) -> []", "(flattenl {[2 7]}) -> [2 7]", "(flattenl {}) -> []", "(flattenl {[1 9 9 1 4]}) -> [1 9 9 1 4]", "(flattenl {[]}) -> []", "(flattenl {}) -> []", "(flattenl {[8 5 7 4 1] {[]}}) -> [8 5 7 4 1]", "(flattenl {[4]}) -> [4]", "(flattenl {[9 5 8 1] {[7 8]}}) -> [9 5 8 1 7 8]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.148133, "name": "flattenl", "examples": ["(flattenl {[7 0 3 7 9] {[0 3]} {[0 7 5]}}) -> [7 0 3 7 9 0 3 0 7 5]", "(flattenl {[4 7 6 3 5]}) -> [4 7 6 3 5]", "(flattenl {[]}) -> []", "(flattenl {[5 0 1 2 2] {[7 8 1]} {[1 9 5 1]}}) -> [5 0 1 2 2 7 8 1 1 9 5 1]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[1 9 9 4] {[5 1]}}) -> [1 9 9 4 5 1]", "(flattenl {[7 9]}) -> [7 9]", "(flattenl {[]}) -> []", "(flattenl {}) -> []", "(flattenl {[6]}) -> [6]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.146064, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[0 6 6] {[0 1 4 1 8] {[2 3 7]}}}) -> [0 6 6 0 1 4 1 8 2 3 7]", "(flattenl {[] {[9 5 3 0]}}) -> [9 5 3 0]", "(flattenl {[8 4 0 9] {[8 1 6 9] {[5]}}}) -> [8 4 0 9 8 1 6 9 5]", "(flattenl {[9 7] {[4 1]} {[4 2]}}) -> [9 7 4 1 4 2]", "(flattenl {[6 6 2 0 0] {[] {[7 9 4 7 8] {[1 0 4]} {[5 1 6 4]}}} {[7 0] {[2 9] {[9]} {[]}} {[0]}}}) -> [6 6 2 0 0 7 9 4 7 8 1 0 4 5 1 6 4 7 0 2 9 9 0]", "(flattenl {[1 9 8 6 9] {[1 7 8 2]} {[0]}}) -> [1 9 8 6 9 1 7 8 2 0]", "(flattenl {}) -> []", "(flattenl {[1] {[6 1 0 7] {[]}}}) -> [1 6 1 0 7]", "(flattenl {}) -> []", "(flattenl {[8 1] {[8] {[6]}} {[3 5] {[9 2] {[7 4 6 8 4]} {[7 9 1]}}}}) -> [8 1 8 6 3 5 9 2 7 4 6 8 4 7 9 1]", "(flattenl {[6 4]}) -> [6 4]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.158522, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[7]}) -> [7]", "(flattenl {[4] {[4]}}) -> [4 4]", "(flattenl {[3 5 8 4 4]}) -> [3 5 8 4 4]", "(flattenl {}) -> []", "(flattenl {[3]}) -> [3]", "(flattenl {[2 5] {[] {[9 3 5]} {[4 6 2 9] {[3 1]}}} {[3 2 4 0 0]}}) -> [2 5 9 3 5 4 6 2 9 3 1 3 2 4 0 0]", "(flattenl {[0]}) -> [0]", "(flattenl {[6 6 7] {[3 6]}}) -> [6 6 7 3 6]", "(flattenl {[6] {[3 0]} {[7 6] {[0 5 8 7] {[]}}}}) -> [6 3 0 7 6 0 5 8 7]", "(flattenl {}) -> []", "(flattenl {[0 1 8] {[4 1 9]}}) -> [0 1 8 4 1 9]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.140989, "name": "flattenl", "examples": ["(flattenl {[1 7 4] {[0] {[8 8 4]}}}) -> [1 7 4 0 8 8 4]", "(flattenl {}) -> []", "(flattenl {[1 6 2] {[7 4] {[2 4]}}}) -> [1 6 2 7 4 2 4]", "(flattenl {}) -> []", "(flattenl {[5 4] {[4 8]}}) -> [5 4 4 8]", "(flattenl {[4 5 2 1 9]}) -> [4 5 2 1 9]", "(flattenl {[]}) -> []", "(flattenl {[6]}) -> [6]", "(flattenl {[2 1] {[5 4 7 9 6]}}) -> [2 1 5 4 7 9 6]", "(flattenl {[8 5 6] {[] {[6 6 7 9] {[4]}} {[1 2] {[0 2 9]} {[7 6 6 0]}}} {[0 3 5 1 6] {[7] {[8 6 8 6]}} {[8 9]}}}) -> [8 5 6 6 6 7 9 4 1 2 0 2 9 7 6 6 0 0 3 5 1 6 7 8 6 8 6 8 9]", "(flattenl {[4 8 6 6]}) -> [4 8 6 6]", "(flattenl {[5] {[9 9 7 8 7]}}) -> [5 9 9 7 8 7]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.130258, "name": "flattenl", "examples": ["(flattenl {[9 6 4] {[] {[3 5] {[8 7]} {[5 0 4]}}}}) -> [9 6 4 3 5 8 7 5 0 4]", "(flattenl {[] {[3 0 2] {[8 3 0 7]} {[0 9 7]}} {[2 1] {[5]}}}) -> [3 0 2 8 3 0 7 0 9 7 2 1 5]", "(flattenl {}) -> []", "(flattenl {[4 4 5 4 2] {[2 3] {[2 4]} {[5 9]}}}) -> [4 4 5 4 2 2 3 2 4 5 9]", "(flattenl {[8]}) -> [8]", "(flattenl {[9 1 1 9 2]}) -> [9 1 1 9 2]", "(flattenl {[8 2 5] {[2 1 4]}}) -> [8 2 5 2 1 4]", "(flattenl {[9]}) -> [9]", "(flattenl {[2 9 2 2] {[] {[6]} {[6 7 5]}}}) -> [2 9 2 2 6 6 7 5]", "(flattenl {[6 2] {[2 1 0 2 3] {[7 6]} {[2 1]}} {[6 9 4 3] {[6]}}}) -> [6 2 2 1 0 2 3 7 6 2 1 6 9 4 3 6]", "(flattenl {[] {[5]} {[]}}) -> [5]", "(flattenl {[] {[9 2] {[7 2]} {[3 0 6]}}}) -> [9 2 7 2 3 0 6]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.132271, "name": "flattenl", "examples": ["(flattenl {[0] {[4] {[0 0]}} {[7]}}) -> [0 4 0 0 7]", "(flattenl {}) -> []", "(flattenl {[6 1] {[9] {[6 3 5 7]}}}) -> [6 1 9 6 3 5 7]", "(flattenl {[9] {[0 2]} {[4 2 0]}}) -> [9 0 2 4 2 0]", "(flattenl {[1 4 0 4] {[]} {[1 4 8 7]}}) -> [1 4 0 4 1 4 8 7]", "(flattenl {}) -> []", "(flattenl {[] {[1 1 2 6]}}) -> [1 1 2 6]", "(flattenl {[3]}) -> [3]", "(flattenl {[1 8 5] {[]}}) -> [1 8 5]", "(flattenl {[8 6 9] {[5 7 2] {[7] {[6 9 1]}} {[3 6]}} {[2 5 7 8 6] {[9] {[7 9 8]}} {[1 4 1 2]}}}) -> [8 6 9 5 7 2 7 6 9 1 3 6 2 5 7 8 6 9 7 9 8 1 4 1 2]", "(flattenl {}) -> []", "(flattenl {[6 1] {[4]} {[2]}}) -> [6 1 4 2]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.143659, "name": "flattenl", "examples": ["(flattenl {[] {[0 1 6 6 3]} {[3 9]}}) -> [0 1 6 6 3 3 9]", "(flattenl {}) -> []", "(flattenl {[5]}) -> [5]", "(flattenl {}) -> []", "(flattenl {[3 4 4] {[1 8 6]}}) -> [3 4 4 1 8 6]", "(flattenl {[1 9]}) -> [1 9]", "(flattenl {[2 2 0 5 9] {[9 5 4 8]} {[]}}) -> [2 2 0 5 9 9 5 4 8]", "(flattenl {[]}) -> []", "(flattenl {[2 1]}) -> [2 1]", "(flattenl {[4] {[0 3 0 1] {[3 9 3 2] {[2 2]}} {[8 1 2]}} {[5 9 0 4 0] {[8 0]} {[1 9 7] {[7 5 4]}}}}) -> [4 0 3 0 1 3 9 3 2 2 2 8 1 2 5 9 0 4 0 8 0 1 9 7 7 5 4]", "(flattenl {[]}) -> []", "(flattenl {[1 7 7 2]}) -> [1 7 7 2]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.142396, "name": "flattenl", "examples": ["(flattenl {[]}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[0 5]}) -> [0 5]", "(flattenl {[] {[9 4 1 6 8]}}) -> [9 4 1 6 8]", "(flattenl {[] {[2]}}) -> [2]", "(flattenl {}) -> []", "(flattenl {[4 7 5 9]}) -> [4 7 5 9]", "(flattenl {[7 6 2 3] {[8 1] {[7 6 6 8 3] {[5 2 8]}} {[2] {[0 5 4]}}}}) -> [7 6 2 3 8 1 7 6 6 8 3 5 2 8 2 0 5 4]", "(flattenl {[] {[7 5 1 5]} {[0 2 2]}}) -> [7 5 1 5 0 2 2]", "(flattenl {[0 1 8 2 9] {[1]}}) -> [0 1 8 2 9 1]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.142825, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {[8]}) -> [8]", "(flattenl {[2 8 1] {[8 6 6 3 7]}}) -> [2 8 1 8 6 6 3 7]", "(flattenl {[2 5 6 3] {[8] {[]}} {[4] {[6 9]} {[1 6 6 1 0]}}}) -> [2 5 6 3 8 4 6 9 1 6 6 1 0]", "(flattenl {[7 2 2 6 9] {[1]}}) -> [7 2 2 6 9 1]", "(flattenl {[1 7 4 7 2] {[2]} {[9 7 9] {[2 4 7 7 0] {[1 8]}} {[] {[4 3 1 3]} {[8]}}}}) -> [1 7 4 7 2 2 9 7 9 2 4 7 7 0 1 8 4 3 1 3 8]", "(flattenl {[6 6 8] {[]} {[3 7 3 6]}}) -> [6 6 8 3 7 3 6]", "(flattenl {[5 7 4 4 3] {[1 1]} {[1]}}) -> [5 7 4 4 3 1 1 1]", "(flattenl {}) -> []", "(flattenl {[9] {[1 5 0]}}) -> [9 1 5 0]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.165392, "name": "flattenl", "examples": ["(flattenl {[9 2] {[1] {[3 6 1 9 7] {[6]} {[9 3]}} {[6]}}}) -> [9 2 1 3 6 1 9 7 6 9 3 6]", "(flattenl {[5 7] {[7 9 6] {[5 2 5 5 1]}} {[]}}) -> [5 7 7 9 6 5 2 5 5 1]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[7 8 9 1]}) -> [7 8 9 1]", "(flattenl {}) -> []", "(flattenl {[6 8 4] {[]}}) -> [6 8 4]", "(flattenl {[8 4]}) -> [8 4]", "(flattenl {[1] {[5 5 0 5]} {[9 8]}}) -> [1 5 5 0 5 9 8]", "(flattenl {[]}) -> []", "(flattenl {[0 2 7 9] {[2]} {[4 6]}}) -> [0 2 7 9 2 4 6]", "(flattenl {[3]}) -> [3]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.175206, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[5 1 2 1] {[5 7 2]} {[3 5]}}) -> [5 1 2 1 5 7 2 3 5]", "(flattenl {[0 1] {[]} {[0 6 5 6 2]}}) -> [0 1 0 6 5 6 2]", "(flattenl {[2 4 6] {[2 7 4] {[3 4]}} {[7 8 0 8 7]}}) -> [2 4 6 2 7 4 3 4 7 8 0 8 7]", "(flattenl {[2 9] {[6 4]}}) -> [2 9 6 4]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {}) -> []", "(flattenl {[2 0 3] {[3 8 1 6]}}) -> [2 0 3 3 8 1 6]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.136734, "name": "flattenl", "examples": ["(flattenl {[5 3 7 6] {[7 0 4 2 2]}}) -> [5 3 7 6 7 0 4 2 2]", "(flattenl {}) -> []", "(flattenl {[4 4 5 6] {[7 1 8]}}) -> [4 4 5 6 7 1 8]", "(flattenl {[2 9 4 0 1]}) -> [2 9 4 0 1]", "(flattenl {[1]}) -> [1]", "(flattenl {[5 7] {[6]} {[3 5 5 0 0] {[5 6 1 9] {[1 9]}} {[0 5 1] {[6 2 1 4]} {[]}}}}) -> [5 7 6 3 5 5 0 0 5 6 1 9 1 9 0 5 1 6 2 1 4]", "(flattenl {[1 2 3] {[7] {[9 3 8 6]}}}) -> [1 2 3 7 9 3 8 6]", "(flattenl {[9 6 0] {[8 9]}}) -> [9 6 0 8 9]", "(flattenl {[2] {[] {[5 4 5 1]} {[9 0 0] {[7 6 2 5]}}}}) -> [2 5 4 5 1 9 0 0 7 6 2 5]", "(flattenl {[9 3] {[2 3 3 3] {[4 1]}}}) -> [9 3 2 3 3 3 4 1]", "(flattenl {[6 9 0 6 7] {[0 7 5]} {[7 2]}}) -> [6 9 0 6 7 0 7 5 7 2]", "(flattenl {[0 9] {[8 5] {[7 0 8]}} {[4] {[6 3 0 2 8]} {[3 5]}}}) -> [0 9 8 5 7 0 8 4 6 3 0 2 8 3 5]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.131603, "name": "flattenl", "examples": ["(flattenl {[4] {[9 6 1]}}) -> [4 9 6 1]", "(flattenl {[] {[4]}}) -> [4]", "(flattenl {[5] {[4 1 7] {[4]} {[]}}}) -> [5 4 1 7 4]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[7 7 1 0 2] {[]}}) -> [7 7 1 0 2]", "(flattenl {[8 8 6]}) -> [8 8 6]", "(flattenl {[9 7 7 8] {[7 8 9]}}) -> [9 7 7 8 7 8 9]", "(flattenl {[4 0 4 1 6] {[9] {[9] {[1 2 3]}} {[2] {[4 2]} {[]}}}}) -> [4 0 4 1 6 9 9 1 2 3 2 4 2]", "(flattenl {[6 6] {[7 6 1 7 1] {[8 0 7]} {[8]}} {[2 1 5 1 6] {[]} {[0]}}}) -> [6 6 7 6 1 7 1 8 0 7 8 2 1 5 1 6 0]", "(flattenl {}) -> []", "(flattenl {[3] {[4 9 3 2 7]}}) -> [3 4 9 3 2 7]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.173645, "name": "flattenl", "examples": ["(flattenl {[] {[3 9]}}) -> [3 9]", "(flattenl {[3]}) -> [3]", "(flattenl {[9 3] {[5 8] {[6]}} {[9 6 6]}}) -> [9 3 5 8 6 9 6 6]", "(flattenl {[7 1 0 2 3]}) -> [7 1 0 2 3]", "(flattenl {[2 1]}) -> [2 1]", "(flattenl {[8 4 2 5]}) -> [8 4 2 5]", "(flattenl {[0 9 1 3] {[7 1 9 3]} {[2 8 1 3 9]}}) -> [0 9 1 3 7 1 9 3 2 8 1 3 9]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[8 6 8 7 5]}) -> [8 6 8 7 5]", "(flattenl {[5]}) -> [5]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.121216, "name": "flattenl", "examples": ["(flattenl {[2 7] {[5 1 7] {[4 7 2 8]}}}) -> [2 7 5 1 7 4 7 2 8]", "(flattenl {[2 6 0 7] {[9]} {[4 5 6 8] {[1 8 6]}}}) -> [2 6 0 7 9 4 5 6 8 1 8 6]", "(flattenl {[9 4 3] {[9 2 4 8] {[]}}}) -> [9 4 3 9 2 4 8]", "(flattenl {[] {[2 0 4 9 6] {[6 6]} {[0]}} {[8 7 7 5 2] {[9 7 9 2]} {[5 7 1] {[3]} {[7 4 3 3]}}}}) -> [2 0 4 9 6 6 6 0 8 7 7 5 2 9 7 9 2 5 7 1 3 7 4 3 3]", "(flattenl {[2 3 5 7 0]}) -> [2 3 5 7 0]", "(flattenl {[] {[0]} {[0 2 7 3]}}) -> [0 0 2 7 3]", "(flattenl {[6 4 0 4 4] {[5 6]}}) -> [6 4 0 4 4 5 6]", "(flattenl {[5 1 0]}) -> [5 1 0]", "(flattenl {[]}) -> []", "(flattenl {[2]}) -> [2]", "(flattenl {}) -> []", "(flattenl {[] {[0 7 3 1 2]} {[5 8 9 9]}}) -> [0 7 3 1 2 5 8 9 9]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.177389, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[9 4 5] {[9] {[5]} {[3 8 5 9 2]}}}) -> [9 4 5 9 5 3 8 5 9 2]", "(flattenl {}) -> []", "(flattenl {[7 7 2 0 1] {[8 2 9 9]}}) -> [7 7 2 0 1 8 2 9 9]", "(flattenl {[4 8 8] {[3 3] {[1]} {[5 8]}}}) -> [4 8 8 3 3 1 5 8]", "(flattenl {[4 7 7 6 1] {[6 8 0 5 5]}}) -> [4 7 7 6 1 6 8 0 5 5]", "(flattenl {[3] {[1 7 0] {[2 2 5]} {[8]}}}) -> [3 1 7 0 2 2 5 8]", "(flattenl {[8 2 8 8 5] {[6 6 4]}}) -> [8 2 8 8 5 6 6 4]", "(flattenl {[4 2 0] {[2 4 6 1 4] {[2] {[5 3 8 7]} {[5]}} {[1]}}}) -> [4 2 0 2 4 6 1 4 2 5 3 8 7 5 1]", "(flattenl {}) -> []", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.164086, "name": "flattenl", "examples": ["(flattenl {[] {[4 3 1 6 7]}}) -> [4 3 1 6 7]", "(flattenl {[8 1 4 7 4]}) -> [8 1 4 7 4]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[3 6] {[4 1] {[6] {[5 6 4 8]} {[0 4 5 3 5]}} {[1 3 6 3 3] {[8]}}} {[] {[7 9] {[4 5 0]} {[9 7]}}}}) -> [3 6 4 1 6 5 6 4 8 0 4 5 3 5 1 3 6 3 3 8 7 9 4 5 0 9 7]", "(flattenl {[8 1] {[7 5 2 8 1] {[4 3 1 7 4]} {[7 6 1 5 8]}} {[3 9 5]}}) -> [8 1 7 5 2 8 1 4 3 1 7 4 7 6 1 5 8 3 9 5]", "(flattenl {[4] {[4 0 4]} {[5 1]}}) -> [4 4 0 4 5 1]", "(flattenl {[9 8 8 0] {[]} {[5 9 4 9]}}) -> [9 8 8 0 5 9 4 9]", "(flattenl {[4 8 4 0 4]}) -> [4 8 4 0 4]", "(flattenl {[8 8] {[5] {[9 4 7 5 3]} {[8 3 9] {[6 5 6 7]}}} {[8 6 6 9 0] {[4 1 1 8 0] {[8 2 7 9]} {[]}} {[0 0 5 2] {[]}}}}) -> [8 8 5 9 4 7 5 3 8 3 9 6 5 6 7 8 6 6 9 0 4 1 1 8 0 8 2 7 9 0 0 5 2]", "(flattenl {[4] {[6 5 1]}}) -> [4 6 5 1]", "(flattenl {[6 0 6] {[]} {[9]}}) -> [6 0 6 9]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.15798, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[1 4 6 1]}) -> [1 4 6 1]", "(flattenl {[0 0 2 3 1] {[] {[3] {[]}} {[1]}} {[]}}) -> [0 0 2 3 1 3 1]", "(flattenl {}) -> []", "(flattenl {[2 0 5 2 4]}) -> [2 0 5 2 4]", "(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {[8] {[] {[] {[]}}} {[1 7 2 6 0] {[9] {[8]} {[9 0 4 3 1]}}}}) -> [8 1 7 2 6 0 9 8 9 0 4 3 1]", "(flattenl {[] {[9 5] {[7 9 5] {[5 1 4 0 6]}}} {[3 3 4 5 4]}}) -> [9 5 7 9 5 5 1 4 0 6 3 3 4 5 4]", "(flattenl {[3 4 8 6]}) -> [3 4 8 6]", "(flattenl {[8 8 9] {[4 9 4 4 2]}}) -> [8 8 9 4 9 4 4 2]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.123877, "name": "flattenl", "examples": ["(flattenl {[4 5 2]}) -> [4 5 2]", "(flattenl {[6 5 6 1] {[]} {[2 4 4]}}) -> [6 5 6 1 2 4 4]", "(flattenl {[3 2] {[8 4]} {[1 9]}}) -> [3 2 8 4 1 9]", "(flattenl {[3 3 5] {[9 0 4 0]}}) -> [3 3 5 9 0 4 0]", "(flattenl {[4] {[5 7 2]}}) -> [4 5 7 2]", "(flattenl {[5]}) -> [5]", "(flattenl {}) -> []", "(flattenl {[6 0 2 2] {[0 9 1]} {[]}}) -> [6 0 2 2 0 9 1]", "(flattenl {}) -> []", "(flattenl {[3]}) -> [3]", "(flattenl {}) -> []", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.163421, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[8 7 7 8 4]} {[0 8 9 5 0]}}) -> [8 7 7 8 4 0 8 9 5 0]", "(flattenl {}) -> []", "(flattenl {[6] {[6 2 5 3]} {[7 0 0 8 8]}}) -> [6 6 2 5 3 7 0 0 8 8]", "(flattenl {}) -> []", "(flattenl {[8 2 9]}) -> [8 2 9]", "(flattenl {[3 1 4] {[7 1 8]}}) -> [3 1 4 7 1 8]", "(flattenl {[1 9 6 1] {[1]}}) -> [1 9 6 1 1]", "(flattenl {[]}) -> []", "(flattenl {[6 5 5] {[4]} {[7 5] {[5 0] {[8 0]} {[6]}}}}) -> [6 5 5 4 7 5 5 0 8 0 6]", "(flattenl {}) -> []", "(flattenl {[7 9] {[1 4]} {[3 0 4]}}) -> [7 9 1 4 3 0 4]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.107348, "name": "flattenl", "examples": ["(flattenl {[] {[7]}}) -> [7]", "(flattenl {[]}) -> []", "(flattenl {[7 2 5] {[1] {[1 2 6]}}}) -> [7 2 5 1 1 2 6]", "(flattenl {[6 5] {[5 1 8]} {[5 4 0 0] {[]} {[]}}}) -> [6 5 5 1 8 5 4 0 0]", "(flattenl {[1 2 1 7]}) -> [1 2 1 7]", "(flattenl {[] {[7 9 9 9 4]} {[0 9 4 0]}}) -> [7 9 9 9 4 0 9 4 0]", "(flattenl {}) -> []", "(flattenl {[9 9 4]}) -> [9 9 4]", "(flattenl {[9 5 2] {[2]} {[]}}) -> [9 5 2 2]", "(flattenl {[1] {[] {[6 7 0] {[5 3]}} {[9] {[4]}}}}) -> [1 6 7 0 5 3 9 4]", "(flattenl {[3 3 1]}) -> [3 3 1]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.131364, "name": "flattenl", "examples": ["(flattenl {[0 7 6 4] {[8 7 3] {[7 2 1 4 6]}} {[0 6]}}) -> [0 7 6 4 8 7 3 7 2 1 4 6 0 6]", "(flattenl {[7 7 0 0] {[] {[3 6 0 6 9] {[3 6 8 7]}} {[8 8 1 0] {[8]} {[6 0 9 3 4]}}} {[8 6 3 5] {[4 2] {[2]}}}}) -> [7 7 0 0 3 6 0 6 9 3 6 8 7 8 8 1 0 8 6 0 9 3 4 8 6 3 5 4 2 2]", "(flattenl {[9] {[1 6 7 4 3] {[7 9 8 1]} {[]}} {[3 4]}}) -> [9 1 6 7 4 3 7 9 8 1 3 4]", "(flattenl {[6]}) -> [6]", "(flattenl {}) -> []", "(flattenl {[7 4] {[2 9 2 5]} {[8 8 6]}}) -> [7 4 2 9 2 5 8 8 6]", "(flattenl {[5 2 8 1 2] {[7 3 3 4 3] {[0]} {[0]}}}) -> [5 2 8 1 2 7 3 3 4 3 0 0]", "(flattenl {[3 5 6 4] {[6 7 0 1 6] {[1 9 7 9 8]}} {[3 9] {[2 0 7 9]}}}) -> [3 5 6 4 6 7 0 1 6 1 9 7 9 8 3 9 2 0 7 9]", "(flattenl {[2] {[4 1 2 1 6]}}) -> [2 4 1 2 1 6]", "(flattenl {[] {[5 2 5 8]}}) -> [5 2 5 8]", "(flattenl {[8 8 0 7] {[4 5] {[]} {[0 9 3 1 2]}} {[5] {[0 7 5 3]}}}) -> [8 8 0 7 4 5 0 9 3 1 2 5 0 7 5 3]", "(flattenl {[5 7 1]}) -> [5 7 1]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.147254, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[9 4] {[2 3 3 9]}}) -> [9 4 2 3 3 9]", "(flattenl {}) -> []", "(flattenl {[0 0 3 3 0] {[4 3 7 1]} {[1 3 5 4 8]}}) -> [0 0 3 3 0 4 3 7 1 1 3 5 4 8]", "(flattenl {}) -> []", "(flattenl {[7 5 5 5 1]}) -> [7 5 5 5 1]", "(flattenl {[] {[4 4 2 6 5] {[] {[2 0 3 2]} {[6 1 3]}}} {[9] {[2 2]} {[0 5 5 7 7] {[5 5]} {[]}}}}) -> [4 4 2 6 5 2 0 3 2 6 1 3 9 2 2 0 5 5 7 7 5 5]", "(flattenl {}) -> []", "(flattenl {[1 3 7 2] {[] {[3 7 0]} {[0 8 8]}} {[] {[5 0]} {[1]}}}) -> [1 3 7 2 3 7 0 0 8 8 5 0 1]", "(flattenl {[2 9 8]}) -> [2 9 8]", "(flattenl {[6 7 1] {[1 5 3 2 9]}}) -> [6 7 1 1 5 3 2 9]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.132672, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[3 4 1]}) -> [3 4 1]", "(flattenl {}) -> []", "(flattenl {[] {[3 3 5]}}) -> [3 3 5]", "(flattenl {}) -> []", "(flattenl {[8] {[3 4]} {[]}}) -> [8 3 4]", "(flattenl {[8 1 3]}) -> [8 1 3]", "(flattenl {[7] {[] {[8] {[]}}} {[0 9 0] {[]}}}) -> [7 8 0 9 0]", "(flattenl {[0 5 2 8 1]}) -> [0 5 2 8 1]", "(flattenl {[4 1 6 9] {[2 6 6 1]} {[4 8 6 0 2]}}) -> [4 1 6 9 2 6 6 1 4 8 6 0 2]", "(flattenl {}) -> []", "(flattenl {[2 6 3] {[0 9 9 4] {[1 8 9 3]}}}) -> [2 6 3 0 9 9 4 1 8 9 3]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.142697, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[2 4 9 1 7]}) -> [2 4 9 1 7]", "(flattenl {[7 2 8 0 2]}) -> [7 2 8 0 2]", "(flattenl {[2 4]}) -> [2 4]", "(flattenl {[8 0 2] {[2 1 9 7 8] {[1 9 1 3 3]} {[9]}}}) -> [8 0 2 2 1 9 7 8 1 9 1 3 3 9]", "(flattenl {[9 2 8 4] {[8 5 6 0]}}) -> [9 2 8 4 8 5 6 0]", "(flattenl {[5 2 1 6] {[4 0 3 3]}}) -> [5 2 1 6 4 0 3 3]", "(flattenl {[4] {[0 0 0 7]} {[3 5]}}) -> [4 0 0 0 7 3 5]", "(flattenl {}) -> []", "(flattenl {[0]}) -> [0]", "(flattenl {[6 6] {[9 1 9 1]} {[] {[5 0 2 0]}}}) -> [6 6 9 1 9 1 5 0 2 0]", "(flattenl {[] {[2 8 6 1 5] {[0 1 1 4 0]}}}) -> [2 8 6 1 5 0 1 1 4 0]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.140705, "name": "flattenl", "examples": ["(flattenl {[0] {[3 7 4 6 7]}}) -> [0 3 7 4 6 7]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[8 4 3] {[5] {[1 7 5 2 1]}}}) -> [8 4 3 5 1 7 5 2 1]", "(flattenl {[8 5 1]}) -> [8 5 1]", "(flattenl {[9 5] {[2 7 0 0 2]} {[0 1 5 6]}}) -> [9 5 2 7 0 0 2 0 1 5 6]", "(flattenl {[8 9 4] {[] {[5 0 6 6]} {[0 3 2 8]}} {[1 9] {[8 5 0 9 5]}}}) -> [8 9 4 5 0 6 6 0 3 2 8 1 9 8 5 0 9 5]", "(flattenl {[0 4 6 5 6]}) -> [0 4 6 5 6]", "(flattenl {}) -> []", "(flattenl {[1] {[0]}}) -> [1 0]", "(flattenl {[0]}) -> [0]", "(flattenl {[4] {[7 9 7 2 9] {[]} {[4 9 4 4 8]}}}) -> [4 7 9 7 2 9 4 9 4 4 8]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.16391, "name": "flattenl", "examples": ["(flattenl {[] {[9 7 5 4 1] {[]} {[0 4]}}}) -> [9 7 5 4 1 0 4]", "(flattenl {}) -> []", "(flattenl {[0 6] {[3 5 9] {[1 7 1 9 6]} {[5 8 1 4]}}}) -> [0 6 3 5 9 1 7 1 9 6 5 8 1 4]", "(flattenl {[5 5] {[3 0]}}) -> [5 5 3 0]", "(flattenl {[5] {[6]}}) -> [5 6]", "(flattenl {}) -> []", "(flattenl {[4 5 5 1 4] {[8 3 8 4 4]} {[9 3 6 5 2]}}) -> [4 5 5 1 4 8 3 8 4 4 9 3 6 5 2]", "(flattenl {}) -> []", "(flattenl {[7] {[1 0] {[9 8 7 0]}}}) -> [7 1 0 9 8 7 0]", "(flattenl {[3 4 5 1 1] {[5 8 8 6 1]}}) -> [3 4 5 1 1 5 8 8 6 1]", "(flattenl {[4] {[5]}}) -> [4 5]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.156989, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[8] {[] {[9 4 0 3 4]}}}) -> [8 9 4 0 3 4]", "(flattenl {[]}) -> []", "(flattenl {[4 5 8 6] {[2 6 4]}}) -> [4 5 8 6 2 6 4]", "(flattenl {[2 2 6 0 7] {[8 0 6 5 7]} {[6]}}) -> [2 2 6 0 7 8 0 6 5 7 6]", "(flattenl {[0]}) -> [0]", "(flattenl {[2 0 2]}) -> [2 0 2]", "(flattenl {[4 0 0 2] {[3 9] {[9]}}}) -> [4 0 0 2 3 9 9]", "(flattenl {}) -> []", "(flattenl {[2] {[3 2 3 9 3]} {[4 5 6 8] {[]} {[] {[8]}}}}) -> [2 3 2 3 9 3 4 5 6 8 8]", "(flattenl {[3] {[7 6 3] {[6 3 7 2 4]}}}) -> [3 7 6 3 6 3 7 2 4]", "(flattenl {[3 8] {[9 5 5 0]}}) -> [3 8 9 5 5 0]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.160724, "name": "flattenl", "examples": ["(flattenl {[]}) -> []", "(flattenl {[] {[4 1] {[9 1 5] {[]}} {[] {[7 9]}}} {[2 0 3] {[] {[]} {[2 7 7 6 0]}}}}) -> [4 1 9 1 5 7 9 2 0 3 2 7 7 6 0]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[3] {[5 1 2]}}) -> [3 5 1 2]", "(flattenl {}) -> []", "(flattenl {[2 3] {[]}}) -> [2 3]", "(flattenl {[8]}) -> [8]", "(flattenl {[6 9 8 2 8]}) -> [6 9 8 2 8]", "(flattenl {}) -> []", "(flattenl {[] {[0 0 9] {[5]}}}) -> [0 0 9 5]", "(flattenl {[7 3 6 5] {[8 9] {[4 9 2 1 9]} {[7 6 1]}} {[5] {[4 9 9 5 2] {[5 1 0 6 6]}}}}) -> [7 3 6 5 8 9 4 9 2 1 9 7 6 1 5 4 9 9 5 2 5 1 0 6 6]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.153473, "name": "flattenl", "examples": ["(flattenl {[5 5 9 0 0] {[8 4 0 9]}}) -> [5 5 9 0 0 8 4 0 9]", "(flattenl {[9 4] {[1]} {[3 6]}}) -> [9 4 1 3 6]", "(flattenl {[5 4 0] {[8 7 2 8 2] {[4 5 1 4]} {[8 9 9 7 0]}}}) -> [5 4 0 8 7 2 8 2 4 5 1 4 8 9 9 7 0]", "(flattenl {[0 9]}) -> [0 9]", "(flattenl {[7 3 9 4 1] {[] {[6 7 1] {[3 4 6 6]}} {[6 9 6] {[1 4 3]} {[4]}}}}) -> [7 3 9 4 1 6 7 1 3 4 6 6 6 9 6 1 4 3 4]", "(flattenl {}) -> []", "(flattenl {[0 5 7 6] {[7 1 2 2 9]}}) -> [0 5 7 6 7 1 2 2 9]", "(flattenl {[8 3]}) -> [8 3]", "(flattenl {[5 3] {[3]} {[5 1 8]}}) -> [5 3 3 5 1 8]", "(flattenl {}) -> []", "(flattenl {[6 4 5 9 6]}) -> [6 4 5 9 6]", "(flattenl {[8] {[]} {[6 2 0 1]}}) -> [8 6 2 0 1]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.167133, "name": "flattenl", "examples": ["(flattenl {[]}) -> []", "(flattenl {[9 0] {[5 7] {[9 3 9]} {[]}}}) -> [9 0 5 7 9 3 9]", "(flattenl {[9]}) -> [9]", "(flattenl {[9] {[1 1] {[2] {[2]}} {[8 1] {[0 5 4]} {[]}}} {[9 4] {[7 7 2 5 7] {[6 8]}}}}) -> [9 1 1 2 2 8 1 0 5 4 9 4 7 7 2 5 7 6 8]", "(flattenl {[6 9 1 8 7] {[2 8 3 8] {[9 5 1]} {[8 2 8 1 9]}} {[] {[7 5 9 9] {[0 0 2 0 3]}}}}) -> [6 9 1 8 7 2 8 3 8 9 5 1 8 2 8 1 9 7 5 9 9 0 0 2 0 3]", "(flattenl {[4] {[8 0 3]}}) -> [4 8 0 3]", "(flattenl {[9 0 6 5]}) -> [9 0 6 5]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {[4 9] {[0 8] {[6]}} {[5 1 1 0] {[4 1 3]}}}) -> [4 9 0 8 6 5 1 1 0 4 1 3]", "(flattenl {[7] {[3 2 3 8]}}) -> [7 3 2 3 8]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.15797, "name": "flattenl", "examples": ["(flattenl {[4 4 2] {[1 6 4] {[6 5 8 1] {[7 7]} {[]}} {[]}} {[2 9 2] {[7 0 6] {[5 5]} {[0 4]}}}}) -> [4 4 2 1 6 4 6 5 8 1 7 7 2 9 2 7 0 6 5 5 0 4]", "(flattenl {[3 8 3 9]}) -> [3 8 3 9]", "(flattenl {[1] {[8] {[2 3 8 8]}} {[] {[2 6 7]}}}) -> [1 8 2 3 8 8 2 6 7]", "(flattenl {[2 1] {[9] {[7] {[4 0 3 2]} {[7 3 4 2]}}} {[5 3 6 6] {[] {[6 6]}}}}) -> [2 1 9 7 4 0 3 2 7 3 4 2 5 3 6 6 6 6]", "(flattenl {[9]}) -> [9]", "(flattenl {}) -> []", "(flattenl {[7 8 6]}) -> [7 8 6]", "(flattenl {[] {[] {[]} {[3 0 5 5 5] {[0 3 1 2]} {[5 2]}}} {[] {[6 6 8 1 8] {[9 0 7]} {[0 0 4 6]}} {[3] {[3]} {[9 3 0 6]}}}}) -> [3 0 5 5 5 0 3 1 2 5 2 6 6 8 1 8 9 0 7 0 0 4 6 3 3 9 3 0 6]", "(flattenl {}) -> []", "(flattenl {[4 1 9] {[8 7 1 1] {[0 4 5 4 1]} {[8 8 9 5]}} {[2] {[6]}}}) -> [4 1 9 8 7 1 1 0 4 5 4 1 8 8 9 5 2 6]", "(flattenl {}) -> []", "(flattenl {[] {[]}}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.166979, "name": "flattenl", "examples": ["(flattenl {[0 5 3 5]}) -> [0 5 3 5]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[6]}) -> [6]", "(flattenl {}) -> []", "(flattenl {[2 6]}) -> [2 6]", "(flattenl {}) -> []", "(flattenl {[7] {[8 3 6 8 0]}}) -> [7 8 3 6 8 0]", "(flattenl {[1 0 5 0] {[7 2] {[3]} {[7 3]}} {[9 5] {[2 8 6]} {[5]}}}) -> [1 0 5 0 7 2 3 7 3 9 5 2 8 6 5]", "(flattenl {}) -> []", "(flattenl {[9 9 7 0] {[] {[]}} {[8] {[1]}}}) -> [9 9 7 0 8 1]", "(flattenl {[1 8 6 4 9] {[5 8]}}) -> [1 8 6 4 9 5 8]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.15467, "name": "flattenl", "examples": ["(flattenl {[9 9 7 2 4] {[1 4]} {[9 1 8] {[7 0 6] {[6 2 0 7 9]} {[2 7 6 1 5]}}}}) -> [9 9 7 2 4 1 4 9 1 8 7 0 6 6 2 0 7 9 2 7 6 1 5]", "(flattenl {[0] {[3 9]} {[] {[5 5 4 8 4]} {[]}}}) -> [0 3 9 5 5 4 8 4]", "(flattenl {[0 1 8 0] {[9 5 0]} {[7 6 2 7] {[0 8 7]}}}) -> [0 1 8 0 9 5 0 7 6 2 7 0 8 7]", "(flattenl {[7 4]}) -> [7 4]", "(flattenl {}) -> []", "(flattenl {[2] {[]} {[0 4 8]}}) -> [2 0 4 8]", "(flattenl {[9 6 7]}) -> [9 6 7]", "(flattenl {[7] {[8 3 8 5]} {[6 7 3]}}) -> [7 8 3 8 5 6 7 3]", "(flattenl {[3 4] {[] {[7]}} {[7 8 1 3]}}) -> [3 4 7 7 8 1 3]", "(flattenl {[3] {[4 4]} {[7 5 2 7]}}) -> [3 4 4 7 5 2 7]", "(flattenl {}) -> []", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.156963, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[7 3 3] {[5 6 7 3]} {[0 0 4 4] {[2 3 2] {[2 9 3]} {[6 7 8 7]}} {[5 1 4 8]}}}) -> [7 3 3 5 6 7 3 0 0 4 4 2 3 2 2 9 3 6 7 8 7 5 1 4 8]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[0 3 2] {[7 4]} {[2 5 1 2 4]}}) -> [0 3 2 7 4 2 5 1 2 4]", "(flattenl {[7 1 6 1] {[0 6 5 8]} {[]}}) -> [7 1 6 1 0 6 5 8]", "(flattenl {[3]}) -> [3]", "(flattenl {[]}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.118705, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[8 8 4 6] {[3 7 1 5]}}) -> [8 8 4 6 3 7 1 5]", "(flattenl {[7 2 4 9] {[9 1 1 0 6] {[2 2 3] {[4 7 1]} {[1 3]}} {[] {[1 6]} {[0 0 3 2]}}} {[6 9 5 3 5] {[6 1] {[6 6]} {[0 9]}} {[7 5 4 2 8]}}}) -> [7 2 4 9 9 1 1 0 6 2 2 3 4 7 1 1 3 1 6 0 0 3 2 6 9 5 3 5 6 1 6 6 0 9 7 5 4 2 8]", "(flattenl {[7 3 8 2 9]}) -> [7 3 8 2 9]", "(flattenl {[4 6 1 9 5] {[5 0] {[]}}}) -> [4 6 1 9 5 5 0]", "(flattenl {[9 8 2 8 0]}) -> [9 8 2 8 0]", "(flattenl {[2]}) -> [2]", "(flattenl {[9 1 5 2] {[2]} {[6 9 0 6]}}) -> [9 1 5 2 2 6 9 0 6]", "(flattenl {[9] {[1 7 2 8]} {[0] {[5] {[8 6 8 8]}}}}) -> [9 1 7 2 8 0 5 8 6 8 8]", "(flattenl {[3] {[1 1 1 0]} {[9] {[]} {[]}}}) -> [3 1 1 1 0 9]", "(flattenl {[6]}) -> [6]", "(flattenl {[7] {[7 6 4 4]}}) -> [7 7 6 4 4]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.110451, "name": "flattenl", "examples": ["(flattenl {[5 2] {[]} {[1 7] {[7 9]} {[6 5 9 0]}}}) -> [5 2 1 7 7 9 6 5 9 0]", "(flattenl {[1 8 4] {[1 2 1]}}) -> [1 8 4 1 2 1]", "(flattenl {}) -> []", "(flattenl {[3 1] {[] {[3 4]}}}) -> [3 1 3 4]", "(flattenl {[6 5 4 2 2] {[5 1 9]}}) -> [6 5 4 2 2 5 1 9]", "(flattenl {[2 9 5 8]}) -> [2 9 5 8]", "(flattenl {[5 6 3 2 3] {[3]}}) -> [5 6 3 2 3 3]", "(flattenl {[2 8]}) -> [2 8]", "(flattenl {[2 4]}) -> [2 4]", "(flattenl {}) -> []", "(flattenl {[6 3 3 0]}) -> [6 3 3 0]", "(flattenl {[] {[]} {[9 7 0 7] {[3 4]}}}) -> [9 7 0 7 3 4]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.154873, "name": "flattenl", "examples": ["(flattenl {[7 2 2 7] {[8 3 6 8] {[3 6]} {[2 9 0 2] {[7 2 6 6 5]} {[]}}}}) -> [7 2 2 7 8 3 6 8 3 6 2 9 0 2 7 2 6 6 5]", "(flattenl {[2 9 6]}) -> [2 9 6]", "(flattenl {[]}) -> []", "(flattenl {[3 6 4] {[0] {[4 7 1 0]}}}) -> [3 6 4 0 4 7 1 0]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {[3 1 4 8] {[9 2 4] {[5]}} {[1 8 0 8 5] {[2 0]} {[0 6]}}}) -> [3 1 4 8 9 2 4 5 1 8 0 8 5 2 0 0 6]", "(flattenl {[7 1 3 2 3] {[6 6 4 3]}}) -> [7 1 3 2 3 6 6 4 3]", "(flattenl {[] {[2 7 4 7]} {[6]}}) -> [2 7 4 7 6]", "(flattenl {[4 5 1] {[8 0 3 5 0]}}) -> [4 5 1 8 0 3 5 0]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.144449, "name": "flattenl", "examples": ["(flattenl {[3 8 9 2] {[]}}) -> [3 8 9 2]", "(flattenl {[4 8] {[5 8 9]}}) -> [4 8 5 8 9]", "(flattenl {[3 0 4 2] {[8 7 9 3 2]}}) -> [3 0 4 2 8 7 9 3 2]", "(flattenl {[4 3 0 5 3] {[] {[9] {[0 9 9]} {[8]}}}}) -> [4 3 0 5 3 9 0 9 9 8]", "(flattenl {}) -> []", "(flattenl {[6] {[] {[0 9 4 9]} {[5]}} {[7 3 8]}}) -> [6 0 9 4 9 5 7 3 8]", "(flattenl {}) -> []", "(flattenl {[1 3 4 1 7] {[3 1 1]}}) -> [1 3 4 1 7 3 1 1]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.18533, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[3] {[6 0 2 0 4] {[]} {[]}}}) -> [3 6 0 2 0 4]", "(flattenl {[]}) -> []", "(flattenl {[9 1 7 5]}) -> [9 1 7 5]", "(flattenl {[8 0 0]}) -> [8 0 0]", "(flattenl {[9 6 5 4 3]}) -> [9 6 5 4 3]", "(flattenl {[8 8 7]}) -> [8 8 7]", "(flattenl {}) -> []", "(flattenl {[] {[7 4 0] {[8 3] {[4]}}}}) -> [7 4 0 8 3 4]", "(flattenl {[3 0]}) -> [3 0]", "(flattenl {[7 1] {[9 2 3]}}) -> [7 1 9 2 3]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.163596, "name": "flattenl", "examples": ["(flattenl {[] {[2 7] {[]}} {[] {[6]}}}) -> [2 7 6]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[2 1 9 5] {[]} {[7 5 1 4 7]}}) -> [2 1 9 5 7 5 1 4 7]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[2 4] {[4 4 3]} {[9 3]}}) -> [2 4 4 4 3 9 3]", "(flattenl {[1 2] {[6]} {[6 0 1 5]}}) -> [1 2 6 6 0 1 5]", "(flattenl {}) -> []", "(flattenl {[8 4 8]}) -> [8 4 8]", "(flattenl {[6 4 8 3 1]}) -> [6 4 8 3 1]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.133829, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[1 1 1 1 1]}) -> [1 1 1 1 1]", "(flattenl {[7 1 5]}) -> [7 1 5]", "(flattenl {}) -> []", "(flattenl {[9 3 3] {[] {[9 5 6] {[]} {[8 3 7 9 4]}}} {[1 5 1 2 0]}}) -> [9 3 3 9 5 6 8 3 7 9 4 1 5 1 2 0]", "(flattenl {}) -> []", "(flattenl {[2 7] {[4 0 7] {[6]} {[6] {[3 5]}}} {[1 1 6 4 6] {[2 5 1] {[7 8]}}}}) -> [2 7 4 0 7 6 6 3 5 1 1 6 4 6 2 5 1 7 8]", "(flattenl {[1] {[6 3 5 8 0] {[0 6 7]}}}) -> [1 6 3 5 8 0 0 6 7]", "(flattenl {[0 8 3 7] {[] {[5 9 9]}}}) -> [0 8 3 7 5 9 9]", "(flattenl {}) -> []", "(flattenl {[0 9 1 2] {[4] {[5 3 5 7 7]} {[7 5]}} {[5 2 6 2 6]}}) -> [0 9 1 2 4 5 3 5 7 7 7 5 5 2 6 2 6]", "(flattenl {[4 9 8 3 8] {[] {[7 6 9 2] {[5 0 0 0]}}}}) -> [4 9 8 3 8 7 6 9 2 5 0 0 0]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.147825, "name": "flattenl", "examples": ["(flattenl {[5 2]}) -> [5 2]", "(flattenl {}) -> []", "(flattenl {[6 4 1 7] {[2 8 1 2]}}) -> [6 4 1 7 2 8 1 2]", "(flattenl {[9 7 8 8] {[] {[3 6 4] {[2 4 5 4 7]}}}}) -> [9 7 8 8 3 6 4 2 4 5 4 7]", "(flattenl {[8 2]}) -> [8 2]", "(flattenl {[2 3 2 9 3] {[9 7 8 2]} {[] {[8 3 3]} {[8 8]}}}) -> [2 3 2 9 3 9 7 8 2 8 3 3 8 8]", "(flattenl {}) -> []", "(flattenl {[7 1 9]}) -> [7 1 9]", "(flattenl {[] {[5 6 4] {[7 7 4 9 6]}}}) -> [5 6 4 7 7 4 9 6]", "(flattenl {}) -> []", "(flattenl {[] {[1 7 5] {[4]}} {[0 1 1 8 2] {[4 0]} {[8 3 8]}}}) -> [1 7 5 4 0 1 1 8 2 4 0 8 3 8]", "(flattenl {[] {[2] {[5 3 1 6] {[5 7 4]} {[0 9 6 6 5]}}}}) -> [2 5 3 1 6 5 7 4 0 9 6 6 5]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.169561, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[6 3 7 8]}) -> [6 3 7 8]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[4 5 8 3] {[6 2 6 3] {[]}}}) -> [4 5 8 3 6 2 6 3]", "(flattenl {[8]}) -> [8]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {[] {[7 7 2 7 7]}}) -> [7 7 2 7 7]", "(flattenl {}) -> []", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.137353, "name": "flattenl", "examples": ["(flattenl {[2 1 4]}) -> [2 1 4]", "(flattenl {[8 0 2 0]}) -> [8 0 2 0]", "(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {[5 6 1 2 9] {[1 8 0 7]} {[5 1 8 9 1]}}) -> [5 6 1 2 9 1 8 0 7 5 1 8 9 1]", "(flattenl {[9 5 4] {[]}}) -> [9 5 4]", "(flattenl {[9 7]}) -> [9 7]", "(flattenl {[6 3 4 1] {[1 1] {[2 1 7]} {[8 0]}}}) -> [6 3 4 1 1 1 2 1 7 8 0]", "(flattenl {[1 3 3 4 3] {[7 6 6] {[7 5 5 5] {[9 2 4 0 2]}} {[9 9 2 1] {[7]}}}}) -> [1 3 3 4 3 7 6 6 7 5 5 5 9 2 4 0 2 9 9 2 1 7]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[7 1] {[1 9 4 7 7]} {[2 6]}}) -> [7 1 1 9 4 7 7 2 6]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.17236, "name": "flattenl", "examples": ["(flattenl {[8 2 6 8 1]}) -> [8 2 6 8 1]", "(flattenl {[0]}) -> [0]", "(flattenl {[4 4 2 2] {[2 3]} {[4 0 7] {[1 7 4] {[8]} {[3 0 7 9]}}}}) -> [4 4 2 2 2 3 4 0 7 1 7 4 8 3 0 7 9]", "(flattenl {[5 4] {[5 8 5] {[8 3 1 2] {[]} {[6 2]}} {[0 3 0 3] {[6 5 6 0 5]} {[]}}}}) -> [5 4 5 8 5 8 3 1 2 6 2 0 3 0 3 6 5 6 0 5]", "(flattenl {[1 1 0 7 2]}) -> [1 1 0 7 2]", "(flattenl {}) -> []", "(flattenl {[7 6 9 0 1]}) -> [7 6 9 0 1]", "(flattenl {[5 3 1 3 8] {[9 1 3 3 3]} {[8 8 2]}}) -> [5 3 1 3 8 9 1 3 3 3 8 8 2]", "(flattenl {[5 0 3] {[5 8 2 1 7] {[9 6 4 8 9]} {[2 9 2]}}}) -> [5 0 3 5 8 2 1 7 9 6 4 8 9 2 9 2]", "(flattenl {[4 2 5 1 7] {[9 5 4] {[6 2] {[0 5 7]} {[8]}} {[7 1 5 4 3] {[]}}}}) -> [4 2 5 1 7 9 5 4 6 2 0 5 7 8 7 1 5 4 3]", "(flattenl {[5 4 9 0 3]}) -> [5 4 9 0 3]", "(flattenl {[4 1 5 8] {[5 6]}}) -> [4 1 5 8 5 6]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.12102, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[8 5 6] {[5 9 8 5 0] {[8 2 2 1]}} {[0]}}) -> [8 5 6 5 9 8 5 0 8 2 2 1 0]", "(flattenl {[]}) -> []", "(flattenl {[0 4] {[] {[2 0 3]} {[0 0 5 1 3]}} {[9 4 6 7]}}) -> [0 4 2 0 3 0 0 5 1 3 9 4 6 7]", "(flattenl {[] {[6] {[1]}}}) -> [6 1]", "(flattenl {[]}) -> []", "(flattenl {[9 7 2 1 2]}) -> [9 7 2 1 2]", "(flattenl {[3 7 9]}) -> [3 7 9]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[7 1 2]}) -> [7 1 2]", "(flattenl {[4 3] {[9 4]}}) -> [4 3 9 4]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.165252, "name": "flattenl", "examples": ["(flattenl {[6 9 0 7] {[6 7 3 7] {[4]} {[4 5]}}}) -> [6 9 0 7 6 7 3 7 4 4 5]", "(flattenl {}) -> []", "(flattenl {[6 1 6 4]}) -> [6 1 6 4]", "(flattenl {[9 1 3 8] {[8 9 5 3]} {[2]}}) -> [9 1 3 8 8 9 5 3 2]", "(flattenl {[1 3 8 2] {[5 7 4 5]}}) -> [1 3 8 2 5 7 4 5]", "(flattenl {[2 9 7 2 8] {[3 0 5 0]}}) -> [2 9 7 2 8 3 0 5 0]", "(flattenl {[3 3] {[2 0] {[1 0 3 7 9] {[3 5]}} {[9 6 7 4 3] {[0 4]} {[2 2]}}} {[2 0 1] {[2] {[0 5 1]}}}}) -> [3 3 2 0 1 0 3 7 9 3 5 9 6 7 4 3 0 4 2 2 2 0 1 2 0 5 1]", "(flattenl {[1 9 1] {[0]}}) -> [1 9 1 0]", "(flattenl {[6] {[5 5 8 3] {[6 9] {[2 6 5 9]} {[9 3]}}} {[9 0]}}) -> [6 5 5 8 3 6 9 2 6 5 9 9 3 9 0]", "(flattenl {[6 7 2 3] {[8 2 0 5]} {[8 9 1 9]}}) -> [6 7 2 3 8 2 0 5 8 9 1 9]", "(flattenl {}) -> []", "(flattenl {[1]}) -> [1]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.157659, "name": "flattenl", "examples": ["(flattenl {[2 7 5 1]}) -> [2 7 5 1]", "(flattenl {[8 5 4 5] {[8 8] {[5 0]} {[6]}} {[7 6] {[1]} {[8]}}}) -> [8 5 4 5 8 8 5 0 6 7 6 1 8]", "(flattenl {[3 4 7 6]}) -> [3 4 7 6]", "(flattenl {[3 5] {[3 3 6 1 1]} {[6 8 3 9 9]}}) -> [3 5 3 3 6 1 1 6 8 3 9 9]", "(flattenl {[3 3]}) -> [3 3]", "(flattenl {[7] {[7 6 9]}}) -> [7 7 6 9]", "(flattenl {[6 7 9 9] {[2]}}) -> [6 7 9 9 2]", "(flattenl {}) -> []", "(flattenl {[1 6 2 9] {[7 0 1 1 1]}}) -> [1 6 2 9 7 0 1 1 1]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[4 9 8] {[0 3] {[8 5 9 7 2]} {[] {[8 4 4]} {[5 0 6]}}}}) -> [4 9 8 0 3 8 5 9 7 2 8 4 4 5 0 6]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.195226, "name": "flattenl", "examples": ["(flattenl {[9 9 9 8]}) -> [9 9 9 8]", "(flattenl {[6]}) -> [6]", "(flattenl {[6] {[7 7 2 9 1] {[7 8 8 7]}}}) -> [6 7 7 2 9 1 7 8 8 7]", "(flattenl {[8 7 1] {[8 1] {[7]} {[]}}}) -> [8 7 1 8 1 7]", "(flattenl {[2] {[0 0 5 1]}}) -> [2 0 0 5 1]", "(flattenl {[]}) -> []", "(flattenl {}) -> []", "(flattenl {[5 1]}) -> [5 1]", "(flattenl {[1 5 8 6 5]}) -> [1 5 8 6 5]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[0 8 6 7 8] {[7 3 2 6]} {[1 8 3 1]}}) -> [0 8 6 7 8 7 3 2 6 1 8 3 1]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.127462, "name": "flattenl", "examples": ["(flattenl {[] {[7]}}) -> [7]", "(flattenl {[2] {[1] {[6 1 0 4]}} {[7 5] {[7 8 3]}}}) -> [2 1 6 1 0 4 7 5 7 8 3]", "(flattenl {[4]}) -> [4]", "(flattenl {[7 6 5 2 0]}) -> [7 6 5 2 0]", "(flattenl {[0 3 3] {[4]}}) -> [0 3 3 4]", "(flattenl {[6 8 5]}) -> [6 8 5]", "(flattenl {}) -> []", "(flattenl {[] {[2]}}) -> [2]", "(flattenl {[4 8 2 0]}) -> [4 8 2 0]", "(flattenl {[0 7 7 2] {[9 0 6 1 6] {[2] {[1 9 2]}} {[2] {[0]}}} {[0 1 0 4 3]}}) -> [0 7 7 2 9 0 6 1 6 2 1 9 2 2 0 0 1 0 4 3]", "(flattenl {}) -> []", "(flattenl {[8 3 0 9 7] {[] {[8]}} {[] {[3 6 0]} {[]}}}) -> [8 3 0 9 7 8 3 6 0]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.149575, "name": "flattenl", "examples": ["(flattenl {[0 6 9]}) -> [0 6 9]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[] {[]} {[0 0 4 4 1] {[]} {[9 0 2]}}}) -> [0 0 4 4 1 9 0 2]", "(flattenl {[4 3 4 1] {[7 7] {[4 5 3 6 4]} {[8 9 9 2 3]}} {[]}}) -> [4 3 4 1 7 7 4 5 3 6 4 8 9 9 2 3]", "(flattenl {[] {[8 2 1 0 5] {[1]} {[3]}} {[1 6 3] {[4 3 3 4]}}}) -> [8 2 1 0 5 1 3 1 6 3 4 3 3 4]", "(flattenl {[9 0 8 6]}) -> [9 0 8 6]", "(flattenl {[9 9 1]}) -> [9 9 1]", "(flattenl {[5] {[2 6 3 4 0] {[1 1]} {[4]}}}) -> [5 2 6 3 4 0 1 1 4]", "(flattenl {[] {[9] {[]}}}) -> [9]", "(flattenl {[1 0 1 1 1] {[]} {[] {[]}}}) -> [1 0 1 1 1]", "(flattenl {[]}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.212245, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[7 6 3 5] {[4 9] {[4] {[6]}} {[7] {[0]}}} {[7] {[2 2 2] {[3 2 8 5 6]} {[8]}}}}) -> [7 6 3 5 4 9 4 6 7 0 7 2 2 2 3 2 8 5 6 8]", "(flattenl {[5 1]}) -> [5 1]", "(flattenl {[5 2 9 5] {[1 9]} {[1 8]}}) -> [5 2 9 5 1 9 1 8]", "(flattenl {[] {[6 8 8 2 7] {[] {[]}} {[4 3 7 0 4] {[5]} {[]}}}}) -> [6 8 8 2 7 4 3 7 0 4 5]", "(flattenl {[3 0 4 9] {[3 5 2 7] {[7 2 3]} {[0 7 1 5 8] {[5 1]}}}}) -> [3 0 4 9 3 5 2 7 7 2 3 0 7 1 5 8 5 1]", "(flattenl {[5 9 5 2 2] {[6 8 1 2 4] {[1 4 3] {[5 2 6 2 1]} {[9 5]}}} {[] {[5 9 3 3] {[1]} {[]}}}}) -> [5 9 5 2 2 6 8 1 2 4 1 4 3 5 2 6 2 1 9 5 5 9 3 3 1]", "(flattenl {[9 1 9 5] {[4 1] {[1] {[3]} {[0 3 6 5 9]}}}}) -> [9 1 9 5 4 1 1 3 0 3 6 5 9]", "(flattenl {[6 8 8 9 8] {[3 2 7 7 8] {[4 7 1]}} {[7 0] {[0] {[6]}}}}) -> [6 8 8 9 8 3 2 7 7 8 4 7 1 7 0 0 6]", "(flattenl {}) -> []", "(flattenl {[] {[2 7 6 3]} {[4 2] {[5]}}}) -> [2 7 6 3 4 2 5]", "(flattenl {[] {[] {[9 1 4]}} {[5] {[3 6 2 5 9]} {[9 4]}}}) -> [9 1 4 5 3 6 2 5 9 9 4]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.126087, "name": "flattenl", "examples": ["(flattenl {[2 3 6 1] {[2 5 2 1]} {[2 7 2 4 8]}}) -> [2 3 6 1 2 5 2 1 2 7 2 4 8]", "(flattenl {[2 8]}) -> [2 8]", "(flattenl {}) -> []", "(flattenl {[0 2 7]}) -> [0 2 7]", "(flattenl {[8 0 1 2] {[8 7 9 8 6]} {[9 6]}}) -> [8 0 1 2 8 7 9 8 6 9 6]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {[]}) -> []", "(flattenl {[2]}) -> [2]", "(flattenl {[1 4] {[4 0 6 6 6] {[5 8 9 8] {[]}} {[1 8 2 4 3] {[3]}}}}) -> [1 4 4 0 6 6 6 5 8 9 8 1 8 2 4 3 3]", "(flattenl {[8 5]}) -> [8 5]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.147653, "name": "flattenl", "examples": ["(flattenl {[9 7] {[] {[6 8 5 7 5]}} {[0] {[2 7 0]} {[5 9]}}}) -> [9 7 6 8 5 7 5 0 2 7 0 5 9]", "(flattenl {[4 7 9] {[9 1 3 3] {[9 9] {[2 5 7 5]} {[6 0 0 3]}} {[3]}}}) -> [4 7 9 9 1 3 3 9 9 2 5 7 5 6 0 0 3 3]", "(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {[9 6 3 1 4] {[2 9 4 6 5]}}) -> [9 6 3 1 4 2 9 4 6 5]", "(flattenl {[8 6] {[2 9 5]} {[7 1]}}) -> [8 6 2 9 5 7 1]", "(flattenl {[6 3 7 7] {[4 0 3 0 6]} {[7 0 5 4]}}) -> [6 3 7 7 4 0 3 0 6 7 0 5 4]", "(flattenl {[2 4 3 3] {[8] {[6]} {[6 4 9]}}}) -> [2 4 3 3 8 6 6 4 9]", "(flattenl {}) -> []", "(flattenl {[7] {[8 8]} {[] {[2 9 7]}}}) -> [7 8 8 2 9 7]", "(flattenl {[]}) -> []", "(flattenl {[] {[8 3] {[]}}}) -> [8 3]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.142754, "name": "flattenl", "examples": ["(flattenl {[0 7 5 0 9] {[5 1 1 4]} {[8 4 7 5 6] {[1 1] {[]}} {[]}}}) -> [0 7 5 0 9 5 1 1 4 8 4 7 5 6 1 1]", "(flattenl {[8 0]}) -> [8 0]", "(flattenl {}) -> []", "(flattenl {[3] {[]} {[6 0 7 5]}}) -> [3 6 0 7 5]", "(flattenl {[] {[7 8 2]}}) -> [7 8 2]", "(flattenl {[4 9 1 0 5] {[] {[2 8 6] {[9 2]}}}}) -> [4 9 1 0 5 2 8 6 9 2]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[] {[7 7 6] {[1 1]}}}) -> [7 7 6 1 1]", "(flattenl {}) -> []", "(flattenl {[5 9 7 4 4] {[1 7 4]}}) -> [5 9 7 4 4 1 7 4]", "(flattenl {[7 5 0]}) -> [7 5 0]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.154458, "name": "flattenl", "examples": ["(flattenl {[4] {[6 4 7 6 3] {[] {[5 0 6]} {[1 5 9 5]}} {[9 6 2 9 7] {[8 1 3 0]}}}}) -> [4 6 4 7 6 3 5 0 6 1 5 9 5 9 6 2 9 7 8 1 3 0]", "(flattenl {[9 5] {[2 3 5 9]} {[7 0 2 9 3]}}) -> [9 5 2 3 5 9 7 0 2 9 3]", "(flattenl {[4 8 0] {[7 6]}}) -> [4 8 0 7 6]", "(flattenl {[5 3 2]}) -> [5 3 2]", "(flattenl {[4] {[2 7 7 3 6] {[1 5 6] {[4]} {[5 8]}}} {[3 0 1] {[] {[3 6]} {[1 7 5]}} {[9 8 7 8] {[0 1]}}}}) -> [4 2 7 7 3 6 1 5 6 4 5 8 3 0 1 3 6 1 7 5 9 8 7 8 0 1]", "(flattenl {[3 4 5 4 8] {[7 8 6 2 5] {[3 4 5]} {[1 1 2 7] {[9 2 5 3 0]} {[5 4 1]}}}}) -> [3 4 5 4 8 7 8 6 2 5 3 4 5 1 1 2 7 9 2 5 3 0 5 4 1]", "(flattenl {[7 6 5 0] {[]} {[7]}}) -> [7 6 5 0 7]", "(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {[0 3 5 8] {[2 7 5 8] {[9 1 2 4] {[1 7 4 9 9]} {[0]}}}}) -> [0 3 5 8 2 7 5 8 9 1 2 4 1 7 4 9 9 0]", "(flattenl {[7 6 9 8 3] {[1 8]} {[]}}) -> [7 6 9 8 3 1 8]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.127108, "name": "flattenl", "examples": ["(flattenl {[4] {[3 3 7 6 0]}}) -> [4 3 3 7 6 0]", "(flattenl {[6 7 2 3 6] {[]} {[2 8 2]}}) -> [6 7 2 3 6 2 8 2]", "(flattenl {[6 9]}) -> [6 9]", "(flattenl {[] {[6 5]}}) -> [6 5]", "(flattenl {[0] {[8 3 6 3 6] {[] {[8 0]} {[]}}} {[]}}) -> [0 8 3 6 3 6 8 0]", "(flattenl {[5 6 0]}) -> [5 6 0]", "(flattenl {[6 7 4 4]}) -> [6 7 4 4]", "(flattenl {[6 4 7 7]}) -> [6 4 7 7]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[1 5]}) -> [1 5]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.153267, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[0 3 2 3]}) -> [0 3 2 3]", "(flattenl {}) -> []", "(flattenl {[6 0 8 8 0]}) -> [6 0 8 8 0]", "(flattenl {[6 1 5]}) -> [6 1 5]", "(flattenl {[6 7] {[7 6]} {[5 8 9 5]}}) -> [6 7 7 6 5 8 9 5]", "(flattenl {[2 7]}) -> [2 7]", "(flattenl {[]}) -> []", "(flattenl {[1 6] {[2 0 3 3 7] {[8 9]} {[4 7] {[9 8 8 8 0]} {[]}}} {[6] {[7 2 5 4 4]} {[1] {[4 5 9 2]} {[8 0 0 7]}}}}) -> [1 6 2 0 3 3 7 8 9 4 7 9 8 8 8 0 6 7 2 5 4 4 1 4 5 9 2 8 0 0 7]", "(flattenl {}) -> []", "(flattenl {[1] {[4 6 1] {[9 0]}} {[7 1]}}) -> [1 4 6 1 9 0 7 1]", "(flattenl {[0 7 5 7 4]}) -> [0 7 5 7 4]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.16821, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[3 2] {[5 5 5 5 4] {[]}} {[5]}}}) -> [3 2 5 5 5 5 4 5]", "(flattenl {[2 6 7 7 1] {[0] {[7 1]} {[9 9 3 5]}}}) -> [2 6 7 7 1 0 7 1 9 9 3 5]", "(flattenl {}) -> []", "(flattenl {[5 6 2 5] {[9 4] {[5 1 4 2 5]} {[3 1 5]}}}) -> [5 6 2 5 9 4 5 1 4 2 5 3 1 5]", "(flattenl {}) -> []", "(flattenl {[6 7]}) -> [6 7]", "(flattenl {}) -> []", "(flattenl {[] {[6 8 4] {[9 5 6 6]}}}) -> [6 8 4 9 5 6 6]", "(flattenl {}) -> []", "(flattenl {[5 5 6 4 0] {[6 8 7 9]} {[3 3 5]}}) -> [5 5 6 4 0 6 8 7 9 3 3 5]", "(flattenl {[2 3 8] {[1 2 1 5] {[6 6 5 3 0]}} {[7 5 7 4 8]}}) -> [2 3 8 1 2 1 5 6 6 5 3 0 7 5 7 4 8]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.176169, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[6 9 1] {[3]} {[0] {[8 7 6]}}}) -> [6 9 1 3 0 8 7 6]", "(flattenl {[6 4 4 1 3] {[8 8 3 5 9] {[0 1]}}}) -> [6 4 4 1 3 8 8 3 5 9 0 1]", "(flattenl {[5 1 6] {[3 3]}}) -> [5 1 6 3 3]", "(flattenl {[3 4]}) -> [3 4]", "(flattenl {[0 6 7] {[2 0 8]} {[7 3 5]}}) -> [0 6 7 2 0 8 7 3 5]", "(flattenl {[7 0 3 7 8]}) -> [7 0 3 7 8]", "(flattenl {[4 2]}) -> [4 2]", "(flattenl {[2]}) -> [2]", "(flattenl {[2 0] {[] {[8 4]} {[1]}}}) -> [2 0 8 4 1]", "(flattenl {[7 3 1] {[2 6 6] {[9 5 2 9]} {[1 7 3]}} {[1 2 3]}}) -> [7 3 1 2 6 6 9 5 2 9 1 7 3 1 2 3]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.170543, "name": "flattenl", "examples": ["(flattenl {[] {[6 2 8 3 8] {[]} {[3 4 4 0 5]}} {[9 5 7 9] {[8]} {[0 8 8]}}}) -> [6 2 8 3 8 3 4 4 0 5 9 5 7 9 8 0 8 8]", "(flattenl {[] {[]} {[4 9 0 4 5]}}) -> [4 9 0 4 5]", "(flattenl {[2 7] {[3 5]}}) -> [2 7 3 5]", "(flattenl {}) -> []", "(flattenl {[2 8 4]}) -> [2 8 4]", "(flattenl {[6 9] {[7 8 7] {[1 2 8] {[7 6 7]}}}}) -> [6 9 7 8 7 1 2 8 7 6 7]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[0 1 5] {[6 8] {[] {[7]} {[]}} {[5]}} {[] {[2 5 6 0]} {[9 0 8 9 8] {[8 2]}}}}) -> [0 1 5 6 8 7 5 2 5 6 0 9 0 8 9 8 8 2]", "(flattenl {[8 1 5 0]}) -> [8 1 5 0]", "(flattenl {[2 2]}) -> [2 2]", "(flattenl {[]}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.146186, "name": "flattenl", "examples": ["(flattenl {[9 3 6 1 5] {[3 9 0]}}) -> [9 3 6 1 5 3 9 0]", "(flattenl {[6 8 7] {[] {[5 5]}}}) -> [6 8 7 5 5]", "(flattenl {[7 4] {[7 2]}}) -> [7 4 7 2]", "(flattenl {[7 0 0 8 5] {[1 4 1] {[]}} {[5 2 4 9] {[0 7]} {[4]}}}) -> [7 0 0 8 5 1 4 1 5 2 4 9 0 7 4]", "(flattenl {[1 3 9 1] {[1 7 5] {[1 9 1 9]} {[2 5 6 0 4]}} {[6 6 3] {[4 2 3]}}}) -> [1 3 9 1 1 7 5 1 9 1 9 2 5 6 0 4 6 6 3 4 2 3]", "(flattenl {[4 9 3 1] {[8 0]}}) -> [4 9 3 1 8 0]", "(flattenl {[9 0] {[1] {[9 3 8]}}}) -> [9 0 1 9 3 8]", "(flattenl {[4 4] {[1 5 4] {[]}}}) -> [4 4 1 5 4]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[9 0 3 1 3] {[1]} {[0 8 7 5 1]}}) -> [9 0 3 1 3 1 0 8 7 5 1]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.17042, "name": "flattenl", "examples": ["(flattenl {[5] {[0 6 6 9 2] {[4 8 1] {[2]} {[9 0]}} {[2] {[]}}} {[4 3 0 6] {[] {[1]}}}}) -> [5 0 6 6 9 2 4 8 1 2 9 0 2 4 3 0 6 1]", "(flattenl {[4 7 3]}) -> [4 7 3]", "(flattenl {[1 2 3 4 5]}) -> [1 2 3 4 5]", "(flattenl {[3 9 4 0 0] {[]} {[4]}}) -> [3 9 4 0 0 4]", "(flattenl {[6 1 7]}) -> [6 1 7]", "(flattenl {[6 3 5 3] {[3]} {[0]}}) -> [6 3 5 3 3 0]", "(flattenl {}) -> []", "(flattenl {[1 6 2 6 3] {[]}}) -> [1 6 2 6 3]", "(flattenl {}) -> []", "(flattenl {[] {[4 8] {[8 5]}}}) -> [4 8 8 5]", "(flattenl {[4] {[9 7]}}) -> [4 9 7]", "(flattenl {[4] {[] {[9] {[]}}} {[6]}}) -> [4 9 6]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.139685, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[8] {[5 8 8 5 9] {[]}}}) -> [8 5 8 8 5 9]", "(flattenl {}) -> []", "(flattenl {[4 5 7 5 5]}) -> [4 5 7 5 5]", "(flattenl {[6 0 5] {[1] {[] {[5 1 8]}} {[5]}} {[]}}) -> [6 0 5 1 5 1 8 5]", "(flattenl {[6 4 7] {[1]}}) -> [6 4 7 1]", "(flattenl {[6 6 0] {[] {[3 6 8] {[5 1 5 3 8]}}} {[5 7 3] {[] {[3 6 4]}}}}) -> [6 6 0 3 6 8 5 1 5 3 8 5 7 3 3 6 4]", "(flattenl {[5 6 3 2 8] {[4] {[6 2 4 6 8]}} {[6 0 9 7 4]}}) -> [5 6 3 2 8 4 6 2 4 6 8 6 0 9 7 4]", "(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {}) -> []", "(flattenl {[1]}) -> [1]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.153386, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[0 4 2 4]}) -> [0 4 2 4]", "(flattenl {[8 5] {[] {[2 4 7]} {[9 7 6 3 8]}}}) -> [8 5 2 4 7 9 7 6 3 8]", "(flattenl {[3 0] {[0] {[6 8 5 5] {[3 1 0 9]}} {[8 9 1 6 1]}}}) -> [3 0 0 6 8 5 5 3 1 0 9 8 9 1 6 1]", "(flattenl {[4 1] {[7 5]} {[7]}}) -> [4 1 7 5 7]", "(flattenl {[6 0 9 3 5] {[]} {[5 0 5]}}) -> [6 0 9 3 5 5 0 5]", "(flattenl {[5 1 9 3 5]}) -> [5 1 9 3 5]", "(flattenl {[9 8 8]}) -> [9 8 8]", "(flattenl {[]}) -> []", "(flattenl {[] {[7]}}) -> [7]", "(flattenl {[0 0 8]}) -> [0 0 8]", "(flattenl {[9]}) -> [9]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.236459, "name": "flattenl", "examples": ["(flattenl {[1 2 8 5] {[6]}}) -> [1 2 8 5 6]", "(flattenl {[6 0 9] {[6 4 7 2]}}) -> [6 0 9 6 4 7 2]", "(flattenl {[9 8] {[4 2]} {[0 1 8 7]}}) -> [9 8 4 2 0 1 8 7]", "(flattenl {[]}) -> []", "(flattenl {[6 8 6 9 3] {[5 8 9 6]} {[3 9 2 6]}}) -> [6 8 6 9 3 5 8 9 6 3 9 2 6]", "(flattenl {[4] {[1 4 2 5 1]} {[9 9 2 1]}}) -> [4 1 4 2 5 1 9 9 2 1]", "(flattenl {[5] {[5 1] {[] {[0]}}} {[6 2]}}) -> [5 5 1 0 6 2]", "(flattenl {[4 9] {[7 8 6 0 7]}}) -> [4 9 7 8 6 0 7]", "(flattenl {[] {[5 3 1]}}) -> [5 3 1]", "(flattenl {[5 4] {[7 8 5]} {[8]}}) -> [5 4 7 8 5 8]", "(flattenl {[7] {[3] {[5 0 0 7]}}}) -> [7 3 5 0 0 7]", "(flattenl {[0 7] {[3 3 2 1 4]}}) -> [0 7 3 3 2 1 4]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.082567, "name": "flattenl", "examples": ["(flattenl {[1] {[4 5 0]}}) -> [1 4 5 0]", "(flattenl {[5 1 8 9] {[6]} {[5 0 3 6 7] {[1 2 8 7 4] {[9 0 5 2]} {[5 2]}}}}) -> [5 1 8 9 6 5 0 3 6 7 1 2 8 7 4 9 0 5 2 5 2]", "(flattenl {[6]}) -> [6]", "(flattenl {[] {[] {[0 4]}} {[]}}) -> [0 4]", "(flattenl {[6 1 9 5] {[9 9 3 7] {[4 0 6 3 5]}}}) -> [6 1 9 5 9 9 3 7 4 0 6 3 5]", "(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {[1 8] {[7 7 5 4]} {[1]}}) -> [1 8 7 7 5 4 1]", "(flattenl {}) -> []", "(flattenl {[3 1] {[]}}) -> [3 1]", "(flattenl {[] {[7 0 0 4]}}) -> [7 0 0 4]", "(flattenl {[9 4 6]}) -> [9 4 6]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.084253, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[9] {[6 2 2]} {[0 9 1 1 9]}}) -> [9 6 2 2 0 9 1 1 9]", "(flattenl {}) -> []", "(flattenl {[5 6 6]}) -> [5 6 6]", "(flattenl {[6 0 3 6 0]}) -> [6 0 3 6 0]", "(flattenl {[0 4 9 2]}) -> [0 4 9 2]", "(flattenl {}) -> []", "(flattenl {[1 5 3]}) -> [1 5 3]", "(flattenl {[] {[] {[5 6 4] {[6 3]} {[1 9]}}} {[6 3 0] {[7 4]}}}) -> [5 6 4 6 3 1 9 6 3 0 7 4]", "(flattenl {}) -> []", "(flattenl {[4 5 3] {[4] {[2]}}}) -> [4 5 3 4 2]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.085448, "name": "flattenl", "examples": ["(flattenl {[7 0 6] {[7 3 2 3 8] {[1 7 4 3] {[]}} {[8 3 0 6 4]}}}) -> [7 0 6 7 3 2 3 8 1 7 4 3 8 3 0 6 4]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[5 3 0 3]}) -> [5 3 0 3]", "(flattenl {}) -> []", "(flattenl {[] {[3 6] {[8 3] {[8]}} {[6]}}}) -> [3 6 8 3 8 6]", "(flattenl {[0 0 6 8 9] {[0 7 9 1 4]} {[0 2 8 9 2]}}) -> [0 0 6 8 9 0 7 9 1 4 0 2 8 9 2]", "(flattenl {[0 8 4]}) -> [0 8 4]", "(flattenl {[] {[5 7 1]}}) -> [5 7 1]", "(flattenl {}) -> []", "(flattenl {[3 8] {[6 3] {[] {[2 7 8]}}} {[5 0 3 8] {[9] {[5 9 1]} {[1 9]}} {[]}}}) -> [3 8 6 3 2 7 8 5 0 3 8 9 5 9 1 1 9]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.083131, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[9 1 4 6]}) -> [9 1 4 6]", "(flattenl {[6] {[0 3 7]} {[5]}}) -> [6 0 3 7 5]", "(flattenl {[7]}) -> [7]", "(flattenl {}) -> []", "(flattenl {[6 9 2 0] {[9 8 9 2 2]}}) -> [6 9 2 0 9 8 9 2 2]", "(flattenl {[8 7] {[6]} {[6 5] {[9 5 6 4 6]} {[0 1 9]}}}) -> [8 7 6 6 5 9 5 6 4 6 0 1 9]", "(flattenl {[] {[2 0 1] {[7 2 5] {[4 8 6]} {[4 1 1]}} {[2 4 8 9 8] {[3]} {[0 6 3 4 7]}}}}) -> [2 0 1 7 2 5 4 8 6 4 1 1 2 4 8 9 8 3 0 6 3 4 7]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[1 4] {[]}}) -> [1 4]", "(flattenl {[1 0 6 9 7] {[5 5 9 1 6] {[7 1 1 7] {[2 2 0 0]}} {[]}}}) -> [1 0 6 9 7 5 5 9 1 6 7 1 1 7 2 2 0 0]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
