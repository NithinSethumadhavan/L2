{"time": 0.000404, "examples": ["(incrs []) -> []", "(incrs [[]]) -> [[]]", "(incrs []) -> []"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) b) _) _)"}
{"time": 0.311689, "examples": ["(incrs []) -> []", "(incrs [[]]) -> [[]]", "(incrs [[7 9] [8 9 2 4 8]]) -> [[8 10] [9 10 3 5 9]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.381077, "examples": ["(incrs []) -> []", "(incrs [[3 3 1]]) -> [[4 4 2]]", "(incrs [[8 1 7] [] [8 0 1]]) -> [[9 2 8] [] [9 1 2]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.354405, "examples": ["(incrs []) -> []", "(incrs [[]]) -> [[]]", "(incrs [[0 0 8 4] [0 1 2 9] [2 9 8 3]]) -> [[1 1 9 5] [1 2 3 10] [3 10 9 4]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.4394, "examples": ["(incrs []) -> []", "(incrs [[6 5 8 1 8] [6 7 8] [] [] [4]]) -> [[7 6 9 2 9] [7 8 9] [] [] [5]]", "(incrs [[7 6 7] [4 1 0 0 8] [] [9 2] [5]]) -> [[8 7 8] [5 2 1 1 9] [] [10 3] [6]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.453421, "examples": ["(incrs []) -> []", "(incrs [[2 6 2 2] [8 2 6 0 1] [0] [1 0 2] [3 9 3 5]]) -> [[3 7 3 3] [9 3 7 1 2] [1] [2 1 3] [4 10 4 6]]", "(incrs [[] [8]]) -> [[] [9]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.443579, "examples": ["(incrs []) -> []", "(incrs [[] [6 8 9 9] [5 8 5 5]]) -> [[] [7 9 10 10] [6 9 6 6]]", "(incrs [[1 1 0 5] [2 4 5] [] [2] [6 8]]) -> [[2 2 1 6] [3 5 6] [] [3] [7 9]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.456755, "examples": ["(incrs []) -> []", "(incrs [[2] [3 8 1] [7]]) -> [[3] [4 9 2] [8]]", "(incrs [[0 0 6 9] [2] [0 0 6]]) -> [[1 1 7 10] [3] [1 1 7]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.721782, "examples": ["(incrs []) -> []", "(incrs [[5] [2 2] [9 3 2 3] [5 4 8 7] [8]]) -> [[6] [3 3] [10 4 3 4] [6 5 9 8] [9]]", "(incrs []) -> []"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.723968, "examples": ["(incrs []) -> []", "(incrs [[6 0 4] [4 5 5 9 7]]) -> [[7 1 5] [5 6 6 10 8]]", "(incrs [[4 9 8 0] [] [1 9 7 1 5] [] [4 1 5 8 9]]) -> [[5 10 9 1] [] [2 10 8 2 6] [] [5 2 6 9 10]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.6761, "examples": ["(incrs []) -> []", "(incrs [[2 7 9] [1] [3 4 3 8] [] []]) -> [[3 8 10] [2] [4 5 4 9] [] []]", "(incrs [[4 8 1 6]]) -> [[5 9 2 7]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.70384, "examples": ["(incrs []) -> []", "(incrs [[3 7 5] [9 3]]) -> [[4 8 6] [10 4]]", "(incrs [[0 1] [3 3 9 3 3] [9 6 6] [3 4]]) -> [[1 2] [4 4 10 4 4] [10 7 7] [4 5]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.693047, "examples": ["(incrs []) -> []", "(incrs [[3 4 9] [2 5 0] [] [2 4] [8 9 1 0]]) -> [[4 5 10] [3 6 1] [] [3 5] [9 10 2 1]]", "(incrs []) -> []"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.70756, "examples": ["(incrs []) -> []", "(incrs [[5 6] [] [4 9 4]]) -> [[6 7] [] [5 10 5]]", "(incrs [[6 3 4 5 8] [4 5 7 7]]) -> [[7 4 5 6 9] [5 6 8 8]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.693344, "examples": ["(incrs []) -> []", "(incrs [[] [7 3 2 0 9] [4 4 5] [2 3 1 3] [4 7 6 4]]) -> [[] [8 4 3 1 10] [5 5 6] [3 4 2 4] [5 8 7 5]]", "(incrs [[7 9 7]]) -> [[8 10 8]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.769471, "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[6 1] [9 7 8 7] [2] [2 4 0] [6 0 1 4]]) -> [[7 2] [10 8 9 8] [3] [3 5 1] [7 1 2 5]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.746375, "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[2 2] [7 4 1 3] [8 0 8 1 9] [] [6 5]]) -> [[3 3] [8 5 2 4] [9 1 9 2 10] [] [7 6]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.350142, "examples": ["(incrs []) -> []", "(incrs [[3] [3] [1 1 7 5]]) -> [[4] [4] [2 2 8 6]]", "(incrs [[] [2] [2 6 7 4 3] [] [2 7 2]]) -> [[] [3] [3 7 8 5 4] [] [3 8 3]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.345409, "examples": ["(incrs []) -> []", "(incrs [[] [6 0 8 1] [2 3] [3 4]]) -> [[] [7 1 9 2] [3 4] [4 5]]", "(incrs [[3 4 1 5]]) -> [[4 5 2 6]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.378993, "examples": ["(incrs []) -> []", "(incrs [[8 8 9 1 3] [] [5 3 2 7] [4 2 2] [8 1 8 1 6]]) -> [[9 9 10 2 4] [] [6 4 3 8] [5 3 3] [9 2 9 2 7]]", "(incrs [[3] [8] [] [1]]) -> [[4] [9] [] [2]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.589891, "examples": ["(incrs []) -> []", "(incrs [[0 0 5 9 0] [1 6 9 3] [1 1 8 1] [] [1 8 2]]) -> [[1 1 6 10 1] [2 7 10 4] [2 2 9 2] [] [2 9 3]]", "(incrs []) -> []"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.359808, "examples": ["(incrs []) -> []", "(incrs [[0 2 0] [7 7 8] [6 6 5 9 8] [3 5 7 0 9] [6 6 4 0 4]]) -> [[1 3 1] [8 8 9] [7 7 6 10 9] [4 6 8 1 10] [7 7 5 1 5]]", "(incrs [[7 1 8] [9 5 3 0]]) -> [[8 2 9] [10 6 4 1]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.490809, "examples": ["(incrs []) -> []", "(incrs [[0 0] [4 6 1] [1 3 7 8 3]]) -> [[1 1] [5 7 2] [2 4 8 9 4]]", "(incrs [[7] [2 6 3 1 1]]) -> [[8] [3 7 4 2 2]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.354541, "examples": ["(incrs []) -> []", "(incrs [[3 3 7 3] [8] [6 4 4] [0 1 7] []]) -> [[4 4 8 4] [9] [7 5 5] [1 2 8] []]", "(incrs []) -> []"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.339616, "examples": ["(incrs []) -> []", "(incrs [[8 8 0 0] [8 8 3 5 9] [6 9 2] [1 2 4] []]) -> [[9 9 1 1] [9 9 4 6 10] [7 10 3] [2 3 5] []]", "(incrs []) -> []"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.625632, "examples": ["(incrs []) -> []", "(incrs [[9] [1 8 8] [0 9 5 4 5]]) -> [[10] [2 9 9] [1 10 6 5 6]]", "(incrs [[3 0] [6] [4] [5 9 0 0 9]]) -> [[4 1] [7] [5] [6 10 1 1 10]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.297144, "examples": ["(incrs []) -> []", "(incrs [[0 4]]) -> [[1 5]]", "(incrs [[5 4 9 4 7] [9] [8 4] [3 6 9] [3 7 6]]) -> [[6 5 10 5 8] [10] [9 5] [4 7 10] [4 8 7]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.308792, "examples": ["(incrs []) -> []", "(incrs [[3 4 3 1] [2 8 6 7 3]]) -> [[4 5 4 2] [3 9 7 8 4]]", "(incrs []) -> []"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.609954, "examples": ["(incrs []) -> []", "(incrs [[] [6 8 9 1 2] [9 9 1 4 1]]) -> [[] [7 9 10 2 3] [10 10 2 5 2]]", "(incrs [[5 1 1]]) -> [[6 2 2]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": "timeout", "examples": ["(incrs []) -> []", "(incrs [[7 0 5] [5 7 8 9]]) -> [[8 1 6] [6 8 9 10]]", "(incrs [[1 7 2 3] []]) -> [[2 8 3 4] []]"], "name": "incrs"}
{"time": 0.684054, "examples": ["(incrs []) -> []", "(incrs [[4] [9] [] [5 8 7 3]]) -> [[5] [10] [] [6 9 8 4]]", "(incrs []) -> []"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.770316, "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[3 3] [2 8 4 6 1] [0 0 3 5] [] [8 7]]) -> [[4 4] [3 9 5 7 2] [1 1 4 6] [] [9 8]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.767093, "examples": ["(incrs []) -> []", "(incrs [[7 1] [] [9 6] [8]]) -> [[8 2] [] [10 7] [9]]", "(incrs []) -> []"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.769869, "examples": ["(incrs []) -> []", "(incrs [[8] [4 4 1] [5] [1 6 2]]) -> [[9] [5 5 2] [6] [2 7 3]]", "(incrs [[5 1 0 4] [9] [1 0 7] [7 1 1 4 9] [8 2 4 7]]) -> [[6 2 1 5] [10] [2 1 8] [8 2 2 5 10] [9 3 5 8]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.337324, "examples": ["(incrs []) -> []", "(incrs [[9 7]]) -> [[10 8]]", "(incrs [[5 7 5] [3 5 7] [5] [1]]) -> [[6 8 6] [4 6 8] [6] [2]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.000482, "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs []) -> []"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) []) _) _)"}
{"time": 0.000534, "examples": ["(incrs []) -> []", "(incrs [[]]) -> [[]]", "(incrs []) -> []"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) b) _) _)"}
{"time": 0.804189, "examples": ["(incrs []) -> []", "(incrs [[7 6] [4 2 2 1 9] [5 9 3 0] [7 3 3 0 1]]) -> [[8 7] [5 3 3 2 10] [6 10 4 1] [8 4 4 1 2]]", "(incrs [[] [1 1 2]]) -> [[] [2 2 3]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.312903, "examples": ["(incrs []) -> []", "(incrs [[0 2 0]]) -> [[1 3 1]]", "(incrs [[7] [1 1] [1 8 0] [1 4 1 1 1] [2 1 1]]) -> [[8] [2 2] [2 9 1] [2 5 2 2 2] [3 2 2]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.642854, "examples": ["(incrs []) -> []", "(incrs [[3 9 5 8 3] [2 8] [4 2 5 2 0] [0 2 6] [6 5 9 6 2]]) -> [[4 10 6 9 4] [3 9] [5 3 6 3 1] [1 3 7] [7 6 10 7 3]]", "(incrs []) -> []"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.544162, "examples": ["(incrs []) -> []", "(incrs [[7 7 8]]) -> [[8 8 9]]", "(incrs [[4] [7 4 0 9 5] [7 8 7]]) -> [[5] [8 5 1 10 6] [8 9 8]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.38068, "examples": ["(incrs []) -> []", "(incrs [[6 4] [8 9 9 9 2] [2 2 6 4] [7] []]) -> [[7 5] [9 10 10 10 3] [3 3 7 5] [8] []]", "(incrs [[2] [6 3 4] [6 0 8] [7 9] [5 8 1 4 4]]) -> [[3] [7 4 5] [7 1 9] [8 10] [6 9 2 5 5]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.748677, "examples": ["(incrs []) -> []", "(incrs [[9 3 7] [] [9 3 3] [1] [6 1]]) -> [[10 4 8] [] [10 4 4] [2] [7 2]]", "(incrs [[] [5 9 2] [3 4 9] [] []]) -> [[] [6 10 3] [4 5 10] [] []]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.155443, "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[7 6]]) -> [[8 7]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (foldl b (lambda (d c) (foldl d (lambda (f e) d) [[8 7]])) [])) _) _)"}
{"time": 0.537273, "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[6 4 8 7] [3 2 6 4 3] []]) -> [[7 5 9 8] [4 3 7 5 4] []]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.480119, "examples": ["(incrs []) -> []", "(incrs [[1 5 8 8] [0 7] [5] [] [5]]) -> [[2 6 9 9] [1 8] [6] [] [6]]", "(incrs [[6 0 8 6] [8 7 0 9 1] []]) -> [[7 1 9 7] [9 8 1 10 2] []]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.000667, "examples": ["(incrs []) -> []", "(incrs [[]]) -> [[]]", "(incrs []) -> []"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) b) _) _)"}
{"time": 0.425724, "examples": ["(incrs []) -> []", "(incrs [[] [1 8] [0 3 3] [9 0 6]]) -> [[] [2 9] [1 4 4] [10 1 7]]", "(incrs [[] [3 6 8]]) -> [[] [4 7 9]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.333886, "examples": ["(incrs []) -> []", "(incrs [[8 4 5] [2 0] [8 3 9 2] [8 2]]) -> [[9 5 6] [3 1] [9 4 10 3] [9 3]]", "(incrs [[1 5 3 0 3] [] [2 0 8]]) -> [[2 6 4 1 4] [] [3 1 9]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.392297, "examples": ["(incrs []) -> []", "(incrs [[0] [6 3 4] [4 0] [6 7 2 6] [8 4 1 3 5]]) -> [[1] [7 4 5] [5 1] [7 8 3 7] [9 5 2 4 6]]", "(incrs [[7 8 6 3] [3] [5 6] [9 6] [8 9]]) -> [[8 9 7 4] [4] [6 7] [10 7] [9 10]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.387419, "examples": ["(incrs []) -> []", "(incrs [[1 7] [2] [6]]) -> [[2 8] [3] [7]]", "(incrs [[3 1 2] [5 9 7 6] [6 4]]) -> [[4 2 3] [6 10 8 7] [7 5]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.156965, "examples": ["(incrs []) -> []", "(incrs [[3]]) -> [[4]]", "(incrs []) -> []"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (foldl b (lambda (d c) (foldl d (lambda (f e) d) [[4]])) [])) _) _)"}
{"time": 0.437456, "examples": ["(incrs []) -> []", "(incrs [[4 9] [4 9 1 3 0] [] [8 0 0 0]]) -> [[5 10] [5 10 2 4 1] [] [9 1 1 1]]", "(incrs [[3 1 3 8] [4] [0]]) -> [[4 2 4 9] [5] [1]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.42694, "examples": ["(incrs []) -> []", "(incrs [[6 7 3 8] [8 0 0] [9] [6 0 3 7 3]]) -> [[7 8 4 9] [9 1 1] [10] [7 1 4 8 4]]", "(incrs []) -> []"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.517467, "examples": ["(incrs []) -> []", "(incrs [[4 0 7 4 7] [8 8 5] [] [0 6 2]]) -> [[5 1 8 5 8] [9 9 6] [] [1 7 3]]", "(incrs [[2 0 6 3] [2] [2 2] [6 7 9 2 0]]) -> [[3 1 7 4] [3] [3 3] [7 8 10 3 1]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.366959, "examples": ["(incrs []) -> []", "(incrs [[] [6 0 6 8 9]]) -> [[] [7 1 7 9 10]]", "(incrs [[8 2 6 3 0] [] [2] [9 7 2]]) -> [[9 3 7 4 1] [] [3] [10 8 3]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.332125, "examples": ["(incrs []) -> []", "(incrs [[]]) -> [[]]", "(incrs [[3 0 6 5 1]]) -> [[4 1 7 6 2]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.480264, "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[1] [9 2] [2 5 2 5 0]]) -> [[2] [10 3] [3 6 3 6 1]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.366339, "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[8 2 2 5 7] [7 5 7 1] []]) -> [[9 3 3 6 8] [8 6 8 2] []]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.339983, "examples": ["(incrs []) -> []", "(incrs [[3] [7] [8 0 7 3 2]]) -> [[4] [8] [9 1 8 4 3]]", "(incrs [[3 6 0 0] [3 9 7 8]]) -> [[4 7 1 1] [4 10 8 9]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.364479, "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[8 2 8] [3 2 6 0 2] [3 7 2 5] [3 1 9 3] [4 4 6]]) -> [[9 3 9] [4 3 7 1 3] [4 8 3 6] [4 2 10 4] [5 5 7]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.516231, "examples": ["(incrs []) -> []", "(incrs [[5 0 0 8 0] [7 3 4 3] [1 2 8] [9 9 7] [2 6 4 5 2]]) -> [[6 1 1 9 1] [8 4 5 4] [2 3 9] [10 10 8] [3 7 5 6 3]]", "(incrs [[7 9 7 8 9] [0 8]]) -> [[8 10 8 9 10] [1 9]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.275829, "examples": ["(incrs []) -> []", "(incrs [[9]]) -> [[10]]", "(incrs [[0 9 1] [] [1]]) -> [[1 10 2] [] [2]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.613311, "examples": ["(incrs []) -> []", "(incrs [[9 8 3 6] [5 3] [2 3 7]]) -> [[10 9 4 7] [6 4] [3 4 8]]", "(incrs [[1 4 0 8 7] []]) -> [[2 5 1 9 8] []]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.633759, "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[] [8] [3 1] [4 5 3 1] []]) -> [[] [9] [4 2] [5 6 4 2] []]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.623188, "examples": ["(incrs []) -> []", "(incrs [[2 7 1 2] [] [] [2 4 4 3 7]]) -> [[3 8 2 3] [] [] [3 5 5 4 8]]", "(incrs [[7 5 6 7] [5 7 6 1] [8 1] [8 2 5 2] [6 2 3 0]]) -> [[8 6 7 8] [6 8 7 2] [9 2] [9 3 6 3] [7 3 4 1]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.597997, "examples": ["(incrs []) -> []", "(incrs [[7]]) -> [[8]]", "(incrs [[6 0 8 3 4] [2 9] [6 6 2 8] [0 8 1]]) -> [[7 1 9 4 5] [3 10] [7 7 3 9] [1 9 2]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.595554, "examples": ["(incrs []) -> []", "(incrs [[3 1 8 3 7] [2 2] [2 3]]) -> [[4 2 9 4 8] [3 3] [3 4]]", "(incrs []) -> []"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.337778, "examples": ["(incrs []) -> []", "(incrs [[] [0 5] [] [9 8 1]]) -> [[] [1 6] [] [10 9 2]]", "(incrs [[9 9] [4 7] []]) -> [[10 10] [5 8] []]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.358258, "examples": ["(incrs []) -> []", "(incrs [[0 4] [6 6 8 3 5] [3 3 4] []]) -> [[1 5] [7 7 9 4 6] [4 4 5] []]", "(incrs [[4] [3 6]]) -> [[5] [4 7]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.328952, "examples": ["(incrs []) -> []", "(incrs [[5]]) -> [[6]]", "(incrs [[] [8 3 0] [6 4 8] [4 4 4 3]]) -> [[] [9 4 1] [7 5 9] [5 5 5 4]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.555555, "examples": ["(incrs []) -> []", "(incrs [[1 3 9 7 5] [3 9 3 6] [9] [] [2 1 1]]) -> [[2 4 10 8 6] [4 10 4 7] [10] [] [3 2 2]]", "(incrs []) -> []"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.535691, "examples": ["(incrs []) -> []", "(incrs [[9 1 7 8 9] [8] [0 3]]) -> [[10 2 8 9 10] [9] [1 4]]", "(incrs [[0 8] [4 2] [6 3 2 6] [] [7 3 5 7 2]]) -> [[1 9] [5 3] [7 4 3 7] [] [8 4 6 8 3]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.347411, "examples": ["(incrs []) -> []", "(incrs [[7 7] [3] []]) -> [[8 8] [4] []]", "(incrs []) -> []"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.362556, "examples": ["(incrs []) -> []", "(incrs [[] [6 1 3 5] [0 1] [2 2 9 4] [9]]) -> [[] [7 2 4 6] [1 2] [3 3 10 5] [10]]", "(incrs [[6 6 4 3] [5 2 2]]) -> [[7 7 5 4] [6 3 3]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.347209, "examples": ["(incrs []) -> []", "(incrs [[9 2 0] [7 5 3 7 0]]) -> [[10 3 1] [8 6 4 8 1]]", "(incrs []) -> []"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.4711, "examples": ["(incrs []) -> []", "(incrs [[5 6 2 7 6] [2 1 7 2 1] []]) -> [[6 7 3 8 7] [3 2 8 3 2] []]", "(incrs [[4 3] [8 9 9 0] [4 2 9 9] [4 8 4 9] [6 7 8 8]]) -> [[5 4] [9 10 10 1] [5 3 10 10] [5 9 5 10] [7 8 9 9]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.554554, "examples": ["(incrs []) -> []", "(incrs [[0] [0] [4] [4]]) -> [[1] [1] [5] [5]]", "(incrs []) -> []"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.314559, "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[3 9 9 2 1] [2 7]]) -> [[4 10 10 3 2] [3 8]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.456992, "examples": ["(incrs []) -> []", "(incrs [[6 6 8 3]]) -> [[7 7 9 4]]", "(incrs [[2] [4] [2 2 0] [8] []]) -> [[3] [5] [3 3 1] [9] []]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.268609, "examples": ["(incrs []) -> []", "(incrs [[] [7 3 6] [6]]) -> [[] [8 4 7] [7]]", "(incrs [[]]) -> [[]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.365148, "examples": ["(incrs []) -> []", "(incrs [[1 3 5 6 5] [5] [] [6] [9 6 4 3 7]]) -> [[2 4 6 7 6] [6] [] [7] [10 7 5 4 8]]", "(incrs [[8 7 4 1 5] [2 6 3] [1 0 8 2 7] [7 6 3]]) -> [[9 8 5 2 6] [3 7 4] [2 1 9 3 8] [8 7 4]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.356319, "examples": ["(incrs []) -> []", "(incrs [[1 4 5 7 1] [2 4 1 7] [1 5 1 0] [6]]) -> [[2 5 6 8 2] [3 5 2 8] [2 6 2 1] [7]]", "(incrs [[] [9] [7 7 3] [5 8 7] [2 3 3 7 6]]) -> [[] [10] [8 8 4] [6 9 8] [3 4 4 8 7]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.374016, "examples": ["(incrs []) -> []", "(incrs [[4 5 9 7] [4 0] [8 1 0 9] [4 2] [6 4 8 5 3]]) -> [[5 6 10 8] [5 1] [9 2 1 10] [5 3] [7 5 9 6 4]]", "(incrs [[7 6 2 8] [8 5] [6] [7 1 1]]) -> [[8 7 3 9] [9 6] [7] [8 2 2]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.520359, "examples": ["(incrs []) -> []", "(incrs [[] [3 5] [0 3 1] [4 8 3]]) -> [[] [4 6] [1 4 2] [5 9 4]]", "(incrs [[8 4 0 3] [9 3] [] [0 4 9] [2 8]]) -> [[9 5 1 4] [10 4] [] [1 5 10] [3 9]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.235381, "examples": ["(incrs []) -> []", "(incrs [[9 6 7 7] [3 7] [5 7 3]]) -> [[10 7 8 8] [4 8] [6 8 4]]", "(incrs [[]]) -> [[]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.535109, "examples": ["(incrs []) -> []", "(incrs [[0 9 9] [] [5 8 8 7]]) -> [[1 10 10] [] [6 9 9 8]]", "(incrs [[4 8 4 4 5]]) -> [[5 9 5 5 6]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.68759, "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[0 4] [9] [9 1 1] [7 6] [9]]) -> [[1 5] [10] [10 2 2] [8 7] [10]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.242184, "examples": ["(incrs []) -> []", "(incrs [[0 2 8 6] [7 0 2]]) -> [[1 3 9 7] [8 1 3]]", "(incrs [[] [2] [7 0 2 9]]) -> [[] [3] [8 1 3 10]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.648646, "examples": ["(incrs []) -> []", "(incrs [[1 3 7 3 4] [3] [6 7 8 1 3] [4 3]]) -> [[2 4 8 4 5] [4] [7 8 9 2 4] [5 4]]", "(incrs [[6 5 6 1] [] [4 3 0] [8 6 9 6] [4 3 1]]) -> [[7 6 7 2] [] [5 4 1] [9 7 10 7] [5 4 2]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.638925, "examples": ["(incrs []) -> []", "(incrs [[5 5] []]) -> [[6 6] []]", "(incrs [[7] [] [7 3] [5 4]]) -> [[8] [] [8 4] [6 5]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.244472, "examples": ["(incrs []) -> []", "(incrs [[2 3 3 6]]) -> [[3 4 4 7]]", "(incrs []) -> []"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (foldl b (lambda (d c) (foldl d (lambda (f e) d) [[3 4 4 7]])) [])) _) _)"}
{"time": 0.27185, "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[4] [4] [2 3 6] [2 8 3 4]]) -> [[5] [5] [3 4 7] [3 9 4 5]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.615234, "examples": ["(incrs []) -> []", "(incrs [[1 4 1 9 3] [7 4 8 3 5] [3 0 2] [0 6 3] [6 9 3]]) -> [[2 5 2 10 4] [8 5 9 4 6] [4 1 3] [1 7 4] [7 10 4]]", "(incrs [[5 0 5 4] [4 1] [7 8] [1 0 4 9] [1 0]]) -> [[6 1 6 5] [5 2] [8 9] [2 1 5 10] [2 1]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.230963, "examples": ["(incrs []) -> []", "(incrs [[9 2 8]]) -> [[10 3 9]]", "(incrs []) -> []"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (foldl b (lambda (d c) (foldl d (lambda (f e) d) [[10 3 9]])) [])) _) _)"}
{"time": 0.617814, "examples": ["(incrs []) -> []", "(incrs []) -> []", "(incrs [[4 6] [3 5 3 0] [2 5 8 5] [1 7 2 5 9]]) -> [[5 7] [4 6 4 1] [3 6 9 6] [2 8 3 6 10]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.211463, "examples": ["(incrs []) -> []", "(incrs [[8 9 4]]) -> [[9 10 5]]", "(incrs [[] [3 7 1 1] [7 6 3]]) -> [[] [4 8 2 2] [8 7 4]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.492772, "examples": ["(incrs []) -> []", "(incrs [[3 9 9 6] [0 4]]) -> [[4 10 10 7] [1 5]]", "(incrs [[] [1 5 6 2 7] [3 8 2 2] [4 6 5 6 9] [8]]) -> [[] [2 6 7 3 8] [4 9 3 3] [5 7 6 7 10] [9]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.516714, "examples": ["(incrs []) -> []", "(incrs [[0 6] [9 2 2] [] [0] []]) -> [[1 7] [10 3 3] [] [1] []]", "(incrs [[3 5] [5 1 0 7] [0] [0 7] [9 5 3]]) -> [[4 6] [6 2 1 8] [1] [1 8] [10 6 4]]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
{"time": 0.352415, "examples": ["(incrs []) -> []", "(incrs [[9 1] [5 1 3 3 4] [2 2 6 3] [] [7 2]]) -> [[10 2] [6 2 4 4 5] [3 3 7 4] [] [8 3]]", "(incrs [[3 6 8] [5 9] [9] [] []]) -> [[4 7 9] [6 10] [10] [] []]"], "name": "incrs", "solution": "(let incrs (let a (lambda (b) (map b (lambda (c) (map c (lambda (d) (+ 1 d)))))) _) _)"}
