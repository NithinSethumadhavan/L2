{"name": "concat", "time": 0.000405, "examples": ["(concat [9 2 6 1] []) -> [9 2 6 1]", "(concat [7 4] []) -> [7 4]"], "solution": "(let concat (let a (lambda (c b) c) _) _)"}
{"name": "concat", "time": 0.252174, "examples": ["(concat [1 1 8] [7]) -> [1 1 8 7]", "(concat [5 0] []) -> [5 0]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.240433, "examples": ["(concat [5 2 7 7] [7 4 4]) -> [5 2 7 7 7 4 4]", "(concat [2 8 0 8] [9 4 1]) -> [2 8 0 8 9 4 1]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.241131, "examples": ["(concat [7 2] [2]) -> [7 2 2]", "(concat [6 0 4 0] [4 0 6 9]) -> [6 0 4 0 4 0 6 9]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.212172, "examples": ["(concat [1 9] []) -> [1 9]", "(concat [0 9 7 0 6] [8 9]) -> [0 9 7 0 6 8 9]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.212719, "examples": ["(concat [3 5 2 1] [4 6 7]) -> [3 5 2 1 4 6 7]", "(concat [7 9 3 9 8] [6 9]) -> [7 9 3 9 8 6 9]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.24125, "examples": ["(concat [9 9 0] [0 0 5 1]) -> [9 9 0 0 0 5 1]", "(concat [2] [5]) -> [2 5]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.210418, "examples": ["(concat [5 9 1 8 4] [5]) -> [5 9 1 8 4 5]", "(concat [4 9 4 5] [4 4 6 1 7]) -> [4 9 4 5 4 4 6 1 7]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.243788, "examples": ["(concat [0 0] [1 0 0]) -> [0 0 1 0 0]", "(concat [0 1 2 5] [4 5]) -> [0 1 2 5 4 5]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.240595, "examples": ["(concat [] [4 6]) -> [4 6]", "(concat [7 6 1 8] [7 4 7 7]) -> [7 6 1 8 7 4 7 7]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.220141, "examples": ["(concat [8] [1]) -> [8 1]", "(concat [8 6] []) -> [8 6]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.242252, "examples": ["(concat [1] [8 5 8 1]) -> [1 8 5 8 1]", "(concat [6 8 5] [1 7 9]) -> [6 8 5 1 7 9]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.219135, "examples": ["(concat [] [6 1 7 6]) -> [6 1 7 6]", "(concat [0 2] [1 6 9 1 5]) -> [0 2 1 6 9 1 5]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.224013, "examples": ["(concat [] [9 1 9 9 3]) -> [9 1 9 9 3]", "(concat [8 7 1 8 4] [0]) -> [8 7 1 8 4 0]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.235053, "examples": ["(concat [9 6 8] [5]) -> [9 6 8 5]", "(concat [4 3] [8]) -> [4 3 8]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.250409, "examples": ["(concat [0 4 9 1] [3]) -> [0 4 9 1 3]", "(concat [9 7 7] [4]) -> [9 7 7 4]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.184077, "examples": ["(concat [7 1 3 4] [1 4 6]) -> [7 1 3 4 1 4 6]", "(concat [3 4] []) -> [3 4]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.196484, "examples": ["(concat [9 0 9 1] [8 9 0 1 8]) -> [9 0 9 1 8 9 0 1 8]", "(concat [9] [9 5 2 4]) -> [9 9 5 2 4]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.20442, "examples": ["(concat [7] [7 8]) -> [7 7 8]", "(concat [] [3 6]) -> [3 6]"], "solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d b)) b)) _) _)"}
{"name": "concat", "time": 0.21556, "examples": ["(concat [2 7 3] [1 4]) -> [2 7 3 1 4]", "(concat [3 3 7 6] [8 3 4]) -> [3 3 7 6 8 3 4]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.252118, "examples": ["(concat [3 9] [3 8 0 8 2]) -> [3 9 3 8 0 8 2]", "(concat [1 6 1] [2 2 2]) -> [1 6 1 2 2 2]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.256377, "examples": ["(concat [0 9 8 8 5] [5 4]) -> [0 9 8 8 5 5 4]", "(concat [] [5 2 1 4]) -> [5 2 1 4]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.252524, "examples": ["(concat [9 2 1 2 3] []) -> [9 2 1 2 3]", "(concat [4] [9 7]) -> [4 9 7]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.2431, "examples": ["(concat [4 2 2 2] [2 1 5 6 3]) -> [4 2 2 2 2 1 5 6 3]", "(concat [9 5 2 7] []) -> [9 5 2 7]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.239795, "examples": ["(concat [] [2 8 5 5 1]) -> [2 8 5 5 1]", "(concat [4 9 3] [9 2 7 0]) -> [4 9 3 9 2 7 0]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.230013, "examples": ["(concat [4 3] [7 4 7]) -> [4 3 7 4 7]", "(concat [] [4 2 5 9]) -> [4 2 5 9]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.271029, "examples": ["(concat [2 5 3] [7 9 6 9 2]) -> [2 5 3 7 9 6 9 2]", "(concat [] [5 5 4 1 4]) -> [5 5 4 1 4]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.201471, "examples": ["(concat [0 6] [4 9]) -> [0 6 4 9]", "(concat [] [7 2]) -> [7 2]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.260803, "examples": ["(concat [8 8 1 5] [3]) -> [8 8 1 5 3]", "(concat [4 9 7 1 6] [7]) -> [4 9 7 1 6 7]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.201553, "examples": ["(concat [6 4 2] [2 4 0]) -> [6 4 2 2 4 0]", "(concat [6 7 7] [2 1]) -> [6 7 7 2 1]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.21049, "examples": ["(concat [2 1 1 7] []) -> [2 1 1 7]", "(concat [4 1 3 5] [4 4 7 5 8]) -> [4 1 3 5 4 4 7 5 8]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.220107, "examples": ["(concat [2 7 8 0 1] [4 2 0 5]) -> [2 7 8 0 1 4 2 0 5]", "(concat [3] [1]) -> [3 1]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.171895, "examples": ["(concat [9] [3 3 6 1]) -> [9 3 3 6 1]", "(concat [4 0 5 6 1] [1 5 0]) -> [4 0 5 6 1 1 5 0]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.000511, "examples": ["(concat [] [0 4 5]) -> [0 4 5]", "(concat [] []) -> []"], "solution": "(let concat (let a (lambda (c b) b) _) _)"}
{"name": "concat", "time": 0.000617, "examples": ["(concat [9 1 9 4 2] []) -> [9 1 9 4 2]", "(concat [8 9 1] []) -> [8 9 1]"], "solution": "(let concat (let a (lambda (c b) c) _) _)"}
{"name": "concat", "time": 0.000635, "examples": ["(concat [] [9 1]) -> [9 1]", "(concat [] [2]) -> [2]"], "solution": "(let concat (let a (lambda (c b) b) _) _)"}
{"name": "concat", "time": 0.200136, "examples": ["(concat [1 9 0] [7]) -> [1 9 0 7]", "(concat [] [0 2]) -> [0 2]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.206596, "examples": ["(concat [2 1] [0 7 4]) -> [2 1 0 7 4]", "(concat [1 7] [7 0 4 7]) -> [1 7 7 0 4 7]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.204975, "examples": ["(concat [0 2] [1 3 5]) -> [0 2 1 3 5]", "(concat [1] [8 0]) -> [1 8 0]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.191606, "examples": ["(concat [] [1 3 2]) -> [1 3 2]", "(concat [2 2 6 4] [5 7 4 4 1]) -> [2 2 6 4 5 7 4 4 1]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.259532, "examples": ["(concat [1 9 0 6 5] [3 3]) -> [1 9 0 6 5 3 3]", "(concat [] [8 1]) -> [8 1]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.215717, "examples": ["(concat [5 0 0 4] [6 5 4 9]) -> [5 0 0 4 6 5 4 9]", "(concat [8 2 8] [8]) -> [8 2 8 8]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.246078, "examples": ["(concat [0 6] [5 4 5 5 2]) -> [0 6 5 4 5 5 2]", "(concat [6 1] [4 2 7 2 6]) -> [6 1 4 2 7 2 6]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.218025, "examples": ["(concat [6 7 6] []) -> [6 7 6]", "(concat [8 5 1 6 3] [7 3 8 9]) -> [8 5 1 6 3 7 3 8 9]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.201679, "examples": ["(concat [] [5 4 5 5]) -> [5 4 5 5]", "(concat [0 3 2] [7]) -> [0 3 2 7]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.218088, "examples": ["(concat [] [5 8 0 0 8]) -> [5 8 0 0 8]", "(concat [6] [4 5]) -> [6 4 5]"], "solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d b)) b)) _) _)"}
{"name": "concat", "time": 0.271179, "examples": ["(concat [6 7] [3 4 5]) -> [6 7 3 4 5]", "(concat [7 4 7 1 9] []) -> [7 4 7 1 9]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.258488, "examples": ["(concat [] [2 4 6]) -> [2 4 6]", "(concat [5 5 9 2] [1 2]) -> [5 5 9 2 1 2]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.274208, "examples": ["(concat [3 3 1 6 6] [0 0 1]) -> [3 3 1 6 6 0 0 1]", "(concat [7 4 2 7] [1 0]) -> [7 4 2 7 1 0]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.015014, "examples": ["(concat [1] []) -> [1]", "(concat [9] [6 1]) -> [9 6 1]"], "solution": "(let concat (let a (lambda (c b) (cons (car c) b)) _) _)"}
{"name": "concat", "time": 0.218169, "examples": ["(concat [9 9 0 5 3] [3 2]) -> [9 9 0 5 3 3 2]", "(concat [] [1 4]) -> [1 4]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.204584, "examples": ["(concat [4 7 9 8] [3 1 0 9]) -> [4 7 9 8 3 1 0 9]", "(concat [3 8 1 1] [6 0 5]) -> [3 8 1 1 6 0 5]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.19043, "examples": ["(concat [9 9 5] [0 7 0 3]) -> [9 9 5 0 7 0 3]", "(concat [] [6]) -> [6]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.032977, "examples": ["(concat [7 3] []) -> [7 3]", "(concat [] [2 5 0 4 9]) -> [2 5 0 4 9]"], "solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) c) b)) _) _)"}
{"name": "concat", "time": 0.000622, "examples": ["(concat [] []) -> []", "(concat [] [1 0 1]) -> [1 0 1]"], "solution": "(let concat (let a (lambda (c b) b) _) _)"}
{"name": "concat", "time": 0.000616, "examples": ["(concat [] [1]) -> [1]", "(concat [] [9 4 0]) -> [9 4 0]"], "solution": "(let concat (let a (lambda (c b) b) _) _)"}
{"name": "concat", "time": 0.204926, "examples": ["(concat [4 5 7] [7 5 3 0 6]) -> [4 5 7 7 5 3 0 6]", "(concat [1 2 0 7] [1 0 8]) -> [1 2 0 7 1 0 8]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.228128, "examples": ["(concat [7 6 0] [5 2 8 2 0]) -> [7 6 0 5 2 8 2 0]", "(concat [] [6 1 3 7 3]) -> [6 1 3 7 3]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.207978, "examples": ["(concat [9] [0 9 4 0]) -> [9 0 9 4 0]", "(concat [2 8 9] []) -> [2 8 9]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.221707, "examples": ["(concat [2 1 2 3] []) -> [2 1 2 3]", "(concat [8 1 8 9 3] [1 8 8 1 2]) -> [8 1 8 9 3 1 8 8 1 2]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.171306, "examples": ["(concat [9] [2 3 3 9]) -> [9 2 3 3 9]", "(concat [] [5 8 2 0]) -> [5 8 2 0]"], "solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d b)) b)) _) _)"}
{"name": "concat", "time": 0.218487, "examples": ["(concat [2 6 6 4 3] [4 1]) -> [2 6 6 4 3 4 1]", "(concat [5] [2 7 6]) -> [5 2 7 6]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.181313, "examples": ["(concat [2] [2 6 7]) -> [2 2 6 7]", "(concat [9 7] [7 4 4]) -> [9 7 7 4 4]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.215986, "examples": ["(concat [0 9 6 0 4] [1 8 1]) -> [0 9 6 0 4 1 8 1]", "(concat [7 5 3 0] [4]) -> [7 5 3 0 4]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.186982, "examples": ["(concat [0] [7 9 6 9]) -> [0 7 9 6 9]", "(concat [] [2 1 7]) -> [2 1 7]"], "solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons 0 b)) b)) _) _)"}
{"name": "concat", "time": 0.213834, "examples": ["(concat [2 9 1 0] [3 5]) -> [2 9 1 0 3 5]", "(concat [0 7 0] [6]) -> [0 7 0 6]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.238475, "examples": ["(concat [1] [7 2 0 7 2]) -> [1 7 2 0 7 2]", "(concat [5 2] [0 4 5]) -> [5 2 0 4 5]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.016122, "examples": ["(concat [8] [7 3 4 1 7]) -> [8 7 3 4 1 7]", "(concat [0] [8 8 6 2]) -> [0 8 8 6 2]"], "solution": "(let concat (let a (lambda (c b) (cons (car c) b)) _) _)"}
{"name": "concat", "time": 0.203922, "examples": ["(concat [1] [9 9 3]) -> [1 9 9 3]", "(concat [0 5 7 5 8] [4 3 3 3 0]) -> [0 5 7 5 8 4 3 3 3 0]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.17488, "examples": ["(concat [6 3 9] [7 1 4 0]) -> [6 3 9 7 1 4 0]", "(concat [5 5] [2 0 2 5 9]) -> [5 5 2 0 2 5 9]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.200245, "examples": ["(concat [1 2 0] [0]) -> [1 2 0 0]", "(concat [9] [8]) -> [9 8]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.222687, "examples": ["(concat [8 9 7 6 5] [4 3 7 1 7]) -> [8 9 7 6 5 4 3 7 1 7]", "(concat [6] [4 5]) -> [6 4 5]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.206724, "examples": ["(concat [2 6 8 3 6] [9 4]) -> [2 6 8 3 6 9 4]", "(concat [2 7 5] [1 7 6 5]) -> [2 7 5 1 7 6 5]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.186201, "examples": ["(concat [] [8 6 7 9 8]) -> [8 6 7 9 8]", "(concat [6] [6 5 3 9]) -> [6 6 5 3 9]"], "solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d b)) b)) _) _)"}
{"name": "concat", "time": 0.20568, "examples": ["(concat [7 3 6 4] [5 9 5]) -> [7 3 6 4 5 9 5]", "(concat [7 8 0 5] []) -> [7 8 0 5]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.000503, "examples": ["(concat [] [5 8 8]) -> [5 8 8]", "(concat [] [8 0 6 0]) -> [8 0 6 0]"], "solution": "(let concat (let a (lambda (c b) b) _) _)"}
{"name": "concat", "time": 0.174658, "examples": ["(concat [1 1] [6 7 5 4 8]) -> [1 1 6 7 5 4 8]", "(concat [1 2 0] [1 7]) -> [1 2 0 1 7]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.205297, "examples": ["(concat [2] [6 3]) -> [2 6 3]", "(concat [6 8] [7 4 3 6]) -> [6 8 7 4 3 6]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.243262, "examples": ["(concat [6 4 2 5] [7]) -> [6 4 2 5 7]", "(concat [9 2 3 8 2] [7 9 8 9 0]) -> [9 2 3 8 2 7 9 8 9 0]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.196375, "examples": ["(concat [8 2 2 2 0] [2 7 6]) -> [8 2 2 2 0 2 7 6]", "(concat [] [4 9 4 1]) -> [4 9 4 1]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.207813, "examples": ["(concat [7 2 4 5] [1 6 4 8]) -> [7 2 4 5 1 6 4 8]", "(concat [0 3 4 9] []) -> [0 3 4 9]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.23171, "examples": ["(concat [1 5 7 0] [7]) -> [1 5 7 0 7]", "(concat [0 9 8] [2 5 0 9 4]) -> [0 9 8 2 5 0 9 4]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.216535, "examples": ["(concat [9 8 7 5] [3 7 7]) -> [9 8 7 5 3 7 7]", "(concat [9 5 3 0 2] [8 5 1]) -> [9 5 3 0 2 8 5 1]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.208745, "examples": ["(concat [9] [0 5 0]) -> [9 0 5 0]", "(concat [4 8] []) -> [4 8]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.209586, "examples": ["(concat [4 7 5 4 0] [7 1 6 9]) -> [4 7 5 4 0 7 1 6 9]", "(concat [4] [7 8 9 4 9]) -> [4 7 8 9 4 9]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.208058, "examples": ["(concat [5 2 6] [6 1 9 0]) -> [5 2 6 6 1 9 0]", "(concat [4 6 0] [5 0 7 5 5]) -> [4 6 0 5 0 7 5 5]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.171298, "examples": ["(concat [8] [0]) -> [8 0]", "(concat [0 2 5 7 9] []) -> [0 2 5 7 9]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.128268, "examples": ["(concat [0] [8 8]) -> [0 8 8]", "(concat [7 7 2 6] [5]) -> [7 7 2 6 5]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.163678, "examples": ["(concat [5 3 4 7 7] [8 3 4 5 4]) -> [5 3 4 7 7 8 3 4 5 4]", "(concat [3 5 3 2] [1 5 3]) -> [3 5 3 2 1 5 3]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.152629, "examples": ["(concat [6 5 3] [6 8 1 6]) -> [6 5 3 6 8 1 6]", "(concat [1 1 1] [5 3 7 4 6]) -> [1 1 1 5 3 7 4 6]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.17357, "examples": ["(concat [5 2 5] [5 3 0 8]) -> [5 2 5 5 3 0 8]", "(concat [6 9] [6 6 1]) -> [6 9 6 6 1]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.159986, "examples": ["(concat [1 9 0 2] [5 2 3 6]) -> [1 9 0 2 5 2 3 6]", "(concat [0 7 1 5] [2 4 0 0]) -> [0 7 1 5 2 4 0 0]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.179435, "examples": ["(concat [8 1 6 7] [5 2]) -> [8 1 6 7 5 2]", "(concat [] [7 6 0 1 9]) -> [7 6 0 1 9]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.149328, "examples": ["(concat [] [6 7]) -> [6 7]", "(concat [2 1 2 0] [9]) -> [2 1 2 0 9]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.174152, "examples": ["(concat [4 0 7 3 8] [4 1 0 0 3]) -> [4 0 7 3 8 4 1 0 0 3]", "(concat [4 7 3 9] [9 7]) -> [4 7 3 9 9 7]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.163238, "examples": ["(concat [] []) -> []", "(concat [2 9] [9 8]) -> [2 9 9 8]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.182517, "examples": ["(concat [0 3 6] [2]) -> [0 3 6 2]", "(concat [6 8 2] [1 2 0 4 0]) -> [6 8 2 1 2 0 4 0]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.17038, "examples": ["(concat [] [1 8 1 1 5]) -> [1 8 1 1 5]", "(concat [9 6 0] [0]) -> [9 6 0 0]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.156353, "examples": ["(concat [1 1 0 0] [8 8 7 9 2]) -> [1 1 0 0 8 8 7 9 2]", "(concat [4 4 0] [9 3 7]) -> [4 4 0 9 3 7]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
{"name": "concat", "time": 0.15593, "examples": ["(concat [7] [2 0 5 3]) -> [7 2 0 5 3]", "(concat [2 7 4 0] []) -> [2 7 4 0]"], "solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)"}
