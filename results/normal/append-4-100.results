{"time": 0.829524, "name": "append", "examples": ["(append [3] 6) -> [3 6]", "(append [7 3 6 3] 6) -> [7 3 6 3 6]", "(append [9 5 0 1 2] 1) -> [9 5 0 1 2 1]", "(append [4] 2) -> [4 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.894818, "name": "append", "examples": ["(append [7 7 6 1 3] 8) -> [7 7 6 1 3 8]", "(append [9] 9) -> [9 9]", "(append [3 8 9 2] 0) -> [3 8 9 2 0]", "(append [9 7 8] 2) -> [9 7 8 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.861039, "name": "append", "examples": ["(append [0 2] 7) -> [0 2 7]", "(append [] 9) -> [9]", "(append [1 3] 5) -> [1 3 5]", "(append [] 8) -> [8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.174696, "name": "append", "examples": ["(append [4 5 0 9 3] 6) -> [4 5 0 9 3 6]", "(append [8 0] 2) -> [8 0 2]", "(append [8 7 7 4 3] 6) -> [8 7 7 4 3 6]", "(append [3] 5) -> [3 5]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.236036, "name": "append", "examples": ["(append [9] 1) -> [9 1]", "(append [4 8 7 7] 8) -> [4 8 7 7 8]", "(append [0] 6) -> [0 6]", "(append [1 1 7 4 7] 7) -> [1 1 7 4 7 7]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.270579, "name": "append", "examples": ["(append [6 3 2 5] 1) -> [6 3 2 5 1]", "(append [0 8 5] 3) -> [0 8 5 3]", "(append [9 3 2 1 1] 7) -> [9 3 2 1 1 7]", "(append [7 7 8] 7) -> [7 7 8 7]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.233676, "name": "append", "examples": ["(append [9 6 1 0 5] 3) -> [9 6 1 0 5 3]", "(append [7 1 8] 3) -> [7 1 8 3]", "(append [8] 4) -> [8 4]", "(append [5 0 6 0 9] 0) -> [5 0 6 0 9 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.010819, "name": "append", "examples": ["(append [] 5) -> [5]", "(append [2] 2) -> [2 2]", "(append [] 7) -> [7]", "(append [] 7) -> [7]"], "solution": "(let append (let a (lambda (c b) (cons b c)) _) _)"}
{"time": 0.629846, "name": "append", "examples": ["(append [] 8) -> [8]", "(append [0 2] 4) -> [0 2 4]", "(append [] 7) -> [7]", "(append [] 4) -> [4]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.24921, "name": "append", "examples": ["(append [5] 6) -> [5 6]", "(append [4 6 2 8 1] 4) -> [4 6 2 8 1 4]", "(append [6] 1) -> [6 1]", "(append [0 4 2 7 0] 9) -> [0 4 2 7 0 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.01341, "name": "append", "examples": ["(append [5 6 0 7 2] 4) -> [5 6 0 7 2 4]", "(append [5] 0) -> [5 0]", "(append [8 2] 2) -> [8 2 2]", "(append [3] 2) -> [3 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.020924, "name": "append", "examples": ["(append [] 4) -> [4]", "(append [0 6 9 1 5] 4) -> [0 6 9 1 5 4]", "(append [8] 7) -> [8 7]", "(append [] 6) -> [6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 5.246221, "name": "append", "examples": ["(append [0 4] 5) -> [0 4 5]", "(append [2 6] 2) -> [2 6 2]", "(append [] 1) -> [1]", "(append [2] 8) -> [2 8]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [1])) _) _)"}
{"time": 5.940616, "name": "append", "examples": ["(append [] 3) -> [3]", "(append [7 1] 3) -> [7 1 3]", "(append [3] 9) -> [3 9]", "(append [6 9 8] 0) -> [6 9 8 0]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [3])) _) _)"}
{"time": 6.183627, "name": "append", "examples": ["(append [] 1) -> [1]", "(append [8] 6) -> [8 6]", "(append [1] 3) -> [1 3]", "(append [5 3 3] 7) -> [5 3 3 7]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [1])) _) _)"}
{"time": 6.531771, "name": "append", "examples": ["(append [3 0 7] 0) -> [3 0 7 0]", "(append [] 9) -> [9]", "(append [9] 3) -> [9 3]", "(append [0 2 8 8 1] 7) -> [0 2 8 8 1 7]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [9])) _) _)"}
{"time": 0.646897, "name": "append", "examples": ["(append [] 8) -> [8]", "(append [] 7) -> [7]", "(append [7] 3) -> [7 3]", "(append [4 4 1 7 7] 9) -> [4 4 1 7 7 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 6.871554, "name": "append", "examples": ["(append [] 8) -> [8]", "(append [9 4] 3) -> [9 4 3]", "(append [9 4 6 8] 1) -> [9 4 6 8 1]", "(append [6] 8) -> [6 8]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [8])) _) _)"}
{"time": 5.427629, "name": "append", "examples": ["(append [9] 8) -> [9 8]", "(append [] 2) -> [2]", "(append [9 1] 6) -> [9 1 6]", "(append [8 2] 9) -> [8 2 9]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [2])) _) _)"}
{"time": 6.360972, "name": "append", "examples": ["(append [8] 5) -> [8 5]", "(append [4 7 6 1] 3) -> [4 7 6 1 3]", "(append [] 1) -> [1]", "(append [9 6 5 9] 8) -> [9 6 5 9 8]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [1])) _) _)"}
{"time": 1.063696, "name": "append", "examples": ["(append [7 3 3 0] 7) -> [7 3 3 0 7]", "(append [1 7 3 8 2] 6) -> [1 7 3 8 2 6]", "(append [8 8] 1) -> [8 8 1]", "(append [0 3 7 2] 2) -> [0 3 7 2 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.812144, "name": "append", "examples": ["(append [] 9) -> [9]", "(append [1] 0) -> [1 0]", "(append [] 0) -> [0]", "(append [3 4 8] 1) -> [3 4 8 1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 5.943266, "name": "append", "examples": ["(append [] 8) -> [8]", "(append [8 0 9] 9) -> [8 0 9 9]", "(append [2 8 5 8] 0) -> [2 8 5 8 0]", "(append [2] 6) -> [2 6]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [8])) _) _)"}
{"time": 6.753197, "name": "append", "examples": ["(append [4 8 1] 9) -> [4 8 1 9]", "(append [] 6) -> [6]", "(append [7 8 5] 2) -> [7 8 5 2]", "(append [6] 4) -> [6 4]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [6])) _) _)"}
{"time": 8.080976, "name": "append", "examples": ["(append [7 8 7 7 7] 4) -> [7 8 7 7 7 4]", "(append [] 6) -> [6]", "(append [3 6 8 7] 6) -> [3 6 8 7 6]", "(append [3] 9) -> [3 9]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [6])) _) _)"}
{"time": 0.939188, "name": "append", "examples": ["(append [] 2) -> [2]", "(append [2 6 5 8 6] 5) -> [2 6 5 8 6 5]", "(append [] 0) -> [0]", "(append [3 2 4 3] 1) -> [3 2 4 3 1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.835093, "name": "append", "examples": ["(append [9 0 8] 6) -> [9 0 8 6]", "(append [4 8 1] 6) -> [4 8 1 6]", "(append [3 2 9] 9) -> [3 2 9 9]", "(append [4 6 4 1] 7) -> [4 6 4 1 7]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.862652, "name": "append", "examples": ["(append [7 3 4] 3) -> [7 3 4 3]", "(append [6 1 0 2 6] 1) -> [6 1 0 2 6 1]", "(append [3 7 0 7 7] 2) -> [3 7 0 7 7 2]", "(append [8 9 1] 6) -> [8 9 1 6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.141895, "name": "append", "examples": ["(append [4 5 7 6 5] 5) -> [4 5 7 6 5 5]", "(append [2 7 9] 8) -> [2 7 9 8]", "(append [3] 8) -> [3 8]", "(append [1] 0) -> [1 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.763648, "name": "append", "examples": ["(append [4 9 8] 1) -> [4 9 8 1]", "(append [6 7 0 6] 1) -> [6 7 0 6 1]", "(append [1 3 1 7 6] 9) -> [1 3 1 7 6 9]", "(append [6] 8) -> [6 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.845425, "name": "append", "examples": ["(append [4] 9) -> [4 9]", "(append [5 1 2] 3) -> [5 1 2 3]", "(append [9 9 9 5 0] 3) -> [9 9 9 5 0 3]", "(append [3 8] 3) -> [3 8 3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 11.075801, "name": "append", "examples": ["(append [3 0 1] 9) -> [3 0 1 9]", "(append [0 9 4 2] 9) -> [0 9 4 2 9]", "(append [3 1 8 9] 1) -> [3 1 8 9 1]", "(append [] 7) -> [7]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [7])) _) _)"}
{"time": 0.976992, "name": "append", "examples": ["(append [8 8 8] 0) -> [8 8 8 0]", "(append [5 3 2 8] 7) -> [5 3 2 8 7]", "(append [8 3 9 3 5] 0) -> [8 3 9 3 5 0]", "(append [0 0 2 5] 0) -> [0 0 2 5 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 6.00741, "name": "append", "examples": ["(append [6 9 8 4] 3) -> [6 9 8 4 3]", "(append [0] 3) -> [0 3]", "(append [7 7 8 8] 6) -> [7 7 8 8 6]", "(append [] 0) -> [0]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [0])) _) _)"}
{"time": 11.888092, "name": "append", "examples": ["(append [7 2] 2) -> [7 2 2]", "(append [2 0] 3) -> [2 0 3]", "(append [] 9) -> [9]", "(append [0 9] 3) -> [0 9 3]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [9])) _) _)"}
{"time": 0.650248, "name": "append", "examples": ["(append [8 0 3 4] 4) -> [8 0 3 4 4]", "(append [8 9] 8) -> [8 9 8]", "(append [8 1 1 6 8] 5) -> [8 1 1 6 8 5]", "(append [2 9] 1) -> [2 9 1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 6.696307, "name": "append", "examples": ["(append [4 3 3 6 6] 0) -> [4 3 3 6 6 0]", "(append [3] 4) -> [3 4]", "(append [6 4 0 0 0] 2) -> [6 4 0 0 0 2]", "(append [] 7) -> [7]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [7])) _) _)"}
{"time": 0.32785, "name": "append", "examples": ["(append [1] 9) -> [1 9]", "(append [3 3] 8) -> [3 3 8]", "(append [] 2) -> [2]", "(append [] 3) -> [3]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.325177, "name": "append", "examples": ["(append [2 0 0 7] 0) -> [2 0 0 7 0]", "(append [1 6] 3) -> [1 6 3]", "(append [6 1 4 0] 4) -> [6 1 4 0 4]", "(append [6 7 9 4 8] 9) -> [6 7 9 4 8 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.307091, "name": "append", "examples": ["(append [3] 9) -> [3 9]", "(append [4] 8) -> [4 8]", "(append [6 0 3 3] 6) -> [6 0 3 3 6]", "(append [2] 8) -> [2 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.5201, "name": "append", "examples": ["(append [0 4 2] 2) -> [0 4 2 2]", "(append [9] 5) -> [9 5]", "(append [1] 9) -> [1 9]", "(append [8 7 3 7] 3) -> [8 7 3 7 3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 5.10687, "name": "append", "examples": ["(append [0] 5) -> [0 5]", "(append [] 7) -> [7]", "(append [4 2 3] 4) -> [4 2 3 4]", "(append [1 3 3 5] 6) -> [1 3 3 5 6]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [7])) _) _)"}
{"time": 1.285853, "name": "append", "examples": ["(append [1 5] 9) -> [1 5 9]", "(append [4] 2) -> [4 2]", "(append [5 8 4 0 6] 8) -> [5 8 4 0 6 8]", "(append [4 9] 5) -> [4 9 5]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.257707, "name": "append", "examples": ["(append [1] 1) -> [1 1]", "(append [6 9 3 6 5] 2) -> [6 9 3 6 5 2]", "(append [7 5 3] 6) -> [7 5 3 6]", "(append [1 2] 2) -> [1 2 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 15.012153, "name": "append", "examples": ["(append [] 2) -> [2]", "(append [4 5 3] 8) -> [4 5 3 8]", "(append [7 5 9 8] 6) -> [7 5 9 8 6]", "(append [9 2 4] 4) -> [9 2 4 4]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [2])) _) _)"}
{"time": 1.48943, "name": "append", "examples": ["(append [0 0 9 2] 3) -> [0 0 9 2 3]", "(append [2] 2) -> [2 2]", "(append [7 4] 4) -> [7 4 4]", "(append [8 5 1] 8) -> [8 5 1 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 14.15295, "name": "append", "examples": ["(append [7 2 5] 7) -> [7 2 5 7]", "(append [] 5) -> [5]", "(append [8 7] 8) -> [8 7 8]", "(append [6 3 0 1] 5) -> [6 3 0 1 5]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [5])) _) _)"}
{"time": 14.307111, "name": "append", "examples": ["(append [7 3 2 8] 8) -> [7 3 2 8 8]", "(append [] 8) -> [8]", "(append [1 5 0 2 5] 5) -> [1 5 0 2 5 5]", "(append [9 7] 0) -> [9 7 0]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [8])) _) _)"}
{"time": 0.799705, "name": "append", "examples": ["(append [9 8 1] 7) -> [9 8 1 7]", "(append [8 6 8] 3) -> [8 6 8 3]", "(append [2 8 2 5] 7) -> [2 8 2 5 7]", "(append [5 0] 0) -> [5 0 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 3.542013, "name": "append", "examples": ["(append [3] 8) -> [3 8]", "(append [] 6) -> [6]", "(append [1 7 2 1 8] 2) -> [1 7 2 1 8 2]", "(append [5 9 0 4] 4) -> [5 9 0 4 4]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [6])) _) _)"}
{"time": 7.009847, "name": "append", "examples": ["(append [6] 1) -> [6 1]", "(append [7 4 6] 2) -> [7 4 6 2]", "(append [4] 8) -> [4 8]", "(append [] 6) -> [6]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [6])) _) _)"}
{"time": 1.252149, "name": "append", "examples": ["(append [5 9 9 3] 8) -> [5 9 9 3 8]", "(append [5 4 0] 2) -> [5 4 0 2]", "(append [1 2] 7) -> [1 2 7]", "(append [5 0] 2) -> [5 0 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 3.846148, "name": "append", "examples": ["(append [8] 8) -> [8 8]", "(append [] 2) -> [2]", "(append [5 8 6 6] 5) -> [5 8 6 6 5]", "(append [6 2 6 9 0] 7) -> [6 2 6 9 0 7]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [2])) _) _)"}
{"time": 0.796074, "name": "append", "examples": ["(append [2 6] 6) -> [2 6 6]", "(append [6 8 9 8] 4) -> [6 8 9 8 4]", "(append [8 2 8 4] 9) -> [8 2 8 4 9]", "(append [0 5 1 0] 8) -> [0 5 1 0 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 4.774356, "name": "append", "examples": ["(append [] 8) -> [8]", "(append [2 6] 4) -> [2 6 4]", "(append [1 3 3] 6) -> [1 3 3 6]", "(append [4] 4) -> [4 4]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [8])) _) _)"}
{"time": 1.105011, "name": "append", "examples": ["(append [9 9 1 5] 4) -> [9 9 1 5 4]", "(append [0 4] 0) -> [0 4 0]", "(append [7 1 9 7 8] 1) -> [7 1 9 7 8 1]", "(append [5] 1) -> [5 1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.81179, "name": "append", "examples": ["(append [9 8] 6) -> [9 8 6]", "(append [9 6 0 7] 1) -> [9 6 0 7 1]", "(append [8 9] 9) -> [8 9 9]", "(append [4 6 8 6] 5) -> [4 6 8 6 5]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.635205, "name": "append", "examples": ["(append [] 0) -> [0]", "(append [] 7) -> [7]", "(append [3 5 1 6 4] 4) -> [3 5 1 6 4 4]", "(append [8 0 4] 7) -> [8 0 4 7]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.708274, "name": "append", "examples": ["(append [7 9 0 0 3] 5) -> [7 9 0 0 3 5]", "(append [2 0 6 4] 1) -> [2 0 6 4 1]", "(append [2 8 0] 3) -> [2 8 0 3]", "(append [7 8 4 7] 1) -> [7 8 4 7 1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 10.551292, "name": "append", "examples": ["(append [4 4 9 2] 1) -> [4 4 9 2 1]", "(append [] 7) -> [7]", "(append [4 1 9] 4) -> [4 1 9 4]", "(append [7 8 0 4] 7) -> [7 8 0 4 7]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [7])) _) _)"}
{"time": 0.650112, "name": "append", "examples": ["(append [1 9] 5) -> [1 9 5]", "(append [] 4) -> [4]", "(append [] 7) -> [7]", "(append [3 6 1] 1) -> [3 6 1 1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.238446, "name": "append", "examples": ["(append [] 8) -> [8]", "(append [0 5 9 8] 2) -> [0 5 9 8 2]", "(append [] 3) -> [3]", "(append [4 6 4 1] 0) -> [4 6 4 1 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.341332, "name": "append", "examples": ["(append [1 9 0 1 6] 7) -> [1 9 0 1 6 7]", "(append [2] 6) -> [2 6]", "(append [7 7 0 3] 5) -> [7 7 0 3 5]", "(append [1] 3) -> [1 3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 4.004421, "name": "append", "examples": ["(append [9] 4) -> [9 4]", "(append [] 0) -> [0]", "(append [8 3 2 5] 2) -> [8 3 2 5 2]", "(append [1 3] 4) -> [1 3 4]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [0])) _) _)"}
{"time": 12.288186, "name": "append", "examples": ["(append [4 1 7] 0) -> [4 1 7 0]", "(append [6 5] 6) -> [6 5 6]", "(append [] 6) -> [6]", "(append [4 5 3] 4) -> [4 5 3 4]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [6])) _) _)"}
{"time": 0.848462, "name": "append", "examples": ["(append [9 1 5 1] 8) -> [9 1 5 1 8]", "(append [3 8 2 8] 5) -> [3 8 2 8 5]", "(append [5 2] 2) -> [5 2 2]", "(append [8 3 9 3 8] 2) -> [8 3 9 3 8 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 5.004305, "name": "append", "examples": ["(append [3 6 8 3] 1) -> [3 6 8 3 1]", "(append [7 1] 5) -> [7 1 5]", "(append [] 9) -> [9]", "(append [9] 4) -> [9 4]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [9])) _) _)"}
{"time": 1.014678, "name": "append", "examples": ["(append [4 9 1 2] 9) -> [4 9 1 2 9]", "(append [] 2) -> [2]", "(append [3 7 4 3] 5) -> [3 7 4 3 5]", "(append [] 1) -> [1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.212622, "name": "append", "examples": ["(append [7 0 9 4] 8) -> [7 0 9 4 8]", "(append [5] 3) -> [5 3]", "(append [1] 5) -> [1 5]", "(append [3] 6) -> [3 6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 13.681348, "name": "append", "examples": ["(append [7 7 0] 7) -> [7 7 0 7]", "(append [2 5 1] 3) -> [2 5 1 3]", "(append [] 8) -> [8]", "(append [5 9 6 3] 6) -> [5 9 6 3 6]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [8])) _) _)"}
{"time": 1.135535, "name": "append", "examples": ["(append [2] 3) -> [2 3]", "(append [4 2] 4) -> [4 2 4]", "(append [0] 5) -> [0 5]", "(append [0] 0) -> [0 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 14.594442, "name": "append", "examples": ["(append [6 9 2] 9) -> [6 9 2 9]", "(append [] 0) -> [0]", "(append [7 0 0 8] 6) -> [7 0 0 8 6]", "(append [0 4 6] 7) -> [0 4 6 7]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [0])) _) _)"}
{"time": 1.269608, "name": "append", "examples": ["(append [5 6 7] 7) -> [5 6 7 7]", "(append [8] 3) -> [8 3]", "(append [9 6] 8) -> [9 6 8]", "(append [4 1 7] 2) -> [4 1 7 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 15.064205, "name": "append", "examples": ["(append [3 4 6] 5) -> [3 4 6 5]", "(append [9 1 2 0 1] 2) -> [9 1 2 0 1 2]", "(append [6 5] 8) -> [6 5 8]", "(append [] 6) -> [6]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [6])) _) _)"}
{"time": 0.749559, "name": "append", "examples": ["(append [2 1 6 9 8] 1) -> [2 1 6 9 8 1]", "(append [8] 2) -> [8 2]", "(append [9 9 6 3 3] 7) -> [9 9 6 3 3 7]", "(append [0] 6) -> [0 6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.699125, "name": "append", "examples": ["(append [] 2) -> [2]", "(append [0 5 6] 6) -> [0 5 6 6]", "(append [] 3) -> [3]", "(append [7 3] 7) -> [7 3 7]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.15951, "name": "append", "examples": ["(append [9 3] 7) -> [9 3 7]", "(append [5 9 5] 4) -> [5 9 5 4]", "(append [6 7 2 8] 9) -> [6 7 2 8 9]", "(append [7 0 4 1] 0) -> [7 0 4 1 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.175367, "name": "append", "examples": ["(append [6 7 6] 3) -> [6 7 6 3]", "(append [4 9 3 4 0] 7) -> [4 9 3 4 0 7]", "(append [1 4] 8) -> [1 4 8]", "(append [6 0] 0) -> [6 0 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 4.413605, "name": "append", "examples": ["(append [8 4] 7) -> [8 4 7]", "(append [] 0) -> [0]", "(append [1] 7) -> [1 7]", "(append [7 1 8] 4) -> [7 1 8 4]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [0])) _) _)"}
{"time": 0.824071, "name": "append", "examples": ["(append [8 4 8] 6) -> [8 4 8 6]", "(append [] 6) -> [6]", "(append [5] 8) -> [5 8]", "(append [] 8) -> [8]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.693243, "name": "append", "examples": ["(append [] 7) -> [7]", "(append [] 8) -> [8]", "(append [6 1] 9) -> [6 1 9]", "(append [1] 0) -> [1 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.313022, "name": "append", "examples": ["(append [9 9 3 0] 4) -> [9 9 3 0 4]", "(append [2 2] 2) -> [2 2 2]", "(append [1 6 1 3 1] 0) -> [1 6 1 3 1 0]", "(append [8] 3) -> [8 3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.078745, "name": "append", "examples": ["(append [] 3) -> [3]", "(append [3 5 1 3] 8) -> [3 5 1 3 8]", "(append [] 5) -> [5]", "(append [4 4] 8) -> [4 4 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.210284, "name": "append", "examples": ["(append [5] 4) -> [5 4]", "(append [4] 7) -> [4 7]", "(append [1] 7) -> [1 7]", "(append [7] 2) -> [7 2]"], "solution": "(let append (let a (lambda (c b) (cons (car c) (cons b []))) _) _)"}
{"time": 1.205271, "name": "append", "examples": ["(append [4 0 6 7 0] 2) -> [4 0 6 7 0 2]", "(append [4 8 0 8] 7) -> [4 8 0 8 7]", "(append [9 6 2 8] 4) -> [9 6 2 8 4]", "(append [9] 8) -> [9 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 13.900009, "name": "append", "examples": ["(append [9 7 5 3] 8) -> [9 7 5 3 8]", "(append [] 4) -> [4]", "(append [4 4] 5) -> [4 4 5]", "(append [0 2] 2) -> [0 2 2]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [4])) _) _)"}
{"time": 6.449913, "name": "append", "examples": ["(append [1 7 6] 4) -> [1 7 6 4]", "(append [8] 9) -> [8 9]", "(append [] 2) -> [2]", "(append [1 0 9] 7) -> [1 0 9 7]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [2])) _) _)"}
{"time": 1.030576, "name": "append", "examples": ["(append [6 6 6] 1) -> [6 6 6 1]", "(append [0 0] 2) -> [0 0 2]", "(append [5] 2) -> [5 2]", "(append [5 4] 3) -> [5 4 3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 13.068703, "name": "append", "examples": ["(append [7 8 5] 7) -> [7 8 5 7]", "(append [1 1 4 8] 1) -> [1 1 4 8 1]", "(append [6 4 5] 9) -> [6 4 5 9]", "(append [] 4) -> [4]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [4])) _) _)"}
{"time": 3.985652, "name": "append", "examples": ["(append [6 5 3 2] 1) -> [6 5 3 2 1]", "(append [3] 6) -> [3 6]", "(append [2 8 7 8] 1) -> [2 8 7 8 1]", "(append [] 5) -> [5]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [5])) _) _)"}
{"time": 3.854725, "name": "append", "examples": ["(append [0] 5) -> [0 5]", "(append [5 7 3] 6) -> [5 7 3 6]", "(append [9 7 3] 2) -> [9 7 3 2]", "(append [] 0) -> [0]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [0])) _) _)"}
{"time": 12.635602, "name": "append", "examples": ["(append [8 8 6 0 4] 6) -> [8 8 6 0 4 6]", "(append [6 3] 3) -> [6 3 3]", "(append [] 2) -> [2]", "(append [7 7 1 2 1] 3) -> [7 7 1 2 1 3]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [2])) _) _)"}
{"time": 8.711156, "name": "append", "examples": ["(append [7 8 1] 8) -> [7 8 1 8]", "(append [8 0 0] 7) -> [8 0 0 7]", "(append [2 5] 9) -> [2 5 9]", "(append [] 4) -> [4]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [4])) _) _)"}
{"time": 3.662547, "name": "append", "examples": ["(append [1] 5) -> [1 5]", "(append [7 4 0 2 6] 2) -> [7 4 0 2 6 2]", "(append [1 9 7] 3) -> [1 9 7 3]", "(append [] 5) -> [5]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [5])) _) _)"}
{"time": 9.16712, "name": "append", "examples": ["(append [] 4) -> [4]", "(append [5 6 5 5] 0) -> [5 6 5 5 0]", "(append [5 4 0] 2) -> [5 4 0 2]", "(append [7 2 1] 6) -> [7 2 1 6]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [4])) _) _)"}
{"time": 10.834982, "name": "append", "examples": ["(append [9 7 2] 0) -> [9 7 2 0]", "(append [] 2) -> [2]", "(append [3 6 4 8 6] 0) -> [3 6 4 8 6 0]", "(append [2 3 4] 4) -> [2 3 4 4]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [2])) _) _)"}
{"time": 10.726387, "name": "append", "examples": ["(append [] 0) -> [0]", "(append [4 5 9 1] 8) -> [4 5 9 1 8]", "(append [1 3 4 4 9] 3) -> [1 3 4 4 9 3]", "(append [1 5] 4) -> [1 5 4]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [0])) _) _)"}
{"time": 4.520813, "name": "append", "examples": ["(append [6 1] 4) -> [6 1 4]", "(append [] 3) -> [3]", "(append [1 4 9 7] 2) -> [1 4 9 7 2]", "(append [7 5] 7) -> [7 5 7]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [3])) _) _)"}
{"time": 6.946844, "name": "append", "examples": ["(append [3 8 8] 9) -> [3 8 8 9]", "(append [] 0) -> [0]", "(append [3 2 6 0 7] 4) -> [3 2 6 0 7 4]", "(append [8 4 2 5] 4) -> [8 4 2 5 4]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [0])) _) _)"}
{"time": 8.913809, "name": "append", "examples": ["(append [1 7 4 2 5] 8) -> [1 7 4 2 5 8]", "(append [3 3 0 0] 4) -> [3 3 0 0 4]", "(append [6 7 9] 0) -> [6 7 9 0]", "(append [] 9) -> [9]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [9])) _) _)"}
