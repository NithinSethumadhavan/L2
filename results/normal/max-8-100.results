{"name": "max", "solution": "(let max (let a (lambda (b) (car b)) _) _)", "examples": ["(max [7]) -> 7", "(max [9 1 2 4]) -> 9", "(max [5 5 3 4]) -> 5", "(max [9 7]) -> 9", "(max [6 4 1]) -> 6", "(max [4 0]) -> 4", "(max [7 6]) -> 7"], "time": 0.000923}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 3 2 0 2]) -> 3", "(max [2 7 3 1]) -> 7", "(max [7]) -> 7", "(max [2]) -> 2", "(max [1 9 5 5 9]) -> 9", "(max [4 3 5]) -> 5", "(max [3 5 1 0 3]) -> 5"], "time": 7.907679}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 1]) -> 7", "(max [8]) -> 8", "(max [8]) -> 8", "(max [1 9 5 7 7]) -> 9", "(max [4 9]) -> 9", "(max [3 8]) -> 8", "(max [9 7 9]) -> 9"], "time": 7.966262}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 8]) -> 8", "(max [4]) -> 4", "(max [8 5 5 4]) -> 8", "(max [8 3 0 1 8]) -> 8", "(max [2 3 9 5 5]) -> 9", "(max [8 9 4 2]) -> 9", "(max [3 9 7]) -> 9"], "time": 8.065491}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1]) -> 1", "(max [3 9 0]) -> 9", "(max [5]) -> 5", "(max [7 0]) -> 7", "(max [3 9 9]) -> 9", "(max [5 9 8]) -> 9", "(max [1 7]) -> 7"], "time": 8.146261}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 8]) -> 8", "(max [9 7 3 3 3]) -> 9", "(max [1 8 1 9]) -> 9", "(max [5 8 7 2 9]) -> 9", "(max [8 7]) -> 8", "(max [5 0 2 1 0]) -> 5", "(max [4 1 5 8 6]) -> 8"], "time": 8.278395}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 2]) -> 8", "(max [1 5 5]) -> 5", "(max [3]) -> 3", "(max [3]) -> 3", "(max [5 6 9]) -> 9", "(max [7 5 5]) -> 7", "(max [6 0 9]) -> 9"], "time": 8.266705}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 4]) -> 4", "(max [9 7]) -> 9", "(max [5 8 1]) -> 8", "(max [7]) -> 7", "(max [7 7 5]) -> 7", "(max [5 0]) -> 5", "(max [8]) -> 8"], "time": 8.239261}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 9 0 3]) -> 9", "(max [3 0 6 4]) -> 6", "(max [2 6 1]) -> 6", "(max [8]) -> 8", "(max [4 4 5]) -> 5", "(max [8 0 1]) -> 8", "(max [7 2 4]) -> 7"], "time": 8.400586}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 9]) -> 9", "(max [0 6 1 8 9]) -> 9", "(max [6 9 9 2 6]) -> 9", "(max [7]) -> 7", "(max [6 2 0]) -> 6", "(max [4 1]) -> 4", "(max [8 0]) -> 8"], "time": 8.188781}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 7 7]) -> 8", "(max [0 9 0 4]) -> 9", "(max [3]) -> 3", "(max [9 4 9 5]) -> 9", "(max [2 9 9 2 6]) -> 9", "(max [5 2 0]) -> 5", "(max [7]) -> 7"], "time": 8.425124}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 8 5 2]) -> 8", "(max [2 0 3]) -> 3", "(max [3]) -> 3", "(max [5 4]) -> 5", "(max [8 8 2 7 4]) -> 8", "(max [2 9 5 7 8]) -> 9", "(max [1 0 9 7 7]) -> 9"], "time": 8.69279}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 1 5]) -> 7", "(max [9 4 1 0 1]) -> 9", "(max [6]) -> 6", "(max [0]) -> 0", "(max [8 2 6]) -> 8", "(max [7 6 1 1 8]) -> 8", "(max [2 7 8 5 4]) -> 8"], "time": 8.636544}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 1 4 8]) -> 8", "(max [8 2]) -> 8", "(max [3]) -> 3", "(max [0]) -> 0", "(max [8 2 9]) -> 9", "(max [3 0 8 3]) -> 8", "(max [3 5 0 4]) -> 5"], "time": 8.734009}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 7 3 6 1]) -> 7", "(max [0 0 2]) -> 2", "(max [1 2 8 0 7]) -> 8", "(max [0 4 7 0 6]) -> 7", "(max [2 1]) -> 2", "(max [6 2 6]) -> 6", "(max [0 3 8 1 2]) -> 8"], "time": 8.78127}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 5 8 9 9]) -> 9", "(max [2 6 8]) -> 8", "(max [5 9 9]) -> 9", "(max [8 3]) -> 8", "(max [6 0 8 7 0]) -> 8", "(max [7 5 0 1 8]) -> 8", "(max [6 1 3 2 5]) -> 6"], "time": 8.876236}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 5 7]) -> 9", "(max [7 8 9 7 7]) -> 9", "(max [9 5 7]) -> 9", "(max [3 9 3 5 5]) -> 9", "(max [6 0]) -> 6", "(max [9 6]) -> 9", "(max [2]) -> 2"], "time": 8.835565}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7]) -> 7", "(max [4]) -> 4", "(max [0 0 5 4 1]) -> 5", "(max [0 9 8 4 0]) -> 9", "(max [2 8 1]) -> 8", "(max [0 6 7 9 8]) -> 9", "(max [9 5 9]) -> 9"], "time": 6.252334}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 1]) -> 1", "(max [0 5 2]) -> 5", "(max [4 0]) -> 4", "(max [0 8 0 5 6]) -> 8", "(max [6 9 2]) -> 9", "(max [4 3]) -> 4", "(max [8 3 4]) -> 8"], "time": 6.130376}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 0 8 7]) -> 8", "(max [0 6]) -> 6", "(max [6 0]) -> 6", "(max [7]) -> 7", "(max [8 8]) -> 8", "(max [9 6 1 2 3]) -> 9", "(max [0]) -> 0"], "time": 6.622742}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 6 0 2 5]) -> 6", "(max [9 6 4 8]) -> 9", "(max [6 8]) -> 8", "(max [2 4 8 6 2]) -> 8", "(max [3 4 2 3 9]) -> 9", "(max [2 9 3]) -> 9", "(max [6 4 7 0]) -> 7"], "time": 7.44983}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 6 4 1 2]) -> 6", "(max [3 1 8 8]) -> 8", "(max [8 9 7 4 8]) -> 9", "(max [7 9]) -> 9", "(max [8]) -> 8", "(max [4 7]) -> 7", "(max [9 9]) -> 9"], "time": 7.490989}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3]) -> 3", "(max [0 7 3 3 9]) -> 9", "(max [6 7]) -> 7", "(max [5 0 8]) -> 8", "(max [3 7 4]) -> 7", "(max [4 0]) -> 4", "(max [7]) -> 7"], "time": 7.724185}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 3 9 9 4]) -> 9", "(max [9 6 7 1 8]) -> 9", "(max [4 1 3 1 2]) -> 4", "(max [8 3 4]) -> 8", "(max [5 2]) -> 5", "(max [4 2 5 8 4]) -> 8", "(max [1 3 8 6 7]) -> 8"], "time": 7.755981}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0]) -> 0", "(max [7 0 9 7 9]) -> 9", "(max [4 3 7 6]) -> 7", "(max [4 3]) -> 4", "(max [1 5]) -> 5", "(max [5 0 8 4]) -> 8", "(max [4 7 0]) -> 7"], "time": 9.112714}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 7 9]) -> 9", "(max [1]) -> 1", "(max [3 0 6 8 5]) -> 8", "(max [0 4 7 8]) -> 8", "(max [5]) -> 5", "(max [4 8 7]) -> 8", "(max [0 3 8 8 9]) -> 9"], "time": 9.916348}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 5 5]) -> 5", "(max [2 8 7]) -> 8", "(max [3 8]) -> 8", "(max [6 9]) -> 9", "(max [0 3 5 4 6]) -> 6", "(max [2]) -> 2", "(max [7 9 3 2 5]) -> 9"], "time": 9.965302}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 1 6 9 5]) -> 9", "(max [2 6 9 5]) -> 9", "(max [5 0 9 1]) -> 9", "(max [7]) -> 7", "(max [5]) -> 5", "(max [9 5 4 7]) -> 9", "(max [9 2 8 5]) -> 9"], "time": 9.914576}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 1 4 8 9]) -> 9", "(max [4]) -> 4", "(max [2 1 0 4 9]) -> 9", "(max [4 0 6 3 0]) -> 6", "(max [8 6 6]) -> 8", "(max [1 2 9 5 6]) -> 9", "(max [6 4 4 0]) -> 6"], "time": 10.517566}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9]) -> 9", "(max [3 8 4 2]) -> 8", "(max [3]) -> 3", "(max [6 0 7 6 6]) -> 7", "(max [1 0 7]) -> 7", "(max [2 3]) -> 3", "(max [9 7 0]) -> 9"], "time": 10.098056}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 6 3]) -> 6", "(max [0 6 2]) -> 6", "(max [4 4 9 9]) -> 9", "(max [4]) -> 4", "(max [1 1 3 7 1]) -> 7", "(max [4 8 1 9]) -> 9", "(max [7 7 9]) -> 9"], "time": 10.704025}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0]) -> 0", "(max [9 0 8]) -> 9", "(max [1 2 2 4]) -> 4", "(max [0 5 0]) -> 5", "(max [5 8 1 5]) -> 8", "(max [6]) -> 6", "(max [5 0 7 4]) -> 7"], "time": 10.500935}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 7 6 3]) -> 9", "(max [6]) -> 6", "(max [5 1 1 0 5]) -> 5", "(max [7 4]) -> 7", "(max [9 4 6]) -> 9", "(max [8 7 1 7]) -> 8", "(max [2 3 2 3 6]) -> 6"], "time": 10.761467}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 3 3 5 1]) -> 5", "(max [2 2 4]) -> 4", "(max [5]) -> 5", "(max [5 3]) -> 5", "(max [6]) -> 6", "(max [7 6 4]) -> 7", "(max [7]) -> 7"], "time": 5.843643}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8]) -> 8", "(max [1 0]) -> 1", "(max [4 1 5]) -> 5", "(max [7]) -> 7", "(max [0 7 3 1]) -> 7", "(max [1 1 0 8]) -> 8", "(max [6 3 3]) -> 6"], "time": 5.79329}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 2 0 3 0]) -> 7", "(max [0 0 8 0]) -> 8", "(max [0 5 4]) -> 5", "(max [4 8 7 1 4]) -> 8", "(max [4 8]) -> 8", "(max [0 6 0 5 8]) -> 8", "(max [0 1]) -> 1"], "time": 5.825543}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 4 1 1]) -> 6", "(max [8 3]) -> 8", "(max [3 1]) -> 3", "(max [5 1 6 5]) -> 6", "(max [9 4 3 1]) -> 9", "(max [4 4 6 3 6]) -> 6", "(max [4 0 0 8 3]) -> 8"], "time": 8.92809}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 1]) -> 1", "(max [8 2 6 2 3]) -> 8", "(max [3 9]) -> 9", "(max [2 1 5 9]) -> 9", "(max [8]) -> 8", "(max [0 8 9]) -> 9", "(max [1 5 7 9 6]) -> 9"], "time": 8.086553}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 7 1]) -> 7", "(max [1 2 7]) -> 7", "(max [2 6 9 8 0]) -> 9", "(max [0 6 9]) -> 9", "(max [6 6]) -> 6", "(max [1 5]) -> 5", "(max [9]) -> 9"], "time": 10.523087}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 1 8 4]) -> 8", "(max [2]) -> 2", "(max [9 5]) -> 9", "(max [7 9]) -> 9", "(max [9]) -> 9", "(max [5 4 6]) -> 6", "(max [0 0 6 5 7]) -> 7"], "time": 6.352958}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8]) -> 8", "(max [9 4 0 4]) -> 9", "(max [5 5 9]) -> 9", "(max [2 4 5 3 8]) -> 8", "(max [3 9 7]) -> 9", "(max [3]) -> 3", "(max [4]) -> 4"], "time": 6.944069}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3]) -> 3", "(max [6 5 0 7 5]) -> 7", "(max [7]) -> 7", "(max [7 6 0]) -> 7", "(max [5 1 2 8]) -> 8", "(max [1 7 3]) -> 7", "(max [2]) -> 2"], "time": 11.483538}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4]) -> 4", "(max [1]) -> 1", "(max [8 7]) -> 8", "(max [5 6 9]) -> 9", "(max [4]) -> 4", "(max [1 0 6]) -> 6", "(max [7 4 5 5]) -> 7"], "time": 8.979651}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 0]) -> 5", "(max [3]) -> 3", "(max [9 0 6 0]) -> 9", "(max [7 6 5 2 3]) -> 7", "(max [4 2 0 4]) -> 4", "(max [5]) -> 5", "(max [3 5 8]) -> 8"], "time": 8.308268}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 6 7 7 0]) -> 7", "(max [6 3]) -> 6", "(max [5 6 9]) -> 9", "(max [4 2 0]) -> 4", "(max [3 9 6 5]) -> 9", "(max [6]) -> 6", "(max [2 7 4 1 2]) -> 7"], "time": 11.726909}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2]) -> 2", "(max [6 2]) -> 6", "(max [1 2]) -> 2", "(max [2 4]) -> 4", "(max [5]) -> 5", "(max [0 1 6 1]) -> 6", "(max [0 5 8 3]) -> 8"], "time": 6.859877}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 0 d) c d)) 0)) _) _)", "examples": ["(max [0 7]) -> 7", "(max [9]) -> 9", "(max [6 2]) -> 6", "(max [8]) -> 8", "(max [1]) -> 1", "(max [1]) -> 1", "(max [1]) -> 1"], "time": 10.050546}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 3 9 3]) -> 9", "(max [6 1 2 3 3]) -> 6", "(max [8 4 5 0]) -> 8", "(max [8 8 3]) -> 8", "(max [9 9 2]) -> 9", "(max [2 8 8 3]) -> 8", "(max [7]) -> 7"], "time": 10.501909}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 8 0]) -> 8", "(max [3 1 2]) -> 3", "(max [0 5 7 5 7]) -> 7", "(max [9]) -> 9", "(max [9 9 8 1 3]) -> 9", "(max [2]) -> 2", "(max [9 7 3]) -> 9"], "time": 10.841012}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 4 4 5 2]) -> 5", "(max [1]) -> 1", "(max [5 1 4 0 9]) -> 9", "(max [5 9 1]) -> 9", "(max [4 5 9 9]) -> 9", "(max [6 2 8 3]) -> 8", "(max [6 2]) -> 6"], "time": 10.667124}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 9]) -> 9", "(max [5 1 5]) -> 5", "(max [8 1 2]) -> 8", "(max [0 7 4 4 2]) -> 7", "(max [2 5]) -> 5", "(max [6 3]) -> 6", "(max [4]) -> 4"], "time": 7.579684}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 1 8 7]) -> 8", "(max [0 1 3 9]) -> 9", "(max [9]) -> 9", "(max [0]) -> 0", "(max [2 2]) -> 2", "(max [9]) -> 9", "(max [1 6]) -> 6"], "time": 6.750592}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1]) -> 1", "(max [7 7 6]) -> 7", "(max [2 1 0]) -> 2", "(max [5 1 8]) -> 8", "(max [2 6 8]) -> 8", "(max [9 5 5 3]) -> 9", "(max [9 0 2]) -> 9"], "time": 9.7193}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 5]) -> 9", "(max [2]) -> 2", "(max [2 2]) -> 2", "(max [3]) -> 3", "(max [8 1 7]) -> 8", "(max [0 4 3 7 9]) -> 9", "(max [7]) -> 7"], "time": 7.065551}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 8]) -> 8", "(max [1 8 3 8]) -> 8", "(max [7 4 6]) -> 7", "(max [0 5]) -> 5", "(max [0 5 6 7]) -> 7", "(max [3 7]) -> 7", "(max [2 5]) -> 5"], "time": 11.044525}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 4]) -> 9", "(max [1 0 3 2 9]) -> 9", "(max [5 7]) -> 7", "(max [1 5]) -> 5", "(max [5]) -> 5", "(max [6]) -> 6", "(max [4 1 5 5]) -> 5"], "time": 9.136301}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 9 8]) -> 9", "(max [1]) -> 1", "(max [8 9]) -> 9", "(max [6 7 4 6 3]) -> 7", "(max [6 4 0 2]) -> 6", "(max [8]) -> 8", "(max [4]) -> 4"], "time": 9.880103}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 9 8 2]) -> 9", "(max [6 2 4 9 2]) -> 9", "(max [5 8 5 6]) -> 8", "(max [2 5 4]) -> 5", "(max [0 2]) -> 2", "(max [9 4 3 7 0]) -> 9", "(max [2 6 7 7]) -> 7"], "time": 9.3083}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 1]) -> 6", "(max [1 7 5]) -> 7", "(max [3]) -> 3", "(max [6 7 3 2 4]) -> 7", "(max [5 4 6 7 1]) -> 7", "(max [0]) -> 0", "(max [1 7 2]) -> 7"], "time": 8.863028}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6]) -> 6", "(max [8 8 3]) -> 8", "(max [7 7 3 4 1]) -> 7", "(max [0]) -> 0", "(max [3 6 4 4 0]) -> 6", "(max [4 2 5]) -> 5", "(max [2 5 0]) -> 5"], "time": 7.474345}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 5 1 6]) -> 7", "(max [0 1 3 1 3]) -> 3", "(max [0 7]) -> 7", "(max [1 6 7 5 1]) -> 7", "(max [2 9 1 0 9]) -> 9", "(max [8 6 7]) -> 8", "(max [4 8 0 7 0]) -> 8"], "time": 7.291576}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 7 6 4]) -> 7", "(max [3 2 3]) -> 3", "(max [0 3 0]) -> 3", "(max [7 6 9]) -> 9", "(max [3 9 5]) -> 9", "(max [3 6 6]) -> 6", "(max [3 4 1 2]) -> 4"], "time": 9.869706}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 4 8 9]) -> 9", "(max [1 8 7 5 4]) -> 8", "(max [3]) -> 3", "(max [6]) -> 6", "(max [0]) -> 0", "(max [9 9 9 4 3]) -> 9", "(max [3 7 7 5 3]) -> 7"], "time": 10.035722}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 2]) -> 7", "(max [4 9]) -> 9", "(max [6 9 7]) -> 9", "(max [3 5 0]) -> 5", "(max [8 7]) -> 8", "(max [0 0 6]) -> 6", "(max [0 8 7]) -> 8"], "time": 8.092534}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 5]) -> 5", "(max [6 6 2 0]) -> 6", "(max [9 8 6]) -> 9", "(max [7 5]) -> 7", "(max [9 2 8 7 3]) -> 9", "(max [1 8 0 4]) -> 8", "(max [1 3 5 4 0]) -> 5"], "time": 8.963769}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 8 9 3]) -> 9", "(max [3]) -> 3", "(max [8 4 7 1]) -> 8", "(max [8 0 6 4 6]) -> 8", "(max [6 7 6]) -> 7", "(max [2 0 0]) -> 2", "(max [7 2]) -> 7"], "time": 7.773679}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 1]) -> 1", "(max [4 4]) -> 4", "(max [2 0 0 7]) -> 7", "(max [3 6 4]) -> 6", "(max [8 6 0 5 8]) -> 8", "(max [1]) -> 1", "(max [2 8 4 8 2]) -> 8"], "time": 6.936793}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 0 6]) -> 6", "(max [9 2 5 6]) -> 9", "(max [6 0 0 6 8]) -> 8", "(max [5 8 7 0 2]) -> 8", "(max [3 6 4 0 6]) -> 6", "(max [7 8]) -> 8", "(max [7 2 2 1]) -> 7"], "time": 7.624465}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 5]) -> 5", "(max [4 6 5 1 1]) -> 6", "(max [3 0 5 7 5]) -> 7", "(max [3]) -> 3", "(max [5 1 0 8]) -> 8", "(max [8 9 7]) -> 9", "(max [3]) -> 3"], "time": 9.079406}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8]) -> 8", "(max [2 7 5]) -> 7", "(max [5 8 3 7 2]) -> 8", "(max [1]) -> 1", "(max [6 8 4 0]) -> 8", "(max [5 6 3]) -> 6", "(max [8]) -> 8"], "time": 8.542895}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 6]) -> 6", "(max [2 2 2 9 3]) -> 9", "(max [2 9 3 2]) -> 9", "(max [3]) -> 3", "(max [9 2 0]) -> 9", "(max [7 9]) -> 9", "(max [9 7 4]) -> 9"], "time": 7.877197}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 9 9 7]) -> 9", "(max [6 8 2]) -> 8", "(max [4 6 4 6]) -> 6", "(max [0 3 2]) -> 3", "(max [6 8 8 8 8]) -> 8", "(max [2 4 6 5 4]) -> 6", "(max [3 1 1 5]) -> 5"], "time": 9.183667}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 3]) -> 3", "(max [5 7 1 3 6]) -> 7", "(max [2 2 4]) -> 4", "(max [0 0 7 9]) -> 9", "(max [1 3 7]) -> 7", "(max [0 0 6 7 0]) -> 7", "(max [4]) -> 4"], "time": 7.583575}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7]) -> 7", "(max [7]) -> 7", "(max [5 3 2 8 1]) -> 8", "(max [6]) -> 6", "(max [9 6 5]) -> 9", "(max [0]) -> 0", "(max [9]) -> 9"], "time": 8.100614}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 4 7 1]) -> 7", "(max [5 9 9 4 0]) -> 9", "(max [5 7 8 6]) -> 8", "(max [4 9 9 5]) -> 9", "(max [7]) -> 7", "(max [7 8 7 1 4]) -> 8", "(max [8]) -> 8"], "time": 8.856529}
{"name": "max", "solution": "(let max (let a (lambda (b) (car b)) _) _)", "examples": ["(max [6 5]) -> 6", "(max [8]) -> 8", "(max [8]) -> 8", "(max [9]) -> 9", "(max [7 2 7]) -> 7", "(max [6]) -> 6", "(max [0]) -> 0"], "time": 0.000911}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 7 9]) -> 9", "(max [1 9]) -> 9", "(max [1 9 0]) -> 9", "(max [4]) -> 4", "(max [7 6 2]) -> 7", "(max [0 7 0]) -> 7", "(max [1 4 0]) -> 4"], "time": 7.616541}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 7]) -> 7", "(max [7 8 8]) -> 8", "(max [7 9 5 7]) -> 9", "(max [0 2]) -> 2", "(max [5 2]) -> 5", "(max [3 1 7]) -> 7", "(max [6 1]) -> 6"], "time": 7.74572}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 9 2 7]) -> 9", "(max [1]) -> 1", "(max [4]) -> 4", "(max [2]) -> 2", "(max [8 0 7]) -> 8", "(max [1]) -> 1", "(max [5 6 0]) -> 6"], "time": 9.905754}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 8]) -> 8", "(max [8 1]) -> 8", "(max [3 1]) -> 3", "(max [0 1]) -> 1", "(max [0 1 2 8]) -> 8", "(max [8 4]) -> 8", "(max [7 3 4 3]) -> 7"], "time": 8.205122}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 1 0]) -> 1", "(max [6 4 1 2 2]) -> 6", "(max [0 9]) -> 9", "(max [8 1 4 2 7]) -> 8", "(max [3 9]) -> 9", "(max [5 0 6]) -> 6", "(max [2 6]) -> 6"], "time": 7.671348}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 7]) -> 7", "(max [6 1]) -> 6", "(max [6]) -> 6", "(max [5]) -> 5", "(max [2]) -> 2", "(max [8 3 3]) -> 8", "(max [9 9 9 5]) -> 9"], "time": 7.548016}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 1 c) d c)) 0)) _) _)", "examples": ["(max [8 8 9]) -> 9", "(max [0 6 9 1]) -> 9", "(max [7 1 7]) -> 7", "(max [4 7 0 7]) -> 7", "(max [4 8 9]) -> 9", "(max [5]) -> 5", "(max [3]) -> 3"], "time": 8.566165}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 2 6]) -> 6", "(max [4 4 5 4]) -> 5", "(max [2 9]) -> 9", "(max [3]) -> 3", "(max [8 5 4 5 2]) -> 8", "(max [3]) -> 3", "(max [5 2 7 1 2]) -> 7"], "time": 7.251127}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 2 4 8]) -> 8", "(max [7 9 5 8 0]) -> 9", "(max [7 0 8 1]) -> 8", "(max [6 7 2]) -> 7", "(max [2 1]) -> 2", "(max [1 4]) -> 4", "(max [4 2 5]) -> 5"], "time": 9.817061}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3]) -> 3", "(max [1 1 3]) -> 3", "(max [1]) -> 1", "(max [8 4 1 4 1]) -> 8", "(max [4 7 2]) -> 7", "(max [2]) -> 2", "(max [4]) -> 4"], "time": 9.049119}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6]) -> 6", "(max [3 9 1 2 8]) -> 9", "(max [7 5 9]) -> 9", "(max [8]) -> 8", "(max [4 7 6 2 8]) -> 8", "(max [2 9 7]) -> 9", "(max [7 5 0]) -> 7"], "time": 8.738636}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6]) -> 6", "(max [4 6]) -> 6", "(max [7 6 0 6]) -> 7", "(max [2 9 5 8 7]) -> 9", "(max [8 4]) -> 8", "(max [6]) -> 6", "(max [8 8 0]) -> 8"], "time": 7.109163}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 1 c) d c)) 0)) _) _)", "examples": ["(max [9 1]) -> 9", "(max [1 7]) -> 7", "(max [0 3]) -> 3", "(max [3 5 7]) -> 7", "(max [7 1 7]) -> 7", "(max [2]) -> 2", "(max [3 6]) -> 6"], "time": 7.092366}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 7]) -> 7", "(max [0]) -> 0", "(max [5 0]) -> 5", "(max [0 0 9 5 0]) -> 9", "(max [3 9 6 0]) -> 9", "(max [4]) -> 4", "(max [1 9 8 2]) -> 9"], "time": 6.863457}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 2 4 5]) -> 6", "(max [8 5]) -> 8", "(max [5 8 4 8 8]) -> 8", "(max [0 3 2 8]) -> 8", "(max [1 5]) -> 5", "(max [1]) -> 1", "(max [9 2 1 0 4]) -> 9"], "time": 7.410288}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 5 1 1]) -> 5", "(max [1 7]) -> 7", "(max [6 7]) -> 7", "(max [9 3 8 6 9]) -> 9", "(max [5 7 0 6 1]) -> 7", "(max [0]) -> 0", "(max [3 9 0 8]) -> 9"], "time": 7.069384}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 2 2 3]) -> 3", "(max [3]) -> 3", "(max [4 5]) -> 5", "(max [1 9]) -> 9", "(max [5 2 4]) -> 5", "(max [5 0]) -> 5", "(max [3 9 4 3]) -> 9"], "time": 6.644789}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 6]) -> 6", "(max [9 6 2 8]) -> 9", "(max [9 9]) -> 9", "(max [4 1]) -> 4", "(max [8]) -> 8", "(max [5 6 0 1]) -> 6", "(max [1 9 9 2]) -> 9"], "time": 6.120879}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 3 0 2]) -> 3", "(max [7 5 9 0]) -> 9", "(max [5]) -> 5", "(max [1 5 6]) -> 6", "(max [7 9 7 8 8]) -> 9", "(max [8 5 9]) -> 9", "(max [2 7 0 3 9]) -> 9"], "time": 6.367273}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 2 6 9 6]) -> 9", "(max [3 1 6 3 7]) -> 7", "(max [7 4 9]) -> 9", "(max [9 2 4]) -> 9", "(max [2 5 7 5 9]) -> 9", "(max [5 9 9 3 6]) -> 9", "(max [7 7]) -> 7"], "time": 6.117269}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 9]) -> 9", "(max [9 0 3 9]) -> 9", "(max [0 3 4 4]) -> 4", "(max [0]) -> 0", "(max [6 7]) -> 7", "(max [3]) -> 3", "(max [6 1 3 3 1]) -> 6"], "time": 6.146696}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 0]) -> 2", "(max [0 0 5 2]) -> 5", "(max [7 5 0 2 4]) -> 7", "(max [7 1 8 4 1]) -> 8", "(max [8 7 1]) -> 8", "(max [1 2 5 0]) -> 5", "(max [1 2 3 3]) -> 3"], "time": 6.250288}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 5]) -> 5", "(max [4 3]) -> 4", "(max [6 6]) -> 6", "(max [8]) -> 8", "(max [5 8 2 2]) -> 8", "(max [6 7 0 7 5]) -> 7", "(max [4 5 5]) -> 5"], "time": 6.023079}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 0 2]) -> 4", "(max [3]) -> 3", "(max [0]) -> 0", "(max [7 1 0 5 3]) -> 7", "(max [5 5 7 3 6]) -> 7", "(max [0 1 0 6 6]) -> 6", "(max [6 4]) -> 6"], "time": 4.595727}
