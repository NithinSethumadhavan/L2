{"time": 0.875904, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {9 {3 {2}} {5 {4}}}) -> [2 4]", "(leaves {5 {0}}) -> [0]", "(leaves {5}) -> [5]", "(leaves {1}) -> [1]", "(leaves {0 {7} {8}}) -> [7 8]", "(leaves {9 {9 {0}}}) -> [0]", "(leaves {9 {9} {6}}) -> [9 6]", "(leaves {}) -> []", "(leaves {7 {4 {9}} {5 {4} {4}}}) -> [9 4 4]", "(leaves {4 {4} {4}}) -> [4 4]"], "name": "leaves"}
{"time": 0.898186, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {}) -> []", "(leaves {5 {4}}) -> [4]", "(leaves {9 {9 {3} {6}} {8 {8}}}) -> [3 6 8]", "(leaves {3 {5}}) -> [5]", "(leaves {9 {9} {0}}) -> [9 0]", "(leaves {7 {6 {6} {9}}}) -> [6 9]", "(leaves {7}) -> [7]", "(leaves {1 {2}}) -> [2]", "(leaves {}) -> []", "(leaves {9}) -> [9]"], "name": "leaves"}
{"time": 0.849667, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {1 {8} {6}}) -> [8 6]", "(leaves {4 {4} {3 {0} {9}}}) -> [4 0 9]", "(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {1}) -> [1]", "(leaves {8 {9}}) -> [9]", "(leaves {9 {2}}) -> [2]", "(leaves {}) -> []", "(leaves {7 {2}}) -> [2]", "(leaves {9}) -> [9]"], "name": "leaves"}
{"time": 0.998798, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {3 {3} {1 {4}}}) -> [3 4]", "(leaves {7}) -> [7]", "(leaves {0 {3} {4}}) -> [3 4]", "(leaves {3 {9}}) -> [9]", "(leaves {6 {4}}) -> [4]", "(leaves {8 {5}}) -> [5]", "(leaves {1 {6 {2} {1}}}) -> [2 1]", "(leaves {5}) -> [5]", "(leaves {9 {1} {0}}) -> [1 0]", "(leaves {6}) -> [6]"], "name": "leaves"}
{"time": 0.953654, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9 {1 {3} {9}}}) -> [3 9]", "(leaves {8 {5 {4} {3}} {1 {9}}}) -> [4 3 9]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4 {5}}) -> [5]", "(leaves {6}) -> [6]", "(leaves {3 {3}}) -> [3]", "(leaves {8 {3}}) -> [3]", "(leaves {2}) -> [2]", "(leaves {1}) -> [1]"], "name": "leaves"}
{"time": 0.996331, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2 {7 {6}} {8 {7 {3} {9}}}}) -> [6 3 9]", "(leaves {}) -> []", "(leaves {5 {6 {5} {6}} {5 {6}}}) -> [5 6 6]", "(leaves {5 {7}}) -> [7]", "(leaves {9 {9 {4}}}) -> [4]", "(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {5 {9 {9}} {9 {6} {1}}}) -> [9 6 1]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.933163, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0 {4 {9} {0}}}) -> [9 0]", "(leaves {}) -> []", "(leaves {7 {6 {4}} {7 {0}}}) -> [4 0]", "(leaves {1 {1 {1}} {0}}) -> [1 0]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {7}) -> [7]", "(leaves {}) -> []", "(leaves {9 {1}}) -> [1]", "(leaves {8 {6 {1} {1}}}) -> [1 1]"], "name": "leaves"}
{"time": 1.025082, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {6} {0}}) -> [6 0]", "(leaves {8}) -> [8]", "(leaves {4 {0 {0 {1} {4}} {8}} {3}}) -> [1 4 8 3]", "(leaves {3 {9}}) -> [9]", "(leaves {0 {8 {1}} {8 {0}}}) -> [1 0]", "(leaves {2 {6 {2} {0}}}) -> [2 0]", "(leaves {3 {0 {5 {7}}} {4}}) -> [7 4]", "(leaves {1}) -> [1]", "(leaves {}) -> []", "(leaves {8 {7} {0 {6}}}) -> [7 6]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 1.04771, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {0 {1} {5}}) -> [1 5]", "(leaves {9 {1 {0}} {5 {3}}}) -> [0 3]", "(leaves {5 {1 {8}}}) -> [8]", "(leaves {4}) -> [4]", "(leaves {7 {6 {7}}}) -> [7]", "(leaves {}) -> []", "(leaves {6 {7 {6 {5}} {6 {2} {8}}}}) -> [5 2 8]", "(leaves {1}) -> [1]", "(leaves {8}) -> [8]", "(leaves {5 {9}}) -> [9]"], "name": "leaves"}
{"time": 1.05537, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {3 {6 {7} {8 {8}}}}) -> [7 8]", "(leaves {3}) -> [3]", "(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {5}) -> [5]", "(leaves {8}) -> [8]", "(leaves {6 {0 {3 {7}} {6 {2} {7}}} {9 {0 {8} {1}} {2}}}) -> [7 2 7 8 1 2]", "(leaves {5 {2}}) -> [2]", "(leaves {}) -> []", "(leaves {}) -> []"], "name": "leaves"}
{"time": 1.05359, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2 {0}}) -> [0]", "(leaves {9}) -> [9]", "(leaves {}) -> []", "(leaves {6 {6} {6 {8}}}) -> [6 8]", "(leaves {0 {8 {7} {2 {2} {4}}} {6}}) -> [7 2 4 6]", "(leaves {1 {3}}) -> [3]", "(leaves {5 {3} {3}}) -> [3 3]", "(leaves {0 {4 {1}}}) -> [1]", "(leaves {6 {9 {3} {7}} {7 {9} {7}}}) -> [3 7 9 7]", "(leaves {9 {9 {3}} {7}}) -> [3 7]", "(leaves {9 {0 {1} {9}}}) -> [1 9]"], "name": "leaves"}
{"time": 1.057768, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {5}}) -> [5]", "(leaves {8}) -> [8]", "(leaves {2 {2} {6}}) -> [2 6]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6 {3}}) -> [3]", "(leaves {}) -> []", "(leaves {6 {9}}) -> [9]", "(leaves {7 {2 {2} {5}} {1 {1} {4}}}) -> [2 5 1 4]", "(leaves {}) -> []", "(leaves {}) -> []"], "name": "leaves"}
{"time": 1.06537, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {4}) -> [4]", "(leaves {5}) -> [5]", "(leaves {5 {5} {5}}) -> [5 5]", "(leaves {8}) -> [8]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {0 {0 {7 {7}}} {2 {7}}}) -> [7 7]", "(leaves {0 {7 {8 {9} {7}} {7}}}) -> [9 7 7]", "(leaves {}) -> []", "(leaves {8}) -> [8]"], "name": "leaves"}
{"time": 1.089264, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {1 {7 {5}}}) -> [5]", "(leaves {5 {9 {6} {2}} {5 {5} {7}}}) -> [6 2 5 7]", "(leaves {8 {2} {2}}) -> [2 2]", "(leaves {7}) -> [7]", "(leaves {8}) -> [8]", "(leaves {4}) -> [4]", "(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {5 {1} {3 {0 {1}}}}) -> [1 1]", "(leaves {5 {9}}) -> [9]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 1.07807, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6 {3 {5}} {9 {7}}}) -> [5 7]", "(leaves {5 {6 {0 {1} {5}} {6 {0}}}}) -> [1 5 0]", "(leaves {1 {0} {7}}) -> [0 7]", "(leaves {8 {1} {6}}) -> [1 6]", "(leaves {9 {4 {1 {7}}} {5 {2}}}) -> [7 2]", "(leaves {2 {8 {4}} {3 {4}}}) -> [4 4]", "(leaves {7}) -> [7]", "(leaves {0 {4 {0} {4}}}) -> [0 4]", "(leaves {0 {5}}) -> [5]", "(leaves {1 {5} {5}}) -> [5 5]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 1.195293, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9 {6 {2 {8}}} {7 {2 {1} {8}} {4}}}) -> [8 1 8 4]", "(leaves {9 {7 {4} {8}}}) -> [4 8]", "(leaves {5 {8 {8} {6 {3}}}}) -> [8 3]", "(leaves {1 {1}}) -> [1]", "(leaves {4 {5}}) -> [5]", "(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {9 {1}}) -> [1]", "(leaves {5 {5}}) -> [5]", "(leaves {2 {2} {4 {1 {2} {3}}}}) -> [2 2 3]"], "name": "leaves"}
{"time": 0.847285, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {0}) -> [0]", "(leaves {8 {3} {3}}) -> [3 3]", "(leaves {3}) -> [3]", "(leaves {6 {0 {3 {7} {9}}} {4}}) -> [7 9 4]", "(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {3 {7 {8 {7}}} {2 {3 {7}} {3 {1}}}}) -> [7 7 1]", "(leaves {7 {3}}) -> [3]", "(leaves {8 {6 {3 {1}}} {2}}) -> [1 2]", "(leaves {4 {1 {4 {5} {5}}} {3}}) -> [5 5 3]"], "name": "leaves"}
{"time": 0.828673, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {}) -> []", "(leaves {1 {8 {2 {3} {5}} {8 {7} {2}}} {5}}) -> [3 5 7 2 5]", "(leaves {0 {5 {2 {0}}} {1 {3}}}) -> [0 3]", "(leaves {7 {4 {1 {8} {3}} {1 {7} {4}}} {2 {4 {9} {7}} {6}}}) -> [8 3 7 4 9 7 6]", "(leaves {5}) -> [5]", "(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {5}) -> [5]", "(leaves {8 {0 {2 {6} {0}} {9 {7} {8}}} {0 {3} {9}}}) -> [6 0 7 8 3 9]", "(leaves {3 {4}}) -> [4]"], "name": "leaves"}
{"time": 0.925216, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {6 {9 {6 {2} {9}} {5 {2}}}}) -> [2 9 2]", "(leaves {}) -> []", "(leaves {4 {5} {1 {3}}}) -> [5 3]", "(leaves {9 {9 {6} {0}}}) -> [6 0]", "(leaves {3 {2 {9 {5} {4}} {1 {8} {7}}} {3 {9 {5} {7}}}}) -> [5 4 8 7 5 7]", "(leaves {9}) -> [9]", "(leaves {8}) -> [8]", "(leaves {5 {1}}) -> [1]"], "name": "leaves"}
{"time": 0.865651, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5 {0}}) -> [0]", "(leaves {4 {8} {5}}) -> [8 5]", "(leaves {0}) -> [0]", "(leaves {1}) -> [1]", "(leaves {2 {3}}) -> [3]", "(leaves {3 {8 {0 {0} {8}} {0}} {8 {8}}}) -> [0 8 0 8]", "(leaves {2 {8 {8} {9}}}) -> [8 9]", "(leaves {7}) -> [7]", "(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {4 {4 {7 {9} {0}}} {9}}) -> [9 0 9]"], "name": "leaves"}
{"time": 0.883574, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {3 {5}}) -> [5]", "(leaves {5 {8 {2}} {8 {5}}}) -> [2 5]", "(leaves {4 {0} {9 {4}}}) -> [0 4]", "(leaves {3 {0} {6}}) -> [0 6]", "(leaves {8 {0} {4}}) -> [0 4]", "(leaves {}) -> []", "(leaves {0 {2}}) -> [2]", "(leaves {}) -> []", "(leaves {7 {7}}) -> [7]", "(leaves {}) -> []", "(leaves {0 {3 {4 {2}} {9 {2}}} {5}}) -> [2 2 5]"], "name": "leaves"}
{"time": 0.948628, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4 {5}}) -> [5]", "(leaves {4}) -> [4]", "(leaves {2}) -> [2]", "(leaves {2 {9 {2} {2}} {3 {7}}}) -> [2 2 7]", "(leaves {}) -> []", "(leaves {8 {1 {1 {1} {8}}}}) -> [1 8]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9 {4}}) -> [4]", "(leaves {2 {7} {7}}) -> [7 7]"], "name": "leaves"}
{"time": 0.908477, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6 {7 {2}}}) -> [2]", "(leaves {}) -> []", "(leaves {0 {3 {0 {2}}}}) -> [2]", "(leaves {9 {6} {4 {2} {3}}}) -> [6 2 3]", "(leaves {6 {0 {5}}}) -> [5]", "(leaves {}) -> []", "(leaves {3 {4 {0}}}) -> [0]", "(leaves {8}) -> [8]", "(leaves {2 {1 {9}}}) -> [9]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.917419, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {4} {3}}) -> [4 3]", "(leaves {7 {1 {8}}}) -> [8]", "(leaves {2 {2}}) -> [2]", "(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {}) -> []", "(leaves {3 {8 {7} {4}}}) -> [7 4]", "(leaves {3 {6 {8} {3}}}) -> [8 3]", "(leaves {8 {1}}) -> [1]", "(leaves {5}) -> [5]", "(leaves {2 {6}}) -> [6]"], "name": "leaves"}
{"time": 0.934398, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6 {0}}) -> [0]", "(leaves {6 {9 {5 {4}}} {4}}) -> [4 4]", "(leaves {5 {7 {6} {5}}}) -> [6 5]", "(leaves {5 {2} {8}}) -> [2 8]", "(leaves {1}) -> [1]", "(leaves {2 {0 {0 {8} {2}} {7}} {8 {8}}}) -> [8 2 7 8]", "(leaves {8 {2}}) -> [2]", "(leaves {8 {1 {9 {2}}}}) -> [2]", "(leaves {1 {4}}) -> [4]", "(leaves {}) -> []", "(leaves {1}) -> [1]"], "name": "leaves"}
{"time": 0.848562, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6 {2} {7}}) -> [2 7]", "(leaves {3}) -> [3]", "(leaves {2}) -> [2]", "(leaves {8 {0 {9}} {0 {5}}}) -> [9 5]", "(leaves {6 {3} {3 {8}}}) -> [3 8]", "(leaves {1}) -> [1]", "(leaves {9 {4 {0} {8}}}) -> [0 8]", "(leaves {5 {6}}) -> [6]", "(leaves {1}) -> [1]", "(leaves {}) -> []", "(leaves {3 {3}}) -> [3]"], "name": "leaves"}
{"time": 0.968405, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {5 {2} {4 {1} {5}}}) -> [2 1 5]", "(leaves {9}) -> [9]", "(leaves {6 {5} {7}}) -> [5 7]", "(leaves {}) -> []", "(leaves {9 {6}}) -> [6]", "(leaves {6 {9 {0}}}) -> [0]"], "name": "leaves"}
{"time": 1.021678, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6 {1 {1 {6} {9}} {3 {0} {4}}} {2}}) -> [6 9 0 4 2]", "(leaves {0}) -> [0]", "(leaves {8 {2 {2} {4}}}) -> [2 4]", "(leaves {5}) -> [5]", "(leaves {5}) -> [5]", "(leaves {3 {7}}) -> [7]", "(leaves {1 {3 {6 {9}}} {1 {9}}}) -> [9 9]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5 {4}}) -> [4]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.967743, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7 {2 {2 {1}}} {2 {9 {4} {9}}}}) -> [1 4 9]", "(leaves {7 {6}}) -> [6]", "(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {3 {8}}) -> [8]", "(leaves {7 {8}}) -> [8]", "(leaves {}) -> []", "(leaves {2 {5} {3}}) -> [5 3]", "(leaves {6 {2} {2}}) -> [2 2]", "(leaves {8 {9}}) -> [9]"], "name": "leaves"}
{"time": 0.905438, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9 {3 {6}} {9 {9 {2}}}}) -> [6 2]", "(leaves {}) -> []", "(leaves {5 {3} {8 {6} {1}}}) -> [3 6 1]", "(leaves {1 {0 {0} {4}}}) -> [0 4]", "(leaves {}) -> []", "(leaves {7 {8 {9 {4}} {3 {6}}}}) -> [4 6]", "(leaves {}) -> []", "(leaves {7 {3}}) -> [3]", "(leaves {9}) -> [9]", "(leaves {8 {3} {7 {5}}}) -> [3 5]", "(leaves {6}) -> [6]"], "name": "leaves"}
{"time": 0.83452, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {7}) -> [7]", "(leaves {5}) -> [5]", "(leaves {5 {6}}) -> [6]", "(leaves {3}) -> [3]", "(leaves {5 {9} {8}}) -> [9 8]", "(leaves {3 {9 {8}} {4}}) -> [8 4]", "(leaves {8 {8 {7} {8}}}) -> [7 8]", "(leaves {1}) -> [1]", "(leaves {}) -> []", "(leaves {1 {9}}) -> [9]"], "name": "leaves"}
{"time": 0.854771, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {7}) -> [7]", "(leaves {7 {8 {8 {8}}} {6}}) -> [8 6]", "(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {6 {2 {5 {5} {9}}} {4 {8}}}) -> [5 9 8]", "(leaves {6}) -> [6]", "(leaves {0}) -> [0]", "(leaves {2 {3}}) -> [3]", "(leaves {8 {7} {0 {2}}}) -> [7 2]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.698248, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {4 {8} {8}}) -> [8 8]", "(leaves {3}) -> [3]", "(leaves {3}) -> [3]", "(leaves {2 {5}}) -> [5]", "(leaves {5 {3} {8 {7} {5}}}) -> [3 7 5]", "(leaves {1}) -> [1]", "(leaves {0}) -> [0]", "(leaves {}) -> []", "(leaves {8 {8}}) -> [8]", "(leaves {2}) -> [2]", "(leaves {1 {8} {8}}) -> [8 8]"], "name": "leaves"}
{"time": 0.730654, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {3 {9 {9} {1}}}) -> [9 1]", "(leaves {2 {9}}) -> [9]", "(leaves {8}) -> [8]", "(leaves {2 {1} {8 {4} {3}}}) -> [1 4 3]", "(leaves {0}) -> [0]", "(leaves {5 {8 {4} {4}}}) -> [4 4]", "(leaves {4 {5} {8 {4}}}) -> [5 4]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6 {4}}) -> [4]"], "name": "leaves"}
{"time": 0.760908, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {}) -> []", "(leaves {1 {5} {5}}) -> [5 5]", "(leaves {6 {0} {2 {3 {1}}}}) -> [0 1]", "(leaves {9 {9 {8} {8}}}) -> [8 8]", "(leaves {7 {2} {0 {2}}}) -> [2 2]", "(leaves {}) -> []", "(leaves {6 {3 {8} {9}}}) -> [8 9]", "(leaves {6 {3} {6 {5}}}) -> [3 5]", "(leaves {}) -> []", "(leaves {5}) -> [5]"], "name": "leaves"}
{"time": 0.618055, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8 {2}}) -> [2]", "(leaves {1}) -> [1]", "(leaves {4 {3}}) -> [3]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {9 {2 {8}}}) -> [8]", "(leaves {4 {2}}) -> [2]"], "name": "leaves"}
{"time": 0.764513, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {}) -> []", "(leaves {8 {5 {7} {4}}}) -> [7 4]", "(leaves {7}) -> [7]", "(leaves {5}) -> [5]", "(leaves {3}) -> [3]", "(leaves {}) -> []", "(leaves {1 {8 {0}} {6 {9} {1}}}) -> [0 9 1]", "(leaves {5 {5 {2} {1}}}) -> [2 1]"], "name": "leaves"}
{"time": 0.815541, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9 {1} {2}}) -> [1 2]", "(leaves {4 {8 {9 {6} {9}}}}) -> [6 9]", "(leaves {3 {5 {7}}}) -> [7]", "(leaves {}) -> []", "(leaves {0 {1} {4}}) -> [1 4]", "(leaves {0}) -> [0]", "(leaves {}) -> []", "(leaves {9 {4}}) -> [4]", "(leaves {0 {0} {8}}) -> [0 8]", "(leaves {6 {8 {6 {6}}}}) -> [6]"], "name": "leaves"}
{"time": 0.652024, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {0}) -> [0]", "(leaves {8}) -> [8]", "(leaves {3}) -> [3]", "(leaves {4 {1}}) -> [1]", "(leaves {5}) -> [5]", "(leaves {4 {6}}) -> [6]", "(leaves {1}) -> [1]", "(leaves {9 {5} {0}}) -> [5 0]", "(leaves {7}) -> [7]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.956399, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {3 {0 {8}}}) -> [8]", "(leaves {3 {6} {3}}) -> [6 3]", "(leaves {6}) -> [6]", "(leaves {9}) -> [9]", "(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {}) -> []", "(leaves {4 {3 {1} {7 {0} {8}}} {6 {0}}}) -> [1 0 8 0]", "(leaves {4}) -> [4]"], "name": "leaves"}
{"time": 0.994929, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {6 {3} {3}} {9 {5} {6}}}) -> [3 3 5 6]", "(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {9 {2 {2}}}) -> [2]", "(leaves {}) -> []", "(leaves {8 {3} {7}}) -> [3 7]", "(leaves {4}) -> [4]", "(leaves {5 {2}}) -> [2]", "(leaves {7 {3 {3 {5} {7}}}}) -> [5 7]", "(leaves {5 {7 {2}} {5 {6 {8} {5}}}}) -> [2 8 5]", "(leaves {6 {4}}) -> [4]"], "name": "leaves"}
{"time": 0.956343, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {1 {4}}) -> [4]", "(leaves {2}) -> [2]", "(leaves {2 {0 {8} {5}}}) -> [8 5]", "(leaves {5 {9}}) -> [9]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4 {0}}) -> [0]", "(leaves {8 {4 {9 {8} {1}}}}) -> [8 1]", "(leaves {7}) -> [7]", "(leaves {6}) -> [6]"], "name": "leaves"}
{"time": 1.002395, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4 {0}}) -> [0]", "(leaves {0 {3 {0 {4}}} {5}}) -> [4 5]", "(leaves {}) -> []", "(leaves {9 {2 {6 {8} {2}}}}) -> [8 2]", "(leaves {0 {3}}) -> [3]", "(leaves {1 {7}}) -> [7]", "(leaves {7 {7} {3}}) -> [7 3]", "(leaves {5}) -> [5]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.743349, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2 {8}}) -> [8]", "(leaves {4}) -> [4]", "(leaves {}) -> []", "(leaves {0 {4 {2}} {7 {1} {6}}}) -> [2 1 6]", "(leaves {6}) -> [6]", "(leaves {1}) -> [1]", "(leaves {2 {9 {6 {7}}}}) -> [7]", "(leaves {3 {8 {7 {2}} {5 {7}}}}) -> [2 7]", "(leaves {8 {3 {1 {5}}} {5}}) -> [5 5]", "(leaves {9}) -> [9]", "(leaves {2 {8} {0}}) -> [8 0]"], "name": "leaves"}
{"time": 1.004937, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {1}) -> [1]", "(leaves {}) -> []", "(leaves {7 {0 {1} {9}}}) -> [1 9]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4 {7}}) -> [7]", "(leaves {1 {4} {3}}) -> [4 3]", "(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {9 {3}}) -> [3]"], "name": "leaves"}
{"time": 1.050508, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5 {6 {7 {0} {0}}}}) -> [0 0]", "(leaves {0 {5} {3 {8}}}) -> [5 8]", "(leaves {8 {8}}) -> [8]", "(leaves {4}) -> [4]", "(leaves {5}) -> [5]", "(leaves {}) -> []", "(leaves {3 {9} {8}}) -> [9 8]", "(leaves {9}) -> [9]", "(leaves {9 {7}}) -> [7]", "(leaves {6}) -> [6]", "(leaves {3}) -> [3]"], "name": "leaves"}
{"time": 1.011889, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7 {7}}) -> [7]", "(leaves {9 {6 {2} {7 {1}}}}) -> [2 1]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4 {0 {1}} {1}}) -> [1 1]", "(leaves {7 {6}}) -> [6]", "(leaves {5}) -> [5]", "(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {6 {8} {6}}) -> [8 6]"], "name": "leaves"}
{"time": 1.034101, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2 {7 {4}} {1}}) -> [4 1]", "(leaves {}) -> []", "(leaves {7 {9}}) -> [9]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7 {7}}) -> [7]", "(leaves {2 {3 {2} {5 {1}}}}) -> [2 1]", "(leaves {8 {9}}) -> [9]", "(leaves {5 {7} {3}}) -> [7 3]"], "name": "leaves"}
{"time": 0.542091, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {6 {0} {7}}) -> [0 7]", "(leaves {}) -> []", "(leaves {1 {9 {3} {5}} {9}}) -> [3 5 9]", "(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {2}) -> [2]", "(leaves {4 {1} {2}}) -> [1 2]", "(leaves {2}) -> [2]", "(leaves {5 {3}}) -> [3]", "(leaves {8}) -> [8]"], "name": "leaves"}
{"time": 0.663408, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2 {0 {3}} {2 {0}}}) -> [3 0]", "(leaves {0 {0 {9 {5}}}}) -> [5]", "(leaves {}) -> []", "(leaves {8 {4}}) -> [4]", "(leaves {0}) -> [0]", "(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {8}) -> [8]", "(leaves {8}) -> [8]", "(leaves {5 {3}}) -> [3]", "(leaves {5 {8 {5 {1} {7}} {2 {4} {9}}} {2}}) -> [1 7 4 9 2]"], "name": "leaves"}
{"time": 0.601424, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {}) -> []", "(leaves {6 {3} {2}}) -> [3 2]", "(leaves {}) -> []", "(leaves {8 {8} {0 {8}}}) -> [8 8]", "(leaves {9 {8 {8}} {9 {2}}}) -> [8 2]", "(leaves {}) -> []", "(leaves {4 {7}}) -> [7]", "(leaves {}) -> []", "(leaves {9 {9} {5}}) -> [9 5]"], "name": "leaves"}
{"time": 0.627013, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0 {6}}) -> [6]", "(leaves {}) -> []", "(leaves {9 {4 {5} {3}}}) -> [5 3]", "(leaves {3 {2}}) -> [2]", "(leaves {1 {0}}) -> [0]", "(leaves {8}) -> [8]", "(leaves {8}) -> [8]", "(leaves {9 {5 {3}} {7 {6 {3} {8}} {1 {6}}}}) -> [3 3 8 6]", "(leaves {2 {0 {9} {6}} {3 {7} {1}}}) -> [9 6 7 1]", "(leaves {}) -> []", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.606228, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {0}) -> [0]", "(leaves {7 {4 {0 {0}}} {6 {7 {2} {3}}}}) -> [0 2 3]", "(leaves {2 {7} {4 {4} {3 {3} {6}}}}) -> [7 4 3 6]", "(leaves {6 {6} {4}}) -> [6 4]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7 {6} {4}}) -> [6 4]", "(leaves {5 {6}}) -> [6]", "(leaves {8}) -> [8]", "(leaves {5 {0} {5 {9}}}) -> [0 9]"], "name": "leaves"}
{"time": 0.761435, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3 {6 {5} {4 {3} {0}}} {5 {2 {7} {8}} {5}}}) -> [5 3 0 7 8 5]", "(leaves {9 {1} {9}}) -> [1 9]", "(leaves {3}) -> [3]", "(leaves {5 {3 {8}} {9 {7 {4} {1}} {3 {7}}}}) -> [8 4 1 7]", "(leaves {2}) -> [2]", "(leaves {1 {2} {3}}) -> [2 3]", "(leaves {}) -> []", "(leaves {6}) -> [6]"], "name": "leaves"}
{"time": 0.617996, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9 {8} {0}}) -> [8 0]", "(leaves {1 {7 {3 {6} {5}}}}) -> [6 5]", "(leaves {4}) -> [4]", "(leaves {9}) -> [9]", "(leaves {9 {5}}) -> [5]", "(leaves {1}) -> [1]", "(leaves {3 {5} {0}}) -> [5 0]", "(leaves {}) -> []", "(leaves {6 {5}}) -> [5]", "(leaves {0 {3 {2 {6}} {7}}}) -> [6 7]", "(leaves {5 {4 {6}}}) -> [6]"], "name": "leaves"}
{"time": 0.943077, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {8 {2 {6} {6}}}) -> [6 6]", "(leaves {1 {2 {3}}}) -> [3]", "(leaves {9 {4} {7}}) -> [4 7]", "(leaves {9 {0} {1}}) -> [0 1]", "(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {0 {9} {5 {1}}}) -> [9 1]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 1.126122, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9 {9 {6 {7}}}}) -> [7]", "(leaves {8 {7}}) -> [7]", "(leaves {1 {6}}) -> [6]", "(leaves {8}) -> [8]", "(leaves {7}) -> [7]", "(leaves {4 {5}}) -> [5]", "(leaves {9 {1} {6}}) -> [1 6]", "(leaves {4 {4 {5 {8} {5}}} {4}}) -> [8 5 4]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.875102, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0 {4}}) -> [4]", "(leaves {0 {1 {1 {3}}} {1 {8}}}) -> [3 8]", "(leaves {}) -> []", "(leaves {6 {8 {5 {8} {5}} {0 {3}}}}) -> [8 5 3]", "(leaves {5 {1}}) -> [1]", "(leaves {6 {6}}) -> [6]", "(leaves {}) -> []", "(leaves {0 {9} {5}}) -> [9 5]", "(leaves {8}) -> [8]", "(leaves {4 {2} {2}}) -> [2 2]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.981964, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {3 {4 {4} {5}} {5 {2} {4}}}) -> [4 5 2 4]", "(leaves {2}) -> [2]", "(leaves {}) -> []", "(leaves {2 {8 {3 {2}} {7 {5}}}}) -> [2 5]", "(leaves {3 {4 {9} {9 {4}}} {7 {3 {7}} {7 {2}}}}) -> [9 4 7 2]", "(leaves {5 {3 {3} {0 {9}}}}) -> [3 9]", "(leaves {7}) -> [7]", "(leaves {5 {5} {2 {3} {6}}}) -> [5 3 6]"], "name": "leaves"}
{"time": 0.909292, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {6 {6 {9}} {6}}) -> [9 6]", "(leaves {1}) -> [1]", "(leaves {1 {5} {6}}) -> [5 6]", "(leaves {6 {3}}) -> [3]", "(leaves {1 {4} {7}}) -> [4 7]", "(leaves {4 {9} {8}}) -> [9 8]", "(leaves {7 {8}}) -> [8]", "(leaves {6}) -> [6]", "(leaves {8 {5}}) -> [5]"], "name": "leaves"}
{"time": 0.95638, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {7 {1 {3}} {3 {6} {1}}}) -> [3 6 1]", "(leaves {6}) -> [6]", "(leaves {1 {4}}) -> [4]", "(leaves {7}) -> [7]", "(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {4}) -> [4]", "(leaves {1 {7 {4}} {0 {7} {4}}}) -> [4 7 4]", "(leaves {}) -> []", "(leaves {}) -> []"], "name": "leaves"}
{"time": 1.010198, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6 {1 {2} {1 {1} {8}}}}) -> [2 1 8]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {2 {7 {3} {9}} {0 {6}}}) -> [3 9 6]", "(leaves {4}) -> [4]", "(leaves {0}) -> [0]", "(leaves {3 {5 {4} {0 {5} {8}}} {7 {2 {8}}}}) -> [4 5 8 8]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.541466, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {7 {1 {3 {1}}}}) -> [1]", "(leaves {4 {0}}) -> [0]", "(leaves {9 {5} {9 {3}}}) -> [5 3]", "(leaves {8 {3 {3 {9} {1}} {0 {5}}}}) -> [9 1 5]", "(leaves {8}) -> [8]", "(leaves {8}) -> [8]", "(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {5 {1} {5}}) -> [1 5]", "(leaves {}) -> []", "(leaves {8 {3 {8 {0} {2}}} {7}}) -> [0 2 7]"], "name": "leaves"}
{"time": 0.523128, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {5}}) -> [5]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {3}) -> [3]", "(leaves {8}) -> [8]", "(leaves {0}) -> [0]", "(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {7 {0} {6 {1}}}) -> [0 1]", "(leaves {1 {5}}) -> [5]"], "name": "leaves"}
{"time": 1.122252, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5 {2 {3 {5} {6}}}}) -> [5 6]", "(leaves {}) -> []", "(leaves {8 {5 {4}} {7 {3} {3}}}) -> [4 3 3]", "(leaves {0}) -> [0]", "(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {6}) -> [6]", "(leaves {6}) -> [6]", "(leaves {8 {3}}) -> [3]", "(leaves {}) -> []", "(leaves {4 {8}}) -> [8]"], "name": "leaves"}
{"time": 0.517326, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8 {3}}) -> [3]", "(leaves {2 {7}}) -> [7]", "(leaves {}) -> []", "(leaves {1 {9}}) -> [9]", "(leaves {2 {3} {9}}) -> [3 9]", "(leaves {0 {3 {7}} {4}}) -> [7 4]", "(leaves {9}) -> [9]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3 {5 {5}}}) -> [5]"], "name": "leaves"}
{"time": 1.033343, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5 {7} {9}}) -> [7 9]", "(leaves {0 {3 {6}} {0}}) -> [6 0]", "(leaves {2 {9}}) -> [9]", "(leaves {5}) -> [5]", "(leaves {1 {4 {5}}}) -> [5]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8 {6}}) -> [6]", "(leaves {3 {4}}) -> [4]", "(leaves {7 {3}}) -> [3]"], "name": "leaves"}
{"time": 0.628028, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {8 {7 {8}} {2 {6}}}}) -> [8 6]", "(leaves {}) -> []", "(leaves {8 {3}}) -> [3]", "(leaves {3 {2}}) -> [2]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {8}) -> [8]", "(leaves {}) -> []", "(leaves {3 {6} {7}}) -> [6 7]", "(leaves {2 {3} {1}}) -> [3 1]"], "name": "leaves"}
{"time": 0.544399, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {9 {9} {8 {0 {1} {9}} {6 {6}}}}) -> [9 1 9 6]", "(leaves {8 {0}}) -> [0]", "(leaves {1 {8 {1} {3 {6}}}}) -> [1 6]", "(leaves {0 {0 {2} {0}} {4}}) -> [2 0 4]", "(leaves {1}) -> [1]", "(leaves {}) -> []", "(leaves {9 {2} {8}}) -> [2 8]", "(leaves {5 {3 {0}}}) -> [0]", "(leaves {}) -> []", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.923765, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2 {6}}) -> [6]", "(leaves {1}) -> [1]", "(leaves {7 {2} {2}}) -> [2 2]", "(leaves {9 {0}}) -> [0]", "(leaves {3}) -> [3]", "(leaves {9 {2} {5}}) -> [2 5]", "(leaves {}) -> []", "(leaves {0 {6 {7} {7}} {1 {4} {1}}}) -> [7 7 4 1]", "(leaves {}) -> []", "(leaves {9 {9 {4} {0}} {2 {1} {9}}}) -> [4 0 1 9]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.564917, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {6}) -> [6]", "(leaves {4 {4} {0}}) -> [4 0]", "(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {3 {7} {8}}) -> [7 8]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {4 {2 {3} {3}} {1}}) -> [3 3 1]", "(leaves {5 {4 {6} {7}} {9 {8} {6}}}) -> [6 7 8 6]"], "name": "leaves"}
{"time": 0.600685, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {4 {7}}) -> [7]", "(leaves {6 {8 {1} {4}} {0 {0} {4}}}) -> [1 4 0 4]", "(leaves {7 {3}}) -> [3]", "(leaves {6 {5} {6}}) -> [5 6]", "(leaves {1}) -> [1]", "(leaves {9}) -> [9]", "(leaves {8 {4 {9 {7}}}}) -> [7]", "(leaves {9 {8} {3}}) -> [8 3]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7}) -> [7]"], "name": "leaves"}
{"time": 0.658487, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {0 {4}}) -> [4]", "(leaves {0 {4}}) -> [4]", "(leaves {2 {6} {7}}) -> [6 7]", "(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {0 {3}}) -> [3]", "(leaves {7}) -> [7]", "(leaves {7 {2 {3} {9}} {3 {0}}}) -> [3 9 0]"], "name": "leaves"}
{"time": 1.065451, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {1 {1 {0 {2}}} {0 {7 {4} {0}}}}) -> [2 4 0]", "(leaves {0}) -> [0]", "(leaves {5 {2 {3 {6} {3}} {4}}}) -> [6 3 4]", "(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {9}) -> [9]"], "name": "leaves"}
{"time": 1.029569, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {1 {8}}) -> [8]", "(leaves {}) -> []", "(leaves {9 {7} {0}}) -> [7 0]", "(leaves {}) -> []", "(leaves {4 {7} {0}}) -> [7 0]", "(leaves {6 {4 {1}} {3 {3}}}) -> [1 3]", "(leaves {5 {9}}) -> [9]", "(leaves {}) -> []", "(leaves {5 {4} {2}}) -> [4 2]", "(leaves {3 {2 {2 {5}} {4 {8} {2}}} {0 {6 {4} {1}} {8 {0} {7}}}}) -> [5 8 2 4 1 0 7]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.634079, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0 {9} {2}}) -> [9 2]", "(leaves {8 {6 {6} {3}} {4 {4}}}) -> [6 3 4]", "(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {2}) -> [2]", "(leaves {9 {6 {7 {3} {3}} {4 {2}}}}) -> [3 3 2]", "(leaves {1}) -> [1]", "(leaves {0}) -> [0]", "(leaves {7 {8} {0}}) -> [8 0]", "(leaves {5}) -> [5]", "(leaves {9 {0 {0} {6 {2}}} {6 {3 {9} {1}}}}) -> [0 2 9 1]"], "name": "leaves"}
{"time": 1.029626, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6 {1} {5}}) -> [1 5]", "(leaves {9 {2 {0}} {2 {5}}}) -> [0 5]", "(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {6}) -> [6]", "(leaves {7 {3} {0}}) -> [3 0]", "(leaves {3}) -> [3]", "(leaves {5 {9} {8 {4}}}) -> [9 4]", "(leaves {4 {0 {9}} {9 {6} {8}}}) -> [9 6 8]", "(leaves {7}) -> [7]", "(leaves {5 {9}}) -> [9]"], "name": "leaves"}
{"time": 0.963218, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {7}) -> [7]", "(leaves {0 {3 {8 {5} {7}}}}) -> [5 7]", "(leaves {}) -> []", "(leaves {5 {7}}) -> [7]", "(leaves {4 {0 {9 {8}}} {5 {3 {6} {7}} {5}}}) -> [8 6 7 5]", "(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {5}) -> [5]", "(leaves {7 {6 {7} {1}}}) -> [7 1]", "(leaves {8 {7 {4 {7}}} {1 {2} {7 {5} {1}}}}) -> [7 2 5 1]"], "name": "leaves"}
{"time": 1.081313, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {8}}) -> [8]", "(leaves {9 {7 {0} {9}} {7 {0} {5}}}) -> [0 9 0 5]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1 {6}}) -> [6]", "(leaves {}) -> []", "(leaves {4 {4} {3}}) -> [4 3]", "(leaves {}) -> []", "(leaves {4 {1}}) -> [1]", "(leaves {}) -> []", "(leaves {}) -> []"], "name": "leaves"}
{"time": 1.076412, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {1 {7} {4}}) -> [7 4]", "(leaves {7 {7 {3 {1}}} {3 {7 {9} {8}} {8 {1} {0}}}}) -> [1 9 8 1 0]", "(leaves {3 {2}}) -> [2]", "(leaves {}) -> []", "(leaves {1 {8}}) -> [8]", "(leaves {}) -> []", "(leaves {9 {2}}) -> [2]", "(leaves {9 {4 {6} {3}}}) -> [6 3]", "(leaves {}) -> []", "(leaves {5 {5 {2}} {9 {1}}}) -> [2 1]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.962147, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5 {6}}) -> [6]", "(leaves {7 {6 {5 {2}} {4 {5}}}}) -> [2 5]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2 {2 {5 {9} {2}} {4 {7} {5}}} {5 {2 {8} {5}}}}) -> [9 2 7 5 8 5]", "(leaves {9 {2 {2} {6 {2}}}}) -> [2 2]", "(leaves {7 {4 {3 {9}}} {3 {4}}}) -> [9 4]", "(leaves {5}) -> [5]", "(leaves {}) -> []", "(leaves {9}) -> [9]"], "name": "leaves"}
{"time": 0.628699, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {4 {3}}) -> [3]", "(leaves {9 {9 {8}} {4}}) -> [8 4]", "(leaves {9}) -> [9]", "(leaves {7 {5} {6}}) -> [5 6]", "(leaves {}) -> []", "(leaves {4 {8 {5} {8 {9} {2}}}}) -> [5 9 2]", "(leaves {1}) -> [1]", "(leaves {1 {1}}) -> [1]", "(leaves {3 {5 {4 {6} {4}} {4 {3} {0}}}}) -> [6 4 3 0]", "(leaves {8 {7} {1}}) -> [7 1]"], "name": "leaves"}
{"time": 1.063209, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5 {8 {4} {9}} {9 {3} {6}}}) -> [4 9 3 6]", "(leaves {8}) -> [8]", "(leaves {}) -> []", "(leaves {0 {3 {4 {1}}} {0 {1 {8}}}}) -> [1 8]", "(leaves {5 {2}}) -> [2]", "(leaves {1 {0}}) -> [0]", "(leaves {9}) -> [9]", "(leaves {5 {4} {5}}) -> [4 5]", "(leaves {7}) -> [7]", "(leaves {4 {8 {9}}}) -> [9]", "(leaves {3}) -> [3]"], "name": "leaves"}
{"time": 0.673639, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {7 {6} {0 {8} {8}}}) -> [6 8 8]", "(leaves {4 {9} {1}}) -> [9 1]", "(leaves {2 {4}}) -> [4]", "(leaves {}) -> []", "(leaves {9 {4}}) -> [4]", "(leaves {9}) -> [9]", "(leaves {4 {1 {7 {5} {9}} {5}}}) -> [5 9 5]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1 {3}}) -> [3]"], "name": "leaves"}
{"time": 0.965077, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {3 {8} {5}}) -> [8 5]", "(leaves {}) -> []", "(leaves {0 {0 {0} {5}}}) -> [0 5]", "(leaves {}) -> []", "(leaves {1 {8} {7}}) -> [8 7]", "(leaves {}) -> []", "(leaves {4 {2}}) -> [2]", "(leaves {2 {3}}) -> [3]", "(leaves {0 {4 {3}}}) -> [3]", "(leaves {6 {8 {2}}}) -> [2]", "(leaves {8 {1}}) -> [1]"], "name": "leaves"}
{"time": 0.817682, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5 {5} {9 {5}}}) -> [5 5]", "(leaves {0}) -> [0]", "(leaves {1 {5 {4 {9}} {1 {8}}} {0 {5 {4}} {4 {2} {9}}}}) -> [9 8 4 2 9]", "(leaves {1}) -> [1]", "(leaves {9 {7}}) -> [7]", "(leaves {6 {2}}) -> [2]", "(leaves {2 {2 {1} {8}} {4 {5}}}) -> [1 8 5]", "(leaves {9 {8 {3 {5}}} {6 {7 {3} {3}}}}) -> [5 3 3]", "(leaves {4}) -> [4]", "(leaves {6 {8}}) -> [8]", "(leaves {5 {1 {2}}}) -> [2]"], "name": "leaves"}
{"time": 0.652216, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9 {4}}) -> [4]", "(leaves {6}) -> [6]", "(leaves {4}) -> [4]", "(leaves {6}) -> [6]", "(leaves {0 {7} {3 {5} {6}}}) -> [7 5 6]", "(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {0}) -> [0]", "(leaves {1}) -> [1]", "(leaves {}) -> []", "(leaves {3 {7} {6}}) -> [7 6]"], "name": "leaves"}
{"time": 0.672577, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5 {6}}) -> [6]", "(leaves {2}) -> [2]", "(leaves {3 {4}}) -> [4]", "(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {2 {4}}) -> [4]", "(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {}) -> []", "(leaves {7 {3 {3}} {1}}) -> [3 1]"], "name": "leaves"}
{"time": 0.749528, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {}) -> []", "(leaves {9 {6} {5}}) -> [6 5]", "(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {}) -> []", "(leaves {8 {4} {8}}) -> [4 8]", "(leaves {4 {0 {2} {6}} {8 {1}}}) -> [2 6 1]", "(leaves {7 {2} {7 {5}}}) -> [2 5]", "(leaves {6 {9}}) -> [9]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.754737, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2 {5 {3}} {1 {9 {8}}}}) -> [3 8]", "(leaves {7 {4} {0}}) -> [4 0]", "(leaves {3 {0 {6 {9} {3}}}}) -> [9 3]", "(leaves {4 {8 {5}} {9 {4} {8}}}) -> [5 4 8]", "(leaves {6}) -> [6]", "(leaves {6}) -> [6]", "(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.774648, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0 {3} {4}}) -> [3 4]", "(leaves {5 {5 {9} {7 {4} {4}}}}) -> [9 4 4]", "(leaves {9 {8 {4}}}) -> [4]", "(leaves {7 {2 {4}} {5 {0}}}) -> [4 0]", "(leaves {5}) -> [5]", "(leaves {2}) -> [2]", "(leaves {7 {3} {2}}) -> [3 2]", "(leaves {9}) -> [9]", "(leaves {2}) -> [2]", "(leaves {5 {6} {8 {7} {3}}}) -> [6 7 3]", "(leaves {3}) -> [3]"], "name": "leaves"}
{"time": 0.714599, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {7 {2 {0}} {8}}) -> [0 8]", "(leaves {}) -> []", "(leaves {9 {8} {9 {8 {2}} {1 {2} {0}}}}) -> [8 2 2 0]", "(leaves {6 {1}}) -> [1]", "(leaves {3 {1} {8}}) -> [1 8]", "(leaves {2 {8}}) -> [8]", "(leaves {2 {7 {6}}}) -> [6]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.76431, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1 {2 {7 {8} {6}} {5 {7}}} {7 {3}}}) -> [8 6 7 3]", "(leaves {0 {4 {2 {4}}}}) -> [4]", "(leaves {4 {6}}) -> [6]", "(leaves {2}) -> [2]", "(leaves {1 {9 {1 {6} {4}} {5 {2}}} {8 {1} {0 {1} {8}}}}) -> [6 4 2 1 1 8]", "(leaves {9 {1}}) -> [1]", "(leaves {0 {8} {5 {7}}}) -> [8 7]", "(leaves {7 {3 {2} {8}} {6}}) -> [2 8 6]", "(leaves {2 {7} {2}}) -> [7 2]", "(leaves {5}) -> [5]"], "name": "leaves"}
{"time": 0.771095, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {3 {4} {0}}) -> [4 0]", "(leaves {9 {9 {7} {0}} {7}}) -> [7 0 7]", "(leaves {4}) -> [4]", "(leaves {1 {9 {2 {7}}}}) -> [7]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1 {3} {3}}) -> [3 3]", "(leaves {7 {3}}) -> [3]", "(leaves {9 {8 {8 {0}}} {4 {2 {6}}}}) -> [0 6]", "(leaves {4 {8} {3}}) -> [8 3]", "(leaves {8}) -> [8]"], "name": "leaves"}
{"time": 0.45214, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {1 {1 {0 {5}}} {9 {2 {0} {1}} {0}}}) -> [5 0 1 0]", "(leaves {1 {5}}) -> [5]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {6 {5}}) -> [5]", "(leaves {}) -> []", "(leaves {7 {6}}) -> [6]", "(leaves {}) -> []", "(leaves {0}) -> [0]"], "name": "leaves"}
{"time": 0.790276, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {9}) -> [9]", "(leaves {0 {2 {7} {1}} {5}}) -> [7 1 5]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3 {6 {2}}}) -> [2]", "(leaves {9}) -> [9]", "(leaves {0 {9} {9 {9 {0}}}}) -> [9 0]", "(leaves {8}) -> [8]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.838084, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6 {8 {1}} {5 {4} {3}}}) -> [1 4 3]", "(leaves {3 {2 {2} {3}}}) -> [2 3]", "(leaves {5 {9 {8}}}) -> [8]", "(leaves {}) -> []", "(leaves {1 {7}}) -> [7]", "(leaves {4}) -> [4]", "(leaves {4 {8 {2 {2}} {5}} {2 {6 {8}}}}) -> [2 5 8]", "(leaves {2}) -> [2]", "(leaves {}) -> []", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.682738, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {2}) -> [2]", "(leaves {2 {1} {7}}) -> [1 7]", "(leaves {5}) -> [5]", "(leaves {6 {4}}) -> [4]", "(leaves {6}) -> [6]", "(leaves {9 {0} {3}}) -> [0 3]", "(leaves {6}) -> [6]", "(leaves {9 {1 {5 {2}} {5 {6}}}}) -> [2 6]", "(leaves {0 {9}}) -> [9]", "(leaves {8 {2}}) -> [2]"], "name": "leaves"}
{"time": 0.550613, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5 {8} {7}}) -> [8 7]", "(leaves {3}) -> [3]", "(leaves {4 {7 {2} {6 {4}}} {0 {3 {3} {0}}}}) -> [2 4 3 0]", "(leaves {9 {9} {8}}) -> [9 8]", "(leaves {4 {3 {0}} {6}}) -> [0 6]", "(leaves {3 {9}}) -> [9]", "(leaves {7 {1}}) -> [1]", "(leaves {1 {0} {2}}) -> [0 2]", "(leaves {1 {6 {0}}}) -> [0]", "(leaves {5}) -> [5]", "(leaves {0}) -> [0]"], "name": "leaves"}
{"time": 0.63389, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {0 {7} {6 {0} {4 {3}}}}) -> [7 0 3]", "(leaves {7 {9}}) -> [9]", "(leaves {6 {9 {9 {0}} {6 {7}}} {3}}) -> [0 7 3]", "(leaves {8}) -> [8]", "(leaves {9}) -> [9]", "(leaves {0 {1 {6} {2}}}) -> [6 2]", "(leaves {0 {4}}) -> [4]"], "name": "leaves"}
