{"name": "shiftl", "time": 0.001004, "solution": "(let shiftl (let a (lambda (b) (reverse b)) _) _)", "examples": ["(shiftl [1 6]) -> [6 1]", "(shiftl [8 1]) -> [1 8]", "(shiftl [4]) -> [4]", "(shiftl [0]) -> [0]", "(shiftl [6 9 9]) -> [9 9 6]", "(shiftl [8]) -> [8]"]}
{"name": "shiftl", "time": 0.563441, "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [9 0 6]) -> [0 6 9]", "(shiftl [5]) -> [5]", "(shiftl [8 8]) -> [8 8]", "(shiftl [5]) -> [5]", "(shiftl [2]) -> [2]", "(shiftl [9]) -> [9]"]}
{"name": "shiftl", "time": 1.953093, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 7]) -> [7 5]", "(shiftl [2 9]) -> [9 2]", "(shiftl [2 4]) -> [4 2]", "(shiftl [1 7 8 5 8]) -> [7 8 5 8 1]", "(shiftl [9 8 7 9 2]) -> [8 7 9 2 9]", "(shiftl [6]) -> [6]"]}
{"name": "shiftl", "time": 2.029789, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 4 4]) -> [4 4 3]", "(shiftl [1 4 9 6]) -> [4 9 6 1]", "(shiftl [8 1 6]) -> [1 6 8]", "(shiftl [8 2]) -> [2 8]", "(shiftl [0 3 3]) -> [3 3 0]", "(shiftl [3 1 6 6 8]) -> [1 6 6 8 3]"]}
{"name": "shiftl", "time": 2.050094, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 4 6 6]) -> [4 6 6 1]", "(shiftl [5 2 0]) -> [2 0 5]", "(shiftl [8 1]) -> [1 8]", "(shiftl [2 7 4 3]) -> [7 4 3 2]", "(shiftl [8 9 8]) -> [9 8 8]", "(shiftl [7 5]) -> [5 7]"]}
{"name": "shiftl", "time": 2.102051, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 7 7 2 0]) -> [7 7 2 0 7]", "(shiftl [6 8 7 0 8]) -> [8 7 0 8 6]", "(shiftl [3 4 0 4]) -> [4 0 4 3]", "(shiftl [1 4]) -> [4 1]", "(shiftl [3 7 5]) -> [7 5 3]", "(shiftl [4]) -> [4]"]}
{"name": "shiftl", "time": 0.001078, "solution": "(let shiftl (let a (lambda (b) (reverse b)) _) _)", "examples": ["(shiftl [4]) -> [4]", "(shiftl [9 6 2 6]) -> [6 2 6 9]", "(shiftl [7]) -> [7]", "(shiftl [4]) -> [4]", "(shiftl [7 9]) -> [9 7]", "(shiftl [7 2]) -> [2 7]"]}
{"name": "shiftl", "time": 2.004412, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 1]) -> [1 7]", "(shiftl [7]) -> [7]", "(shiftl [0 6 2 1]) -> [6 2 1 0]", "(shiftl [5 4 1 6]) -> [4 1 6 5]", "(shiftl [9 5 6]) -> [5 6 9]", "(shiftl [5 6]) -> [6 5]"]}
{"name": "shiftl", "time": 2.905673, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [4 4]) -> [4 4]", "(shiftl [7 2 1 9 0]) -> [2 1 9 0 7]", "(shiftl [1 8 3]) -> [8 3 1]", "(shiftl [9 5 1 2]) -> [5 1 2 9]", "(shiftl [7 9 1 7]) -> [9 1 7 7]", "(shiftl [8 5 1 0 6]) -> [5 1 0 6 8]"]}
{"name": "shiftl", "time": 2.689629, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9]) -> [9]", "(shiftl [7 0]) -> [0 7]", "(shiftl [5]) -> [5]", "(shiftl [8 9 2 1 2]) -> [9 2 1 2 8]", "(shiftl [3 8 4 9 7]) -> [8 4 9 7 3]", "(shiftl [4 4]) -> [4 4]"]}
{"name": "shiftl", "time": 2.930624, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 9 5]) -> [9 5 3]", "(shiftl [8]) -> [8]", "(shiftl [1]) -> [1]", "(shiftl [7 0 3 6]) -> [0 3 6 7]", "(shiftl [5 2 7 9 7]) -> [2 7 9 7 5]", "(shiftl [7 4 7]) -> [4 7 7]"]}
{"name": "shiftl", "time": 2.968319, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 8 8 8]) -> [8 8 8 9]", "(shiftl [7 9 5 1 3]) -> [9 5 1 3 7]", "(shiftl [1 8 5 6 1]) -> [8 5 6 1 1]", "(shiftl [4 8]) -> [8 4]", "(shiftl [5 3 9]) -> [3 9 5]", "(shiftl [3]) -> [3]"]}
{"name": "shiftl", "time": 2.983847, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6 0 6 5]) -> [0 6 5 6]", "(shiftl [2 5]) -> [5 2]", "(shiftl [7 4 0 5 0]) -> [4 0 5 0 7]", "(shiftl [6 5]) -> [5 6]", "(shiftl [0 3 3 7 7]) -> [3 3 7 7 0]", "(shiftl [0 1 2]) -> [1 2 0]"]}
{"name": "shiftl", "time": 2.959891, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 5 8]) -> [5 8 9]", "(shiftl [2 9 8]) -> [9 8 2]", "(shiftl [7 8 1 8 1]) -> [8 1 8 1 7]", "(shiftl [3]) -> [3]", "(shiftl [1 2]) -> [2 1]", "(shiftl [8 9 3 0 3]) -> [9 3 0 3 8]"]}
{"name": "shiftl", "time": 3.092389, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 5 1 9 3]) -> [5 1 9 3 8]", "(shiftl [7 2 9]) -> [2 9 7]", "(shiftl [2 9 5 6 3]) -> [9 5 6 3 2]", "(shiftl [8]) -> [8]", "(shiftl [4 3 0]) -> [3 0 4]", "(shiftl [8 1]) -> [1 8]"]}
{"name": "shiftl", "time": 3.129851, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6 6 2 3]) -> [6 2 3 6]", "(shiftl [9 9 4]) -> [9 4 9]", "(shiftl [5 7 7 8 8]) -> [7 7 8 8 5]", "(shiftl [9 3]) -> [3 9]", "(shiftl [1 0 9 7]) -> [0 9 7 1]", "(shiftl [0]) -> [0]"]}
{"name": "shiftl", "time": 3.099945, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8]) -> [8]", "(shiftl [7 3 5 5]) -> [3 5 5 7]", "(shiftl [9 0]) -> [0 9]", "(shiftl [1 7 3 7 6]) -> [7 3 7 6 1]", "(shiftl [6 1 3 3]) -> [1 3 3 6]", "(shiftl [3 2 9 1]) -> [2 9 1 3]"]}
{"name": "shiftl", "time": 3.155943, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 4 5 1 6]) -> [4 5 1 6 5]", "(shiftl [9 6 6 1]) -> [6 6 1 9]", "(shiftl [7 0 9 2]) -> [0 9 2 7]", "(shiftl [8 0 8 3 7]) -> [0 8 3 7 8]", "(shiftl [5 4 5 8]) -> [4 5 8 5]", "(shiftl [2 3 7 4 7]) -> [3 7 4 7 2]"]}
{"name": "shiftl", "time": 3.19289, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 9 8 2 7]) -> [9 8 2 7 7]", "(shiftl [2 1]) -> [1 2]", "(shiftl [1 1]) -> [1 1]", "(shiftl [9 4 5 1]) -> [4 5 1 9]", "(shiftl [1 0 3 6]) -> [0 3 6 1]", "(shiftl [0 2 1 8 7]) -> [2 1 8 7 0]"]}
{"name": "shiftl", "time": 0.661895, "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [0]) -> [0]", "(shiftl [8 1]) -> [1 8]", "(shiftl [6 7 9]) -> [7 9 6]", "(shiftl [0]) -> [0]", "(shiftl [8 0]) -> [0 8]", "(shiftl [2 9 1 1]) -> [9 1 1 2]"]}
{"name": "shiftl", "time": 2.253834, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 4 6]) -> [4 6 8]", "(shiftl [5 0 8]) -> [0 8 5]", "(shiftl [5 2 1]) -> [2 1 5]", "(shiftl [2 2 2 3]) -> [2 2 3 2]", "(shiftl [6 1 9 4 4]) -> [1 9 4 4 6]", "(shiftl [3 5 2 0 0]) -> [5 2 0 0 3]"]}
{"name": "shiftl", "time": 2.102414, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3]) -> [3]", "(shiftl [5 6 9]) -> [6 9 5]", "(shiftl [1 6 7 8]) -> [6 7 8 1]", "(shiftl [5 7]) -> [7 5]", "(shiftl [8 0 4 6]) -> [0 4 6 8]", "(shiftl [9]) -> [9]"]}
{"name": "shiftl", "time": 2.31415, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6 2 5]) -> [2 5 6]", "(shiftl [6 2 8 7 0]) -> [2 8 7 0 6]", "(shiftl [6 8 8]) -> [8 8 6]", "(shiftl [9 8 8]) -> [8 8 9]", "(shiftl [0 2 3 2]) -> [2 3 2 0]", "(shiftl [9 5 4 2 6]) -> [5 4 2 6 9]"]}
{"name": "shiftl", "time": 2.412914, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 1 2 9]) -> [1 2 9 3]", "(shiftl [9 0 5]) -> [0 5 9]", "(shiftl [5 8 5 1 9]) -> [8 5 1 9 5]", "(shiftl [3 5 5]) -> [5 5 3]", "(shiftl [9 3 2 3]) -> [3 2 3 9]", "(shiftl [7 7 4]) -> [7 4 7]"]}
{"name": "shiftl", "time": 1.855701, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 8 0]) -> [8 0 5]", "(shiftl [9 2 5 0]) -> [2 5 0 9]", "(shiftl [1 0 5 9]) -> [0 5 9 1]", "(shiftl [9 9 8]) -> [9 8 9]", "(shiftl [6 9 8]) -> [9 8 6]", "(shiftl [5]) -> [5]"]}
{"name": "shiftl", "time": 1.939438, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 1 5 1 3]) -> [1 5 1 3 2]", "(shiftl [4]) -> [4]", "(shiftl [1 1 6 9 1]) -> [1 6 9 1 1]", "(shiftl [4 4 9 0 2]) -> [4 9 0 2 4]", "(shiftl [0 7 2 8]) -> [7 2 8 0]", "(shiftl [3]) -> [3]"]}
{"name": "shiftl", "time": 1.752657, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2]) -> [2]", "(shiftl [5]) -> [5]", "(shiftl [0 3 9 3]) -> [3 9 3 0]", "(shiftl [9]) -> [9]", "(shiftl [3 4 5 7]) -> [4 5 7 3]", "(shiftl [9 5 0]) -> [5 0 9]"]}
{"name": "shiftl", "time": 2.001795, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 8 9 1]) -> [8 9 1 9]", "(shiftl [8 6 3 2]) -> [6 3 2 8]", "(shiftl [7 6 7]) -> [6 7 7]", "(shiftl [9 6 8 7]) -> [6 8 7 9]", "(shiftl [8 5]) -> [5 8]", "(shiftl [4 4]) -> [4 4]"]}
{"name": "shiftl", "time": 2.355698, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 8 0]) -> [8 0 1]", "(shiftl [2 0 9]) -> [0 9 2]", "(shiftl [1 2 5 3]) -> [2 5 3 1]", "(shiftl [9 0]) -> [0 9]", "(shiftl [0]) -> [0]", "(shiftl [8 6 0 5]) -> [6 0 5 8]"]}
{"name": "shiftl", "time": 2.306973, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8]) -> [8]", "(shiftl [7 0 8 4 9]) -> [0 8 4 9 7]", "(shiftl [0 4]) -> [4 0]", "(shiftl [5 4]) -> [4 5]", "(shiftl [2 6 6]) -> [6 6 2]", "(shiftl [3 3 5 4]) -> [3 5 4 3]"]}
{"name": "shiftl", "time": 2.355442, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2]) -> [2]", "(shiftl [2 8 0 7 8]) -> [8 0 7 8 2]", "(shiftl [8 8 3]) -> [8 3 8]", "(shiftl [5 4]) -> [4 5]", "(shiftl [0 4 7 1]) -> [4 7 1 0]", "(shiftl [5 2 7 3 1]) -> [2 7 3 1 5]"]}
{"name": "shiftl", "time": 2.461077, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9]) -> [9]", "(shiftl [0]) -> [0]", "(shiftl [3 6 8]) -> [6 8 3]", "(shiftl [2 7 7 7 2]) -> [7 7 7 2 2]", "(shiftl [2 6 1 4]) -> [6 1 4 2]", "(shiftl [1]) -> [1]"]}
{"name": "shiftl", "time": 2.701344, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1]) -> [1]", "(shiftl [6]) -> [6]", "(shiftl [1 8]) -> [8 1]", "(shiftl [4 9 0 1]) -> [9 0 1 4]", "(shiftl [4 5 5 9 3]) -> [5 5 9 3 4]", "(shiftl [3 2 8]) -> [2 8 3]"]}
{"name": "shiftl", "time": 2.903918, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6 1 9 2 4]) -> [1 9 2 4 6]", "(shiftl [5 6 7]) -> [6 7 5]", "(shiftl [6 3]) -> [3 6]", "(shiftl [0 3 6 0 8]) -> [3 6 0 8 0]", "(shiftl [6 6 1 1]) -> [6 1 1 6]", "(shiftl [7 6 7 4]) -> [6 7 4 7]"]}
{"name": "shiftl", "time": 1.563964, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8]) -> [8]", "(shiftl [1 1 8]) -> [1 8 1]", "(shiftl [0 6]) -> [6 0]", "(shiftl [1 4 9 2]) -> [4 9 2 1]", "(shiftl [2 2]) -> [2 2]", "(shiftl [4 0 2]) -> [0 2 4]"]}
{"name": "shiftl", "time": 2.778333, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 1 9 9]) -> [1 9 9 7]", "(shiftl [7 9 4 3 8]) -> [9 4 3 8 7]", "(shiftl [4 9 1 0 7]) -> [9 1 0 7 4]", "(shiftl [8 9 1]) -> [9 1 8]", "(shiftl [2 6 9]) -> [6 9 2]", "(shiftl [5 7 7 8 8]) -> [7 7 8 8 5]"]}
{"name": "shiftl", "time": 1.988985, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 6 8 2 3]) -> [6 8 2 3 3]", "(shiftl [2 6 3 3 3]) -> [6 3 3 3 2]", "(shiftl [3]) -> [3]", "(shiftl [9 0 3 3 0]) -> [0 3 3 0 9]", "(shiftl [9]) -> [9]", "(shiftl [8]) -> [8]"]}
{"name": "shiftl", "time": 2.697533, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5]) -> [5]", "(shiftl [5 9 4 3]) -> [9 4 3 5]", "(shiftl [9 1 7 4 8]) -> [1 7 4 8 9]", "(shiftl [6 8 1 0]) -> [8 1 0 6]", "(shiftl [7 9 2]) -> [9 2 7]", "(shiftl [3 1 0]) -> [1 0 3]"]}
{"name": "shiftl", "time": 2.323099, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6]) -> [6]", "(shiftl [9 5 3 3 2]) -> [5 3 3 2 9]", "(shiftl [5 7 8 0]) -> [7 8 0 5]", "(shiftl [4 6 2 7 3]) -> [6 2 7 3 4]", "(shiftl [6 4 9 6]) -> [4 9 6 6]", "(shiftl [8 8 8]) -> [8 8 8]"]}
{"name": "shiftl", "time": 2.314596, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0 3 5 5 5]) -> [3 5 5 5 0]", "(shiftl [2 0 9 4 5]) -> [0 9 4 5 2]", "(shiftl [7]) -> [7]", "(shiftl [2]) -> [2]", "(shiftl [0 4]) -> [4 0]", "(shiftl [2 3 6]) -> [3 6 2]"]}
{"name": "shiftl", "time": 1.90651, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 7]) -> [7 1]", "(shiftl [4 8 7 0]) -> [8 7 0 4]", "(shiftl [1 8 1 8 8]) -> [8 1 8 8 1]", "(shiftl [1 9 9 1]) -> [9 9 1 1]", "(shiftl [9 4 2]) -> [4 2 9]", "(shiftl [7]) -> [7]"]}
{"name": "shiftl", "time": 2.209328, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 5 5 7]) -> [5 5 7 7]", "(shiftl [6 1 2 5]) -> [1 2 5 6]", "(shiftl [5 6]) -> [6 5]", "(shiftl [8 7]) -> [7 8]", "(shiftl [1]) -> [1]", "(shiftl [5 3 6 8 7]) -> [3 6 8 7 5]"]}
{"name": "shiftl", "time": 2.126123, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8]) -> [8]", "(shiftl [9 1 2]) -> [1 2 9]", "(shiftl [1 0 3]) -> [0 3 1]", "(shiftl [1]) -> [1]", "(shiftl [4 7 6 7]) -> [7 6 7 4]", "(shiftl [6 3]) -> [3 6]"]}
{"name": "shiftl", "time": 1.887031, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0 7]) -> [7 0]", "(shiftl [4 2 1 7]) -> [2 1 7 4]", "(shiftl [6 1]) -> [1 6]", "(shiftl [3 5 9 8 5]) -> [5 9 8 5 3]", "(shiftl [4 8 8 1 1]) -> [8 8 1 1 4]", "(shiftl [7]) -> [7]"]}
{"name": "shiftl", "time": 2.737597, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 3 4]) -> [3 4 8]", "(shiftl [2 3 7 6 1]) -> [3 7 6 1 2]", "(shiftl [9]) -> [9]", "(shiftl [2]) -> [2]", "(shiftl [9]) -> [9]", "(shiftl [3 4 0 7 5]) -> [4 0 7 5 3]"]}
{"name": "shiftl", "time": 1.905098, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3]) -> [3]", "(shiftl [3]) -> [3]", "(shiftl [8 2 7 7 0]) -> [2 7 7 0 8]", "(shiftl [8]) -> [8]", "(shiftl [0 5 3 6 9]) -> [5 3 6 9 0]", "(shiftl [1 9 5]) -> [9 5 1]"]}
{"name": "shiftl", "time": 2.449564, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 4 9 7 9]) -> [4 9 7 9 3]", "(shiftl [4 3 1 0]) -> [3 1 0 4]", "(shiftl [7 2 0 0]) -> [2 0 0 7]", "(shiftl [6 8]) -> [8 6]", "(shiftl [8 5 6]) -> [5 6 8]", "(shiftl [8]) -> [8]"]}
{"name": "shiftl", "time": 1.804545, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 7]) -> [7 3]", "(shiftl [6 1 8 1 8]) -> [1 8 1 8 6]", "(shiftl [1 0 2]) -> [0 2 1]", "(shiftl [7]) -> [7]", "(shiftl [2 1 2]) -> [1 2 2]", "(shiftl [3 3 1]) -> [3 1 3]"]}
{"name": "shiftl", "time": 2.232092, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6 5]) -> [5 6]", "(shiftl [5 9 8 7]) -> [9 8 7 5]", "(shiftl [2 3 0]) -> [3 0 2]", "(shiftl [4 8 2 9 4]) -> [8 2 9 4 4]", "(shiftl [0 0 8]) -> [0 8 0]", "(shiftl [4 7 8 9]) -> [7 8 9 4]"]}
{"name": "shiftl", "time": 2.425339, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2]) -> [2]", "(shiftl [2 8 1]) -> [8 1 2]", "(shiftl [6 1 8]) -> [1 8 6]", "(shiftl [3 2 6 0 9]) -> [2 6 0 9 3]", "(shiftl [3 4 5 9]) -> [4 5 9 3]", "(shiftl [2 4 8 4]) -> [4 8 4 2]"]}
{"name": "shiftl", "time": 2.491845, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5]) -> [5]", "(shiftl [2 0 3 2]) -> [0 3 2 2]", "(shiftl [3 7 2 1]) -> [7 2 1 3]", "(shiftl [0 0 5 3 9]) -> [0 5 3 9 0]", "(shiftl [3]) -> [3]", "(shiftl [4 9 3]) -> [9 3 4]"]}
{"name": "shiftl", "time": 2.712958, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 9 1 8]) -> [9 1 8 7]", "(shiftl [6 0 9]) -> [0 9 6]", "(shiftl [1 9 5]) -> [9 5 1]", "(shiftl [8 9 0]) -> [9 0 8]", "(shiftl [5]) -> [5]", "(shiftl [7 3 6 0 8]) -> [3 6 0 8 7]"]}
{"name": "shiftl", "time": 2.23926, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 9]) -> [9 7]", "(shiftl [9 9 4]) -> [9 4 9]", "(shiftl [4]) -> [4]", "(shiftl [4 4 8]) -> [4 8 4]", "(shiftl [4 8]) -> [8 4]", "(shiftl [5 5 4 1 7]) -> [5 4 1 7 5]"]}
{"name": "shiftl", "time": 2.192118, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6 0 7]) -> [0 7 6]", "(shiftl [1]) -> [1]", "(shiftl [8 1 4 5]) -> [1 4 5 8]", "(shiftl [9 5 2 5]) -> [5 2 5 9]", "(shiftl [6 4 8]) -> [4 8 6]", "(shiftl [9 0 9]) -> [0 9 9]"]}
{"name": "shiftl", "time": 1.914038, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [4 5 3 0]) -> [5 3 0 4]", "(shiftl [2]) -> [2]", "(shiftl [2]) -> [2]", "(shiftl [5 9]) -> [9 5]", "(shiftl [3 4 3 8 8]) -> [4 3 8 8 3]", "(shiftl [4]) -> [4]"]}
{"name": "shiftl", "time": 2.194237, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 0 2]) -> [0 2 9]", "(shiftl [1]) -> [1]", "(shiftl [7]) -> [7]", "(shiftl [6 3]) -> [3 6]", "(shiftl [6 8 2]) -> [8 2 6]", "(shiftl [3 7 3 0 5]) -> [7 3 0 5 3]"]}
{"name": "shiftl", "time": 2.119822, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0 3]) -> [3 0]", "(shiftl [4 5 5 6]) -> [5 5 6 4]", "(shiftl [1]) -> [1]", "(shiftl [8 0 5 5 4]) -> [0 5 5 4 8]", "(shiftl [5]) -> [5]", "(shiftl [4 2]) -> [2 4]"]}
{"name": "shiftl", "time": 2.192117, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6 5 7 3]) -> [5 7 3 6]", "(shiftl [9 2 7]) -> [2 7 9]", "(shiftl [3 9 1]) -> [9 1 3]", "(shiftl [5 7 3 9 7]) -> [7 3 9 7 5]", "(shiftl [9 4 3]) -> [4 3 9]", "(shiftl [3 3 2 0 6]) -> [3 2 0 6 3]"]}
{"name": "shiftl", "time": 2.348201, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 7]) -> [7 1]", "(shiftl [7 6 2 4 4]) -> [6 2 4 4 7]", "(shiftl [4 5 7 2 9]) -> [5 7 2 9 4]", "(shiftl [6 9 5 8]) -> [9 5 8 6]", "(shiftl [3 0 8 7 1]) -> [0 8 7 1 3]", "(shiftl [7 6 9 3]) -> [6 9 3 7]"]}
{"name": "shiftl", "time": 2.259499, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 4]) -> [4 5]", "(shiftl [3]) -> [3]", "(shiftl [6 1 7]) -> [1 7 6]", "(shiftl [6 8 8 0 4]) -> [8 8 0 4 6]", "(shiftl [4 9]) -> [9 4]", "(shiftl [9 1 8]) -> [1 8 9]"]}
{"name": "shiftl", "time": 2.550245, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 2 3]) -> [2 3 2]", "(shiftl [1 2]) -> [2 1]", "(shiftl [2 0]) -> [0 2]", "(shiftl [2 1 8 6]) -> [1 8 6 2]", "(shiftl [4 6]) -> [6 4]", "(shiftl [3]) -> [3]"]}
{"name": "shiftl", "time": 2.532489, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6 4 1 2]) -> [4 1 2 6]", "(shiftl [1 4 6 4]) -> [4 6 4 1]", "(shiftl [3 8 7 9 0]) -> [8 7 9 0 3]", "(shiftl [6 7]) -> [7 6]", "(shiftl [3 4 5 5]) -> [4 5 5 3]", "(shiftl [6 9 1]) -> [9 1 6]"]}
{"name": "shiftl", "time": 2.060626, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6]) -> [6]", "(shiftl [8]) -> [8]", "(shiftl [7 9 8 9 5]) -> [9 8 9 5 7]", "(shiftl [9 4 4 1]) -> [4 4 1 9]", "(shiftl [4]) -> [4]", "(shiftl [1 1 7 2 6]) -> [1 7 2 6 1]"]}
{"name": "shiftl", "time": 2.006033, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0]) -> [0]", "(shiftl [1 8 2 4]) -> [8 2 4 1]", "(shiftl [6 4 0 5 0]) -> [4 0 5 0 6]", "(shiftl [7 8 1]) -> [8 1 7]", "(shiftl [6 5 3 9 1]) -> [5 3 9 1 6]", "(shiftl [2 3 2 5 9]) -> [3 2 5 9 2]"]}
{"name": "shiftl", "time": 2.563233, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 2]) -> [2 3]", "(shiftl [1 8 0 5]) -> [8 0 5 1]", "(shiftl [8 1 5 2 1]) -> [1 5 2 1 8]", "(shiftl [9 6]) -> [6 9]", "(shiftl [7 1 0 6]) -> [1 0 6 7]", "(shiftl [2 7 6]) -> [7 6 2]"]}
{"name": "shiftl", "time": 1.771905, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 6]) -> [6 7]", "(shiftl [5 9 2 7 7]) -> [9 2 7 7 5]", "(shiftl [0 1 6 2]) -> [1 6 2 0]", "(shiftl [1]) -> [1]", "(shiftl [0 2 2 9 9]) -> [2 2 9 9 0]", "(shiftl [5 3 8 2]) -> [3 8 2 5]"]}
{"name": "shiftl", "time": 2.114638, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 2 1 9]) -> [2 1 9 8]", "(shiftl [1 4]) -> [4 1]", "(shiftl [3 4 1]) -> [4 1 3]", "(shiftl [8 7 9]) -> [7 9 8]", "(shiftl [5 5]) -> [5 5]", "(shiftl [1 5 4 2 2]) -> [5 4 2 2 1]"]}
{"name": "shiftl", "time": 2.199846, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [4 2]) -> [2 4]", "(shiftl [4 9 2]) -> [9 2 4]", "(shiftl [7 9 8 1]) -> [9 8 1 7]", "(shiftl [7]) -> [7]", "(shiftl [8 0 2 8]) -> [0 2 8 8]", "(shiftl [1 8 2 6]) -> [8 2 6 1]"]}
{"name": "shiftl", "time": 2.251553, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 6 9 3]) -> [6 9 3 3]", "(shiftl [0 4 3]) -> [4 3 0]", "(shiftl [0]) -> [0]", "(shiftl [6 9 5 2 5]) -> [9 5 2 5 6]", "(shiftl [0 7 4 0]) -> [7 4 0 0]", "(shiftl [0 1 1 8]) -> [1 1 8 0]"]}
{"name": "shiftl", "time": 2.122853, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2]) -> [2]", "(shiftl [7 5 4 8]) -> [5 4 8 7]", "(shiftl [7 3 6]) -> [3 6 7]", "(shiftl [1 5 4 1]) -> [5 4 1 1]", "(shiftl [6 3 7 7 8]) -> [3 7 7 8 6]", "(shiftl [5]) -> [5]"]}
{"name": "shiftl", "time": 1.828436, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0]) -> [0]", "(shiftl [8 6]) -> [6 8]", "(shiftl [7 0 6 4]) -> [0 6 4 7]", "(shiftl [0]) -> [0]", "(shiftl [5 9 9]) -> [9 9 5]", "(shiftl [0]) -> [0]"]}
{"name": "shiftl", "time": 1.917977, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 0]) -> [0 8]", "(shiftl [7]) -> [7]", "(shiftl [9 7 3 1 6]) -> [7 3 1 6 9]", "(shiftl [5 0 9 7 7]) -> [0 9 7 7 5]", "(shiftl [1 2 3 5 0]) -> [2 3 5 0 1]", "(shiftl [8]) -> [8]"]}
{"name": "shiftl", "time": 2.374631, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 9 7]) -> [9 7 1]", "(shiftl [1 3]) -> [3 1]", "(shiftl [0 5 5 0 7]) -> [5 5 0 7 0]", "(shiftl [5 7 3 9]) -> [7 3 9 5]", "(shiftl [0]) -> [0]", "(shiftl [1 1 7]) -> [1 7 1]"]}
{"name": "shiftl", "time": 1.976325, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 9 4]) -> [9 4 1]", "(shiftl [6 6 6 7 8]) -> [6 6 7 8 6]", "(shiftl [2 1 3 1 0]) -> [1 3 1 0 2]", "(shiftl [7]) -> [7]", "(shiftl [7 1 1 4 6]) -> [1 1 4 6 7]", "(shiftl [4 3]) -> [3 4]"]}
{"name": "shiftl", "time": 2.013436, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6 9]) -> [9 6]", "(shiftl [9 4 7 4 9]) -> [4 7 4 9 9]", "(shiftl [4 5 3 0]) -> [5 3 0 4]", "(shiftl [2 2 9 3 5]) -> [2 9 3 5 2]", "(shiftl [4 0 1]) -> [0 1 4]", "(shiftl [3]) -> [3]"]}
{"name": "shiftl", "time": 2.035202, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 0]) -> [0 7]", "(shiftl [2 6 6 3]) -> [6 6 3 2]", "(shiftl [4]) -> [4]", "(shiftl [0 7]) -> [7 0]", "(shiftl [1 3 9 0 8]) -> [3 9 0 8 1]", "(shiftl [4 1 3 6]) -> [1 3 6 4]"]}
{"name": "shiftl", "time": 2.141326, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0 4 9 6 3]) -> [4 9 6 3 0]", "(shiftl [4 9 4]) -> [9 4 4]", "(shiftl [3]) -> [3]", "(shiftl [3 8 0 7 5]) -> [8 0 7 5 3]", "(shiftl [4 8 5]) -> [8 5 4]", "(shiftl [0 9 9 9]) -> [9 9 9 0]"]}
{"name": "shiftl", "time": 2.449456, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 9 3 7 7]) -> [9 3 7 7 9]", "(shiftl [8 9]) -> [9 8]", "(shiftl [1 1 5]) -> [1 5 1]", "(shiftl [1 0]) -> [0 1]", "(shiftl [2 7 7 6]) -> [7 7 6 2]", "(shiftl [1]) -> [1]"]}
{"name": "shiftl", "time": 2.38532, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 0 2 9]) -> [0 2 9 1]", "(shiftl [5 6 9 1 2]) -> [6 9 1 2 5]", "(shiftl [5 8]) -> [8 5]", "(shiftl [1 1 8 5]) -> [1 8 5 1]", "(shiftl [5]) -> [5]", "(shiftl [0]) -> [0]"]}
{"name": "shiftl", "time": 2.287371, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7]) -> [7]", "(shiftl [1 1 0 9]) -> [1 0 9 1]", "(shiftl [1 8 4]) -> [8 4 1]", "(shiftl [7 9 6 7 2]) -> [9 6 7 2 7]", "(shiftl [2 8 5 0]) -> [8 5 0 2]", "(shiftl [9 7 7 3]) -> [7 7 3 9]"]}
{"name": "shiftl", "time": 2.52135, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2]) -> [2]", "(shiftl [2 5 2 3 7]) -> [5 2 3 7 2]", "(shiftl [7 0 9]) -> [0 9 7]", "(shiftl [8 8]) -> [8 8]", "(shiftl [2 5 9 0]) -> [5 9 0 2]", "(shiftl [7 0 4 0]) -> [0 4 0 7]"]}
{"name": "shiftl", "time": 1.938341, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6]) -> [6]", "(shiftl [8 2]) -> [2 8]", "(shiftl [4 3]) -> [3 4]", "(shiftl [2 1]) -> [1 2]", "(shiftl [8 9 4]) -> [9 4 8]", "(shiftl [8 1 6 8]) -> [1 6 8 8]"]}
{"name": "shiftl", "time": 2.125006, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 4]) -> [4 2]", "(shiftl [6]) -> [6]", "(shiftl [7 6 1]) -> [6 1 7]", "(shiftl [0 0 9 5 5]) -> [0 9 5 5 0]", "(shiftl [3 0 7 5]) -> [0 7 5 3]", "(shiftl [2 3 9 2 9]) -> [3 9 2 9 2]"]}
{"name": "shiftl", "time": 2.819701, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 7 6 5]) -> [7 6 5 7]", "(shiftl [8 0]) -> [0 8]", "(shiftl [1 4 0]) -> [4 0 1]", "(shiftl [5 6 1]) -> [6 1 5]", "(shiftl [9 7 5 0 9]) -> [7 5 0 9 9]", "(shiftl [0 7 5 1 5]) -> [7 5 1 5 0]"]}
{"name": "shiftl", "time": 2.399093, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 8]) -> [8 7]", "(shiftl [6 0 4 1]) -> [0 4 1 6]", "(shiftl [2 4]) -> [4 2]", "(shiftl [0]) -> [0]", "(shiftl [2 4 7]) -> [4 7 2]", "(shiftl [7 5 6 1]) -> [5 6 1 7]"]}
{"name": "shiftl", "time": 2.109387, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5]) -> [5]", "(shiftl [1 8 9 1]) -> [8 9 1 1]", "(shiftl [4 9 4]) -> [9 4 4]", "(shiftl [8 5 7]) -> [5 7 8]", "(shiftl [0 5 3]) -> [5 3 0]", "(shiftl [4 0]) -> [0 4]"]}
{"name": "shiftl", "time": 1.906603, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0]) -> [0]", "(shiftl [9 7 3 5]) -> [7 3 5 9]", "(shiftl [2 0 7]) -> [0 7 2]", "(shiftl [7 2 1 3 7]) -> [2 1 3 7 7]", "(shiftl [2 5]) -> [5 2]", "(shiftl [4 9 9 5]) -> [9 9 5 4]"]}
{"name": "shiftl", "time": 2.104125, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 9]) -> [9 7]", "(shiftl [2 2 4]) -> [2 4 2]", "(shiftl [4 6 8 7 2]) -> [6 8 7 2 4]", "(shiftl [2]) -> [2]", "(shiftl [2 1]) -> [1 2]", "(shiftl [0 7 3 1 2]) -> [7 3 1 2 0]"]}
{"name": "shiftl", "time": 2.828937, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [4 0 3 9 4]) -> [0 3 9 4 4]", "(shiftl [9 3 0 9]) -> [3 0 9 9]", "(shiftl [6 2 1 2 8]) -> [2 1 2 8 6]", "(shiftl [7 7 4]) -> [7 4 7]", "(shiftl [6]) -> [6]", "(shiftl [8]) -> [8]"]}
{"name": "shiftl", "time": 2.021672, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 2 9 2 6]) -> [2 9 2 6 5]", "(shiftl [4 9 3]) -> [9 3 4]", "(shiftl [3]) -> [3]", "(shiftl [4 0 7]) -> [0 7 4]", "(shiftl [0]) -> [0]", "(shiftl [3]) -> [3]"]}
{"name": "shiftl", "time": 2.09386, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 2 5 0 5]) -> [2 5 0 5 1]", "(shiftl [9 1 4 3 7]) -> [1 4 3 7 9]", "(shiftl [6]) -> [6]", "(shiftl [1 2 0 9]) -> [2 0 9 1]", "(shiftl [8 0 2]) -> [0 2 8]", "(shiftl [0 3 0 0]) -> [3 0 0 0]"]}
{"name": "shiftl", "time": 0.490971, "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [3]) -> [3]", "(shiftl [4]) -> [4]", "(shiftl [6 8]) -> [8 6]", "(shiftl [6]) -> [6]", "(shiftl [8 3]) -> [3 8]", "(shiftl [2 7 8 8]) -> [7 8 8 2]"]}
{"name": "shiftl", "time": 1.738281, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 3 8]) -> [3 8 3]", "(shiftl [0]) -> [0]", "(shiftl [7 3 9 0]) -> [3 9 0 7]", "(shiftl [6 3 1]) -> [3 1 6]", "(shiftl [3 9]) -> [9 3]", "(shiftl [3 1 1 3 4]) -> [1 1 3 4 3]"]}
{"name": "shiftl", "time": 1.973165, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 6 1 6 8]) -> [6 1 6 8 5]", "(shiftl [6]) -> [6]", "(shiftl [9]) -> [9]", "(shiftl [6 2 4 7]) -> [2 4 7 6]", "(shiftl [2]) -> [2]", "(shiftl [3 5 1 1]) -> [5 1 1 3]"]}
{"name": "shiftl", "time": 1.934175, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 5 1]) -> [5 1 5]", "(shiftl [9 7 3 4]) -> [7 3 4 9]", "(shiftl [2 6 6 2 1]) -> [6 6 2 1 2]", "(shiftl [6]) -> [6]", "(shiftl [8 0]) -> [0 8]", "(shiftl [2 7 1 8]) -> [7 1 8 2]"]}
{"name": "shiftl", "time": 2.122459, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 3 1]) -> [3 1 3]", "(shiftl [2 8]) -> [8 2]", "(shiftl [0 1 2]) -> [1 2 0]", "(shiftl [2 0]) -> [0 2]", "(shiftl [6 4 8 3 8]) -> [4 8 3 8 6]", "(shiftl [7 5 5 6]) -> [5 5 6 7]"]}
{"name": "shiftl", "time": 1.454213, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6]) -> [6]", "(shiftl [8 6 5]) -> [6 5 8]", "(shiftl [1 4 5 6]) -> [4 5 6 1]", "(shiftl [8 4]) -> [4 8]", "(shiftl [1 3 0 7 4]) -> [3 0 7 4 1]", "(shiftl [0 9]) -> [9 0]"]}
{"name": "shiftl", "time": 1.196505, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6 6]) -> [6 6]", "(shiftl [6 4 3]) -> [4 3 6]", "(shiftl [3 6 3 0 7]) -> [6 3 0 7 3]", "(shiftl [6 1]) -> [1 6]", "(shiftl [5 7 3 3 3]) -> [7 3 3 3 5]", "(shiftl [7]) -> [7]"]}
{"name": "shiftl", "time": 1.066471, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 9 5 2 4]) -> [9 5 2 4 3]", "(shiftl [1 3 9 7]) -> [3 9 7 1]", "(shiftl [5 4 7]) -> [4 7 5]", "(shiftl [5 0 8 9 1]) -> [0 8 9 1 5]", "(shiftl [3 4 0 2]) -> [4 0 2 3]", "(shiftl [1]) -> [1]"]}
{"name": "shiftl", "time": 1.195169, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 0 6 2 3]) -> [0 6 2 3 8]", "(shiftl [5]) -> [5]", "(shiftl [7 7 9 9]) -> [7 9 9 7]", "(shiftl [4]) -> [4]", "(shiftl [2 4 6]) -> [4 6 2]", "(shiftl [9 5 4 9 4]) -> [5 4 9 4 9]"]}
