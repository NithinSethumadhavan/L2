{"time": 0.05007, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [0]) -> [0]", "(evens []) -> []", "(evens [8 3 3 7]) -> [8]", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (foldr b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 0.057168, "name": "evens", "examples": ["(evens []) -> []", "(evens [3]) -> []", "(evens [1]) -> []", "(evens [5 7 9]) -> []", "(evens [0]) -> [0]", "(evens [0 3]) -> [0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 c)))) _) _)"}
{"time": 0.09035, "name": "evens", "examples": ["(evens []) -> []", "(evens [4 7 2 2 4]) -> [4 2 2 4]", "(evens [4]) -> [4]", "(evens []) -> []", "(evens []) -> []", "(evens [4 5 4 7]) -> [4 4]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (<= c (car b))))) _) _)"}
{"time": 24.155171, "name": "evens", "examples": ["(evens []) -> []", "(evens [2]) -> [2]", "(evens [6 3 9 0]) -> [6 0]", "(evens [7 1 2 5 4]) -> [2 4]", "(evens [2 2 7]) -> [2 2]", "(evens [9 3 3 7 2]) -> [2]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 24.991359, "name": "evens", "examples": ["(evens []) -> []", "(evens [7 1]) -> []", "(evens [9 9 7 6]) -> [6]", "(evens [4 5]) -> [4]", "(evens [1 5 0]) -> [0]", "(evens [4]) -> [4]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 25.212311, "name": "evens", "examples": ["(evens []) -> []", "(evens [0]) -> [0]", "(evens [4 4 5 7]) -> [4 4]", "(evens [3 8 8 3]) -> [8 8]", "(evens [8 4 5]) -> [8 4]", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 25.235364, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [7]) -> []", "(evens [3 3 8]) -> [8]", "(evens []) -> []", "(evens [2 8 7 4 0]) -> [2 8 4 0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 0.062301, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [9 0 0]) -> [0 0]", "(evens []) -> []", "(evens []) -> []", "(evens [3]) -> []"], "solution": "(let evens (let a (lambda (b) (foldl b (lambda (d c) (cdr b)) [])) _) _)"}
{"time": 25.378608, "name": "evens", "examples": ["(evens []) -> []", "(evens [9 4]) -> [4]", "(evens [4 6]) -> [4 6]", "(evens [6]) -> [6]", "(evens [6 2 7]) -> [6 2]", "(evens [4]) -> [4]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 0.119226, "name": "evens", "examples": ["(evens []) -> []", "(evens [2 3]) -> [2]", "(evens [8 5]) -> [8]", "(evens [2]) -> [2]", "(evens []) -> []", "(evens [2 1 1]) -> [2]"], "solution": "(let evens (let a (lambda (b) (foldr b (lambda (d c) (cons c [])) [])) _) _)"}
{"time": 26.399958, "name": "evens", "examples": ["(evens []) -> []", "(evens [4 8 2]) -> [4 8 2]", "(evens [3]) -> []", "(evens [6 7]) -> [6]", "(evens [7 6 5]) -> [6]", "(evens [9 3]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 26.979378, "name": "evens", "examples": ["(evens []) -> []", "(evens [4 6 2 3]) -> [4 6 2]", "(evens [2 7 6 3]) -> [2 6]", "(evens [7 7 0 6 7]) -> [0 6]", "(evens [3]) -> []", "(evens [2 9]) -> [2]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 26.810555, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [3 0]) -> [0]", "(evens [4]) -> [4]", "(evens []) -> []", "(evens [6 0 2 4 0]) -> [6 0 2 4 0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 0.036623, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [9]) -> []", "(evens [7 4 8 8]) -> [4 8 8]", "(evens [5 8]) -> [8]", "(evens [9 6]) -> [6]"], "solution": "(let evens (let a (lambda (b) (foldl b (lambda (d c) (cdr b)) [])) _) _)"}
{"time": 29.007962, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [3 2 8 7]) -> [2 8]", "(evens [3 2 1 0]) -> [2 0]", "(evens [5]) -> []", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 30.156113, "name": "evens", "examples": ["(evens []) -> []", "(evens [1 0]) -> [0]", "(evens [5 7]) -> []", "(evens [9 3 3 2]) -> [2]", "(evens [8 0 6 3]) -> [8 0 6]", "(evens [2 2 7 6 3]) -> [2 2 6]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 30.469325, "name": "evens", "examples": ["(evens []) -> []", "(evens [6 8]) -> [6 8]", "(evens []) -> []", "(evens [9 1 3 2]) -> [2]", "(evens [4 4 3 5 4]) -> [4 4 4]", "(evens [4 7 7]) -> [4]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 31.261381, "name": "evens", "examples": ["(evens []) -> []", "(evens [4 4 7]) -> [4 4]", "(evens [3 6 8 5 9]) -> [6 8]", "(evens [0 3 2]) -> [0 2]", "(evens [4 6 3]) -> [4 6]", "(evens [9 1]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 32.429665, "name": "evens", "examples": ["(evens []) -> []", "(evens [2 9 9 3 1]) -> [2]", "(evens [9 2]) -> [2]", "(evens [9]) -> []", "(evens [2 4]) -> [2 4]", "(evens [3]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 33.822114, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [6 9]) -> [6]", "(evens [2 6]) -> [2 6]", "(evens [8 5 9 3 9]) -> [8]", "(evens [1 2]) -> [2]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 0.578186, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [3 2]) -> [2]", "(evens [8]) -> [8]", "(evens [2 6]) -> [2 6]", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (foldl b (lambda (d c) (filter b (lambda (e) (<= e c)))) [])) _) _)"}
{"time": 35.764853, "name": "evens", "examples": ["(evens []) -> []", "(evens [5 6 2 3 6]) -> [6 2 6]", "(evens [8 2 1]) -> [8 2]", "(evens []) -> []", "(evens [7 4 5 9]) -> [4]", "(evens [5 5 3 1]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 36.010177, "name": "evens", "examples": ["(evens []) -> []", "(evens [0 8 5 1 3]) -> [0 8]", "(evens [5 4]) -> [4]", "(evens [3 7 0 6 7]) -> [0 6]", "(evens [6 7]) -> [6]", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 20.268966, "name": "evens", "examples": ["(evens []) -> []", "(evens [2]) -> [2]", "(evens [7]) -> []", "(evens [0 4 3]) -> [0 4]", "(evens [3 3 4 5]) -> [4]", "(evens [0 3]) -> [0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": "timeout", "name": "evens", "examples": ["(evens []) -> []", "(evens [7]) -> []", "(evens [4 7 2]) -> [4 2]", "(evens [3 9 5]) -> []", "(evens [5 9]) -> []", "(evens [6 1 3 7 2]) -> [6 2]"]}
{"time": 24.130303, "name": "evens", "examples": ["(evens []) -> []", "(evens [0]) -> [0]", "(evens [5 9 6 9]) -> [6]", "(evens [9 0 7 6 8]) -> [0 6 8]", "(evens [8 1 8]) -> [8 8]", "(evens [0 9 6 0 5]) -> [0 6 0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 27.908268, "name": "evens", "examples": ["(evens []) -> []", "(evens [8]) -> [8]", "(evens [8 8 6]) -> [8 8 6]", "(evens [6 9 6 1 5]) -> [6 6]", "(evens [3 9]) -> []", "(evens [8 3 8 2 3]) -> [8 8 2]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 26.242205, "name": "evens", "examples": ["(evens []) -> []", "(evens [2 2 6 7]) -> [2 2 6]", "(evens [8 8]) -> [8 8]", "(evens [9 5]) -> []", "(evens [2]) -> [2]", "(evens [9 3 3]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 25.226979, "name": "evens", "examples": ["(evens []) -> []", "(evens [5 8 0]) -> [8 0]", "(evens [7 9 0]) -> [0]", "(evens [5 6 2]) -> [6 2]", "(evens [5]) -> []", "(evens [4]) -> [4]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 0.220374, "name": "evens", "examples": ["(evens []) -> []", "(evens [6]) -> [6]", "(evens [2 5 3 1 1]) -> [2]", "(evens [8 3 8]) -> [8 8]", "(evens [4 5]) -> [4]", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= c (car b))))) _) _)"}
{"time": 24.65749, "name": "evens", "examples": ["(evens []) -> []", "(evens [3 4]) -> [4]", "(evens [2 5 4]) -> [2 4]", "(evens [0]) -> [0]", "(evens [2 1 2 2]) -> [2 2 2]", "(evens [2 1 0 7 1]) -> [2 0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 24.05533, "name": "evens", "examples": ["(evens []) -> []", "(evens [6 8 5 9]) -> [6 8]", "(evens [4 9]) -> [4]", "(evens [1 2 2]) -> [2 2]", "(evens []) -> []", "(evens [9]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 12.860802, "name": "evens", "examples": ["(evens []) -> []", "(evens [3 3]) -> []", "(evens [9 0]) -> [0]", "(evens []) -> []", "(evens [4 2 5 3]) -> [4 2]", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (foldl b (lambda (e d) (= e (< c d))) #f)))) _) _)"}
{"time": 32.705638, "name": "evens", "examples": ["(evens []) -> []", "(evens [4 2]) -> [4 2]", "(evens [3 6 5 0 0]) -> [6 0 0]", "(evens [1 7 2 2 3]) -> [2 2]", "(evens []) -> []", "(evens [7]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 33.647866, "name": "evens", "examples": ["(evens []) -> []", "(evens [4 8 4 2]) -> [4 8 4 2]", "(evens [1 0 7 5]) -> [0]", "(evens [2 9]) -> [2]", "(evens []) -> []", "(evens [2 6 1 8 3]) -> [2 6 8]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 31.174742, "name": "evens", "examples": ["(evens []) -> []", "(evens [0]) -> [0]", "(evens [7]) -> []", "(evens [8 0]) -> [8 0]", "(evens [2 9 4 0]) -> [2 4 0]", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 35.215741, "name": "evens", "examples": ["(evens []) -> []", "(evens [5]) -> []", "(evens [9]) -> []", "(evens []) -> []", "(evens [5 9 7 4 3]) -> [4]", "(evens [6 4 8 6 2]) -> [6 4 8 6 2]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 33.205565, "name": "evens", "examples": ["(evens []) -> []", "(evens [7 8 5 9 4]) -> [8 4]", "(evens [5 5 2]) -> [2]", "(evens [7]) -> []", "(evens [8 4 5 0]) -> [8 4 0]", "(evens [7 9 4]) -> [4]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 34.805519, "name": "evens", "examples": ["(evens []) -> []", "(evens [4 6]) -> [4 6]", "(evens [9 2 8 2 6]) -> [2 8 2 6]", "(evens [6 8 6]) -> [6 8 6]", "(evens [8 6 3 8]) -> [8 6 8]", "(evens [8 3 6 9]) -> [8 6]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 47.257377, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [6 3 5 7 9]) -> [6]", "(evens [7 3 6 5 1]) -> [6]", "(evens []) -> []", "(evens [8 7 5 0 1]) -> [8 0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 38.916227, "name": "evens", "examples": ["(evens []) -> []", "(evens [3 4 3 6]) -> [4 6]", "(evens []) -> []", "(evens [5 2 8 2 1]) -> [2 8 2]", "(evens [0 4 1 4]) -> [0 4 4]", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 29.835532, "name": "evens", "examples": ["(evens []) -> []", "(evens [8 8 2 4 7]) -> [8 8 2 4]", "(evens [3 2 1 8]) -> [2 8]", "(evens [0]) -> [0]", "(evens [9 9 2 2]) -> [2 2]", "(evens [3 7 8 9 9]) -> [8]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 0.443005, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [7 7]) -> []", "(evens [0 5 2 9]) -> [0 2]", "(evens [9]) -> []", "(evens [9 9]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (<= c (+ 1 1))))) _) _)"}
{"time": 22.103036, "name": "evens", "examples": ["(evens []) -> []", "(evens [3 8]) -> [8]", "(evens []) -> []", "(evens [7 4]) -> [4]", "(evens [8]) -> [8]", "(evens [3 1 1]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 23.050042, "name": "evens", "examples": ["(evens []) -> []", "(evens [5 8 9]) -> [8]", "(evens [4 7 4 2 0]) -> [4 4 2 0]", "(evens [5]) -> []", "(evens [9 8]) -> [8]", "(evens [2 0 1 5]) -> [2 0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 25.81775, "name": "evens", "examples": ["(evens []) -> []", "(evens [2]) -> [2]", "(evens []) -> []", "(evens [4 6 7 8]) -> [4 6 8]", "(evens [1 6]) -> [6]", "(evens [0 2 3 9]) -> [0 2]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 1.784391, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [2 5 7]) -> [2]", "(evens []) -> []", "(evens [4 6 8 8]) -> [4 6 8 8]", "(evens [6 2 6 4]) -> [6 2 6 4]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (!= 1 (% c (car b)))))) _) _)"}
{"time": 23.213252, "name": "evens", "examples": ["(evens []) -> []", "(evens [1 6 0]) -> [6 0]", "(evens [1 1]) -> []", "(evens [8 8 8 3 7]) -> [8 8 8]", "(evens [2]) -> [2]", "(evens [4 2 2]) -> [4 2 2]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 30.65561, "name": "evens", "examples": ["(evens []) -> []", "(evens [6 5 3 4 4]) -> [6 4 4]", "(evens [0]) -> [0]", "(evens [7 6]) -> [6]", "(evens [4 8]) -> [4 8]", "(evens [7 0]) -> [0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 29.48098, "name": "evens", "examples": ["(evens []) -> []", "(evens [7 3 7]) -> []", "(evens [9 0 8]) -> [0 8]", "(evens []) -> []", "(evens [6 7 7 6]) -> [6 6]", "(evens [0 1 6 1]) -> [0 6]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 35.117614, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [9 8]) -> [8]", "(evens [4 3]) -> [4]", "(evens [2 8 0]) -> [2 8 0]", "(evens [9 4 5 0 5]) -> [4 0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 36.409386, "name": "evens", "examples": ["(evens []) -> []", "(evens [1 9 2 7 1]) -> [2]", "(evens [7 5]) -> []", "(evens [0 6 4 7]) -> [0 6 4]", "(evens [1 0 8 7 6]) -> [0 8 6]", "(evens [1 0 0]) -> [0 0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 44.660652, "name": "evens", "examples": ["(evens []) -> []", "(evens [9 7 3 1 7]) -> []", "(evens [0 4 3 2 5]) -> [0 4 2]", "(evens [7 5 8 8]) -> [8 8]", "(evens [6 4 5]) -> [6 4]", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 37.097259, "name": "evens", "examples": ["(evens []) -> []", "(evens [2 7 6 9]) -> [2 6]", "(evens [0 4 1]) -> [0 4]", "(evens []) -> []", "(evens [6 4 3]) -> [6 4]", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 36.499076, "name": "evens", "examples": ["(evens []) -> []", "(evens [8 4 2]) -> [8 4 2]", "(evens [3 9 6 6]) -> [6 6]", "(evens [8 4 0 9]) -> [8 4 0]", "(evens [6 7 7 5]) -> [6]", "(evens [3 1 9 2]) -> [2]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 29.017022, "name": "evens", "examples": ["(evens []) -> []", "(evens [7 7 9 6 7]) -> [6]", "(evens [8 3]) -> [8]", "(evens [1 8]) -> [8]", "(evens [0 2 6]) -> [0 2 6]", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 34.229134, "name": "evens", "examples": ["(evens []) -> []", "(evens [6 5 0]) -> [6 0]", "(evens [5 8]) -> [8]", "(evens [1 8 1]) -> [8]", "(evens []) -> []", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 24.166093, "name": "evens", "examples": ["(evens []) -> []", "(evens [4]) -> [4]", "(evens []) -> []", "(evens [7 0]) -> [0]", "(evens [7 0 7]) -> [0]", "(evens [4 0 8 7]) -> [4 0 8]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 32.28025, "name": "evens", "examples": ["(evens []) -> []", "(evens [0 7 9 8 2]) -> [0 8 2]", "(evens [9]) -> []", "(evens [4 5 6 9]) -> [4 6]", "(evens []) -> []", "(evens [3 7]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 21.184057, "name": "evens", "examples": ["(evens []) -> []", "(evens [9]) -> []", "(evens [6 2]) -> [6 2]", "(evens []) -> []", "(evens [9 0 1 1 9]) -> [0]", "(evens [0 0 5 8]) -> [0 0 8]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 24.913022, "name": "evens", "examples": ["(evens []) -> []", "(evens [0 7 6 9]) -> [0 6]", "(evens [6]) -> [6]", "(evens [5 9]) -> []", "(evens [8 3]) -> [8]", "(evens [1 1 5]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 24.470015, "name": "evens", "examples": ["(evens []) -> []", "(evens [7 2 4]) -> [2 4]", "(evens [0]) -> [0]", "(evens [9 6 9]) -> [6]", "(evens [3 5 3 6]) -> [6]", "(evens [7 2 8 5]) -> [2 8]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 27.827345, "name": "evens", "examples": ["(evens []) -> []", "(evens [8]) -> [8]", "(evens [7]) -> []", "(evens [1]) -> []", "(evens [2 3 1 0 3]) -> [2 0]", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 40.292427, "name": "evens", "examples": ["(evens []) -> []", "(evens [8 7 9 8 3]) -> [8 8]", "(evens [9 3 7 7]) -> []", "(evens []) -> []", "(evens []) -> []", "(evens [1 2 4 7 8]) -> [2 4 8]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 1.129397, "name": "evens", "examples": ["(evens []) -> []", "(evens [8]) -> [8]", "(evens [8]) -> [8]", "(evens [2 0 0]) -> [2 0 0]", "(evens [6 7 2 6]) -> [6 2 6]", "(evens [4 8 6 0 9]) -> [4 8 6 0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (!= 1 (% c (car b)))))) _) _)"}
{"time": 26.961893, "name": "evens", "examples": ["(evens []) -> []", "(evens [3 2 0 3]) -> [2 0]", "(evens [4 4 6 1]) -> [4 4 6]", "(evens [0]) -> [0]", "(evens [5]) -> []", "(evens [0 9 6]) -> [0 6]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 35.057535, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [6 6 9]) -> [6 6]", "(evens [6 0 1 0]) -> [6 0 0]", "(evens [7 3 6]) -> [6]", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 21.194835, "name": "evens", "examples": ["(evens []) -> []", "(evens [0]) -> [0]", "(evens [7 4 5]) -> [4]", "(evens []) -> []", "(evens [5 2 8]) -> [2 8]", "(evens [0 1]) -> [0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 30.703472, "name": "evens", "examples": ["(evens []) -> []", "(evens [3 6]) -> [6]", "(evens [1 1 0 3 6]) -> [0 6]", "(evens [4 3 9 4]) -> [4 4]", "(evens [4 2 5]) -> [4 2]", "(evens [5 4]) -> [4]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 37.401694, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [7 3]) -> []", "(evens [1 7 4 2 3]) -> [4 2]", "(evens [7 9 1 2 7]) -> [2]", "(evens [4 7 8 8 6]) -> [4 8 8 6]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 23.464324, "name": "evens", "examples": ["(evens []) -> []", "(evens [9 0]) -> [0]", "(evens [0 7 8 3]) -> [0 8]", "(evens [7 4 6]) -> [4 6]", "(evens [7]) -> []", "(evens [7]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 21.940524, "name": "evens", "examples": ["(evens []) -> []", "(evens [1 8]) -> [8]", "(evens [5]) -> []", "(evens [6 6]) -> [6 6]", "(evens [8 9 1]) -> [8]", "(evens [5 4 7 5 1]) -> [4]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 23.933696, "name": "evens", "examples": ["(evens []) -> []", "(evens [8 2]) -> [8 2]", "(evens [1]) -> []", "(evens [6 7 4]) -> [6 4]", "(evens [0]) -> [0]", "(evens [7]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 25.530942, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [3 8]) -> [8]", "(evens [2]) -> [2]", "(evens [8 7 9]) -> [8]", "(evens [9]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 29.638904, "name": "evens", "examples": ["(evens []) -> []", "(evens [0 0 1 4]) -> [0 0 4]", "(evens [9 9]) -> []", "(evens []) -> []", "(evens [1 7 2 8 8]) -> [2 8 8]", "(evens [8]) -> [8]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 0.316435, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [7 1]) -> []", "(evens [2 0 4 8]) -> [2 0 4 8]", "(evens [7 9 3 5 1]) -> []", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (car (cdr b)))))) _) _)"}
{"time": 34.072282, "name": "evens", "examples": ["(evens []) -> []", "(evens [1 5 6]) -> [6]", "(evens [1 2 9 2]) -> [2 2]", "(evens [7 9 4 1]) -> [4]", "(evens []) -> []", "(evens [4 0 7 2 0]) -> [4 0 2 0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 26.816998, "name": "evens", "examples": ["(evens []) -> []", "(evens [5]) -> []", "(evens [4 0 8 8]) -> [4 0 8 8]", "(evens [5]) -> []", "(evens [2 9]) -> [2]", "(evens [0 0 4 2]) -> [0 0 4 2]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 10.425123, "name": "evens", "examples": ["(evens []) -> []", "(evens [7]) -> []", "(evens [1 9 8]) -> [8]", "(evens [2 1 2]) -> [2 2]", "(evens []) -> []", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (foldl b (lambda (e d) (= e (<= c d))) #f)))) _) _)"}
{"time": 37.524616, "name": "evens", "examples": ["(evens []) -> []", "(evens [8 9 3 9 5]) -> [8]", "(evens [6 9 1 6 9]) -> [6 6]", "(evens [2 0 2 5 9]) -> [2 0 2]", "(evens []) -> []", "(evens [7 3 5 2]) -> [2]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 31.773986, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [2 6 2 0 9]) -> [2 6 2 0]", "(evens [7 1 5 7 4]) -> [4]", "(evens [8 9]) -> [8]", "(evens [8]) -> [8]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 37.892131, "name": "evens", "examples": ["(evens []) -> []", "(evens [8 8 4 5 2]) -> [8 8 4 2]", "(evens [0 8]) -> [0 8]", "(evens [5 0 0 1 2]) -> [0 0 2]", "(evens [3 2]) -> [2]", "(evens [1 7 6 9 5]) -> [6]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 25.845296, "name": "evens", "examples": ["(evens []) -> []", "(evens [8]) -> [8]", "(evens [8 1 8 3]) -> [8 8]", "(evens [9]) -> []", "(evens [6 7 0 3 6]) -> [6 0 6]", "(evens [5 1 0 8]) -> [0 8]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 36.908875, "name": "evens", "examples": ["(evens []) -> []", "(evens [8 7 3 0 8]) -> [8 0 8]", "(evens [0 6 5 3 1]) -> [0 6]", "(evens [6 1 6]) -> [6 6]", "(evens []) -> []", "(evens [9 4]) -> [4]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 33.527414, "name": "evens", "examples": ["(evens []) -> []", "(evens [2 6 5 6 3]) -> [2 6 6]", "(evens [7 8]) -> [8]", "(evens [6 1 7 2]) -> [6 2]", "(evens [1 8 9 2]) -> [8 2]", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 1.284883, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [2 4 5]) -> [2 4]", "(evens [8 4 4 4 1]) -> [8 4 4 4]", "(evens [6 2 2]) -> [6 2 2]", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (!= 1 (% c (car b)))))) _) _)"}
{"time": 30.329904, "name": "evens", "examples": ["(evens []) -> []", "(evens [9 9 7 2]) -> [2]", "(evens [9 4 1]) -> [4]", "(evens [4 5 6 6 0]) -> [4 6 6 0]", "(evens [9 3 7 9]) -> []", "(evens [4 1 9 6]) -> [4 6]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 28.260169, "name": "evens", "examples": ["(evens []) -> []", "(evens [4 2 0 7]) -> [4 2 0]", "(evens [3]) -> []", "(evens [7]) -> []", "(evens [2 1 7 4 8]) -> [2 4 8]", "(evens [6 9 1 8]) -> [6 8]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 28.315702, "name": "evens", "examples": ["(evens []) -> []", "(evens [9 2 8]) -> [2 8]", "(evens [9]) -> []", "(evens [3 9]) -> []", "(evens [2]) -> [2]", "(evens [6]) -> [6]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 27.916105, "name": "evens", "examples": ["(evens []) -> []", "(evens [6 6 2]) -> [6 6 2]", "(evens [1 0 1 3 0]) -> [0 0]", "(evens [8 5]) -> [8]", "(evens [6]) -> [6]", "(evens [1 2 5 2 0]) -> [2 2 0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 24.817747, "name": "evens", "examples": ["(evens []) -> []", "(evens [2 9 4]) -> [2 4]", "(evens [0 6 7 3]) -> [0 6]", "(evens [3 1 2 0 8]) -> [2 0 8]", "(evens [5]) -> []", "(evens [1 7 4]) -> [4]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 26.067028, "name": "evens", "examples": ["(evens []) -> []", "(evens [1 9 9 3 8]) -> [8]", "(evens [9 7 1]) -> []", "(evens [4]) -> [4]", "(evens [3 7 0 0]) -> [0 0]", "(evens [5 9]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 22.850869, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [0 2]) -> [0 2]", "(evens [3 7]) -> []", "(evens [2 9]) -> [2]", "(evens [5 6 2 0]) -> [6 2 0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 17.859478, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [9 0 7 4]) -> [0 4]", "(evens [4 7 3 2]) -> [4 2]", "(evens [5]) -> []", "(evens [2]) -> [2]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 18.38006, "name": "evens", "examples": ["(evens []) -> []", "(evens [1]) -> []", "(evens []) -> []", "(evens [1 4 5]) -> [4]", "(evens [6 3 8 9]) -> [6 8]", "(evens [6 9 3 5 4]) -> [6 4]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 16.512972, "name": "evens", "examples": ["(evens []) -> []", "(evens [5 6]) -> [6]", "(evens []) -> []", "(evens [5 5 8 8 4]) -> [8 8 4]", "(evens []) -> []", "(evens [0 3 1]) -> [0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 18.576696, "name": "evens", "examples": ["(evens []) -> []", "(evens [0 3]) -> [0]", "(evens [3 3 2 3]) -> [2]", "(evens [5 4 9]) -> [4]", "(evens []) -> []", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 15.008753, "name": "evens", "examples": ["(evens []) -> []", "(evens [6 9 6 8]) -> [6 6 8]", "(evens [7 9 7 2]) -> [2]", "(evens [0 4 8 0]) -> [0 4 8 0]", "(evens [3 7]) -> []", "(evens [1 3 8 4]) -> [8 4]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 15.551965, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [0 6 9]) -> [0 6]", "(evens [6 7 7 5]) -> [6]", "(evens [9]) -> []", "(evens [7 5 3]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 24.202998, "name": "evens", "examples": ["(evens []) -> []", "(evens [1 0 0 5 7]) -> [0 0]", "(evens []) -> []", "(evens [1 6 1]) -> [6]", "(evens [2 0 5 3]) -> [2 0]", "(evens [0 8]) -> [0 8]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
