{"name": "shiftl", "time": 0.001614, "solution": "(let shiftl (let a (lambda (b) (reverse b)) _) _)", "examples": ["(shiftl [6 5]) -> [5 6]", "(shiftl [0 1 1]) -> [1 1 0]", "(shiftl [3]) -> [3]"]}
{"name": "shiftl", "time": 0.00164, "solution": "(let shiftl (let a (lambda (b) (reverse b)) _) _)", "examples": ["(shiftl [5]) -> [5]", "(shiftl [8]) -> [8]", "(shiftl [9 5]) -> [5 9]"]}
{"name": "shiftl", "time": 0.001268, "solution": "(let shiftl (let a (lambda (b) (reverse b)) _) _)", "examples": ["(shiftl [3 2]) -> [2 3]", "(shiftl [4]) -> [4]", "(shiftl [5 8 8]) -> [8 8 5]"]}
{"name": "shiftl", "time": 0.468876, "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [8]) -> [8]", "(shiftl [6 3 7]) -> [3 7 6]", "(shiftl [3 3 4]) -> [3 4 3]"]}
{"name": "shiftl", "time": 0.554322, "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [5 2 9]) -> [2 9 5]", "(shiftl [6 8 6]) -> [8 6 6]", "(shiftl [0]) -> [0]"]}
{"name": "shiftl", "time": 0.41836, "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [2]) -> [2]", "(shiftl [7 6 8]) -> [6 8 7]", "(shiftl [8 3 9]) -> [3 9 8]"]}
{"name": "shiftl", "time": 1.927276, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [4 1 9 4 4]) -> [1 9 4 4 4]", "(shiftl [0 5]) -> [5 0]", "(shiftl [9 2 3 2]) -> [2 3 2 9]"]}
{"name": "shiftl", "time": 1.816252, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 6]) -> [6 2]", "(shiftl [4]) -> [4]", "(shiftl [2 3 9 8]) -> [3 9 8 2]"]}
{"name": "shiftl", "time": 2.007786, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 3 9 8]) -> [3 9 8 2]", "(shiftl [8]) -> [8]", "(shiftl [4 7 6 1]) -> [7 6 1 4]"]}
{"name": "shiftl", "time": 1.989854, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9]) -> [9]", "(shiftl [8 7 1]) -> [7 1 8]", "(shiftl [1 9 9 8 6]) -> [9 9 8 6 1]"]}
{"name": "shiftl", "time": 2.053661, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 7 7 3]) -> [7 7 3 7]", "(shiftl [1 3 6]) -> [3 6 1]", "(shiftl [7 8]) -> [8 7]"]}
{"name": "shiftl", "time": 2.394991, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0 2 2 5 7]) -> [2 2 5 7 0]", "(shiftl [5 8 3 8]) -> [8 3 8 5]", "(shiftl [6 6 4 7]) -> [6 4 7 6]"]}
{"name": "shiftl", "time": 1.777029, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 3 5]) -> [3 5 3]", "(shiftl [9 7 5 4]) -> [7 5 4 9]", "(shiftl [1 6 5 2]) -> [6 5 2 1]"]}
{"name": "shiftl", "time": 2.603628, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 3 4]) -> [3 4 8]", "(shiftl [9 7 5 3]) -> [7 5 3 9]", "(shiftl [7]) -> [7]"]}
{"name": "shiftl", "time": 2.56737, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9]) -> [9]", "(shiftl [9 7 3]) -> [7 3 9]", "(shiftl [0 6 7 2]) -> [6 7 2 0]"]}
{"name": "shiftl", "time": 2.589415, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 0 0 6]) -> [0 0 6 2]", "(shiftl [7]) -> [7]", "(shiftl [9 2]) -> [2 9]"]}
{"name": "shiftl", "time": 2.657783, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 2 6 2 7]) -> [2 6 2 7 3]", "(shiftl [7 7 0]) -> [7 0 7]", "(shiftl [2 6]) -> [6 2]"]}
{"name": "shiftl", "time": 2.648778, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 5 1 6]) -> [5 1 6 7]", "(shiftl [1]) -> [1]", "(shiftl [7 8 1 4]) -> [8 1 4 7]"]}
{"name": "shiftl", "time": 2.419366, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8]) -> [8]", "(shiftl [3 5 3 9]) -> [5 3 9 3]", "(shiftl [9 2 6 4]) -> [2 6 4 9]"]}
{"name": "shiftl", "time": 2.692505, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6 2 0 9 6]) -> [2 0 9 6 6]", "(shiftl [3 4 6 8 7]) -> [4 6 8 7 3]", "(shiftl [8 8 3 7 4]) -> [8 3 7 4 8]"]}
{"name": "shiftl", "time": 2.68599, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 6 0 7 1]) -> [6 0 7 1 1]", "(shiftl [3 9]) -> [9 3]", "(shiftl [3 1]) -> [1 3]"]}
{"name": "shiftl", "time": 0.00153, "solution": "(let shiftl (let a (lambda (b) (reverse b)) _) _)", "examples": ["(shiftl [1]) -> [1]", "(shiftl [7 8]) -> [8 7]", "(shiftl [2]) -> [2]"]}
{"name": "shiftl", "time": 0.400534, "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [1]) -> [1]", "(shiftl [6 4 0]) -> [4 0 6]", "(shiftl [2 7 2]) -> [7 2 2]"]}
{"name": "shiftl", "time": 0.713117, "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [0]) -> [0]", "(shiftl [4 2 9]) -> [2 9 4]", "(shiftl [6 5 3]) -> [5 3 6]"]}
{"name": "shiftl", "time": 2.419001, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 1 2 7 6]) -> [1 2 7 6 5]", "(shiftl [8 9 6 3 7]) -> [9 6 3 7 8]", "(shiftl [8 0 2 2]) -> [0 2 2 8]"]}
{"name": "shiftl", "time": 0.001435, "solution": "(let shiftl (let a (lambda (b) (reverse b)) _) _)", "examples": ["(shiftl [5 3]) -> [3 5]", "(shiftl [1 0 3 0]) -> [0 3 0 1]", "(shiftl [8]) -> [8]"]}
{"name": "shiftl", "time": 1.920004, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 5 5 8 4]) -> [5 5 8 4 9]", "(shiftl [1 4 5]) -> [4 5 1]", "(shiftl [2 6 0]) -> [6 0 2]"]}
{"name": "shiftl", "time": 0.415429, "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [1 7 9]) -> [7 9 1]", "(shiftl [5 4]) -> [4 5]", "(shiftl [0]) -> [0]"]}
{"name": "shiftl", "time": 2.28358, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2]) -> [2]", "(shiftl [5 2 5 3 9]) -> [2 5 3 9 5]", "(shiftl [2]) -> [2]"]}
{"name": "shiftl", "time": 1.853661, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [4 1 7 5]) -> [1 7 5 4]", "(shiftl [0 4 7 0]) -> [4 7 0 0]", "(shiftl [2 3 5 8 7]) -> [3 5 8 7 2]"]}
{"name": "shiftl", "time": 1.777064, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 5 5]) -> [5 5 3]", "(shiftl [2 4 5 2 2]) -> [4 5 2 2 2]", "(shiftl [2 5 8 0]) -> [5 8 0 2]"]}
{"name": "shiftl", "time": 1.813545, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 9 8 9 9]) -> [9 8 9 9 3]", "(shiftl [0]) -> [0]", "(shiftl [9 0]) -> [0 9]"]}
{"name": "shiftl", "time": 2.395475, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 1 3 1 2]) -> [1 3 1 2 7]", "(shiftl [5 9 5]) -> [9 5 5]", "(shiftl [5]) -> [5]"]}
{"name": "shiftl", "time": 2.515388, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0 5 4 0 1]) -> [5 4 0 1 0]", "(shiftl [3 3 9 9]) -> [3 9 9 3]", "(shiftl [7 4 9 6 7]) -> [4 9 6 7 7]"]}
{"name": "shiftl", "time": 2.584423, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0]) -> [0]", "(shiftl [7 5]) -> [5 7]", "(shiftl [8 8 7 7 5]) -> [8 7 7 5 8]"]}
{"name": "shiftl", "time": 0.57266, "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [3 7]) -> [7 3]", "(shiftl [5 7]) -> [7 5]", "(shiftl [1 3 4]) -> [3 4 1]"]}
{"name": "shiftl", "time": 2.098869, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 0 3]) -> [0 3 7]", "(shiftl [3 0 4]) -> [0 4 3]", "(shiftl [7 5 9 2]) -> [5 9 2 7]"]}
{"name": "shiftl", "time": 2.183672, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 2 6 5]) -> [2 6 5 8]", "(shiftl [9 1 8 7 7]) -> [1 8 7 7 9]", "(shiftl [3 4 0 8]) -> [4 0 8 3]"]}
{"name": "shiftl", "time": 0.465362, "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [8 6]) -> [6 8]", "(shiftl [5 1]) -> [1 5]", "(shiftl [8 4 2]) -> [4 2 8]"]}
{"name": "shiftl", "time": 2.559678, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 1 2 0]) -> [1 2 0 3]", "(shiftl [1 0 8]) -> [0 8 1]", "(shiftl [6]) -> [6]"]}
{"name": "shiftl", "time": 2.078353, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 9 5 4]) -> [9 5 4 3]", "(shiftl [2 3 4 0]) -> [3 4 0 2]", "(shiftl [7]) -> [7]"]}
{"name": "shiftl", "time": 2.586906, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0]) -> [0]", "(shiftl [9 4 1 0]) -> [4 1 0 9]", "(shiftl [0 0 7 0 3]) -> [0 7 0 3 0]"]}
{"name": "shiftl", "time": 2.781144, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0 2 4 5]) -> [2 4 5 0]", "(shiftl [9]) -> [9]", "(shiftl [6 0 6 5]) -> [0 6 5 6]"]}
