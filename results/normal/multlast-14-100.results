{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.298517, "examples": ["(multlast [1]) -> [1]", "(multlast [0 6 1]) -> [1 1 1]", "(multlast []) -> []", "(multlast [1]) -> [1]", "(multlast [6 6 5 5]) -> [5 5 5 5]", "(multlast [9 6 4]) -> [4 4 4]", "(multlast [7 5 5]) -> [5 5 5]", "(multlast [9 9]) -> [9 9]", "(multlast []) -> []", "(multlast [9 7]) -> [7 7]", "(multlast [6 2 5 2 6]) -> [6 6 6 6 6]", "(multlast [9 3]) -> [3 3]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.30527, "examples": ["(multlast [4 3]) -> [3 3]", "(multlast [7]) -> [7]", "(multlast [6 0 7 0 8]) -> [8 8 8 8 8]", "(multlast [1 2 8 5 8]) -> [8 8 8 8 8]", "(multlast [3]) -> [3]", "(multlast []) -> []", "(multlast [1]) -> [1]", "(multlast [9 4 3]) -> [3 3 3]", "(multlast [3 3 2 4 1]) -> [1 1 1 1 1]", "(multlast [6 7]) -> [7 7]", "(multlast [3 4 5]) -> [5 5 5]", "(multlast [9 9 5]) -> [5 5 5]", "(multlast [4]) -> [4]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.316397, "examples": ["(multlast [0 2 8]) -> [8 8 8]", "(multlast [4 7]) -> [7 7]", "(multlast [8]) -> [8]", "(multlast [3 2 7 5 7]) -> [7 7 7 7 7]", "(multlast [0 9 1 5]) -> [5 5 5 5]", "(multlast [5]) -> [5]", "(multlast [5 4]) -> [4 4]", "(multlast [2 5 6 9 8]) -> [8 8 8 8 8]", "(multlast [8 0 3 0 8]) -> [8 8 8 8 8]", "(multlast [1 2]) -> [2 2]", "(multlast []) -> []", "(multlast [3 2 2]) -> [2 2 2]", "(multlast [0 8]) -> [8 8]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.319252, "examples": ["(multlast [6 6 7]) -> [7 7 7]", "(multlast [1]) -> [1]", "(multlast [4 4 1 4 5]) -> [5 5 5 5 5]", "(multlast [6]) -> [6]", "(multlast []) -> []", "(multlast [7 1 4 1 8]) -> [8 8 8 8 8]", "(multlast [8 4 5]) -> [5 5 5]", "(multlast [9 4 4 5]) -> [5 5 5 5]", "(multlast [0 6 5 7 8]) -> [8 8 8 8 8]", "(multlast [6 4 9]) -> [9 9 9]", "(multlast []) -> []", "(multlast [8 1 8]) -> [8 8 8]", "(multlast [0 3]) -> [3 3]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.324444, "examples": ["(multlast [2]) -> [2]", "(multlast [6]) -> [6]", "(multlast [0 3 3 4]) -> [4 4 4 4]", "(multlast [5 7 8 3]) -> [3 3 3 3]", "(multlast [4]) -> [4]", "(multlast [9 6 7]) -> [7 7 7]", "(multlast [8 5 4 0]) -> [0 0 0 0]", "(multlast [5 0]) -> [0 0]", "(multlast [8]) -> [8]", "(multlast []) -> []", "(multlast [7 3]) -> [3 3]", "(multlast [2 0 9 2 6]) -> [6 6 6 6 6]", "(multlast [8 9 5 9]) -> [9 9 9 9]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.324136, "examples": ["(multlast [0 9]) -> [9 9]", "(multlast [7 6 3 3]) -> [3 3 3 3]", "(multlast []) -> []", "(multlast [9]) -> [9]", "(multlast [2 7 2 4]) -> [4 4 4 4]", "(multlast [4 8 4 6 7]) -> [7 7 7 7 7]", "(multlast [1 7 2]) -> [2 2 2]", "(multlast []) -> []", "(multlast [4 6 0 8 9]) -> [9 9 9 9 9]", "(multlast [7]) -> [7]", "(multlast [4 0 8]) -> [8 8 8]", "(multlast [4 2]) -> [2 2]", "(multlast [9 3 4 6]) -> [6 6 6 6]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.313992, "examples": ["(multlast [4 6 9 3 9]) -> [9 9 9 9 9]", "(multlast [4 0]) -> [0 0]", "(multlast [2 6]) -> [6 6]", "(multlast []) -> []", "(multlast [9 6]) -> [6 6]", "(multlast [4 8 0 6]) -> [6 6 6 6]", "(multlast [9 0 1]) -> [1 1 1]", "(multlast []) -> []", "(multlast [9 9 8 5]) -> [5 5 5 5]", "(multlast [2]) -> [2]", "(multlast []) -> []", "(multlast [1]) -> [1]", "(multlast [0 8 0]) -> [0 0 0]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.305695, "examples": ["(multlast [3 7 6]) -> [6 6 6]", "(multlast [7]) -> [7]", "(multlast [1 6]) -> [6 6]", "(multlast [5 2 6 2]) -> [2 2 2 2]", "(multlast [8 4 5]) -> [5 5 5]", "(multlast []) -> []", "(multlast [0 1 1 3 4]) -> [4 4 4 4 4]", "(multlast [0 2 4 1 4]) -> [4 4 4 4 4]", "(multlast [9]) -> [9]", "(multlast []) -> []", "(multlast [8 1]) -> [1 1]", "(multlast [4 8 7 6 5]) -> [5 5 5 5 5]", "(multlast [8 4 6]) -> [6 6 6]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.330961, "examples": ["(multlast [4 4]) -> [4 4]", "(multlast [4]) -> [4]", "(multlast [6 7 1 8 4]) -> [4 4 4 4 4]", "(multlast []) -> []", "(multlast [5 6 1 4 7]) -> [7 7 7 7 7]", "(multlast [4]) -> [4]", "(multlast []) -> []", "(multlast [8]) -> [8]", "(multlast [9 5 0]) -> [0 0 0]", "(multlast []) -> []", "(multlast [1 6 4 2]) -> [2 2 2 2]", "(multlast [8 6 7 2 4]) -> [4 4 4 4 4]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.335972, "examples": ["(multlast [2 5 5 7 8]) -> [8 8 8 8 8]", "(multlast [7 1 4 0]) -> [0 0 0 0]", "(multlast [2 2 4]) -> [4 4 4]", "(multlast [1 0 4 0]) -> [0 0 0 0]", "(multlast [7]) -> [7]", "(multlast []) -> []", "(multlast [3 3 0 1 7]) -> [7 7 7 7 7]", "(multlast [2 6]) -> [6 6]", "(multlast [3]) -> [3]", "(multlast [9]) -> [9]", "(multlast [7 2 7 7 7]) -> [7 7 7 7 7]", "(multlast [3 3]) -> [3 3]", "(multlast [9 4]) -> [4 4]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.337179, "examples": ["(multlast []) -> []", "(multlast [1 3]) -> [3 3]", "(multlast []) -> []", "(multlast [3 1]) -> [1 1]", "(multlast [4]) -> [4]", "(multlast []) -> []", "(multlast [5 0]) -> [0 0]", "(multlast [6 4 1 3]) -> [3 3 3 3]", "(multlast [8]) -> [8]", "(multlast [4 1 0 1]) -> [1 1 1 1]", "(multlast [6 0]) -> [0 0]", "(multlast [6 1]) -> [1 1]", "(multlast [1 3 1 5]) -> [5 5 5 5]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.346282, "examples": ["(multlast [8]) -> [8]", "(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast [5]) -> [5]", "(multlast [7 2 3 5 6]) -> [6 6 6 6 6]", "(multlast []) -> []", "(multlast [4 0 7]) -> [7 7 7]", "(multlast []) -> []", "(multlast [8 7 0]) -> [0 0 0]", "(multlast [6 4 1 0]) -> [0 0 0 0]", "(multlast [7 8 2 0]) -> [0 0 0 0]", "(multlast [9]) -> [9]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.346489, "examples": ["(multlast []) -> []", "(multlast [8 0]) -> [0 0]", "(multlast [2]) -> [2]", "(multlast [3 3 8]) -> [8 8 8]", "(multlast [5 9 5]) -> [5 5 5]", "(multlast []) -> []", "(multlast [4 7 6]) -> [6 6 6]", "(multlast [6 2 4 2]) -> [2 2 2 2]", "(multlast [4 7 2]) -> [2 2 2]", "(multlast [3 2 4 7]) -> [7 7 7 7]", "(multlast []) -> []", "(multlast [9 0 5 7]) -> [7 7 7 7]", "(multlast [8 3 9 5 1]) -> [1 1 1 1 1]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.353035, "examples": ["(multlast [9 6 9 0 8]) -> [8 8 8 8 8]", "(multlast [7 4]) -> [4 4]", "(multlast [2 9 6 2 1]) -> [1 1 1 1 1]", "(multlast [9 1]) -> [1 1]", "(multlast [6 6 2 1 9]) -> [9 9 9 9 9]", "(multlast [3]) -> [3]", "(multlast []) -> []", "(multlast [2]) -> [2]", "(multlast [9]) -> [9]", "(multlast [6 0]) -> [0 0]", "(multlast [5 6 6 9 3]) -> [3 3 3 3 3]", "(multlast [2 8]) -> [8 8]", "(multlast [2]) -> [2]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.357678, "examples": ["(multlast [6]) -> [6]", "(multlast [7]) -> [7]", "(multlast [1 9 0 2]) -> [2 2 2 2]", "(multlast [9 9 1 4]) -> [4 4 4 4]", "(multlast [0 2 4]) -> [4 4 4]", "(multlast [5 3 1 4 2]) -> [2 2 2 2 2]", "(multlast [4]) -> [4]", "(multlast [7]) -> [7]", "(multlast [0 6 8 5]) -> [5 5 5 5]", "(multlast [9 5 1 6 3]) -> [3 3 3 3 3]", "(multlast []) -> []", "(multlast [0 7 2]) -> [2 2 2]", "(multlast [9]) -> [9]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.290724, "examples": ["(multlast [6 6 2 4]) -> [4 4 4 4]", "(multlast [6]) -> [6]", "(multlast []) -> []", "(multlast [3 3 3]) -> [3 3 3]", "(multlast []) -> []", "(multlast [6 3]) -> [3 3]", "(multlast [3 4 6 8 6]) -> [6 6 6 6 6]", "(multlast [5 2 9]) -> [9 9 9]", "(multlast [3]) -> [3]", "(multlast [3 4]) -> [4 4]", "(multlast [0 3 0]) -> [0 0 0]", "(multlast [6 9]) -> [9 9]", "(multlast [2 4]) -> [4 4]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.309294, "examples": ["(multlast []) -> []", "(multlast [4]) -> [4]", "(multlast [9 7 4 1]) -> [1 1 1 1]", "(multlast [5 6]) -> [6 6]", "(multlast [3]) -> [3]", "(multlast [9 0]) -> [0 0]", "(multlast [7 1 6]) -> [6 6 6]", "(multlast [7 7 6 0]) -> [0 0 0 0]", "(multlast [0]) -> [0]", "(multlast [5 3 8 5]) -> [5 5 5 5]", "(multlast [9]) -> [9]", "(multlast [4]) -> [4]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.313615, "examples": ["(multlast [3]) -> [3]", "(multlast []) -> []", "(multlast [4]) -> [4]", "(multlast [5 0 3]) -> [3 3 3]", "(multlast []) -> []", "(multlast [2 0 6 2]) -> [2 2 2 2]", "(multlast [9 6 7]) -> [7 7 7]", "(multlast [1]) -> [1]", "(multlast []) -> []", "(multlast [6 9 1]) -> [1 1 1]", "(multlast [7 8 8]) -> [8 8 8]", "(multlast [3 7]) -> [7 7]", "(multlast [3]) -> [3]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.329732, "examples": ["(multlast [2 3 7 6 9]) -> [9 9 9 9 9]", "(multlast []) -> []", "(multlast [8 0]) -> [0 0]", "(multlast [6]) -> [6]", "(multlast [7 0 7]) -> [7 7 7]", "(multlast [5]) -> [5]", "(multlast [0 6]) -> [6 6]", "(multlast [4]) -> [4]", "(multlast [3 0 0 6]) -> [6 6 6 6]", "(multlast [6 1]) -> [1 1]", "(multlast [6 5 8 5 6]) -> [6 6 6 6 6]", "(multlast [2 4 7]) -> [7 7 7]", "(multlast [6 1 3 5]) -> [5 5 5 5]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.313659, "examples": ["(multlast [9 9 1 7 2]) -> [2 2 2 2 2]", "(multlast []) -> []", "(multlast [4 9 2 3 8]) -> [8 8 8 8 8]", "(multlast [2 9]) -> [9 9]", "(multlast [4]) -> [4]", "(multlast [0 2]) -> [2 2]", "(multlast [4 0]) -> [0 0]", "(multlast []) -> []", "(multlast [0 4 2 1]) -> [1 1 1 1]", "(multlast []) -> []", "(multlast [1 2 4 4 7]) -> [7 7 7 7 7]", "(multlast [5]) -> [5]", "(multlast [8 2 5 5 7]) -> [7 7 7 7 7]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.306109, "examples": ["(multlast [6 7 3 7 3]) -> [3 3 3 3 3]", "(multlast []) -> []", "(multlast [1]) -> [1]", "(multlast [7 8]) -> [8 8]", "(multlast []) -> []", "(multlast [0 7 2 7]) -> [7 7 7 7]", "(multlast [1 0 4 3]) -> [3 3 3 3]", "(multlast [5 7 3 5 7]) -> [7 7 7 7 7]", "(multlast [4 9 9]) -> [9 9 9]", "(multlast [2 3 5]) -> [5 5 5]", "(multlast [2]) -> [2]", "(multlast [4 9]) -> [9 9]", "(multlast [2 6 0 6 0]) -> [0 0 0 0 0]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.334424, "examples": ["(multlast []) -> []", "(multlast [0 2 5 6 7]) -> [7 7 7 7 7]", "(multlast [4 4 8 6 9]) -> [9 9 9 9 9]", "(multlast [6 4 8 2]) -> [2 2 2 2]", "(multlast [6 1 7 4 3]) -> [3 3 3 3 3]", "(multlast [3]) -> [3]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [2 5 1 7]) -> [7 7 7 7]", "(multlast [5 5 8]) -> [8 8 8]", "(multlast [6]) -> [6]", "(multlast [4 7 4 0 7]) -> [7 7 7 7 7]", "(multlast [7 5]) -> [5 5]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.347891, "examples": ["(multlast [6 2 0 1 3]) -> [3 3 3 3 3]", "(multlast [7 1 3]) -> [3 3 3]", "(multlast [6 4 9]) -> [9 9 9]", "(multlast [5 2 8 0 7]) -> [7 7 7 7 7]", "(multlast []) -> []", "(multlast [2 9 9]) -> [9 9 9]", "(multlast [0]) -> [0]", "(multlast [0]) -> [0]", "(multlast []) -> []", "(multlast [9 3]) -> [3 3]", "(multlast [2]) -> [2]", "(multlast [6]) -> [6]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.337964, "examples": ["(multlast [5 6]) -> [6 6]", "(multlast [7]) -> [7]", "(multlast [0 0 4 6 7]) -> [7 7 7 7 7]", "(multlast []) -> []", "(multlast [8 0 3]) -> [3 3 3]", "(multlast [4 1]) -> [1 1]", "(multlast [6 1 3 7]) -> [7 7 7 7]", "(multlast []) -> []", "(multlast [3 0 1 0 0]) -> [0 0 0 0 0]", "(multlast [7 2 0 2 1]) -> [1 1 1 1 1]", "(multlast []) -> []", "(multlast [0]) -> [0]", "(multlast [6 4]) -> [4 4]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.315588, "examples": ["(multlast [3]) -> [3]", "(multlast [0]) -> [0]", "(multlast [0 3 1 3]) -> [3 3 3 3]", "(multlast [2]) -> [2]", "(multlast [4 5 9]) -> [9 9 9]", "(multlast [8 9 1]) -> [1 1 1]", "(multlast []) -> []", "(multlast [9 2 0 7 8]) -> [8 8 8 8 8]", "(multlast [5 2 9 2]) -> [2 2 2 2]", "(multlast [1]) -> [1]", "(multlast [5 2 5]) -> [5 5 5]", "(multlast [0 7]) -> [7 7]", "(multlast [2 0 3]) -> [3 3 3]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.318444, "examples": ["(multlast []) -> []", "(multlast [0]) -> [0]", "(multlast [6 1]) -> [1 1]", "(multlast [7 9 5]) -> [5 5 5]", "(multlast [7 9 4 5]) -> [5 5 5 5]", "(multlast [5 8 4]) -> [4 4 4]", "(multlast []) -> []", "(multlast [3 7 7]) -> [7 7 7]", "(multlast [9 2 0]) -> [0 0 0]", "(multlast [1 4 4 3]) -> [3 3 3 3]", "(multlast [6 9]) -> [9 9]", "(multlast [5 0 3 5]) -> [5 5 5 5]", "(multlast [9]) -> [9]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.307371, "examples": ["(multlast [4 4 9 3 2]) -> [2 2 2 2 2]", "(multlast [5 2 0 8]) -> [8 8 8 8]", "(multlast []) -> []", "(multlast [8 0 0 0 2]) -> [2 2 2 2 2]", "(multlast [9 5]) -> [5 5]", "(multlast [0 0 6 0]) -> [0 0 0 0]", "(multlast [6]) -> [6]", "(multlast [2 6 8 1 3]) -> [3 3 3 3 3]", "(multlast [1 5]) -> [5 5]", "(multlast []) -> []", "(multlast [5 6 5 9 1]) -> [1 1 1 1 1]", "(multlast [7 7]) -> [7 7]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.349216, "examples": ["(multlast []) -> []", "(multlast [8]) -> [8]", "(multlast [9 5]) -> [5 5]", "(multlast [4 4 8 3]) -> [3 3 3 3]", "(multlast [9 5 5 2]) -> [2 2 2 2]", "(multlast [4 5 5 0]) -> [0 0 0 0]", "(multlast []) -> []", "(multlast [8 2]) -> [2 2]", "(multlast [5 1]) -> [1 1]", "(multlast [6 2 1]) -> [1 1 1]", "(multlast [6 6 6 9 9]) -> [9 9 9 9 9]", "(multlast [8 0 7 8 9]) -> [9 9 9 9 9]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.34131, "examples": ["(multlast [2 2 0 4]) -> [4 4 4 4]", "(multlast [0 5 9]) -> [9 9 9]", "(multlast [0]) -> [0]", "(multlast [1 6]) -> [6 6]", "(multlast [8 1 8]) -> [8 8 8]", "(multlast [5 8]) -> [8 8]", "(multlast []) -> []", "(multlast [7 9 7 7]) -> [7 7 7 7]", "(multlast [4 6 6 9 9]) -> [9 9 9 9 9]", "(multlast []) -> []", "(multlast [8 1 8 6 2]) -> [2 2 2 2 2]", "(multlast [7 2 6 7 3]) -> [3 3 3 3 3]", "(multlast [2 4]) -> [4 4]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) b)) _) _)", "name": "multlast", "time": 0.883014, "examples": ["(multlast [3 3 8 2]) -> [2 2 2 2]", "(multlast [5 7 9 3 0]) -> [0 0 0 0 0]", "(multlast [5 9 5 5]) -> [5 5 5 5]", "(multlast [4]) -> [4]", "(multlast [0 2 1 3]) -> [3 3 3 3]", "(multlast [3 6 4]) -> [4 4 4]", "(multlast [4 5 2 7]) -> [7 7 7 7]", "(multlast [6 2 7 5 4]) -> [4 4 4 4 4]", "(multlast [9 6 8 9 3]) -> [3 3 3 3 3]", "(multlast [3 7]) -> [7 7]", "(multlast [9 4 8 5 0]) -> [0 0 0 0 0]", "(multlast [9 3 4]) -> [4 4 4]", "(multlast [6]) -> [6]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.348492, "examples": ["(multlast [1 1]) -> [1 1]", "(multlast [5 6 0 9]) -> [9 9 9 9]", "(multlast [3 6]) -> [6 6]", "(multlast [6 4 4]) -> [4 4 4]", "(multlast []) -> []", "(multlast [2]) -> [2]", "(multlast [7 5 7 0 9]) -> [9 9 9 9 9]", "(multlast []) -> []", "(multlast [4 6 9 7]) -> [7 7 7 7]", "(multlast []) -> []", "(multlast [3]) -> [3]", "(multlast [4 9]) -> [9 9]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.265958, "examples": ["(multlast [4 7]) -> [7 7]", "(multlast [7 6 1]) -> [1 1 1]", "(multlast [0 9]) -> [9 9]", "(multlast [8 8 5 5 5]) -> [5 5 5 5 5]", "(multlast [1 4]) -> [4 4]", "(multlast [4 6 7 9]) -> [9 9 9 9]", "(multlast [1 8 4 2]) -> [2 2 2 2]", "(multlast [5 8 7 6 6]) -> [6 6 6 6 6]", "(multlast [6 0 0]) -> [0 0 0]", "(multlast [6 8 1 7]) -> [7 7 7 7]", "(multlast []) -> []", "(multlast [1 7]) -> [7 7]", "(multlast [0 5]) -> [5 5]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.28849, "examples": ["(multlast [4 9 4 6 5]) -> [5 5 5 5 5]", "(multlast []) -> []", "(multlast [3 0 0]) -> [0 0 0]", "(multlast [4]) -> [4]", "(multlast [6]) -> [6]", "(multlast [5 4]) -> [4 4]", "(multlast [8 1]) -> [1 1]", "(multlast [0]) -> [0]", "(multlast [3 5 0 9]) -> [9 9 9 9]", "(multlast [6 7]) -> [7 7]", "(multlast [5 4 4]) -> [4 4 4]", "(multlast [7]) -> [7]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.257039, "examples": ["(multlast [0 4]) -> [4 4]", "(multlast [3 7 4 8]) -> [8 8 8 8]", "(multlast [1 8 0 6 5]) -> [5 5 5 5 5]", "(multlast [1 1 8 4 4]) -> [4 4 4 4 4]", "(multlast [1 5 5 6 5]) -> [5 5 5 5 5]", "(multlast [4 6 7]) -> [7 7 7]", "(multlast [0 6 1 6 4]) -> [4 4 4 4 4]", "(multlast [0 0 1 7 3]) -> [3 3 3 3 3]", "(multlast [0 8 8]) -> [8 8 8]", "(multlast [8 7]) -> [7 7]", "(multlast [4 3 4]) -> [4 4 4]", "(multlast []) -> []", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.288383, "examples": ["(multlast [2 4 6]) -> [6 6 6]", "(multlast [5 5 8 9 9]) -> [9 9 9 9 9]", "(multlast [3]) -> [3]", "(multlast [6 0 7]) -> [7 7 7]", "(multlast [2 0 4]) -> [4 4 4]", "(multlast [5 6 2]) -> [2 2 2]", "(multlast [2 3 5 7]) -> [7 7 7 7]", "(multlast []) -> []", "(multlast [5 8]) -> [8 8]", "(multlast [9]) -> [9]", "(multlast [7 7 5 5 5]) -> [5 5 5 5 5]", "(multlast [1 0 8 1 3]) -> [3 3 3 3 3]", "(multlast [4 1 1 8 5]) -> [5 5 5 5 5]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.282517, "examples": ["(multlast [0]) -> [0]", "(multlast [7 1 0]) -> [0 0 0]", "(multlast [0 7 2 8 5]) -> [5 5 5 5 5]", "(multlast []) -> []", "(multlast [4 7 1 4 1]) -> [1 1 1 1 1]", "(multlast [2 4]) -> [4 4]", "(multlast [3]) -> [3]", "(multlast [3 2 4]) -> [4 4 4]", "(multlast [5 7]) -> [7 7]", "(multlast [9 5 3 2]) -> [2 2 2 2]", "(multlast [7]) -> [7]", "(multlast [4 7]) -> [7 7]", "(multlast [6 4 1]) -> [1 1 1]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.266674, "examples": ["(multlast [4]) -> [4]", "(multlast [6 7]) -> [7 7]", "(multlast []) -> []", "(multlast [8 1 3 3 2]) -> [2 2 2 2 2]", "(multlast [9 5]) -> [5 5]", "(multlast [2 0 6 5 8]) -> [8 8 8 8 8]", "(multlast []) -> []", "(multlast [8 1]) -> [1 1]", "(multlast [5 9 6 1]) -> [1 1 1 1]", "(multlast [6 2 5 1]) -> [1 1 1 1]", "(multlast []) -> []", "(multlast [7]) -> [7]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.275363, "examples": ["(multlast []) -> []", "(multlast [9]) -> [9]", "(multlast []) -> []", "(multlast [3 9]) -> [9 9]", "(multlast [7 5 0]) -> [0 0 0]", "(multlast [9 3 6]) -> [6 6 6]", "(multlast [5 6]) -> [6 6]", "(multlast [4 7 4]) -> [4 4 4]", "(multlast [9 8 8 5 7]) -> [7 7 7 7 7]", "(multlast [3 5 0 3]) -> [3 3 3 3]", "(multlast [4]) -> [4]", "(multlast [9 7 1]) -> [1 1 1]", "(multlast [9 0 1 8]) -> [8 8 8 8]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.302476, "examples": ["(multlast [0 1]) -> [1 1]", "(multlast [0 5]) -> [5 5]", "(multlast [9 6]) -> [6 6]", "(multlast [9 5]) -> [5 5]", "(multlast []) -> []", "(multlast [6 0]) -> [0 0]", "(multlast [3 9]) -> [9 9]", "(multlast [7]) -> [7]", "(multlast [0 7 4]) -> [4 4 4]", "(multlast [0 1 6]) -> [6 6 6]", "(multlast [2 5 2 8 7]) -> [7 7 7 7 7]", "(multlast []) -> []", "(multlast [0 0]) -> [0 0]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.352626, "examples": ["(multlast [5 7 5 2 6]) -> [6 6 6 6 6]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [4 6 4 9 5]) -> [5 5 5 5 5]", "(multlast [1 1]) -> [1 1]", "(multlast [6 9 9 8 2]) -> [2 2 2 2 2]", "(multlast [4 6 4 2 1]) -> [1 1 1 1 1]", "(multlast [1 7 7 5 7]) -> [7 7 7 7 7]", "(multlast []) -> []", "(multlast [5 5 8 7]) -> [7 7 7 7]", "(multlast []) -> []", "(multlast [9 1]) -> [1 1]", "(multlast [8 1 0]) -> [0 0 0]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.346132, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [2 4]) -> [4 4]", "(multlast [1 7 8 0 2]) -> [2 2 2 2 2]", "(multlast [4 0 2 6]) -> [6 6 6 6]", "(multlast [4 0 5 8]) -> [8 8 8 8]", "(multlast [5 3]) -> [3 3]", "(multlast [7 9 7]) -> [7 7 7]", "(multlast [7 2 5]) -> [5 5 5]", "(multlast [4 8 6 5]) -> [5 5 5 5]", "(multlast [3 3]) -> [3 3]", "(multlast [9 4]) -> [4 4]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.310619, "examples": ["(multlast [1 0 4]) -> [4 4 4]", "(multlast [0]) -> [0]", "(multlast [2 0 5 8 5]) -> [5 5 5 5 5]", "(multlast []) -> []", "(multlast [8 5 9 1]) -> [1 1 1 1]", "(multlast [3 3]) -> [3 3]", "(multlast []) -> []", "(multlast [0 0 0 7]) -> [7 7 7 7]", "(multlast [1 2 8]) -> [8 8 8]", "(multlast [3 3 2 0]) -> [0 0 0 0]", "(multlast [1]) -> [1]", "(multlast [9 8]) -> [8 8]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.308209, "examples": ["(multlast []) -> []", "(multlast [2 3]) -> [3 3]", "(multlast [9 3 5]) -> [5 5 5]", "(multlast [8 2 1]) -> [1 1 1]", "(multlast [7 3 2 2 5]) -> [5 5 5 5 5]", "(multlast [0 9 2]) -> [2 2 2]", "(multlast [1 8]) -> [8 8]", "(multlast [3 2 6]) -> [6 6 6]", "(multlast [6 0 1]) -> [1 1 1]", "(multlast []) -> []", "(multlast [7]) -> [7]", "(multlast [3 3 1 5]) -> [5 5 5 5]", "(multlast [7 4 1]) -> [1 1 1]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.315732, "examples": ["(multlast []) -> []", "(multlast [6 1 4]) -> [4 4 4]", "(multlast [9 1 5 6 1]) -> [1 1 1 1 1]", "(multlast [8 7 6 3]) -> [3 3 3 3]", "(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast [1 4 8 3 0]) -> [0 0 0 0 0]", "(multlast [2 7]) -> [7 7]", "(multlast [6 1 7]) -> [7 7 7]", "(multlast [0 2 2]) -> [2 2 2]", "(multlast [6 1 9]) -> [9 9 9]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.365174, "examples": ["(multlast [4]) -> [4]", "(multlast [2 9 6 1 3]) -> [3 3 3 3 3]", "(multlast []) -> []", "(multlast [5 0 1 5]) -> [5 5 5 5]", "(multlast [1 6 1 6 5]) -> [5 5 5 5 5]", "(multlast [0 5]) -> [5 5]", "(multlast [4 1 0 3 6]) -> [6 6 6 6 6]", "(multlast [6 3]) -> [3 3]", "(multlast [1 2 6 2 7]) -> [7 7 7 7 7]", "(multlast [2]) -> [2]", "(multlast [1]) -> [1]", "(multlast [2]) -> [2]", "(multlast [8 4 0 4 2]) -> [2 2 2 2 2]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.339005, "examples": ["(multlast [6 6 8 3 0]) -> [0 0 0 0 0]", "(multlast [5]) -> [5]", "(multlast []) -> []", "(multlast [4]) -> [4]", "(multlast [7]) -> [7]", "(multlast [8 3 1 4]) -> [4 4 4 4]", "(multlast [3 9 4 3 4]) -> [4 4 4 4 4]", "(multlast [3 8 8 2 7]) -> [7 7 7 7 7]", "(multlast [3 5 0]) -> [0 0 0]", "(multlast [4 9 6 9 7]) -> [7 7 7 7 7]", "(multlast [6]) -> [6]", "(multlast [4 5 3]) -> [3 3 3]", "(multlast [3 9]) -> [9 9]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.284782, "examples": ["(multlast [7]) -> [7]", "(multlast [5 0 2]) -> [2 2 2]", "(multlast [2 8 7 9 0]) -> [0 0 0 0 0]", "(multlast [8 5 6 6]) -> [6 6 6 6]", "(multlast [9 4]) -> [4 4]", "(multlast [5 8 9 0 7]) -> [7 7 7 7 7]", "(multlast [1 1 7 9 0]) -> [0 0 0 0 0]", "(multlast [6 8 0]) -> [0 0 0]", "(multlast [4 9 1 4 2]) -> [2 2 2 2 2]", "(multlast [2 5]) -> [5 5]", "(multlast [7 8 7]) -> [7 7 7]", "(multlast []) -> []", "(multlast [8 5]) -> [5 5]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.279719, "examples": ["(multlast [4]) -> [4]", "(multlast [7 5 4 0 8]) -> [8 8 8 8 8]", "(multlast [8]) -> [8]", "(multlast []) -> []", "(multlast [1 4 0 8 2]) -> [2 2 2 2 2]", "(multlast [7 5 1 1]) -> [1 1 1 1]", "(multlast [9 5 3 3 7]) -> [7 7 7 7 7]", "(multlast [6 2 2 2]) -> [2 2 2 2]", "(multlast [1 5 9 6 1]) -> [1 1 1 1 1]", "(multlast [2]) -> [2]", "(multlast []) -> []", "(multlast [2 5]) -> [5 5]", "(multlast [6]) -> [6]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.274627, "examples": ["(multlast []) -> []", "(multlast [1 4 9]) -> [9 9 9]", "(multlast [1 7]) -> [7 7]", "(multlast []) -> []", "(multlast [3 3 2 2 0]) -> [0 0 0 0 0]", "(multlast [8 0 5 7 6]) -> [6 6 6 6 6]", "(multlast [8 8 1 4]) -> [4 4 4 4]", "(multlast [4 8 8 2 0]) -> [0 0 0 0 0]", "(multlast []) -> []", "(multlast [8 2 7]) -> [7 7 7]", "(multlast [7 5 2 1 4]) -> [4 4 4 4 4]", "(multlast [0]) -> [0]", "(multlast [2 9]) -> [9 9]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.271478, "examples": ["(multlast [4 2 7]) -> [7 7 7]", "(multlast [9 3 0]) -> [0 0 0]", "(multlast [1]) -> [1]", "(multlast [0 9 9 5 3]) -> [3 3 3 3 3]", "(multlast []) -> []", "(multlast [2]) -> [2]", "(multlast [3 5 6 8]) -> [8 8 8 8]", "(multlast [2 4 3 6]) -> [6 6 6 6]", "(multlast []) -> []", "(multlast [5 0 2]) -> [2 2 2]", "(multlast [9 9 5 7]) -> [7 7 7 7]", "(multlast [2 8]) -> [8 8]", "(multlast [6]) -> [6]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.278184, "examples": ["(multlast [1]) -> [1]", "(multlast [6 7]) -> [7 7]", "(multlast [1 3 3 6]) -> [6 6 6 6]", "(multlast [1 1]) -> [1 1]", "(multlast [5 3 7 0 2]) -> [2 2 2 2 2]", "(multlast [7 7 3 0 0]) -> [0 0 0 0 0]", "(multlast []) -> []", "(multlast [9 7 7 3 2]) -> [2 2 2 2 2]", "(multlast [6]) -> [6]", "(multlast [9 9 1 6]) -> [6 6 6 6]", "(multlast [4 8 6 4]) -> [4 4 4 4]", "(multlast [7 6 8 4 8]) -> [8 8 8 8 8]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.282817, "examples": ["(multlast [4 5 5 0 1]) -> [1 1 1 1 1]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [1 0 0 7]) -> [7 7 7 7]", "(multlast [1 4]) -> [4 4]", "(multlast [0]) -> [0]", "(multlast [5 9]) -> [9 9]", "(multlast [2 2 5 3]) -> [3 3 3 3]", "(multlast [3 8 8 4 8]) -> [8 8 8 8 8]", "(multlast [2]) -> [2]", "(multlast []) -> []", "(multlast [6 1 1 7 3]) -> [3 3 3 3 3]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.265504, "examples": ["(multlast [9]) -> [9]", "(multlast []) -> []", "(multlast [8 8]) -> [8 8]", "(multlast [7 2 4 8 2]) -> [2 2 2 2 2]", "(multlast [2]) -> [2]", "(multlast []) -> []", "(multlast [2 8 4 6]) -> [6 6 6 6]", "(multlast [5 4 0 0 0]) -> [0 0 0 0 0]", "(multlast [4 3 6]) -> [6 6 6]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [2 0]) -> [0 0]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.26125, "examples": ["(multlast [6 3]) -> [3 3]", "(multlast [9]) -> [9]", "(multlast [7 8 4]) -> [4 4 4]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [3]) -> [3]", "(multlast [7 3 2]) -> [2 2 2]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [7 9]) -> [9 9]", "(multlast [9 0 4 8]) -> [8 8 8 8]", "(multlast []) -> []", "(multlast [1 4 7]) -> [7 7 7]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.251496, "examples": ["(multlast [0 8 9]) -> [9 9 9]", "(multlast [3 2 0 6]) -> [6 6 6 6]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [9 0]) -> [0 0]", "(multlast [2]) -> [2]", "(multlast []) -> []", "(multlast [5 4 3 0]) -> [0 0 0 0]", "(multlast [2 3]) -> [3 3]", "(multlast [4 2 1]) -> [1 1 1]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [8 4 6 2 9]) -> [9 9 9 9 9]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.315915, "examples": ["(multlast [1 4 9]) -> [9 9 9]", "(multlast [5]) -> [5]", "(multlast [9 3 0]) -> [0 0 0]", "(multlast []) -> []", "(multlast [9 6 1 7]) -> [7 7 7 7]", "(multlast [7]) -> [7]", "(multlast []) -> []", "(multlast [5 8 2 7 0]) -> [0 0 0 0 0]", "(multlast [7 0 6 1]) -> [1 1 1 1]", "(multlast [2 8 6]) -> [6 6 6]", "(multlast []) -> []", "(multlast [1 2 8 4]) -> [4 4 4 4]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) b)) _) _)", "name": "multlast", "time": 0.783451, "examples": ["(multlast [4 1 3 6 7]) -> [7 7 7 7 7]", "(multlast [7 5]) -> [5 5]", "(multlast [3]) -> [3]", "(multlast [1]) -> [1]", "(multlast [5 5]) -> [5 5]", "(multlast [4 4 9 2]) -> [2 2 2 2]", "(multlast [4 8 6 0 7]) -> [7 7 7 7 7]", "(multlast [0 5 1 4 9]) -> [9 9 9 9 9]", "(multlast [5 9 3]) -> [3 3 3]", "(multlast [5 7]) -> [7 7]", "(multlast [7 3 2 7 4]) -> [4 4 4 4 4]", "(multlast [5 3]) -> [3 3]", "(multlast [7 3 0 2 1]) -> [1 1 1 1 1]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.270547, "examples": ["(multlast [8]) -> [8]", "(multlast [5 4 8 2 0]) -> [0 0 0 0 0]", "(multlast [6 9 9 5]) -> [5 5 5 5]", "(multlast [3 7 1]) -> [1 1 1]", "(multlast [3 9 0 7]) -> [7 7 7 7]", "(multlast []) -> []", "(multlast [8 9 6]) -> [6 6 6]", "(multlast [6]) -> [6]", "(multlast [0]) -> [0]", "(multlast []) -> []", "(multlast [2]) -> [2]", "(multlast []) -> []", "(multlast [0 9 9 5]) -> [5 5 5 5]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.247413, "examples": ["(multlast [8 7 7]) -> [7 7 7]", "(multlast [5 0 8]) -> [8 8 8]", "(multlast [3 3 7 2]) -> [2 2 2 2]", "(multlast [0]) -> [0]", "(multlast [5 6 6 9 6]) -> [6 6 6 6 6]", "(multlast [3]) -> [3]", "(multlast [7 0 6]) -> [6 6 6]", "(multlast [8 6 8 2]) -> [2 2 2 2]", "(multlast [3 6]) -> [6 6]", "(multlast []) -> []", "(multlast [9]) -> [9]", "(multlast [9 3 2]) -> [2 2 2]", "(multlast [0]) -> [0]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.185639, "examples": ["(multlast [6 5]) -> [5 5]", "(multlast [2 9 4 3]) -> [3 3 3 3]", "(multlast []) -> []", "(multlast [0 4]) -> [4 4]", "(multlast [7 0]) -> [0 0]", "(multlast [0]) -> [0]", "(multlast [1 7 1 0]) -> [0 0 0 0]", "(multlast [9 6 2 7 4]) -> [4 4 4 4 4]", "(multlast [2]) -> [2]", "(multlast [6]) -> [6]", "(multlast [0 0 8]) -> [8 8 8]", "(multlast [5 1 0 2 5]) -> [5 5 5 5 5]", "(multlast [5]) -> [5]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.275266, "examples": ["(multlast [3 3 7 4]) -> [4 4 4 4]", "(multlast [5 7]) -> [7 7]", "(multlast [0 4 1 6 1]) -> [1 1 1 1 1]", "(multlast [4 1]) -> [1 1]", "(multlast []) -> []", "(multlast [3 0 5 4 6]) -> [6 6 6 6 6]", "(multlast [3 3 9 0]) -> [0 0 0 0]", "(multlast [3]) -> [3]", "(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast [4 3 4]) -> [4 4 4]", "(multlast [7]) -> [7]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.207775, "examples": ["(multlast []) -> []", "(multlast [5 1 7 0]) -> [0 0 0 0]", "(multlast [9 1 8 3 8]) -> [8 8 8 8 8]", "(multlast [6 3 0 6]) -> [6 6 6 6]", "(multlast [9 8]) -> [8 8]", "(multlast [5 9 2 9]) -> [9 9 9 9]", "(multlast [6 4 5 7 6]) -> [6 6 6 6 6]", "(multlast [6 4 4 2 2]) -> [2 2 2 2 2]", "(multlast [6 4 3 5]) -> [5 5 5 5]", "(multlast [2]) -> [2]", "(multlast [8 0 6 8]) -> [8 8 8 8]", "(multlast [8 2]) -> [2 2]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.207261, "examples": ["(multlast [7]) -> [7]", "(multlast [3 6 0 2]) -> [2 2 2 2]", "(multlast []) -> []", "(multlast [9 3 4 9]) -> [9 9 9 9]", "(multlast []) -> []", "(multlast [6 7 5 4 5]) -> [5 5 5 5 5]", "(multlast [2 2 0]) -> [0 0 0]", "(multlast [6 8 7 2]) -> [2 2 2 2]", "(multlast [8 4]) -> [4 4]", "(multlast [3 2 8]) -> [8 8 8]", "(multlast []) -> []", "(multlast [7 8 3 7]) -> [7 7 7 7]", "(multlast [2 4 5]) -> [5 5 5]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.22479, "examples": ["(multlast [6]) -> [6]", "(multlast []) -> []", "(multlast [1 7]) -> [7 7]", "(multlast [3 2 0 7 3]) -> [3 3 3 3 3]", "(multlast [5 1 1 8]) -> [8 8 8 8]", "(multlast [9 5 7 3]) -> [3 3 3 3]", "(multlast [7 8 7 9]) -> [9 9 9 9]", "(multlast [0 5 6 9 8]) -> [8 8 8 8 8]", "(multlast [5]) -> [5]", "(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast [7 4 8]) -> [8 8 8]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.224407, "examples": ["(multlast [1 4 4]) -> [4 4 4]", "(multlast [3 0 2 3 8]) -> [8 8 8 8 8]", "(multlast [4 7 5]) -> [5 5 5]", "(multlast [8 0 2]) -> [2 2 2]", "(multlast [1 0]) -> [0 0]", "(multlast [6]) -> [6]", "(multlast []) -> []", "(multlast [8 1 0]) -> [0 0 0]", "(multlast [4]) -> [4]", "(multlast [1 4 3]) -> [3 3 3]", "(multlast [2 0 5 3]) -> [3 3 3 3]", "(multlast [1 7 1]) -> [1 1 1]", "(multlast [4]) -> [4]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.23042, "examples": ["(multlast [2 5 8]) -> [8 8 8]", "(multlast [5 9 7 5 4]) -> [4 4 4 4 4]", "(multlast []) -> []", "(multlast [6 0 0]) -> [0 0 0]", "(multlast [1 6 6 9]) -> [9 9 9 9]", "(multlast [2 0 4 2]) -> [2 2 2 2]", "(multlast [6 5 8 2]) -> [2 2 2 2]", "(multlast [7 3 5 9]) -> [9 9 9 9]", "(multlast [6 4 8 0 8]) -> [8 8 8 8 8]", "(multlast [1]) -> [1]", "(multlast [8 3 7]) -> [7 7 7]", "(multlast [7 5 7 7]) -> [7 7 7 7]", "(multlast [0]) -> [0]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.321244, "examples": ["(multlast [5 1 2]) -> [2 2 2]", "(multlast [7]) -> [7]", "(multlast [8 5 2]) -> [2 2 2]", "(multlast [0 0 6 0]) -> [0 0 0 0]", "(multlast [9 9]) -> [9 9]", "(multlast [9 5]) -> [5 5]", "(multlast [8 8 6]) -> [6 6 6]", "(multlast []) -> []", "(multlast [6 1]) -> [1 1]", "(multlast []) -> []", "(multlast [0 2]) -> [2 2]", "(multlast [3 7 5 1]) -> [1 1 1 1]", "(multlast [0 5 5]) -> [5 5 5]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.317977, "examples": ["(multlast [5 4 5 7 2]) -> [2 2 2 2 2]", "(multlast [3 8 9 2]) -> [2 2 2 2]", "(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast [5 9 3]) -> [3 3 3]", "(multlast [0 7 0 7]) -> [7 7 7 7]", "(multlast [1 7 5 9]) -> [9 9 9 9]", "(multlast [7]) -> [7]", "(multlast [3]) -> [3]", "(multlast [0]) -> [0]", "(multlast [4 8]) -> [8 8]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.313805, "examples": ["(multlast [1 3]) -> [3 3]", "(multlast [5 0 6 9]) -> [9 9 9 9]", "(multlast [9 8 9 9]) -> [9 9 9 9]", "(multlast [7 1 7 8]) -> [8 8 8 8]", "(multlast []) -> []", "(multlast [0 8 0 3 9]) -> [9 9 9 9 9]", "(multlast []) -> []", "(multlast [6]) -> [6]", "(multlast [4 0]) -> [0 0]", "(multlast [8 7]) -> [7 7]", "(multlast [4]) -> [4]", "(multlast [2 4 7 6]) -> [6 6 6 6]", "(multlast [1 9 5 5 6]) -> [6 6 6 6 6]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.306703, "examples": ["(multlast [5 8 7 4]) -> [4 4 4 4]", "(multlast []) -> []", "(multlast [2 8]) -> [8 8]", "(multlast [6 7]) -> [7 7]", "(multlast [9 2]) -> [2 2]", "(multlast [2 0 0]) -> [0 0 0]", "(multlast []) -> []", "(multlast [4 9 4 4 7]) -> [7 7 7 7 7]", "(multlast [4]) -> [4]", "(multlast [8 6]) -> [6 6]", "(multlast [6 0 1]) -> [1 1 1]", "(multlast [3 2 4]) -> [4 4 4]", "(multlast [1 0 3 7 6]) -> [6 6 6 6 6]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.356152, "examples": ["(multlast []) -> []", "(multlast [0 1 5 0]) -> [0 0 0 0]", "(multlast []) -> []", "(multlast [9]) -> [9]", "(multlast [7 9 4 6 5]) -> [5 5 5 5 5]", "(multlast [5 7 2 7]) -> [7 7 7 7]", "(multlast [8]) -> [8]", "(multlast [2 3 4 2 6]) -> [6 6 6 6 6]", "(multlast [5]) -> [5]", "(multlast [5 8]) -> [8 8]", "(multlast [1 4 8]) -> [8 8 8]", "(multlast [6 7]) -> [7 7]", "(multlast [4 1 5 6 2]) -> [2 2 2 2 2]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.305436, "examples": ["(multlast [2 8]) -> [8 8]", "(multlast [5 2 4 7 1]) -> [1 1 1 1 1]", "(multlast [3]) -> [3]", "(multlast [3 0]) -> [0 0]", "(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast [2 7 6 7]) -> [7 7 7 7]", "(multlast [4]) -> [4]", "(multlast [0 5 9 5 5]) -> [5 5 5 5 5]", "(multlast [6 7 1 4]) -> [4 4 4 4]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.357083, "examples": ["(multlast [3 5 1]) -> [1 1 1]", "(multlast [4]) -> [4]", "(multlast []) -> []", "(multlast [4]) -> [4]", "(multlast [9 2 9]) -> [9 9 9]", "(multlast [2 1 8]) -> [8 8 8]", "(multlast [3]) -> [3]", "(multlast [6]) -> [6]", "(multlast []) -> []", "(multlast [9 7]) -> [7 7]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [0 9]) -> [9 9]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.343236, "examples": ["(multlast [1 1 7 1 7]) -> [7 7 7 7 7]", "(multlast [7 0 5]) -> [5 5 5]", "(multlast [0]) -> [0]", "(multlast [1]) -> [1]", "(multlast [8 1 7]) -> [7 7 7]", "(multlast [6 1 4 1]) -> [1 1 1 1]", "(multlast [4 4 7 3 5]) -> [5 5 5 5 5]", "(multlast [6 3 1 2 9]) -> [9 9 9 9 9]", "(multlast []) -> []", "(multlast [1 9 3 2]) -> [2 2 2 2]", "(multlast [4]) -> [4]", "(multlast []) -> []", "(multlast [4 1 5]) -> [5 5 5]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) b)) _) _)", "name": "multlast", "time": 0.788876, "examples": ["(multlast [9 9 1 8 9]) -> [9 9 9 9 9]", "(multlast [8 1 4]) -> [4 4 4]", "(multlast [4 7 9]) -> [9 9 9]", "(multlast [0]) -> [0]", "(multlast [7 2 2 7]) -> [7 7 7 7]", "(multlast [9 7 8 7]) -> [7 7 7 7]", "(multlast [3 2 3 0]) -> [0 0 0 0]", "(multlast [3 6 2]) -> [2 2 2]", "(multlast [9]) -> [9]", "(multlast [4 9 3 0 7]) -> [7 7 7 7 7]", "(multlast [4 9 5 6]) -> [6 6 6 6]", "(multlast [0 4]) -> [4 4]", "(multlast [8]) -> [8]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.208981, "examples": ["(multlast [6 4]) -> [4 4]", "(multlast [4]) -> [4]", "(multlast [1 8 3]) -> [3 3 3]", "(multlast [8 1]) -> [1 1]", "(multlast [7 1 0 7 0]) -> [0 0 0 0 0]", "(multlast [1 6 4 7 9]) -> [9 9 9 9 9]", "(multlast []) -> []", "(multlast [4 1 1 2 7]) -> [7 7 7 7 7]", "(multlast [5 0 5 8 9]) -> [9 9 9 9 9]", "(multlast [4 3 0]) -> [0 0 0]", "(multlast [7]) -> [7]", "(multlast [5 9 5 9 1]) -> [1 1 1 1 1]", "(multlast [8]) -> [8]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.172561, "examples": ["(multlast [3]) -> [3]", "(multlast [0 9 5]) -> [5 5 5]", "(multlast []) -> []", "(multlast [5 2 2 8]) -> [8 8 8 8]", "(multlast [9 0 2]) -> [2 2 2]", "(multlast [1 1]) -> [1 1]", "(multlast [0 2 5 1]) -> [1 1 1 1]", "(multlast []) -> []", "(multlast [6 9 2 4 2]) -> [2 2 2 2 2]", "(multlast [5 3 8 1]) -> [1 1 1 1]", "(multlast [4]) -> [4]", "(multlast [7 7 1 4]) -> [4 4 4 4]", "(multlast [0 5 0 5 3]) -> [3 3 3 3 3]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.241967, "examples": ["(multlast [9 9 7 0 6]) -> [6 6 6 6 6]", "(multlast [2 5 9 8 8]) -> [8 8 8 8 8]", "(multlast []) -> []", "(multlast [5 1 3 5]) -> [5 5 5 5]", "(multlast [5]) -> [5]", "(multlast [2]) -> [2]", "(multlast [5 1 3]) -> [3 3 3]", "(multlast [0 3]) -> [3 3]", "(multlast [1 5 7]) -> [7 7 7]", "(multlast []) -> []", "(multlast [0 4 5 5 4]) -> [4 4 4 4 4]", "(multlast []) -> []", "(multlast [1 2 9 0 7]) -> [7 7 7 7 7]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.246626, "examples": ["(multlast [6]) -> [6]", "(multlast [3 9 2 4]) -> [4 4 4 4]", "(multlast [2 8 2 4]) -> [4 4 4 4]", "(multlast []) -> []", "(multlast [0 1 7 8 4]) -> [4 4 4 4 4]", "(multlast []) -> []", "(multlast [1 4 5 5 3]) -> [3 3 3 3 3]", "(multlast [7]) -> [7]", "(multlast []) -> []", "(multlast [8 3]) -> [3 3]", "(multlast []) -> []", "(multlast [2 6 8]) -> [8 8 8]", "(multlast [4 3]) -> [3 3]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.23616, "examples": ["(multlast []) -> []", "(multlast [6 8 0 5]) -> [5 5 5 5]", "(multlast []) -> []", "(multlast [8 7 7 3 4]) -> [4 4 4 4 4]", "(multlast [1 9 1]) -> [1 1 1]", "(multlast [0 7]) -> [7 7]", "(multlast [7 0 0 8]) -> [8 8 8 8]", "(multlast [3]) -> [3]", "(multlast [7 6 2]) -> [2 2 2]", "(multlast [7]) -> [7]", "(multlast []) -> []", "(multlast [1 7]) -> [7 7]", "(multlast [1]) -> [1]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.229628, "examples": ["(multlast [8 6 6]) -> [6 6 6]", "(multlast [5 5 2 0]) -> [0 0 0 0]", "(multlast [0 3 5]) -> [5 5 5]", "(multlast [6 8 6 1]) -> [1 1 1 1]", "(multlast []) -> []", "(multlast [5 8]) -> [8 8]", "(multlast [4]) -> [4]", "(multlast [6]) -> [6]", "(multlast [6 4 8 5 1]) -> [1 1 1 1 1]", "(multlast [5 7 8 3 3]) -> [3 3 3 3 3]", "(multlast [4]) -> [4]", "(multlast [6 1]) -> [1 1]", "(multlast [1 6 9 7]) -> [7 7 7 7]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.217398, "examples": ["(multlast [3 5 1]) -> [1 1 1]", "(multlast [1]) -> [1]", "(multlast [0 3 6 6]) -> [6 6 6 6]", "(multlast [0 2]) -> [2 2]", "(multlast []) -> []", "(multlast [4 2 3]) -> [3 3 3]", "(multlast [0 1 1]) -> [1 1 1]", "(multlast [0 7 0 8 9]) -> [9 9 9 9 9]", "(multlast []) -> []", "(multlast [8 0 1]) -> [1 1 1]", "(multlast [3 7 2 3]) -> [3 3 3 3]", "(multlast [5 5]) -> [5 5]", "(multlast [0 8]) -> [8 8]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.233473, "examples": ["(multlast [2]) -> [2]", "(multlast [8 7 8 9]) -> [9 9 9 9]", "(multlast [5 5 3]) -> [3 3 3]", "(multlast [3 5 0 2]) -> [2 2 2 2]", "(multlast [5 4 7 0]) -> [0 0 0 0]", "(multlast []) -> []", "(multlast [4 5 4 7 9]) -> [9 9 9 9 9]", "(multlast [6 4]) -> [4 4]", "(multlast [0 9]) -> [9 9]", "(multlast [1 8 2 6 1]) -> [1 1 1 1 1]", "(multlast [2 1 9 6 7]) -> [7 7 7 7 7]", "(multlast [0 1]) -> [1 1]", "(multlast [0]) -> [0]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.208707, "examples": ["(multlast []) -> []", "(multlast [2 0 7]) -> [7 7 7]", "(multlast [4 3 3]) -> [3 3 3]", "(multlast []) -> []", "(multlast [7 5]) -> [5 5]", "(multlast [1 4 7]) -> [7 7 7]", "(multlast [1 6 3 2]) -> [2 2 2 2]", "(multlast []) -> []", "(multlast [2]) -> [2]", "(multlast [1]) -> [1]", "(multlast []) -> []", "(multlast [2 9 6 1 6]) -> [6 6 6 6 6]", "(multlast [8 3 7 5]) -> [5 5 5 5]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.224059, "examples": ["(multlast []) -> []", "(multlast [1 1 3]) -> [3 3 3]", "(multlast [4 4]) -> [4 4]", "(multlast []) -> []", "(multlast [8]) -> [8]", "(multlast [7 8 2 4 8]) -> [8 8 8 8 8]", "(multlast [0 2 0 1]) -> [1 1 1 1]", "(multlast [9 2]) -> [2 2]", "(multlast [9 0]) -> [0 0]", "(multlast []) -> []", "(multlast [7 1 4 5 1]) -> [1 1 1 1 1]", "(multlast []) -> []", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.26242, "examples": ["(multlast [7 1 6]) -> [6 6 6]", "(multlast [6 2 3 9 0]) -> [0 0 0 0 0]", "(multlast []) -> []", "(multlast [0 2 0 2]) -> [2 2 2 2]", "(multlast [9 4]) -> [4 4]", "(multlast [1 4]) -> [4 4]", "(multlast []) -> []", "(multlast [8 7 7]) -> [7 7 7]", "(multlast [1 0]) -> [0 0]", "(multlast []) -> []", "(multlast [2]) -> [2]", "(multlast [4 7 4]) -> [4 4 4]", "(multlast [8 2 9 6]) -> [6 6 6 6]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.244048, "examples": ["(multlast [6]) -> [6]", "(multlast [7 4]) -> [4 4]", "(multlast [6 6 7 5 8]) -> [8 8 8 8 8]", "(multlast []) -> []", "(multlast [9 5 7 2 3]) -> [3 3 3 3 3]", "(multlast [7 4]) -> [4 4]", "(multlast []) -> []", "(multlast [7 8 1 7 5]) -> [5 5 5 5 5]", "(multlast []) -> []", "(multlast [5 9]) -> [9 9]", "(multlast [3]) -> [3]", "(multlast [9 6]) -> [6 6]", "(multlast [7 0]) -> [0 0]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.230752, "examples": ["(multlast [8]) -> [8]", "(multlast [4 6 5 4]) -> [4 4 4 4]", "(multlast [4 4]) -> [4 4]", "(multlast [3 3 7]) -> [7 7 7]", "(multlast [8 6 3 2 3]) -> [3 3 3 3 3]", "(multlast [7 4 4 5 5]) -> [5 5 5 5 5]", "(multlast []) -> []", "(multlast [5 0 4 3]) -> [3 3 3 3]", "(multlast []) -> []", "(multlast [6 7]) -> [7 7]", "(multlast [6 1]) -> [1 1]", "(multlast [9 8]) -> [8 8]", "(multlast [4]) -> [4]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.233145, "examples": ["(multlast []) -> []", "(multlast [2 1 6]) -> [6 6 6]", "(multlast [1 9 0 0 5]) -> [5 5 5 5 5]", "(multlast [9 0 4]) -> [4 4 4]", "(multlast [5 4]) -> [4 4]", "(multlast [0 1 8 4 1]) -> [1 1 1 1 1]", "(multlast [6 2 4]) -> [4 4 4]", "(multlast [8 3 3]) -> [3 3 3]", "(multlast [9 2 3]) -> [3 3 3]", "(multlast [0 5]) -> [5 5]", "(multlast [5 5 3 8]) -> [8 8 8 8]", "(multlast [6 5]) -> [5 5]", "(multlast [8 1]) -> [1 1]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.300463, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [4 1 9 3 8]) -> [8 8 8 8 8]", "(multlast []) -> []", "(multlast [6 2 9 3]) -> [3 3 3 3]", "(multlast [8 7 0 1]) -> [1 1 1 1]", "(multlast [0 1 7]) -> [7 7 7]", "(multlast [7 1 9 3]) -> [3 3 3 3]", "(multlast [9 7 3 7]) -> [7 7 7 7]", "(multlast [7 6 9 2 9]) -> [9 9 9 9 9]", "(multlast []) -> []", "(multlast [1 8 1 0]) -> [0 0 0 0]", "(multlast [1 8 8]) -> [8 8 8]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.212998, "examples": ["(multlast [7 5 1 0]) -> [0 0 0 0]", "(multlast [2]) -> [2]", "(multlast [9 6 5 2]) -> [2 2 2 2]", "(multlast [3 3 6 5]) -> [5 5 5 5]", "(multlast [7 7 4 9 8]) -> [8 8 8 8 8]", "(multlast [3 9 1 4]) -> [4 4 4 4]", "(multlast [0 4 5 1 5]) -> [5 5 5 5 5]", "(multlast [0 5]) -> [5 5]", "(multlast []) -> []", "(multlast [4 7 6 3]) -> [3 3 3 3]", "(multlast []) -> []", "(multlast [0 4 8 7 7]) -> [7 7 7 7 7]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.216344, "examples": ["(multlast [5 5 7 8 9]) -> [9 9 9 9 9]", "(multlast []) -> []", "(multlast [1 9 6]) -> [6 6 6]", "(multlast [8 0 9 1 4]) -> [4 4 4 4 4]", "(multlast [9 0]) -> [0 0]", "(multlast []) -> []", "(multlast [8 1 5 9 7]) -> [7 7 7 7 7]", "(multlast [5 3]) -> [3 3]", "(multlast [9 6 4 8]) -> [8 8 8 8]", "(multlast [1 3 7]) -> [7 7 7]", "(multlast [3 0]) -> [0 0]", "(multlast [4 0]) -> [0 0]", "(multlast [2 3 7]) -> [7 7 7]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.219979, "examples": ["(multlast [1]) -> [1]", "(multlast []) -> []", "(multlast [1 1 8 6 7]) -> [7 7 7 7 7]", "(multlast [9]) -> [9]", "(multlast [6 6 9]) -> [9 9 9]", "(multlast [4]) -> [4]", "(multlast []) -> []", "(multlast [8 6]) -> [6 6]", "(multlast [7 1 2 7 9]) -> [9 9 9 9 9]", "(multlast [6]) -> [6]", "(multlast [1 8]) -> [8 8]", "(multlast [1 1 5 2]) -> [2 2 2 2]", "(multlast [6 1]) -> [1 1]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.230277, "examples": ["(multlast [8 9 7 9 9]) -> [9 9 9 9 9]", "(multlast [1]) -> [1]", "(multlast [4 5]) -> [5 5]", "(multlast [6 1]) -> [1 1]", "(multlast [1 7 3]) -> [3 3 3]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [2 8 8 4 9]) -> [9 9 9 9 9]", "(multlast []) -> []", "(multlast [3 5 2 3]) -> [3 3 3 3]", "(multlast [7]) -> [7]", "(multlast [3 9 0]) -> [0 0 0]", "(multlast [2]) -> [2]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) b)) _) _)", "name": "multlast", "time": 0.54922, "examples": ["(multlast [3 3 0 7 8]) -> [8 8 8 8 8]", "(multlast [9 5 0 8 0]) -> [0 0 0 0 0]", "(multlast [6 7 6 3]) -> [3 3 3 3]", "(multlast [2 9 1 8 2]) -> [2 2 2 2 2]", "(multlast [4 3]) -> [3 3]", "(multlast [8 4 4 1]) -> [1 1 1 1]", "(multlast [6 9 5 0]) -> [0 0 0 0]", "(multlast [1 2]) -> [2 2]", "(multlast [3]) -> [3]", "(multlast [8 4 6]) -> [6 6 6]", "(multlast [0 5 7 3]) -> [3 3 3 3]", "(multlast [0]) -> [0]", "(multlast [6 3 0 3]) -> [3 3 3 3]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.213974, "examples": ["(multlast [6 2 9]) -> [9 9 9]", "(multlast [3 0 0 0 4]) -> [4 4 4 4 4]", "(multlast [1 6]) -> [6 6]", "(multlast []) -> []", "(multlast [0 2 2 8 5]) -> [5 5 5 5 5]", "(multlast [6 3 9]) -> [9 9 9]", "(multlast []) -> []", "(multlast [1 4 9 1 2]) -> [2 2 2 2 2]", "(multlast [3 5 0 2]) -> [2 2 2 2]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [8 2 5 6 1]) -> [1 1 1 1 1]", "(multlast [7 8 3 3]) -> [3 3 3 3]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.223603, "examples": ["(multlast [4 6 0]) -> [0 0 0]", "(multlast [1 5]) -> [5 5]", "(multlast [9]) -> [9]", "(multlast [9 9]) -> [9 9]", "(multlast [8 3 2 2 3]) -> [3 3 3 3 3]", "(multlast [2 9]) -> [9 9]", "(multlast [0 4]) -> [4 4]", "(multlast [1 3 1 2]) -> [2 2 2 2]", "(multlast [1 1 0 8 0]) -> [0 0 0 0 0]", "(multlast [8 7 5 9 8]) -> [8 8 8 8 8]", "(multlast []) -> []", "(multlast [4 5]) -> [5 5]", "(multlast [3 4 5]) -> [5 5 5]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.210579, "examples": ["(multlast [1 5]) -> [5 5]", "(multlast [6 7 3 3 8]) -> [8 8 8 8 8]", "(multlast [3 5 6]) -> [6 6 6]", "(multlast [0 4 9 5 4]) -> [4 4 4 4 4]", "(multlast [7 0 9 8 8]) -> [8 8 8 8 8]", "(multlast []) -> []", "(multlast [4 2 6 8]) -> [8 8 8 8]", "(multlast [2]) -> [2]", "(multlast [6 4 1 0 3]) -> [3 3 3 3 3]", "(multlast [7 9 9 7]) -> [7 7 7 7]", "(multlast [0 4 5 6]) -> [6 6 6 6]", "(multlast [3 1]) -> [1 1]", "(multlast [3 5 9]) -> [9 9 9]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.257403, "examples": ["(multlast []) -> []", "(multlast [2 7 2]) -> [2 2 2]", "(multlast [0 6]) -> [6 6]", "(multlast [2 7]) -> [7 7]", "(multlast [9 9 8 7 2]) -> [2 2 2 2 2]", "(multlast [1 1 1 2]) -> [2 2 2 2]", "(multlast []) -> []", "(multlast [5 5]) -> [5 5]", "(multlast [5 2 4 7 1]) -> [1 1 1 1 1]", "(multlast [0]) -> [0]", "(multlast [6 2 4 5]) -> [5 5 5 5]", "(multlast [4 8 9 3]) -> [3 3 3 3]", "(multlast [7]) -> [7]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) b)) _) _)", "name": "multlast", "time": 0.531532, "examples": ["(multlast [9]) -> [9]", "(multlast [2 7 7 8 1]) -> [1 1 1 1 1]", "(multlast [0 2 4]) -> [4 4 4]", "(multlast [2 7 4 4]) -> [4 4 4 4]", "(multlast [7]) -> [7]", "(multlast [3]) -> [3]", "(multlast [5 3 4 4 1]) -> [1 1 1 1 1]", "(multlast [9 0 4 1 3]) -> [3 3 3 3 3]", "(multlast [6 7 2 3]) -> [3 3 3 3]", "(multlast [1 5]) -> [5 5]", "(multlast [2]) -> [2]", "(multlast [0]) -> [0]", "(multlast [8 2 4 2 5]) -> [5 5 5 5 5]"]}
