{"examples": ["(sums []) -> []", "(sums [[8] []]) -> [8 0]", "(sums [[] [9 5 4 9] [4] [6]]) -> [0 27 4 6]", "(sums [[8 2 5]]) -> [15]"], "time": 0.49149, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8] []]) -> [8 0]", "(sums [[9 2] [3 1 3 6] [] [3 8 0 4 2]]) -> [11 13 0 17]", "(sums [[]]) -> [0]"], "time": 0.480006, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7]]) -> [7]", "(sums [[5 5 7 0] [2 1 6 2] [4 2 5 0]]) -> [17 11 11]", "(sums [[8 9 5] [3 0 1] [1 0 6 5] []]) -> [22 4 12 0]"], "time": 0.569545, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 9 0 2] [3 3 4] [0 2 3 2] [6]]) -> [19 10 7 6]", "(sums [[6 0] [9] [5 5 3 7]]) -> [6 9 20]", "(sums [[4 5 3 5] []]) -> [17 0]"], "time": 0.58333, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1] [6 5 0 2] [] [3 0 6] [1 4 1 9]]) -> [1 13 0 9 15]", "(sums [[] [3 8 2 0 9] [8 1] [0 2 1]]) -> [0 22 9 3]", "(sums [[7 2]]) -> [9]"], "time": 0.603108, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[5 7 5 4 6] [7] [2]]) -> [27 7 2]", "(sums [[] [8 6 2 3 5] [7 2 9 1] [6]]) -> [0 24 19 6]"], "time": 0.618777, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[] [7 8] [4] [9 8 7 8] [2 9 8 1]]) -> [0 15 4 32 20]", "(sums [[3 2 9 9] [0 5]]) -> [23 5]"], "time": 0.634786, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[1 2 7]]) -> [10]", "(sums [[2 6 4 3 6] [] []]) -> [21 0 0]"], "time": 0.562016, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 3 0 9] [3 9 1] []]) -> [18 13 0]", "(sums [[] [0] [6 9 9 3] [1 4 7 8 7] [6 3 1 4 6]]) -> [0 0 27 27 20]", "(sums [[1 5 7 4 5] [9 2 7 9] [0 0 3 9 1] [] [0]]) -> [22 27 13 0 0]"], "time": 0.646259, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 6 1 8 7] [4 2 5]]) -> [26 11]", "(sums [[] [8 0 3] [0 8 7 9] [5]]) -> [0 11 24 5]", "(sums [[4 4 3 6 8] [1] [0 1 2 1 7] [6 1 4 7]]) -> [25 1 11 18]"], "time": 0.571546, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2 6] [3 8 6] [4] [9] [0 1 0 4 1]]) -> [8 17 4 9 6]", "(sums [[9] [9] [9 0 0 2 2]]) -> [9 9 13]", "(sums [[3] [] [] [9] []]) -> [3 0 0 9 0]"], "time": 0.678305, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 0 6 9 5] [2 6 6] [7 9 2 3 0]]) -> [27 14 21]", "(sums [[6 2 5 7] []]) -> [20 0]", "(sums [[1 3] [1 7 6 8] [7] [9]]) -> [4 22 7 9]"], "time": 0.670032, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 5 6] [7 9 1]]) -> [19 17]", "(sums [[5] [3 3 7 2 9]]) -> [5 24]", "(sums [[3 5 7 8 9] [0 2 9] [9 3 6 2] [0 1] [7]]) -> [32 11 20 1 7]"], "time": 1.133564, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 3 6 0]]) -> [16]", "(sums [[4]]) -> [4]", "(sums []) -> []"], "time": 1.055704, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0 5 6] [3 8 2 7] [7]]) -> [11 20 7]", "(sums [[8 3 4] [6 8 8]]) -> [15 22]", "(sums []) -> []"], "time": 1.136557, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9] [8] [5 8 0]]) -> [9 8 13]", "(sums [[2 8 5 9] [3 8 1] [1 0 7 8 5]]) -> [24 12 21]", "(sums []) -> []"], "time": 1.053701, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 8 6]]) -> [23]", "(sums [[6 0 3 5 9] [6 0] [1 6 8 7] [5] [2 3]]) -> [23 6 22 5 5]", "(sums [[] [4 5]]) -> [0 9]"], "time": 0.504864, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[]]) -> [0]", "(sums [[] [6 9] [2 0] [8 1 5 3 1]]) -> [0 15 2 18]", "(sums [[1] [1 0]]) -> [1 1]"], "time": 0.406675, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 7]]) -> [16]", "(sums [[9 4 5] [9 1] [1 5 8 8 0] [] [5 2 4]]) -> [18 10 22 0 11]", "(sums [[0 2 2 4] [1 1 0] [5 8]]) -> [8 2 13]"], "time": 0.480578, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[3] [] []]) -> [3 0 0]", "(sums [[3 8 1] []]) -> [12 0]", "(sums [[8 0 4 9 3] [1 8] [5 8] []]) -> [24 9 13 0]"], "time": 0.542472, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 7 9]]) -> [24]", "(sums [[8] [] [0 0 3 6 3]]) -> [8 0 12]", "(sums [[3 9] [6 6 1 0] [1 8 6] [9 5 6 7] [1 8 5]]) -> [12 13 15 27 14]"], "time": 0.498082, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [5 2] [6 7] [9 1 2 5]]) -> [0 7 13 17]", "(sums [[1 5 8 2] [6] [1 4 5]]) -> [16 6 10]", "(sums [[2 5] [3 5] [9 0 8] [9 8 0 8 6]]) -> [7 8 17 31]"], "time": 0.498278, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1 2 8 3] [] [5 7 9 1]]) -> [14 0 22]", "(sums []) -> []", "(sums [[] [6 2 1 1 4] [9 9] [1 4 7] [2 2 7]]) -> [0 14 18 12 11]"], "time": 0.565521, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 7 1] [4 8 4 9 9] [9 5] [5 9 7 8] []]) -> [14 34 14 29 0]", "(sums [[7 5 1] []]) -> [13 0]", "(sums []) -> []"], "time": 0.492123, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0 0] [1 2]]) -> [0 3]", "(sums [[1 0] [1 4 6] []]) -> [1 11 0]", "(sums [[]]) -> [0]"], "time": 0.464971, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[3 1] [1 5] [] [7 1 0 8 4]]) -> [4 6 0 20]", "(sums [[4] [] [9 2] []]) -> [4 0 11 0]", "(sums [[4 3 6] [6 2]]) -> [13 8]"], "time": 0.579715, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2 5 5] [6 3 0 1]]) -> [12 10]", "(sums [[4 7]]) -> [11]", "(sums []) -> []"], "time": 0.869019, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 2 3 7 5] []]) -> [24 0]", "(sums [[0]]) -> [0]", "(sums [[8 4 8 8 8] [5]]) -> [36 5]"], "time": 0.420134, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1 4] [5 0 1] [0 1 6]]) -> [5 6 7]", "(sums []) -> []", "(sums [[5 6] [7 4 2] [6 3 6] [9 2 3 2 9] [0]]) -> [11 13 15 25 0]"], "time": 0.959389, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 6 2] []]) -> [15 0]", "(sums [[2] [2 6 5 1 0]]) -> [2 14]", "(sums []) -> []"], "time": 0.472423, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 3 9 1] [6 5 0] [2 0] []]) -> [22 11 2 0]", "(sums []) -> []", "(sums [[3] [] [0] [0 9 2] [2]]) -> [3 0 0 11 2]"], "time": 0.518225, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[5 3] [1 9] [0] [5 0 2]]) -> [8 10 0 7]", "(sums [[] [8] [8 6 0 3 5]]) -> [0 8 22]", "(sums []) -> []"], "time": 0.54824, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums []) -> []", "(sums [[8] [] [2] [9 3 2]]) -> [8 0 2 14]"], "time": 0.535777, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2] [5 8] [9 3] [5]]) -> [2 13 12 5]", "(sums [[6 8 7] [3 5 8 5] [9 7 0 6 3] [] [9 7 7]]) -> [21 21 25 0 23]", "(sums [[4 0 0]]) -> [4]"], "time": 0.571958, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [1 2 4 6] [7 8 5 3]]) -> [0 13 23]", "(sums []) -> []", "(sums [[6 1 3 3 8] [3 1 7 3] [3 0] [] [1 5 2 0]]) -> [21 14 3 0 8]"], "time": 0.599857, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8] [3 2 2 3] [] [5 6 9 2 4] [5 0 5 7]]) -> [8 10 0 26 17]", "(sums []) -> []", "(sums [[] [] [0 7 3 9 5]]) -> [0 0 24]"], "time": 0.652136, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[3 7 5 6] [7 7]]) -> [21 14]", "(sums [[8 0]]) -> [8]", "(sums [[9 8 3 5 5] [4 8 7 5 6] [5 0]]) -> [30 30 5]"], "time": 0.75194, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 6 0 8]]) -> [18]", "(sums [[1 5 0 2 1] [0 5 9 0 3] [0 7 2] [4 3 7 4 4] [5 3]]) -> [9 17 9 22 8]", "(sums []) -> []"], "time": 0.750354, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0 7 0]]) -> [7]", "(sums [[] [0 5 6]]) -> [0 11]", "(sums [[] [9 7 6] [3] [2 7] [8 1 7 7]]) -> [0 22 3 9 23]"], "time": 0.37694, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[6] [1 2 7 9]]) -> [6 19]", "(sums [[3 3]]) -> [6]"], "time": 0.990017, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[0 7 7 1]]) -> [15]", "(sums [[6] [6 3 8 0] [6]]) -> [6 17 6]"], "time": 1.047073, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1 5] [0 0 0]]) -> [6 0]", "(sums [[4 0 7 4] [] [] []]) -> [15 0 0 0]", "(sums [[4 0 8 4] [1 6] [2 5 6 8] [7 6 7 2] [5 1 9]]) -> [16 7 21 22 15]"], "time": 0.326303, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0 4 2 5 4]]) -> [15]", "(sums [[2 7] [] [4 7 2] [1 2 6]]) -> [9 0 13 9]", "(sums [[9]]) -> [9]"], "time": 0.611982, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 7 7] [8 7] [1 0 8 6] []]) -> [22 15 15 0]", "(sums [[7 8] [9]]) -> [15 9]", "(sums [[8]]) -> [8]"], "time": 0.585984, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 3 8 1] [1 3 6] [6 6 9 4] [6 5]]) -> [21 10 25 11]", "(sums [[7 3 8]]) -> [18]", "(sums [[0 1 0 4] [4 4 7 2] [8 4 4] [6] [6 5 8 0]]) -> [5 17 16 6 19]"], "time": 1.125162, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0 3] [5 0 5 4]]) -> [3 14]", "(sums [[0] [2 2 0] [9 6] [5]]) -> [0 4 15 5]", "(sums [[6 8 6 7] [4] [5]]) -> [27 4 5]"], "time": 1.132506, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8] [5 1 9 4]]) -> [8 19]", "(sums [[1 6 7] [0] [] [2 1 5 4 9]]) -> [14 0 0 21]", "(sums [[9 4 4] [7 3 4] [7 0]]) -> [17 14 7]"], "time": 0.38875, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2 1] [] [0 6] [5 9 9]]) -> [3 0 6 23]", "(sums [[5 9 6 9 4]]) -> [33]", "(sums [[2 6 4] [1] [8 0 9 3 3] [3 1 9 3]]) -> [12 1 23 16]"], "time": 0.492564, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[5 7 0 6]]) -> [18]", "(sums [[4 9 3 6 8] [7] [7 5 5 8 0] [4 2 8]]) -> [30 7 25 14]", "(sums [[1 3 8 8] [6 9 2]]) -> [20 17]"], "time": 0.686152, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 7 5]]) -> [19]", "(sums [[1 6 8] [6 4 2 4] [8 3] [9 7 6 3] [9 6 3]]) -> [15 16 11 25 18]", "(sums [[]]) -> [0]"], "time": 0.42463, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[]]) -> [0]", "(sums [[6 7 7 3 1] [0 6 6] [4 4] [2 8 5] [1 0]]) -> [24 12 8 15 1]", "(sums [[7 4 1 7] [3 7] [3 2 7 7] [9] [3 3 8 0]]) -> [19 10 19 9 14]"], "time": 0.279486, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[1 0 4] []]) -> [5 0]", "(sums [[3 8 5 2 4] [5 9 8]]) -> [22 22]"], "time": 0.350662, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 3 9]]) -> [18]", "(sums []) -> []", "(sums [[2 3] [1 4]]) -> [5 5]"], "time": 0.842283, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[]]) -> [0]", "(sums [[5] [5] [] [3 3 6 2 0] [1 9 5 4 3]]) -> [5 5 0 14 22]", "(sums []) -> []"], "time": 0.487137, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8] [5 6 5 8 4] [0 1] [7 0] [0 3]]) -> [8 28 1 7 3]", "(sums [[7] [8 1 0 0 5]]) -> [7 14]", "(sums [[1 7 7 3] [7 3 2] [3 6 4] [7 1 9 1 3]]) -> [18 12 13 21]"], "time": 1.14763, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[2 9 6 6 2] [2 7 3 6 5]]) -> [25 23]", "(sums [[6] [1 6 6] [] [8 0 4 2]]) -> [6 13 0 14]"], "time": 0.336042, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[] [3 0 3] []]) -> [0 6 0]", "(sums [[2 2] [5 5 8] []]) -> [4 18 0]"], "time": 0.565983, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1 0 2 1] [1 7 3 4 4] [5 0 3] [9 6 2 2 8] [6 4]]) -> [4 19 8 27 10]", "(sums []) -> []", "(sums [[1 9] [0 0 0 0 6]]) -> [10 6]"], "time": 0.893145, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1 0 1] [0] [0 2] [0 8]]) -> [2 0 2 8]", "(sums [[6 2 0 0 9] [6 1 2 5] [8 6 6 5 4] [1 6 0] [8 9 1 9 4]]) -> [17 14 29 7 31]", "(sums []) -> []"], "time": 1.029715, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 1 0 1] [] []]) -> [11 0 0]", "(sums [[] [0 0 3] [8 6 3 1 8]]) -> [0 3 26]", "(sums [[2 3] [1 8 7]]) -> [5 16]"], "time": 0.461844, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [] [5 6] [2 9 2 4]]) -> [0 0 11 17]", "(sums [[7 5 1 2] [] [3] [5] [2]]) -> [15 0 3 5 2]", "(sums [[] [8 2 0 6 6] [8]]) -> [0 22 8]"], "time": 0.392229, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[3] [5 3 6 1]]) -> [3 15]", "(sums [[0 3] [4 3 7 9] [7 5 0 9] [3 1]]) -> [3 23 21 4]", "(sums []) -> []"], "time": 0.683044, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums []) -> []", "(sums []) -> []"], "time": 0.000505, "name": "sums", "solution": "(let sums (let a (lambda (b) []) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 7] [4 7 2]]) -> [13 13]", "(sums []) -> []", "(sums [[9] [0 1 2 2 9]]) -> [9 14]"], "time": 0.824456, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [9 9 7 9 7] []]) -> [0 41 0]", "(sums [[4 5 3 8 4] [4 2 0 5]]) -> [24 11]", "(sums [[8 0] [1 1 4 1] [0 1]]) -> [8 7 1]"], "time": 0.408397, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 1 4 2] [3 6 4] [1] [3 6 7 0]]) -> [15 13 1 16]", "(sums [[4 7 4] [5 7 2 1 1] [4 8 6 6] [1 8 7 9 5] []]) -> [15 16 24 30 0]", "(sums [[0] [2 3 8 3 9] [8 7 1 5 9] []]) -> [0 25 30 0]"], "time": 0.386978, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[4 5]]) -> [9]", "(sums [[1 8 1 7] [8 4 6 6] [9] [7 7 0 2 0]]) -> [17 24 9 16]"], "time": 0.834165, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 8]]) -> [15]", "(sums [[6 1] [] [] [4 5 9 0]]) -> [7 0 0 18]", "(sums [[3 2] [6 7 2 2 4]]) -> [5 21]"], "time": 0.332281, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 9 3 1 4] [4 6 8 9 9]]) -> [26 36]", "(sums [[7] [8 2]]) -> [7 10]", "(sums [[1 9 0 3 6] [2 6 1 8 2]]) -> [19 19]"], "time": 0.904365, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 6 8 0 0] [] [4 1 7 9 4] [4 9 3 2 0] [1 9 7]]) -> [20 0 25 18 17]", "(sums []) -> []", "(sums [[]]) -> [0]"], "time": 0.405296, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[3 5 8 5 5]]) -> [26]", "(sums [[1 1] [8 3 6]]) -> [2 17]", "(sums [[9]]) -> [9]"], "time": 0.745894, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 8] [] [4 4 1]]) -> [14 0 9]", "(sums [[7 7 4] [6 7 6 1 2]]) -> [18 22]", "(sums []) -> []"], "time": 0.365478, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 7 2] [9]]) -> [16 9]", "(sums [[]]) -> [0]", "(sums [[0 1 0] [6] [2 8] [3 2 0 1] [9]]) -> [1 6 10 6 9]"], "time": 0.3815, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2 5 5] [6 3 3]]) -> [12 12]", "(sums [[7] [3 0 1 5 0] [1 1] [5] [4 9 6]]) -> [7 9 2 5 19]", "(sums [[] [9 2 9 2 3] [1] []]) -> [0 25 1 0]"], "time": 0.391432, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 4] [0 8] [9 9 2 3 9] [7 2 7 6]]) -> [12 8 32 22]", "(sums [[] [9 6] [5] []]) -> [0 15 5 0]", "(sums [[] [3 0] [7 2] [9 8 3 8]]) -> [0 3 9 28]"], "time": 0.391605, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 5 1 6 8] [9 9 6 2] [3 2] [2] []]) -> [24 26 5 2 0]", "(sums [[9 1]]) -> [10]", "(sums [[6 3 7 1 8] [2]]) -> [25 2]"], "time": 0.390229, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 3 5 7] [0 3] [] [8 7 2 2 8]]) -> [23 3 0 27]", "(sums [[3 5 4 3] [3 3 7]]) -> [15 13]", "(sums [[1 7 4 3] [4 4 5 2 0]]) -> [15 15]"], "time": 0.498161, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0] [5 2 6 6] [5 5]]) -> [0 19 10]", "(sums [[] [4] [2 9 1 9 8] [0]]) -> [0 4 29 0]", "(sums [[3 9] [7] [0]]) -> [12 7 0]"], "time": 0.413328, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [0 1 0]]) -> [0 1]", "(sums []) -> []", "(sums []) -> []"], "time": 0.120104, "name": "sums", "solution": "(let sums (let a (lambda (b) (foldl b (lambda (d c) (cons 0 (cons 1 []))) [])) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [2] [3 6 8] [8 6 9 4 1] [7 2 8]]) -> [0 2 17 28 17]", "(sums []) -> []", "(sums [[] [0 1 7] [9 1 1 6] [1 9 8 6 4] []]) -> [0 8 17 28 0]"], "time": 0.471292, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 8 2 3] [] [8 7 2 8] [4 4 7]]) -> [17 0 25 15]", "(sums [[2 2 5 7 2]]) -> [18]", "(sums [[0 3 5 1] [1 5 3 0 4] [0 8] []]) -> [9 13 8 0]"], "time": 0.33093, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0 5 3] [6] [4 1 2] [7 9]]) -> [8 6 7 16]", "(sums [[] [0] [4 5 5 9]]) -> [0 0 23]", "(sums [[8 0]]) -> [8]"], "time": 0.418321, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 1 7 2 1] [] [1 6 2 8] [4 2 3 3 6] [6 5]]) -> [15 0 17 18 11]", "(sums [[0] [2]]) -> [0 2]", "(sums []) -> []"], "time": 0.436179, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [1 0] [4 3]]) -> [0 1 7]", "(sums [[1 8] [1 3 3 8]]) -> [9 15]", "(sums []) -> []"], "time": 0.467911, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1 9] [1] [1 0 7] []]) -> [10 1 8 0]", "(sums []) -> []", "(sums [[6 1 6 5] [0 7 2 4 8] [3 3 1 9]]) -> [18 21 16]"], "time": 0.48706, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[5 1 0 5] [5 2]]) -> [11 7]", "(sums [[8] [1 4] [5 6 3] [8 0 2 7] [6 2 6 7]]) -> [8 5 14 17 21]", "(sums [[7] [5 7] [5 3 0]]) -> [7 12 8]"], "time": 0.950498, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [] [5 9 0] [9] [8 8 3 1]]) -> [0 0 14 9 20]", "(sums [[3 4 7 3]]) -> [17]", "(sums [[0 3 2 0] [4]]) -> [5 4]"], "time": 0.412101, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[3] [2 5] [5 4]]) -> [3 7 9]", "(sums [[3 5 9] [0 7 3 5 9] [] [9 8] [5 2 9]]) -> [17 24 0 17 16]", "(sums [[8 3] [0 0 3 6] [] [8 0] [4 0 0]]) -> [11 9 0 8 4]"], "time": 0.518644, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 5 3 7] [1 9 3 2 0] [9 9] [6 9 5 0 4]]) -> [23 15 18 24]", "(sums [[3] [9]]) -> [3 9]", "(sums [[3 5] [1 1 8 2] [0 5]]) -> [8 12 5]"], "time": 1.008702, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[2 2 6] [] []]) -> [10 0 0]", "(sums [[3 9 6 2] [7 6] [2 7 6 4 6] [4 9 3 1] [0 7 0 5]]) -> [20 13 25 17 12]"], "time": 0.534435, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 5 1 7 6] [2 3 6 8] [2 4 7 1]]) -> [23 19 14]", "(sums []) -> []", "(sums [[1 8 6 0] [5 7] [3 5] [3 9 4]]) -> [15 12 8 16]"], "time": 0.78818, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 5] []]) -> [9 0]", "(sums [[6 7 3 0] [9 5 2]]) -> [16 16]", "(sums [[] [4 4 1 0 0] [2 4 8 1 1] [3]]) -> [0 9 16 3]"], "time": 0.321931, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[3 2] [3 3 0 3 4] [] [4 0 0 2]]) -> [5 13 0 6]", "(sums [[7 9 6 3 2] [6 7 1 0] [4 3 5]]) -> [27 14 12]", "(sums [[4 1] [2 2 0] [9]]) -> [5 4 9]"], "time": 0.353714, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 6 9] [4 4 4 8 1] [9 5] [] [1 5 3 2]]) -> [23 21 14 0 11]", "(sums [[5] [9] [9 1 3] [2 8 2 3]]) -> [5 9 13 15]", "(sums [[9]]) -> [9]"], "time": 0.427351, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 8 4 7 8] [5] [3 1 9 6 2] [5 2 6] [7 5 4]]) -> [33 5 21 13 16]", "(sums [[0 2 5 3] [5] [3 9]]) -> [10 5 12]", "(sums [[6 6 8]]) -> [20]"], "time": 0.694663, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 8 6 6 6] [5 0 7] [6 2 8 5] [9 3 9 2] [4 2 0 5 0]]) -> [35 12 21 23 11]", "(sums [[6 6 0] [1 5 3 6] [2 8 0 4] [9 8 7]]) -> [12 15 14 24]", "(sums [[5]]) -> [5]"], "time": 0.739341, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 8 9 6]]) -> [29]", "(sums [[1 3] [8 7 8 5 5] [1 4 9] [5 4]]) -> [4 33 14 9]", "(sums []) -> []"], "time": 0.584111, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] []]) -> [0 0]", "(sums [[3 4 9 9] [] [0 3 1] [5 6 4] [0 1 9]]) -> [25 0 4 15 10]", "(sums [[4 9] [1 0 0 5 6]]) -> [13 12]"], "time": 0.232481, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 4 6 2] [1 8 2 6 0] [9 1 0] [9 6 9 6]]) -> [21 17 10 30]", "(sums [[7 0] [8 4 4 7] [5 4] [5] [3]]) -> [7 23 9 5 3]", "(sums [[1 7 2] [8 5 3] [4] [0] [6 1 0]]) -> [10 16 4 0 7]"], "time": 0.741784, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[5 2 0] [7 4 0 7] [9]]) -> [7 18 9]", "(sums [[2 9]]) -> [11]"], "time": 0.439157, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
