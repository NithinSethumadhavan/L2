{"name": "max", "solution": "(let max (let a (lambda (b) (foldr b (lambda (d c) (+ c (/ 1 d))) 1)) _) _)", "examples": ["(max [7 7]) -> 7", "(max [2 1 3]) -> 3", "(max [5 2 4 5 1]) -> 5", "(max [9 2 8]) -> 9", "(max [7 4 5]) -> 7", "(max [9 8]) -> 9"], "time": 3.105339}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(max [4]) -> 4", "(max [4]) -> 4", "(max [1]) -> 1", "(max [4 2 8]) -> 8", "(max [4]) -> 4", "(max [7]) -> 7"], "time": 0.046646}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 4]) -> 9", "(max [6 1 5 9 9]) -> 9", "(max [8 1 7]) -> 8", "(max [5 8 2 2]) -> 8", "(max [2 1 4 2]) -> 4", "(max [8 5 7]) -> 8"], "time": 6.281355}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 9 3 4 5]) -> 9", "(max [7 4]) -> 7", "(max [0 4 5]) -> 5", "(max [7]) -> 7", "(max [8 5]) -> 8", "(max [3 5 7]) -> 7"], "time": 6.71978}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 6 1 5 7]) -> 9", "(max [0 1 5 5]) -> 5", "(max [5 6 1 5 0]) -> 6", "(max [8 6 4]) -> 8", "(max [6]) -> 6", "(max [9 3 9 0]) -> 9"], "time": 6.676922}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 6 9]) -> 9", "(max [3 5 2]) -> 5", "(max [4 0 8 1]) -> 8", "(max [4 8 8 3 1]) -> 8", "(max [2 0 3 3]) -> 3", "(max [1 2 4 2 3]) -> 4"], "time": 7.107929}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 7 7]) -> 7", "(max [2 2 5 4]) -> 5", "(max [4 6 8]) -> 8", "(max [8 4]) -> 8", "(max [8 4 7]) -> 8", "(max [6 2]) -> 6"], "time": 7.252029}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 3]) -> 6", "(max [0 9 3 1]) -> 9", "(max [4 3]) -> 4", "(max [7 4 1 1 1]) -> 7", "(max [1 4 9]) -> 9", "(max [2]) -> 2"], "time": 8.223538}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 8 2 0 3]) -> 8", "(max [8 8 7]) -> 8", "(max [2 0]) -> 2", "(max [5 6 7 2]) -> 7", "(max [1]) -> 1", "(max [3 0 3]) -> 3"], "time": 8.315313}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2]) -> 2", "(max [9]) -> 9", "(max [6 0]) -> 6", "(max [2 4]) -> 4", "(max [9 2 3 2 3]) -> 9", "(max [2 5 4 4]) -> 5"], "time": 8.421971}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 0 5 5]) -> 5", "(max [6 7 5 3]) -> 7", "(max [7 9]) -> 9", "(max [6 9 8 3 2]) -> 9", "(max [1]) -> 1", "(max [1]) -> 1"], "time": 10.308533}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 3 1 5]) -> 5", "(max [7 8]) -> 8", "(max [8 7 0 5]) -> 8", "(max [6 0]) -> 6", "(max [0]) -> 0", "(max [6]) -> 6"], "time": 10.710796}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 5]) -> 7", "(max [3 0 7]) -> 7", "(max [0 2 7 1]) -> 7", "(max [3 8 6]) -> 8", "(max [1 4 5]) -> 5", "(max [6]) -> 6"], "time": 11.022924}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 0 d) c d)) 0)) _) _)", "examples": ["(max [8 1]) -> 8", "(max [6]) -> 6", "(max [8 1]) -> 8", "(max [8 0]) -> 8", "(max [0 6 4 5 2]) -> 6", "(max [9 4]) -> 9"], "time": 10.949638}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 4 6]) -> 6", "(max [7 7]) -> 7", "(max [5 0 7 8]) -> 8", "(max [8 3 5]) -> 8", "(max [0 4 9 8 6]) -> 9", "(max [9]) -> 9"], "time": 11.049744}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 2 0 1 3]) -> 3", "(max [7 5]) -> 7", "(max [9]) -> 9", "(max [4 1 0 3 3]) -> 4", "(max [8]) -> 8", "(max [4]) -> 4"], "time": 11.087194}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 0 2]) -> 7", "(max [2]) -> 2", "(max [7 3]) -> 7", "(max [7 7]) -> 7", "(max [2 1 6]) -> 6", "(max [6 5 8 5]) -> 8"], "time": 11.080992}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(max [1 9]) -> 9", "(max [3 3 0 7 9]) -> 9", "(max [0]) -> 0", "(max [2 5 7 5 7]) -> 7", "(max [2 4]) -> 4", "(max [4]) -> 4"], "time": 0.069297}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 7 8]) -> 8", "(max [2 1 4 1]) -> 4", "(max [6 8 3]) -> 8", "(max [5]) -> 5", "(max [4]) -> 4", "(max [3]) -> 3"], "time": 5.074005}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 6 3 8 7]) -> 8", "(max [8 4 5]) -> 8", "(max [8 2 2]) -> 8", "(max [6]) -> 6", "(max [3 6]) -> 6", "(max [9 7 8 2 3]) -> 9"], "time": 9.952334}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 1 d) c d)) 1)) _) _)", "examples": ["(max [2]) -> 2", "(max [1 7 5]) -> 7", "(max [7]) -> 7", "(max [5 4]) -> 5", "(max [9 8 3]) -> 9", "(max [5]) -> 5"], "time": 8.00663}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 1 1 0 4]) -> 4", "(max [0 3 2 4]) -> 4", "(max [6 1 2 7]) -> 7", "(max [3 9 0 7]) -> 9", "(max [0 4 2]) -> 4", "(max [7 6 4 0]) -> 7"], "time": 7.557324}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9]) -> 9", "(max [1 6 0 9]) -> 9", "(max [4 5]) -> 5", "(max [5 4 2]) -> 5", "(max [9 0 0]) -> 9", "(max [2]) -> 2"], "time": 7.521007}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 5 4]) -> 5", "(max [0 3 2]) -> 3", "(max [4 5 1 6 0]) -> 6", "(max [1 9 0]) -> 9", "(max [6 0]) -> 6", "(max [2 2 9 6 0]) -> 9"], "time": 9.813116}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 7 6]) -> 7", "(max [6]) -> 6", "(max [9 3]) -> 9", "(max [8 7]) -> 8", "(max [1 2 1]) -> 2", "(max [8]) -> 8"], "time": 9.217299}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 3 7 3 0]) -> 7", "(max [3 8 8 4 4]) -> 8", "(max [8 3 1 8]) -> 8", "(max [5]) -> 5", "(max [6 4 0 1]) -> 6", "(max [0 9 6 4 9]) -> 9"], "time": 5.796332}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(max [2 0 4 7]) -> 7", "(max [4 4]) -> 4", "(max [2 2]) -> 2", "(max [3 7]) -> 7", "(max [6]) -> 6", "(max [6]) -> 6"], "time": 0.039386}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 3 0]) -> 5", "(max [9 5 3 2]) -> 9", "(max [4]) -> 4", "(max [9 8 7 1]) -> 9", "(max [1 3 7 5 7]) -> 7", "(max [4 3 4]) -> 4"], "time": 5.740866}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 2 5]) -> 5", "(max [2]) -> 2", "(max [6]) -> 6", "(max [4 7 3 5]) -> 7", "(max [5 2 3 3]) -> 5", "(max [8 6]) -> 8"], "time": 7.136365}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 8 0 1 3]) -> 8", "(max [7 0 6 3 2]) -> 7", "(max [0 6 3 8 6]) -> 8", "(max [0 9 9 8 0]) -> 9", "(max [2 6 9]) -> 9", "(max [0 9 8]) -> 9"], "time": 6.690697}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 9 0 9 9]) -> 9", "(max [7 4]) -> 7", "(max [5 1]) -> 5", "(max [6 3 2]) -> 6", "(max [9]) -> 9", "(max [3 4]) -> 4"], "time": 9.513067}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 4]) -> 6", "(max [2]) -> 2", "(max [0 0 8]) -> 8", "(max [5 5 8]) -> 8", "(max [1]) -> 1", "(max [0 7 3 3 0]) -> 7"], "time": 9.683269}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 1 d) c d)) 1)) _) _)", "examples": ["(max [1 6 4]) -> 6", "(max [3]) -> 3", "(max [0]) -> 0", "(max [1 9]) -> 9", "(max [8]) -> 8", "(max [7 6 5]) -> 7"], "time": 10.512467}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 9 2 4]) -> 9", "(max [1 1 0]) -> 1", "(max [2 4 8]) -> 8", "(max [4 5]) -> 5", "(max [0 4 0 8]) -> 8", "(max [6 3]) -> 6"], "time": 10.79536}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 1 5 7]) -> 7", "(max [7 6 0]) -> 7", "(max [6 6]) -> 6", "(max [9 4 5 0]) -> 9", "(max [5]) -> 5", "(max [8 8 1 4]) -> 8"], "time": 11.128943}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9]) -> 9", "(max [1 1 1 9]) -> 9", "(max [8 7 7 1]) -> 8", "(max [2 2 2 9 3]) -> 9", "(max [7 8]) -> 8", "(max [9 7 6]) -> 9"], "time": 7.394184}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< 1 c) c d)) 1)) _) _)", "examples": ["(max [8 1]) -> 8", "(max [4 6]) -> 6", "(max [4 9]) -> 9", "(max [0 1]) -> 1", "(max [2 3 8]) -> 8", "(max [3 9]) -> 9"], "time": 10.50879}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2]) -> 2", "(max [5 7 1]) -> 7", "(max [2 0 0 1 8]) -> 8", "(max [0 0 1]) -> 1", "(max [5 1 4]) -> 5", "(max [1]) -> 1"], "time": 7.858239}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 7 0 3]) -> 9", "(max [0 3]) -> 3", "(max [0 4 6 7 1]) -> 7", "(max [3 4 4]) -> 4", "(max [3 3 0 5]) -> 5", "(max [7 5 5 9]) -> 9"], "time": 5.964111}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 9 0 1 6]) -> 9", "(max [7]) -> 7", "(max [4 3]) -> 4", "(max [4 5 1 6 0]) -> 6", "(max [8]) -> 8", "(max [6 7 9]) -> 9"], "time": 5.74105}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 9 2 5]) -> 9", "(max [8 1 1]) -> 8", "(max [0 1 4 7 8]) -> 8", "(max [8 9 2 6 3]) -> 9", "(max [8 1 3 2 3]) -> 8", "(max [3]) -> 3"], "time": 6.711959}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (+ c (% d (car b)))) 0)) _) _)", "examples": ["(max [8]) -> 8", "(max [6]) -> 6", "(max [2 1 0 1]) -> 2", "(max [4 9]) -> 9", "(max [4 6 5 2 5]) -> 6", "(max [9]) -> 9"], "time": 10.631599}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2]) -> 2", "(max [3]) -> 3", "(max [5 4 0 5]) -> 5", "(max [5 7 5 2 3]) -> 7", "(max [6 8 7 3 4]) -> 8", "(max [8]) -> 8"], "time": 9.123929}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 2 3]) -> 5", "(max [1]) -> 1", "(max [4]) -> 4", "(max [5]) -> 5", "(max [4 8 5]) -> 8", "(max [2 4 4 4]) -> 4"], "time": 7.829762}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 6 0 2 8]) -> 8", "(max [4 0 2]) -> 4", "(max [7 6 6 7 5]) -> 7", "(max [8 6 0 2 3]) -> 8", "(max [2 3 5 7 5]) -> 7", "(max [6 0 5 7]) -> 7"], "time": 9.745929}
{"name": "max", "solution": "(let max (let a (lambda (b) (car b)) _) _)", "examples": ["(max [6 2 0]) -> 6", "(max [6]) -> 6", "(max [6 1]) -> 6", "(max [0]) -> 0", "(max [4]) -> 4", "(max [5 1 2]) -> 5"], "time": 0.001102}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 2 4 9]) -> 9", "(max [2 7 6 2 0]) -> 7", "(max [7 5 7]) -> 7", "(max [9 2 0 2 0]) -> 9", "(max [6]) -> 6", "(max [6]) -> 6"], "time": 8.213987}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 5 6]) -> 9", "(max [8 0 8 1]) -> 8", "(max [8]) -> 8", "(max [3 5 3 8 6]) -> 8", "(max [6 5]) -> 6", "(max [0]) -> 0"], "time": 9.990715}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 0 d) c d)) 0)) _) _)", "examples": ["(max [6 6 3]) -> 6", "(max [1]) -> 1", "(max [0 3]) -> 3", "(max [7]) -> 7", "(max [2]) -> 2", "(max [9]) -> 9"], "time": 10.258685}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3]) -> 3", "(max [0 0 9 6]) -> 9", "(max [5 9 4 1 2]) -> 9", "(max [7 7 5 3]) -> 7", "(max [4 6 1 2]) -> 6", "(max [1 1 6]) -> 6"], "time": 8.353659}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 0 9 1]) -> 9", "(max [1 7 0 8 0]) -> 8", "(max [0]) -> 0", "(max [0 6]) -> 6", "(max [2 5]) -> 5", "(max [5 3 9 6]) -> 9"], "time": 7.686117}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< 1 d) d c)) 0)) _) _)", "examples": ["(max [1 7]) -> 7", "(max [0 8]) -> 8", "(max [1 1]) -> 1", "(max [0]) -> 0", "(max [6 3 3 4]) -> 6", "(max [0 0]) -> 0"], "time": 8.678446}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< 1 c) c d)) 0)) _) _)", "examples": ["(max [3 7 5 6 9]) -> 9", "(max [4]) -> 4", "(max [4 0]) -> 4", "(max [4]) -> 4", "(max [6 1]) -> 6", "(max [6 4 3 2 6]) -> 6"], "time": 7.552425}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7]) -> 7", "(max [8 9 1 0 8]) -> 9", "(max [7]) -> 7", "(max [0 7 7 3 3]) -> 7", "(max [1 1 5]) -> 5", "(max [0 7 5 8 4]) -> 8"], "time": 8.407994}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 8 7]) -> 8", "(max [6 3 2]) -> 6", "(max [8]) -> 8", "(max [4 4 1 6]) -> 6", "(max [1 9 1 2]) -> 9", "(max [3 4 5 8 0]) -> 8"], "time": 9.093376}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 7 4 7]) -> 8", "(max [1 3 9 0 8]) -> 9", "(max [2 5 9]) -> 9", "(max [5 7]) -> 7", "(max [1 3 9 9 3]) -> 9", "(max [1 2 3 3]) -> 3"], "time": 8.700439}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 0 6 5]) -> 6", "(max [0 4 4]) -> 4", "(max [2]) -> 2", "(max [1 7 8 4]) -> 8", "(max [4 3]) -> 4", "(max [7 9]) -> 9"], "time": 8.046063}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4]) -> 4", "(max [3 4 9 1]) -> 9", "(max [2]) -> 2", "(max [0 7 2 1 6]) -> 7", "(max [9 8 0 5]) -> 9", "(max [4 3 6 7 1]) -> 7"], "time": 7.705858}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 4 7 0]) -> 9", "(max [3 5 0]) -> 5", "(max [8 8 3]) -> 8", "(max [0 5 5]) -> 5", "(max [7 8 1 3 4]) -> 8", "(max [4 8 0 0]) -> 8"], "time": 8.37197}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 9 1]) -> 9", "(max [9 2]) -> 9", "(max [8 4]) -> 8", "(max [0 8 9 9]) -> 9", "(max [3]) -> 3", "(max [6 0 9 9 0]) -> 9"], "time": 7.910747}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 9 0 5]) -> 9", "(max [5 7 2 5]) -> 7", "(max [9]) -> 9", "(max [1 9 0 7]) -> 9", "(max [4 1 0]) -> 4", "(max [0 7 8 1]) -> 8"], "time": 8.13243}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3]) -> 3", "(max [3 7 7]) -> 7", "(max [2 0]) -> 2", "(max [0 4]) -> 4", "(max [7]) -> 7", "(max [5 7 4]) -> 7"], "time": 7.922655}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7]) -> 7", "(max [3]) -> 3", "(max [6 4 2 3 4]) -> 6", "(max [2 3]) -> 3", "(max [8 8 8 1]) -> 8", "(max [5]) -> 5"], "time": 8.986821}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 7 8 5 7]) -> 8", "(max [7 2 9 0 5]) -> 9", "(max [0 1]) -> 1", "(max [2 5 8]) -> 8", "(max [4 9 8 7]) -> 9", "(max [9 6 8 5 6]) -> 9"], "time": 7.651069}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6]) -> 6", "(max [0 7]) -> 7", "(max [1 1 5 7 0]) -> 7", "(max [0 8 3 3]) -> 8", "(max [8 7 0 3]) -> 8", "(max [1]) -> 1"], "time": 5.996636}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 8 6 1]) -> 8", "(max [9 8]) -> 9", "(max [4 8 1 3]) -> 8", "(max [1 0]) -> 1", "(max [9 1 8 6]) -> 9", "(max [6 5 2 6 0]) -> 6"], "time": 10.474723}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 9 0 1]) -> 9", "(max [5 0 6 2]) -> 6", "(max [1 4 5 9]) -> 9", "(max [9 0 9 4 3]) -> 9", "(max [0]) -> 0", "(max [1 6]) -> 6"], "time": 6.288666}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5]) -> 5", "(max [6]) -> 6", "(max [2 1 6]) -> 6", "(max [5 0 6]) -> 6", "(max [1 9 2]) -> 9", "(max [7 2]) -> 7"], "time": 8.224128}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3]) -> 3", "(max [0]) -> 0", "(max [4 4 7 9 3]) -> 9", "(max [9 8 4]) -> 9", "(max [9 8 5]) -> 9", "(max [1 8]) -> 8"], "time": 9.214152}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1]) -> 1", "(max [2 5 8 9 4]) -> 9", "(max [0 7]) -> 7", "(max [1 8]) -> 8", "(max [8 6 9]) -> 9", "(max [2 4 7 9]) -> 9"], "time": 8.661988}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< 1 d) d c)) 0)) _) _)", "examples": ["(max [0 6 4 3 2]) -> 6", "(max [6]) -> 6", "(max [0 7 3]) -> 7", "(max [1 2 0]) -> 2", "(max [1 7]) -> 7", "(max [2]) -> 2"], "time": 6.499155}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 7 7 9]) -> 9", "(max [8 3 7 6]) -> 8", "(max [2 7 9 5 4]) -> 9", "(max [3 1 8]) -> 8", "(max [3 7]) -> 7", "(max [9 0 4 4 6]) -> 9"], "time": 8.652898}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 5 6]) -> 6", "(max [0 2 2 6]) -> 6", "(max [1 5 8 3]) -> 8", "(max [6 2 3]) -> 6", "(max [5 2 7 8]) -> 8", "(max [3]) -> 3"], "time": 8.433848}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 7]) -> 7", "(max [0 2 0 5]) -> 5", "(max [1 2]) -> 2", "(max [8 3 4 8]) -> 8", "(max [6 7 1]) -> 7", "(max [6 5]) -> 6"], "time": 8.893071}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0]) -> 0", "(max [0 4]) -> 4", "(max [7 7 5 5]) -> 7", "(max [3]) -> 3", "(max [0 5 7]) -> 7", "(max [5 3 0 2 7]) -> 7"], "time": 8.262982}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 7 0 8]) -> 8", "(max [3 9]) -> 9", "(max [0 9 6 0]) -> 9", "(max [0]) -> 0", "(max [2]) -> 2", "(max [4 8]) -> 8"], "time": 8.009636}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 6 5]) -> 6", "(max [8 5]) -> 8", "(max [2 3]) -> 3", "(max [0 8 4 6]) -> 8", "(max [6 3 8]) -> 8", "(max [7]) -> 7"], "time": 6.917288}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 6 6 7 5]) -> 7", "(max [6 0]) -> 6", "(max [1 1 2 0]) -> 2", "(max [4 9 1 3 2]) -> 9", "(max [6 1 2 2]) -> 6", "(max [4 4 0 3]) -> 4"], "time": 11.343136}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 5 6 6 2]) -> 9", "(max [0 1 2 3]) -> 3", "(max [9 7 6]) -> 9", "(max [9 5 9]) -> 9", "(max [0]) -> 0", "(max [1 7 4]) -> 7"], "time": 5.226051}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 2 4]) -> 4", "(max [0]) -> 0", "(max [2]) -> 2", "(max [5 3]) -> 5", "(max [2 8 8 7 2]) -> 8", "(max [3 3]) -> 3"], "time": 10.817327}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 2 0]) -> 2", "(max [2 0 2 9 5]) -> 9", "(max [9 7]) -> 9", "(max [9 0 0]) -> 9", "(max [3]) -> 3", "(max [5 5 6]) -> 6"], "time": 8.130182}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 2 7]) -> 7", "(max [5 3 9]) -> 9", "(max [9 5 5 1 5]) -> 9", "(max [8 5]) -> 8", "(max [2 3 3]) -> 3", "(max [7 2 9 9 2]) -> 9"], "time": 7.396295}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 2]) -> 4", "(max [4 0 2 8 3]) -> 8", "(max [9]) -> 9", "(max [9 9 6 2 8]) -> 9", "(max [5 9 6 2 7]) -> 9", "(max [0]) -> 0"], "time": 10.615723}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 2 0 7 4]) -> 9", "(max [6]) -> 6", "(max [2 2 7 5]) -> 7", "(max [5]) -> 5", "(max [8 4 1 0 3]) -> 8", "(max [6 2 4 9 0]) -> 9"], "time": 9.282739}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 9 2 8 5]) -> 9", "(max [7 7 4]) -> 7", "(max [0 2 2 0]) -> 2", "(max [2]) -> 2", "(max [2 4 2 4]) -> 4", "(max [8 2 6 5]) -> 8"], "time": 10.809921}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 6 0 1]) -> 6", "(max [8 0 4 6]) -> 8", "(max [9 6 6 6 2]) -> 9", "(max [1 7 1 5]) -> 7", "(max [7 4 7 6]) -> 7", "(max [6 0 0 6 2]) -> 6"], "time": 7.529017}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 4 6]) -> 6", "(max [5 3 5 8 3]) -> 8", "(max [7]) -> 7", "(max [9 3 6]) -> 9", "(max [9 2 4 0 2]) -> 9", "(max [2 9 9]) -> 9"], "time": 8.850521}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 6 8 6]) -> 8", "(max [3]) -> 3", "(max [4 6]) -> 6", "(max [8 3 0]) -> 8", "(max [0 5 7 2]) -> 7", "(max [8]) -> 8"], "time": 9.119901}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 3]) -> 7", "(max [4 0 2 6 1]) -> 6", "(max [0 3 0]) -> 3", "(max [1 7 4 1 0]) -> 7", "(max [9]) -> 9", "(max [7 5 0]) -> 7"], "time": 10.234074}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6]) -> 6", "(max [4 3 1 5 8]) -> 8", "(max [3 1]) -> 3", "(max [2]) -> 2", "(max [3 9 8 6 0]) -> 9", "(max [7 0]) -> 7"], "time": 10.280849}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 1 0]) -> 7", "(max [1 4 9 5]) -> 9", "(max [8 8 8 0 9]) -> 9", "(max [2]) -> 2", "(max [3 0 8 5 8]) -> 8", "(max [6 9 2]) -> 9"], "time": 8.121986}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8]) -> 8", "(max [8 7]) -> 8", "(max [6]) -> 6", "(max [4 8 0 4 4]) -> 8", "(max [1 8 8]) -> 8", "(max [3 7 8 7]) -> 8"], "time": 4.446122}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1]) -> 1", "(max [3 9 0]) -> 9", "(max [7]) -> 7", "(max [8 5 2 7]) -> 8", "(max [1 7]) -> 7", "(max [9]) -> 9"], "time": 9.653225}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 9]) -> 9", "(max [8]) -> 8", "(max [6 6 3 4 8]) -> 8", "(max [5 4]) -> 5", "(max [7]) -> 7", "(max [0 3 3]) -> 3"], "time": 5.634032}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 8 7 9]) -> 9", "(max [4]) -> 4", "(max [9 0 8]) -> 9", "(max [8]) -> 8", "(max [6 2 8 7 2]) -> 8", "(max [6 4 7]) -> 7"], "time": 7.786146}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3]) -> 3", "(max [3 4]) -> 4", "(max [2 5 3 5 1]) -> 5", "(max [4 5 2 3 6]) -> 6", "(max [4 7 7 2]) -> 7", "(max [5 6 4 7 0]) -> 7"], "time": 7.5093}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1]) -> 1", "(max [7 6]) -> 7", "(max [0 5 8]) -> 8", "(max [1 6 6 6 1]) -> 6", "(max [9 3]) -> 9", "(max [8 3]) -> 8"], "time": 4.36351}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 2 0 5 8]) -> 8", "(max [2 8]) -> 8", "(max [2 8]) -> 8", "(max [6 2 9 0 6]) -> 9", "(max [5 7 9 7 5]) -> 9", "(max [2]) -> 2"], "time": 5.21131}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 7 8 8 1]) -> 8", "(max [6 7 5]) -> 7", "(max [3 1]) -> 3", "(max [2 8 5 0]) -> 8", "(max [1 6 8 7 5]) -> 8", "(max [4 1 1 9 5]) -> 9"], "time": 5.615768}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 5 1]) -> 7", "(max [7 3 6 3]) -> 7", "(max [2 6]) -> 6", "(max [5 7 3 4 3]) -> 7", "(max [4 6 2 4 9]) -> 9", "(max [9 4 1 1]) -> 9"], "time": 5.286841}
