{"name": "length", "examples": ["(length []) -> 0", "(length [1]) -> 1", "(length [8]) -> 1", "(length [0 8 2]) -> 3", "(length [0]) -> 1", "(length [8 6 1 0]) -> 4", "(length []) -> 0", "(length [8]) -> 1", "(length [9 9]) -> 2", "(length [7 6 4]) -> 3", "(length []) -> 0", "(length [9 5 0 4 0]) -> 5", "(length []) -> 0", "(length [4 6 4 2 9]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [3 1 6]) -> 3", "(length [6 3 0 6]) -> 4", "(length [9 1]) -> 2", "(length []) -> 0", "(length [5 0 4 1]) -> 4", "(length [8 6 3 5 5]) -> 5", "(length [2 2]) -> 2", "(length [7 6]) -> 2", "(length []) -> 0", "(length [4]) -> 1", "(length [1 8 1 1 0]) -> 5", "(length []) -> 0", "(length [6 2 4 7 9]) -> 5", "(length [9 8 9 0]) -> 4", "(length [9]) -> 1", "(length [3 7]) -> 2", "(length [9 0 5]) -> 3", "(length [9 8]) -> 2", "(length [2]) -> 1", "(length []) -> 0", "(length [9 9 8 1]) -> 4", "(length [6 8 3 9 0]) -> 5", "(length [8]) -> 1", "(length [7 3]) -> 2", "(length []) -> 0", "(length [1 1]) -> 2", "(length []) -> 0", "(length [7]) -> 1", "(length [8 8 8]) -> 3", "(length []) -> 0", "(length [8 9 9]) -> 3", "(length [4 9 8 7 1]) -> 5", "(length [3 3 1 3 8]) -> 5"], "time": 0.037016, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6 8 1 9 9]) -> 5", "(length [2 1 9 3 4]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [8 2 4 1]) -> 4", "(length [7]) -> 1", "(length [9 2]) -> 2", "(length [6]) -> 1", "(length []) -> 0", "(length [9 2 1 2]) -> 4", "(length [2 6 8 5]) -> 4", "(length [4 5 6 3 6]) -> 5", "(length [8 0 1 4]) -> 4", "(length []) -> 0", "(length [5 9 6 9]) -> 4", "(length [3]) -> 1", "(length [8 2 4]) -> 3", "(length []) -> 0", "(length [7 1 2]) -> 3", "(length []) -> 0", "(length [1 5]) -> 2", "(length [6 8]) -> 2", "(length [2]) -> 1", "(length [8 8]) -> 2", "(length [6 4 5]) -> 3", "(length [3 2 7]) -> 3", "(length []) -> 0", "(length [6 6 1]) -> 3", "(length [7 3 1]) -> 3", "(length [0 4 3]) -> 3", "(length [9]) -> 1", "(length []) -> 0", "(length [6]) -> 1", "(length [3]) -> 1", "(length [0]) -> 1", "(length [7]) -> 1", "(length [0 6]) -> 2", "(length [9 1 7 9]) -> 4", "(length [2 8 3]) -> 3", "(length [4 0 8 4 8]) -> 5", "(length [3 6]) -> 2", "(length []) -> 0", "(length [8]) -> 1", "(length [0]) -> 1", "(length [8 1 4 5 0]) -> 5", "(length [9 5 3 5]) -> 4", "(length [2 3 5]) -> 3", "(length [0 8 3 9 4]) -> 5"], "time": 0.038242, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 2 6]) -> 3", "(length [5 9 7]) -> 3", "(length [4 8 7 7]) -> 4", "(length [9 7 2 1 8]) -> 5", "(length [4]) -> 1", "(length [3 6]) -> 2", "(length [2 8 8 5]) -> 4", "(length [5 9 9]) -> 3", "(length []) -> 0", "(length [7]) -> 1", "(length [1 9 2]) -> 3", "(length [5 0 2 4]) -> 4", "(length [0 7 3 3 4]) -> 5", "(length [4 7 9 6 1]) -> 5", "(length [6 2 7]) -> 3", "(length [9]) -> 1", "(length [0 3 2 9]) -> 4", "(length [4 1 0 2]) -> 4", "(length [7 5 3 5 4]) -> 5", "(length [8 7]) -> 2", "(length []) -> 0", "(length [7 2 7 5]) -> 4", "(length []) -> 0", "(length [0 9 5 4]) -> 4", "(length [6]) -> 1", "(length [5 2 6]) -> 3", "(length [7 1 0]) -> 3", "(length []) -> 0", "(length [8 6 9]) -> 3", "(length [7]) -> 1", "(length [6 6 7 7]) -> 4", "(length [8 6]) -> 2", "(length []) -> 0", "(length [8 3 2 5]) -> 4", "(length [5 0 5 9 3]) -> 5", "(length [2 6 9]) -> 3", "(length [7 3 6 1 6]) -> 5", "(length []) -> 0", "(length [1 7]) -> 2", "(length [9 6]) -> 2", "(length [7 1]) -> 2", "(length []) -> 0", "(length [0 8 5 2]) -> 4", "(length [3]) -> 1", "(length [8 7]) -> 2", "(length [5 8 5 8]) -> 4", "(length [1 1]) -> 2", "(length [4 5]) -> 2"], "time": 0.057947, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 3 7 4]) -> 4", "(length [5 7 4 5]) -> 4", "(length [8 5]) -> 2", "(length [6]) -> 1", "(length [2 3 3 5]) -> 4", "(length [6 2 5 2 6]) -> 5", "(length []) -> 0", "(length [8]) -> 1", "(length []) -> 0", "(length [2]) -> 1", "(length [7 5 0 2]) -> 4", "(length [4 5 2 8 8]) -> 5", "(length [8 2]) -> 2", "(length [8]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [3 8 2]) -> 3", "(length [7 8]) -> 2", "(length [6 3]) -> 2", "(length [1 7 5 1]) -> 4", "(length [1 9]) -> 2", "(length [4 5 0 0 6]) -> 5", "(length []) -> 0", "(length [0 0 3]) -> 3", "(length []) -> 0", "(length [9 3 8 9 0]) -> 5", "(length [7]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [2 1 7 9 6]) -> 5", "(length [7 0 8 6]) -> 4", "(length [5 0]) -> 2", "(length []) -> 0", "(length [3 3]) -> 2", "(length [4 6 3 2 1]) -> 5", "(length [8 4 1]) -> 3", "(length [2 0 6 8 7]) -> 5", "(length [3]) -> 1", "(length []) -> 0", "(length [7]) -> 1", "(length [6]) -> 1", "(length [1 8 4]) -> 3", "(length [7 8 5 3]) -> 4", "(length [2 7 4 2 2]) -> 5", "(length []) -> 0", "(length [1 3 0 6]) -> 4", "(length [5 5]) -> 2", "(length [4 1]) -> 2"], "time": 0.041678, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 1 7]) -> 3", "(length []) -> 0", "(length [2]) -> 1", "(length [1]) -> 1", "(length [8 1 7]) -> 3", "(length [5]) -> 1", "(length [7 8]) -> 2", "(length [4 3]) -> 2", "(length [2 6 8]) -> 3", "(length [5 5 0]) -> 3", "(length [4 9 1 9 1]) -> 5", "(length [0 5]) -> 2", "(length [3 5 5 1 1]) -> 5", "(length [6 1 0 9]) -> 4", "(length [8 8 0 6 9]) -> 5", "(length [0]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [2 4 4 6 8]) -> 5", "(length [1 8 9 3 0]) -> 5", "(length [3 1]) -> 2", "(length [6 4 0 0 5]) -> 5", "(length [2 8]) -> 2", "(length [1 8 9 1 1]) -> 5", "(length [9 6]) -> 2", "(length []) -> 0", "(length [6]) -> 1", "(length [4 2 9 9]) -> 4", "(length [1 0 0 2]) -> 4", "(length [3 3 8 4]) -> 4", "(length [3 2]) -> 2", "(length [0 4 4 6 2]) -> 5", "(length [4 5 1 7]) -> 4", "(length [6 0 2 9]) -> 4", "(length [6 2 0]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [5 5 0 5]) -> 4", "(length [2 7 5 1]) -> 4", "(length [8 1]) -> 2", "(length []) -> 0", "(length [6]) -> 1", "(length [8 3 3]) -> 3", "(length [5 6]) -> 2", "(length [2]) -> 1", "(length []) -> 0", "(length [3 6]) -> 2", "(length [7 0 1 1 1]) -> 5"], "time": 0.049611, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6]) -> 1", "(length [6 7]) -> 2", "(length []) -> 0", "(length [3]) -> 1", "(length [6 2 2 1]) -> 4", "(length [9]) -> 1", "(length [1]) -> 1", "(length []) -> 0", "(length [0 4 2]) -> 3", "(length [1 3 9]) -> 3", "(length [8 4]) -> 2", "(length [5 7]) -> 2", "(length [3 4]) -> 2", "(length [1 6 9]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [4]) -> 1", "(length [4 6 7 4]) -> 4", "(length [3 4 1 5]) -> 4", "(length [1 9 2]) -> 3", "(length [4 2 6 7 4]) -> 5", "(length [2 3 0]) -> 3", "(length [7 2]) -> 2", "(length [4 4 9]) -> 3", "(length [7 2]) -> 2", "(length [2 0 6 9]) -> 4", "(length [8 9 0 9]) -> 4", "(length [9 3 7]) -> 3", "(length []) -> 0", "(length [2 1 7]) -> 3", "(length [9 5 4]) -> 3", "(length [0]) -> 1", "(length []) -> 0", "(length [1 2]) -> 2", "(length [2]) -> 1", "(length [2 0 8 5]) -> 4", "(length [4]) -> 1", "(length [0]) -> 1", "(length [1]) -> 1", "(length [1 4 6]) -> 3", "(length [2 2 3]) -> 3", "(length [3 3 9]) -> 3", "(length [3 8 5]) -> 3", "(length [0]) -> 1", "(length [9 5 5 8 4]) -> 5", "(length [1 7 5 6 4]) -> 5", "(length [2 4 4 2 3]) -> 5", "(length [7 3 0 7]) -> 4"], "time": 0.046061, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6 2]) -> 2", "(length [4 4 2 7]) -> 4", "(length [4 7 2 5]) -> 4", "(length [8 5 5]) -> 3", "(length [6 7 9 8]) -> 4", "(length [9]) -> 1", "(length [4 2 0 9 3]) -> 5", "(length [1]) -> 1", "(length [8 1 3]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [1 0]) -> 2", "(length []) -> 0", "(length [8]) -> 1", "(length [2]) -> 1", "(length [8 5 3 2 7]) -> 5", "(length [9 8 0]) -> 3", "(length [2 3 0 6 8]) -> 5", "(length [7 9 0]) -> 3", "(length [6 9 6 0 7]) -> 5", "(length []) -> 0", "(length [8]) -> 1", "(length [6 9 1 2]) -> 4", "(length [8 4 5]) -> 3", "(length [8 3]) -> 2", "(length [8 8 9 3]) -> 4", "(length [6 6 5 5]) -> 4", "(length [6 1 1 1 1]) -> 5", "(length [2 3 8 2]) -> 4", "(length []) -> 0", "(length [6 3]) -> 2", "(length [1 0 0 6]) -> 4", "(length [3 4 8 1]) -> 4", "(length []) -> 0", "(length [3 6 5]) -> 3", "(length [6 5 9]) -> 3", "(length [6]) -> 1", "(length [4 8 0 8 8]) -> 5", "(length [3 1 2 9]) -> 4", "(length [4 1 0 2]) -> 4", "(length [8 5 1]) -> 3", "(length [6 4]) -> 2", "(length [8 4 4 0 1]) -> 5", "(length [3 6 7 2]) -> 4", "(length [4]) -> 1", "(length []) -> 0"], "time": 0.043475, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [2 2 5 6 9]) -> 5", "(length [0 5]) -> 2", "(length [8 2 1 1 5]) -> 5", "(length []) -> 0", "(length [2]) -> 1", "(length [3]) -> 1", "(length [0 1 8 5 4]) -> 5", "(length [6 0]) -> 2", "(length [6 0 6]) -> 3", "(length [5 4 3 6 2]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [5 3]) -> 2", "(length [5 0]) -> 2", "(length [7]) -> 1", "(length [3 6 5 6]) -> 4", "(length []) -> 0", "(length [3 4 2 6 2]) -> 5", "(length [9 2 0 3]) -> 4", "(length [9]) -> 1", "(length [7]) -> 1", "(length [2 0]) -> 2", "(length [7 9 5 3]) -> 4", "(length [7]) -> 1", "(length [2 4]) -> 2", "(length []) -> 0", "(length [2 5 5 3]) -> 4", "(length [8 8 3 9]) -> 4", "(length [6 5 1 4]) -> 4", "(length [0 9 7 1]) -> 4", "(length [3 0 0]) -> 3", "(length [8]) -> 1", "(length [9 4]) -> 2", "(length [1]) -> 1", "(length []) -> 0", "(length [4 2 8 6]) -> 4", "(length [3 7 8 5 2]) -> 5", "(length [0 2]) -> 2", "(length [8 9]) -> 2", "(length []) -> 0", "(length [7 2 2 5 5]) -> 5", "(length [0 2]) -> 2", "(length [9 9 0 6 7]) -> 5", "(length [3 5 7 6 6]) -> 5", "(length [6]) -> 1", "(length [2 0 3]) -> 3", "(length []) -> 0"], "time": 0.048227, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7 2 7 7]) -> 4", "(length [4 6 1 5 6]) -> 5", "(length []) -> 0", "(length [9]) -> 1", "(length [9 7]) -> 2", "(length [6 6 2 3]) -> 4", "(length [6 4 8 8]) -> 4", "(length [2 9 8 1 2]) -> 5", "(length [3 2 7 1 2]) -> 5", "(length [5 9 1 6 6]) -> 5", "(length [4 0 2 4]) -> 4", "(length [6 8 7 3 4]) -> 5", "(length [7 2 1 9]) -> 4", "(length [9 3]) -> 2", "(length [9 1 0]) -> 3", "(length [4 3]) -> 2", "(length [1 0 4 6 3]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [9 7 0]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [8 7 3]) -> 3", "(length [5 7 8 1]) -> 4", "(length [0]) -> 1", "(length []) -> 0", "(length [7 8 4 4]) -> 4", "(length [7 7 5 7 9]) -> 5", "(length [5 7 6 5]) -> 4", "(length [8 8 6 2]) -> 4", "(length [4 7 4 6 9]) -> 5", "(length []) -> 0", "(length [3]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [5]) -> 1", "(length [8 8]) -> 2", "(length [9]) -> 1", "(length [3 1 8 3]) -> 4", "(length [3 8]) -> 2", "(length [5 3 1 6 2]) -> 5", "(length []) -> 0", "(length [7 3 8 7 8]) -> 5", "(length [2 8 6 2 6]) -> 5", "(length [9 9 3 7 0]) -> 5", "(length [7]) -> 1"], "time": 0.046885, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 3 0]) -> 3", "(length [3 7]) -> 2", "(length [4 6 7]) -> 3", "(length [1 0]) -> 2", "(length [4 8 0]) -> 3", "(length [8 2 1 3]) -> 4", "(length [6 8]) -> 2", "(length [9]) -> 1", "(length [1 8 3 1 2]) -> 5", "(length []) -> 0", "(length [9 0 3]) -> 3", "(length [4 3 7 4 5]) -> 5", "(length [0]) -> 1", "(length []) -> 0", "(length [7 4 2]) -> 3", "(length [7 1 5 5]) -> 4", "(length []) -> 0", "(length [9 4 1]) -> 3", "(length [8 2 0]) -> 3", "(length [4 0 9 6]) -> 4", "(length [1]) -> 1", "(length []) -> 0", "(length [9 8 5 4 7]) -> 5", "(length [7 0 8 5 3]) -> 5", "(length [4]) -> 1", "(length [3 9 1 6 2]) -> 5", "(length []) -> 0", "(length [6 0 1]) -> 3", "(length [6 3]) -> 2", "(length [1 9 1 7 2]) -> 5", "(length [5]) -> 1", "(length [3 0]) -> 2", "(length [4 6]) -> 2", "(length [3 2 1 2 6]) -> 5", "(length [5 0 2 3]) -> 4", "(length [4 2]) -> 2", "(length [4 0 6 2]) -> 4", "(length [2]) -> 1", "(length [7 9 0 9]) -> 4", "(length [4 5 4]) -> 3", "(length [3 4 3 9]) -> 4", "(length [5 9 2]) -> 3", "(length [5 3 2 9]) -> 4", "(length [5]) -> 1", "(length [5 4 9 2]) -> 4", "(length [3 6 9 8]) -> 4", "(length []) -> 0", "(length [9 3 7 0]) -> 4"], "time": 0.055644, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1 1]) -> 2", "(length [3 5 7 5 1]) -> 5", "(length [7]) -> 1", "(length [1 9 8 8]) -> 4", "(length [1]) -> 1", "(length [4 2]) -> 2", "(length [2 8 0 9]) -> 4", "(length [7 4 2]) -> 3", "(length [8]) -> 1", "(length [1 1 7 4 2]) -> 5", "(length [8 6 4]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [9 4 3 7]) -> 4", "(length [0 1]) -> 2", "(length [3 9 4 1 9]) -> 5", "(length [4 7 9 0 4]) -> 5", "(length []) -> 0", "(length [2 8 5]) -> 3", "(length [7 1 5 4]) -> 4", "(length []) -> 0", "(length [2]) -> 1", "(length [3 0]) -> 2", "(length [5]) -> 1", "(length [3 1 9 9]) -> 4", "(length [2 6]) -> 2", "(length [3 9 8 7 8]) -> 5", "(length [9 0 4 0 0]) -> 5", "(length [4 6 6 8]) -> 4", "(length [8 6 5]) -> 3", "(length [6]) -> 1", "(length [9 2 8 8 3]) -> 5", "(length [9 0 6 2 5]) -> 5", "(length [9 7 7]) -> 3", "(length [8 6 3 5 2]) -> 5", "(length []) -> 0", "(length [9 1]) -> 2", "(length [2 8 2 2 7]) -> 5", "(length [3 5 7]) -> 3", "(length [3]) -> 1", "(length [0 9]) -> 2", "(length [9 9]) -> 2", "(length [8 3 8 9]) -> 4", "(length []) -> 0", "(length [2]) -> 1", "(length [4]) -> 1", "(length [9 8 0 0 6]) -> 5", "(length [9 5]) -> 2"], "time": 0.054282, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3]) -> 1", "(length [4 2]) -> 2", "(length [1]) -> 1", "(length []) -> 0", "(length [7 1 6 7 2]) -> 5", "(length [2]) -> 1", "(length [8 0 8 3 0]) -> 5", "(length []) -> 0", "(length [4 7]) -> 2", "(length []) -> 0", "(length [0 6 7]) -> 3", "(length [2 8 2 8 5]) -> 5", "(length [5 8 2]) -> 3", "(length [4]) -> 1", "(length [3]) -> 1", "(length [0 0]) -> 2", "(length [1]) -> 1", "(length [6 3]) -> 2", "(length [6]) -> 1", "(length [0 2 5]) -> 3", "(length [7 2 1 1]) -> 4", "(length [2 2 8 0 5]) -> 5", "(length []) -> 0", "(length [8 1]) -> 2", "(length [0 8]) -> 2", "(length [4 5 7 8]) -> 4", "(length []) -> 0", "(length [5 4 7 7]) -> 4", "(length [7 1 8 4]) -> 4", "(length [9 4 8 8 1]) -> 5", "(length []) -> 0", "(length [8 4]) -> 2", "(length [3]) -> 1", "(length [5 7 5]) -> 3", "(length [7 8]) -> 2", "(length [7 6 5 0 4]) -> 5", "(length [4 5]) -> 2", "(length [1 7 7 7]) -> 4", "(length [5 9 3 5 1]) -> 5", "(length []) -> 0", "(length [2 8 4]) -> 3", "(length []) -> 0", "(length [2 7 6 8 2]) -> 5", "(length []) -> 0", "(length [2]) -> 1", "(length [7 0]) -> 2", "(length [0 9 9 5]) -> 4", "(length []) -> 0"], "time": 0.040337, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7 2 1]) -> 3", "(length [5 1 5 8 2]) -> 5", "(length [0]) -> 1", "(length [5 8 0 0]) -> 4", "(length [0]) -> 1", "(length [1 1]) -> 2", "(length [4]) -> 1", "(length []) -> 0", "(length [7 7]) -> 2", "(length [8 7 2]) -> 3", "(length []) -> 0", "(length [0 9 6 8 1]) -> 5", "(length [8]) -> 1", "(length [0]) -> 1", "(length [3]) -> 1", "(length [2 2 2 2 3]) -> 5", "(length []) -> 0", "(length [6 2 3]) -> 3", "(length [0 5 4 9]) -> 4", "(length [5 8 4 5 3]) -> 5", "(length [2 6 3 7]) -> 4", "(length [6 7 2]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [1 7 0 1 0]) -> 5", "(length [3 7 2 0]) -> 4", "(length [1 7 6 2]) -> 4", "(length []) -> 0", "(length [5 0 3 4]) -> 4", "(length [1]) -> 1", "(length [5 9]) -> 2", "(length [7 7]) -> 2", "(length [8 6 9 5 2]) -> 5", "(length [8 5 3 0]) -> 4", "(length [9]) -> 1", "(length [3 5 3 1 1]) -> 5", "(length [5]) -> 1", "(length [0 4 8 3]) -> 4", "(length [5 5 3 7 0]) -> 5", "(length [1 5 2 3]) -> 4", "(length []) -> 0", "(length [0 3 1]) -> 3", "(length [7 1]) -> 2", "(length [3 8 8]) -> 3", "(length [8 7 8]) -> 3", "(length [0 1 3 7]) -> 4", "(length [7 0 4]) -> 3", "(length [7 8]) -> 2"], "time": 0.042411, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 3 3 1 4]) -> 5", "(length [0]) -> 1", "(length [8 8 5]) -> 3", "(length [7 8]) -> 2", "(length [2 0 1]) -> 3", "(length []) -> 0", "(length [9 9 2 7 9]) -> 5", "(length [7 5]) -> 2", "(length [5 8]) -> 2", "(length [5 7]) -> 2", "(length [3 6 5 2 8]) -> 5", "(length [8 5 9 7]) -> 4", "(length [2 5 7]) -> 3", "(length [4 9]) -> 2", "(length [6 9]) -> 2", "(length []) -> 0", "(length [7 8]) -> 2", "(length [7 1]) -> 2", "(length [5]) -> 1", "(length [2 5 6 2 9]) -> 5", "(length [0 6 3 8 3]) -> 5", "(length [5 0 8 1]) -> 4", "(length [6 6 3 7]) -> 4", "(length [5 7 6 8 7]) -> 5", "(length []) -> 0", "(length [7 7 7 4 3]) -> 5", "(length [7]) -> 1", "(length []) -> 0", "(length [6]) -> 1", "(length [6 1 0]) -> 3", "(length [8]) -> 1", "(length [2]) -> 1", "(length []) -> 0", "(length [1 1]) -> 2", "(length [7 5 8 6 7]) -> 5", "(length [9]) -> 1", "(length [2 6]) -> 2", "(length [9]) -> 1", "(length [7 2 9 5 8]) -> 5", "(length []) -> 0", "(length [9 6 9]) -> 3", "(length [8 2 8]) -> 3", "(length [3]) -> 1", "(length [0 5 7 6 4]) -> 5", "(length [1]) -> 1", "(length [2 3 0 3]) -> 4", "(length [8 1 6 5]) -> 4", "(length [7]) -> 1"], "time": 0.055021, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4]) -> 1", "(length [6 8 2]) -> 3", "(length [2 2]) -> 2", "(length [0 2 4 3 2]) -> 5", "(length [0 9 4 0 7]) -> 5", "(length [4 4 5]) -> 3", "(length [6]) -> 1", "(length [3 2 6]) -> 3", "(length []) -> 0", "(length [0 8 5 2 6]) -> 5", "(length [9 6 2]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [2 3 2]) -> 3", "(length [7 2 6]) -> 3", "(length [2 3 8 9]) -> 4", "(length []) -> 0", "(length [6]) -> 1", "(length [4 9 4]) -> 3", "(length [2 0 7]) -> 3", "(length []) -> 0", "(length [9 0 7 9 9]) -> 5", "(length [7 5 4 9 1]) -> 5", "(length [8]) -> 1", "(length [4 7 6 2 0]) -> 5", "(length [0 8 5 9]) -> 4", "(length [3]) -> 1", "(length [1 3]) -> 2", "(length [1 4 0 4]) -> 4", "(length [1 9 2]) -> 3", "(length [4 6 2 2]) -> 4", "(length []) -> 0", "(length [8]) -> 1", "(length [1 9]) -> 2", "(length [4 8]) -> 2", "(length []) -> 0", "(length [0 7 2 0 2]) -> 5", "(length []) -> 0", "(length [7 0 6 4]) -> 4", "(length [9 5 2 1]) -> 4", "(length [1 0 5 8 4]) -> 5", "(length [1 3 6]) -> 3", "(length [9 6]) -> 2", "(length [2 7 8 5]) -> 4", "(length [5 9]) -> 2", "(length [2 8 8 1 5]) -> 5", "(length [2 6 8]) -> 3", "(length [6 6]) -> 2"], "time": 0.046567, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 4 1 8 0]) -> 5", "(length [5]) -> 1", "(length [8]) -> 1", "(length [9 4 4 6]) -> 4", "(length []) -> 0", "(length [8]) -> 1", "(length []) -> 0", "(length [0 1 1 8 1]) -> 5", "(length [2 8 1]) -> 3", "(length [9]) -> 1", "(length [0 5 5]) -> 3", "(length [3 9 1]) -> 3", "(length [2 3]) -> 2", "(length [3 8 6]) -> 3", "(length [3 2 6]) -> 3", "(length [2 7]) -> 2", "(length [6 8 3 4]) -> 4", "(length [4 8]) -> 2", "(length [7 2]) -> 2", "(length [4 2 2]) -> 3", "(length [9 6 4 7]) -> 4", "(length [6 3]) -> 2", "(length []) -> 0", "(length [1 7 2 7 6]) -> 5", "(length [6]) -> 1", "(length [6 8 9]) -> 3", "(length [7 7]) -> 2", "(length [9 9]) -> 2", "(length [4]) -> 1", "(length []) -> 0", "(length [8 0 2]) -> 3", "(length [8 4 4]) -> 3", "(length [6 7 2]) -> 3", "(length [4]) -> 1", "(length []) -> 0", "(length [4 7 1 3 1]) -> 5", "(length [2 1 5]) -> 3", "(length [0 9 1 5 3]) -> 5", "(length [9 2]) -> 2", "(length [7 0 0]) -> 3", "(length []) -> 0", "(length [0 5 5 0 9]) -> 5", "(length [9 8 5 2]) -> 4", "(length [6 8]) -> 2", "(length [5 3]) -> 2", "(length [9 5]) -> 2", "(length [7 7 7 4 3]) -> 5", "(length [0 4 0 4]) -> 4"], "time": 0.049413, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 4 9 0]) -> 4", "(length [0 8 9 2 4]) -> 5", "(length []) -> 0", "(length [4 6 8]) -> 3", "(length [6 7 4 1 0]) -> 5", "(length [4]) -> 1", "(length [1 7 1 4 8]) -> 5", "(length [7 9 3 5]) -> 4", "(length [6 6]) -> 2", "(length [5 7 6 6]) -> 4", "(length []) -> 0", "(length [6]) -> 1", "(length [9 5 9 5 1]) -> 5", "(length []) -> 0", "(length [1]) -> 1", "(length [3]) -> 1", "(length [3 3 6 2 1]) -> 5", "(length [7]) -> 1", "(length [9 4]) -> 2", "(length [9 9 6]) -> 3", "(length [7 6]) -> 2", "(length [3 6 4 6]) -> 4", "(length [6 8 8]) -> 3", "(length [5 8]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [0 8 3 8]) -> 4", "(length [8 6]) -> 2", "(length [8 0 8 3]) -> 4", "(length []) -> 0", "(length [0 8]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [2 6 3 3]) -> 4", "(length [7 8 9]) -> 3", "(length [8 6]) -> 2", "(length [6 1 8]) -> 3", "(length [6 4 1]) -> 3", "(length [9]) -> 1", "(length [7 7 1 1 1]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [6]) -> 1", "(length [4 7 2 6 6]) -> 5", "(length [9 1 7 9 3]) -> 5", "(length [5 8 9 4]) -> 4", "(length []) -> 0", "(length [9 5]) -> 2"], "time": 0.032914, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 7]) -> 2", "(length [3 9 2 1 6]) -> 5", "(length [3 7]) -> 2", "(length [8 5 9 8]) -> 4", "(length [6 6 9 2 1]) -> 5", "(length [0 8]) -> 2", "(length [0 1 1 7 7]) -> 5", "(length [7 9 5]) -> 3", "(length []) -> 0", "(length [1 5]) -> 2", "(length [1 2]) -> 2", "(length [8]) -> 1", "(length [4 3 3]) -> 3", "(length [2 7]) -> 2", "(length [3 1 3]) -> 3", "(length [4 4 8 3 1]) -> 5", "(length [3 6]) -> 2", "(length [6 2 3]) -> 3", "(length [7 5]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [4 1 0 4 1]) -> 5", "(length [9 2 0 3 7]) -> 5", "(length [4]) -> 1", "(length [9 1]) -> 2", "(length [4]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [5 8 9 6 6]) -> 5", "(length [1 5 6 4]) -> 4", "(length [0 3]) -> 2", "(length []) -> 0", "(length [5 2 4 2 5]) -> 5", "(length [8 2 0 1]) -> 4", "(length [8 4 6 8 8]) -> 5", "(length [6 7 8 3]) -> 4", "(length [0 3 8 8 0]) -> 5", "(length [7]) -> 1", "(length [5]) -> 1", "(length []) -> 0", "(length [1 7 1 3 0]) -> 5", "(length [4 4 1 1 7]) -> 5", "(length [4 3 4 6]) -> 4", "(length [4 8]) -> 2", "(length [5 4]) -> 2", "(length []) -> 0", "(length [1 3 3 5 3]) -> 5", "(length [8 7 5]) -> 3"], "time": 0.032944, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [6 1]) -> 2", "(length [2]) -> 1", "(length []) -> 0", "(length [5 2]) -> 2", "(length []) -> 0", "(length [6 5 6 7 1]) -> 5", "(length [8 6 1 2]) -> 4", "(length [0 6 6 2 8]) -> 5", "(length [5 9 3]) -> 3", "(length [5 7 0 7 9]) -> 5", "(length [7 1 5]) -> 3", "(length [9]) -> 1", "(length [7]) -> 1", "(length []) -> 0", "(length [8 6]) -> 2", "(length [1]) -> 1", "(length [6 0]) -> 2", "(length [3 6 5 0 9]) -> 5", "(length []) -> 0", "(length [3]) -> 1", "(length [0]) -> 1", "(length [4 8 1 1]) -> 4", "(length [9 4 4 2 0]) -> 5", "(length [0 3 8 4]) -> 4", "(length [6]) -> 1", "(length [8 1 4]) -> 3", "(length [6 1 2 5 7]) -> 5", "(length [2]) -> 1", "(length [5]) -> 1", "(length [9 5 3]) -> 3", "(length []) -> 0", "(length [4]) -> 1", "(length [9 1]) -> 2", "(length [7 2 1 0 5]) -> 5", "(length [5 5 1 7]) -> 4", "(length [2]) -> 1", "(length [7 1 1 6 4]) -> 5", "(length [9 5 4]) -> 3", "(length [3 5 7]) -> 3", "(length [0 1 1 4 9]) -> 5", "(length [0]) -> 1", "(length [4 6]) -> 2", "(length [0 9]) -> 2", "(length [6 3 7 4]) -> 4", "(length [2 4 9 0]) -> 4", "(length [9 9]) -> 2"], "time": 0.037363, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 4 8 9 7]) -> 5", "(length [4 6]) -> 2", "(length [7]) -> 1", "(length [6 1 6 3 7]) -> 5", "(length [1]) -> 1", "(length [2]) -> 1", "(length [1 8 8]) -> 3", "(length [4 0 2 6]) -> 4", "(length [6 7 7 6 1]) -> 5", "(length [8 3 5]) -> 3", "(length [2 2 0 6]) -> 4", "(length [2 0 7 5]) -> 4", "(length [8 6]) -> 2", "(length [9 2 7 5]) -> 4", "(length [9 2]) -> 2", "(length [3]) -> 1", "(length [4 1 7 7 3]) -> 5", "(length [3 3 8 4]) -> 4", "(length [1 9 9 7 6]) -> 5", "(length [1 4 8 2]) -> 4", "(length [7 4 4 9 9]) -> 5", "(length [1 5 6 9]) -> 4", "(length []) -> 0", "(length [4]) -> 1", "(length [7]) -> 1", "(length [4 4 0]) -> 3", "(length [2]) -> 1", "(length [6 5]) -> 2", "(length [6 7 9 6]) -> 4", "(length [7 9]) -> 2", "(length [7 4]) -> 2", "(length [5 3]) -> 2", "(length [6 8]) -> 2", "(length [9 0]) -> 2", "(length [8 1]) -> 2", "(length [0 0 8 4 2]) -> 5", "(length [6]) -> 1", "(length [8]) -> 1", "(length [5 4 3 4 0]) -> 5", "(length [2 7 3]) -> 3", "(length []) -> 0", "(length [0 1 1 9]) -> 4", "(length [8 1 6 0]) -> 4", "(length [9 6 6]) -> 3", "(length [1 1 8]) -> 3", "(length [6 6 1 1 0]) -> 5", "(length [3 5]) -> 2", "(length [7 9]) -> 2"], "time": 0.050095, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 1 0]) -> 3", "(length []) -> 0", "(length [1]) -> 1", "(length [3 3 9]) -> 3", "(length [8 8 9]) -> 3", "(length [4 5 2 0]) -> 4", "(length [5 7 9]) -> 3", "(length []) -> 0", "(length [2]) -> 1", "(length [6 8 2 5]) -> 4", "(length [4 0 0]) -> 3", "(length [6 6 7 2 7]) -> 5", "(length [8]) -> 1", "(length [9 8 4 0]) -> 4", "(length [0]) -> 1", "(length [0 1]) -> 2", "(length []) -> 0", "(length [6 1 3]) -> 3", "(length [9 9 2 3 9]) -> 5", "(length [1 8 7 9 2]) -> 5", "(length [6 6 4]) -> 3", "(length [6 6 1]) -> 3", "(length [0 5 9]) -> 3", "(length [6 3 9]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [2 6]) -> 2", "(length [5 5 1 3]) -> 4", "(length [8 3 0]) -> 3", "(length [8 7 6 8]) -> 4", "(length [5]) -> 1", "(length [7 2 7 9]) -> 4", "(length []) -> 0", "(length [7]) -> 1", "(length [7 3 1 4 1]) -> 5", "(length [8 0]) -> 2", "(length [1 6 3]) -> 3", "(length [5 9]) -> 2", "(length [7 5 9 5]) -> 4", "(length [4]) -> 1", "(length [0 7 1]) -> 3", "(length []) -> 0", "(length [3 4 7 2]) -> 4", "(length [0 9]) -> 2", "(length [4 9 6]) -> 3", "(length [3 9]) -> 2", "(length [2 6]) -> 2", "(length [3]) -> 1"], "time": 0.036714, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [5 9 3 1 9]) -> 5", "(length [7]) -> 1", "(length [4 2]) -> 2", "(length [9 0 4 6]) -> 4", "(length []) -> 0", "(length [3 2 3 6]) -> 4", "(length []) -> 0", "(length [4]) -> 1", "(length [3 7]) -> 2", "(length [6]) -> 1", "(length [2]) -> 1", "(length [6 8 2 1]) -> 4", "(length []) -> 0", "(length [2 5 7 7 1]) -> 5", "(length []) -> 0", "(length [9 6 8 6]) -> 4", "(length [6 9 8 2]) -> 4", "(length [0 6]) -> 2", "(length [9 9]) -> 2", "(length [0 4 4 9]) -> 4", "(length [1 0 8 6]) -> 4", "(length [1 1 4 9]) -> 4", "(length [1 4 9 4 3]) -> 5", "(length [1 6 6 6]) -> 4", "(length [7 2]) -> 2", "(length [4 8]) -> 2", "(length [9]) -> 1", "(length [4 4 3 3]) -> 4", "(length []) -> 0", "(length [0 1 9 0]) -> 4", "(length [9 5 7 4 0]) -> 5", "(length [6 1]) -> 2", "(length [9 3 0 6 6]) -> 5", "(length [4 7 9]) -> 3", "(length [1 6 2 4 0]) -> 5", "(length [1 2 7 4]) -> 4", "(length [8 5 9 5]) -> 4", "(length [6 8 4 4]) -> 4", "(length [9 4]) -> 2", "(length [5 8 8 0 2]) -> 5", "(length [0]) -> 1", "(length [7 5 8]) -> 3", "(length []) -> 0", "(length [0]) -> 1", "(length [1 3]) -> 2", "(length [3 4 2 5 4]) -> 5", "(length [5 5]) -> 2"], "time": 0.034993, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 5 6 4]) -> 4", "(length [7]) -> 1", "(length [6 0 2 9 7]) -> 5", "(length [9 6 2 0 2]) -> 5", "(length [0 5]) -> 2", "(length [0 3]) -> 2", "(length [5 0 6 6 5]) -> 5", "(length []) -> 0", "(length [7 1]) -> 2", "(length [1 7]) -> 2", "(length [2 7 5]) -> 3", "(length [5 6 7 6]) -> 4", "(length []) -> 0", "(length [8 5 0]) -> 3", "(length []) -> 0", "(length [9 7 2]) -> 3", "(length [2 0 2 8]) -> 4", "(length [6 7]) -> 2", "(length [7 0 0 1]) -> 4", "(length []) -> 0", "(length [8 9]) -> 2", "(length [8 0 4 3]) -> 4", "(length [4 8]) -> 2", "(length [6 7 1 5 0]) -> 5", "(length [1 4 7 9 2]) -> 5", "(length []) -> 0", "(length [2]) -> 1", "(length [3]) -> 1", "(length [4 4 7 8 5]) -> 5", "(length [3 1]) -> 2", "(length []) -> 0", "(length [5 9 2 7]) -> 4", "(length [5]) -> 1", "(length []) -> 0", "(length [5 0]) -> 2", "(length [3 1]) -> 2", "(length [7]) -> 1", "(length [2 1 9 0]) -> 4", "(length [9 5 2 0]) -> 4", "(length []) -> 0", "(length [0 5]) -> 2", "(length [6]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [2 2 5]) -> 3", "(length [6 0]) -> 2", "(length [8 4 7 0 1]) -> 5", "(length [7 9 9 4 9]) -> 5"], "time": 0.036188, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 4 8 4]) -> 4", "(length [2 8 6 8 7]) -> 5", "(length [4 7 6 5 5]) -> 5", "(length [3 6]) -> 2", "(length [6]) -> 1", "(length [6 7 1 1]) -> 4", "(length []) -> 0", "(length [0 8 8 0 1]) -> 5", "(length [3 3 5 6 2]) -> 5", "(length [4 0]) -> 2", "(length [5]) -> 1", "(length [4]) -> 1", "(length [3]) -> 1", "(length []) -> 0", "(length [6 4 8 2]) -> 4", "(length [5 2 9 0 8]) -> 5", "(length [9]) -> 1", "(length [1 2]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [4]) -> 1", "(length [6 9 8 6 5]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [0]) -> 1", "(length [4 5 8 5 8]) -> 5", "(length [6 7 1 4 0]) -> 5", "(length [5 4 5 9]) -> 4", "(length [4 0 3 7]) -> 4", "(length [1 7 8]) -> 3", "(length [3]) -> 1", "(length []) -> 0", "(length [0 2 1 3 5]) -> 5", "(length [0 6 1 8]) -> 4", "(length []) -> 0", "(length [9 3]) -> 2", "(length []) -> 0", "(length [0 0]) -> 2", "(length [7 0 7 2]) -> 4", "(length [7 7 1 3 0]) -> 5", "(length [1 4 0 4 8]) -> 5", "(length []) -> 0", "(length [6 0 0]) -> 3", "(length [7 1]) -> 2", "(length []) -> 0", "(length [6 4 8 4 6]) -> 5", "(length [5 0 8 8 0]) -> 5", "(length [1 4 8 2]) -> 4"], "time": 0.036575, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 2 4 2]) -> 4", "(length [2 6 9 4]) -> 4", "(length [0 6]) -> 2", "(length [1 3 4 6]) -> 4", "(length [3 2]) -> 2", "(length [3 5 6 1]) -> 4", "(length []) -> 0", "(length [3 4 1]) -> 3", "(length [1]) -> 1", "(length [9 9 1]) -> 3", "(length [1 4 3 2]) -> 4", "(length [6 3 7]) -> 3", "(length [7]) -> 1", "(length [6 7 4 1]) -> 4", "(length [0 1]) -> 2", "(length []) -> 0", "(length [2 3 4 0]) -> 4", "(length [1 3 5]) -> 3", "(length [2 9 0 7]) -> 4", "(length [9 0]) -> 2", "(length [2 8 3 9]) -> 4", "(length [1 6]) -> 2", "(length [9 4 8 4 0]) -> 5", "(length [0 6]) -> 2", "(length [1 6 5 5 6]) -> 5", "(length [2 1]) -> 2", "(length [1]) -> 1", "(length [7 3 2]) -> 3", "(length []) -> 0", "(length [3 7 9]) -> 3", "(length []) -> 0", "(length [6 4 3 2]) -> 4", "(length [9 0]) -> 2", "(length [9 6 1]) -> 3", "(length []) -> 0", "(length [9]) -> 1", "(length [0 9 0 6]) -> 4", "(length [4 1 8 8 6]) -> 5", "(length [3 4]) -> 2", "(length [2]) -> 1", "(length [1 2]) -> 2", "(length [5]) -> 1", "(length [4 9 5 2]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length [9 1]) -> 2", "(length [1 2 0]) -> 3", "(length []) -> 0"], "time": 0.046935, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 5 5 7 8]) -> 5", "(length [8]) -> 1", "(length [7 0]) -> 2", "(length [0 9 1 5 1]) -> 5", "(length []) -> 0", "(length [7 9 4 4]) -> 4", "(length []) -> 0", "(length [8 8]) -> 2", "(length [8 8]) -> 2", "(length [6]) -> 1", "(length [5 5 8 5]) -> 4", "(length [2 1]) -> 2", "(length [2 9]) -> 2", "(length [7]) -> 1", "(length [5]) -> 1", "(length [9 4]) -> 2", "(length [8]) -> 1", "(length [1 7]) -> 2", "(length [0 1 8 4]) -> 4", "(length [8 3 7 9]) -> 4", "(length []) -> 0", "(length [1 8 4]) -> 3", "(length [8 2]) -> 2", "(length []) -> 0", "(length [1 8]) -> 2", "(length [5 8 8 6]) -> 4", "(length [1 8 0 6]) -> 4", "(length [7 3 2]) -> 3", "(length [2 2 4 1 7]) -> 5", "(length [6 7 5 1 7]) -> 5", "(length [3 2 2 6]) -> 4", "(length [8 5 0 0]) -> 4", "(length [6 4 6 3 1]) -> 5", "(length [3 4 3 3]) -> 4", "(length []) -> 0", "(length [1 6 2]) -> 3", "(length [5 3 6]) -> 3", "(length [1 7 9 7 1]) -> 5", "(length [9 9]) -> 2", "(length []) -> 0", "(length [6 1 1 9]) -> 4", "(length []) -> 0", "(length [8 2 6]) -> 3", "(length [2 8 4 4 9]) -> 5", "(length [5 5 8 1 1]) -> 5", "(length [0 1 5]) -> 3", "(length [5 1 7]) -> 3", "(length [8 1 2]) -> 3"], "time": 0.04354, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 8 1 7]) -> 4", "(length [3]) -> 1", "(length [7 5 0]) -> 3", "(length [3]) -> 1", "(length [8]) -> 1", "(length [7]) -> 1", "(length [2]) -> 1", "(length [5]) -> 1", "(length []) -> 0", "(length [5 1 9 8]) -> 4", "(length [1 0 2 6]) -> 4", "(length [5 2 6 6]) -> 4", "(length [1 8 7 0 2]) -> 5", "(length [0 3 5 2 2]) -> 5", "(length [9 2 3 3 1]) -> 5", "(length [0 2 5 6]) -> 4", "(length []) -> 0", "(length [8 5]) -> 2", "(length [6]) -> 1", "(length [2]) -> 1", "(length [2 8]) -> 2", "(length [0 7 4]) -> 3", "(length [4 7 8 7]) -> 4", "(length [0 7 4 0]) -> 4", "(length [1 2]) -> 2", "(length [0 7 5 1]) -> 4", "(length []) -> 0", "(length [8 2 3]) -> 3", "(length [6]) -> 1", "(length [9]) -> 1", "(length [6 5]) -> 2", "(length [4 6 5 5]) -> 4", "(length [5 1]) -> 2", "(length [8 6 1 6]) -> 4", "(length [1]) -> 1", "(length [9 9 0]) -> 3", "(length [8 6 5]) -> 3", "(length [3 2 2]) -> 3", "(length []) -> 0", "(length [4 6]) -> 2", "(length [3 3]) -> 2", "(length [6 5 4]) -> 3", "(length [2 2]) -> 2", "(length []) -> 0", "(length [7 9 3 4]) -> 4", "(length [9]) -> 1", "(length []) -> 0", "(length [1 0 5]) -> 3"], "time": 0.044468, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [1]) -> 1", "(length []) -> 0", "(length [9]) -> 1", "(length [4 8 3]) -> 3", "(length [5]) -> 1", "(length [9 8 2 4 4]) -> 5", "(length [3 6 2 0 9]) -> 5", "(length [2 5 7]) -> 3", "(length [3 2 4 9 7]) -> 5", "(length [6]) -> 1", "(length [7 1 9]) -> 3", "(length []) -> 0", "(length [2 3 0 4]) -> 4", "(length [3 9 5]) -> 3", "(length []) -> 0", "(length [8 6]) -> 2", "(length []) -> 0", "(length [5 0 2]) -> 3", "(length []) -> 0", "(length [1 3]) -> 2", "(length [9 9 1 3]) -> 4", "(length [6 6 7]) -> 3", "(length []) -> 0", "(length [7 6 9 0 2]) -> 5", "(length [0 7]) -> 2", "(length [9 8 6]) -> 3", "(length [9 2]) -> 2", "(length [8 2]) -> 2", "(length [1 0 6]) -> 3", "(length []) -> 0", "(length [3 1 2 7]) -> 4", "(length [0]) -> 1", "(length []) -> 0", "(length [7 5 7]) -> 3", "(length [5 1 2]) -> 3", "(length [3 0 5 8]) -> 4", "(length [1 8 1]) -> 3", "(length [9 6 1]) -> 3", "(length [1 1 3]) -> 3", "(length [2 7]) -> 2", "(length [6 2 2 7 9]) -> 5", "(length [7 7 5 0 0]) -> 5", "(length [1 0 4 5 5]) -> 5", "(length [4 8 9 2 8]) -> 5", "(length []) -> 0", "(length [6 5 7 6]) -> 4", "(length [8 7 3 9]) -> 4"], "time": 0.05643, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [1 1 5]) -> 3", "(length [8 7]) -> 2", "(length []) -> 0", "(length [3 0 4 9]) -> 4", "(length []) -> 0", "(length [4 1 7]) -> 3", "(length [0 9 2]) -> 3", "(length [3 7 4 6 1]) -> 5", "(length [2]) -> 1", "(length [9 1]) -> 2", "(length [7]) -> 1", "(length [2 2 3 8 6]) -> 5", "(length [3 7 1 3 4]) -> 5", "(length [5 9 2 4]) -> 4", "(length [1 9 3]) -> 3", "(length [6 9]) -> 2", "(length []) -> 0", "(length [7 1]) -> 2", "(length [8 7 2 0 5]) -> 5", "(length [0 7 6]) -> 3", "(length [6]) -> 1", "(length [2 1 0 2]) -> 4", "(length [3]) -> 1", "(length []) -> 0", "(length [4 6]) -> 2", "(length [6 8 6 6 6]) -> 5", "(length [6]) -> 1", "(length [1 4]) -> 2", "(length [2 2 6]) -> 3", "(length [7]) -> 1", "(length [7]) -> 1", "(length [4]) -> 1", "(length []) -> 0", "(length [2 0 9]) -> 3", "(length [1]) -> 1", "(length [6 5 0 2 6]) -> 5", "(length [6]) -> 1", "(length []) -> 0", "(length [4 5 1 7 1]) -> 5", "(length [3 3 7]) -> 3", "(length [4 3 5]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [3 8 2]) -> 3", "(length [5]) -> 1", "(length [0 4]) -> 2", "(length [3 0 1 7]) -> 4"], "time": 0.055544, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 2 2]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [3 9 8]) -> 3", "(length [0 5]) -> 2", "(length [5 6 0]) -> 3", "(length [7 5]) -> 2", "(length []) -> 0", "(length [0 3 2]) -> 3", "(length [2]) -> 1", "(length [2]) -> 1", "(length [0 4 6 0]) -> 4", "(length [1 7 6]) -> 3", "(length [8]) -> 1", "(length [5 2 0 8 5]) -> 5", "(length [9 1]) -> 2", "(length [8 9]) -> 2", "(length [2 9 4 9 9]) -> 5", "(length [2 0 0 2]) -> 4", "(length []) -> 0", "(length [9 0 3 7]) -> 4", "(length [7 9 8 4 6]) -> 5", "(length [5 0 8]) -> 3", "(length [3 9 5]) -> 3", "(length [2]) -> 1", "(length [2 8 3 5]) -> 4", "(length [6 2 8 5 4]) -> 5", "(length []) -> 0", "(length [1 0 0]) -> 3", "(length []) -> 0", "(length [1]) -> 1", "(length [1 4 8]) -> 3", "(length [5 4 6 4]) -> 4", "(length []) -> 0", "(length [1]) -> 1", "(length [0 2 0 1 6]) -> 5", "(length [2 4]) -> 2", "(length [6 2 8]) -> 3", "(length [5 0]) -> 2", "(length [3 8 4]) -> 3", "(length []) -> 0", "(length [8 9]) -> 2", "(length []) -> 0", "(length [2 7 9 3 4]) -> 5", "(length [0 2]) -> 2", "(length [4 5 2 1]) -> 4", "(length []) -> 0"], "time": 0.052135, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 8]) -> 2", "(length [7]) -> 1", "(length [8]) -> 1", "(length [5 6]) -> 2", "(length [5 1 5 5 8]) -> 5", "(length [1]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [1 3 7 0 7]) -> 5", "(length [8 6 1 6]) -> 4", "(length [5 9 6]) -> 3", "(length []) -> 0", "(length [6 1 5 8]) -> 4", "(length [7 3 1]) -> 3", "(length [6 7 7 0 8]) -> 5", "(length [5 5 1 0 7]) -> 5", "(length [4 5 4 7]) -> 4", "(length [2 9 1 1]) -> 4", "(length [9]) -> 1", "(length []) -> 0", "(length [1]) -> 1", "(length [3 2]) -> 2", "(length []) -> 0", "(length [6]) -> 1", "(length [5]) -> 1", "(length [7 1 4 4 7]) -> 5", "(length [6]) -> 1", "(length [4 8 1 8 3]) -> 5", "(length [3]) -> 1", "(length [7 2 9 2 8]) -> 5", "(length [6]) -> 1", "(length [9 2 2 3 7]) -> 5", "(length [5 6 4]) -> 3", "(length [9 6]) -> 2", "(length []) -> 0", "(length [3 0 1 2 3]) -> 5", "(length [6 2 0 3 6]) -> 5", "(length [1]) -> 1", "(length []) -> 0", "(length [6 7 1 3 8]) -> 5", "(length [6 7 9]) -> 3", "(length [3]) -> 1", "(length []) -> 0", "(length [3 1 4]) -> 3", "(length [4 7 2 2]) -> 4", "(length [3 0 9 7 3]) -> 5", "(length []) -> 0", "(length [1]) -> 1"], "time": 0.052318, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8]) -> 1", "(length []) -> 0", "(length [1 1 9 4 7]) -> 5", "(length [0 1]) -> 2", "(length [3 3 4]) -> 3", "(length [5 2]) -> 2", "(length [9 0 6]) -> 3", "(length []) -> 0", "(length [6 6 9 6]) -> 4", "(length [1 9 6 2 4]) -> 5", "(length []) -> 0", "(length [6 2 5 3 7]) -> 5", "(length []) -> 0", "(length [8 3 0 4]) -> 4", "(length [4 5 4 2 6]) -> 5", "(length [3 2]) -> 2", "(length [1 3 9]) -> 3", "(length []) -> 0", "(length [6 9 4 1 9]) -> 5", "(length [8 1 1 5]) -> 4", "(length [7 4 2]) -> 3", "(length [4 5 7 1 6]) -> 5", "(length [9 8]) -> 2", "(length [0 8 1]) -> 3", "(length [3 1 9]) -> 3", "(length [3 3 5]) -> 3", "(length [2]) -> 1", "(length [2]) -> 1", "(length [2 5]) -> 2", "(length [3 3]) -> 2", "(length [7 4 2 0 5]) -> 5", "(length [0 9]) -> 2", "(length [0 8 5 2]) -> 4", "(length [5 2 5 4]) -> 4", "(length [5 3]) -> 2", "(length [3 1]) -> 2", "(length [4 9 4 9 8]) -> 5", "(length [5 9 5]) -> 3", "(length [6 6 9 8]) -> 4", "(length []) -> 0", "(length [1 9]) -> 2", "(length []) -> 0", "(length [0]) -> 1", "(length [7 2 5]) -> 3", "(length [9 8 6]) -> 3", "(length [0 8]) -> 2", "(length []) -> 0", "(length [0 6 0 2]) -> 4"], "time": 0.053782, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3]) -> 1", "(length []) -> 0", "(length [3 4 1 5 1]) -> 5", "(length [2 4 2 3]) -> 4", "(length [2 9 3 8 8]) -> 5", "(length []) -> 0", "(length [7 1 3 6]) -> 4", "(length [0 1]) -> 2", "(length [8 3]) -> 2", "(length []) -> 0", "(length [8]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [3 3 0]) -> 3", "(length [1 0]) -> 2", "(length [8 7 3 5 3]) -> 5", "(length [5 5]) -> 2", "(length [7 4 1 2]) -> 4", "(length [2 6 2 3]) -> 4", "(length [5 7 2 9 3]) -> 5", "(length []) -> 0", "(length [0 3 1 5 1]) -> 5", "(length [8]) -> 1", "(length [0 3 2]) -> 3", "(length [0 5]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [5 0]) -> 2", "(length [6 0 0]) -> 3", "(length [7 5 9 5 3]) -> 5", "(length [3 5 9]) -> 3", "(length [3 4]) -> 2", "(length [5 4 3 3]) -> 4", "(length [2 5 5 7]) -> 4", "(length [9]) -> 1", "(length [9 4 4 4]) -> 4", "(length [7 4 5]) -> 3", "(length [6 2]) -> 2", "(length [8 8]) -> 2", "(length [0 4 7]) -> 3", "(length [3 4 0 0 9]) -> 5", "(length [4 3 7]) -> 3", "(length [9]) -> 1", "(length [7 1 1 1]) -> 4", "(length [8 0 3 3 1]) -> 5", "(length [6 2]) -> 2", "(length [6 0 0]) -> 3", "(length [1 7 1]) -> 3"], "time": 0.032968, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 5 7]) -> 3", "(length [4 3]) -> 2", "(length [0 1 1 8 8]) -> 5", "(length [0]) -> 1", "(length [6 7 6 0]) -> 4", "(length []) -> 0", "(length [6 7 8 9]) -> 4", "(length [1 7 2 3]) -> 4", "(length [6 3 1]) -> 3", "(length [5 7]) -> 2", "(length [3 2 1 8]) -> 4", "(length [2 1 1 2]) -> 4", "(length [6]) -> 1", "(length []) -> 0", "(length [3]) -> 1", "(length [1 3 7]) -> 3", "(length [9]) -> 1", "(length [1 8]) -> 2", "(length []) -> 0", "(length [2 5 8 4]) -> 4", "(length [7]) -> 1", "(length [5 6 8 7]) -> 4", "(length [4]) -> 1", "(length [8]) -> 1", "(length [6]) -> 1", "(length []) -> 0", "(length [5 0 0 0]) -> 4", "(length [5 6 8 0]) -> 4", "(length []) -> 0", "(length [2]) -> 1", "(length [2]) -> 1", "(length [0 5 7 8 9]) -> 5", "(length [8 3 2 4]) -> 4", "(length [8 9 7 3 7]) -> 5", "(length [2 4 2]) -> 3", "(length [7 9 0 0]) -> 4", "(length [0 2]) -> 2", "(length [8 9]) -> 2", "(length [9 8]) -> 2", "(length [5]) -> 1", "(length []) -> 0", "(length [6 8 4]) -> 3", "(length []) -> 0", "(length [4 4 9 9 2]) -> 5", "(length [5 3 4]) -> 3", "(length [3 3 5 5]) -> 4", "(length [8 8 5 2]) -> 4", "(length [9 2]) -> 2"], "time": 0.055783, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1 2]) -> 2", "(length []) -> 0", "(length [8]) -> 1", "(length [7 0]) -> 2", "(length [4 6 9 2 1]) -> 5", "(length [8 5 7]) -> 3", "(length [0]) -> 1", "(length [8 8 4]) -> 3", "(length [4 1 7 8]) -> 4", "(length [4 6]) -> 2", "(length [9 1 8 8]) -> 4", "(length [5]) -> 1", "(length [4 6 6]) -> 3", "(length [8 6 8 1 7]) -> 5", "(length [6 6 9 1]) -> 4", "(length [4]) -> 1", "(length []) -> 0", "(length [8 4 2]) -> 3", "(length [2 6 1]) -> 3", "(length [7 5 6]) -> 3", "(length []) -> 0", "(length [4 5 0 4 0]) -> 5", "(length [5 1 6 8 7]) -> 5", "(length [4 1]) -> 2", "(length [4 1]) -> 2", "(length [5 2]) -> 2", "(length [5 0 1 9]) -> 4", "(length [0 4 0 6 9]) -> 5", "(length [4 0 7 7 3]) -> 5", "(length [4 0 6 4]) -> 4", "(length [4 5 1 5]) -> 4", "(length [4 0 6 5 1]) -> 5", "(length [3 6 6]) -> 3", "(length [1 9 5 9 2]) -> 5", "(length [4 7 4 8 1]) -> 5", "(length [4 1 7 1]) -> 4", "(length [1 3 0]) -> 3", "(length [0 1 3 7 1]) -> 5", "(length [5 0]) -> 2", "(length [4]) -> 1", "(length [6 7 9 5 0]) -> 5", "(length [8 3 6]) -> 3", "(length [5 1]) -> 2", "(length [1 0]) -> 2", "(length [1 4 9 7 6]) -> 5", "(length []) -> 0", "(length [7]) -> 1", "(length [5]) -> 1"], "time": 0.058073, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 5 0 3 0]) -> 5", "(length [7 3 6 6]) -> 4", "(length [3 5]) -> 2", "(length [8 0]) -> 2", "(length [8 0]) -> 2", "(length [7 2 1 3 2]) -> 5", "(length [1 2 5 3]) -> 4", "(length []) -> 0", "(length [0 2]) -> 2", "(length [2 3 1 0]) -> 4", "(length [0 2]) -> 2", "(length [1 3 4]) -> 3", "(length [5 0]) -> 2", "(length [5 2 6 9 4]) -> 5", "(length [4]) -> 1", "(length [9 6 5 0]) -> 4", "(length [0 2]) -> 2", "(length [0 6 9 3 8]) -> 5", "(length [8]) -> 1", "(length [0]) -> 1", "(length [4 7 2]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [7 1 6 4 0]) -> 5", "(length []) -> 0", "(length [1 6 2]) -> 3", "(length [8 7]) -> 2", "(length [6 1 9 9]) -> 4", "(length [2 0]) -> 2", "(length []) -> 0", "(length [7 8 1 6]) -> 4", "(length [0 6 2]) -> 3", "(length [9]) -> 1", "(length [7 6 1]) -> 3", "(length [5 1 4]) -> 3", "(length [1 6 6 7]) -> 4", "(length [1 8 6 3 2]) -> 5", "(length [4 0]) -> 2", "(length [8 2 6]) -> 3", "(length [2]) -> 1", "(length [6 6]) -> 2", "(length [7]) -> 1", "(length [0 3 0 8]) -> 4", "(length [0 5 5]) -> 3", "(length [6]) -> 1", "(length [4]) -> 1", "(length [9 7]) -> 2"], "time": 0.038133, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 7 9]) -> 3", "(length [3]) -> 1", "(length [0]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [1 0 3 5 5]) -> 5", "(length [3 1]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [8 9]) -> 2", "(length []) -> 0", "(length [0 2 6 7]) -> 4", "(length [1 0 6]) -> 3", "(length []) -> 0", "(length [4]) -> 1", "(length []) -> 0", "(length [5 5 0 1]) -> 4", "(length [9 7]) -> 2", "(length [9 4]) -> 2", "(length [7 0]) -> 2", "(length [7 9 0 3 2]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [7 3 0]) -> 3", "(length [0 1 4]) -> 3", "(length [4 8 4]) -> 3", "(length [0 3 9 3 2]) -> 5", "(length [8 6]) -> 2", "(length [2 7 3 4 8]) -> 5", "(length []) -> 0", "(length [9 7 8]) -> 3", "(length [5 7 5 1 4]) -> 5", "(length [1 6]) -> 2", "(length [8 9 4]) -> 3", "(length [0 9 5 0 9]) -> 5", "(length [4 8 0]) -> 3", "(length [0 9 3 0 5]) -> 5", "(length [5 0 4 1 9]) -> 5", "(length [7]) -> 1", "(length []) -> 0", "(length [6 5 4 1]) -> 4", "(length [5 2]) -> 2", "(length [7 8]) -> 2", "(length [5 5 2 0]) -> 4", "(length [3 5 7 6]) -> 4", "(length [1]) -> 1", "(length [5 8 7 2 7]) -> 5", "(length [6 0 5]) -> 3"], "time": 0.03363, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 0]) -> 2", "(length [5 6 2]) -> 3", "(length [0 5 6 0 8]) -> 5", "(length [2 2 9 4 3]) -> 5", "(length [7 7 7 6]) -> 4", "(length [1 6 6 0]) -> 4", "(length []) -> 0", "(length [8 4 3 2]) -> 4", "(length [7 7 7]) -> 3", "(length [4]) -> 1", "(length []) -> 0", "(length [7 9 7]) -> 3", "(length [7 0]) -> 2", "(length [6 1 1 0 5]) -> 5", "(length [7 1 7]) -> 3", "(length [3 7 7 4 7]) -> 5", "(length []) -> 0", "(length [2 4 1 8]) -> 4", "(length [3 3 9]) -> 3", "(length [2]) -> 1", "(length [7 2]) -> 2", "(length [3 9 9 5 9]) -> 5", "(length [0 9 8]) -> 3", "(length [7 8 5 2 5]) -> 5", "(length [6 4]) -> 2", "(length [7 5]) -> 2", "(length [6 6 6 7 7]) -> 5", "(length [4]) -> 1", "(length [4 7]) -> 2", "(length [0 0]) -> 2", "(length []) -> 0", "(length [8]) -> 1", "(length [7 9]) -> 2", "(length [5 5]) -> 2", "(length [8]) -> 1", "(length [9 4 0 5 7]) -> 5", "(length [9 7 0]) -> 3", "(length [8 3 1 4]) -> 4", "(length [3 8 6 1]) -> 4", "(length [8 3]) -> 2", "(length [3 1]) -> 2", "(length [6 9 1]) -> 3", "(length [3 6 7 4]) -> 4", "(length [3]) -> 1", "(length [6 8 1 1 4]) -> 5", "(length [5 1 5 9]) -> 4", "(length [5 8]) -> 2", "(length [6]) -> 1"], "time": 0.033652, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [9 1 2 8]) -> 4", "(length [1 9 4 2 7]) -> 5", "(length [1 2 4 2 0]) -> 5", "(length []) -> 0", "(length [9 0]) -> 2", "(length []) -> 0", "(length [2 0 2]) -> 3", "(length [2]) -> 1", "(length [9 8 6 3]) -> 4", "(length [7 4 6 8]) -> 4", "(length [4 1]) -> 2", "(length []) -> 0", "(length [5 3 4 8]) -> 4", "(length [8 6 9 2]) -> 4", "(length []) -> 0", "(length [7 4 8 9]) -> 4", "(length []) -> 0", "(length [4]) -> 1", "(length [6]) -> 1", "(length [5 1 8 0 4]) -> 5", "(length []) -> 0", "(length [6 1 0 6]) -> 4", "(length [9]) -> 1", "(length [3 0]) -> 2", "(length []) -> 0", "(length [3 0]) -> 2", "(length [0 9 2 0]) -> 4", "(length [7 7 6 2]) -> 4", "(length [5 6]) -> 2", "(length [1 6]) -> 2", "(length [3 5 4 1]) -> 4", "(length [8 5 6 6]) -> 4", "(length [6 9 0]) -> 3", "(length [9 0 7]) -> 3", "(length [0]) -> 1", "(length [0 2 6 2 5]) -> 5", "(length [8 5 6]) -> 3", "(length [6]) -> 1", "(length []) -> 0", "(length [1 1 5 9 9]) -> 5", "(length [6 0 5 3 7]) -> 5", "(length [8 3 1]) -> 3", "(length [5 2]) -> 2", "(length []) -> 0", "(length [7 0 8 4]) -> 4", "(length [7]) -> 1", "(length []) -> 0"], "time": 0.04704, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1]) -> 1", "(length [3 7 4 9]) -> 4", "(length [3 1 7 5 4]) -> 5", "(length [4 2 4 0]) -> 4", "(length [8 5]) -> 2", "(length [3 3 8]) -> 3", "(length [0 7 2 0]) -> 4", "(length [0 2 9 3]) -> 4", "(length [4]) -> 1", "(length [2 9 8]) -> 3", "(length [7 8 4]) -> 3", "(length [9 3]) -> 2", "(length [9 8]) -> 2", "(length [4 1 9 0 6]) -> 5", "(length []) -> 0", "(length [6 4 6]) -> 3", "(length [4 0 3 2 2]) -> 5", "(length [2 5 8]) -> 3", "(length []) -> 0", "(length [4 6 8 4 8]) -> 5", "(length []) -> 0", "(length [4 5 7 0]) -> 4", "(length []) -> 0", "(length [2 8 4]) -> 3", "(length [9]) -> 1", "(length [2 9]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [7 3 8 3]) -> 4", "(length []) -> 0", "(length [8 3]) -> 2", "(length [1 2 7 6 4]) -> 5", "(length [7 0 1 2]) -> 4", "(length [8 1 3]) -> 3", "(length [6 2 1]) -> 3", "(length [2 3 0 1]) -> 4", "(length [2 7 9]) -> 3", "(length [2 5]) -> 2", "(length [1 1 8 3]) -> 4", "(length [6 5 3 3]) -> 4", "(length [3 1]) -> 2", "(length []) -> 0", "(length [8 5 2 4]) -> 4", "(length []) -> 0", "(length [2 9 5]) -> 3", "(length [5 1 4 3 3]) -> 5", "(length [0 0 3]) -> 3", "(length [7 8 8]) -> 3"], "time": 0.048919, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8 2 1 2]) -> 4", "(length [0]) -> 1", "(length [0 4]) -> 2", "(length [4]) -> 1", "(length [6 4 2 6]) -> 4", "(length [8 4]) -> 2", "(length []) -> 0", "(length [9 3]) -> 2", "(length [7 0 5 8 5]) -> 5", "(length [6 7 6 0]) -> 4", "(length [2 7 6 2 0]) -> 5", "(length []) -> 0", "(length [9 0 2 7 7]) -> 5", "(length [8 0 4]) -> 3", "(length [9 4 4 5]) -> 4", "(length []) -> 0", "(length [1 5 9 4]) -> 4", "(length []) -> 0", "(length [1]) -> 1", "(length [7 2]) -> 2", "(length [1 2 7 1 8]) -> 5", "(length [2 0 8]) -> 3", "(length [4 4 2]) -> 3", "(length [6 3 3 7]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length [2 3]) -> 2", "(length [9 4 1 1]) -> 4", "(length [0 2 8]) -> 3", "(length [6]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [1 1 5]) -> 3", "(length [3 8 6 8]) -> 4", "(length []) -> 0", "(length [4 1 1 1 1]) -> 5", "(length [6 0 8 4]) -> 4", "(length [5 0 1]) -> 3", "(length [2 0 5]) -> 3", "(length [7 3 8]) -> 3", "(length [4 1 3 0]) -> 4", "(length [7 2]) -> 2", "(length []) -> 0", "(length [3 3]) -> 2", "(length [2]) -> 1", "(length [4 0]) -> 2", "(length [3 8 9 0]) -> 4", "(length [7 1 3 5]) -> 4"], "time": 0.036355, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1]) -> 1", "(length []) -> 0", "(length [8 1 9]) -> 3", "(length []) -> 0", "(length [3]) -> 1", "(length [6]) -> 1", "(length [4 1 4]) -> 3", "(length [5 4 5]) -> 3", "(length [2 5 2 6 7]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [0 6 7]) -> 3", "(length [0 0 9]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [2]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [0]) -> 1", "(length [5 8 1]) -> 3", "(length [0]) -> 1", "(length [9 7 4 6]) -> 4", "(length [5 3 3 6 6]) -> 5", "(length [4 9 7 7]) -> 4", "(length [5 4 6]) -> 3", "(length [7 2 2]) -> 3", "(length [0 9 0 4]) -> 4", "(length [9]) -> 1", "(length [0 7 3 3]) -> 4", "(length [0]) -> 1", "(length [0 5]) -> 2", "(length [7]) -> 1", "(length []) -> 0", "(length [2 7 2]) -> 3", "(length [6 3 3 3 8]) -> 5", "(length [4 0]) -> 2", "(length [3 2]) -> 2", "(length [9 9 0 2]) -> 4", "(length [8 8 0 2 0]) -> 5", "(length [6 4 1 1]) -> 4", "(length [6 9]) -> 2", "(length [6 3]) -> 2", "(length [2 1 1]) -> 3", "(length [8 5 0 3]) -> 4", "(length [9 5 6]) -> 3", "(length [7 4 7]) -> 3", "(length []) -> 0", "(length [7 7 7 7 5]) -> 5"], "time": 0.041418, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [4 6 1]) -> 3", "(length [1 8 8 4]) -> 4", "(length [9 9 2 7]) -> 4", "(length []) -> 0", "(length [8 5 5]) -> 3", "(length [3 3 5 8]) -> 4", "(length []) -> 0", "(length [0 9]) -> 2", "(length [2 4 4 6]) -> 4", "(length [4]) -> 1", "(length [9 3 4 3]) -> 4", "(length [4]) -> 1", "(length [9 9 7]) -> 3", "(length [8 1 7 8]) -> 4", "(length [8]) -> 1", "(length []) -> 0", "(length [3 9]) -> 2", "(length [4 1 0 0]) -> 4", "(length [1 8 5]) -> 3", "(length []) -> 0", "(length [2 8 6]) -> 3", "(length [6 3]) -> 2", "(length [3 8]) -> 2", "(length [0 0 5 3 5]) -> 5", "(length [0 2]) -> 2", "(length [2 9 7 5 2]) -> 5", "(length [0 6]) -> 2", "(length [3 1 8 0]) -> 4", "(length []) -> 0", "(length [1 3 6 7]) -> 4", "(length [4 0 5 6]) -> 4", "(length [3 9 9]) -> 3", "(length [7 7 2 1]) -> 4", "(length [1 8]) -> 2", "(length [7 6]) -> 2", "(length []) -> 0", "(length [4 8]) -> 2", "(length [4 9 4 1 3]) -> 5", "(length [2 6]) -> 2", "(length [8 4 3 1 0]) -> 5", "(length [0 3 3 3]) -> 4", "(length []) -> 0", "(length [0]) -> 1", "(length [2 2 2 8]) -> 4", "(length [6]) -> 1", "(length [0 9]) -> 2", "(length [9 6]) -> 2"], "time": 0.033546, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 1]) -> 2", "(length [7 9 7 3 4]) -> 5", "(length [3]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [1]) -> 1", "(length []) -> 0", "(length [6 0 7]) -> 3", "(length [7 3 4 7 6]) -> 5", "(length []) -> 0", "(length [7 7 1 6]) -> 4", "(length [8 6 9]) -> 3", "(length [4]) -> 1", "(length [6 6 4 7 7]) -> 5", "(length [1 9 1 7 9]) -> 5", "(length [8 0 3 3]) -> 4", "(length [1]) -> 1", "(length [7 0 2 1]) -> 4", "(length [2 8 8 0 7]) -> 5", "(length [6 9 2]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [8 6 4]) -> 3", "(length [6 7 4 9]) -> 4", "(length [6 6 0 7 0]) -> 5", "(length [6 8 7 0 0]) -> 5", "(length [2 6 9]) -> 3", "(length [1 4]) -> 2", "(length [1]) -> 1", "(length [6 6 3 0 9]) -> 5", "(length []) -> 0", "(length [0 8 5 9 6]) -> 5", "(length [0 1 5]) -> 3", "(length [3 2 8 1]) -> 4", "(length [3 2 8]) -> 3", "(length []) -> 0", "(length [1 7 4]) -> 3", "(length [1 3 7]) -> 3", "(length [7 9 9 6 0]) -> 5", "(length [6]) -> 1", "(length [2 1 7]) -> 3", "(length [6 0]) -> 2", "(length [3 1 5 6 2]) -> 5", "(length [3 2 3]) -> 3", "(length [5 5 1 4 3]) -> 5", "(length [9 5]) -> 2", "(length [3 6 9 3]) -> 4", "(length [8 5]) -> 2"], "time": 0.049907, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 5 7]) -> 3", "(length [3]) -> 1", "(length [8]) -> 1", "(length []) -> 0", "(length [7 8 1]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [9]) -> 1", "(length []) -> 0", "(length [8]) -> 1", "(length [0 0 3 0 4]) -> 5", "(length [4 9]) -> 2", "(length [3 1 6 2 2]) -> 5", "(length [4 1 1]) -> 3", "(length [0 4 0 8 5]) -> 5", "(length [4 9]) -> 2", "(length [2 3]) -> 2", "(length [4 7]) -> 2", "(length [2]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [6 8]) -> 2", "(length [6 8 6 8]) -> 4", "(length [8 6 7]) -> 3", "(length [6 5 9 8]) -> 4", "(length [0 1]) -> 2", "(length []) -> 0", "(length [1 0 8]) -> 3", "(length [2 8 6 1 7]) -> 5", "(length []) -> 0", "(length [0 0 3 1 5]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [6 1 2 2 0]) -> 5", "(length []) -> 0", "(length [9 1]) -> 2", "(length [8 6 6]) -> 3", "(length []) -> 0", "(length [9]) -> 1", "(length [1 8]) -> 2", "(length [6]) -> 1", "(length [6 8 6]) -> 3", "(length [0 5]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [7 4 7]) -> 3", "(length [7 3 1]) -> 3", "(length [1 0 6 2 9]) -> 5"], "time": 0.044024, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [2 0 3 5 8]) -> 5", "(length [7]) -> 1", "(length [6 5 7]) -> 3", "(length [2]) -> 1", "(length [3 2]) -> 2", "(length [0 4 9]) -> 3", "(length []) -> 0", "(length [9 4 4 7 6]) -> 5", "(length [8]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [6 5 0 1]) -> 4", "(length [2 2 2 5]) -> 4", "(length [1]) -> 1", "(length [6]) -> 1", "(length []) -> 0", "(length [6 2]) -> 2", "(length [1 8 8]) -> 3", "(length [6 1]) -> 2", "(length [7 0 6 5 1]) -> 5", "(length [4 9 5 1]) -> 4", "(length [0 0]) -> 2", "(length [5 7 9 5 2]) -> 5", "(length [4]) -> 1", "(length [1 9 6 9]) -> 4", "(length []) -> 0", "(length [2 1]) -> 2", "(length [5 9 5]) -> 3", "(length [4 0 8 3 9]) -> 5", "(length [4 2]) -> 2", "(length [4 1 8]) -> 3", "(length [9 8 0 8 6]) -> 5", "(length []) -> 0", "(length [7 8 0]) -> 3", "(length [1 1 9]) -> 3", "(length [4 2 1 5]) -> 4", "(length []) -> 0", "(length [9 8 5]) -> 3", "(length [3 6 2 4 9]) -> 5", "(length [0 4]) -> 2", "(length [2 7 8 5]) -> 4", "(length [2 5 4]) -> 3", "(length [3]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [8 3 0 8 2]) -> 5"], "time": 0.055841, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7 0 8 4]) -> 4", "(length [4 1 7]) -> 3", "(length [9]) -> 1", "(length [6 6 1 4]) -> 4", "(length []) -> 0", "(length [5]) -> 1", "(length [8 2 0 6]) -> 4", "(length [4 2 3 1]) -> 4", "(length [1]) -> 1", "(length [4 2 8]) -> 3", "(length [6 9 7 1]) -> 4", "(length []) -> 0", "(length [9 0]) -> 2", "(length [6 0 8]) -> 3", "(length [2 7 5]) -> 3", "(length [0 6 7]) -> 3", "(length [7 9]) -> 2", "(length [9 8]) -> 2", "(length [0 6 7 2 0]) -> 5", "(length [8]) -> 1", "(length [2 8 1]) -> 3", "(length []) -> 0", "(length [7 9]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [3 4 3 5 3]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [8 3 5 0 6]) -> 5", "(length [4 5 2]) -> 3", "(length [9 8 8 4]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length [9 6 4]) -> 3", "(length [6 2 9 1]) -> 4", "(length [7 2 8 7]) -> 4", "(length [7 9 0 7]) -> 4", "(length [6 9 8 0]) -> 4", "(length [6 2 1]) -> 3", "(length []) -> 0", "(length [7 3]) -> 2", "(length [3 5 1]) -> 3", "(length [6 5]) -> 2", "(length []) -> 0", "(length [2 0 1 8]) -> 4", "(length []) -> 0", "(length [3]) -> 1"], "time": 0.039164, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1 6 7 3]) -> 4", "(length [3 2]) -> 2", "(length [6 9]) -> 2", "(length []) -> 0", "(length [9 3 9 8 9]) -> 5", "(length []) -> 0", "(length [3 7]) -> 2", "(length [8 9]) -> 2", "(length [7 4]) -> 2", "(length [7 6]) -> 2", "(length [3 5 8 5 1]) -> 5", "(length [8]) -> 1", "(length [8 1 5]) -> 3", "(length [3 8 6 7 9]) -> 5", "(length [0 9 9 0 3]) -> 5", "(length [3 1 2 1]) -> 4", "(length [4 6 7]) -> 3", "(length [4]) -> 1", "(length [6]) -> 1", "(length [0 7]) -> 2", "(length [6]) -> 1", "(length [8 0]) -> 2", "(length [5 7]) -> 2", "(length [7]) -> 1", "(length [0 1]) -> 2", "(length [2 5 8 2]) -> 4", "(length [4]) -> 1", "(length []) -> 0", "(length [3 1 0 2 9]) -> 5", "(length [8]) -> 1", "(length [9 5 3]) -> 3", "(length [6 0 5 8 2]) -> 5", "(length [6 8 3]) -> 3", "(length [4 0 4 5 3]) -> 5", "(length []) -> 0", "(length [3 5]) -> 2", "(length [4 6 3 4]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [7]) -> 1", "(length []) -> 0", "(length [7]) -> 1", "(length []) -> 0", "(length [9 3 6]) -> 3", "(length [6]) -> 1", "(length [9 6 5 1 1]) -> 5", "(length [3 8 7 5 1]) -> 5"], "time": 0.059529, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0]) -> 1", "(length [5 5 3 0 9]) -> 5", "(length [7 2]) -> 2", "(length [6 6 6 7 3]) -> 5", "(length [3 3 1]) -> 3", "(length [7 7 9]) -> 3", "(length [2 8]) -> 2", "(length [2 0 8 5 5]) -> 5", "(length [7 0 6 5]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [5 3 9 1 9]) -> 5", "(length [5]) -> 1", "(length [0 6 8 0 2]) -> 5", "(length [2]) -> 1", "(length [0]) -> 1", "(length [9 7 5 9 0]) -> 5", "(length [6 7 9 4 1]) -> 5", "(length [5 5 4]) -> 3", "(length []) -> 0", "(length [7]) -> 1", "(length [3 5 5 5]) -> 4", "(length [1 2 2 3]) -> 4", "(length [9 1 1 7 9]) -> 5", "(length [7 4 1 0]) -> 4", "(length [9 4]) -> 2", "(length [0]) -> 1", "(length [8 6]) -> 2", "(length [4 8 6]) -> 3", "(length [1 6]) -> 2", "(length [5 2]) -> 2", "(length [9 1 8 6]) -> 4", "(length [2 8 4 0 8]) -> 5", "(length [4 1 7]) -> 3", "(length [6 5 7]) -> 3", "(length [2 9 4 0]) -> 4", "(length [6 8]) -> 2", "(length [9 6]) -> 2", "(length [0]) -> 1", "(length [3 0 2 7]) -> 4", "(length [4 0 9 4 9]) -> 5", "(length []) -> 0", "(length [0 7]) -> 2", "(length [1 2 2 5 5]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0"], "time": 0.044305, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6 9]) -> 2", "(length [0 2 3]) -> 3", "(length [5 0 3 9]) -> 4", "(length [4 9]) -> 2", "(length [0 7]) -> 2", "(length [9 6 6]) -> 3", "(length [6 4 3 4 4]) -> 5", "(length [4 6]) -> 2", "(length [6 0 9]) -> 3", "(length [5 0 2 4]) -> 4", "(length [9]) -> 1", "(length [5 5 1]) -> 3", "(length [9 3 0]) -> 3", "(length [3 1 9 0 4]) -> 5", "(length [7 3 6]) -> 3", "(length [2 6 7 4]) -> 4", "(length [7 2 7 1]) -> 4", "(length []) -> 0", "(length [3 0]) -> 2", "(length []) -> 0", "(length [6 5 9 9]) -> 4", "(length [2 1 8 1 9]) -> 5", "(length [0 3]) -> 2", "(length [5 7 0 4 2]) -> 5", "(length [8 3]) -> 2", "(length [3 0]) -> 2", "(length [5 9 3 0]) -> 4", "(length [1 6 0 2]) -> 4", "(length []) -> 0", "(length [3 0 5 9 7]) -> 5", "(length [4 0 7 7]) -> 4", "(length []) -> 0", "(length [3 1 3 0 1]) -> 5", "(length [0 8 9 9]) -> 4", "(length [7]) -> 1", "(length [6]) -> 1", "(length [5 9]) -> 2", "(length [0 4]) -> 2", "(length []) -> 0", "(length [4 3]) -> 2", "(length [6 4 1 0]) -> 4", "(length [9 4]) -> 2", "(length [7 2 7 5 6]) -> 5", "(length [2]) -> 1", "(length [9 5]) -> 2", "(length []) -> 0", "(length [8]) -> 1", "(length [2 5 1 8 0]) -> 5"], "time": 0.057649, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 0 0]) -> 3", "(length [2]) -> 1", "(length [7 7 4]) -> 3", "(length [5 5 0 5]) -> 4", "(length [1 7]) -> 2", "(length [3 2 5]) -> 3", "(length [8]) -> 1", "(length [1 3 7 8]) -> 4", "(length [3 7 5 9]) -> 4", "(length [0 3]) -> 2", "(length [8 6 3 3]) -> 4", "(length [9 7]) -> 2", "(length [0]) -> 1", "(length [8 3 0 9]) -> 4", "(length [0 4 7 1]) -> 4", "(length [7 7 3]) -> 3", "(length [5 7]) -> 2", "(length [6 6 9 1 4]) -> 5", "(length []) -> 0", "(length [8]) -> 1", "(length [3 3 5 5 5]) -> 5", "(length [9 7 4]) -> 3", "(length []) -> 0", "(length [8 2 2 3 4]) -> 5", "(length [6 0 8 5 0]) -> 5", "(length []) -> 0", "(length [4 7 5]) -> 3", "(length [0 4 7 7]) -> 4", "(length []) -> 0", "(length [1 9 1 6 6]) -> 5", "(length [8 9 4]) -> 3", "(length [1 6 5 3 3]) -> 5", "(length []) -> 0", "(length [5 1 2 9]) -> 4", "(length [1 1 0 6]) -> 4", "(length [9 6 1]) -> 3", "(length [9 3 4]) -> 3", "(length [8 4 7 5 7]) -> 5", "(length [6 4 1 6]) -> 4", "(length []) -> 0", "(length [2 2 0 4 3]) -> 5", "(length [8 2 5 8]) -> 4", "(length [8 4 0]) -> 3", "(length [5 8 3 4 5]) -> 5", "(length [0 7 7 3 5]) -> 5", "(length [6]) -> 1", "(length [6 3]) -> 2", "(length [5]) -> 1"], "time": 0.033165, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5]) -> 1", "(length []) -> 0", "(length [7 0 7 6]) -> 4", "(length [1 7 6 8 9]) -> 5", "(length []) -> 0", "(length [6 6]) -> 2", "(length [0]) -> 1", "(length [4 2 1 8 8]) -> 5", "(length [7 3 1]) -> 3", "(length [0 6 6]) -> 3", "(length [0 3 8]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [6 7 8]) -> 3", "(length [7 1]) -> 2", "(length []) -> 0", "(length [7 0 1]) -> 3", "(length [0 5 2 9]) -> 4", "(length [6 2 3 0]) -> 4", "(length [9 3 3]) -> 3", "(length [2 8 7 8]) -> 4", "(length [0 0 6]) -> 3", "(length [9 4 1]) -> 3", "(length [8 3]) -> 2", "(length [3 8 9]) -> 3", "(length [5 3]) -> 2", "(length [5 0 9 3 7]) -> 5", "(length [0 4 7 4]) -> 4", "(length [0 4 3 5 7]) -> 5", "(length [4 5]) -> 2", "(length [7 8 1 5 2]) -> 5", "(length [3 4 6 1]) -> 4", "(length [7 8 0 5]) -> 4", "(length [3 9 7 1]) -> 4", "(length [6 1]) -> 2", "(length [7 5 6 3 7]) -> 5", "(length [3 2 8]) -> 3", "(length [2 4 4]) -> 3", "(length [2]) -> 1", "(length [1]) -> 1", "(length [0 3 2]) -> 3", "(length [3 7]) -> 2", "(length [1 9 4 3 9]) -> 5", "(length [0 4 0 4 9]) -> 5", "(length [3 9 4 0]) -> 4", "(length []) -> 0", "(length [9]) -> 1", "(length [0 4]) -> 2"], "time": 0.043576, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [8]) -> 1", "(length [7 2]) -> 2", "(length [1 8 6 7]) -> 4", "(length [3 0 1 4]) -> 4", "(length [3 1 2]) -> 3", "(length [2 2 9 3]) -> 4", "(length [0]) -> 1", "(length [8 1 3]) -> 3", "(length [3 7 8]) -> 3", "(length [3 2]) -> 2", "(length [3 3 5 2]) -> 4", "(length [5 5 0 8 4]) -> 5", "(length [0 7 5 2 8]) -> 5", "(length [8 6]) -> 2", "(length [0]) -> 1", "(length [0 2]) -> 2", "(length []) -> 0", "(length [5 4 1 0]) -> 4", "(length [6]) -> 1", "(length [3 1 8 3 4]) -> 5", "(length [4 3]) -> 2", "(length [2 0 6]) -> 3", "(length [4]) -> 1", "(length [1 0 7 1]) -> 4", "(length []) -> 0", "(length [8]) -> 1", "(length [1 1 0 1]) -> 4", "(length [1 9 3 5]) -> 4", "(length []) -> 0", "(length [8]) -> 1", "(length [5 8 8 1]) -> 4", "(length [7 7]) -> 2", "(length [2 1 1]) -> 3", "(length [9]) -> 1", "(length [1 0]) -> 2", "(length [4 3 2 6]) -> 4", "(length [1 2 7 5 9]) -> 5", "(length [5]) -> 1", "(length [7 8 2 2]) -> 4", "(length [6 3 1 9]) -> 4", "(length [7 5 7 3 9]) -> 5", "(length [4 1 0 7 6]) -> 5", "(length [3 7 2 6]) -> 4", "(length [4 6 5 1]) -> 4", "(length [3 9]) -> 2", "(length [0]) -> 1", "(length [0 6]) -> 2"], "time": 0.053869, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [7 9 6 2]) -> 4", "(length [5 2 1]) -> 3", "(length [1 3]) -> 2", "(length [5 6 3 5 1]) -> 5", "(length []) -> 0", "(length [7 1 5]) -> 3", "(length []) -> 0", "(length [2 2 2]) -> 3", "(length []) -> 0", "(length [6 0 6 0 7]) -> 5", "(length []) -> 0", "(length [8]) -> 1", "(length [9]) -> 1", "(length [9 6 2 9]) -> 4", "(length [9 5]) -> 2", "(length [4]) -> 1", "(length [8 4 7 7 6]) -> 5", "(length [3 0 2]) -> 3", "(length [3]) -> 1", "(length [2]) -> 1", "(length [6]) -> 1", "(length [7 0 1 9]) -> 4", "(length [9 2 4 9 4]) -> 5", "(length [3 7 0 5]) -> 4", "(length []) -> 0", "(length [0 5 0 2 8]) -> 5", "(length [7 4]) -> 2", "(length [0 9 2 4 9]) -> 5", "(length [1 3 9 1 6]) -> 5", "(length [0]) -> 1", "(length []) -> 0", "(length [1 1]) -> 2", "(length [1 6 9]) -> 3", "(length []) -> 0", "(length [2 5]) -> 2", "(length []) -> 0", "(length [6]) -> 1", "(length []) -> 0", "(length [9 5 4 7 6]) -> 5", "(length [6 5 1 5]) -> 4", "(length [4]) -> 1", "(length [7 9 3]) -> 3", "(length [9]) -> 1", "(length [2]) -> 1", "(length [1 7 7 5]) -> 4", "(length [3 3]) -> 2", "(length [4]) -> 1"], "time": 0.054277, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4]) -> 1", "(length [4 9 3 6 1]) -> 5", "(length [5 6 1 9 3]) -> 5", "(length [6 9 8]) -> 3", "(length [7 7 9 1]) -> 4", "(length [2 9 5 2 0]) -> 5", "(length [4 8]) -> 2", "(length [2 8 1]) -> 3", "(length [5 4 8 9 2]) -> 5", "(length [2 2 6]) -> 3", "(length [8 9 1 7]) -> 4", "(length [4 7 7 2]) -> 4", "(length [5 3 1]) -> 3", "(length []) -> 0", "(length [7 5 7]) -> 3", "(length [2 8 5 0 5]) -> 5", "(length [1 1]) -> 2", "(length [1 5]) -> 2", "(length []) -> 0", "(length [3 0 8]) -> 3", "(length [0 2 5]) -> 3", "(length [1 0 4]) -> 3", "(length []) -> 0", "(length [0]) -> 1", "(length [4 5 8 3 1]) -> 5", "(length [9 1 3 5]) -> 4", "(length [8 1 7 1]) -> 4", "(length [0 2 6 0 9]) -> 5", "(length [4 5 8 9]) -> 4", "(length [1 2 7 1 5]) -> 5", "(length [3 1 3 7 2]) -> 5", "(length [9 9 7 4 6]) -> 5", "(length [9 2 9 0 3]) -> 5", "(length [0 1]) -> 2", "(length [7 8 3 9 6]) -> 5", "(length [2 3]) -> 2", "(length [9 9]) -> 2", "(length [4 8]) -> 2", "(length []) -> 0", "(length [9 2]) -> 2", "(length []) -> 0", "(length [8 3 5 2]) -> 4", "(length [4]) -> 1", "(length [5]) -> 1", "(length []) -> 0", "(length [2 9 6]) -> 3", "(length []) -> 0", "(length [4]) -> 1"], "time": 0.034, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [4 5 0 4 7]) -> 5", "(length [0 0]) -> 2", "(length [5 9 1 6 0]) -> 5", "(length [4 4 5 5 0]) -> 5", "(length [2 1 9]) -> 3", "(length [1 1 1]) -> 3", "(length [5 6 4]) -> 3", "(length [7]) -> 1", "(length [8 2 2 8 2]) -> 5", "(length [7 6 2]) -> 3", "(length [9]) -> 1", "(length [6 2 2 9 3]) -> 5", "(length [6]) -> 1", "(length [0 9 2 7 3]) -> 5", "(length [3]) -> 1", "(length [9 0 8 2]) -> 4", "(length [5]) -> 1", "(length [8 3 8]) -> 3", "(length [4 3 3 3]) -> 4", "(length [5 5 3 4]) -> 4", "(length []) -> 0", "(length [1 0]) -> 2", "(length [8 9]) -> 2", "(length [2 2]) -> 2", "(length [5 3 5 2 4]) -> 5", "(length [8]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [1 4 3 2 5]) -> 5", "(length [2 7]) -> 2", "(length [0 3 7]) -> 3", "(length [4 6 0]) -> 3", "(length [4]) -> 1", "(length [4]) -> 1", "(length [9 6 0]) -> 3", "(length [5 6 8]) -> 3", "(length [4 3 7]) -> 3", "(length [6 3 9 0 4]) -> 5", "(length [9 9]) -> 2", "(length [8 0 4 0 8]) -> 5", "(length [8 3 6 3]) -> 4", "(length [9 3 0 4 3]) -> 5", "(length [8 5 0]) -> 3", "(length []) -> 0", "(length [5 1 0]) -> 3", "(length [0 5]) -> 2", "(length [8 8]) -> 2"], "time": 0.046315, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1 0 7]) -> 3", "(length [9 0 2 6 9]) -> 5", "(length [4 0 2]) -> 3", "(length [9 3 6 6]) -> 4", "(length [1]) -> 1", "(length [6 8 3 0 4]) -> 5", "(length []) -> 0", "(length [8 1 5 2]) -> 4", "(length []) -> 0", "(length [1]) -> 1", "(length [5 2 9]) -> 3", "(length [3 7 4 4 8]) -> 5", "(length [9 7 6 6]) -> 4", "(length [8 7 0 3]) -> 4", "(length [5 6]) -> 2", "(length [5 3]) -> 2", "(length [4 7 6 2 3]) -> 5", "(length []) -> 0", "(length [5 3 9 4]) -> 4", "(length [9 8 5 0]) -> 4", "(length [0 0]) -> 2", "(length [7]) -> 1", "(length [8 5 0]) -> 3", "(length [5 7 4]) -> 3", "(length [3 1]) -> 2", "(length []) -> 0", "(length [1]) -> 1", "(length [7]) -> 1", "(length [9 5 7 1 6]) -> 5", "(length [6 9 4]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [5 4]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [8 7]) -> 2", "(length [6 9 5 5 4]) -> 5", "(length [3 8 0 8 9]) -> 5", "(length [4 4]) -> 2", "(length [5 1 9 6 8]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [8 9 5 3 3]) -> 5", "(length [9 2 8 7]) -> 4", "(length [9 9 4]) -> 3", "(length [1 6]) -> 2", "(length []) -> 0", "(length [5 9 8 1]) -> 4"], "time": 0.033839, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 7 5 7 0]) -> 5", "(length [3 6 1 0]) -> 4", "(length [7 9]) -> 2", "(length [5 3 8 0]) -> 4", "(length [9 2 7]) -> 3", "(length [9 6 3]) -> 3", "(length [1 1]) -> 2", "(length [6 4 1 0 5]) -> 5", "(length [6 1 6]) -> 3", "(length [0 3 5 2 6]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [0]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [6 6]) -> 2", "(length []) -> 0", "(length [4 2 1 9]) -> 4", "(length []) -> 0", "(length [9 4 8 0 8]) -> 5", "(length [8 0 7]) -> 3", "(length [6 9 7 1]) -> 4", "(length [8 4]) -> 2", "(length [6]) -> 1", "(length [8]) -> 1", "(length [0 2 4]) -> 3", "(length []) -> 0", "(length [4 0 5]) -> 3", "(length [8 1]) -> 2", "(length [2 9]) -> 2", "(length [8]) -> 1", "(length []) -> 0", "(length [7 5 5]) -> 3", "(length [1]) -> 1", "(length [8 6 5 8]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length [3 0]) -> 2", "(length []) -> 0", "(length [1 5 0 6 4]) -> 5", "(length [7 6 2 1 8]) -> 5", "(length []) -> 0", "(length [5 3 8 4]) -> 4", "(length [8 2 0 1 9]) -> 5", "(length []) -> 0", "(length [9]) -> 1", "(length [5 9 7]) -> 3", "(length [1 7 5 5 3]) -> 5"], "time": 0.045486, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8]) -> 1", "(length [3 0 3 8]) -> 4", "(length [5 0 3 0]) -> 4", "(length [5 2 7 2 8]) -> 5", "(length [1 0]) -> 2", "(length [5 6 1 5]) -> 4", "(length [9 6 2 2]) -> 4", "(length [2 3]) -> 2", "(length [9 2]) -> 2", "(length [6 8]) -> 2", "(length []) -> 0", "(length [2]) -> 1", "(length [5 3 9 4]) -> 4", "(length [8]) -> 1", "(length [3 6 2 0 9]) -> 5", "(length [7]) -> 1", "(length [1 1 7 5]) -> 4", "(length [3 8 2 3 1]) -> 5", "(length [9 2]) -> 2", "(length [5]) -> 1", "(length [1 4 7 8]) -> 4", "(length [6 9]) -> 2", "(length []) -> 0", "(length [6]) -> 1", "(length []) -> 0", "(length [0 2 2]) -> 3", "(length [3 6 2 9]) -> 4", "(length [0 0 6]) -> 3", "(length []) -> 0", "(length [8 3 8 8]) -> 4", "(length [5 0 0 3]) -> 4", "(length [3 5 5 3]) -> 4", "(length [7 2 3 9]) -> 4", "(length [3 7 0 2 8]) -> 5", "(length [9 9 9]) -> 3", "(length []) -> 0", "(length [3 1]) -> 2", "(length [3 5 8 0 7]) -> 5", "(length [1 0]) -> 2", "(length []) -> 0", "(length [2]) -> 1", "(length [9 5]) -> 2", "(length []) -> 0", "(length [8 6 0 5 1]) -> 5", "(length [8 7 1 8 3]) -> 5", "(length [7 0 7 3 7]) -> 5", "(length [0 9 3]) -> 3", "(length []) -> 0"], "time": 0.047024, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 4 0]) -> 3", "(length [6]) -> 1", "(length [4 9 5]) -> 3", "(length [6 9 9 5 2]) -> 5", "(length []) -> 0", "(length [5 5 5]) -> 3", "(length [3 1 2 0]) -> 4", "(length [8 1 5 4 5]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [4 9]) -> 2", "(length []) -> 0", "(length [4 3]) -> 2", "(length [7 9 2]) -> 3", "(length [2 7 4]) -> 3", "(length [8]) -> 1", "(length []) -> 0", "(length [0 7 5 0]) -> 4", "(length [0 5 3 8]) -> 4", "(length [2 4]) -> 2", "(length []) -> 0", "(length [0 6 7 1 4]) -> 5", "(length []) -> 0", "(length [7]) -> 1", "(length [5 3 0 9 4]) -> 5", "(length [2 0]) -> 2", "(length []) -> 0", "(length [9 3 9 1 7]) -> 5", "(length [9 6 6 2 9]) -> 5", "(length [5]) -> 1", "(length [1 2]) -> 2", "(length [6 0 4 5 7]) -> 5", "(length [0 0 6 1 5]) -> 5", "(length [5 6 3 7 7]) -> 5", "(length [8 1]) -> 2", "(length [1 6]) -> 2", "(length [1 3 9 4]) -> 4", "(length [0]) -> 1", "(length []) -> 0", "(length [2 0 8 3]) -> 4", "(length [2 0 9 4 4]) -> 5", "(length [6 1 4]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [2 8]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0"], "time": 0.041621, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 5 5]) -> 3", "(length [6 3 9]) -> 3", "(length [3 6]) -> 2", "(length [1 6 5]) -> 3", "(length [3 2 8 9]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length [5 7]) -> 2", "(length [9 2 1 9 7]) -> 5", "(length [4]) -> 1", "(length []) -> 0", "(length [6]) -> 1", "(length [2 2]) -> 2", "(length [0 7 3]) -> 3", "(length [9 3]) -> 2", "(length [7 6]) -> 2", "(length [5]) -> 1", "(length [8 2 1]) -> 3", "(length [3 0 8 8 8]) -> 5", "(length [9 8 2]) -> 3", "(length [4 8 6 7 7]) -> 5", "(length [2 3 6]) -> 3", "(length [5]) -> 1", "(length [7 4 3 9 4]) -> 5", "(length [5 8]) -> 2", "(length []) -> 0", "(length [1 2]) -> 2", "(length [2 5]) -> 2", "(length [3]) -> 1", "(length [7 2]) -> 2", "(length [2 9 7 0 8]) -> 5", "(length [9 2]) -> 2", "(length [5]) -> 1", "(length [4]) -> 1", "(length [0 5 6]) -> 3", "(length []) -> 0", "(length [7 3 8 5]) -> 4", "(length [7 4 8 0 7]) -> 5", "(length []) -> 0", "(length [5 8 8 2 5]) -> 5", "(length [9]) -> 1", "(length [1]) -> 1", "(length []) -> 0", "(length [3]) -> 1", "(length [7 2 0 1 5]) -> 5", "(length [3 7 2 8 6]) -> 5", "(length []) -> 0", "(length [6 8 0 7]) -> 4"], "time": 0.043669, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 2 6 8]) -> 4", "(length [7 0]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [2 4 5 3 5]) -> 5", "(length [2]) -> 1", "(length [5 2 3 5 0]) -> 5", "(length [0 0 6 8 7]) -> 5", "(length [6 6 1 7]) -> 4", "(length [4 4]) -> 2", "(length [7 2 5 6 3]) -> 5", "(length [5 7 9]) -> 3", "(length [3 5]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [7 0 2 5 6]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [3 1]) -> 2", "(length [0 0]) -> 2", "(length [3 5 7 6 5]) -> 5", "(length [3 7 8 2]) -> 4", "(length [4 9]) -> 2", "(length [1 9 3]) -> 3", "(length []) -> 0", "(length [2]) -> 1", "(length [4 0 4]) -> 3", "(length [6 1]) -> 2", "(length [7]) -> 1", "(length []) -> 0", "(length [3 1 2 8 1]) -> 5", "(length [8 2 6]) -> 3", "(length [5 9]) -> 2", "(length [9 3]) -> 2", "(length [5 3 2 7 4]) -> 5", "(length [9 4 1 7]) -> 4", "(length []) -> 0", "(length [3 1]) -> 2", "(length []) -> 0", "(length [1 6 7]) -> 3", "(length [3 2 5 8 2]) -> 5", "(length [7]) -> 1", "(length []) -> 0", "(length [8 0 3 1 4]) -> 5", "(length [1]) -> 1", "(length [8 0]) -> 2", "(length [1 3 6 2]) -> 4", "(length []) -> 0"], "time": 0.038097, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [2 8 8]) -> 3", "(length []) -> 0", "(length [5 6 7 6 9]) -> 5", "(length [0 4 8]) -> 3", "(length []) -> 0", "(length [7 1 9]) -> 3", "(length [4 3]) -> 2", "(length [3 5 5 0]) -> 4", "(length [0 8 4]) -> 3", "(length []) -> 0", "(length [3 4 5 2]) -> 4", "(length [4 1 3 1]) -> 4", "(length [1 1 0]) -> 3", "(length [7 5 6]) -> 3", "(length [5]) -> 1", "(length [0 2]) -> 2", "(length [5]) -> 1", "(length [5 9 1]) -> 3", "(length [6 5 1 2 5]) -> 5", "(length [5 0]) -> 2", "(length [8 7 3 9 1]) -> 5", "(length [9 4 9]) -> 3", "(length [3 8]) -> 2", "(length [3 2 3 1]) -> 4", "(length []) -> 0", "(length [0 7 0 8]) -> 4", "(length []) -> 0", "(length [1 3 1 2]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length [5 2]) -> 2", "(length []) -> 0", "(length [5 7 7 5 0]) -> 5", "(length [1]) -> 1", "(length [9 2 8 0]) -> 4", "(length [1 4 6]) -> 3", "(length [0 2 9]) -> 3", "(length [1 9 4]) -> 3", "(length [8 6 9 9 3]) -> 5", "(length [9 4 9 6 8]) -> 5", "(length [2 5]) -> 2", "(length [9 0 5]) -> 3", "(length []) -> 0", "(length [8 8 8 8 9]) -> 5", "(length [3 0 9]) -> 3", "(length [7]) -> 1", "(length [2]) -> 1", "(length []) -> 0"], "time": 0.041984, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [2 6 0]) -> 3", "(length [0 7 9]) -> 3", "(length [4 8 0 0]) -> 4", "(length [9 3]) -> 2", "(length []) -> 0", "(length [2 2 0 2 7]) -> 5", "(length [9 7 1]) -> 3", "(length [5 9 9 2]) -> 4", "(length [7 3 3 2 3]) -> 5", "(length []) -> 0", "(length [2 6 9 8]) -> 4", "(length [4]) -> 1", "(length [1]) -> 1", "(length [1 7 5]) -> 3", "(length [1 8]) -> 2", "(length [5 3 7 2 2]) -> 5", "(length [5]) -> 1", "(length [9 5 3]) -> 3", "(length []) -> 0", "(length [0]) -> 1", "(length [0 3 4]) -> 3", "(length [9]) -> 1", "(length [8 9 3]) -> 3", "(length [6]) -> 1", "(length [3 4 5]) -> 3", "(length [5]) -> 1", "(length [3]) -> 1", "(length [2 6 6]) -> 3", "(length [7]) -> 1", "(length [4 6 5]) -> 3", "(length [3 7 5]) -> 3", "(length [7 0 8 5]) -> 4", "(length [4 9 6 0]) -> 4", "(length [3 5 7 9]) -> 4", "(length []) -> 0", "(length [0 0 5]) -> 3", "(length [5 9]) -> 2", "(length [4 3 6 4]) -> 4", "(length [1]) -> 1", "(length [7]) -> 1", "(length [2 2]) -> 2", "(length [9 5 3 0 1]) -> 5", "(length []) -> 0", "(length [5 4 7 1 7]) -> 5", "(length [1 2 2 1 5]) -> 5", "(length [5]) -> 1", "(length [7 9]) -> 2"], "time": 0.034723, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6 2 4]) -> 3", "(length [1 6]) -> 2", "(length [6]) -> 1", "(length [0 1 2]) -> 3", "(length [9 8 5]) -> 3", "(length [7 7 8 7 8]) -> 5", "(length [5 2 2 5]) -> 4", "(length [1]) -> 1", "(length [2 6]) -> 2", "(length [5 5]) -> 2", "(length [4 6 7 0 5]) -> 5", "(length [8 8 7 6]) -> 4", "(length [0 3 2 0 2]) -> 5", "(length [3]) -> 1", "(length [1 3]) -> 2", "(length [9 3]) -> 2", "(length [7]) -> 1", "(length []) -> 0", "(length [1 2 9 8]) -> 4", "(length [8]) -> 1", "(length [9 2]) -> 2", "(length [7 0 0 4]) -> 4", "(length [2 5]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [4 1]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [4 2 1 1 6]) -> 5", "(length [5 7]) -> 2", "(length [4 6 4 7]) -> 4", "(length [1]) -> 1", "(length [2 1 5 1 3]) -> 5", "(length [6 8 1]) -> 3", "(length []) -> 0", "(length [9 8 4]) -> 3", "(length [1 2 2 8]) -> 4", "(length [3 1 2 6]) -> 4", "(length [0]) -> 1", "(length [0 2 5 1 6]) -> 5", "(length [8 8 0 8]) -> 4", "(length [1 4 4 1]) -> 4", "(length [8 1 2 9 8]) -> 5", "(length [9 1 6]) -> 3", "(length [6 2 4]) -> 3", "(length [4 2 7 1 7]) -> 5", "(length [0]) -> 1"], "time": 0.035832, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5]) -> 1", "(length [7 2]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [3 0 0]) -> 3", "(length [8]) -> 1", "(length [5 3 0 5 3]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [0 8 9 3 3]) -> 5", "(length [0 0 4]) -> 3", "(length [4 8 5]) -> 3", "(length [7 1 7]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [4 3 7]) -> 3", "(length [6]) -> 1", "(length []) -> 0", "(length [4 7 4 5 6]) -> 5", "(length []) -> 0", "(length [1 6 6 1]) -> 4", "(length [1 1 2 8]) -> 4", "(length [2 2 6 9 3]) -> 5", "(length [5 9]) -> 2", "(length [8 0 1 6]) -> 4", "(length [5]) -> 1", "(length []) -> 0", "(length [1 0 5 2 9]) -> 5", "(length [5 2 7 1 2]) -> 5", "(length [3 5]) -> 2", "(length [4]) -> 1", "(length []) -> 0", "(length [2 9 5 8]) -> 4", "(length [2 4 5]) -> 3", "(length [5 7 9 1]) -> 4", "(length [3 4 3 3]) -> 4", "(length [1 3]) -> 2", "(length [1]) -> 1", "(length []) -> 0", "(length [3]) -> 1", "(length [2 6 7 5]) -> 4", "(length [2 6]) -> 2", "(length [0 7 6 9 1]) -> 5", "(length [8 2 4 0 6]) -> 5", "(length []) -> 0", "(length [9 9 5 0]) -> 4", "(length [3 5 2 7]) -> 4", "(length [9]) -> 1"], "time": 0.032516, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 6 8 4 2]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [6 2 0 1]) -> 4", "(length [9 9 8]) -> 3", "(length [8 4 8 8]) -> 4", "(length [5 1]) -> 2", "(length []) -> 0", "(length [4]) -> 1", "(length [7 4 9]) -> 3", "(length [6 4 7 8 9]) -> 5", "(length [6]) -> 1", "(length [0 6 9 5]) -> 4", "(length [4 3 2 9]) -> 4", "(length [1 7]) -> 2", "(length [8 7]) -> 2", "(length [0 8 7 2]) -> 4", "(length [5 0]) -> 2", "(length [0 3 0 5]) -> 4", "(length [2 7 5 0]) -> 4", "(length [5]) -> 1", "(length [3 6 8 9 6]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [8 0 0]) -> 3", "(length []) -> 0", "(length [7 7 4 6 3]) -> 5", "(length [4]) -> 1", "(length [1 2 5 0]) -> 4", "(length [5 2 9 9 4]) -> 5", "(length [6]) -> 1", "(length [5 5]) -> 2", "(length [0]) -> 1", "(length [1 9]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [7 1 8]) -> 3", "(length [5 2 4]) -> 3", "(length [2 0 6]) -> 3", "(length [7 1]) -> 2", "(length [6 1 1 2]) -> 4", "(length [5 0 8 0 3]) -> 5", "(length [3 4]) -> 2", "(length [0]) -> 1", "(length [2 0]) -> 2", "(length [4 1 6 3]) -> 4", "(length []) -> 0", "(length []) -> 0"], "time": 0.048026, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [2]) -> 1", "(length [6]) -> 1", "(length [3]) -> 1", "(length [6 8 4 0]) -> 4", "(length [4 1 5]) -> 3", "(length [5 4]) -> 2", "(length [0 5 8 2 9]) -> 5", "(length [3 4 5 2]) -> 4", "(length [3 4 6 5 9]) -> 5", "(length [1 6 9 9]) -> 4", "(length [1]) -> 1", "(length [8 3 4]) -> 3", "(length [8 6 7]) -> 3", "(length [2 8 2 3]) -> 4", "(length [6 8 5]) -> 3", "(length []) -> 0", "(length [7 4]) -> 2", "(length []) -> 0", "(length [2 8]) -> 2", "(length []) -> 0", "(length [8 9]) -> 2", "(length [7 5 4]) -> 3", "(length [7 1]) -> 2", "(length [0 1]) -> 2", "(length [1 4 2 3]) -> 4", "(length [0 4 1 0 9]) -> 5", "(length [4 7 1 7 0]) -> 5", "(length []) -> 0", "(length [2 8 9 1 5]) -> 5", "(length []) -> 0", "(length [0 5 5]) -> 3", "(length [8 0 5 1]) -> 4", "(length [6 2 1]) -> 3", "(length [2 1 1 7]) -> 4", "(length [3 0 3 1]) -> 4", "(length [1 7 9]) -> 3", "(length []) -> 0", "(length [1 0]) -> 2", "(length [4 1 2 4]) -> 4", "(length [0 8 8 5]) -> 4", "(length [0]) -> 1", "(length []) -> 0", "(length [3 9 4]) -> 3", "(length [0]) -> 1", "(length [4 4 1]) -> 3", "(length [9 8 8]) -> 3", "(length [5 6 3 9 9]) -> 5", "(length [9 6 7 7 3]) -> 5"], "time": 0.056665, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 0 2 6]) -> 4", "(length [1 1 8]) -> 3", "(length [7]) -> 1", "(length [8]) -> 1", "(length [7]) -> 1", "(length [8 4 9]) -> 3", "(length [9 2 1 6 2]) -> 5", "(length []) -> 0", "(length [1 3 1 2]) -> 4", "(length [7 6 5 0 9]) -> 5", "(length [4 4]) -> 2", "(length [6]) -> 1", "(length [1 9]) -> 2", "(length [8 9]) -> 2", "(length [9 9 2 7 3]) -> 5", "(length [5 4 2]) -> 3", "(length [8 8 4 9]) -> 4", "(length [6 2 4]) -> 3", "(length []) -> 0", "(length [3 5 0]) -> 3", "(length [5 3 2]) -> 3", "(length [9 8 4]) -> 3", "(length [3 1 8 0]) -> 4", "(length [5 8 1 7 4]) -> 5", "(length [9 6 1 6 2]) -> 5", "(length [9 8]) -> 2", "(length [8]) -> 1", "(length [3 3]) -> 2", "(length []) -> 0", "(length [5 0 1]) -> 3", "(length [4]) -> 1", "(length [0]) -> 1", "(length [6]) -> 1", "(length []) -> 0", "(length [7 6 4 2]) -> 4", "(length [3 6 0 3]) -> 4", "(length [1 4 8]) -> 3", "(length [5 2 0 7]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length [4 0]) -> 2", "(length []) -> 0", "(length [0 1]) -> 2", "(length [9 5 7]) -> 3", "(length []) -> 0", "(length [1 2 5 4]) -> 4", "(length [5 9]) -> 2", "(length [0 3 8]) -> 3"], "time": 0.043311, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 6 5]) -> 3", "(length []) -> 0", "(length [9]) -> 1", "(length [6]) -> 1", "(length [5 1]) -> 2", "(length [0 6]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [4 2 0 5]) -> 4", "(length [8]) -> 1", "(length [7 9]) -> 2", "(length [1 4 0 8 2]) -> 5", "(length [9]) -> 1", "(length [9]) -> 1", "(length []) -> 0", "(length [5 3 2 3]) -> 4", "(length [0 2]) -> 2", "(length []) -> 0", "(length [1]) -> 1", "(length [1 9 8 3 3]) -> 5", "(length [5 9 5 6]) -> 4", "(length []) -> 0", "(length [3 6 5]) -> 3", "(length [1]) -> 1", "(length [5 7 1 0]) -> 4", "(length [8 9]) -> 2", "(length [9 9 5]) -> 3", "(length [4 9 2]) -> 3", "(length [3 6 8]) -> 3", "(length []) -> 0", "(length [7 0]) -> 2", "(length [0]) -> 1", "(length []) -> 0", "(length [0 2 5 6 8]) -> 5", "(length []) -> 0", "(length [9 1 2 2]) -> 4", "(length []) -> 0", "(length [5 3 2 8 8]) -> 5", "(length [1 2 6]) -> 3", "(length [7 1]) -> 2", "(length [5 7 2 7]) -> 4", "(length [6 6 1 3]) -> 4", "(length [3 4]) -> 2", "(length [1 3 3]) -> 3", "(length [6]) -> 1", "(length [3 0 7]) -> 3", "(length []) -> 0", "(length [1 3]) -> 2"], "time": 0.050446, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0]) -> 1", "(length [7 0 9]) -> 3", "(length [0 1 3 9 6]) -> 5", "(length [7 7 5 7]) -> 4", "(length [5 1]) -> 2", "(length [5]) -> 1", "(length [1 5 6]) -> 3", "(length [0 3]) -> 2", "(length [6]) -> 1", "(length [2 6 3]) -> 3", "(length [7 1 5]) -> 3", "(length [6 4 8 8 0]) -> 5", "(length []) -> 0", "(length [4 7 2 7]) -> 4", "(length [6 8]) -> 2", "(length [2]) -> 1", "(length [6 4 5 1]) -> 4", "(length [7 6 3]) -> 3", "(length [2 9]) -> 2", "(length [5]) -> 1", "(length [4 3]) -> 2", "(length [7 6 3 2 9]) -> 5", "(length [8 0 1 9]) -> 4", "(length []) -> 0", "(length [9 7]) -> 2", "(length [5 0 4 6 2]) -> 5", "(length [5 4 6]) -> 3", "(length [2 7 3 4]) -> 4", "(length [8 0]) -> 2", "(length [8 0 3 8]) -> 4", "(length []) -> 0", "(length [4 6 3 9]) -> 4", "(length [2 5]) -> 2", "(length []) -> 0", "(length [8 8 8 6]) -> 4", "(length [1]) -> 1", "(length [8 9 1]) -> 3", "(length [6 0 4 2 1]) -> 5", "(length [6 9 0 8 6]) -> 5", "(length [8 7 8 5 3]) -> 5", "(length []) -> 0", "(length [8 1]) -> 2", "(length [8 4 3 7 0]) -> 5", "(length [6 0 0]) -> 3", "(length [2]) -> 1", "(length [0 7]) -> 2", "(length [0 3 7 5 5]) -> 5", "(length [9]) -> 1"], "time": 0.033351, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3]) -> 1", "(length [1 1]) -> 2", "(length [1 3]) -> 2", "(length [3 5 0 7 6]) -> 5", "(length [4 7 6 3 1]) -> 5", "(length [8 0 9 6 6]) -> 5", "(length []) -> 0", "(length [1 9 9 2 5]) -> 5", "(length [6 0]) -> 2", "(length [4 3 9 8]) -> 4", "(length [9 7]) -> 2", "(length [3 4]) -> 2", "(length [4 8 2]) -> 3", "(length [2 5 6 8]) -> 4", "(length [1 0]) -> 2", "(length [8 6 6 1 7]) -> 5", "(length []) -> 0", "(length [8 7 7]) -> 3", "(length [9 5]) -> 2", "(length [6 2 2 3 9]) -> 5", "(length [9 8]) -> 2", "(length [6 9]) -> 2", "(length [4]) -> 1", "(length [7]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [5 0]) -> 2", "(length [5 7]) -> 2", "(length [0 2 8 6 7]) -> 5", "(length []) -> 0", "(length [6]) -> 1", "(length [4 0 4 8]) -> 4", "(length [8]) -> 1", "(length [5 0 3]) -> 3", "(length [6 6 5]) -> 3", "(length [0 6 7 3]) -> 4", "(length [4]) -> 1", "(length [5 6 7]) -> 3", "(length [6]) -> 1", "(length [2]) -> 1", "(length []) -> 0", "(length [9 5 1]) -> 3", "(length [1 7 1]) -> 3", "(length [2 8]) -> 2", "(length [7 3 1]) -> 3", "(length [0 4 5 8 7]) -> 5", "(length [6 4 3 6 2]) -> 5", "(length [6]) -> 1"], "time": 0.042528, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7 1 0]) -> 3", "(length [9 0 9 9]) -> 4", "(length [6 4]) -> 2", "(length [0 7 2 6 5]) -> 5", "(length [7]) -> 1", "(length [5 0 9 5 0]) -> 5", "(length [5 1 3 9]) -> 4", "(length [9 3 7 1]) -> 4", "(length [4]) -> 1", "(length []) -> 0", "(length [7]) -> 1", "(length [9 6 0 8 9]) -> 5", "(length [7 8 5 5]) -> 4", "(length []) -> 0", "(length [5 1 7 2]) -> 4", "(length []) -> 0", "(length [5 2 7 6]) -> 4", "(length [1 0 7 7 5]) -> 5", "(length [1]) -> 1", "(length []) -> 0", "(length [9]) -> 1", "(length [9 5 6 2 9]) -> 5", "(length []) -> 0", "(length [8 4]) -> 2", "(length [2 5 2 7 2]) -> 5", "(length [7 1 5]) -> 3", "(length [5 4]) -> 2", "(length [5]) -> 1", "(length []) -> 0", "(length [5 3 4 3]) -> 4", "(length [4 1 9]) -> 3", "(length [5]) -> 1", "(length [7 2]) -> 2", "(length [8 9]) -> 2", "(length [5 2 5]) -> 3", "(length [5]) -> 1", "(length [5]) -> 1", "(length [7]) -> 1", "(length [7 6 4 4]) -> 4", "(length []) -> 0", "(length [8 4 9 6]) -> 4", "(length [1 1]) -> 2", "(length [3 6 3 0]) -> 4", "(length [4 9]) -> 2", "(length [8 1 8]) -> 3", "(length [6 7]) -> 2", "(length [1 2]) -> 2", "(length [3 8 7]) -> 3"], "time": 0.033138, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 9 7]) -> 3", "(length [2 1]) -> 2", "(length [7 6]) -> 2", "(length [3 9 4 4]) -> 4", "(length [2 3 0 0]) -> 4", "(length [0]) -> 1", "(length [1]) -> 1", "(length [4]) -> 1", "(length [2 2 1 9]) -> 4", "(length [6 8]) -> 2", "(length [2 4 8 8 9]) -> 5", "(length [6]) -> 1", "(length [6 9]) -> 2", "(length [4 8 3 2]) -> 4", "(length [3 9 1 8]) -> 4", "(length [9 7 8 9 1]) -> 5", "(length [8]) -> 1", "(length [4 5]) -> 2", "(length [3 2]) -> 2", "(length [7 7 5 2]) -> 4", "(length [2 4]) -> 2", "(length [9 6 8 0]) -> 4", "(length [2 8 5]) -> 3", "(length [2 3 3]) -> 3", "(length []) -> 0", "(length [4]) -> 1", "(length [0 7]) -> 2", "(length [6 1]) -> 2", "(length []) -> 0", "(length [1 2]) -> 2", "(length [9 8 0 1]) -> 4", "(length []) -> 0", "(length [7 2 1 8]) -> 4", "(length [7 0]) -> 2", "(length [9]) -> 1", "(length []) -> 0", "(length [8 0]) -> 2", "(length [4 5 6 4]) -> 4", "(length [8 2 3 1 5]) -> 5", "(length []) -> 0", "(length [4 6]) -> 2", "(length [8 8]) -> 2", "(length [4 3 4]) -> 3", "(length []) -> 0", "(length [4 2]) -> 2", "(length [4 9 0 0]) -> 4", "(length []) -> 0", "(length [3]) -> 1"], "time": 0.037947, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 0 2 7]) -> 4", "(length [9 8]) -> 2", "(length [7 8 8 9]) -> 4", "(length [3]) -> 1", "(length [0 4 5]) -> 3", "(length [8 9]) -> 2", "(length []) -> 0", "(length [9 2 8]) -> 3", "(length [5 9 9]) -> 3", "(length [5]) -> 1", "(length []) -> 0", "(length [1 5]) -> 2", "(length [8 3]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [7 9 1]) -> 3", "(length [9 9]) -> 2", "(length [6 7 1 7]) -> 4", "(length [0 9 6 0]) -> 4", "(length [0 5 2]) -> 3", "(length [3 1 3]) -> 3", "(length [5]) -> 1", "(length [3 0 0 5 6]) -> 5", "(length [6 1 6 6]) -> 4", "(length [3 2]) -> 2", "(length [3 3 3]) -> 3", "(length []) -> 0", "(length [9 6 7]) -> 3", "(length [9 9 3 4 7]) -> 5", "(length [5 1 3 2]) -> 4", "(length [3 3]) -> 2", "(length [2 6 4]) -> 3", "(length [0 5 8]) -> 3", "(length [5 6 4]) -> 3", "(length [6]) -> 1", "(length []) -> 0", "(length [6 7]) -> 2", "(length [9 4 4 9 9]) -> 5", "(length [9]) -> 1", "(length []) -> 0", "(length [2 9]) -> 2", "(length [6 4 2]) -> 3", "(length [0 5]) -> 2", "(length [2]) -> 1", "(length [3]) -> 1", "(length [5 8 7 0]) -> 4", "(length [0 4 8 8 2]) -> 5"], "time": 0.051573, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5]) -> 1", "(length [7 9 4 2]) -> 4", "(length [6]) -> 1", "(length [4 3 5 5 0]) -> 5", "(length [5 0 6]) -> 3", "(length [9 3 5 5]) -> 4", "(length [9 5]) -> 2", "(length [6 0 9]) -> 3", "(length [7 2 6]) -> 3", "(length [6 3]) -> 2", "(length []) -> 0", "(length [6 9]) -> 2", "(length [3 5]) -> 2", "(length [8 3 9 2 8]) -> 5", "(length [3 9 9]) -> 3", "(length [5 7 9 6]) -> 4", "(length [1]) -> 1", "(length [3 2 5]) -> 3", "(length []) -> 0", "(length [4 3 8 5 8]) -> 5", "(length [4 0 3 0]) -> 4", "(length []) -> 0", "(length [8 4 4 3]) -> 4", "(length []) -> 0", "(length [4 1 1]) -> 3", "(length [6 2 9]) -> 3", "(length []) -> 0", "(length [6 9 6 4 7]) -> 5", "(length [9 4 1 2 9]) -> 5", "(length [8 2 9]) -> 3", "(length [0 7 1]) -> 3", "(length [0 6 6 5 1]) -> 5", "(length [5]) -> 1", "(length []) -> 0", "(length [0 8 4 8 6]) -> 5", "(length [2 6 6]) -> 3", "(length [2 9 5]) -> 3", "(length [1 6]) -> 2", "(length [4 1 9 4 9]) -> 5", "(length [3]) -> 1", "(length [2 3 3 6 3]) -> 5", "(length [6 5 1 1 1]) -> 5", "(length [8 4 4 5 8]) -> 5", "(length [1 7 0 1 9]) -> 5", "(length [7 2]) -> 2", "(length [0 4 4 9]) -> 4", "(length [7 2 1 3]) -> 4", "(length [9]) -> 1"], "time": 0.051272, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9]) -> 1", "(length [6]) -> 1", "(length []) -> 0", "(length [9 5 1 1]) -> 4", "(length []) -> 0", "(length [2 3 8]) -> 3", "(length [4 4 0 9]) -> 4", "(length []) -> 0", "(length [8 0 3 2]) -> 4", "(length [1 6 6 3 2]) -> 5", "(length [0 9 8 9]) -> 4", "(length [6]) -> 1", "(length [0 3 9 7]) -> 4", "(length [5 4 9 2]) -> 4", "(length [7 3 2]) -> 3", "(length [0]) -> 1", "(length [0 5 5 7 2]) -> 5", "(length [9 5]) -> 2", "(length [0 1]) -> 2", "(length []) -> 0", "(length [3]) -> 1", "(length [6 8 6 4 5]) -> 5", "(length [7 0 6]) -> 3", "(length [3 6]) -> 2", "(length []) -> 0", "(length [2]) -> 1", "(length [8 7 7 9]) -> 4", "(length [0 7 9 4]) -> 4", "(length [1 8 5 1 1]) -> 5", "(length [6 8 1]) -> 3", "(length []) -> 0", "(length [8]) -> 1", "(length [0 4 9 7]) -> 4", "(length [2 2 3 4]) -> 4", "(length [3]) -> 1", "(length [9 2]) -> 2", "(length [4 3 2 7]) -> 4", "(length [3 6]) -> 2", "(length [4 1]) -> 2", "(length [3 7 0 5 8]) -> 5", "(length [4 3]) -> 2", "(length [2 6 7 6]) -> 4", "(length [4]) -> 1", "(length [2 4 9 0]) -> 4", "(length [9 3]) -> 2", "(length [5 3]) -> 2", "(length []) -> 0", "(length [1 1 8]) -> 3"], "time": 0.053401, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1 3 1]) -> 3", "(length [8 9]) -> 2", "(length [3 9 4 4]) -> 4", "(length [4 7 8]) -> 3", "(length [4 0]) -> 2", "(length [7 0 1]) -> 3", "(length [7]) -> 1", "(length [9]) -> 1", "(length [9]) -> 1", "(length [9 7 1 5]) -> 4", "(length [5 3]) -> 2", "(length [1]) -> 1", "(length [7]) -> 1", "(length [5 3 1]) -> 3", "(length [0 0 6 3]) -> 4", "(length []) -> 0", "(length [6 9 0 0]) -> 4", "(length [6]) -> 1", "(length []) -> 0", "(length [6 4 1 7]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length [2 4 5 9 6]) -> 5", "(length [1 0 6]) -> 3", "(length [6 0 9 1]) -> 4", "(length [3]) -> 1", "(length [2]) -> 1", "(length [2 3]) -> 2", "(length [5 7]) -> 2", "(length [0]) -> 1", "(length [7 9]) -> 2", "(length [9 6 1]) -> 3", "(length [9 9 4]) -> 3", "(length [1 7 4 6]) -> 4", "(length []) -> 0", "(length [4 7 2]) -> 3", "(length [5]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [5 7 0]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [9]) -> 1", "(length [7 6]) -> 2", "(length [2 9 9 5]) -> 4", "(length [0 1 0 1 8]) -> 5", "(length []) -> 0", "(length [4]) -> 1"], "time": 0.039915, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [2 3]) -> 2", "(length [3]) -> 1", "(length [0]) -> 1", "(length [7 7 8 5 3]) -> 5", "(length [7 7 2 4]) -> 4", "(length [0 6 0 6]) -> 4", "(length []) -> 0", "(length [8]) -> 1", "(length [8 6 2 9 9]) -> 5", "(length []) -> 0", "(length [6 8 6 5]) -> 4", "(length [0]) -> 1", "(length [1 0 0]) -> 3", "(length [7 3 0 8]) -> 4", "(length [2 2]) -> 2", "(length [6 2]) -> 2", "(length [3 8]) -> 2", "(length [8 8 6 6 6]) -> 5", "(length []) -> 0", "(length [0 7 4 2]) -> 4", "(length [7]) -> 1", "(length []) -> 0", "(length [4 3 8 9 6]) -> 5", "(length [2 4 9]) -> 3", "(length [6 9 7 9]) -> 4", "(length [0 6 9]) -> 3", "(length [2 3]) -> 2", "(length [7 2]) -> 2", "(length [7 1 3 4 4]) -> 5", "(length [8 9 3]) -> 3", "(length [1 8 2 5 9]) -> 5", "(length [7 2 1 9]) -> 4", "(length [0 5]) -> 2", "(length []) -> 0", "(length [0 6 7 3]) -> 4", "(length [9]) -> 1", "(length [6 5 7]) -> 3", "(length [1 5 4 7]) -> 4", "(length [5 8 4 3 0]) -> 5", "(length [6 4 7 3 2]) -> 5", "(length [7 1 6 8]) -> 4", "(length [7 1]) -> 2", "(length [5 8 9]) -> 3", "(length [1 2 7 4]) -> 4", "(length [9 8 8 3 2]) -> 5", "(length []) -> 0", "(length [6]) -> 1", "(length [7 4 3]) -> 3"], "time": 0.035198, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 8 2]) -> 3", "(length [2 6 2]) -> 3", "(length [9 9]) -> 2", "(length [1 7]) -> 2", "(length [2 7 7 3 6]) -> 5", "(length [5 3 8]) -> 3", "(length [0 6 3]) -> 3", "(length [1 0 7]) -> 3", "(length []) -> 0", "(length [4 1]) -> 2", "(length [4 4 8 8 2]) -> 5", "(length [8]) -> 1", "(length [9]) -> 1", "(length []) -> 0", "(length [6 7]) -> 2", "(length [8 6 7]) -> 3", "(length [3 6 5 2 7]) -> 5", "(length []) -> 0", "(length [6]) -> 1", "(length [6 2 3 7]) -> 4", "(length [4 0 7 5]) -> 4", "(length [5 7 6 4]) -> 4", "(length [1]) -> 1", "(length [4 8 7 2 3]) -> 5", "(length []) -> 0", "(length [6 6 3 3 7]) -> 5", "(length [1 0]) -> 2", "(length [8 5 0 9 3]) -> 5", "(length [5 0 1 2 2]) -> 5", "(length [1]) -> 1", "(length [8]) -> 1", "(length [6]) -> 1", "(length []) -> 0", "(length [3]) -> 1", "(length [6 2 3 0]) -> 4", "(length [1 6]) -> 2", "(length []) -> 0", "(length [8 9 8 9]) -> 4", "(length [0 5 5 4]) -> 4", "(length [2 8 4 5 0]) -> 5", "(length [4]) -> 1", "(length [1 5]) -> 2", "(length [8 5]) -> 2", "(length [6 2 8 4]) -> 4", "(length [8 4]) -> 2", "(length [2 1 4 4]) -> 4", "(length []) -> 0", "(length []) -> 0"], "time": 0.036331, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [1 5]) -> 2", "(length [3 8]) -> 2", "(length [9]) -> 1", "(length [7 6 9 9 7]) -> 5", "(length [2 4 1 4 7]) -> 5", "(length [7 2 4]) -> 3", "(length [6]) -> 1", "(length [6 5 3 1]) -> 4", "(length [3 9 4 3 2]) -> 5", "(length [0 3 8 3]) -> 4", "(length [9 6]) -> 2", "(length [5 4 4 8 6]) -> 5", "(length [5 7 9 3]) -> 4", "(length [0]) -> 1", "(length [8 8 7]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [4 7 6 1 0]) -> 5", "(length [8 8 0 4 1]) -> 5", "(length [6 4 3 3]) -> 4", "(length [4]) -> 1", "(length [9 2]) -> 2", "(length [1 5 4 2 0]) -> 5", "(length [7 8]) -> 2", "(length [2 1 7 1 3]) -> 5", "(length [8 6 4]) -> 3", "(length [9 5 4 0 1]) -> 5", "(length []) -> 0", "(length [6 3 8 1]) -> 4", "(length [1]) -> 1", "(length [6 2 1 1]) -> 4", "(length [2 6]) -> 2", "(length [0 9]) -> 2", "(length [0 5 1 3 3]) -> 5", "(length [2 4]) -> 2", "(length [2 6 0]) -> 3", "(length [5 0 6]) -> 3", "(length [5 7 0 8 9]) -> 5", "(length [3 5 0 0 7]) -> 5", "(length [8 7 9 5 6]) -> 5", "(length [1 7 6]) -> 3", "(length [1 1]) -> 2", "(length [9]) -> 1", "(length [7 5]) -> 2", "(length [6 9]) -> 2", "(length [1]) -> 1"], "time": 0.056813, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [2 7]) -> 2", "(length [1 3 3]) -> 3", "(length [0 7]) -> 2", "(length [8 8 3]) -> 3", "(length [1 2 9 3 7]) -> 5", "(length [3 9 4]) -> 3", "(length [6 7 4 2]) -> 4", "(length []) -> 0", "(length [1 4]) -> 2", "(length [2 9 4]) -> 3", "(length [3 9]) -> 2", "(length []) -> 0", "(length [6 6 6 9 1]) -> 5", "(length [4 9]) -> 2", "(length [0 3 0]) -> 3", "(length [7 4]) -> 2", "(length [5 7 6 7 1]) -> 5", "(length []) -> 0", "(length [1 9 1]) -> 3", "(length [3]) -> 1", "(length [7 4 3 9 2]) -> 5", "(length [8 5 9 5]) -> 4", "(length [7 9 8 0 3]) -> 5", "(length [0 5 7]) -> 3", "(length [5 5 9 2]) -> 4", "(length [1 3]) -> 2", "(length [8 1 0 2 2]) -> 5", "(length []) -> 0", "(length [7 1 5 1]) -> 4", "(length [5]) -> 1", "(length [6 1 0 5]) -> 4", "(length [6 3 7 4]) -> 4", "(length []) -> 0", "(length [4 8]) -> 2", "(length [3]) -> 1", "(length [0 0 8 0]) -> 4", "(length [8 0 3 3]) -> 4", "(length [5 0 8]) -> 3", "(length []) -> 0", "(length [8 6 1]) -> 3", "(length [5]) -> 1", "(length [9]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [6 5 9]) -> 3", "(length [1 8 7 7 1]) -> 5", "(length [9 6 3 9]) -> 4", "(length [4 5 0 7]) -> 4"], "time": 0.03366, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 9]) -> 2", "(length [2 8]) -> 2", "(length [9]) -> 1", "(length [2 7 3 0]) -> 4", "(length [0 2 8 4]) -> 4", "(length [3 1 7]) -> 3", "(length [8 8]) -> 2", "(length [7]) -> 1", "(length [8 1 8]) -> 3", "(length [3 9 7 1 7]) -> 5", "(length [8 2 8 4 4]) -> 5", "(length [7]) -> 1", "(length [3 1 7 8]) -> 4", "(length [5 4 4]) -> 3", "(length []) -> 0", "(length [0 6]) -> 2", "(length [5 4 7 0 9]) -> 5", "(length [8 5 5 3 9]) -> 5", "(length []) -> 0", "(length [0 8 7]) -> 3", "(length [0 3]) -> 2", "(length [5]) -> 1", "(length [2]) -> 1", "(length [0 5 6 0]) -> 4", "(length [3]) -> 1", "(length [5 6 4 3]) -> 4", "(length [4 3 7]) -> 3", "(length []) -> 0", "(length [1 0 7 8]) -> 4", "(length [7]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [9 1 5 0]) -> 4", "(length [9]) -> 1", "(length [7 9 9 0 0]) -> 5", "(length [3]) -> 1", "(length [8 4 7 1]) -> 4", "(length [2 7]) -> 2", "(length [7 5 5]) -> 3", "(length [5 1]) -> 2", "(length [9 7 6]) -> 3", "(length []) -> 0", "(length [0 0 1 5]) -> 4", "(length [2 0 2]) -> 3", "(length [4]) -> 1", "(length []) -> 0", "(length [0]) -> 1", "(length [3 8 7 0]) -> 4"], "time": 0.05138, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7 8 2 0 7]) -> 5", "(length [6 2 7 8]) -> 4", "(length []) -> 0", "(length [0]) -> 1", "(length [7 8 3 0]) -> 4", "(length [8 2 8]) -> 3", "(length [2 3 0 8 9]) -> 5", "(length [4 9 3 6 8]) -> 5", "(length []) -> 0", "(length [1 8 0 6 0]) -> 5", "(length []) -> 0", "(length [9 2]) -> 2", "(length [1]) -> 1", "(length []) -> 0", "(length [0 1]) -> 2", "(length [2]) -> 1", "(length [4]) -> 1", "(length [7 3]) -> 2", "(length [1 9]) -> 2", "(length [2]) -> 1", "(length [1 4 9 0 4]) -> 5", "(length [6 8 9 7 3]) -> 5", "(length [4 0]) -> 2", "(length [7 8 7]) -> 3", "(length [7]) -> 1", "(length []) -> 0", "(length [2 8 1 6 1]) -> 5", "(length [8 7 6]) -> 3", "(length [7 7 6 4 9]) -> 5", "(length [9 4]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [1 3 4 9]) -> 4", "(length []) -> 0", "(length [7]) -> 1", "(length []) -> 0", "(length [3 2 7]) -> 3", "(length []) -> 0", "(length [0 8 2 9]) -> 4", "(length [0 4]) -> 2", "(length []) -> 0", "(length [6 9 8]) -> 3", "(length []) -> 0", "(length [9 0 3 1]) -> 4", "(length [6]) -> 1", "(length [7 2 7 7]) -> 4", "(length []) -> 0", "(length []) -> 0"], "time": 0.052752, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [5 5 8]) -> 3", "(length [5 1 4 3 1]) -> 5", "(length [4 4 2]) -> 3", "(length [1 8 6]) -> 3", "(length [9]) -> 1", "(length [7]) -> 1", "(length [7 6 5 0 6]) -> 5", "(length [9]) -> 1", "(length [5 4 3 5]) -> 4", "(length [8 0 2 6 1]) -> 5", "(length [6]) -> 1", "(length [3 9]) -> 2", "(length [3 1 1]) -> 3", "(length []) -> 0", "(length [7 8]) -> 2", "(length [6 8 2 1 1]) -> 5", "(length [2 2 6 6 1]) -> 5", "(length [2]) -> 1", "(length [4 5 6 1]) -> 4", "(length [8 9 0 9]) -> 4", "(length [9 3]) -> 2", "(length []) -> 0", "(length [3 8 9 2]) -> 4", "(length [0 0]) -> 2", "(length [7 6 4]) -> 3", "(length [0]) -> 1", "(length [9 1 2 4]) -> 4", "(length [5]) -> 1", "(length [9 2 6]) -> 3", "(length [5 3 3 2 2]) -> 5", "(length [4 8 0]) -> 3", "(length [9 0 1 2]) -> 4", "(length [9 1 2 0 1]) -> 5", "(length [3 2 4 4]) -> 4", "(length [8 0 8 4]) -> 4", "(length [3 3 7 7]) -> 4", "(length [1 0 8 3 7]) -> 5", "(length []) -> 0", "(length [6 1 9 0 2]) -> 5", "(length [5 5 6 1 4]) -> 5", "(length [4 5 9 9]) -> 4", "(length [0]) -> 1", "(length [7 5 1 2 9]) -> 5", "(length [1 4 6 2]) -> 4", "(length [4]) -> 1", "(length []) -> 0", "(length [0 3 4 2]) -> 4"], "time": 0.056189, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [6 7 9 8 5]) -> 5", "(length [9 6]) -> 2", "(length []) -> 0", "(length [8 8 1]) -> 3", "(length [8 6 4 2 9]) -> 5", "(length [1 2 3]) -> 3", "(length [2 1 9 0 7]) -> 5", "(length [3 9 6 3]) -> 4", "(length [5 0 4 0]) -> 4", "(length [4 6 2]) -> 3", "(length [3]) -> 1", "(length [7 9]) -> 2", "(length [4 6 5 0 5]) -> 5", "(length []) -> 0", "(length [2 8 5 8]) -> 4", "(length [6 1]) -> 2", "(length [9 2 8]) -> 3", "(length [3 9 7]) -> 3", "(length [4 1 2 1]) -> 4", "(length []) -> 0", "(length [0 6 2 0]) -> 4", "(length [9 1 3 9 2]) -> 5", "(length [5 4 7 5]) -> 4", "(length []) -> 0", "(length [4 5 6]) -> 3", "(length []) -> 0", "(length [6 8]) -> 2", "(length [2 2 3]) -> 3", "(length [5 0 8 9]) -> 4", "(length []) -> 0", "(length [2]) -> 1", "(length [9 8 5 1 3]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [2 3 5]) -> 3", "(length []) -> 0", "(length [6]) -> 1", "(length [7 2 8]) -> 3", "(length [3 0 1 2 9]) -> 5", "(length [6 5 1 7 7]) -> 5", "(length [9 7 3 5 2]) -> 5", "(length [4 4 5 0 4]) -> 5", "(length []) -> 0", "(length [9 9 9 7 0]) -> 5", "(length [0 7 6 2 2]) -> 5", "(length [4 0]) -> 2"], "time": 0.052235, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 7]) -> 2", "(length [1 4]) -> 2", "(length [2]) -> 1", "(length [6 6]) -> 2", "(length [7 5 4]) -> 3", "(length []) -> 0", "(length [0 8 7]) -> 3", "(length [1 3 2 2 2]) -> 5", "(length [4 2 5 9 5]) -> 5", "(length []) -> 0", "(length [8 4 7]) -> 3", "(length [8 7 2 0 6]) -> 5", "(length [5 2 3]) -> 3", "(length [0]) -> 1", "(length [4 8 5 1]) -> 4", "(length []) -> 0", "(length [7 8 8 2]) -> 4", "(length [1 3]) -> 2", "(length [8 9 5]) -> 3", "(length [2 4 7 7]) -> 4", "(length [9 7 4 4]) -> 4", "(length [1]) -> 1", "(length [3 5]) -> 2", "(length [9 5]) -> 2", "(length [2 4]) -> 2", "(length [2 8 9 1]) -> 4", "(length [6 2 0 1 3]) -> 5", "(length [2]) -> 1", "(length [0]) -> 1", "(length [6 7 8 0 2]) -> 5", "(length []) -> 0", "(length [5 5]) -> 2", "(length [3 4 1 1 9]) -> 5", "(length [9]) -> 1", "(length [3 6 3]) -> 3", "(length [9 8]) -> 2", "(length [7 8 4 6 7]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [0 9]) -> 2", "(length [1 6 1 1 1]) -> 5", "(length [0 4 2]) -> 3", "(length [0 9 4 6]) -> 4", "(length [1 4]) -> 2", "(length []) -> 0", "(length [2]) -> 1", "(length [6]) -> 1", "(length [6 9]) -> 2"], "time": 0.035837, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 1 7]) -> 3", "(length [7]) -> 1", "(length [5 3 8 6]) -> 4", "(length [4 3 4]) -> 3", "(length []) -> 0", "(length [3]) -> 1", "(length [8 4 8 0]) -> 4", "(length [5 9 7 3]) -> 4", "(length [1]) -> 1", "(length [0 3]) -> 2", "(length [1 5 4]) -> 3", "(length [0 6 2 3 0]) -> 5", "(length [2 3 0]) -> 3", "(length [5 2 5]) -> 3", "(length [2 2 5]) -> 3", "(length [6 4 4 9]) -> 4", "(length [1]) -> 1", "(length []) -> 0", "(length [4 8]) -> 2", "(length [5 0 9 3]) -> 4", "(length [8]) -> 1", "(length [8 6 0]) -> 3", "(length [8 3]) -> 2", "(length [8 7 2 4 6]) -> 5", "(length [9 0 0]) -> 3", "(length [2 9 6 6 2]) -> 5", "(length [2 8 7]) -> 3", "(length []) -> 0", "(length [3]) -> 1", "(length [8 0 6 8]) -> 4", "(length [2]) -> 1", "(length []) -> 0", "(length [5 5 0 4]) -> 4", "(length [1 8 7 4]) -> 4", "(length []) -> 0", "(length [1 4 0 0]) -> 4", "(length [9]) -> 1", "(length [0 1]) -> 2", "(length [8 2]) -> 2", "(length [4 2]) -> 2", "(length [3 4 2 0]) -> 4", "(length []) -> 0", "(length [6 9 5 1 1]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [4 7 2 1]) -> 4", "(length [4]) -> 1", "(length [3 0 7 9]) -> 4"], "time": 0.033239, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6]) -> 1", "(length [7 7 3 8 9]) -> 5", "(length [1 1 2]) -> 3", "(length [1 6 4 6]) -> 4", "(length [5 7]) -> 2", "(length [1 5 7]) -> 3", "(length [3]) -> 1", "(length [2 2 6 6 6]) -> 5", "(length []) -> 0", "(length [0 8 5 4 4]) -> 5", "(length [2 8 0 6 9]) -> 5", "(length [9 8 1]) -> 3", "(length [3 1]) -> 2", "(length [9 6 7 5]) -> 4", "(length [5 6 2]) -> 3", "(length []) -> 0", "(length [5 2]) -> 2", "(length [8 2 0 3]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length [7]) -> 1", "(length []) -> 0", "(length [8]) -> 1", "(length [5 0 9 8 2]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [5 9]) -> 2", "(length [8]) -> 1", "(length [2]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [2 0 0 0]) -> 4", "(length []) -> 0", "(length [1]) -> 1", "(length [7 3 2 3 8]) -> 5", "(length [4 7 7]) -> 3", "(length [1 4 1 3]) -> 4", "(length [7 4 2]) -> 3", "(length [3 3]) -> 2", "(length [7 5 0 3 4]) -> 5", "(length [3]) -> 1", "(length [3 5 8 7]) -> 4", "(length [2 7]) -> 2", "(length []) -> 0", "(length [4 8 9]) -> 3", "(length [0 3 6]) -> 3", "(length [1 2 4 9 7]) -> 5", "(length [6 7 9 5 0]) -> 5"], "time": 0.033008, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 8 2 3 7]) -> 5", "(length [1 4]) -> 2", "(length [2 1 2 0 7]) -> 5", "(length [8 8]) -> 2", "(length [1 2 7 8 7]) -> 5", "(length [7 9 5]) -> 3", "(length [2 2 6]) -> 3", "(length [1 2]) -> 2", "(length [8]) -> 1", "(length []) -> 0", "(length [9]) -> 1", "(length [8 2 3 6]) -> 4", "(length [3 3 2 2 9]) -> 5", "(length [4 0 9]) -> 3", "(length [3]) -> 1", "(length [7 8 3]) -> 3", "(length [8 8 7]) -> 3", "(length [1 3 2 8]) -> 4", "(length [7 6]) -> 2", "(length [6 1 0 8 3]) -> 5", "(length [1 2 9]) -> 3", "(length [9]) -> 1", "(length [2]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [0 1 5 3]) -> 4", "(length [6]) -> 1", "(length [8]) -> 1", "(length [9 7 7 8 9]) -> 5", "(length [7]) -> 1", "(length [4]) -> 1", "(length [7]) -> 1", "(length [0 6]) -> 2", "(length []) -> 0", "(length [1 5 2 8 5]) -> 5", "(length []) -> 0", "(length [4 0]) -> 2", "(length [5 4]) -> 2", "(length []) -> 0", "(length [8 1 0]) -> 3", "(length [4 2 5]) -> 3", "(length [5 4 7 2]) -> 4", "(length []) -> 0", "(length [8]) -> 1", "(length [8]) -> 1", "(length [9 1]) -> 2", "(length [3]) -> 1", "(length [4]) -> 1"], "time": 0.050468, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1]) -> 1", "(length [4 0 7 7 5]) -> 5", "(length [6 0]) -> 2", "(length [2]) -> 1", "(length [6 7 8]) -> 3", "(length [6 1]) -> 2", "(length [6 6 3]) -> 3", "(length [5 1 9 8 9]) -> 5", "(length [5 8 8 4 8]) -> 5", "(length [0 8]) -> 2", "(length [6 6 6]) -> 3", "(length [6 0 9 0 5]) -> 5", "(length [8 6]) -> 2", "(length [0 9 2 3 7]) -> 5", "(length [2 1]) -> 2", "(length [5 0 8 8]) -> 4", "(length [0 8 0]) -> 3", "(length [4 6 5]) -> 3", "(length [6 4 5 2]) -> 4", "(length [5 5 9 4]) -> 4", "(length [9 6]) -> 2", "(length [4 2 3 3 1]) -> 5", "(length [3 0 0]) -> 3", "(length [3 9 2 7 5]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [5]) -> 1", "(length [2 8]) -> 2", "(length [9 6]) -> 2", "(length [5]) -> 1", "(length [9 8 8 6 0]) -> 5", "(length [7]) -> 1", "(length [4 0]) -> 2", "(length [6 6 5]) -> 3", "(length [6 9 2 8]) -> 4", "(length [6]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [7 2 3]) -> 3", "(length [4]) -> 1", "(length [9 8]) -> 2", "(length [5 0]) -> 2", "(length [0 9 7]) -> 3", "(length [8 8 1]) -> 3", "(length [0 4 9]) -> 3", "(length [0 3 2 2]) -> 4", "(length []) -> 0", "(length [5]) -> 1"], "time": 0.033798, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8 1 2 6 6]) -> 5", "(length [2 2 6 4]) -> 4", "(length [3 9 7 0 2]) -> 5", "(length [1 9 6]) -> 3", "(length [2 2 7 3 4]) -> 5", "(length [2 8]) -> 2", "(length [7 3 1 9 4]) -> 5", "(length []) -> 0", "(length [9 8 8]) -> 3", "(length [4 5 6]) -> 3", "(length [6 2]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [1 0 1 9]) -> 4", "(length []) -> 0", "(length [4 9 6]) -> 3", "(length [2 8 5 1 1]) -> 5", "(length []) -> 0", "(length [3 6 4]) -> 3", "(length [6 8 0]) -> 3", "(length [4 2]) -> 2", "(length [6 8 7 0 5]) -> 5", "(length [8 1 4]) -> 3", "(length [9]) -> 1", "(length [9 9 8 8 7]) -> 5", "(length [8 1 2]) -> 3", "(length [4 6]) -> 2", "(length [4 1 6 0 3]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [2 8 1]) -> 3", "(length []) -> 0", "(length [7 4 1]) -> 3", "(length [2 9 2 1]) -> 4", "(length [9]) -> 1", "(length [4 1 7 6 6]) -> 5", "(length [1 7 7 1]) -> 4", "(length [4 4 8 3 6]) -> 5", "(length [6 2]) -> 2", "(length [2 2 8 0]) -> 4", "(length [5 0 4 5 0]) -> 5", "(length [5]) -> 1", "(length [9 8]) -> 2", "(length [6]) -> 1", "(length [4]) -> 1", "(length [5 1 9 1]) -> 4", "(length [0 2 1 8]) -> 4", "(length [4]) -> 1"], "time": 0.035022, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5]) -> 1", "(length []) -> 0", "(length [0 0 7 9]) -> 4", "(length [5]) -> 1", "(length [7 9]) -> 2", "(length [5 3 8]) -> 3", "(length [2 2]) -> 2", "(length [0 3 1 6]) -> 4", "(length []) -> 0", "(length [5 8 4 6 9]) -> 5", "(length [4 5 2 7 5]) -> 5", "(length [3 4 1 6]) -> 4", "(length [0 2 4 7]) -> 4", "(length [4]) -> 1", "(length []) -> 0", "(length [8]) -> 1", "(length [2 5 1 7 2]) -> 5", "(length [8]) -> 1", "(length [7 5]) -> 2", "(length [1 2 4 7]) -> 4", "(length []) -> 0", "(length [3 4 0 0]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length [1]) -> 1", "(length [4 9 7 8]) -> 4", "(length []) -> 0", "(length [7]) -> 1", "(length [7 4 0]) -> 3", "(length [8]) -> 1", "(length [8 3 2 5 3]) -> 5", "(length [1]) -> 1", "(length [6 9 2 1]) -> 4", "(length [1 4 8 2]) -> 4", "(length [6 7]) -> 2", "(length [6 7 8]) -> 3", "(length [7]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [4 2]) -> 2", "(length [8 6]) -> 2", "(length []) -> 0", "(length [6 8 7 6]) -> 4", "(length [4]) -> 1", "(length [5 4]) -> 2", "(length [9 1 6]) -> 3", "(length []) -> 0", "(length [0 5 3 3]) -> 4"], "time": 0.032707, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 0 6 6]) -> 4", "(length [1 4 5 2]) -> 4", "(length [0]) -> 1", "(length [6 7]) -> 2", "(length [8]) -> 1", "(length [2 3]) -> 2", "(length [2 1 3 9 0]) -> 5", "(length [0 6 4 1 7]) -> 5", "(length [9 4 5 6]) -> 4", "(length [2 2 5 2]) -> 4", "(length [3 8 5]) -> 3", "(length [6 2 5 7 5]) -> 5", "(length [1 0 4]) -> 3", "(length [7 3 0 2 0]) -> 5", "(length [3 8]) -> 2", "(length [9 2]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [0 9 8 3 1]) -> 5", "(length [0 8]) -> 2", "(length [0 0]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [5 4 0 4 3]) -> 5", "(length [8]) -> 1", "(length [9 2]) -> 2", "(length [4 6 3 0]) -> 4", "(length []) -> 0", "(length [0]) -> 1", "(length [5 5 5]) -> 3", "(length []) -> 0", "(length [3 2]) -> 2", "(length [1 7 3 3 4]) -> 5", "(length [8 0 8 4 1]) -> 5", "(length [9]) -> 1", "(length []) -> 0", "(length [1 4 3 9 7]) -> 5", "(length [6]) -> 1", "(length []) -> 0", "(length [4 5 1]) -> 3", "(length [1]) -> 1", "(length [4 3 3 4]) -> 4", "(length []) -> 0", "(length [4 7 8 0]) -> 4", "(length [3]) -> 1", "(length [9 7 7]) -> 3", "(length [2 6]) -> 2", "(length [7 9 1 3]) -> 4"], "time": 0.033414, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 7]) -> 2", "(length [2 7]) -> 2", "(length [1]) -> 1", "(length [1 9 9 7]) -> 4", "(length [6]) -> 1", "(length [9 8 1]) -> 3", "(length [2]) -> 1", "(length [3 8 6]) -> 3", "(length [2 2]) -> 2", "(length [9 4 5 1]) -> 4", "(length [9 2 2 9 5]) -> 5", "(length [2 2 1]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [8]) -> 1", "(length [5 5 7]) -> 3", "(length [9 2]) -> 2", "(length [7 1 2 0]) -> 4", "(length []) -> 0", "(length [7 5 6]) -> 3", "(length [2 0 2 4]) -> 4", "(length [6]) -> 1", "(length []) -> 0", "(length [9 7 9 5]) -> 4", "(length [9 0 7 5 2]) -> 5", "(length []) -> 0", "(length [0 3 8 5 9]) -> 5", "(length [4 3 2 1]) -> 4", "(length [5 2]) -> 2", "(length [7 0 4 9]) -> 4", "(length []) -> 0", "(length [2]) -> 1", "(length []) -> 0", "(length [1]) -> 1", "(length [9 9 9 8 6]) -> 5", "(length []) -> 0", "(length [1 6 2]) -> 3", "(length []) -> 0", "(length [2 5 9]) -> 3", "(length []) -> 0", "(length [8]) -> 1", "(length []) -> 0", "(length [9 5 2]) -> 3", "(length []) -> 0", "(length [2 2]) -> 2", "(length [3 4 4 1]) -> 4", "(length [2]) -> 1", "(length [5 6 6]) -> 3"], "time": 0.032802, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 7 2 5]) -> 4", "(length [8]) -> 1", "(length [3 8 2 9]) -> 4", "(length [6]) -> 1", "(length []) -> 0", "(length [5]) -> 1", "(length [6 1]) -> 2", "(length [6 2 5]) -> 3", "(length [0]) -> 1", "(length []) -> 0", "(length [7 6 1 2 8]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [4]) -> 1", "(length [2 0 7 6]) -> 4", "(length [6]) -> 1", "(length [8 1 7]) -> 3", "(length [5]) -> 1", "(length [0 3 5 4 5]) -> 5", "(length [0 1 8 4]) -> 4", "(length [3 7 4 6 8]) -> 5", "(length [5 2 7 3 8]) -> 5", "(length [5]) -> 1", "(length [6 4]) -> 2", "(length [2 6 8 0]) -> 4", "(length [9 2 7 7]) -> 4", "(length []) -> 0", "(length [6]) -> 1", "(length [4 7]) -> 2", "(length []) -> 0", "(length [7]) -> 1", "(length [6 1]) -> 2", "(length [8 0 7]) -> 3", "(length [1 0 6 2 9]) -> 5", "(length [2 9 9 4 6]) -> 5", "(length [4 2 6 1 3]) -> 5", "(length [7 1 8 8]) -> 4", "(length [3 2 8 4]) -> 4", "(length []) -> 0", "(length [9 2 3]) -> 3", "(length [6 3 6 0 8]) -> 5", "(length []) -> 0", "(length [4 2 1]) -> 3", "(length [3 2 9 1 5]) -> 5", "(length [8 7 9]) -> 3", "(length [7 4]) -> 2", "(length []) -> 0"], "time": 0.032942, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7]) -> 1", "(length [4 0 3 1 4]) -> 5", "(length [1 9]) -> 2", "(length []) -> 0", "(length [9 2 4 3]) -> 4", "(length [3 0 7 6 5]) -> 5", "(length [2 3 5]) -> 3", "(length [6 8 3 6 3]) -> 5", "(length [2]) -> 1", "(length [1 0 5 1]) -> 4", "(length [8]) -> 1", "(length [9 3]) -> 2", "(length [7]) -> 1", "(length [5 7 1 3]) -> 4", "(length [5 9 5]) -> 3", "(length [4 0 3 2]) -> 4", "(length []) -> 0", "(length [7 9 2]) -> 3", "(length [7 9 7 8]) -> 4", "(length [4 4 2 9]) -> 4", "(length [6]) -> 1", "(length [2]) -> 1", "(length [0 8]) -> 2", "(length [5 4 0 1 4]) -> 5", "(length [2]) -> 1", "(length [1 9 5 4]) -> 4", "(length [2]) -> 1", "(length [5 8 6 8]) -> 4", "(length [6 4 6 6 0]) -> 5", "(length [1 3 6 9 2]) -> 5", "(length [6 5 9 2]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length [1 2]) -> 2", "(length [3]) -> 1", "(length [0]) -> 1", "(length [6]) -> 1", "(length [8 1 1]) -> 3", "(length [1 3]) -> 2", "(length [4 5 0 1]) -> 4", "(length [7 3 5]) -> 3", "(length [2 0 5]) -> 3", "(length [2 6]) -> 2", "(length [0 6 2 2 8]) -> 5", "(length [0]) -> 1", "(length []) -> 0", "(length [4 5 7 8]) -> 4", "(length [7 1 6 1]) -> 4"], "time": 0.032487, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [2 1 4 7 5]) -> 5", "(length [5 3 2 1 1]) -> 5", "(length [6 2 6 3 3]) -> 5", "(length [4 4 9 6 7]) -> 5", "(length [2 5 2 6 8]) -> 5", "(length [6 3 3 5 2]) -> 5", "(length [1]) -> 1", "(length [2 3 3]) -> 3", "(length [7 1 7]) -> 3", "(length [3]) -> 1", "(length [6]) -> 1", "(length [6 1 7 2 4]) -> 5", "(length [6]) -> 1", "(length [5 4]) -> 2", "(length [8 9 6 7 6]) -> 5", "(length [8 0 3 7]) -> 4", "(length [5 5 0 7 4]) -> 5", "(length [5 4 0 8 9]) -> 5", "(length [2]) -> 1", "(length [6 6 9 2 1]) -> 5", "(length [4 4]) -> 2", "(length [3 9 9 2]) -> 4", "(length [0]) -> 1", "(length [5]) -> 1", "(length [2 9 5 1 9]) -> 5", "(length [6 6 0]) -> 3", "(length [4 9 9 9]) -> 4", "(length [3 3 1]) -> 3", "(length [6 2 0 4]) -> 4", "(length [8 0 0 0]) -> 4", "(length [8 0]) -> 2", "(length [0 8]) -> 2", "(length [0 0]) -> 2", "(length [3 3 8 2 2]) -> 5", "(length [2 8 5]) -> 3", "(length [1 7]) -> 2", "(length [2 6 3]) -> 3", "(length []) -> 0", "(length [0 5 5 1 0]) -> 5", "(length [7 3 7 5 5]) -> 5", "(length [5 5 4 0]) -> 4", "(length [2 0 9]) -> 3", "(length [8 5]) -> 2", "(length [7 8 6 8 3]) -> 5", "(length [2 5 9 9]) -> 4", "(length [2 9 5 0 9]) -> 5", "(length [8 1 7 6 8]) -> 5", "(length []) -> 0"], "time": 0.033705, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7 2 3]) -> 3", "(length []) -> 0", "(length [0 7 0 3]) -> 4", "(length [0]) -> 1", "(length []) -> 0", "(length [4 7 2]) -> 3", "(length [9 9 9]) -> 3", "(length []) -> 0", "(length [1 1]) -> 2", "(length [3 8 4]) -> 3", "(length []) -> 0", "(length [8 7]) -> 2", "(length [6 5]) -> 2", "(length [2 2 9 7 8]) -> 5", "(length [3 0 0 4 7]) -> 5", "(length [2 2 1 2 3]) -> 5", "(length []) -> 0", "(length [4 2 3]) -> 3", "(length [3 6 8]) -> 3", "(length [2 3 6 2 0]) -> 5", "(length [8 4]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [4 5 9 0 6]) -> 5", "(length [8 0 0]) -> 3", "(length [3 1 1 7 2]) -> 5", "(length [2]) -> 1", "(length [0 1 4 8]) -> 4", "(length [3]) -> 1", "(length [9 3]) -> 2", "(length [4 6 0]) -> 3", "(length [8 5 9]) -> 3", "(length [5 5]) -> 2", "(length []) -> 0", "(length [0 9 4 0 2]) -> 5", "(length [8 9 6]) -> 3", "(length []) -> 0", "(length [2 3]) -> 2", "(length [9 3 8 4 2]) -> 5", "(length [3 7 3 3]) -> 4", "(length [9 6 1 5]) -> 4", "(length []) -> 0", "(length [8 0 5 7]) -> 4", "(length []) -> 0", "(length [1 8 3 9 3]) -> 5", "(length [2 4]) -> 2", "(length []) -> 0", "(length [5]) -> 1"], "time": 0.032468, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [6 6 3 7 5]) -> 5", "(length [2 8]) -> 2", "(length [7 5 9 0]) -> 4", "(length [2]) -> 1", "(length [1 1 7 1]) -> 4", "(length [9 3 0 0 2]) -> 5", "(length []) -> 0", "(length [1 6 6]) -> 3", "(length [5 0 3 5]) -> 4", "(length [8 3 0]) -> 3", "(length [2 0 8 9 7]) -> 5", "(length []) -> 0", "(length [8 8 5]) -> 3", "(length [5 7 8 2]) -> 4", "(length [5 2 4 8 5]) -> 5", "(length []) -> 0", "(length [8 1 2 6]) -> 4", "(length [8 6 7 4 2]) -> 5", "(length [8]) -> 1", "(length []) -> 0", "(length [7 8 0]) -> 3", "(length [3]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [3 9 6 7 2]) -> 5", "(length [1 2 1 4 5]) -> 5", "(length [8]) -> 1", "(length [6 5]) -> 2", "(length [4 3 3 5 3]) -> 5", "(length [1 4]) -> 2", "(length [4 0 9 4 1]) -> 5", "(length [4 9]) -> 2", "(length [3 7 8]) -> 3", "(length [8 4 6 9]) -> 4", "(length [7 8 8 6]) -> 4", "(length [5]) -> 1", "(length [4 8 0 2 6]) -> 5", "(length [4]) -> 1", "(length [1 3 4 5]) -> 4", "(length [4 8 8 9 4]) -> 5", "(length [8 3 2]) -> 3", "(length [2 5 5]) -> 3", "(length [9 5 8]) -> 3", "(length [6 6 6 4 0]) -> 5", "(length [9]) -> 1", "(length [5]) -> 1", "(length []) -> 0"], "time": 0.033492, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
