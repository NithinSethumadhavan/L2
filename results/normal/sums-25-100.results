{"examples": ["(sums []) -> []", "(sums [[2 4 8 1] [4 1 7]]) -> [15 12]", "(sums []) -> []", "(sums [[4]]) -> [4]", "(sums [[] [7 5 4 1 9] []]) -> [0 26 0]", "(sums [[]]) -> [0]", "(sums [[2] [3 3 7 0] [1 0] [9 8 7 7] []]) -> [2 13 1 31 0]", "(sums []) -> []", "(sums []) -> []", "(sums [[1 8 8] [8 1 0] [9 8 7]]) -> [17 9 24]", "(sums [[4 1] [] [] [3 1 3] [0 2]]) -> [5 0 0 7 2]", "(sums []) -> []", "(sums [[7 5] [5] [9 2 9 9] [6 0 1 7 4]]) -> [12 5 29 18]", "(sums [[9 2] [4 6 5 8 2]]) -> [11 25]", "(sums [[1 3 1 9] [6 4 4] [] [8 9 0]]) -> [14 14 0 17]", "(sums [[7 5 7]]) -> [19]", "(sums [[9] [4 3 1] [6] [8] [0 6]]) -> [9 8 6 8 6]", "(sums [[6 0 0 6 8]]) -> [20]", "(sums [[7] [] [9 4 0 9]]) -> [7 0 22]", "(sums [[4 5 6 3] [9 1 7 6] [6 5 0 8] []]) -> [18 23 19 0]", "(sums [[9 1 0 2] [0] [] [6 5 0 1] [1 5]]) -> [12 0 0 12 6]", "(sums [[6 4 0] [9 3 5 2] [4 2 2 3 4] [8 2 3 8 7]]) -> [10 19 15 28]", "(sums [[6 8] [4 5]]) -> [14 9]", "(sums [[] [3 2 2 4] [3 9 9 6 2] [4 8 2]]) -> [0 11 29 14]"], "time": 0.343853, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 7] [1 1 4 2 6]]) -> [14 14]", "(sums [[] []]) -> [0 0]", "(sums [[8 6]]) -> [14]", "(sums [[6 3 4] [5 3 8 6] []]) -> [13 22 0]", "(sums [[9 8 2] [8 2 0] [5 7] [4 0 3]]) -> [19 10 12 7]", "(sums [[1] [0 1 4] [1] [5] [3 1]]) -> [1 5 1 5 4]", "(sums [[] [5] [7 4 6 2]]) -> [0 5 19]", "(sums [[3] [0 3] [0 8 8 5 1] [] []]) -> [3 3 22 0 0]", "(sums [[1 9 9] [5]]) -> [19 5]", "(sums [[6 3] [7] [5 5 8 0] [7 2]]) -> [9 7 18 9]", "(sums [[7 5] [2 2 3 4 9] [3 4 6] [2]]) -> [12 20 13 2]", "(sums [[7 7 1 9] [] [9 3 3] [0 2 9 3]]) -> [24 0 15 14]", "(sums []) -> []", "(sums [[1 2 1] []]) -> [4 0]", "(sums []) -> []", "(sums [[] [2 5 8 1] [6] [9 5 7 6]]) -> [0 16 6 27]", "(sums [[0] [] [] [0 5 8]]) -> [0 0 0 13]", "(sums [[6 2 0] []]) -> [8 0]", "(sums [[1 9] [5 7 9 9 0]]) -> [10 30]", "(sums [[] [9] [7 5]]) -> [0 9 12]", "(sums [[0] [4 6 3 4]]) -> [0 17]", "(sums [[0 5] [9 8 8 7 0]]) -> [5 32]", "(sums [[] [2] [4 5 5] [6 8 5 8]]) -> [0 2 14 27]"], "time": 0.396788, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[]]) -> [0]", "(sums [[4 2]]) -> [6]", "(sums [[7 8 0 4] [8 4 8] []]) -> [19 20 0]", "(sums []) -> []", "(sums [[5 1 9 9 8]]) -> [32]", "(sums []) -> []", "(sums [[0 0 5 9] [1] [5 4]]) -> [14 1 9]", "(sums [[2 6] [9] [7 9 5 1 4]]) -> [8 9 26]", "(sums [[6 0 8 0 5] [9 9 7] [0 1 3]]) -> [19 25 4]", "(sums [[1 3 9 8] [] [7 4 5 7 2] [] []]) -> [21 0 25 0 0]", "(sums [[9]]) -> [9]", "(sums [[7 5 9 5 9] [2 7 0] [6]]) -> [35 9 6]", "(sums []) -> []", "(sums [[2 5 4] [5 5 3] [7 2]]) -> [11 13 9]", "(sums [[] [7 0 5 7]]) -> [0 19]", "(sums [[] [8] [] [8 5 7] []]) -> [0 8 0 20 0]", "(sums [[2 9 0 8] [8 5 7 1] [4 3 6 1]]) -> [19 21 14]", "(sums [[8] [9 3 9 5 1] [5 4 2 3 0] [2 6 3]]) -> [8 27 14 11]", "(sums [[7 6 9 2] [7 6] [5 2 1] []]) -> [24 13 8 0]", "(sums [[7 9 3 5 9] [2 7 0 6]]) -> [33 15]", "(sums []) -> []", "(sums [[5 4 9] [6 0 7 4 4] [8] [8 0]]) -> [18 21 8 8]", "(sums [[] []]) -> [0 0]"], "time": 0.417503, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0] [5 7] [] [6 6 7 1]]) -> [0 12 0 20]", "(sums [[3] [6 2 8]]) -> [3 16]", "(sums [[4]]) -> [4]", "(sums [[3 4] [9 3] [8 0 3] [4] [1 1 0 2 7]]) -> [7 12 11 4 11]", "(sums [[8 6] [5 3 6 1 1] [7 9]]) -> [14 16 16]", "(sums []) -> []", "(sums [[2 9 4 6 0] [3 9] []]) -> [21 12 0]", "(sums [[0 6] [5 8 4 2 1] [4 5 3 5 9]]) -> [6 20 26]", "(sums [[1 1 7] [] [3 3 1 3] [3]]) -> [9 0 10 3]", "(sums [[7 8] [9 2] [4] [] [6 4 3 4]]) -> [15 11 4 0 17]", "(sums [[9 2 6] [9 8 1 9]]) -> [17 27]", "(sums []) -> []", "(sums [[] [9 5 5 4] [2]]) -> [0 23 2]", "(sums [[] [4]]) -> [0 4]", "(sums [[] [8 3] [3 8 1 0] [9 6 0 6 5] [9 9]]) -> [0 11 12 26 18]", "(sums [[8 6 0 3] [] [3] [] [1]]) -> [17 0 3 0 1]", "(sums [[0 2 0 3 8] [1 7 4] [3] [2 4 2]]) -> [13 12 3 8]", "(sums [[7 8 2 2] [0 5] [8 0]]) -> [19 5 8]", "(sums [[6 9 0 7 2] [4 4 1]]) -> [24 9]", "(sums []) -> []", "(sums [[] [4 3 7 9] [3] [0 0]]) -> [0 23 3 0]", "(sums [[] [] [6] [8 1 6 6] [3 9 7]]) -> [0 0 6 21 19]", "(sums [[5 8 5 4] [7]]) -> [22 7]"], "time": 0.44469, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 6 2] [5 7 8 6] [9 4 8 9 6] [0 2] [1 4 3 0]]) -> [17 26 36 2 8]", "(sums [[9 3 6] [9 9 7 0]]) -> [18 25]", "(sums [[]]) -> [0]", "(sums []) -> []", "(sums [[7]]) -> [7]", "(sums [[1] [8 0 2] [7 7 4 1]]) -> [1 10 19]", "(sums [[1 6 5 7] [8 0 6 2 6] [] [5 4]]) -> [19 22 0 9]", "(sums [[] [4 8 3 0 6] [0 4 6 2 7]]) -> [0 21 19]", "(sums [[8 1 6] [1 4] [7 5 6 9] [3 2 6 7 6]]) -> [15 5 27 24]", "(sums [[3 2 2 4 7] [0] [7 5 2] [2 1 5 3 6]]) -> [18 0 14 17]", "(sums [[2]]) -> [2]", "(sums [[5] [2 9 0 0 4]]) -> [5 15]", "(sums [[0 4 6 7]]) -> [17]", "(sums [[7 4 8 6] [0 9] [5 5]]) -> [25 9 10]", "(sums [[2 2 4] [5 9 6 6] [2 0] [4 2]]) -> [8 26 2 6]", "(sums []) -> []", "(sums []) -> []", "(sums []) -> []", "(sums [[8 2 6 2 5]]) -> [23]", "(sums [[7 0] [] [] [3 9] [2]]) -> [7 0 0 12 2]", "(sums [[3 7 4 4] [] []]) -> [18 0 0]", "(sums [[4 5]]) -> [9]", "(sums []) -> []"], "time": 0.426076, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [] [4 3 4 9]]) -> [0 0 20]", "(sums [[] [2 1] [3]]) -> [0 3 3]", "(sums [[3 8]]) -> [11]", "(sums [[4 2] [4 4 2 8 7] [7 6 8 8 6] []]) -> [6 25 35 0]", "(sums [[] [3 3 2 1 3] [1 9 0 2 5] [4 0 9 9]]) -> [0 12 17 22]", "(sums [[3 8] [4 4 4]]) -> [11 12]", "(sums []) -> []", "(sums [[6] [4]]) -> [6 4]", "(sums []) -> []", "(sums []) -> []", "(sums [[8 5 9 5 6]]) -> [33]", "(sums [[] [0 8] [7] [2]]) -> [0 8 7 2]", "(sums []) -> []", "(sums []) -> []", "(sums [[4 3 4] []]) -> [11 0]", "(sums []) -> []", "(sums []) -> []", "(sums [[4]]) -> [4]", "(sums [[] [6 6 8 0 2] [7 4] [6 2 1 4 2] []]) -> [0 22 11 15 0]", "(sums [[9 2 4 8 3] [7 4 3 1 7] [9 1 8]]) -> [26 22 18]", "(sums [[0 3 5] [1 1 3] [8 1 1]]) -> [8 5 10]", "(sums [[] [] []]) -> [0 0 0]", "(sums [[6 0 6] [7 0 6 0] [6 7] [7 9] [9]]) -> [12 13 13 16 9]"], "time": 0.45028, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 9 1] [5 2 1 5]]) -> [19 13]", "(sums []) -> []", "(sums [[] [8] [0 2 1 2 4] [3 1 7 3 8] [2 1 0]]) -> [0 8 9 22 3]", "(sums [[3 7] [1 9 0 0] []]) -> [10 10 0]", "(sums []) -> []", "(sums [[3] [0 4 7]]) -> [3 11]", "(sums [[9 3 7] [7 5] [0 4 5] [1 9 3 3]]) -> [19 12 9 16]", "(sums []) -> []", "(sums [[7 2 7]]) -> [16]", "(sums [[] [9] [9] [3 3 2]]) -> [0 9 9 8]", "(sums [[8] [4 6 6 0] [9 8 2 9 3]]) -> [8 16 31]", "(sums [[0 8 6] [5 0 5 1 9] [6 7] [2 2 8 3] [5 9]]) -> [14 20 13 15 14]", "(sums [[6 4 3 1] [8]]) -> [14 8]", "(sums [[0] [2 7 3 3 0]]) -> [0 15]", "(sums [[5 4] [9 4 1 6] [4 2 8]]) -> [9 20 14]", "(sums [[3 4 3 6 5] [] [4 6 7 3 6] [8 5 5 2]]) -> [21 0 26 20]", "(sums [[6] [1 9 8 8 1] [6 1 3 6]]) -> [6 27 16]", "(sums [[] [6 1] [5] [1 2]]) -> [0 7 5 3]", "(sums [[]]) -> [0]", "(sums [[8 7 2 7]]) -> [24]", "(sums [[1 0] [3 5 2 2] [7 6 6]]) -> [1 12 19]", "(sums [[8 3]]) -> [11]", "(sums [[] [] [2 5 8 2 4]]) -> [0 0 21]"], "time": 0.386779, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums []) -> []", "(sums [[5] [0 7 7 7] []]) -> [5 21 0]", "(sums [[1 9 6]]) -> [16]", "(sums [[8] [7 3 7 5] [6 9 8]]) -> [8 22 23]", "(sums [[9 3 0] [1 2] []]) -> [12 3 0]", "(sums [[9 4] [7 3 6]]) -> [13 16]", "(sums [[4 2 2 1 8] [8 4]]) -> [17 12]", "(sums [[] [4 0 5 2] [9 8 9 3 8] []]) -> [0 11 37 0]", "(sums [[]]) -> [0]", "(sums [[8 0 4] [2 9 1 2] [6 6 0 7]]) -> [12 14 19]", "(sums [[9] [6 5 4 8 9] [7 5]]) -> [9 32 12]", "(sums [[9 5 5 0 8] [8 2 8 3] [7 9 9] [2 1 8 7 5]]) -> [27 21 25 23]", "(sums [[2] [5 2 1 5] [4] [9 3 5 8 1]]) -> [2 13 4 26]", "(sums [[8] []]) -> [8 0]", "(sums [[3] [4 6 5 5] [] [8 9]]) -> [3 20 0 17]", "(sums [[7] [6 5]]) -> [7 11]", "(sums []) -> []", "(sums [[6 3 2 2 1] [] [3] [9 6]]) -> [14 0 3 15]", "(sums [[3 4] [] [1 7 4 4] [2 5 6 6] [9 7 8]]) -> [7 0 16 19 24]", "(sums []) -> []", "(sums [[4 1 0 9] [7 2] [9 6] [6 6 7] [3 5 7 7]]) -> [14 9 15 19 22]", "(sums [[9 3 2 1 6] [1 7 8] [9 9 8 9 4] [] []]) -> [21 16 39 0 0]"], "time": 0.554189, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8] [0 9] [6 4 5 2]]) -> [8 9 17]", "(sums []) -> []", "(sums []) -> []", "(sums [[6] [1] []]) -> [6 1 0]", "(sums [[5 2] [2 8 4]]) -> [7 14]", "(sums [[] [3 4 4 0 8] [8] [5 6 3 3 9]]) -> [0 19 8 26]", "(sums [[4 1 8 2 7] [0 3 6 4 6] [] [1 3 8]]) -> [22 19 0 12]", "(sums [[1 9 7 2] [] [8 6 0 2 0]]) -> [19 0 16]", "(sums []) -> []", "(sums [[4 5 0] [4 4] [1 9]]) -> [9 8 10]", "(sums [[0 5 4] [8 2] [3 4] [3]]) -> [9 10 7 3]", "(sums [[2] [7]]) -> [2 7]", "(sums []) -> []", "(sums [[6 8 6 8 6] [6 1 2] [] [2 0 7 1 4] [5 0]]) -> [34 9 0 14 5]", "(sums [[2 1 9 6 9] [] [1 9 5 1] [4 6]]) -> [27 0 16 10]", "(sums [[4]]) -> [4]", "(sums []) -> []", "(sums []) -> []", "(sums [[9]]) -> [9]", "(sums [[2 0 4] [4 3] [2] []]) -> [6 7 2 0]", "(sums [[9 9] [9 7 4 7]]) -> [18 27]", "(sums [[0]]) -> [0]", "(sums []) -> []"], "time": 0.60238, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 2 6]]) -> [14]", "(sums []) -> []", "(sums [[5 2 1 6 0]]) -> [14]", "(sums [[0 1 6 9 5] [4 5 8] [6 1 1 1 5] []]) -> [21 17 14 0]", "(sums [[0 3 3 5] [8 3 2 2 2] [0 9 7 5] [0 8 8 9 1]]) -> [11 17 21 26]", "(sums []) -> []", "(sums []) -> []", "(sums []) -> []", "(sums [[2 7] [] [0 5 3 7]]) -> [9 0 15]", "(sums [[7 5]]) -> [12]", "(sums [[4 4 3] [2]]) -> [11 2]", "(sums [[9 0 9 1 5] [9 5 7 5 5] [1] [6 1] [5 0 5]]) -> [24 31 1 7 10]", "(sums [[]]) -> [0]", "(sums [[6 3 6]]) -> [15]", "(sums [[] [1] [4]]) -> [0 1 4]", "(sums []) -> []", "(sums [[2] [2 8 3 4 7] [9] [4] [4 4 2 4 0]]) -> [2 24 9 4 14]", "(sums [[8 8 3 3 5] [5 7 7 2 2] [0 0 2] [3]]) -> [27 23 2 3]", "(sums [[9] [9 0 8] [6 9 4] [9 3 8 9]]) -> [9 17 19 29]", "(sums [[5 2 8 6 3] [3 0]]) -> [24 3]", "(sums []) -> []", "(sums [[7 6]]) -> [13]", "(sums [[8 4] [4 6] [7 4 4 0] [8] [9 3 3 1]]) -> [12 10 15 8 16]"], "time": 0.586416, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 1] [] [3] [4] [4 4 8 0]]) -> [7 0 3 4 16]", "(sums [[9 3 2] [7 2 1 3] [6 1]]) -> [14 13 7]", "(sums [[] [1 7 3 2] [1 6 9 0 3] [7 2 4 8]]) -> [0 13 19 21]", "(sums [[5]]) -> [5]", "(sums [[6 2 7 4 0] [4 1 2 8 1] [2 4 9 8] [] []]) -> [19 16 23 0 0]", "(sums [[0 2 2 3 3] [8 3 6 9] [3 1]]) -> [10 26 4]", "(sums [[3 5 3 1 5] [6 3 5]]) -> [17 14]", "(sums []) -> []", "(sums [[5 9 6 2 7] [] [] [1 5]]) -> [29 0 0 6]", "(sums []) -> []", "(sums []) -> []", "(sums [[9 6 3 8] [0 7 1 6] [] [5] [5 1 7]]) -> [26 14 0 5 13]", "(sums [[9 6 8 1 5]]) -> [29]", "(sums []) -> []", "(sums [[] [3 7 5 0] [9 6 1]]) -> [0 15 16]", "(sums [[] [5 0 9 9]]) -> [0 23]", "(sums [[2] [7 3] [9 7 2 5] [8]]) -> [2 10 23 8]", "(sums [[8 6 5 8] [4 2 3 7 4] [9]]) -> [27 20 9]", "(sums [[6 2 3 5] [5 6 2] [8 6 8 3] [4 5 4 6 8] [6 4 4]]) -> [16 13 25 27 14]", "(sums [[3 7] [4 4 9 6 5] [5 7 5 1 4]]) -> [10 28 22]", "(sums [[7 8 2 9 2]]) -> [28]", "(sums [[]]) -> [0]", "(sums [[] [] [4 9 8 1 3] [4 9 6 3 1]]) -> [0 0 25 23]"], "time": 0.623791, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 6 5 7 8] [1] [7 7 4 8] [1] [3 0 6 5 1]]) -> [34 1 26 1 15]", "(sums [[8 1 3 1 8]]) -> [21]", "(sums [[7 6 7]]) -> [20]", "(sums [[9 0] [9 1 2 3 8] [1 6 4] [1 2 1] [3 8 6 9]]) -> [9 23 11 4 26]", "(sums [[]]) -> [0]", "(sums [[] [7 0 7 6 2] []]) -> [0 22 0]", "(sums [[2 0 3] [4] [0 5 2] []]) -> [5 4 7 0]", "(sums [[7 3 0 9 8]]) -> [27]", "(sums []) -> []", "(sums [[]]) -> [0]", "(sums []) -> []", "(sums [[2 1 9 9] [7 3] [0 3] [7 7]]) -> [21 10 3 14]", "(sums []) -> []", "(sums [[8 8] [] [9] [] [3]]) -> [16 0 9 0 3]", "(sums [[3] [3 3] [2 1 3]]) -> [3 6 6]", "(sums [[9] [0] [3 4 6 2 6]]) -> [9 0 21]", "(sums [[7 2] [2] [7 5 3 9] [8 3 1] [2]]) -> [9 2 24 12 2]", "(sums [[] [3 3] [7 8 8] [4 7 2 6]]) -> [0 6 23 19]", "(sums [[2 1 1] [0 8 5]]) -> [4 13]", "(sums [[6 4] [2] [7]]) -> [10 2 7]", "(sums [[3 8] [2 2] [0] [8 9 2] [5]]) -> [11 4 0 19 5]", "(sums [[9 5 7] [8 1 2] []]) -> [21 11 0]", "(sums [[8 8] [2 8 7 1] [2] [0 8]]) -> [16 18 2 8]"], "time": 0.633017, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[2]]) -> [2]", "(sums [[4 6] [2 4 0] [2 4] [0 9 5 3]]) -> [10 6 6 17]", "(sums [[7 7 1]]) -> [15]", "(sums []) -> []", "(sums [[]]) -> [0]", "(sums []) -> []", "(sums []) -> []", "(sums [[7 4]]) -> [11]", "(sums [[9 0 3 6 3]]) -> [21]", "(sums [[0 3 2 0] [9 3] [6 5] [6 3 1] [0 7]]) -> [5 12 11 10 7]", "(sums [[] [9 7 2] [8 7 5] [4 7 6]]) -> [0 18 20 17]", "(sums [[6 8 9 6] [3 8 5 5] [1 8 3 4] [7 5] [9 7 1 8 7]]) -> [29 21 16 12 32]", "(sums [[2 9 6] [4] [0] [8] [1 6]]) -> [17 4 0 8 7]", "(sums [[0] [3]]) -> [0 3]", "(sums [[] [3 4 7 1] [] [1]]) -> [0 15 0 1]", "(sums [[3 3] [6 0]]) -> [6 6]", "(sums [[3 0] [2 3] [1 5]]) -> [3 5 6]", "(sums [[6 2 6] [1 0] [1 3 5 6] [2 4 2 7] [9 7 3 8 4]]) -> [14 1 15 15 31]", "(sums [[8 8 7] [1 9 4 9 0] [] [5 1 5 7 4] [5 5 3]]) -> [23 23 0 22 13]", "(sums []) -> []", "(sums [[0] [9] [] [4] []]) -> [0 9 0 4 0]", "(sums [[4] [3 3 1 6 6]]) -> [4 19]"], "time": 0.605242, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[0] [5 9]]) -> [0 14]", "(sums []) -> []", "(sums [[4 4 8 9 7] [4 6 9] [7 2 1 5 1] [6 2] []]) -> [32 19 16 8 0]", "(sums [[6 2] [3 8 9] [] [1 9]]) -> [8 20 0 10]", "(sums [[2 5 2 2 5] [8 8]]) -> [16 16]", "(sums [[4] [2 8] [1 4 9 2 5] [0 5 7 7]]) -> [4 10 21 19]", "(sums [[5]]) -> [5]", "(sums [[] [3 9 0 3 2] [8] []]) -> [0 17 8 0]", "(sums []) -> []", "(sums [[0 3]]) -> [3]", "(sums [[0] [6 1 8]]) -> [0 15]", "(sums [[6 9 7 9 7]]) -> [38]", "(sums [[7]]) -> [7]", "(sums []) -> []", "(sums []) -> []", "(sums [[] [9 5 5 4 2] [6 9 2] [4 1 5 8]]) -> [0 25 17 18]", "(sums [[3 0] [1]]) -> [3 1]", "(sums []) -> []", "(sums [[9]]) -> [9]", "(sums []) -> []", "(sums [[] [4 0 5] [5 6 4] [8 9 4 2]]) -> [0 9 15 23]", "(sums [[] [2 6 0 9] [5 2 2] [] [0 9 2]]) -> [0 17 9 0 11]"], "time": 0.611031, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0 2] [6 8 3] []]) -> [2 17 0]", "(sums [[] [1 1 6 7 5] [1] [3 1 5 0 2]]) -> [0 20 1 11]", "(sums [[0 7 2 7] [5 9 6] [] [3]]) -> [16 20 0 3]", "(sums []) -> []", "(sums [[] [0] [7 0 2] []]) -> [0 0 9 0]", "(sums [[6 2 4 5 6]]) -> [23]", "(sums []) -> []", "(sums [[2 7 1 4] []]) -> [14 0]", "(sums [[] [7 3] [1 1] [7]]) -> [0 10 2 7]", "(sums []) -> []", "(sums [[] [4 1] [1 6] [9 0 4 0]]) -> [0 5 7 13]", "(sums [[9 2 3] [1 9 2 1 3] [] [5 7]]) -> [14 16 0 12]", "(sums [[6 4 3 6 6] [3 0] [0 7]]) -> [25 3 7]", "(sums [[3] [2]]) -> [3 2]", "(sums [[9]]) -> [9]", "(sums [[3 1 8 5 3] [8 0] [5 1 5 1] [5]]) -> [20 8 12 5]", "(sums [[0 8 3 3 4] [7 6 2 9 9] [4] [0]]) -> [18 33 4 0]", "(sums [[] [8 3 7 5]]) -> [0 23]", "(sums [[] [3 0 1 1] [6 4 9 1 2] []]) -> [0 5 22 0]", "(sums [[8] [0 1 1 6] [5 8 1]]) -> [8 8 14]", "(sums [[] [8] [9 5 6 6 0]]) -> [0 8 26]", "(sums []) -> []", "(sums [[2 0 1 5 7] [9 1] [1 9 0 4 0]]) -> [15 10 14]"], "time": 0.593633, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 4] [] [7 4 7 8 3]]) -> [11 0 29]", "(sums [[8 1]]) -> [9]", "(sums [[] [7 9 9 1] [] []]) -> [0 26 0 0]", "(sums [[6 0] [3] [1] [3]]) -> [6 3 1 3]", "(sums [[5 1] [4 9] [0 9 0 8] [1] [3 3]]) -> [6 13 17 1 6]", "(sums [[7 5 5 0 5] [3 8 1 2 8] []]) -> [22 22 0]", "(sums [[4 8 6 7 4] [4 6 0 2] [5] [0 9 3]]) -> [29 12 5 12]", "(sums [[9 4 7 4] [] [5 0 2] [2 3 8] [1 2 6 0 0]]) -> [24 0 7 13 9]", "(sums [[3 6 8] [0 1 9]]) -> [17 10]", "(sums [[1 4 3 2] []]) -> [10 0]", "(sums [[1 7 0 3] [3 2 3 1]]) -> [11 9]", "(sums []) -> []", "(sums [[5 7 8] [8 2] [0] [7 0 1]]) -> [20 10 0 8]", "(sums [[7] [2] [] [0 0]]) -> [7 2 0 0]", "(sums []) -> []", "(sums [[]]) -> [0]", "(sums [[3] [5 4 7]]) -> [3 16]", "(sums [[1 4 0 9 7] [8 3 6 4] [3 9 0] [4 3 5]]) -> [21 21 12 12]", "(sums [[8 6 8] [] [2 8 4 3] [7 3 9 0 4] []]) -> [22 0 17 23 0]", "(sums [[2 9 2] [] []]) -> [13 0 0]", "(sums [[6 7]]) -> [13]", "(sums [[4 2 9 7 9] [] [1 5]]) -> [31 0 6]", "(sums [[0 3 9 5 7] [0] [7 5 1 4]]) -> [24 0 17]"], "time": 0.619385, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2] [] [9 5] [3 5]]) -> [2 0 14 8]", "(sums [[1 1 9] [6 9 4 6 8] [5 3] [6] []]) -> [11 33 8 6 0]", "(sums [[2 5 5 5] [5 9 8 1 3] [2 5 8 4 7] [2 1 7 6 7] []]) -> [17 26 26 23 0]", "(sums [[2 8 9]]) -> [19]", "(sums []) -> []", "(sums [[4] [4 0 7 4 7] [] []]) -> [4 22 0 0]", "(sums [[3 1]]) -> [4]", "(sums [[6 5 8 5] [2 6 2 5]]) -> [24 15]", "(sums []) -> []", "(sums [[4 5] [6 8] [3 1 9] [2 7]]) -> [9 14 13 9]", "(sums [[8 2] [9 3 9] [1 8 5]]) -> [10 21 14]", "(sums []) -> []", "(sums [[] [4 7]]) -> [0 11]", "(sums [[8 8 9] [5 3 2 8] [6 1 7 3 3]]) -> [25 18 20]", "(sums []) -> []", "(sums [[]]) -> [0]", "(sums [[3 6 1 1] [3 0 6] [9 4 2 0] [0 1]]) -> [11 9 15 1]", "(sums [[] [1 6 7]]) -> [0 14]", "(sums [[9 7 5]]) -> [21]", "(sums []) -> []", "(sums [[] [3 0 7]]) -> [0 10]", "(sums [[] [0 2 8]]) -> [0 10]", "(sums [[5 8 0 6 3] [7 4 6 8] [0] [2 6 3 0] [6]]) -> [22 25 0 11 6]"], "time": 0.369892, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 1 2]]) -> [11]", "(sums []) -> []", "(sums [[8 3 4 3 6] [6 4]]) -> [24 10]", "(sums [[] [] [] [5 3 5]]) -> [0 0 0 13]", "(sums [[4 8] [2 0 8]]) -> [12 10]", "(sums [[5 2 5] [] [0 5 5 7] [6 0]]) -> [12 0 17 6]", "(sums []) -> []", "(sums [[2 1] [8 4 3 7 3] [6 2 2 8] [7 9 2] [6 5 2]]) -> [3 25 18 18 13]", "(sums [[8 8] [6 7 8 7] [6 7]]) -> [16 28 13]", "(sums [[] [3 5 7]]) -> [0 15]", "(sums [[5 8 2 9] [8 4 3 8] [9 4 7]]) -> [24 23 20]", "(sums []) -> []", "(sums [[0 6 1] [0 7 6]]) -> [7 13]", "(sums [[1] [6 2 1] [6 8] [9 0]]) -> [1 9 14 9]", "(sums [[0 4 3 6] [1 2]]) -> [13 3]", "(sums [[] [3 2 7]]) -> [0 12]", "(sums []) -> []", "(sums [[1 5 5] [5] [1 5 7]]) -> [11 5 13]", "(sums [[7 7] [4 7]]) -> [14 11]", "(sums []) -> []", "(sums [[4 0 8 7] [] [8 1 4 8] []]) -> [19 0 21 0]", "(sums [[2] [7 5 4 7 6] [3 1 2] [9 6]]) -> [2 29 6 15]", "(sums [[3] [] [2 1 8 6] [5 0 9]]) -> [3 0 17 14]"], "time": 0.402699, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[3] [6 3 4 8 4] [6 8 3 8 5] [9]]) -> [3 25 30 9]", "(sums [[] [0] [2 2 6 4 3]]) -> [0 0 17]", "(sums [[9]]) -> [9]", "(sums [[6 6]]) -> [12]", "(sums [[0 3] [8 9 0 4]]) -> [3 21]", "(sums [[7 3] [3] [4 8 8 4 4] [7 0 1 3]]) -> [10 3 28 11]", "(sums [[] [0 0] [4 4 4 1]]) -> [0 0 13]", "(sums [[7 7 8 7]]) -> [29]", "(sums [[8 3] [3 4 8 0 2] [8 5]]) -> [11 17 13]", "(sums [[] [8 1 0 4 4] [0 0 5 9]]) -> [0 17 14]", "(sums [[8 9] [8 7 5 7] [1 6 0 7] [0 3 5] []]) -> [17 27 14 8 0]", "(sums []) -> []", "(sums [[8 8] [7 0 5 2 6] [8 7 7 7] [2 1 0] [3]]) -> [16 20 29 3 3]", "(sums [[9 1 9 0] [4 3 6 5 7] [0 6 4 2 6]]) -> [19 25 18]", "(sums [[1 3 3] [8 0 0 5 7] [1 0 0 2] [0]]) -> [7 20 3 0]", "(sums [[8 7 3 6 8] [6]]) -> [32 6]", "(sums [[3 5 9 6 3] [8 2 6 5] [0 1 0 6 6] [6 3 8 1 2]]) -> [26 21 13 20]", "(sums [[2 1 3 3 2] [7 8] [3] [3] [2 0]]) -> [11 15 3 3 2]", "(sums []) -> []", "(sums []) -> []", "(sums [[] [8 2 6] [3 0] [3 6]]) -> [0 16 3 9]", "(sums [[4 4] [3 0 7 9] [6] []]) -> [8 19 6 0]", "(sums [[7 5 2 2 0] [0 6 4] [9 4 7 2]]) -> [16 10 22]"], "time": 0.446371, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 2] [5 6]]) -> [6 11]", "(sums []) -> []", "(sums [[6 1 9 3] [6 0]]) -> [19 6]", "(sums [[8] [8 2 4 8] [7 2 0 4 6]]) -> [8 22 19]", "(sums [[0 1] [] [9 6 5 5]]) -> [1 0 25]", "(sums []) -> []", "(sums [[3 4 4] [2 4 8 9]]) -> [11 23]", "(sums [[7 7 2 6 7]]) -> [29]", "(sums [[9 0 4 2 8]]) -> [23]", "(sums [[] [0 6] [9 7 9 2] [2 3 7 9] [8 5]]) -> [0 6 27 21 13]", "(sums [[4 3 6] [2 2 7] []]) -> [13 11 0]", "(sums [[1] [8 1 9] []]) -> [1 18 0]", "(sums []) -> []", "(sums [[] [5 4 7] [8] [2 7 1 7] [1 5 7]]) -> [0 16 8 17 13]", "(sums [[4] [7 5] [] [] [5 3 2]]) -> [4 12 0 0 10]", "(sums [[1 5 3 9 1] [9] [6 2]]) -> [19 9 8]", "(sums []) -> []", "(sums [[9 0] [0 3 1 7] [0 7 0 8 0] [9 9] [5]]) -> [9 11 15 18 5]", "(sums [[3 5 7]]) -> [15]", "(sums []) -> []", "(sums []) -> []", "(sums [[5 7 1 9] [2 1 6] [7 1]]) -> [22 9 8]", "(sums []) -> []"], "time": 0.477532, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2 7 3] [] [1] [4 9 9 4] [3 9 4 3]]) -> [12 0 1 26 19]", "(sums []) -> []", "(sums [[4] [] [5 8 8 4 1] []]) -> [4 0 26 0]", "(sums [[3 1 6 0] [9 8 7 5 0]]) -> [10 29]", "(sums [[5 4 4 8] [4 1 1 8] []]) -> [21 14 0]", "(sums [[] [1]]) -> [0 1]", "(sums [[7] [] [0 2 9 7]]) -> [7 0 18]", "(sums [[] [0 5 9 2] [9 8 6 1] [5 2 4]]) -> [0 16 24 11]", "(sums [[] [6 1 0] [5 0 2 2 0] [] [4 8 8 8 4]]) -> [0 7 9 0 32]", "(sums [[8] [0] []]) -> [8 0 0]", "(sums [[0] [2 0 9 4 2] [1] [6] [8]]) -> [0 17 1 6 8]", "(sums [[7] [8 7 1]]) -> [7 16]", "(sums [[0] [6] [7 2]]) -> [0 6 9]", "(sums [[] [3 9 8 7] [9 4 4]]) -> [0 27 17]", "(sums [[5 9 1 8] [7 8 9] [0 9] [3 5 5 6 7]]) -> [23 24 9 26]", "(sums [[] [2 1 4] [5 7] [9 0 4 4]]) -> [0 7 12 17]", "(sums [[9 7 5 3 4] [6 2] [3 2 5] [3 3 2] [3 2 1]]) -> [28 8 10 8 6]", "(sums [[0 7 5 0 6]]) -> [18]", "(sums [[6]]) -> [6]", "(sums [[8 0 2 2] [5 5 0] [] [3 5]]) -> [12 10 0 8]", "(sums []) -> []", "(sums [[3 1 9 2 6] [1 8 3 8]]) -> [21 20]", "(sums []) -> []"], "time": 0.468042, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6] [8 2] [3 3] []]) -> [6 10 6 0]", "(sums [[6 2] [6]]) -> [8 6]", "(sums [[3 6 0] [9 5 1]]) -> [9 15]", "(sums [[] [0] [9 7]]) -> [0 0 16]", "(sums [[]]) -> [0]", "(sums [[9 5 6] [5 6 0 9] [] [9 1 2 6 6] []]) -> [20 20 0 24 0]", "(sums [[4] [7 5]]) -> [4 12]", "(sums [[5 3]]) -> [8]", "(sums [[2 6 8 9]]) -> [25]", "(sums [[] [9 4] [0 2] [4 0 8 2]]) -> [0 13 2 14]", "(sums [[2 9 6 5 1] [8 2]]) -> [23 10]", "(sums [[2]]) -> [2]", "(sums [[2 4] [2 1 6 6 6] [6]]) -> [6 21 6]", "(sums [[1 4 3 4 5]]) -> [17]", "(sums [[9 1 2]]) -> [12]", "(sums []) -> []", "(sums [[6 9] [] [5 0] [9 5 3 4 0] [2 1 6 5 1]]) -> [15 0 5 21 15]", "(sums []) -> []", "(sums [[1 3 5 2] [2 3 4 2] [0 9] [9 5 6 0 3] [2 4 4 8 4]]) -> [11 11 9 23 22]", "(sums [[8 6 7] [3 1 5 9 1] [2 6 2 0] [5 0 1 9 8] [9 1 4 9]]) -> [21 19 10 23 23]", "(sums [[5 3] [9 3 2 9 8]]) -> [8 31]", "(sums []) -> []", "(sums [[3 5 7 9 4]]) -> [28]"], "time": 0.53218, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums []) -> []", "(sums []) -> []", "(sums [[7 6 4 5 7] []]) -> [29 0]", "(sums [[8 0 5 3]]) -> [16]", "(sums [[4 0 1 7] [5 2] [6] [2 8 3 5]]) -> [12 7 6 18]", "(sums [[9] [7 7 0 8 4] [3 0 2 7 6] [1 3 8 8]]) -> [9 26 18 20]", "(sums [[3] [] [4 1] [2 2 5 8]]) -> [3 0 5 17]", "(sums [[6 2 1]]) -> [9]", "(sums []) -> []", "(sums []) -> []", "(sums [[1 7 4 8] [8 1 7 2] [0]]) -> [20 18 0]", "(sums [[2 8 8] [6 1 5] [] [3] [3]]) -> [18 12 0 3 3]", "(sums [[8 6 5 4 9] [6 5 8 0 6] [4 8]]) -> [32 25 12]", "(sums [[6 2 9 0] [7 6 1 4] []]) -> [17 18 0]", "(sums [[3 6 9 0 4] [] [5] [1]]) -> [22 0 5 1]", "(sums []) -> []", "(sums [[3 4 4] [7 4 5 9] [] [7] [5 4 8]]) -> [11 25 0 7 17]", "(sums [[9 1 4 3] [4 0]]) -> [17 4]", "(sums [[1 8 6 5 9]]) -> [29]", "(sums []) -> []", "(sums [[0]]) -> [0]", "(sums [[] [] [8 2 8] [7 0]]) -> [0 0 18 7]"], "time": 0.548929, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 7 5 8] [2 8 3] [2 1 8 1] [0 8 3 3 5] [9 2 6 2 4]]) -> [29 13 12 19 23]", "(sums []) -> []", "(sums [[1] [1]]) -> [1 1]", "(sums [[4 8 9 6] [0 4 8] [] [8 9 7 1] [4 3 3 7 1]]) -> [27 12 0 25 18]", "(sums [[2 1 1 2 4] [5] []]) -> [10 5 0]", "(sums []) -> []", "(sums [[3] [3 7] [0 0] [0]]) -> [3 10 0 0]", "(sums [[2 5]]) -> [7]", "(sums []) -> []", "(sums [[6 4] [0 6 9] [8 1 9 3 4] [1 5 9 9 2]]) -> [10 15 25 26]", "(sums [[5 0 8 2] [3 9 9] [8 6 6 3]]) -> [15 21 23]", "(sums [[7 8 1] [] [1 4 0 1] [0] [9 2 6 6]]) -> [16 0 6 0 23]", "(sums [[2 1 5 1 1] [7 5] [9 6 3 3 6] [7]]) -> [10 12 27 7]", "(sums [[8 7 5 2] [3 4] [3 5 3 9] [] [3 0 5 2 7]]) -> [22 7 20 0 17]", "(sums [[] [5 9 9] [1 2 4 7] [5 0]]) -> [0 23 14 5]", "(sums []) -> []", "(sums [[1 9 1 2]]) -> [13]", "(sums []) -> []", "(sums [[9 8] []]) -> [17 0]", "(sums [[]]) -> [0]", "(sums []) -> []", "(sums []) -> []", "(sums [[9 6 9 9 9]]) -> [42]"], "time": 0.417001, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[1 1]]) -> [2]", "(sums [[0 3 4] []]) -> [7 0]", "(sums [[2 0 5]]) -> [7]", "(sums [[1 6 5] [6 9 9] [6 6]]) -> [12 24 12]", "(sums [[5 2] [0 3 4 6] [1 9 9 6]]) -> [7 13 25]", "(sums [[6 5 7 7 5] [1 1 2 4] [5] [5 7 5] [6 0 0]]) -> [30 8 5 17 6]", "(sums [[6 3] [8 4] [8 8 9] [7 5 5 7 2] [6 2]]) -> [9 12 25 26 8]", "(sums []) -> []", "(sums [[] [3 8 8 8 8] [9 1 4 0 2] [2 1 2 1] [5 6 4 0]]) -> [0 35 16 6 15]", "(sums [[7 9 6 5 0] [] [1 3 2 1]]) -> [27 0 7]", "(sums [[2 3] [7 3 2 9 1] [8 1 5 8 2]]) -> [5 22 24]", "(sums [[4 9] [6 2 0 9] [9 1 0] [] [4 3]]) -> [13 17 10 0 7]", "(sums []) -> []", "(sums [[]]) -> [0]", "(sums [[8]]) -> [8]", "(sums [[9 4 6 0 8] [7] [8]]) -> [27 7 8]", "(sums [[9 7 7 8 5] [8 9] [2 8 5]]) -> [36 17 15]", "(sums [[5 8 2 2 6]]) -> [23]", "(sums [[6 9 0 6]]) -> [21]", "(sums []) -> []", "(sums [[] [6 8 3 4]]) -> [0 21]", "(sums [[5 2] [7 5 1 7 5] [9 5] [2 9 4]]) -> [7 25 14 15]"], "time": 0.529674, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[5] [8 8 8 3]]) -> [5 27]", "(sums [[] []]) -> [0 0]", "(sums [[1 7] [8 6 3 7 3] [7 3 1 9 6]]) -> [8 27 26]", "(sums [[] [1 9] [3]]) -> [0 10 3]", "(sums [[6 4 9 9 6] [7 5]]) -> [34 12]", "(sums [[0 4 1] [] [8 9 1] [3] [5 5]]) -> [5 0 18 3 10]", "(sums [[2 0 5 1 3] [9 6 3 8 3] [4 0] [8 9 1 0 7] []]) -> [11 29 4 25 0]", "(sums []) -> []", "(sums [[] [5 6 8 2 2] [7 1 6 6 6] [7 0]]) -> [0 23 26 7]", "(sums [[6 9 7 2]]) -> [24]", "(sums []) -> []", "(sums [[5 3 8 1] [8 5] [7 5 6 1] [1 7] [7]]) -> [17 13 19 8 7]", "(sums []) -> []", "(sums [[9 0 1 8]]) -> [18]", "(sums [[8 9 3]]) -> [20]", "(sums [[6] [3 4 1] [] [5]]) -> [6 8 0 5]", "(sums [[3] [5 2 2] [5] [9 1 8 9 3]]) -> [3 9 5 30]", "(sums [[8 7 3] [1 2] [3 7 1 3] []]) -> [18 3 14 0]", "(sums [[3 9 8 1] [] [8] [9 4 2]]) -> [21 0 8 15]", "(sums [[9 9 6]]) -> [24]", "(sums [[]]) -> [0]", "(sums [[9 4] [] [6 8] [] [0 2]]) -> [13 0 14 0 2]", "(sums [[6 0] [8 9 9 0] [7 7 1] [2 7 4 9] []]) -> [6 26 15 22 0]"], "time": 0.412863, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6] [4 1] [2 6 4]]) -> [6 5 12]", "(sums [[8] [0 3 7] [9 7 2 1] [1]]) -> [8 10 19 1]", "(sums [[]]) -> [0]", "(sums [[9 0 6] [0]]) -> [15 0]", "(sums [[7 7 6] [0 1 4 6] [8 5 3 4 8] [7]]) -> [20 11 28 7]", "(sums [[] [7 7 1 0 2] [1 9 2 7] [4 0]]) -> [0 17 19 4]", "(sums [[] [] [9 1] [6] [6]]) -> [0 0 10 6 6]", "(sums []) -> []", "(sums [[5 4] [3 4]]) -> [9 7]", "(sums [[2 8]]) -> [10]", "(sums [[5 2 1 2 2]]) -> [12]", "(sums [[8] [9] [0 1 3 8]]) -> [8 9 12]", "(sums [[1 9 7 9] [4] [5 3 3 4]]) -> [26 4 15]", "(sums [[5 3 5 2] [7 9] [7]]) -> [15 16 7]", "(sums []) -> []", "(sums [[3] [] [7 5 9 8] [0 8 4 7]]) -> [3 0 29 19]", "(sums []) -> []", "(sums [[5 7 9 3] [6 8 3 8 2] [0 9 3 2] [6 6 3]]) -> [24 27 14 15]", "(sums [[] [] [5 2 5 3]]) -> [0 0 15]", "(sums [[3] [4] [6] [6 0 9] [6 4 0 7]]) -> [3 4 6 15 17]", "(sums [[5 4 3 4]]) -> [16]", "(sums [[5] [8 5] [4 9 9] [0 5 7 0 7] [7 2]]) -> [5 13 22 19 9]", "(sums [[] [] [3 0 5 8] [9 4 7 1 9] [3]]) -> [0 0 16 30 3]"], "time": 0.529158, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 5] [2 0 7] [5 2]]) -> [14 9 7]", "(sums [[] [6 2 2 3 1] [9 9] [5 9 0]]) -> [0 14 18 14]", "(sums [[1 6 4 2] [2 1 5 1]]) -> [13 9]", "(sums [[4 6 9 5 7] [6 1 1] [2 3 0 5] [8 9 5 9]]) -> [31 8 10 31]", "(sums [[6 1] [4 2 8] [1] [3] [3 9 7 5]]) -> [7 14 1 3 24]", "(sums [[2 5 0 1 3] [] [5 6 1 2] []]) -> [11 0 14 0]", "(sums []) -> []", "(sums [[2] [] [8 0 1]]) -> [2 0 9]", "(sums []) -> []", "(sums [[0 8] []]) -> [8 0]", "(sums [[2 8]]) -> [10]", "(sums [[6 6 5 6 5]]) -> [28]", "(sums [[1 8] [6 0 7]]) -> [9 13]", "(sums [[3 9] [0] [9 0 3 5] [] []]) -> [12 0 17 0 0]", "(sums [[4 2 2]]) -> [8]", "(sums [[2 2 6 0 9] [0 1 3 0] [0 8 0 8] [6 8 0]]) -> [19 4 16 14]", "(sums [[8 2 3] [8] [8 2 1 2]]) -> [13 8 13]", "(sums [[4 0 6 6] [6 0 4] [8 4 2 8 3] [7 5 5 6 7]]) -> [16 10 25 30]", "(sums [[8 7] [] [4 2 4 5 0]]) -> [15 0 15]", "(sums [[] [8 6 2] [2 7 8]]) -> [0 16 17]", "(sums [[4 6]]) -> [10]", "(sums [[] [] [] [6 0 3 8] [4]]) -> [0 0 0 17 4]", "(sums [[5 2] [6 1 6 9] [] [] [3 2]]) -> [7 22 0 0 5]"], "time": 0.461075, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[0 3] [] [2 9 6] [4 3]]) -> [3 0 17 7]", "(sums [[6 2 2] [5] [7 7 4 7] [3] [5 8]]) -> [10 5 25 3 13]", "(sums [[7 4 7 4] [3 9 9 4 4] [] []]) -> [22 29 0 0]", "(sums []) -> []", "(sums [[0 4] [4] [7 7 8 9]]) -> [4 4 31]", "(sums []) -> []", "(sums [[0 0]]) -> [0]", "(sums [[3 7 4 2] [7 5] [9] [5 6 7] [0]]) -> [16 12 9 18 0]", "(sums [[3 8 2] [8 9 7 6] [0 3 4 1 6]]) -> [13 30 14]", "(sums [[0] [0 8 6 8] [0 0 1 1 8]]) -> [0 22 10]", "(sums [[8 2] [] [] [8 5 6] [9 1 0 4]]) -> [10 0 0 19 14]", "(sums [[7 8 9] [5 8 6 7 1]]) -> [24 27]", "(sums [[6 4 4 4] [0 2 1 8]]) -> [18 11]", "(sums [[2 2 0] [8 8 8 3]]) -> [4 27]", "(sums [[] [0 4 1 3 6] [6]]) -> [0 14 6]", "(sums [[5 0 6]]) -> [11]", "(sums []) -> []", "(sums [[5 6 8] [0 9 1] [5 0]]) -> [19 10 5]", "(sums [[6 7] [3] [9] [9 3 6]]) -> [13 3 9 18]", "(sums [[5 3 2]]) -> [10]", "(sums [[0 0 3 1] [8 4 0 8] [7 3] [3 7 8] [2 4 5 2 7]]) -> [4 20 10 18 20]", "(sums [[7 1 9 7 2] [8]]) -> [26 8]"], "time": 0.522563, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0 5 9 0 2] [1 3 4 3] []]) -> [16 11 0]", "(sums [[6] [0 8] [7 6 1 9]]) -> [6 8 23]", "(sums [[8 3] [0] [] []]) -> [11 0 0 0]", "(sums [[2 2] [0 4 0 0 7] [0]]) -> [4 11 0]", "(sums [[1 0 8 9] [7 9] [7 1] [5 3 8]]) -> [18 16 8 16]", "(sums [[4 5 5 4 7]]) -> [25]", "(sums [[4] [6 8] [] [8 0 4 1 0]]) -> [4 14 0 13]", "(sums [[9 1 6 7 0] [7 7] [2 4 1 2] [5 2 8] [3 5 4 1 3]]) -> [23 14 9 15 16]", "(sums [[0 7 5 7 7] [5 0 4 1] [4 2 3 5 5] [4 7]]) -> [26 10 19 11]", "(sums [[5] [6 2 8 9] [8 4 6 2]]) -> [5 25 20]", "(sums [[1] [] [0 7 9]]) -> [1 0 16]", "(sums [[7 2 3 7 0] [4] [4 8 4 3 9] [0 1 4 5]]) -> [19 4 28 10]", "(sums [[]]) -> [0]", "(sums [[7 3] [9 8 7] [9] [6 3 6 2]]) -> [10 24 9 17]", "(sums [[]]) -> [0]", "(sums [[2]]) -> [2]", "(sums []) -> []", "(sums []) -> []", "(sums [[5 6] [2 8 3] [3 7]]) -> [11 13 10]", "(sums [[9 1] [9 9 0]]) -> [10 18]", "(sums [[7 9] [2 1 4]]) -> [16 7]", "(sums [[4 1 4] [2 8 0 0]]) -> [9 10]", "(sums []) -> []"], "time": 0.51848, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 7] [2 2 1] [8 2] [2 2 5] [4 0 4 1 0]]) -> [11 5 10 9 9]", "(sums [[7] [0] [6] [4 8 1 5 4] [0 2 5 8]]) -> [7 0 6 22 15]", "(sums [[7 8 0] [5]]) -> [15 5]", "(sums []) -> []", "(sums [[3 3 1 8]]) -> [15]", "(sums [[9 5 1] [5 2 2 0 2] [4 7 6 0] [8 6 8]]) -> [15 11 17 22]", "(sums [[7 0 7 3] [4 8 0 9] []]) -> [17 21 0]", "(sums [[3 5 5 1 5] [1 0 3] []]) -> [19 4 0]", "(sums [[5] [7 3] [1 2] [5 8 1]]) -> [5 10 3 14]", "(sums [[1 6 0]]) -> [7]", "(sums [[5 1] [8 1 2] [3 5 5 6] [6]]) -> [6 11 19 6]", "(sums [[2]]) -> [2]", "(sums []) -> []", "(sums [[0 2 7 6 4] [1 7 1] [0 9]]) -> [19 9 9]", "(sums [[2 7] [6 8 1] [5 8 7] [0 3] [2 3]]) -> [9 15 20 3 5]", "(sums [[]]) -> [0]", "(sums [[]]) -> [0]", "(sums [[1 8] [4] [9]]) -> [9 4 9]", "(sums [[6 5 9 8 8] [] [8 4] [5 5 2 6 7]]) -> [36 0 12 25]", "(sums [[0 9 7] [9 8 6 6 5] [1 5 5]]) -> [16 34 11]", "(sums [[9 2 5 1] [0]]) -> [17 0]", "(sums [[3 4 9 4] [0 1 9]]) -> [20 10]", "(sums [[4 8 1 5 9] [] [4 3 5 3 4] [7 2 3 6 2]]) -> [27 0 19 20]"], "time": 0.493373, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[1 4 8] [0] [5 2] [9 3 4 7 9]]) -> [13 0 7 32]", "(sums [[8 0 5 6]]) -> [19]", "(sums [[1]]) -> [1]", "(sums []) -> []", "(sums [[6 2 9] [8] [] [] [6]]) -> [17 8 0 0 6]", "(sums [[4 7 6 9] [] [0 3] [0 7 4]]) -> [26 0 3 11]", "(sums [[1 7 8 3 6]]) -> [25]", "(sums [[9] [8 2 4] [1 1 9 9 5] [2] [0]]) -> [9 14 25 2 0]", "(sums []) -> []", "(sums [[5] [7] [4 3 0 7]]) -> [5 7 14]", "(sums []) -> []", "(sums []) -> []", "(sums [[8 6] [8] [9 6 8 5] [7 0 6 8]]) -> [14 8 28 21]", "(sums [[] [8] [6 2 2 3]]) -> [0 8 13]", "(sums [[3 2 4] [0] [6 3 9 8] [1 2 1 6 6]]) -> [9 0 26 16]", "(sums [[3 3 4]]) -> [10]", "(sums [[9 0] [7 2]]) -> [9 9]", "(sums [[7 1 8] [6 4 1 4] [4 3 4]]) -> [16 15 11]", "(sums [[8 5 2 1 9] [3 4 0 5 6] [8 5] [4 9 0] []]) -> [25 18 13 13 0]", "(sums [[0] [6] [6 3 5 9 3] [] [3]]) -> [0 6 26 0 3]", "(sums [[9 4 1 3] [9 4 2] [9 0 3 1]]) -> [17 15 13]", "(sums []) -> []"], "time": 0.474181, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7] [9 3]]) -> [7 12]", "(sums [[2 3 5 2 3] [0] [] []]) -> [15 0 0 0]", "(sums [[3] [8 9 0 4] [4 0 3 0]]) -> [3 21 7]", "(sums [[1 5 4 0 8] [2 5 5] [7]]) -> [18 12 7]", "(sums [[1] [] [] [4] [7]]) -> [1 0 0 4 7]", "(sums [[9 7 5 3 2] [1 5 0 9]]) -> [26 15]", "(sums [[4 3 9] [4 6] [0 6]]) -> [16 10 6]", "(sums [[2 7 5 7] []]) -> [21 0]", "(sums [[4 6 3 6 2] [] [9 8] [] [2 9 8 0 3]]) -> [21 0 17 0 22]", "(sums [[4 4 3 9 9] [2 6 0 2 4] [0 5] [3] [8 2 3 4 8]]) -> [29 14 5 3 25]", "(sums [[0 1 3 2] [5 5 0 7 7]]) -> [6 24]", "(sums [[2 1] [2 2 3 5] [9 8 4] [4 8 4 1] [2]]) -> [3 12 21 17 2]", "(sums [[3] [7] [] [3 0 1]]) -> [3 7 0 4]", "(sums [[7 5 4 2 2] [0 8] [] [0 4]]) -> [20 8 0 4]", "(sums [[5 5] [] [1 2 8 9]]) -> [10 0 20]", "(sums [[4 6 5 3 2]]) -> [20]", "(sums [[] [9 0 0 0 0] [0] [0 7 6]]) -> [0 9 0 13]", "(sums [[9 7 6 0 3] [7 5 4 0 4] [7 8 2 3]]) -> [25 20 20]", "(sums [[] [1 0 6]]) -> [0 7]", "(sums []) -> []", "(sums []) -> []", "(sums [[9] [] [7 0 1 5 4] [1 9]]) -> [9 0 17 10]", "(sums []) -> []"], "time": 0.360728, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[]]) -> [0]", "(sums [[3 5] [9 3]]) -> [8 12]", "(sums [[] [5 9 1 3]]) -> [0 18]", "(sums [[3 0] [6]]) -> [3 6]", "(sums [[2 2 9] [3 1]]) -> [13 4]", "(sums [[] [1]]) -> [0 1]", "(sums [[5 1 1 2 5] [] [8 0 3] [7]]) -> [14 0 11 7]", "(sums [[] [7 1 0]]) -> [0 8]", "(sums [[] [] [1] [7 7 1 5]]) -> [0 0 1 20]", "(sums []) -> []", "(sums []) -> []", "(sums [[7 2] [1 4] [2 3 3 8 4] [6 1 1 5 4]]) -> [9 5 20 17]", "(sums [[0 8 3 4 1] [3 5 3 1] [1 5 2 9 4]]) -> [16 12 21]", "(sums [[] [4 3 5] [3 0 9 3 3] [7 8]]) -> [0 12 18 15]", "(sums [[5 1 1 5] [0 9] [3 0 8 2 9] [0 1]]) -> [12 9 22 1]", "(sums [[6 3 1] [7 3 9] [5 0 4]]) -> [10 19 9]", "(sums [[2 5]]) -> [7]", "(sums [[2 4 0 9 6] [6 5 3] [5 7] [1 5]]) -> [21 14 12 6]", "(sums [[0 4 3 7 8]]) -> [22]", "(sums [[6 9 6] [5 6 3 5] [0 2 4 8] [5 6 7 4] [9]]) -> [21 19 14 22 9]", "(sums [[5 7 0 7 3] [7 5 1 8]]) -> [22 21]", "(sums [[] [3 4]]) -> [0 7]", "(sums [[3 4] [] [] [] [0 0]]) -> [7 0 0 0 0]"], "time": 0.37655, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[] []]) -> [0 0]", "(sums [[5 6] [1 4 0] [1 1 3]]) -> [11 5 5]", "(sums [[4 4 0]]) -> [8]", "(sums [[9]]) -> [9]", "(sums [[2 3 7 4 2] [6] [2 9 7 6] [0 1 3] [1 2]]) -> [18 6 24 4 3]", "(sums [[1 2 0 1] [9 6 7] []]) -> [4 22 0]", "(sums [[9 7] [] [0 2 5 5 7]]) -> [16 0 19]", "(sums [[3 4 1 3 3] [4 4 9 7 8]]) -> [14 32]", "(sums [[] [] [1 9] [0 5 7 7]]) -> [0 0 10 19]", "(sums [[8 2 2] [8 9 5] [7 3 4 8 4] [4]]) -> [12 22 26 4]", "(sums [[0 4]]) -> [4]", "(sums [[9 1 4 0 1] []]) -> [15 0]", "(sums [[] [6] [5 3 9 1 5] [9]]) -> [0 6 23 9]", "(sums [[2 0] [2 2 3] [] [] [4 7 0 6 7]]) -> [2 7 0 0 24]", "(sums [[4 6 5 0 3] [2 1 5]]) -> [18 8]", "(sums [[] [7 6] []]) -> [0 13 0]", "(sums [[1 7] [8 8 1 4 6]]) -> [8 27]", "(sums [[4 3 6 8 8] [9 0] [0 0]]) -> [29 9 0]", "(sums [[7 7 0] []]) -> [14 0]", "(sums [[2 4]]) -> [6]", "(sums [[] [3 5] [5 4 0 7] [7 7 1]]) -> [0 8 16 15]", "(sums [[4 1 6 1] []]) -> [12 0]"], "time": 0.378065, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[4 8 6 1] [0 9] [8 7]]) -> [19 9 15]", "(sums [[4 1] [1 1] [7 3 1 6] [4 7 2] [8 1 8]]) -> [5 2 17 13 17]", "(sums [[] [0 2 1 9 4] [3] [4 3 4 4] [6 3 6 1]]) -> [0 16 3 15 16]", "(sums [[] [1 6 7 4] [9 5 5 2]]) -> [0 18 21]", "(sums [[2 8 2 7]]) -> [19]", "(sums [[9] [4]]) -> [9 4]", "(sums [[]]) -> [0]", "(sums [[2 4 1 6]]) -> [13]", "(sums [[5 5 9] [3 7 3 2] [0 8 3 2] [4 9 5 4]]) -> [19 15 13 22]", "(sums [[3 6 2 7] [] [6 4 8 2]]) -> [18 0 20]", "(sums [[4 5 0] [6 1] [2 9 0 0] [6 9]]) -> [9 7 11 15]", "(sums [[5 5 1 6 0] [6 5 2 5] [0 6 5 7] [4 9 6 4] []]) -> [17 18 18 23 0]", "(sums [[6 7 7] [] [6 5 5 9 1] [3 1 6] [2]]) -> [20 0 26 10 2]", "(sums [[4 6 0 0] [8 8 5] []]) -> [10 21 0]", "(sums [[3 1 6] [3] [8] [4 2 9 2 8]]) -> [10 3 8 25]", "(sums [[5 4] [7 6 4 1] [0 4 8 3 3] [6] [3 0 1 0 5]]) -> [9 18 18 6 9]", "(sums [[7 7] [] [1 3] [1 3 8 0 1]]) -> [14 0 4 13]", "(sums [[5 0 8 2 0] [] [9 2 5 7 8] [9] []]) -> [15 0 31 9 0]", "(sums [[3 8 4] [7 6 0 1 6] [2]]) -> [15 20 2]", "(sums [[6 3 9] [4 6 8 5]]) -> [18 23]", "(sums [[5 0]]) -> [5]", "(sums [[9 6 4]]) -> [19]"], "time": 0.340095, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0] [1 2 5 5] [9 6 1] [8]]) -> [0 13 16 8]", "(sums []) -> []", "(sums []) -> []", "(sums [[5] [4 1] [1 6] [6 6 6 2]]) -> [5 5 7 20]", "(sums []) -> []", "(sums [[2 9 9 9] [2]]) -> [29 2]", "(sums [[0] [0] [3] [] []]) -> [0 0 3 0 0]", "(sums [[0 9 3 9 3] [0 6 4 2 0] []]) -> [24 12 0]", "(sums []) -> []", "(sums [[4 0]]) -> [4]", "(sums [[6 9 8 0] [3]]) -> [23 3]", "(sums [[0 2 8 2 0] [0 2 3 3] [6 7 8 3]]) -> [12 8 24]", "(sums [[0 7 6 7 9]]) -> [29]", "(sums [[] [4 0 3 9] [6 6 9 0]]) -> [0 16 21]", "(sums [[9 5 2 7 3] [9 9 3 7 3] [] [3] [9 1]]) -> [26 31 0 3 10]", "(sums [[] [9 7 4 8 1] [] [0 7]]) -> [0 29 0 7]", "(sums [[3 4 0 7] [8 9 8 7] [1 2 0] [8 9 3 6]]) -> [14 32 3 26]", "(sums [[9 3 6 0] [2 5 2 7] [9 6 4 3] [4 1 4]]) -> [18 16 22 9]", "(sums [[8 4 0 1 1] [3 5 9 3] []]) -> [14 20 0]", "(sums [[1 9] [6 1 5]]) -> [10 12]", "(sums [[1 9] [7 7 0 5 2] [1 5 3 3] [9]]) -> [10 21 12 9]", "(sums [[4 2 6] [8 6] [7] [] [5 9 0]]) -> [12 14 7 0 14]", "(sums [[] [1 3 9 4]]) -> [0 17]"], "time": 0.416364, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[0 5]]) -> [5]", "(sums [[] [0 2 3 1] [6]]) -> [0 6 6]", "(sums [[] [] [6]]) -> [0 0 6]", "(sums [[3 9 5 7 7] [0 9 2 9] [8 3 8 8 0]]) -> [31 20 27]", "(sums [[] [] [3 5 3 7] [8 9 9 2] [6]]) -> [0 0 18 28 6]", "(sums [[5 7 3 2 6]]) -> [23]", "(sums []) -> []", "(sums [[3 3 6 5 6] [] [2 1 1] [2 3 2] []]) -> [23 0 4 7 0]", "(sums [[] [3]]) -> [0 3]", "(sums [[1 5 6] [5 3 4] [8]]) -> [12 12 8]", "(sums []) -> []", "(sums [[9 7 1 1] [] [] [7] [9 6 2 7 6]]) -> [18 0 0 7 30]", "(sums [[2] [4] [0] [] [8 8 6 0]]) -> [2 4 0 0 22]", "(sums [[1 2 0 8 4] []]) -> [15 0]", "(sums [[6 0] [0] [] [6 4 6]]) -> [6 0 0 16]", "(sums [[8 2 8 7 7] [0 7 6 8 6] [8 4 7 7]]) -> [32 27 26]", "(sums [[6] [0 6 7] [] [4]]) -> [6 13 0 4]", "(sums []) -> []", "(sums [[6 0 6]]) -> [12]", "(sums [[9 9 3 6] [6 3 2 8 5]]) -> [27 24]", "(sums [[7 5 7 0] [4 9 1 6]]) -> [19 20]", "(sums [[7 7] [3] [] [7 9 0 5 2] [9 9 2 2 8]]) -> [14 3 0 23 30]"], "time": 0.383479, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 0 5 8 5] [6 9 5 3 6] [5 6 5 5] [0 7]]) -> [26 29 21 7]", "(sums [[3 8 5 8 0]]) -> [24]", "(sums [[6 5 0 4 0] [5 8]]) -> [15 13]", "(sums []) -> []", "(sums []) -> []", "(sums [[8 8 3 7] [7 3 4] [] [7 6 6 0 8]]) -> [26 14 0 27]", "(sums [[4 4] [6]]) -> [8 6]", "(sums [[7] [0 5 2 2 5] [5 3] [4] [3 8 9]]) -> [7 14 8 4 20]", "(sums [[] [6 6]]) -> [0 12]", "(sums [[1 9 8] [6 9] [1 3] [7 0 4 4]]) -> [18 15 4 15]", "(sums [[2 6 9 0 9] [3 9 1 0] [0 2 0]]) -> [26 13 2]", "(sums []) -> []", "(sums [[] [2 1]]) -> [0 3]", "(sums [[] [1 1 4 0 4]]) -> [0 10]", "(sums [[] [7 7] [6 5]]) -> [0 14 11]", "(sums [[0 7 9] [9 2 0 5 4] [7 9 0 8]]) -> [16 20 24]", "(sums [[6 2 8] [6 1 1 3 3] [8 0 5 0 2]]) -> [16 14 15]", "(sums [[8 5 5 7 2] [4 0 4] [5 9 1 2 9]]) -> [27 8 26]", "(sums [[] [1 3] [] [2 0 1 9] [8 7 2]]) -> [0 4 0 12 17]", "(sums [[4 0 2 1] [0 9 7 9] [8 1 0 8]]) -> [7 25 17]", "(sums [[7 1] [7]]) -> [8 7]", "(sums [[5 4] [6 9 6 1 5] [7 7 4 9 9]]) -> [9 27 36]", "(sums [[2] [3 2 9 2] [0 3] [3 7 8 7] [6 3]]) -> [2 16 3 25 9]"], "time": 0.39343, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 4 3 0 5] [1 2 0] [8 5 2 2] [4 7 4 7 0] [3 9]]) -> [21 3 17 22 12]", "(sums [[4 5] [] [4 2 4 3] [3 6 2]]) -> [9 0 13 11]", "(sums [[7] [5 0 9 9 3] [5 1 9] [8 9 4]]) -> [7 26 15 21]", "(sums [[0 2 4 9 3] [6 9 8 4 4] [2 8 3] [9]]) -> [18 31 13 9]", "(sums [[6 9 4 5 6] [] [9 5 3 5 1] [] [1 2]]) -> [30 0 23 0 3]", "(sums []) -> []", "(sums [[1 4 1 8 6] [0] [0 3 5 6 9] [5 6 5 8] [6 3 6 6 7]]) -> [20 0 23 24 28]", "(sums [[6] [3 4 1] [] [9 1]]) -> [6 8 0 10]", "(sums [[5] [1] [4 2 2]]) -> [5 1 8]", "(sums [[3 9 9 0]]) -> [21]", "(sums [[7 2 2 5 1]]) -> [17]", "(sums [[] [] [7] [7]]) -> [0 0 7 7]", "(sums []) -> []", "(sums []) -> []", "(sums [[1 8 4]]) -> [13]", "(sums [[6 3 1] [0 9 4 0 8]]) -> [10 21]", "(sums [[3 7 4 6]]) -> [20]", "(sums [[] [4 3 8 5]]) -> [0 20]", "(sums [[6 2] [3 4 8 9 5]]) -> [8 29]", "(sums [[9 9] [5 1 6 4 3] [] [0] [9 7 5]]) -> [18 19 0 0 21]", "(sums [[4 1 9 6 7]]) -> [27]", "(sums [[] [6 0 2 6 0] [8 7] []]) -> [0 14 15 0]", "(sums [[3] [2 3 1] [6 2] [8 6 1]]) -> [3 6 8 15]"], "time": 0.429471, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2 9 8 7 0] [] [5 3 8 7] [8 9 0 9] [1]]) -> [26 0 23 26 1]", "(sums [[] [5] [0 4 9] [0 3 2 0] [5 7 7 7]]) -> [0 5 13 5 26]", "(sums [[9 6 2 3 9] [3 6 4 5]]) -> [29 18]", "(sums [[]]) -> [0]", "(sums [[1 2 4] [9 7 5 2 4] [] []]) -> [7 27 0 0]", "(sums [[6 3 2 7 8] [1 4] [] [5 4 2 8]]) -> [26 5 0 19]", "(sums [[8 4 7] [6 0 6 9] [7] [8 9 4 7]]) -> [19 21 7 28]", "(sums []) -> []", "(sums []) -> []", "(sums [[] [4 6 2] [1 7 9] [4 0] [9 8]]) -> [0 12 17 4 17]", "(sums [[]]) -> [0]", "(sums [[7] [4 6 4 3 1] [5 8]]) -> [7 18 13]", "(sums [[5] [7] [7]]) -> [5 7 7]", "(sums [[2 8 0 9 5] [3] [4 8 3]]) -> [24 3 15]", "(sums [[2 7 2]]) -> [11]", "(sums []) -> []", "(sums [[4 4 1 3 2] [5 1] [2 8 5 5 2] [4] [3]]) -> [14 6 22 4 3]", "(sums []) -> []", "(sums [[3 1 7] [5 2 6]]) -> [11 13]", "(sums [[] [5] [0 8] [9 0 0 5] [3 6 4]]) -> [0 5 8 14 13]", "(sums [[] [8] [6 9] []]) -> [0 8 15 0]", "(sums [[] [8 6 5] [4 0] [2 4 7 3 8]]) -> [0 19 4 24]", "(sums [[4 8]]) -> [12]"], "time": 0.54301, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[0 7 4] []]) -> [11 0]", "(sums [[5] [6 5 3 5]]) -> [5 19]", "(sums [[1 1] [6 2] [] [] [4 8]]) -> [2 8 0 0 12]", "(sums [[9 7 6 9 6]]) -> [37]", "(sums [[4 7 3 1 1] [] [] [5 1 1] [1]]) -> [16 0 0 7 1]", "(sums [[5 3 2 2 3] [9] [2 6 7 3 7] [1 5 0]]) -> [15 9 25 6]", "(sums []) -> []", "(sums [[] [0] [2] [] [2]]) -> [0 0 2 0 2]", "(sums [[]]) -> [0]", "(sums [[] [1 3] [1 0 3 7] [4 3 0 2] [2 3 2 7]]) -> [0 4 11 9 14]", "(sums [[5 5 6 2 8] [5] [5 1 4 5 2] [9 6 4] []]) -> [26 5 17 19 0]", "(sums [[8 1 0 3] [] [3 1] [0] [6]]) -> [12 0 4 0 6]", "(sums []) -> []", "(sums []) -> []", "(sums [[3 2 7 2 8]]) -> [22]", "(sums [[3 3]]) -> [6]", "(sums [[7] [7 5 0 0] [1 3 8 2 2] [1] [0 8 5]]) -> [7 12 16 1 13]", "(sums [[5 8 0]]) -> [13]", "(sums []) -> []", "(sums []) -> []", "(sums [[5 0 9 5] [1] [6 6 2] [9 7 8] []]) -> [19 1 14 24 0]", "(sums [[] [4 6 6]]) -> [0 16]"], "time": 0.563842, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 7 0 4 4] [1 7 6 8 4] []]) -> [24 26 0]", "(sums [[8 5 4 7] [9 6 0]]) -> [24 15]", "(sums [[] [0 9] [0 6 7 4] [6 2]]) -> [0 9 17 8]", "(sums [[4 5] [8 9 9 1] [5 4 0] [3]]) -> [9 27 9 3]", "(sums [[] [] [] [4 6 5] [8 6 9 9]]) -> [0 0 0 15 32]", "(sums [[9 2 5 2] [1 1 0]]) -> [18 2]", "(sums [[2] [3 8] [7 0 3] [] [7 0 2 6 5]]) -> [2 11 10 0 20]", "(sums [[] [] []]) -> [0 0 0]", "(sums []) -> []", "(sums [[2 5 4] [7 8 7 8 7]]) -> [11 37]", "(sums [[5 7 0 7 9] [2 7 1 2]]) -> [28 12]", "(sums [[3 1 8 9] [6] [8 2 7 3] [7 9 8 9]]) -> [21 6 20 33]", "(sums []) -> []", "(sums [[5] [] [1 1 9 7 4] [6 5 1] [2 9 0 7 2]]) -> [5 0 22 12 20]", "(sums []) -> []", "(sums [[5 6 5 5] [0 5 4 0] [9 0 4 4] [3 8 3 9] [0 1 7 0]]) -> [21 9 17 23 8]", "(sums [[0 4] [8 7 4]]) -> [4 19]", "(sums [[3 4 5] [4 9] [6 3 9] [0] [2 0 4]]) -> [12 13 18 0 6]", "(sums [[2 5 3] [9 3 6] [5 0 9 5 7] [4 5 6 9 3]]) -> [10 18 26 27]", "(sums [[] [9 4 0 1] [9 9 5]]) -> [0 14 23]", "(sums [[6] [6 7] [7 6 9 5 8]]) -> [6 13 35]", "(sums [[3 2] [4 9]]) -> [5 13]", "(sums [[8 8 3 6 8] []]) -> [33 0]"], "time": 0.511339, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[5 6 6 0 6] [] [4 9 2]]) -> [23 0 15]", "(sums [[7 6 7 2 8] [1 6] [6] [0] [0 8 3 6]]) -> [30 7 6 0 17]", "(sums [[] [5 5] [8 1 9 4 1] []]) -> [0 10 23 0]", "(sums [[] [] [0 5] [6 8] [0 5 7 5]]) -> [0 0 5 14 17]", "(sums []) -> []", "(sums [[0 4 1 3] [4 8 3] [1 7 6]]) -> [8 15 14]", "(sums [[6 2 0] [7 6 6 1] [3 5 7 2] [7 7 8 5 0]]) -> [8 20 17 27]", "(sums [[1] [] [1 4 2 1] [2 9 2 9] [9 1 6 3]]) -> [1 0 8 22 19]", "(sums []) -> []", "(sums []) -> []", "(sums [[] [3 3]]) -> [0 6]", "(sums [[4 8 6 2] [3 5 0 4 8]]) -> [20 20]", "(sums [[6 0] [3 2]]) -> [6 5]", "(sums []) -> []", "(sums []) -> []", "(sums []) -> []", "(sums [[4 5 7 4] [1 3 5 6] [4 1]]) -> [20 15 5]", "(sums [[7] [0 5] [2] [3]]) -> [7 5 2 3]", "(sums [[5] [9 3] [8] [4] []]) -> [5 12 8 4 0]", "(sums [[] [5 4]]) -> [0 9]", "(sums []) -> []", "(sums []) -> []"], "time": 0.557286, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2 2]]) -> [4]", "(sums [[6 1] [1 6 3 4 7]]) -> [7 21]", "(sums []) -> []", "(sums [[] [6 3 4 6] []]) -> [0 19 0]", "(sums []) -> []", "(sums [[7 5 8 8 7] [3 5 7 9 0] [5 1] [3 7 3 1 7] [8]]) -> [35 24 6 21 8]", "(sums [[]]) -> [0]", "(sums [[1 3] [3 2] [6 5] []]) -> [4 5 11 0]", "(sums [[2 6 3 2] [3 7 9 4] []]) -> [13 23 0]", "(sums [[] [7] [6 8 0 4 6] []]) -> [0 7 24 0]", "(sums [[7 7 1] [2 9 8]]) -> [15 19]", "(sums [[5 3 0 8 6] [3 4] [3] [6 3] [1]]) -> [22 7 3 9 1]", "(sums []) -> []", "(sums []) -> []", "(sums [[9]]) -> [9]", "(sums [[8 0 4 0] [3]]) -> [12 3]", "(sums []) -> []", "(sums [[3 4]]) -> [7]", "(sums [[] [5 0] [7 0 0 6 5] [7 9 9] [9 5 2 6]]) -> [0 5 18 25 22]", "(sums [[9 5 7 3]]) -> [24]", "(sums []) -> []", "(sums [[4 8 6 8] [8] []]) -> [26 8 0]", "(sums [[1 1] [5] [2 8 7] [8 9]]) -> [2 5 17 17]"], "time": 0.499447, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 7] [6]]) -> [15 6]", "(sums [[8 1 2 9 8]]) -> [28]", "(sums [[] []]) -> [0 0]", "(sums [[9 3 3 3] [7 4 4] [] []]) -> [18 15 0 0]", "(sums [[9 3 0 0 3] [3 2 4] [6] [5 4 2] [1]]) -> [15 9 6 11 1]", "(sums [[9] [2] [5 8 9 7 7] [8]]) -> [9 2 36 8]", "(sums [[0] [6 7 4 9 2]]) -> [0 28]", "(sums []) -> []", "(sums [[1 3] [8 2 3 6 8] [5]]) -> [4 27 5]", "(sums []) -> []", "(sums [[3 3 9 2 3] [4 1 3 7] [6 5]]) -> [20 15 11]", "(sums [[4 9] [3 5 8] [4] [1 4]]) -> [13 16 4 5]", "(sums [[] [5 1] [3 3] [4 1 5 3]]) -> [0 6 6 13]", "(sums [[6] [] [] [3 1]]) -> [6 0 0 4]", "(sums [[6 3 0 8] [8 9 6 7] [] []]) -> [17 30 0 0]", "(sums [[3] [3 1 1] [8] [2 6]]) -> [3 5 8 8]", "(sums [[2 1 0] [1 6 9 8]]) -> [3 24]", "(sums [[0]]) -> [0]", "(sums [[1 2 1] [9 8 4] [2 8] [8 8 1]]) -> [4 21 10 17]", "(sums [[2]]) -> [2]", "(sums [[5 2] [8 4 7 4 8] [9 3 3] []]) -> [7 31 15 0]", "(sums [[7 2 4 7 5] [3 2] [0 5 5 0] [0 3 1] [4 4 7 9]]) -> [25 5 10 4 24]", "(sums [[] [1 2 8 0]]) -> [0 11]"], "time": 0.552971, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 2 8 1 5] [] [6 9 1 4 1] [9 5 3] [1 8 2 8 7]]) -> [20 0 21 17 26]", "(sums [[] [9 0 9 5] [6 0 0 9]]) -> [0 23 15]", "(sums [[6 8 9]]) -> [23]", "(sums [[6 9] [4] [8 5 9 6]]) -> [15 4 28]", "(sums [[2 6 7] [2 4 8 5]]) -> [15 19]", "(sums [[9 2 8 7 3] [5 2 9] [] [0] [0 6 6 6 0]]) -> [29 16 0 0 18]", "(sums [[7] [4 3 5 9 5] [] [7 1 0]]) -> [7 26 0 8]", "(sums [[3 8 2 0 8] [9] [7 8 1] [3 2 9] [3 2 0 5 0]]) -> [21 9 16 14 10]", "(sums [[5 1 8] [6 4 3 8 7] [] [6 1 1]]) -> [14 28 0 8]", "(sums [[4 0] [] [1] [8 4 6 1 9]]) -> [4 0 1 28]", "(sums [[4]]) -> [4]", "(sums [[8 8 2 5 8] [7] [5 7 8 4 8]]) -> [31 7 32]", "(sums [[5] [7] [6 1 3] []]) -> [5 7 10 0]", "(sums [[] [3] [1 0] [3 5] [5 5 5 1 9]]) -> [0 3 1 8 25]", "(sums [[1 8] [7] [7 6 7 8] [] [4]]) -> [9 7 28 0 4]", "(sums [[1 1 6 0]]) -> [8]", "(sums [[4 6 8 3] [] [7 4] []]) -> [21 0 11 0]", "(sums []) -> []", "(sums []) -> []", "(sums [[8 6 7] [] [7 4 9 5]]) -> [21 0 25]", "(sums [[7 5 7 8 9]]) -> [36]", "(sums [[9 6] [6 2] [6 2] [6 2 0 8]]) -> [15 8 8 16]", "(sums [[8 7 9] [0 5]]) -> [24 5]"], "time": 0.449874, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7] [5 0] [0]]) -> [7 5 0]", "(sums [[8] [1 8] [] [] [0 9 8 8 7]]) -> [8 9 0 0 32]", "(sums [[4] [3 5] [9 4 0 8]]) -> [4 8 21]", "(sums [[0 6 3 9 8]]) -> [26]", "(sums [[7 1 0 2 9] [1] [9 7 4]]) -> [19 1 20]", "(sums [[0] [8 1] [4 1 0]]) -> [0 9 5]", "(sums [[4 7 5 5] [6] [1 2 7 1] [8 6 7 8] [1 4 7 6]]) -> [21 6 11 29 18]", "(sums [[2] [2 6 1 3] [0 3 5] [3 9 8] [6 2 9]]) -> [2 12 8 20 17]", "(sums [[8]]) -> [8]", "(sums [[7 1 3] [9] [3 9 4 5]]) -> [11 9 21]", "(sums [[5 9 1 8 7] [4 5 4 5] [2 6 4]]) -> [30 18 12]", "(sums [[5 1 7]]) -> [13]", "(sums []) -> []", "(sums [[4] [4 0 3] [2 3 6 8 9]]) -> [4 7 28]", "(sums []) -> []", "(sums [[0 0 8] [8 9 6] [5 9] [3 0 2 5]]) -> [8 23 14 10]", "(sums [[0 9 8] []]) -> [17 0]", "(sums [[3 4]]) -> [7]", "(sums [[9 4 8] [4 9]]) -> [21 13]", "(sums [[] [7 0] [8 6 4 8] [6 1 2 2 8] [8 4]]) -> [0 7 26 19 12]", "(sums [[5 2 2] [9] [1 2 4 2]]) -> [9 9 9]", "(sums [[5 6 6]]) -> [17]", "(sums [[] [3] [2 6]]) -> [0 3 8]"], "time": 0.481709, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 2 1] [3] [] [4 1 5]]) -> [12 3 0 10]", "(sums [[9 7 8 8 8] [2 7 9 6] [7 0 7] [0]]) -> [40 24 14 0]", "(sums []) -> []", "(sums [[6 7 0 2] [6 9 3 6] [9 1 7 8 3] []]) -> [15 24 28 0]", "(sums [[7] [5 9 6 8] [4 7 5] [4 3 3]]) -> [7 28 16 10]", "(sums [[4 2 9 4] [1 9 5]]) -> [19 15]", "(sums [[6 2 9 9 9] [1 2]]) -> [35 3]", "(sums [[] []]) -> [0 0]", "(sums [[2] [1 2 5 5] [4 0 3 6 2]]) -> [2 13 15]", "(sums [[3 5 0] [3 5 0 4 4] [3 6] [9 4]]) -> [8 16 9 13]", "(sums [[0 2 5 8] [] [9 5]]) -> [15 0 14]", "(sums [[0 6] [] [] [4] [5 1 7]]) -> [6 0 0 4 13]", "(sums [[9 1 4] [8] []]) -> [14 8 0]", "(sums []) -> []", "(sums [[4 0 4 5]]) -> [13]", "(sums [[1 9 2 8 0] [4] [] [9] [7 7 7]]) -> [20 4 0 9 21]", "(sums [[8 0 6 4] [4 1 6 9 6] [0 5 2] [9 5 1 5 9] []]) -> [18 26 7 29 0]", "(sums [[3 6 4]]) -> [13]", "(sums [[9 1 1] [0 2 0 9]]) -> [11 11]", "(sums [[5] [] [0 5 8 6] []]) -> [5 0 19 0]", "(sums [[6 2 8 5 8] [8 9]]) -> [29 17]", "(sums [[4 2 3] [4] [0 4 7]]) -> [9 4 11]", "(sums []) -> []"], "time": 0.304991, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 9 5 7] [6]]) -> [29 6]", "(sums [[5 6 3 8 3] [5] [] []]) -> [25 5 0 0]", "(sums [[9 6 5 3 0] [4 8 5] [3 7] [6] [1 2 9 0]]) -> [23 17 10 6 12]", "(sums []) -> []", "(sums [[2 2 8 0 8] [3 3 9] [0]]) -> [20 15 0]", "(sums [[7 6 2 5]]) -> [20]", "(sums [[0]]) -> [0]", "(sums []) -> []", "(sums [[4 4 4 8 0] [5 3 1 1 4] [6 7 8 5 8]]) -> [20 14 34]", "(sums []) -> []", "(sums [[0 0 0 4]]) -> [4]", "(sums [[8 1] [5 1] [6] [1 5 4 6]]) -> [9 6 6 16]", "(sums [[7 8 5 0 8] [] [8 6 9 9]]) -> [28 0 32]", "(sums []) -> []", "(sums [[4 9] [9] [5 4] [7 8 6]]) -> [13 9 9 21]", "(sums [[] [0] [5 9 5 9 2] [8 2 3 0 2]]) -> [0 0 30 15]", "(sums []) -> []", "(sums [[] [3 5 6] [3 6 4 9] [] [6]]) -> [0 14 22 0 6]", "(sums [[4 5 4] [9 3 4 0 5] [7 5 0 6 6] [] [2 3]]) -> [13 21 24 0 5]", "(sums [[0 6 1 6] [4 8 4] [9 1 1 6 5] [6 0] [6 6 9 5 2]]) -> [13 16 22 6 28]", "(sums [[2] []]) -> [2 0]", "(sums [[5 1 5 0 6] [3 8] [5 5 7]]) -> [17 11 17]", "(sums [[3 7] [1 1 9]]) -> [10 11]"], "time": 0.384421, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 0]]) -> [8]", "(sums [[7 6 4 4] [1 4 5 7 4]]) -> [21 21]", "(sums [[6 6 6] [8 1 6 2 7]]) -> [18 24]", "(sums []) -> []", "(sums []) -> []", "(sums []) -> []", "(sums [[1 3]]) -> [4]", "(sums [[9 1 5 5] [] [] []]) -> [20 0 0 0]", "(sums [[5 6 9 5 8] [5 5] []]) -> [33 10 0]", "(sums [[3 6] [7] [4 4] [8]]) -> [9 7 8 8]", "(sums [[4 1 4 7 4] [5 7 3]]) -> [20 15]", "(sums []) -> []", "(sums [[7 7] [6 7] [7 5 3 7 1]]) -> [14 13 23]", "(sums [[4] [1 0] [9 7 4 8 9] [6 9] []]) -> [4 1 37 15 0]", "(sums [[6 5] [8 8 1] [4 1 2] [9 6 6 3]]) -> [11 17 7 24]", "(sums [[2] [5 4] [7]]) -> [2 9 7]", "(sums [[4 2]]) -> [6]", "(sums [[5 0 6 3 5]]) -> [19]", "(sums [[8 9 4 7] [2 1] [9 9 6 5 3]]) -> [28 3 32]", "(sums [[3 3 4] []]) -> [10 0]", "(sums []) -> []", "(sums [[9 1 3 7 9] [6 9 5 2 4] [1] [7 7 7 9 2]]) -> [29 26 1 32]", "(sums [[4 2] [8 5 7] [3 2 7 3 9] [3 4 6 8 2] [8 8]]) -> [6 20 24 23 16]"], "time": 0.403188, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 2] [1] [1 2 7 1]]) -> [8 1 11]", "(sums [[1 8 6 0] [] [6 7 5 1] [3 9]]) -> [15 0 19 12]", "(sums [[1] [3 1 1] [7 9 5] [] [3 1 7 3 1]]) -> [1 5 21 0 15]", "(sums [[] [8]]) -> [0 8]", "(sums []) -> []", "(sums [[5] [8 4 2 2] [3 6] [3 2 3]]) -> [5 16 9 8]", "(sums [[4 8 5 3 4] [0] [7 5 1]]) -> [24 0 13]", "(sums []) -> []", "(sums [[0 7 7 0]]) -> [14]", "(sums []) -> []", "(sums [[9 1 5] [9 5 0 4 2] [9 6] [] [5 6 2]]) -> [15 20 15 0 13]", "(sums [[5 6 5 6]]) -> [22]", "(sums [[] [2 4] [0] [1 8 3] []]) -> [0 6 0 12 0]", "(sums [[6 3] [3]]) -> [9 3]", "(sums [[9 6 2]]) -> [17]", "(sums [[8 1] [5 5 8 8] [2 1]]) -> [9 26 3]", "(sums [[0 3 5 5 9]]) -> [22]", "(sums [[3] [3 2 3] [8 2 4 5 1]]) -> [3 8 20]", "(sums [[] [4 0] [3 9 0] [] []]) -> [0 4 12 0 0]", "(sums [[5 6 4]]) -> [15]", "(sums [[8 8] [1 3 4] [1 2 3 5] [1 6 1 5] [5 1 0]]) -> [16 8 11 13 6]", "(sums [[] [1] [] [1 6 4 7]]) -> [0 1 0 18]", "(sums []) -> []"], "time": 0.414048, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [1] [3]]) -> [0 1 3]", "(sums [[5 7 3 3] [6]]) -> [18 6]", "(sums [[] [] [1 1 0 9 1]]) -> [0 0 12]", "(sums [[] [] [9 1 4 9] [4 5 5 2] [0 8]]) -> [0 0 23 16 8]", "(sums [[] [4 3] [1 0] [0 1 1] [6 9 0]]) -> [0 7 1 2 15]", "(sums [[] [1 9 5 9 2] [4]]) -> [0 26 4]", "(sums [[0 8] [9 0]]) -> [8 9]", "(sums [[6 1] [] [0]]) -> [7 0 0]", "(sums [[8 9 8 1] [0 2 5 4] [] [3] [1 9 0 4 2]]) -> [26 11 0 3 16]", "(sums [[5 1 3 3 7] [0 5 2 3 6] [4 9 4] []]) -> [19 16 17 0]", "(sums [[0 5 5] [6 3 5]]) -> [10 14]", "(sums [[4] [0]]) -> [4 0]", "(sums [[3 4 8 8] [6 6 4 6 9] [4 4] [1 6 8]]) -> [23 31 8 15]", "(sums [[6 0 1 9] [9 0 0] [] [4]]) -> [16 9 0 4]", "(sums [[]]) -> [0]", "(sums [[]]) -> [0]", "(sums [[5 8 4 8] [0 6 1] [9 1 6 4] [8]]) -> [25 7 20 8]", "(sums [[5 8 1 5] [] [5 2 4 0 6] []]) -> [19 0 17 0]", "(sums []) -> []", "(sums []) -> []", "(sums [[1 5 2] [6]]) -> [8 6]", "(sums [[6 4 1 5 4] [6] []]) -> [20 6 0]", "(sums [[8 8] [7] []]) -> [16 7 0]"], "time": 0.387052, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[5 4] [6 2 7 5 9] []]) -> [9 29 0]", "(sums []) -> []", "(sums [[] [0] [6 6 7 8 1] [2]]) -> [0 0 28 2]", "(sums [[5 0 8 7]]) -> [20]", "(sums [[4] [3] [9] [7 6 0] [6 9 2 0]]) -> [4 3 9 13 17]", "(sums []) -> []", "(sums [[5 9] [9 1] [6 4 5]]) -> [14 10 15]", "(sums [[6] [2 4 1]]) -> [6 7]", "(sums [[3] [4 1 7 3 1] [1 8 1 3] [4 5 6 7 0] []]) -> [3 16 13 22 0]", "(sums []) -> []", "(sums [[8 5] [] [1] [2 2] [2 9 7 3]]) -> [13 0 1 4 21]", "(sums [[] [4 2 8 0] [] [3 3 5 0 5] [2 7 6 6 1]]) -> [0 14 0 16 22]", "(sums [[] [] [2 4 5] [1 8 0]]) -> [0 0 11 9]", "(sums []) -> []", "(sums [[0 3] [6]]) -> [3 6]", "(sums [[4 7 8 2 1] [3] [3 1] [2 2 1 4] [3 8 7 4]]) -> [22 3 4 9 22]", "(sums [[2 6] [3 3 5 6] [6 7 0 5] [1 0] [3 5 6 3]]) -> [8 17 18 1 17]", "(sums [[3] [8 0 7 9]]) -> [3 24]", "(sums []) -> []", "(sums [[6] [9 3 2] []]) -> [6 14 0]", "(sums []) -> []", "(sums [[7 0] [1 3] [3] [] []]) -> [7 4 3 0 0]", "(sums [[2 8 6 9] [9 1 5 3 6] [8] [0 0 2] [5 5 9 9 0]]) -> [25 24 8 2 28]"], "time": 0.388952, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 4 1] [7] [] [1 1 3 7 6] [0 2 1 7 1]]) -> [13 7 0 18 11]", "(sums [[3 0] [9 5 7]]) -> [3 21]", "(sums [[6 8 0 6] [8] [4 0 9 2] [2]]) -> [20 8 15 2]", "(sums []) -> []", "(sums [[5 2 3 9 2] [] [3 4]]) -> [21 0 7]", "(sums [[] [9 9 9 5]]) -> [0 32]", "(sums [[4] []]) -> [4 0]", "(sums [[] [5 9] [] [7]]) -> [0 14 0 7]", "(sums [[9 2] [1 7 8 7 0] [0 9 0 4 2] [8 4 5 3 1] []]) -> [11 23 15 21 0]", "(sums [[5 5 1 5]]) -> [16]", "(sums []) -> []", "(sums [[8 1] [4 1 9 4] [] []]) -> [9 18 0 0]", "(sums [[2 3 0] [3 5 3 6] [0 4] []]) -> [5 17 4 0]", "(sums [[]]) -> [0]", "(sums [[7 7 8] [5 0 6]]) -> [22 11]", "(sums [[0]]) -> [0]", "(sums [[1 5 5 3] [6 2 7 3 7] [0]]) -> [14 25 0]", "(sums [[4 9 5 9 5] [] [5 1 8 8 9]]) -> [32 0 31]", "(sums []) -> []", "(sums [[9 3 4 8 0] [2 3 0 3 0] [] [2]]) -> [24 8 0 2]", "(sums [[8 1] [2 3 4 0]]) -> [9 9]", "(sums []) -> []", "(sums [[0 2]]) -> [2]"], "time": 0.469892, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[5 3] [] [6] [2 1 4 9]]) -> [8 0 6 16]", "(sums [[8]]) -> [8]", "(sums [[3 1 5 8] [7 8 0 4] [5 7 1 4]]) -> [17 19 17]", "(sums [[5 2 7 0] [1 0 0 8 4] [7] [3 7 5]]) -> [14 13 7 15]", "(sums [[1] [2 2 5 1] [2 5] [6 3 6 2 4]]) -> [1 10 7 21]", "(sums [[0 2 7 2] [9] [7 7 8 0 5] [2 0 0 6] []]) -> [11 9 27 8 0]", "(sums [[4] []]) -> [4 0]", "(sums [[8] [] [1 3] [6 7 8 0 2]]) -> [8 0 4 23]", "(sums [[4] [5 3 5 2 1]]) -> [4 16]", "(sums []) -> []", "(sums []) -> []", "(sums [[6 7 3]]) -> [16]", "(sums [[7 8 1 4 5]]) -> [25]", "(sums [[4 5 2 6]]) -> [17]", "(sums [[2] []]) -> [2 0]", "(sums [[5 9]]) -> [14]", "(sums []) -> []", "(sums [[2 3 5 2] [5 3] [0 3 3 7 0] [8 1 1 8 1] [5]]) -> [12 8 13 19 5]", "(sums [[4 2 1 3] []]) -> [10 0]", "(sums [[7 7 7 0] [7] [1] [2 0 3 3 7] [7 7]]) -> [21 7 1 15 14]", "(sums [[] [9] [2 5] [5 5]]) -> [0 9 7 10]", "(sums [[5 8 3 2 4] [4 5 6] [2 8 5 6 4] [7]]) -> [22 15 25 7]", "(sums []) -> []"], "time": 0.417305, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 4 7 2] [0 6 5 4 0] [3 3] [7 6 4 0] [3 1 7 3 6]]) -> [22 15 6 17 20]", "(sums [[8 2 7]]) -> [17]", "(sums [[7] []]) -> [7 0]", "(sums []) -> []", "(sums [[6 8]]) -> [14]", "(sums [[5]]) -> [5]", "(sums [[4] []]) -> [4 0]", "(sums [[8 0 8] [] [0] [2 9] [2 2 3 6 3]]) -> [16 0 0 11 16]", "(sums [[] [] [2 0 0 3] [7 5 1 5 8] [8]]) -> [0 0 5 26 8]", "(sums []) -> []", "(sums [[5 0 6 0 8] [5] [2 4 3]]) -> [19 5 9]", "(sums [[7 5 9] [4 1 3 9 8]]) -> [21 25]", "(sums [[1 4 1 1 3] [0] [3 4 0 3 7] [3 0]]) -> [10 0 17 3]", "(sums [[] [1 6 4 2] [1 1] [8 1 1] [9 4]]) -> [0 13 2 10 13]", "(sums [[5 1] [0 2] [3 7 4] [3 1 5] [9 7 1]]) -> [6 2 14 9 17]", "(sums [[4]]) -> [4]", "(sums [[7 9 4 4]]) -> [24]", "(sums [[2 5 9 6] []]) -> [22 0]", "(sums [[]]) -> [0]", "(sums []) -> []", "(sums [[5] [1 2 9] [9 9 5 5 0] [6 7 5]]) -> [5 12 28 18]", "(sums [[6 9 2 0 5] [3 2 4 9]]) -> [22 18]", "(sums []) -> []"], "time": 0.444127, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 7]]) -> [13]", "(sums [[2 9 2 1]]) -> [14]", "(sums [[8 2 7]]) -> [17]", "(sums [[3 1 0] [2]]) -> [4 2]", "(sums [[4 8 2 6 5] [6 9]]) -> [25 15]", "(sums [[2 4 3]]) -> [9]", "(sums [[3 3] [6 7 5 5] [] [8 5 6 6]]) -> [6 23 0 25]", "(sums [[7 2] [1 5 0 5 5] [6 6 2]]) -> [9 16 14]", "(sums [[7 4]]) -> [11]", "(sums []) -> []", "(sums [[9 7 7 5 7] [6 9 9 7] []]) -> [35 31 0]", "(sums [[] [3 5 6 3 3] [7 0]]) -> [0 20 7]", "(sums [[8 8] [4 7] [9 2 0]]) -> [16 11 11]", "(sums []) -> []", "(sums [[8 4 0] [8] [8 0 2 9] [2 4 7 7 1]]) -> [12 8 19 21]", "(sums []) -> []", "(sums [[5 6 7] [6 6] [7 8 3] [5 8] []]) -> [18 12 18 13 0]", "(sums []) -> []", "(sums [[] [1 3 1 8 3] [] []]) -> [0 16 0 0]", "(sums [[2 8 5] [4 1 2 8 7]]) -> [15 22]", "(sums []) -> []", "(sums [[9 5 8 3 0] [1 9 9 8 4] [3] [7] [5 8 6 1 6]]) -> [25 31 3 7 26]", "(sums [[3 9 3 1] [] [8] [0 9 2 7 9] [4 6 3 8]]) -> [16 0 8 27 21]"], "time": 0.410522, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4]]) -> [4]", "(sums []) -> []", "(sums [[3 4 7 8] [2 7 8 3] [5 2] [0] [0 7 8]]) -> [22 20 7 0 15]", "(sums [[9] [7] [4 6 8 2 3] [4 9 2 7]]) -> [9 7 23 22]", "(sums [[6 4 7]]) -> [17]", "(sums [[3] [] [4 9 6 6]]) -> [3 0 25]", "(sums [[1]]) -> [1]", "(sums [[0 4 7] [3]]) -> [11 3]", "(sums [[8 3] [0 9 7 6 5]]) -> [11 27]", "(sums [[6 5 0] [3 0 8 6 9] [9 2] []]) -> [11 26 11 0]", "(sums []) -> []", "(sums [[] [] [2]]) -> [0 0 2]", "(sums [[5 5 7 8] [7 8 0] [0 8 9 4 9]]) -> [25 15 30]", "(sums [[5 4] [2 0] [7 6 7] []]) -> [9 2 20 0]", "(sums [[4]]) -> [4]", "(sums [[2 0 9] [4 6]]) -> [11 10]", "(sums [[7 6 9 8] [1 7 6 7 9]]) -> [30 30]", "(sums [[5 5 2] [0 9 2] [5 7 5 7] [6 6 0 4 5] []]) -> [12 11 24 21 0]", "(sums [[] [5] [] [8 7 5 3 3]]) -> [0 5 0 26]", "(sums []) -> []", "(sums [[2 7] [4]]) -> [9 4]", "(sums [[] [6 1] []]) -> [0 7 0]", "(sums []) -> []"], "time": 0.461002, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1 9] [9 7 7 1 6]]) -> [10 30]", "(sums [[0 9] [3 6 4 7 7] [3 5 8]]) -> [9 27 16]", "(sums [[6] [6 2 0 0] [4 5] [8 5 3 2 9]]) -> [6 8 9 27]", "(sums [[7 1] [0 4 0 0 3]]) -> [8 7]", "(sums [[2 1 2] [8 7]]) -> [5 15]", "(sums [[] [] [4]]) -> [0 0 4]", "(sums [[6 0] [7]]) -> [6 7]", "(sums [[7 0 4 8 7] [1 6 2 1] [4 1 4 7 1] [] [0 0 9 2 3]]) -> [26 10 17 0 14]", "(sums [[8 9 5 4] [] [8 8 1 9 3] []]) -> [26 0 29 0]", "(sums [[1 3 1 5 6]]) -> [16]", "(sums [[1] [4] [7]]) -> [1 4 7]", "(sums [[2 8 3 6 9] []]) -> [28 0]", "(sums [[9 6] [7 5 9 7] [9 8 5 8 9] [9]]) -> [15 28 39 9]", "(sums []) -> []", "(sums []) -> []", "(sums [[] [6 1] [1]]) -> [0 7 1]", "(sums [[6 9 8] [4] [3 9 9] [7 5 7 4 1] [2 8 6]]) -> [23 4 21 24 16]", "(sums [[2 3] [1 9 1 6]]) -> [5 17]", "(sums [[8 6 5 5]]) -> [24]", "(sums []) -> []", "(sums [[8 7] [1 4 7 1 6] [2 4 6 7 0] [] [0 8 1]]) -> [15 19 19 0 9]", "(sums [[4] [8 9 7] [] [2] [8 7 8 1]]) -> [4 24 0 2 24]", "(sums [[6 9 2] [4 4 8 5] []]) -> [17 21 0]"], "time": 0.373688, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 8 8] [] [2]]) -> [20 0 2]", "(sums [[3 3 0] [5] [1 7]]) -> [6 5 8]", "(sums [[9 6 6 5] [2 5] [5 9 1] [1]]) -> [26 7 15 1]", "(sums []) -> []", "(sums []) -> []", "(sums []) -> []", "(sums [[5] [2 3 2 4 3] [] [2 7 6 3 6]]) -> [5 14 0 24]", "(sums [[] [] [4 6] [0 2 5 5] [5 6 7]]) -> [0 0 10 12 18]", "(sums [[]]) -> [0]", "(sums [[5 0 5] [9 2 1 7 4] [9] [4 2 6] [3 1 6 6]]) -> [10 23 9 12 16]", "(sums [[3 7 4 6] [9 1 5 5 5] [4 0 1 5 8]]) -> [20 25 18]", "(sums [[7 4 1]]) -> [12]", "(sums [[] [8 5 5 6 3] [5] []]) -> [0 27 5 0]", "(sums [[2] [6 0 0] [3] [] []]) -> [2 6 3 0 0]", "(sums [[4 4 4 7 4] [3 6 1] [2] [4 0 7 4 4] []]) -> [23 10 2 19 0]", "(sums [[] [1 4 1] [3 1] [9] []]) -> [0 6 4 9 0]", "(sums [[9 4 4]]) -> [17]", "(sums [[3 7] [9 6 9 2 9] [1 4 2 8 8] [9 6]]) -> [10 35 23 15]", "(sums []) -> []", "(sums [[1 7 1 4 2] [6] [6 4 2] [1 6]]) -> [15 6 12 7]", "(sums [[7] [0 3 4 4 9] [1 1] [1 5] [9 8]]) -> [7 20 2 6 17]", "(sums [[2 3 7 4 2] [4 7] [9 6 9 5 4]]) -> [18 11 33]", "(sums [[8 7 7 8 3] [2 9] [] [5 6 8 8 1]]) -> [33 11 0 28]"], "time": 0.488958, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 5 6 1 3] [1 4 3 1]]) -> [22 9]", "(sums [[3] [8 1] [4 2 9 2]]) -> [3 9 17]", "(sums [[] [2 0 4 4] [7 6 3 1 7] [0 5] [9 6 3 7 8]]) -> [0 10 24 5 33]", "(sums [[4 6] [6 0] [8] [2 6 1 4 4] [6 1 0]]) -> [10 6 8 17 7]", "(sums [[] [] [8 8 0] [5 7 5 5] [7 9]]) -> [0 0 16 22 16]", "(sums [[] [9 5 4 0 0] [3 4 7 5 2] [1 3]]) -> [0 18 21 4]", "(sums [[2 7] [5 1] [0 8 4 7 8]]) -> [9 6 27]", "(sums [[7 3 1 6 1] [3 4 6] [9] []]) -> [18 13 9 0]", "(sums [[3 6 3] [6 5] [2 5 8]]) -> [12 11 15]", "(sums [[5 9 4 5 8] [2 7] [9] [7] [6 4 7 6]]) -> [31 9 9 7 23]", "(sums [[3 4 8 3 8]]) -> [26]", "(sums []) -> []", "(sums []) -> []", "(sums [[4 6 6] [] [] [5 6 5 1 7]]) -> [16 0 0 24]", "(sums [[4 9 9 8 9]]) -> [39]", "(sums [[0 0 3 5 2] [9] [7 9 6] [5 6] [5 5 8 6 2]]) -> [10 9 22 11 26]", "(sums [[3 8] [] [] [7 2 5 7]]) -> [11 0 0 21]", "(sums [[3 5 4] [9] [7 5 9] [8 0 8 3 8] [0 9 7]]) -> [12 9 21 27 16]", "(sums [[9 5 1 9 6] [3 1 9 4 1] [2 5] [8 0 6]]) -> [30 18 7 14]", "(sums [[0 7 2 9] [7] [7 5] [] [8]]) -> [18 7 12 0 8]", "(sums [[1]]) -> [1]", "(sums [[5 6 4 6 0] [2 9 1 4] [2] []]) -> [21 16 2 0]", "(sums []) -> []"], "time": 0.593807, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7] [] [4]]) -> [7 0 4]", "(sums [[]]) -> [0]", "(sums [[2 2]]) -> [4]", "(sums [[0 6 2 2 6] [6 9 5] [8 2 7]]) -> [16 20 17]", "(sums [[8 4 1] [2 7 0] [7 4] [9 1]]) -> [13 9 11 10]", "(sums []) -> []", "(sums [[5 4 6 3] []]) -> [18 0]", "(sums [[] [8] [0 8] [5 0 3 5] [3 7 0 8 3]]) -> [0 8 8 13 21]", "(sums [[0]]) -> [0]", "(sums []) -> []", "(sums [[2] [5 4]]) -> [2 9]", "(sums [[] [8] [6 9 5 0]]) -> [0 8 20]", "(sums []) -> []", "(sums [[1] [2] [8 8]]) -> [1 2 16]", "(sums [[3 4 1] [3 2 9 8] [0 1]]) -> [8 22 1]", "(sums [[9 9 1 9] [5 9] [8 8] [2 0 0]]) -> [28 14 16 2]", "(sums []) -> []", "(sums [[2 1 6 2]]) -> [11]", "(sums [[] [3]]) -> [0 3]", "(sums [[1 9 0 6]]) -> [16]", "(sums [[0 1 6 4] [2 4 1 7 2] [5]]) -> [11 16 5]", "(sums [[9 1 1 7 6] [0 4 9 8 3] [6 2 7 8 7] [4 2 1] [3 4 9 3]]) -> [24 24 30 7 19]", "(sums [[6 6 1 6] [1 2 8 8 6] [7 9 3 0]]) -> [19 25 19]"], "time": 0.487014, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [1 6] [9 3 9] [8 1 2 3]]) -> [0 7 21 14]", "(sums [[0 6 0] [9 2 0 8 9]]) -> [6 28]", "(sums [[9] [4] [3 2 7 8 3]]) -> [9 4 23]", "(sums [[9 3 9] [2] [5] [2 3 1 6 5]]) -> [21 2 5 17]", "(sums [[]]) -> [0]", "(sums [[2 5 2] [5 3 1 4 4] [6 7 8 7 9] [0 6 1 0 5] [0 0 3 6 1]]) -> [9 17 37 12 10]", "(sums []) -> []", "(sums [[9 4 1 0 4] [] [0 0 7 7]]) -> [18 0 14]", "(sums [[3 4 8 3] [3]]) -> [18 3]", "(sums []) -> []", "(sums [[3 1 8 0 9] []]) -> [21 0]", "(sums [[3 0 0 9 6] [] []]) -> [18 0 0]", "(sums []) -> []", "(sums [[4 4]]) -> [8]", "(sums [[7 6 0 3 8] [4 2 0 0] [3 7 6 0 3] [2 2 1]]) -> [24 6 19 5]", "(sums [[4] [5 7 2 3] []]) -> [4 17 0]", "(sums []) -> []", "(sums [[2 4 2 1] [0]]) -> [9 0]", "(sums [[] [0] [5] [0]]) -> [0 0 5 0]", "(sums [[] [0]]) -> [0 0]", "(sums []) -> []", "(sums [[] []]) -> [0 0]", "(sums [[7 3 5 0 1]]) -> [16]"], "time": 0.521633, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 3] [2]]) -> [12 2]", "(sums [[9] [4 6 0 5] [1] [6 2 9 9 8]]) -> [9 15 1 34]", "(sums [[2 5 4] [6 0] [4 2 1 6] [9 6 5 1 8] [8 2 2 2]]) -> [11 6 13 29 14]", "(sums [[2] [5 9 5 3]]) -> [2 22]", "(sums [[0 7 3 7 5]]) -> [22]", "(sums [[6 4 5 3] []]) -> [18 0]", "(sums []) -> []", "(sums []) -> []", "(sums [[]]) -> [0]", "(sums [[6] [9 4 2 4 2] [5 8 0]]) -> [6 21 13]", "(sums [[5 0 4] [0 9 5 6] [1 2]]) -> [9 20 3]", "(sums [[2] []]) -> [2 0]", "(sums [[]]) -> [0]", "(sums [[7 2 5 5] [8 0]]) -> [19 8]", "(sums [[1 5 6 0 0] [5 7 0] [8 5 6] []]) -> [12 12 19 0]", "(sums [[7 4] [9 4 9] [0] [] []]) -> [11 22 0 0 0]", "(sums [[3 0 7 3] [2 7 2 6] [8 0] [7 5 5] [1 2 1 6 4]]) -> [13 17 8 17 14]", "(sums [[3 4 6 6]]) -> [19]", "(sums [[6] [0 5 5] [8 3 2 0] [3 4]]) -> [6 10 13 7]", "(sums [[5 4 2 7 1] [5] [3 4 4 9] [9 5 5 8]]) -> [19 5 20 27]", "(sums [[6 9 5 0 0] [1 2 6 9 6] [1 5 1 0]]) -> [20 24 7]", "(sums [[5 0 0]]) -> [5]", "(sums [[0]]) -> [0]"], "time": 0.273275, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1] [4 0 6] [5 7 3]]) -> [1 10 15]", "(sums []) -> []", "(sums [[4 9 1 5 2] [2] [1 9] [7 1 7 7 2] [8 1 8 8 2]]) -> [21 2 10 24 27]", "(sums [[7] [6 8 8 3 6] [] [9] [2 3 1 1]]) -> [7 31 0 9 7]", "(sums [[8 1 5 0] []]) -> [14 0]", "(sums [[2 0 8 0] [4 3] [6 1] [8 1 9 2]]) -> [10 7 7 20]", "(sums [[]]) -> [0]", "(sums [[] [4 9 7 0] [] [1 6]]) -> [0 20 0 7]", "(sums [[9 7 2 9]]) -> [27]", "(sums [[] [4 9 0 2 9] [] [3 0 9 8 9] []]) -> [0 24 0 29 0]", "(sums [[8 2] [9 0 3]]) -> [10 12]", "(sums [[2 1 6 3 5] [] []]) -> [17 0 0]", "(sums []) -> []", "(sums [[0 6 4 0]]) -> [10]", "(sums [[3 1 9] [5 6 6] [5 4 2] [8] [2 9 1 9]]) -> [13 17 11 8 21]", "(sums [[] []]) -> [0 0]", "(sums [[] [] [6 1 4 2] [8]]) -> [0 0 13 8]", "(sums []) -> []", "(sums [[9 7] [0 3 5 2 2] [0] [0 9]]) -> [16 12 0 9]", "(sums []) -> []", "(sums [[] [7 4] [2 2 9] [8] [5 7 8 6 4]]) -> [0 11 13 8 30]", "(sums [[] [1 1 9] [6 1 6 8]]) -> [0 11 21]", "(sums [[8 1 3 8 7]]) -> [27]"], "time": 0.343249, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [4 6 3 8 2] [1 0] [4 9 0 7] [0 5]]) -> [0 23 1 20 5]", "(sums [[1 1] [7 9 5 6 6] [0 8 9 1 3] [5] [8]]) -> [2 33 21 5 8]", "(sums [[8]]) -> [8]", "(sums []) -> []", "(sums [[3 9] [2 3 1 9] [2] [6] [5 4 6]]) -> [12 15 2 6 15]", "(sums []) -> []", "(sums [[9 9 4 2]]) -> [24]", "(sums [[3 1 8 3 8] [4 9] [0]]) -> [23 13 0]", "(sums [[]]) -> [0]", "(sums [[7 7] [2 7 5 8 6] [2] [6 5] [1 8 3]]) -> [14 28 2 11 12]", "(sums [[1 7 2] [3 2 1 5] [0 8 7] [3]]) -> [10 11 15 3]", "(sums []) -> []", "(sums [[3 4 2] []]) -> [9 0]", "(sums [[8 4 7]]) -> [19]", "(sums [[5 6 0] [] [1]]) -> [11 0 1]", "(sums [[9] [5 3 2] [6 8 5 1 9] [1 6]]) -> [9 10 29 7]", "(sums [[2 6] [0 9 2] [8 4 2]]) -> [8 11 14]", "(sums [[4] [8 1] [5 8 2]]) -> [4 9 15]", "(sums [[5 8 2 5]]) -> [20]", "(sums [[1 1] [7 6] [] [5]]) -> [2 13 0 5]", "(sums [[2 2 1 9] [2] []]) -> [14 2 0]", "(sums [[9 2 6] [8 9] [3 2 2] [6 4 6 6]]) -> [17 17 7 22]", "(sums [[6 7 3] [9 6] [6 9 9 9 1] [9 5 4] []]) -> [16 15 34 18 0]"], "time": 0.478154, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7] [9 2] [8 5 4 7] [3] [1]]) -> [7 11 24 3 1]", "(sums [[]]) -> [0]", "(sums [[] [0 8 9 4] [] [] [5 5 9 7]]) -> [0 21 0 0 26]", "(sums [[0 0 3 9 9] [2 8 9] [4 3] [1 2]]) -> [21 19 7 3]", "(sums [[0 0] [1 8 1 7] [1 2 0 1]]) -> [0 17 4]", "(sums [[]]) -> [0]", "(sums []) -> []", "(sums [[5 2 0 2 7] [9 9 0 3 3]]) -> [16 24]", "(sums [[7 3] [6 8 1 7] [] [] [7]]) -> [10 22 0 0 7]", "(sums []) -> []", "(sums [[8 5] [] [] [6 6]]) -> [13 0 0 12]", "(sums [[3 9 7 3]]) -> [22]", "(sums [[8 8 7 7]]) -> [30]", "(sums [[0 8 5]]) -> [13]", "(sums []) -> []", "(sums [[6] [8 9 7 2 0] []]) -> [6 26 0]", "(sums [[8 8 7 0 2] [1 2 2 2] [8 3 2 1 7] [1 5 9]]) -> [25 7 21 15]", "(sums [[1 1 4 0] [8 0 9] [7 7 1] [8]]) -> [6 17 15 8]", "(sums [[6 4 4 4] [3 5 8 7] [] [8] [2 2 8 0]]) -> [18 23 0 8 12]", "(sums [[9 5 5]]) -> [19]", "(sums []) -> []", "(sums [[4 6 7] [] [6] [0]]) -> [17 0 6 0]", "(sums []) -> []"], "time": 0.337638, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 1 4] [0 7 3 7] [9] []]) -> [14 17 9 0]", "(sums [[5 8 0 8 9] [7 8] [4 4] [3 1 2 0 5]]) -> [30 15 8 11]", "(sums [[] [] [0 1] [] [7 0 8 4 7]]) -> [0 0 1 0 26]", "(sums []) -> []", "(sums [[4 4 7 6]]) -> [21]", "(sums [[3 0 9 3] [1 2 4 9 5] [7 2 4] [3 7 4 1]]) -> [15 21 13 15]", "(sums [[5 3] []]) -> [8 0]", "(sums [[8 3] [0 4]]) -> [11 4]", "(sums [[2 7]]) -> [9]", "(sums [[3] [0 6 9 8] [2 9 3 8 3]]) -> [3 23 25]", "(sums [[] [4 1 6 2 9] [0 9 6 1] []]) -> [0 22 16 0]", "(sums [[]]) -> [0]", "(sums [[5 0] [8 0] [8 7] [0]]) -> [5 8 15 0]", "(sums [[1 7 8] []]) -> [16 0]", "(sums []) -> []", "(sums [[0 0 3 7] [] [5 6] [9] [3 5]]) -> [10 0 11 9 8]", "(sums [[3 2]]) -> [5]", "(sums [[1] [4 0 0 4]]) -> [1 8]", "(sums [[6] [0] [1 9 6 1]]) -> [6 0 17]", "(sums [[] [1 2 0 1]]) -> [0 4]", "(sums [[7 5 4 5] [8 7 6 0] [6 9] [6 6 9 2 4]]) -> [21 21 15 27]", "(sums [[] [7 4 2 6]]) -> [0 19]", "(sums []) -> []"], "time": 0.324463, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[5 4] [2] [8]]) -> [9 2 8]", "(sums [[8 1 2] [0 8] [2 6 5 2] [3] [0 4 5 2]]) -> [11 8 15 3 11]", "(sums []) -> []", "(sums []) -> []", "(sums [[6 4 5 1] [9 3] [7 6] [4 2] []]) -> [16 12 13 6 0]", "(sums [[4 0 6] [5 3] [5 0 3] [9] [0]]) -> [10 8 8 9 0]", "(sums [[0 0 9] [] [9 3 7 0 3]]) -> [9 0 22]", "(sums [[] [8] [5 6 9 1 8]]) -> [0 8 29]", "(sums []) -> []", "(sums [[5 8 8 6 2] [1 5 9 0]]) -> [29 15]", "(sums [[4 4 9 1 8] [7 9 6] [1 5 3]]) -> [26 22 9]", "(sums [[]]) -> [0]", "(sums [[5 8 2] [4 6 8] []]) -> [15 18 0]", "(sums [[2 9 6] [3 9 5 0 9] [] []]) -> [17 26 0 0]", "(sums [[5 4] [2 7 9 8 2] [8 6]]) -> [9 28 14]", "(sums [[8 3 6 8] [7] [1 9 1 9 8]]) -> [25 7 28]", "(sums [[4 8]]) -> [12]", "(sums [[7 6 1 2 5] [6 5 8 4 8] [7 3 0 1] [4 5] [5 3 9 9 0]]) -> [21 31 11 9 26]", "(sums [[] [4 0 3 5 5]]) -> [0 17]", "(sums [[3 1 7 0] [0 3 7 8] [2 4] [] [2]]) -> [11 18 6 0 2]", "(sums [[2] [1 3] [1 4 6 5] [2 2 1]]) -> [2 4 16 5]", "(sums [[6 2 9] [5 2]]) -> [17 7]"], "time": 0.494209, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 7 5 6] [8 1 5 4 7]]) -> [24 25]", "(sums [[4 0 8 5 3] [3 6 1 1]]) -> [20 11]", "(sums [[9 5 9] [9 4] [7]]) -> [23 13 7]", "(sums [[6 0 0 4] [9 6 6] [3 8 8 3 6]]) -> [10 21 28]", "(sums [[3 8] [] [3] [5 7 0]]) -> [11 0 3 12]", "(sums [[2] [3 7 0 1]]) -> [2 11]", "(sums []) -> []", "(sums []) -> []", "(sums [[1 6] [7 5 0 2 6] [7 5 5 8 0]]) -> [7 20 25]", "(sums [[] [0 3 0 8 4] [2] [5 3 4 1]]) -> [0 15 2 13]", "(sums [[3 5 5 8]]) -> [21]", "(sums [[3 4] [] [3 3 8 3 4] [4 5 3 5]]) -> [7 0 21 17]", "(sums [[5 5 9 5 7] [] [4 9]]) -> [31 0 13]", "(sums [[0] [9 3 0 3] [2 3 5]]) -> [0 15 10]", "(sums [[] [3 9 3 2 6] [9 0 0]]) -> [0 23 9]", "(sums [[0] [9 9] [8 5 9 1 6] [9] [8]]) -> [0 18 29 9 8]", "(sums [[2 1 7 1 1] [2]]) -> [12 2]", "(sums []) -> []", "(sums [[7 6 1 8 1] [8 0 1]]) -> [23 9]", "(sums [[7 1 6 2] [8 8] [2 8 9 8]]) -> [16 16 27]", "(sums [[1] [3 5]]) -> [1 8]", "(sums [[] [] [] [8 2 6 7]]) -> [0 0 0 23]", "(sums [[9]]) -> [9]"], "time": 0.488755, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[5 8 5 9] [8 5] [] [5 3 8 4]]) -> [27 13 0 20]", "(sums [[9 3 2 7] [] [1 7]]) -> [21 0 8]", "(sums []) -> []", "(sums [[] [] [5 0 0]]) -> [0 0 5]", "(sums []) -> []", "(sums [[] [] [1 5 6 3 5]]) -> [0 0 20]", "(sums [[4 0 8] [2] [4 2 8] [1 0 7 7] [0 6 2 4 7]]) -> [12 2 14 15 19]", "(sums [[9 4 7] [3] [1 4 7 9] [] [7]]) -> [20 3 21 0 7]", "(sums [[9 3 7 4] [0] []]) -> [23 0 0]", "(sums [[0 8 7 6] [5 2 8 8] [2]]) -> [21 23 2]", "(sums [[1] [7 7 6 2] [9 3]]) -> [1 22 12]", "(sums [[9] [2 4] [4]]) -> [9 6 4]", "(sums [[3 2 6 6 8] []]) -> [25 0]", "(sums [[0 0] [] [6] [2 4 3 1]]) -> [0 0 6 10]", "(sums [[1 6 8 8] [] [0 7 6] [0 2 0 8 5] [0 4 4 0 2]]) -> [23 0 13 15 10]", "(sums [[4 1 4] [2 0 1] [2 9] []]) -> [9 3 11 0]", "(sums [[7 3] [8] [] [7 1 7]]) -> [10 8 0 15]", "(sums [[9 5] [9 9 3] [2 2 3 5] [5 5 2 6 9]]) -> [14 21 12 27]", "(sums [[0 2]]) -> [2]", "(sums []) -> []", "(sums [[9 8] [6 0 1 0 1] []]) -> [17 8 0]", "(sums []) -> []", "(sums [[2 9 3] [9] [0 8 1]]) -> [14 9 9]"], "time": 0.438295, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2 5 8] [2 8 6 2 0] [0 0] [8]]) -> [15 18 0 8]", "(sums [[8 2] [1 5 8 1 6]]) -> [10 21]", "(sums [[3 1 6 5 0] [4 7 7 3] [0] []]) -> [15 21 0 0]", "(sums [[8 8 4] [1 3] [3 7 4 7 9] [1]]) -> [20 4 30 1]", "(sums [[1 0 0 2] [] [0 8 9 9 8]]) -> [3 0 34]", "(sums [[5 7 7 5] [7 2 1 3 4] [] [3 5 3]]) -> [24 17 0 11]", "(sums [[] [8 5 8 4 3]]) -> [0 28]", "(sums [[9 5] [3 0 9] [8 9] [4] []]) -> [14 12 17 4 0]", "(sums []) -> []", "(sums [[] [2 1 7 8 9]]) -> [0 27]", "(sums [[3 2 7 2] [3 8 3 2 2] [1 2 2] [6 1 9 0] []]) -> [14 18 5 16 0]", "(sums []) -> []", "(sums [[4 7 9 9 8] [8] [8 8 6 3 8] [3 9 4 4 3] [9 9]]) -> [37 8 33 23 18]", "(sums []) -> []", "(sums [[0 0 5 5 9] [7 4 8 1 5] [8 4 7 3] []]) -> [19 25 22 0]", "(sums [[9 6 0 1] [3 4] [8 6] [6 2 2 3 1] [0]]) -> [16 7 14 14 0]", "(sums [[] [0 1 0] [] [9 1 1]]) -> [0 1 0 11]", "(sums [[0 5 5] [1 0 4 5] [9 3 3] []]) -> [10 10 15 0]", "(sums [[5 0 1] [2 9] [6] [] [4 8 5]]) -> [6 11 6 0 17]", "(sums []) -> []", "(sums [[] [4] [1 1 4 3] [3 7 8 7 2]]) -> [0 4 9 27]", "(sums [[9] [1 8] [8 4 8 3 0]]) -> [9 9 23]", "(sums [[3 2]]) -> [5]"], "time": 0.468281, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[6 6 4] [4 1 4 5 9] [2 2 0 7 9]]) -> [16 23 20]", "(sums [[9 2] [5 9 7 7]]) -> [11 28]", "(sums [[8 5 9] [9 9] [1 7 9] [6 3 0 0 7]]) -> [22 18 17 16]", "(sums [[6 7 2 0 6] [2 0 4] [6] [2 7 9 2 0]]) -> [21 6 6 20]", "(sums []) -> []", "(sums [[8 5 9 1] [0 1 4 2 4] [1] [4 1 5 4] [9 9 0]]) -> [23 11 1 14 18]", "(sums [[2 8 5]]) -> [15]", "(sums [[2 8 8 3 3] [8 9 3] [0 8 7] [6 2 0 4] [8 0]]) -> [24 20 15 12 8]", "(sums [[] [2 4 4 6] [0 0 4] [4 5 6 2 6] [9]]) -> [0 16 4 23 9]", "(sums [[6 3 7] [3 0] [0 8 7 9]]) -> [16 3 24]", "(sums [[2 0 8 5 3] [] [7 7]]) -> [18 0 14]", "(sums [[]]) -> [0]", "(sums [[2] [1 7 5 9]]) -> [2 22]", "(sums []) -> []", "(sums [[] [3 0 7 6] [7 3]]) -> [0 16 10]", "(sums []) -> []", "(sums [[2 8 0 2]]) -> [12]", "(sums [[7 5] [6 2 8 7] [3 5 9 6]]) -> [12 23 23]", "(sums []) -> []", "(sums []) -> []", "(sums [[3 1 6 6 4] [8 7 1]]) -> [20 16]", "(sums [[] [6 3 7 4 6] [9 4 9 4] [4 5 8 4 6] [9 0]]) -> [0 26 26 27 9]"], "time": 0.471681, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7] [0 0 3] [8 0 6 7 0] [9 3 4 1 7]]) -> [7 3 21 24]", "(sums [[4 9 5 0] [3 3 3 5 6] [7 7 4 6 5] [1 6 6 5] [4 5 5 2 2]]) -> [18 20 29 18 18]", "(sums [[6] [5] [6 7] [9 6 8] []]) -> [6 5 13 23 0]", "(sums [[5] [] [3 1 7 2 7] [7 7]]) -> [5 0 20 14]", "(sums [[0 6 1 4 8]]) -> [19]", "(sums [[6 8 6 4 0] [3]]) -> [24 3]", "(sums [[1 8 4] [7 5 5] [3 6 1 8] [9 6 9 9]]) -> [13 17 18 33]", "(sums [[3] [] []]) -> [3 0 0]", "(sums [[9 8 6 6] [9 7 8 7] [4 6 2] [5 4] []]) -> [29 31 12 9 0]", "(sums [[7] [1 4 8] [9 8 0] [5 9 8 2 8] []]) -> [7 13 17 32 0]", "(sums [[5 5 6 2]]) -> [18]", "(sums [[2 7 9] [8 9 1]]) -> [18 18]", "(sums [[7] [5 6 8 8 9] [3 0]]) -> [7 36 3]", "(sums [[7 8 9 2 9] [3 0 1 7 8] [7 2 5 0 6] [8 1 1 3 9]]) -> [35 19 20 22]", "(sums [[6 7 7] [1] [0 9]]) -> [20 1 9]", "(sums [[1] []]) -> [1 0]", "(sums [[] [5 2 1 4]]) -> [0 12]", "(sums [[8 3 7] [5] [7 2]]) -> [18 5 9]", "(sums [[2 4 3] [0 9 1 6 1]]) -> [9 17]", "(sums []) -> []", "(sums []) -> []", "(sums [[6 3 2] [6 3 7 3]]) -> [11 19]", "(sums [[9] [0 4 0 9 3]]) -> [9 16]"], "time": 0.556478, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 0] [8 6 6 6] [3 3 3]]) -> [9 26 9]", "(sums [[6 2 3 1 2] [3] [7] [6 9 2 3 6]]) -> [14 3 7 26]", "(sums []) -> []", "(sums [[8 9 3] [0] [5 4 0 5 6]]) -> [20 0 20]", "(sums []) -> []", "(sums [[6 9 6 6 3] [] [5 3 1 6]]) -> [30 0 15]", "(sums [[2 3 2] [3 0 3 8 3]]) -> [7 17]", "(sums [[6 0] [] [4 7 5 6 3] [2 2]]) -> [6 0 25 4]", "(sums []) -> []", "(sums [[] [6 4] [7 1 4 8 8] [4 7]]) -> [0 10 28 11]", "(sums [[3 7 7 2 5] [3 7 3] [8 4 8 8]]) -> [24 13 28]", "(sums [[] [5 5 4 4] [9 8 4 3 5] [1 3 7 7] [0 1]]) -> [0 18 29 18 1]", "(sums [[] [6 0] [6 9 7 3] [9]]) -> [0 6 25 9]", "(sums [[9 0 9 4] [1] [] [4 6]]) -> [22 1 0 10]", "(sums [[3 8 5] [2]]) -> [16 2]", "(sums []) -> []", "(sums [[3 6 8 5 9] [9 7 5 8] [2]]) -> [31 29 2]", "(sums []) -> []", "(sums [[7 2]]) -> [9]", "(sums [[] [] [1 1] [9 2 6] []]) -> [0 0 2 17 0]", "(sums []) -> []", "(sums [[0] [9] [1] [0 5 0]]) -> [0 9 1 5]", "(sums [[] [2 7 3] [3 1] [4 7 3 2 5]]) -> [0 12 4 21]"], "time": 0.379449, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4]]) -> [4]", "(sums [[4 7 3 2 8] [0 9 6 4] [1] [2 9 7 1] [8 3]]) -> [24 19 1 19 11]", "(sums [[1 5] [6 8 9] [] [7 5]]) -> [6 23 0 12]", "(sums [[6 7 7 8 1] [5 0 1]]) -> [29 6]", "(sums [[] [9 5] [3 5]]) -> [0 14 8]", "(sums []) -> []", "(sums [[0 2 3] [6 6 0 2 5]]) -> [5 19]", "(sums [[] [7 6] [6 9 6 4 8]]) -> [0 13 33]", "(sums [[5 4 5 2 7] [] [2]]) -> [23 0 2]", "(sums [[]]) -> [0]", "(sums [[3 3 7 7] [] []]) -> [20 0 0]", "(sums []) -> []", "(sums [[8] [2 7 4 2] [1]]) -> [8 15 1]", "(sums []) -> []", "(sums [[4] []]) -> [4 0]", "(sums [[] [7 3 6] [8 9 2] [] [9 7 4]]) -> [0 16 19 0 20]", "(sums [[2 2 1 7 9] [] [] [1 2 6 5]]) -> [21 0 0 14]", "(sums [[8 1 5] [1 5] []]) -> [14 6 0]", "(sums [[7 8 7 0] [2 8 5 7 2]]) -> [22 24]", "(sums [[6 7 1 2 3] [6 6] [9]]) -> [19 12 9]", "(sums [[0] [1 3 9] [6 6 5 9] [9 5]]) -> [0 13 26 14]", "(sums [[8] [2]]) -> [8 2]", "(sums []) -> []"], "time": 0.426615, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 4 2 9] [5 9]]) -> [21 14]", "(sums [[9 4] [7]]) -> [13 7]", "(sums [[9 8 4 6] [3 0 6] [8 3 7 5 7] [5 9 8]]) -> [27 9 30 22]", "(sums [[9 4 4 1 7]]) -> [25]", "(sums [[] [6 1 6] [2 6 3] [3 0]]) -> [0 13 11 3]", "(sums [[1 7 4 7 3] [] [6]]) -> [22 0 6]", "(sums [[] [4] [3 0 2 0] [] [5 8]]) -> [0 4 5 0 13]", "(sums []) -> []", "(sums [[7 1] [] [4 1 7 6]]) -> [8 0 18]", "(sums [[0 2]]) -> [2]", "(sums [[0 6] [1 3 5]]) -> [6 9]", "(sums [[4 2 4 7] [1 7]]) -> [17 8]", "(sums [[7]]) -> [7]", "(sums [[0 5 0] [9] [5] [7]]) -> [5 9 5 7]", "(sums [[9 4 9 5 0] [8 7] [0 5 8] []]) -> [27 15 13 0]", "(sums [[4]]) -> [4]", "(sums [[1 6 2 7 0] [4 5 9] [2 7]]) -> [16 18 9]", "(sums [[] [8 7 1] [3]]) -> [0 16 3]", "(sums [[6] [] [9 0 3 5 4] [3 6 4] []]) -> [6 0 21 13 0]", "(sums [[]]) -> [0]", "(sums [[6 8 8 0 9] [5 9 1 7] [] []]) -> [31 22 0 0]", "(sums [[7 5] [4 5 7 8] [] [3 8]]) -> [12 24 0 11]", "(sums [[7 2 4 4 6] [5 4 9 4]]) -> [23 22]"], "time": 0.478292, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [7 3 6 6]]) -> [0 22]", "(sums [[2 5]]) -> [7]", "(sums [[1 8 5 1 8] [5 7 8] [9 5 1] [4 0 6] []]) -> [23 20 15 10 0]", "(sums [[8 5 2 1 1] [7 3] [6] [3] [2 3 1 3]]) -> [17 10 6 3 9]", "(sums []) -> []", "(sums [[8 8 4 0] [8 2 8 9 1] [0 4 9 1]]) -> [20 28 14]", "(sums [[9 6 8] [6 1 3]]) -> [23 10]", "(sums [[3 0 1] [5 6] [9 5] [] [0 6 2]]) -> [4 11 14 0 8]", "(sums [[3] [2 3 3 2 8] []]) -> [3 18 0]", "(sums [[1 3 1 8 2] [2 1 5 3]]) -> [15 11]", "(sums [[]]) -> [0]", "(sums [[] [0 3 4 7 9] [8 2 6 1 6] [2 7 5] [2 1]]) -> [0 23 23 14 3]", "(sums [[3 5 3 6 4]]) -> [21]", "(sums [[7 7 7 8] [] [] [7 3]]) -> [29 0 0 10]", "(sums []) -> []", "(sums [[2 1 5 8] [9 0 6]]) -> [16 15]", "(sums [[3 7 4] [0 5 1] [] [6]]) -> [14 6 0 6]", "(sums [[2 8 9] [5] [0 6] [5] [3 2]]) -> [19 5 6 5 5]", "(sums [[6 1] [3] [] []]) -> [7 3 0 0]", "(sums [[6 3 6 4 2] [6 9 8 1]]) -> [21 24]", "(sums [[] [4 8 1 8 5]]) -> [0 26]", "(sums [[6 7 7] [2 7 9]]) -> [20 18]", "(sums []) -> []"], "time": 0.490212, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 8 0] [] [5 8 3 9]]) -> [14 0 25]", "(sums [[]]) -> [0]", "(sums [[1 7 5 8] [6 9 4 2] [4 1 9] [0 9 5] [1 1 2 9 7]]) -> [21 21 14 14 20]", "(sums []) -> []", "(sums [[8 3 8 2] [7] [4 2] [1 4]]) -> [21 7 6 5]", "(sums []) -> []", "(sums [[3 7 5]]) -> [15]", "(sums [[7 3 3 9] [9 2 3] [0 7 6] [3 3]]) -> [22 14 13 6]", "(sums [[7 4 8 6 6] [4 5 3 0]]) -> [31 12]", "(sums []) -> []", "(sums [[8 4] [5 9]]) -> [12 14]", "(sums [[8 8 8 9 8]]) -> [41]", "(sums [[9 0]]) -> [9]", "(sums [[1] [3 9 1] [6 5 3]]) -> [1 13 14]", "(sums []) -> []", "(sums [[1 5] [8 0 7 6 8] [3] []]) -> [6 29 3 0]", "(sums [[0 3 6 9 1] [4 1]]) -> [19 5]", "(sums [[1 9 2] [3 5 1 9] [8 3 6] [3 5 1 6] []]) -> [12 18 17 15 0]", "(sums [[7 8 1 3 8] []]) -> [27 0]", "(sums [[] [2 6 0 1]]) -> [0 9]", "(sums [[] [8 1] [8 6 1 1 6] [6 3]]) -> [0 9 22 9]", "(sums [[6 0 6 8]]) -> [20]", "(sums []) -> []"], "time": 0.439017, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 5 0] [3 8] [] [6]]) -> [9 11 0 6]", "(sums [[3 1 1] [] [8 4 2] [6 8]]) -> [5 0 14 14]", "(sums [[6 2 8 5 0] [4 0] [] [9 4 6 5 8] [1]]) -> [21 4 0 32 1]", "(sums [[] [2 4 8 1] [8 6 8]]) -> [0 15 22]", "(sums [[7 1 8 1] [3 0] [] [8]]) -> [17 3 0 8]", "(sums [[1 1] [] []]) -> [2 0 0]", "(sums [[4 3 9 4] [2] [6 3 5] [0 6 5] [9 5]]) -> [20 2 14 11 14]", "(sums [[0 8] [9 0 3 1] [3] [6 7] [2 7 5 1 7]]) -> [8 13 3 13 22]", "(sums [[] [1 4 9] [6 3 8 4]]) -> [0 14 21]", "(sums [[9 1 5] [5 4 3 0] [0 9 0 4 7] [5 4 7]]) -> [15 12 20 16]", "(sums [[0 1 5] [8] [7]]) -> [6 8 7]", "(sums [[7 3] [0 4 0] [0 5 6 8 4] [0 0 9]]) -> [10 4 23 9]", "(sums [[9 5 8 7] [2 0 6]]) -> [29 8]", "(sums []) -> []", "(sums [[6] [1 6 6 3] [7 9 0] [5 8 3 2] [0]]) -> [6 16 16 18 0]", "(sums [[1 4 1] [1]]) -> [6 1]", "(sums [[] [9 2 0 7]]) -> [0 18]", "(sums [[2 0 9 3] [4 1 4 1 3] [8 2 6 3 5] [] [0 1 5]]) -> [14 13 24 0 6]", "(sums [[1] [7 5 1] [9 7 3 5] [5 2 5 8 3]]) -> [1 13 24 23]", "(sums [[] [0 6 2 9 7] [9 7 0]]) -> [0 24 16]", "(sums []) -> []", "(sums [[4 6 7 6 6]]) -> [29]", "(sums []) -> []"], "time": 0.41493, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[] [5 8] [7 4 2 4 4] [1 9] [9]]) -> [0 13 21 10 9]", "(sums [[] [6 4] [9] [0]]) -> [0 10 9 0]", "(sums []) -> []", "(sums [[2 9 5] [9 6 9 1]]) -> [16 25]", "(sums [[0 6 0 8] [2 3 4 4 7]]) -> [14 20]", "(sums [[8 4 3 5] [3 9] [1 3 9 2 0]]) -> [20 12 15]", "(sums [[3 7 8 1 7] [5 9] [7 2 3 3 1]]) -> [26 14 16]", "(sums [[0]]) -> [0]", "(sums []) -> []", "(sums [[4] [9 5 5 0]]) -> [4 19]", "(sums [[2] [2 8 1 6] [2] [8 2] [0]]) -> [2 17 2 10 0]", "(sums [[9 1] [3 5 2 4] [9 0]]) -> [10 14 9]", "(sums [[8 4 6 7] [8 5 4] [0 7 9 3 9] [1 9 9 1] [5 8]]) -> [25 17 28 20 13]", "(sums [[2 2 6 5 3] [9 0] [6 6 7]]) -> [18 9 19]", "(sums [[7] [6] [5]]) -> [7 6 5]", "(sums [[6]]) -> [6]", "(sums [[7 9 1 9] [2 7 3] [4 1 4 1 9] [2 2 5] [0 2 8 1]]) -> [26 12 19 9 11]", "(sums [[3] [8 3 8 4] [] [7]]) -> [3 23 0 7]", "(sums []) -> []", "(sums []) -> []", "(sums [[] [2 6 8] [0 8 9]]) -> [0 16 17]", "(sums [[5 5] [2 9 7 1 0] []]) -> [10 19 0]"], "time": 0.47248, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6] [7 3 4] [5 5 8 3 6] [9 4 2 1] []]) -> [6 14 27 16 0]", "(sums [[6 6 6 6 3]]) -> [27]", "(sums [[8 7] [0 7 5 3 5]]) -> [15 20]", "(sums [[] [6 8 3 8 5] [8 1] [1 1 0] [4]]) -> [0 30 9 2 4]", "(sums [[9 7 9] [5 9 7 5] [9 4 4] [3]]) -> [25 26 17 3]", "(sums []) -> []", "(sums [[4] [2 4 6 8 6] [1] [8 7]]) -> [4 26 1 15]", "(sums [[4 9 4]]) -> [17]", "(sums [[] [] [2 0 6] [3 1 3 9] [0 1 9 7 2]]) -> [0 0 8 16 19]", "(sums [[5 4 3 6 5] [0 5] [3 2 2 0] [0 5 0 5 2]]) -> [23 5 7 12]", "(sums [[5 3 6] [7 4 2 8 0] [6 4 2 5 3]]) -> [14 21 20]", "(sums [[2 8 7 2] [6] [] [0 6 0]]) -> [19 6 0 6]", "(sums [[5 1] [2 4 3 9] [2 9 0 6]]) -> [6 18 17]", "(sums [[4 6] []]) -> [10 0]", "(sums [[4 1] [2 5 6 5] [4] [3]]) -> [5 18 4 3]", "(sums []) -> []", "(sums []) -> []", "(sums []) -> []", "(sums [[1 1] [4 5 1 2 2]]) -> [2 14]", "(sums []) -> []", "(sums [[3 2 6 7 2]]) -> [20]", "(sums [[6] [9 3 1 0 7] [5]]) -> [6 20 5]", "(sums [[] [6 1 3 1 8] [3 2] [2 5] [5 4 8 5 5]]) -> [0 19 5 7 27]"], "time": 0.506113, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 0 9 8]]) -> [23]", "(sums [[4 6] [2] [3 4 5 9] [1 7]]) -> [10 2 21 8]", "(sums [[9 3 5 5 8] []]) -> [30 0]", "(sums [[] [7] [9 0 5]]) -> [0 7 14]", "(sums [[9]]) -> [9]", "(sums [[1 2] [] [2 7 1 8] [4]]) -> [3 0 18 4]", "(sums [[8 7 3 0 5] [5 2 9 0 6] [3 2 6]]) -> [23 22 11]", "(sums [[5 1 1 5 6]]) -> [18]", "(sums [[9 1 5]]) -> [15]", "(sums [[0 2 8 9 4] [7]]) -> [23 7]", "(sums [[6 4 1]]) -> [11]", "(sums [[7 7 1] []]) -> [15 0]", "(sums [[7 3 0] [7] [1 6 5] [8 1 5] [3 1 2 3 5]]) -> [10 7 12 14 14]", "(sums [[9 3 1 5 7] [6 7 5 5]]) -> [25 23]", "(sums [[6 3 9 0 7] [1 2]]) -> [25 3]", "(sums [[0 4 3 4] [5 0 5 2 9] [8 9 1] [2 2] [8 9 9]]) -> [11 21 18 4 26]", "(sums [[0] []]) -> [0 0]", "(sums [[3 9 5 4] [4 0] [3 3 3] [1 2 8]]) -> [21 4 9 11]", "(sums [[6] [3 9 7] [1 8 1] [7 1 7]]) -> [6 19 10 15]", "(sums [[4 7 6] [8 5 5 3] [1] [6 8 0]]) -> [17 21 1 14]", "(sums [[]]) -> [0]", "(sums [[6 7 8 4] [9]]) -> [25 9]", "(sums [[1 9] [7 1] [9 2] [6 2]]) -> [10 8 11 8]"], "time": 0.365584, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1 8 2 7 4] [0 0 2 8] [0]]) -> [22 10 0]", "(sums [[6 7 9 1 2] [4 7 2] [] [4 6]]) -> [25 13 0 10]", "(sums []) -> []", "(sums [[8] [] [9 9 4 0] [9 8 5 8] [4 9 5 3]]) -> [8 0 22 30 21]", "(sums []) -> []", "(sums [[8 3] [8 1 6 1] []]) -> [11 16 0]", "(sums [[8 3 4 2]]) -> [17]", "(sums [[4] [6 4 0]]) -> [4 10]", "(sums [[] [8] [2 8 7 1 8]]) -> [0 8 26]", "(sums [[] [1]]) -> [0 1]", "(sums [[7]]) -> [7]", "(sums [[8] [4 8] [4] [1]]) -> [8 12 4 1]", "(sums [[4 2]]) -> [6]", "(sums [[]]) -> [0]", "(sums [[6] [2 2 1 7 1] [1 2 3 3 2] [4 1]]) -> [6 13 11 5]", "(sums [[6]]) -> [6]", "(sums [[] [2] [7 8] [2]]) -> [0 2 15 2]", "(sums [[3] [6 7 2 7] [9] [] [2 3 6]]) -> [3 22 9 0 11]", "(sums []) -> []", "(sums []) -> []", "(sums []) -> []", "(sums [[1] [] [4 3 7]]) -> [1 0 14]", "(sums [[4 3 7] [8 5 0 4 9] [8] [5] [5 4]]) -> [14 26 8 5 9]"], "time": 0.477595, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[8 2 3 2] [1] [3 8 3 3] [7 5]]) -> [15 1 17 12]", "(sums [[]]) -> [0]", "(sums [[2 6 3 7 0] [9 1 9 2 0] [] [] [6 1 2]]) -> [18 21 0 0 9]", "(sums [[1 0 6 8] [2 1] [0 9 4 2]]) -> [15 3 15]", "(sums [[6 0 5 0 4]]) -> [15]", "(sums [[4 3 4 1] [9 7 7] [0 3 7] [7 1] [8 7]]) -> [12 23 10 8 15]", "(sums [[5 1 4] [6]]) -> [10 6]", "(sums [[] [0 6] [] []]) -> [0 6 0 0]", "(sums [[1 9 3 6 9] [2 8 6 0]]) -> [28 16]", "(sums [[5] [8 8 7 1] [4] []]) -> [5 24 4 0]", "(sums [[9 4 5 8 8] []]) -> [34 0]", "(sums [[9 3 4 9] [5] [3 2 4] [7 2] [6]]) -> [25 5 9 9 6]", "(sums [[6 6 9] [] []]) -> [21 0 0]", "(sums [[7 3 4 2]]) -> [16]", "(sums [[0 5 9 0]]) -> [14]", "(sums [[] [1] [0]]) -> [0 1 0]", "(sums [[5 7] [9 6 8 2]]) -> [12 25]", "(sums [[9] [] [6]]) -> [9 0 6]", "(sums [[2]]) -> [2]", "(sums [[6 4] [9 9 8]]) -> [10 26]", "(sums [[4] [] [0 2]]) -> [4 0 2]", "(sums [[] [1 0] []]) -> [0 1 0]"], "time": 0.25624, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6] [3 5] [6 2 2]]) -> [6 8 10]", "(sums [[7 9 9]]) -> [25]", "(sums [[2 0 4 4] [4 7 1]]) -> [10 12]", "(sums [[0] [7 5 3] [7] [9 2 9] [3 7 7 6 5]]) -> [0 15 7 20 28]", "(sums []) -> []", "(sums [[] [2 7 5] [7 9] [6]]) -> [0 14 16 6]", "(sums [[4 4]]) -> [8]", "(sums [[4 8 6] [2 1 3 6 7] [0 8 9 8 5] [2 0 7]]) -> [18 19 30 9]", "(sums [[9] [1 9 0 8] [3 0 3 9] []]) -> [9 18 15 0]", "(sums [[0] [1] [] [6 9 3 6] [0 4 0 2]]) -> [0 1 0 24 6]", "(sums [[] [7 2]]) -> [0 9]", "(sums [[9 0 2 4 9] [8 1 0 0] [8 6 2 0 8] [8] [8 7 9 0]]) -> [24 9 24 8 24]", "(sums [[5 0 8 7] [7 3 8 4 7]]) -> [20 29]", "(sums []) -> []", "(sums [[] [] [] [0 1 2 2 3] [7 4]]) -> [0 0 0 8 11]", "(sums [[9 2 5 4] [] [] [1 0 5] [0 0 9 1]]) -> [20 0 0 6 10]", "(sums [[6 1] [3 2]]) -> [7 5]", "(sums [[] [6 9 0 4] [2 2 1 6]]) -> [0 19 11]", "(sums [[2] [6 4 9 6] [6 0 8 2] [5 3 7] [4 9 1 0]]) -> [2 25 16 15 14]", "(sums []) -> []", "(sums [[4 7] [5 4] [1] [0] [9]]) -> [11 9 1 0 9]", "(sums [[0 3] [5 9 3] [9 9 2 0 8] [0 3 2 4]]) -> [3 17 28 9]", "(sums [[5 7 4] [6 9] [7]]) -> [16 15 7]"], "time": 0.599525, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [] [0 8 2]]) -> [0 0 10]", "(sums [[9] []]) -> [9 0]", "(sums [[5 2] [] [3 7 9] [5]]) -> [7 0 19 5]", "(sums []) -> []", "(sums [[0 7 2 4 5]]) -> [18]", "(sums [[1] [] [7 0 3 4 1]]) -> [1 0 15]", "(sums []) -> []", "(sums [[9 9 7 3] [5 3 1] [] [7 3 6 5] [7 2 3 4]]) -> [28 9 0 21 16]", "(sums [[2 5] [6 7]]) -> [7 13]", "(sums [[5 0 6] [0 2] [6] [8 5]]) -> [11 2 6 13]", "(sums [[] [9 9 4 7]]) -> [0 29]", "(sums [[2] [0] [2 0 4 9 8]]) -> [2 0 23]", "(sums [[4 0 3] [0 5 5 8 2]]) -> [7 20]", "(sums [[] [3 4] []]) -> [0 7 0]", "(sums [[4 2 7 7 6] [] [1 3 2 8] [1 4] [9 0 6 4 6]]) -> [26 0 14 5 25]", "(sums [[1 2 2 4 5] [3 8 1] [0 9 6] [5] [0 8 9 3 8]]) -> [14 12 15 5 28]", "(sums [[5 5 2] [8] [6 2]]) -> [12 8 8]", "(sums []) -> []", "(sums [[5 3] []]) -> [8 0]", "(sums [[2] [7 5 9 4]]) -> [2 25]", "(sums [[7 3 3] [5 3 3 1 9]]) -> [13 21]", "(sums []) -> []", "(sums [[7 2 0 6] [3 4]]) -> [15 7]"], "time": 0.654735, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 2 0] [2 3]]) -> [10 5]", "(sums [[3 7 8 5 3] [3] [6 0 7] [0 2]]) -> [26 3 13 2]", "(sums [[8 7 7 4 2] [0 0 4] []]) -> [28 4 0]", "(sums [[6 7] [9 8 4 0]]) -> [13 21]", "(sums [[] [9] [8 1 7] [7 1 8 2]]) -> [0 9 16 18]", "(sums [[] [8 1]]) -> [0 9]", "(sums [[2]]) -> [2]", "(sums [[9 9]]) -> [18]", "(sums [[5 2]]) -> [7]", "(sums []) -> []", "(sums [[0] [3 1 5] [1 3]]) -> [0 9 4]", "(sums [[9 1 7 8 1] [6 9 7 3 5]]) -> [26 30]", "(sums [[0 0 5] [] [1 7] [1 1 1 8] [7]]) -> [5 0 8 11 7]", "(sums [[8 8 9 6] [1 4 9 8 6] [4 7 2 4] [1]]) -> [31 28 17 1]", "(sums [[] [7] [9 0 7 5] [1 0 1 5] [1 7 7]]) -> [0 7 21 7 15]", "(sums [[1 8 4 8 5] [5 5 2 9] [6] [7 1]]) -> [26 21 6 8]", "(sums [[3 6 6 5] [2 8 6 6 8]]) -> [20 30]", "(sums [[6] [8 5 0 8] [7 6 5 7] [1 0 2]]) -> [6 21 25 3]", "(sums []) -> []", "(sums []) -> []", "(sums [[9 1] [0 4 9] [2] [3]]) -> [10 13 2 3]", "(sums [[8] []]) -> [8 0]", "(sums [[5 8 3 5] [3 5 6] [3 1 9 5 8] [0 0 2 4]]) -> [21 14 26 6]"], "time": 0.291037, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 7 7]]) -> [23]", "(sums [[]]) -> [0]", "(sums [[8 2 9 3] [3 4 2 4 0] [2 5 5]]) -> [22 13 12]", "(sums [[6] [8 4 9 2 5]]) -> [6 28]", "(sums [[3 4 2 3 2] [2] [6 8 6]]) -> [14 2 20]", "(sums []) -> []", "(sums [[6 8] [0] [0]]) -> [14 0 0]", "(sums [[4 0 1 1 8] [7 7] [7 9 2]]) -> [14 14 18]", "(sums []) -> []", "(sums [[0]]) -> [0]", "(sums []) -> []", "(sums []) -> []", "(sums []) -> []", "(sums [[2 0 4 5] []]) -> [11 0]", "(sums [[]]) -> [0]", "(sums [[1 5] [4 2] []]) -> [6 6 0]", "(sums [[8 2 3] [7] []]) -> [13 7 0]", "(sums [[] [4 4] [3] [5 2 8 3 9]]) -> [0 8 3 27]", "(sums [[7 1 9 6] [8 0] [5 3 3 8] [0 0 4 0 6] [7 5 9]]) -> [23 8 19 10 21]", "(sums [[2 4 1] [3 7] [8 6 5 2 9] [0 2] [4 0 4]]) -> [7 10 30 2 8]", "(sums [[0 5]]) -> [5]", "(sums [[0 9 0 3] [6 7 2] [9 0 9 9 1] [5 1 1] [4 1 7 2 3]]) -> [12 15 28 7 17]", "(sums [[2 4 5 6] [5 0 1 7] [8 8 9] [3 0] [0]]) -> [17 13 25 3 0]"], "time": 0.23216, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[9] [0 6 4 4] [2 2 4 0] [4 0]]) -> [9 14 8 4]", "(sums [[2 7 5] [] [8 7 8 7 9] [0 8]]) -> [14 0 39 8]", "(sums [[5 2 9] [5 7 6]]) -> [16 18]", "(sums [[8] [5 7 8 0 9] [3 5] [3 8] [4]]) -> [8 29 8 11 4]", "(sums [[9 7 3 9 8] [5 5 4 0 7] [4 0 4 1] []]) -> [36 21 9 0]", "(sums []) -> []", "(sums [[4] [2 2 8 8 7] [2 3 2 4 3] [8 3] [5 5 2 6 1]]) -> [4 27 14 11 19]", "(sums [[4 9 9 8 6] [4 5]]) -> [36 9]", "(sums [[2 3 1 6] [4 3 5] [9 3] [0 2 3]]) -> [12 12 12 5]", "(sums [[4]]) -> [4]", "(sums [[0 9 4 8] [8 1 5 2 9] [] []]) -> [21 25 0 0]", "(sums [[5 2]]) -> [7]", "(sums [[1 4 0 0 6] [8 5] [] [3] [1 8 0 5 5]]) -> [11 13 0 3 19]", "(sums [[4 9 4 0] [9 5]]) -> [17 14]", "(sums [[8 7 8 2]]) -> [25]", "(sums []) -> []", "(sums [[6]]) -> [6]", "(sums [[5] [0 9 8 4] [9 2 2 1] [] [8 4 1]]) -> [5 21 14 0 13]", "(sums []) -> []", "(sums [[1 7 9 7] [] [0 3 9] [2 3 6]]) -> [24 0 12 11]", "(sums [[2 1 6]]) -> [9]", "(sums [[7 5 3 4]]) -> [19]"], "time": 0.659141, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[5 0 1 5] [3 6 5 3 0] []]) -> [11 17 0]", "(sums [[3 8 6] [] [8 9 5 9 0]]) -> [17 0 31]", "(sums [[7 7 8 0] [1 3 3 4] [5 4] [7] [6 5]]) -> [22 11 9 7 11]", "(sums []) -> []", "(sums [[] [1 2 1 0]]) -> [0 4]", "(sums [[6 1 9 9 2] [9 0 4 3] [6 3 0 9 7] [8 9 9 4 0]]) -> [27 16 25 30]", "(sums [[2 6]]) -> [8]", "(sums []) -> []", "(sums [[4 7 8 6 2] []]) -> [27 0]", "(sums []) -> []", "(sums [[0 4 9 8] [8 8]]) -> [21 16]", "(sums [[3] [] [9] [3 6 2 1 0] [9 4 8]]) -> [3 0 9 12 21]", "(sums [[7]]) -> [7]", "(sums [[] [6 8 9 9] [2 9 2 9] [] [5 5 2]]) -> [0 32 22 0 12]", "(sums [[4] [4 2 8 8 9] [2 1 1]]) -> [4 31 4]", "(sums []) -> []", "(sums []) -> []", "(sums []) -> []", "(sums [[4 6 8] [7 4 7 4] [9 9 0 4] [4 8 9 2 4]]) -> [18 22 22 27]", "(sums [[2 2 2] [6 1] [5 8 9 8]]) -> [6 7 30]", "(sums [[4 3 0] [2 9 4 8]]) -> [7 23]", "(sums [[1 9 3] [8] [6 5 5 1]]) -> [13 8 17]", "(sums []) -> []"], "time": 0.639413, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2 3] [2 2] [7 5] [9]]) -> [5 4 12 9]", "(sums [[0 7 5] [8 2 1 5] [4 3 8 9]]) -> [12 16 24]", "(sums [[6 3 3] [1] [2 3 7 2] [0 6 5 4 1] []]) -> [12 1 14 16 0]", "(sums [[7 4] [4 0 2 9 9]]) -> [11 24]", "(sums [[1 0 3 1 1] [9] [0] [3 1]]) -> [6 9 0 4]", "(sums [[0 2 4 2 8]]) -> [16]", "(sums [[] [5 3 8 3] [9 7] [8] [2]]) -> [0 19 16 8 2]", "(sums [[] [4 5 1 8 6] [2 2 0]]) -> [0 24 4]", "(sums [[6 8]]) -> [14]", "(sums [[8 2 9 2] [4 5 1 8 5] [9 7 9] [2 0 1 8] [9 8]]) -> [21 23 25 11 17]", "(sums [[1 8 1 9] [0 0 9 3 4]]) -> [19 16]", "(sums [[0 1 0] []]) -> [1 0]", "(sums []) -> []", "(sums [[5 7]]) -> [12]", "(sums [[1 8]]) -> [9]", "(sums []) -> []", "(sums [[1] [3]]) -> [1 3]", "(sums [[0 3 7 2] [] [9 7 8 3 3]]) -> [12 0 30]", "(sums [[2] [0 7 7 7] [2]]) -> [2 21 2]", "(sums [[9 3 7] [3 5 5 0] [1 1 3] [0 5 9 8] [1]]) -> [19 13 5 22 1]", "(sums []) -> []", "(sums [[9 1 0] [9]]) -> [10 9]", "(sums []) -> []"], "time": 0.680351, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 6 5]]) -> [20]", "(sums [[2 4 9 8 6]]) -> [29]", "(sums [[9 8] [1 1 3] [1 3 1] []]) -> [17 5 5 0]", "(sums []) -> []", "(sums [[3] [0]]) -> [3 0]", "(sums [[] [7 8 1 4 9] [] [9 2 8]]) -> [0 29 0 19]", "(sums [[5 8 4 0]]) -> [17]", "(sums [[7 0 1 5] [8] [0 8 9 9] []]) -> [13 8 26 0]", "(sums [[7 2 1 2 4] [8 7 7 0]]) -> [16 22]", "(sums [[] []]) -> [0 0]", "(sums [[]]) -> [0]", "(sums [[3 0] [7] [4 3 9 8]]) -> [3 7 24]", "(sums [[] [4] [4 1 6 8 3]]) -> [0 4 22]", "(sums [[7 2 5] [8] [9 1 1] [7 4 9 1] []]) -> [14 8 11 21 0]", "(sums []) -> []", "(sums [[0 1]]) -> [1]", "(sums [[] [3]]) -> [0 3]", "(sums [[]]) -> [0]", "(sums [[1 2] [9 2] [9] []]) -> [3 11 9 0]", "(sums [[9 6 6 0 2] [9] [5 4 4] []]) -> [23 9 13 0]", "(sums []) -> []", "(sums [[0 3 3] [4 2 5 9 7]]) -> [6 27]", "(sums [[1]]) -> [1]"], "time": 0.625627, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 0 5 3] [0]]) -> [12 0]", "(sums [[] [9 7 8 6 1] [1 5 2 4] []]) -> [0 31 12 0]", "(sums [[] [] [6 3 7 7 6]]) -> [0 0 29]", "(sums [[6 0 8 7 2] [7 6 9] [6 3 5 7 8]]) -> [23 22 29]", "(sums []) -> []", "(sums [[6 6 2 4] [4 3 4 7 9] [] [5 8 6 6]]) -> [18 27 0 25]", "(sums [[] [5 0 8 0 7] [5 9 7 6 1]]) -> [0 20 28]", "(sums []) -> []", "(sums []) -> []", "(sums [[0 6 2 3]]) -> [11]", "(sums [[3 9 1 9 5]]) -> [27]", "(sums [[8] [4 8]]) -> [8 12]", "(sums [[7 8]]) -> [15]", "(sums [[3 5 9 7 9]]) -> [33]", "(sums [[] [2] [] [4 3 4 2] [3 6 8 9]]) -> [0 2 0 13 26]", "(sums []) -> []", "(sums [[7] [2 3 5 8] [1 1 7 8 7]]) -> [7 18 24]", "(sums [[] [6 5 0 5 1] [2 6 8] [1 7 8 4] [3 3 0 3 9]]) -> [0 17 16 20 18]", "(sums [[3 3 3 8] [0] [5 3 9 7 0] [1 9]]) -> [17 0 24 10]", "(sums [[6 8 1 1] [1 1 9]]) -> [16 11]", "(sums [[1 4 5] [8 6 7] [5] [3 9] [8 6]]) -> [10 21 5 12 14]", "(sums []) -> []", "(sums [[3 6 2 8] [6 4 9 0 9] [6 7] [0 1 5 8]]) -> [19 28 13 14]"], "time": 0.654805, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2 1 7 5] [0 7 9] [9 2 3] []]) -> [15 16 14 0]", "(sums [[0 2 9] [2]]) -> [11 2]", "(sums [[9 7] [5 6 7] [4]]) -> [16 18 4]", "(sums [[6 6] [8 9] [1 9 2]]) -> [12 17 12]", "(sums [[5 8 5] [5] [] [3]]) -> [18 5 0 3]", "(sums [[6] [3 4 5 4 3] [8 4 4 0 9] [5]]) -> [6 19 25 5]", "(sums []) -> []", "(sums [[2 4 3 5]]) -> [14]", "(sums [[5 0 1 9 3] [0 6] [] [1 7 0 5 9] [5]]) -> [18 6 0 22 5]", "(sums [[9 0 2] [] [7 5 6 4 2] [4 4]]) -> [11 0 24 8]", "(sums [[] []]) -> [0 0]", "(sums [[2 1] [1 2] [] [0 3 7 0]]) -> [3 3 0 10]", "(sums [[7] [8 9] [8 2 8 9] [1 8] [8 8 1 9]]) -> [7 17 27 9 26]", "(sums [[3 5] [7] [3 7 9 3 8] [0]]) -> [8 7 30 0]", "(sums [[7 8 4 1 4] [4 3 7 4 2] [6 6 4 0 8] [9 6 8] [6]]) -> [24 20 24 23 6]", "(sums [[] [3 7 8 0 2]]) -> [0 20]", "(sums [[8] [6 2 9 1] [3] []]) -> [8 18 3 0]", "(sums [[6 4 0 0 6] [8] [3 5 5]]) -> [16 8 13]", "(sums [[6 1 0]]) -> [7]", "(sums [[] [1] [3 3 1 1 0] [0]]) -> [0 1 8 0]", "(sums [[]]) -> [0]", "(sums []) -> []", "(sums [[3 0 4 1] [] [6 2]]) -> [8 0 8]"], "time": 0.638126, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [] [2 9 9 2 5] [0]]) -> [0 0 27 0]", "(sums []) -> []", "(sums [[4 6] [9 8] [7 9 6 5]]) -> [10 17 27]", "(sums [[] [7 7]]) -> [0 14]", "(sums [[2 9 6 8 6] [3 4 2 2] [3] [2]]) -> [31 11 3 2]", "(sums [[5]]) -> [5]", "(sums [[6 0 7] [1 9 6 2] [1 9 2 2 2] [7]]) -> [13 18 16 7]", "(sums [[4 1 6 4 9]]) -> [24]", "(sums []) -> []", "(sums [[1 7 6] [5] [0 2 6 0 0] [1 4 7]]) -> [14 5 8 12]", "(sums [[4 8 2]]) -> [14]", "(sums [[0 7] [] [7 3]]) -> [7 0 10]", "(sums [[6 9 7]]) -> [22]", "(sums [[7 3 3 9 7] [] [8 6 3]]) -> [29 0 17]", "(sums [[5 8 6 2]]) -> [21]", "(sums []) -> []", "(sums [[3] [3]]) -> [3 3]", "(sums [[0 3 7 6] [2 7] [2 7 8 6 1] [0 4] [9 5 9 8]]) -> [16 9 24 4 31]", "(sums []) -> []", "(sums [[1 7 2 7 7] [6 0 3] [1 3 5 4] [5 7 1 8]]) -> [24 9 13 21]", "(sums [[7 4] [5 6]]) -> [11 11]", "(sums []) -> []", "(sums [[5 9]]) -> [14]"], "time": 0.269907, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2 5] [8 3 1] [9]]) -> [7 12 9]", "(sums [[7 4] [6 2 1 5 7] [] [] [2 2 7]]) -> [11 21 0 0 11]", "(sums [[6] [0 8 4 1 2] [9 9 1] [9 0 9 1 0]]) -> [6 15 19 19]", "(sums [[8 3 4 6] [8 3] [4 4 9 1]]) -> [21 11 18]", "(sums [[4 5 1 6] [0 9 9 5 7] [1 8 0 7 8] [] [1 2 1 1]]) -> [16 30 24 0 5]", "(sums [[0 4]]) -> [4]", "(sums [[4 7 2] [3 6 9 4]]) -> [13 22]", "(sums [[9 1 4 0 8] [4 2 3 3 6] [8] [9 7]]) -> [22 18 8 16]", "(sums [[7 6] [] [9 8]]) -> [13 0 17]", "(sums [[6 7] [8 3]]) -> [13 11]", "(sums [[2 9 0 0 7] [8 6 4 7] [7 7 6 6 4] [0 8]]) -> [18 25 30 8]", "(sums [[] [4 1] [] [1 1 3 9 5] [9 0]]) -> [0 5 0 19 9]", "(sums []) -> []", "(sums [[] [7 9 8 3 6]]) -> [0 33]", "(sums [[3] [] [7 1 9 8 0]]) -> [3 0 25]", "(sums [[0 0 1] [4 9 6 3 2]]) -> [1 24]", "(sums []) -> []", "(sums [[5 7 1 9] [8]]) -> [22 8]", "(sums [[2 1 6 8] []]) -> [17 0]", "(sums []) -> []", "(sums [[8] [3] [8] [4 8 5] [4 3 2 8]]) -> [8 3 8 17 17]", "(sums [[9 5 6] [6 0 4]]) -> [20 10]", "(sums [[]]) -> [0]"], "time": 0.363169, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 6 4 0] [4 2 6 0] [6 0 1 0 9]]) -> [16 12 16]", "(sums [[4 6 3 7 0] [4] [6]]) -> [20 4 6]", "(sums [[1 3] []]) -> [4 0]", "(sums [[7] []]) -> [7 0]", "(sums []) -> []", "(sums [[3] [0 7 2]]) -> [3 9]", "(sums [[3 4 4 1 9] [5]]) -> [21 5]", "(sums [[7 8 5 5] [6 6] [] [4] [4 4 5 7]]) -> [25 12 0 4 20]", "(sums [[3 1 5 9]]) -> [18]", "(sums [[6]]) -> [6]", "(sums [[4 7 6] [3 3 0 7] [3 0 2] [1 8 9 2 4]]) -> [17 13 5 24]", "(sums [[4 6 9] [] [6 0 7 9 7] []]) -> [19 0 29 0]", "(sums [[2 1 0] [0 8] [8 1 9 2 9] [7 4] [9]]) -> [3 8 29 11 9]", "(sums [[3 8 5 7]]) -> [23]", "(sums [[6] [8 2] [2 6] [6 3 3 6]]) -> [6 10 8 18]", "(sums [[2] [2 2 8] [8] [2 7 5 4]]) -> [2 12 8 18]", "(sums [[7 7] [9 2] [2 2 3 4] [8 1]]) -> [14 11 11 9]", "(sums []) -> []", "(sums [[2 7 7 0] [3 8 0] [5 1 1 0] [5] [5]]) -> [16 11 7 5 5]", "(sums [[7 2 7] [] [3 8 6 2] [7 5] [5]]) -> [16 0 19 12 5]", "(sums [[3] [5 7 3 6 2] [4 3 9] [9 3] [1 9]]) -> [3 23 16 12 10]", "(sums []) -> []", "(sums [[4] [] [8 7 5]]) -> [4 0 20]"], "time": 0.432216, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 9 4] [] [9 1 6] [0 3 5 2]]) -> [21 0 16 10]", "(sums [[2 1 4] [2 2 6 8 0]]) -> [7 18]", "(sums [[6 0 1 0 5] [1 8] [8 9] [2 4] [7 4]]) -> [12 9 17 6 11]", "(sums [[3 4 4 3] [0 0] [7 0 5] [0 0 6 7] []]) -> [14 0 12 13 0]", "(sums [[6 5 9] [8 6 2 3]]) -> [20 19]", "(sums [[2 2 4 3] [8 4 3 3]]) -> [11 18]", "(sums [[1] [2 0] [4 7] [8 4 0 9] [4 4]]) -> [1 2 11 21 8]", "(sums [[] [9] [2] []]) -> [0 9 2 0]", "(sums [[9]]) -> [9]", "(sums [[9 6 7] [8] [9 0 8]]) -> [22 8 17]", "(sums []) -> []", "(sums [[4 0] [4 1 0 5]]) -> [4 10]", "(sums [[0 8 9 3] [2 8 5 0]]) -> [20 15]", "(sums [[]]) -> [0]", "(sums [[6 2] [] [7 7 7] [3 4 0 3 6]]) -> [8 0 21 16]", "(sums [[6 5 4 1 7] [6 0 0]]) -> [23 6]", "(sums [[] [7 9 6 7] [6 6 5]]) -> [0 29 17]", "(sums []) -> []", "(sums [[4 5 6 9]]) -> [24]", "(sums [[]]) -> [0]", "(sums [[] [5] [8 2 2] [0 8] [8 1 3 8 2]]) -> [0 5 12 8 22]", "(sums [[7] [0 1 4] [1 2 6] [4]]) -> [7 5 9 4]", "(sums [[4 5 2 1] [4 6 8 6 2] [0 3] [] [3]]) -> [12 26 3 0 3]"], "time": 0.47197, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
