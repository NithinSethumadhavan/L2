{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [2 1 1]) -> [2 2 2]", "(multfirst [6 5]) -> [6 6]"], "time": 0.02314, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [2]) -> [2]", "(multfirst [4 7 6]) -> [4 4 4]", "(multfirst [4]) -> [4]"], "time": 0.037041, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 4 8 7]) -> [6 6 6 6]", "(multfirst [4 6]) -> [4 4]", "(multfirst [6 3]) -> [6 6]"], "time": 0.025543, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8 7 9 9]) -> [8 8 8 8]", "(multfirst [3]) -> [3]", "(multfirst []) -> []"], "time": 0.026665, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) b) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5]) -> [5]", "(multfirst []) -> []", "(multfirst [0]) -> [0]"], "time": 0.000373, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [2 4 5 8]) -> [2 2 2 2]", "(multfirst [3 9]) -> [3 3]", "(multfirst [2 0 3 0]) -> [2 2 2 2]"], "time": 0.032726, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8 6]) -> [8 8]", "(multfirst [3 7 8 2 4]) -> [3 3 3 3 3]", "(multfirst [8 7 9 1]) -> [8 8 8 8]"], "time": 0.023466, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7 2 5]) -> [7 7 7]", "(multfirst [1 3]) -> [1 1]"], "time": 0.034669, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [2 7 5]) -> [2 2 2]", "(multfirst [7 0]) -> [7 7]", "(multfirst [2 4]) -> [2 2]"], "time": 0.035138, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [9]) -> [9]", "(multfirst [7 4]) -> [7 7]"], "time": 0.036113, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8 2 1]) -> [8 8 8]", "(multfirst [8 9 1 4 6]) -> [8 8 8 8 8]", "(multfirst [5 1 5 1 4]) -> [5 5 5 5 5]"], "time": 0.037973, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0]) -> [0]", "(multfirst [2 9]) -> [2 2]", "(multfirst []) -> []"], "time": 0.024472, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1 3]) -> [1 1]", "(multfirst [6 3 9 2 7]) -> [6 6 6 6 6]", "(multfirst [1 6 3 5]) -> [1 1 1 1]"], "time": 0.028368, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [2 7 3 2 3]) -> [2 2 2 2 2]", "(multfirst [4 0 6]) -> [4 4 4]", "(multfirst [1 1 7 5 1]) -> [1 1 1 1 1]"], "time": 0.029386, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [2 2 5 1]) -> [2 2 2 2]", "(multfirst [0 7 6 0 7]) -> [0 0 0 0 0]", "(multfirst []) -> []"], "time": 0.034426, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8 6 1 1 5]) -> [8 8 8 8 8]", "(multfirst [3 4 4 3]) -> [3 3 3 3]", "(multfirst [4 9]) -> [4 4]"], "time": 0.034603, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [7 5 1]) -> [7 7 7]", "(multfirst [1 7 6 5]) -> [1 1 1 1]", "(multfirst [7 3]) -> [7 7]"], "time": 0.022114, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9]) -> [9]", "(multfirst [5 4 8 1]) -> [5 5 5 5]", "(multfirst []) -> []"], "time": 0.030993, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [2 8]) -> [2 2]", "(multfirst [1 2 8]) -> [1 1 1]", "(multfirst [7 1 9 5 0]) -> [7 7 7 7 7]"], "time": 0.021955, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [7 7 2 0]) -> [7 7 7 7]", "(multfirst [5 5 2]) -> [5 5 5]", "(multfirst [6 5 2]) -> [6 6 6]"], "time": 0.029969, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5]) -> [5]", "(multfirst [0 2]) -> [0 0]", "(multfirst [9 3 6]) -> [9 9 9]"], "time": 0.022023, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7 3 7]) -> [7 7 7]", "(multfirst [2 8 5]) -> [2 2 2]"], "time": 0.026442, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5 6 0]) -> [5 5 5]", "(multfirst [3 5 1 7 7]) -> [3 3 3 3 3]", "(multfirst [2 3 2]) -> [2 2 2]"], "time": 0.032229, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7 4 1 7 7]) -> [7 7 7 7 7]", "(multfirst [6 0 3 1]) -> [6 6 6 6]"], "time": 0.026048, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [2 5 7 8 6]) -> [2 2 2 2 2]", "(multfirst [7 0 5 0 6]) -> [7 7 7 7 7]", "(multfirst [4]) -> [4]"], "time": 0.022537, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [7 3]) -> [7 7]", "(multfirst [7 6 2]) -> [7 7 7]", "(multfirst [9]) -> [9]"], "time": 0.02537, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [2 6 2]) -> [2 2 2]"], "time": 0.024415, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8 5 5]) -> [8 8 8]", "(multfirst [3 8 2]) -> [3 3 3]", "(multfirst [7]) -> [7]"], "time": 0.031246, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5]) -> [5]", "(multfirst []) -> []", "(multfirst [9 1 1]) -> [9 9 9]"], "time": 0.028193, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1 9 6 7 1]) -> [1 1 1 1 1]", "(multfirst [6 0 2 7]) -> [6 6 6 6]", "(multfirst [9 8 7 4]) -> [9 9 9 9]"], "time": 0.034962, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 3 8 7]) -> [3 3 3 3]", "(multfirst [1 9 9]) -> [1 1 1]", "(multfirst [4 1 5]) -> [4 4 4]"], "time": 0.034026, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0 3 0]) -> [0 0 0]", "(multfirst [7 1]) -> [7 7]", "(multfirst [7]) -> [7]"], "time": 0.023499, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [7 8 5 0 2]) -> [7 7 7 7 7]", "(multfirst [5]) -> [5]", "(multfirst []) -> []"], "time": 0.021382, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [5 7 7]) -> [5 5 5]", "(multfirst [0]) -> [0]"], "time": 0.025131, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8 3]) -> [8 8]", "(multfirst [3 3]) -> [3 3]", "(multfirst []) -> []"], "time": 0.037064, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 7 8 7 7]) -> [6 6 6 6 6]", "(multfirst [9]) -> [9]", "(multfirst []) -> []"], "time": 0.022432, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0 7]) -> [0 0]", "(multfirst [3 4]) -> [3 3]", "(multfirst []) -> []"], "time": 0.022214, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [7 4 4 6]) -> [7 7 7 7]", "(multfirst [2]) -> [2]", "(multfirst [7 9 1]) -> [7 7 7]"], "time": 0.027329, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0 7 8 7 4]) -> [0 0 0 0 0]", "(multfirst [5 5 9 3 0]) -> [5 5 5 5 5]", "(multfirst []) -> []"], "time": 0.040602, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 3 3 8]) -> [6 6 6 6]", "(multfirst [7 0 5 5]) -> [7 7 7 7]", "(multfirst [6]) -> [6]"], "time": 0.0263, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [9 3 7 3]) -> [9 9 9 9]", "(multfirst []) -> []"], "time": 0.040389, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [7 9 1 6]) -> [7 7 7 7]", "(multfirst [5 4 8 2]) -> [5 5 5 5]", "(multfirst [7]) -> [7]"], "time": 0.038687, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [2 4]) -> [2 2]", "(multfirst []) -> []", "(multfirst [6 0 5 1 1]) -> [6 6 6 6 6]"], "time": 0.022646, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [6 4 0 1 4]) -> [6 6 6 6 6]", "(multfirst [0 0]) -> [0 0]"], "time": 0.034809, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [3 2 1 4]) -> [3 3 3 3]"], "time": 0.023994, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 6 3 1]) -> [3 3 3 3]", "(multfirst [4 1]) -> [4 4]", "(multfirst [1 3]) -> [1 1]"], "time": 0.021819, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [2 4 8 9]) -> [2 2 2 2]", "(multfirst [5]) -> [5]", "(multfirst [1 4 6 0 1]) -> [1 1 1 1 1]"], "time": 0.025484, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1 6 6 4]) -> [1 1 1 1]", "(multfirst [8 2 7 3]) -> [8 8 8 8]", "(multfirst [2 4 8 9]) -> [2 2 2 2]"], "time": 0.030588, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [6 6 9]) -> [6 6 6]", "(multfirst [0 6 0]) -> [0 0 0]"], "time": 0.024926, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 1]) -> [9 9]", "(multfirst [7 8 9 0 9]) -> [7 7 7 7 7]", "(multfirst [8 4 4 3]) -> [8 8 8 8]"], "time": 0.030057, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5 9 5]) -> [5 5 5]", "(multfirst [0]) -> [0]", "(multfirst [7 0 7]) -> [7 7 7]"], "time": 0.031155, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) b) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6]) -> [6]", "(multfirst [5]) -> [5]", "(multfirst []) -> []"], "time": 0.000643, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6]) -> [6]", "(multfirst [2 3 9 0 8]) -> [2 2 2 2 2]", "(multfirst []) -> []"], "time": 0.022126, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4 3 5]) -> [4 4 4]", "(multfirst [2 5 8 2]) -> [2 2 2 2]", "(multfirst [6 3 3]) -> [6 6 6]"], "time": 0.022839, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [2]) -> [2]", "(multfirst [5 5 2 3]) -> [5 5 5 5]", "(multfirst [0 5 3]) -> [0 0 0]"], "time": 0.029962, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) b) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5]) -> [5]", "(multfirst [4]) -> [4]", "(multfirst []) -> []"], "time": 0.000537, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [2 6 8 5 8]) -> [2 2 2 2 2]", "(multfirst [2 6 6]) -> [2 2 2]", "(multfirst [7 2 0 1]) -> [7 7 7 7]"], "time": 0.026507, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 3]) -> [9 9]", "(multfirst [7 8 3 2 2]) -> [7 7 7 7 7]", "(multfirst [3 2]) -> [3 3]"], "time": 0.030221, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 8]) -> [6 6]", "(multfirst [4 8 1 7 4]) -> [4 4 4 4 4]", "(multfirst [8 4 5]) -> [8 8 8]"], "time": 0.022443, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 1 6 7 7]) -> [6 6 6 6 6]", "(multfirst [9]) -> [9]", "(multfirst [2 3 8]) -> [2 2 2]"], "time": 0.033462, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8 5 3 3 7]) -> [8 8 8 8 8]", "(multfirst [6 1 9]) -> [6 6 6]", "(multfirst [0]) -> [0]"], "time": 0.0234, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8 7 5]) -> [8 8 8]", "(multfirst [5 9 2 3 1]) -> [5 5 5 5 5]", "(multfirst [2 8 8]) -> [2 2 2]"], "time": 0.027257, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5 8]) -> [5 5]", "(multfirst [4 5 5 0]) -> [4 4 4 4]", "(multfirst [0 1 9]) -> [0 0 0]"], "time": 0.022655, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4 8]) -> [4 4]", "(multfirst []) -> []", "(multfirst [1]) -> [1]"], "time": 0.021941, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 1 4 6 0]) -> [9 9 9 9 9]", "(multfirst []) -> []", "(multfirst [7 2 3 5 4]) -> [7 7 7 7 7]"], "time": 0.023149, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 4 0]) -> [6 6 6]", "(multfirst [4 0 3 8]) -> [4 4 4 4]", "(multfirst []) -> []"], "time": 0.027633, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7 4 8]) -> [7 7 7]", "(multfirst [9 5 6]) -> [9 9 9]"], "time": 0.021737, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 6]) -> [3 3]", "(multfirst [9 0 2]) -> [9 9 9]", "(multfirst [1 2 0 2 8]) -> [1 1 1 1 1]"], "time": 0.036168, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [8 4 8 2]) -> [8 8 8 8]", "(multfirst [4 0 5 3]) -> [4 4 4 4]"], "time": 0.035002, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [5 3]) -> [5 5]"], "time": 0.02796, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [7 3 1 9 8]) -> [7 7 7 7 7]", "(multfirst [0]) -> [0]", "(multfirst [9]) -> [9]"], "time": 0.032999, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8 5 6]) -> [8 8 8]", "(multfirst []) -> []", "(multfirst [8 5 2 6 5]) -> [8 8 8 8 8]"], "time": 0.024813, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [7 8]) -> [7 7]", "(multfirst [5 8 4]) -> [5 5 5]", "(multfirst [3 7]) -> [3 3]"], "time": 0.023399, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 3 3 8 4]) -> [6 6 6 6 6]", "(multfirst [5 7 8]) -> [5 5 5]", "(multfirst [1 2 6 7 1]) -> [1 1 1 1 1]"], "time": 0.023588, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [2]) -> [2]", "(multfirst [5]) -> [5]", "(multfirst [3 0 9]) -> [3 3 3]"], "time": 0.028568, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0 4]) -> [0 0]", "(multfirst [3 3 3 2]) -> [3 3 3 3]", "(multfirst []) -> []"], "time": 0.035521, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1 6]) -> [1 1]", "(multfirst []) -> []", "(multfirst [6 4]) -> [6 6]"], "time": 0.03329, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 2 2 8]) -> [9 9 9 9]", "(multfirst [3 7 0 9]) -> [3 3 3 3]", "(multfirst [7 2 9 3]) -> [7 7 7 7]"], "time": 0.034231, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0 3 8 0]) -> [0 0 0 0]", "(multfirst [7 6 0 9 1]) -> [7 7 7 7 7]", "(multfirst [5 4]) -> [5 5]"], "time": 0.024064, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5 1 5]) -> [5 5 5]", "(multfirst [2 3]) -> [2 2]", "(multfirst [2 7]) -> [2 2]"], "time": 0.028651, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9]) -> [9]", "(multfirst [2 7 1 9]) -> [2 2 2 2]", "(multfirst [5 6 0 3]) -> [5 5 5 5]"], "time": 0.036589, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9]) -> [9]", "(multfirst [4 2 2 2]) -> [4 4 4 4]", "(multfirst [8 9 3 6]) -> [8 8 8 8]"], "time": 0.027637, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5 3 9 6 0]) -> [5 5 5 5 5]", "(multfirst [7 5 1 0 8]) -> [7 7 7 7 7]", "(multfirst [8 1 5]) -> [8 8 8]"], "time": 0.021451, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4]) -> [4]", "(multfirst [2 3 7 5]) -> [2 2 2 2]", "(multfirst []) -> []"], "time": 0.026924, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 1 7 0]) -> [6 6 6 6]", "(multfirst []) -> []", "(multfirst []) -> []"], "time": 0.030064, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1 6 7]) -> [1 1 1]", "(multfirst [1 3 4]) -> [1 1 1]", "(multfirst [4 4]) -> [4 4]"], "time": 0.029049, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5 1 8]) -> [5 5 5]", "(multfirst [4]) -> [4]", "(multfirst []) -> []"], "time": 0.02246, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5 0]) -> [5 5]", "(multfirst [1 2 8 1]) -> [1 1 1 1]", "(multfirst [9]) -> [9]"], "time": 0.035779, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 3 1]) -> [3 3 3]", "(multfirst [9 9 0 2 6]) -> [9 9 9 9 9]", "(multfirst [8 6 7 6 9]) -> [8 8 8 8 8]"], "time": 0.022952, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 4]) -> [9 9]", "(multfirst [5]) -> [5]", "(multfirst [1 9 6 0]) -> [1 1 1 1]"], "time": 0.028594, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4 9 9 3 0]) -> [4 4 4 4 4]", "(multfirst [7 2 6 1]) -> [7 7 7 7]", "(multfirst [2 7 2 7 0]) -> [2 2 2 2 2]"], "time": 0.030052, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [7]) -> [7]", "(multfirst [8 9 3 5 6]) -> [8 8 8 8 8]", "(multfirst [3 4 4 0]) -> [3 3 3 3]"], "time": 0.022677, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [2 3 7 2 0]) -> [2 2 2 2 2]", "(multfirst [8 3]) -> [8 8]", "(multfirst [3 2 9 1 8]) -> [3 3 3 3 3]"], "time": 0.021601, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8 6]) -> [8 8]", "(multfirst [4 9 1 0]) -> [4 4 4 4]", "(multfirst [2]) -> [2]"], "time": 0.023008, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6]) -> [6]", "(multfirst []) -> []", "(multfirst [3 2 3]) -> [3 3 3]"], "time": 0.02231, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 5 5 9 8]) -> [9 9 9 9 9]", "(multfirst [9 4 9]) -> [9 9 9]", "(multfirst [7 0 9 4 8]) -> [7 7 7 7 7]"], "time": 0.037914, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 1 6]) -> [3 3 3]", "(multfirst [3 8 2 2]) -> [3 3 3 3]", "(multfirst [6 2 4]) -> [6 6 6]"], "time": 0.022489, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [9 0 1 7 4]) -> [9 9 9 9 9]", "(multfirst [8 2 2 7 8]) -> [8 8 8 8 8]"], "time": 0.02132, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4 1 0 6]) -> [4 4 4 4]", "(multfirst [6 6 5 0 9]) -> [6 6 6 6 6]", "(multfirst [6 9 1 4 7]) -> [6 6 6 6 6]"], "time": 0.021151, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4 1 8]) -> [4 4 4]", "(multfirst [1 0]) -> [1 1]", "(multfirst [6 3 6 5 5]) -> [6 6 6 6 6]"], "time": 0.021236, "name": "multfirst"}
