{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [4]) -> [4]", "(multlast []) -> []", "(multlast [9]) -> [9]", "(multlast [1]) -> [1]"], "time": 0.000376, "solution": "(let multlast (let a (lambda (b) b) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [7 1 5 7]) -> [7 7 7 7]", "(multlast []) -> []", "(multlast [6]) -> [6]"], "time": 0.022161, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [7 4]) -> [4 4]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [3 9]) -> [9 9]"], "time": 0.038517, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr b))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [4 3]) -> [3 3]", "(multlast [1 1]) -> [1 1]", "(multlast [4 7 6 7 4]) -> [4 4 4 4 4]", "(multlast [6 2 9 9 0]) -> [0 0 0 0 0]"], "time": 0.257396, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2 4]) -> [4 4]", "(multlast [5]) -> [5]", "(multlast [2 2]) -> [2 2]", "(multlast [9 4]) -> [4 4]"], "time": 0.082698, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [9 6]) -> [6 6]", "(multlast [1 7 6]) -> [6 6 6]", "(multlast [4 0 4 2]) -> [2 2 2 2]", "(multlast [5 2 8]) -> [8 8 8]"], "time": 0.268908, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0 1 5 5 5]) -> [5 5 5 5 5]", "(multlast [6]) -> [6]", "(multlast []) -> []", "(multlast [5 2 2 3]) -> [3 3 3 3]"], "time": 0.230008, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [3 0 4 8]) -> [8 8 8 8]", "(multlast []) -> []", "(multlast [5 0 7 5]) -> [5 5 5 5]"], "time": 0.192819, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr (cdr (cdr b))))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [1 5 1 2 8]) -> [8 8 8 8 8]", "(multlast [4 3 3 9]) -> [9 9 9 9]", "(multlast [5 2]) -> [2 2]", "(multlast [3 7 4]) -> [4 4 4]"], "time": 0.270007, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0 0]) -> [0 0]", "(multlast [3 2 3 3 8]) -> [8 8 8 8 8]", "(multlast [7 9]) -> [9 9]", "(multlast [2 0 4 4]) -> [4 4 4 4]"], "time": 0.270165, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [7 3]) -> [3 3]", "(multlast []) -> []", "(multlast [8 6]) -> [6 6]", "(multlast [4 2 0]) -> [0 0 0]"], "time": 0.262785, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8 7 3]) -> [3 3 3]", "(multlast [8 1 8 3 1]) -> [1 1 1 1 1]", "(multlast [7 3 8 1 5]) -> [5 5 5 5 5]", "(multlast [1 1 2 2 6]) -> [6 6 6 6 6]"], "time": 0.285726, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [7 6 7 6 8]) -> [8 8 8 8 8]", "(multlast [4 7 7 5]) -> [5 5 5 5]", "(multlast [9]) -> [9]", "(multlast [0 0 5 3 3]) -> [3 3 3 3 3]"], "time": 0.286013, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0 2 6]) -> [6 6 6]", "(multlast []) -> []", "(multlast [0 2 4]) -> [4 4 4]", "(multlast [2 3]) -> [3 3]"], "time": 0.271398, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [6 2 4 3 0]) -> [0 0 0 0 0]", "(multlast [6 1]) -> [1 1]", "(multlast []) -> []", "(multlast [7]) -> [7]"], "time": 0.282073, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3]) -> [3]", "(multlast [6 8]) -> [8 8]", "(multlast [8]) -> [8]", "(multlast []) -> []"], "time": 0.115875, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8 8 5 9 4]) -> [4 4 4 4 4]", "(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []"], "time": 0.302365, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [7 9]) -> [9 9]", "(multlast [7 4 4]) -> [4 4 4]", "(multlast [6]) -> [6]"], "time": 0.079141, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast [0 4]) -> [4 4]", "(multlast [6 5 4 6 8]) -> [8 8 8 8 8]"], "time": 0.260217, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2 2 6 2]) -> [2 2 2 2]", "(multlast [9 7 2 6]) -> [6 6 6 6]", "(multlast [4 0 7]) -> [7 7 7]", "(multlast [2 7 2]) -> [2 2 2]"], "time": 0.226778, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0]) -> [0]", "(multlast []) -> []", "(multlast [2 5 1]) -> [1 1 1]", "(multlast [9 4]) -> [4 4]"], "time": 0.262207, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [6 8]) -> [8 8]", "(multlast [0 4 6 7 8]) -> [8 8 8 8 8]", "(multlast [3 0 4]) -> [4 4 4]", "(multlast [9 4 7 9]) -> [9 9 9 9]"], "time": 0.264246, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [6 8 1 0]) -> [0 0 0 0]", "(multlast [7 8 5 4]) -> [4 4 4 4]", "(multlast [5 8 5]) -> [5 5 5]", "(multlast [8 1]) -> [1 1]"], "time": 0.289279, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2 3 4]) -> [4 4 4]", "(multlast [2]) -> [2]", "(multlast []) -> []", "(multlast [8 6 1 7 4]) -> [4 4 4 4 4]"], "time": 0.245737, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2]) -> [2]", "(multlast [8]) -> [8]", "(multlast [9]) -> [9]", "(multlast [7 6 1]) -> [1 1 1]"], "time": 0.266197, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [1 4]) -> [4 4]", "(multlast [1 9 5]) -> [5 5 5]", "(multlast [9 1 0 9 3]) -> [3 3 3 3 3]", "(multlast [6 9 8 1]) -> [1 1 1 1]"], "time": 0.272838, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [7 2]) -> [2 2]", "(multlast [1]) -> [1]", "(multlast [4 2]) -> [2 2]"], "time": 0.087897, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [5 1 2 4]) -> [4 4 4 4]", "(multlast []) -> []", "(multlast [0 2 8 6 2]) -> [2 2 2 2 2]", "(multlast [4]) -> [4]"], "time": 0.268497, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [6 0]) -> [0 0]", "(multlast [6 5]) -> [5 5]", "(multlast [7]) -> [7]", "(multlast [1 2 1]) -> [1 1 1]"], "time": 0.24076, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0 5]) -> [5 5]", "(multlast [5 1 1 0 9]) -> [9 9 9 9 9]", "(multlast [2 8 9 9]) -> [9 9 9 9]", "(multlast [7 1 5 8]) -> [8 8 8 8]"], "time": 0.267691, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [6 7 2 2 3]) -> [3 3 3 3 3]", "(multlast []) -> []", "(multlast [2 5 6 4 1]) -> [1 1 1 1 1]", "(multlast [3 7 6 2]) -> [2 2 2 2]"], "time": 0.285124, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0]) -> [0]", "(multlast [1 3]) -> [3 3]", "(multlast [9 4 4 3]) -> [3 3 3 3]", "(multlast []) -> []"], "time": 0.259003, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast [2]) -> [2]", "(multlast [9 1 4 7 1]) -> [1 1 1 1 1]"], "time": 0.289351, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8 2 3 9]) -> [9 9 9 9]", "(multlast [3 2 2]) -> [2 2 2]", "(multlast []) -> []", "(multlast [7 9 3]) -> [3 3 3]"], "time": 0.245268, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [6]) -> [6]", "(multlast [1 3]) -> [3 3]", "(multlast [4]) -> [4]", "(multlast [6 9]) -> [9 9]"], "time": 0.075107, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [7]) -> [7]", "(multlast []) -> []", "(multlast [4]) -> [4]"], "time": 0.00036, "solution": "(let multlast (let a (lambda (b) b) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2 0]) -> [0 0]", "(multlast []) -> []", "(multlast [0 7 0 0]) -> [0 0 0 0]", "(multlast [3 9]) -> [9 9]"], "time": 0.20341, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [9 9]) -> [9 9]", "(multlast [6 2]) -> [2 2]", "(multlast [6 7]) -> [7 7]", "(multlast [9 5 5 3]) -> [3 3 3 3]"], "time": 0.244818, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [7 1 9 4 2]) -> [2 2 2 2 2]", "(multlast [8 1]) -> [1 1]", "(multlast [8 5 3 2 0]) -> [0 0 0 0 0]", "(multlast [0]) -> [0]"], "time": 0.237091, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [9 6]) -> [6 6]", "(multlast [2 9 3 7]) -> [7 7 7 7]", "(multlast [1 9 6 2]) -> [2 2 2 2]", "(multlast [0 5 0 4 8]) -> [8 8 8 8 8]"], "time": 0.230892, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2 0]) -> [0 0]", "(multlast [7 7]) -> [7 7]", "(multlast [1 9]) -> [9 9]", "(multlast [6]) -> [6]"], "time": 0.106088, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [2]) -> [2]", "(multlast [2 0]) -> [0 0]", "(multlast [6 9]) -> [9 9]"], "time": 0.108935, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0 3 8 1]) -> [1 1 1 1]", "(multlast []) -> []", "(multlast [7 0 7]) -> [7 7 7]", "(multlast [3 0 8]) -> [8 8 8]"], "time": 0.272583, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [5 0 3]) -> [3 3 3]", "(multlast [5]) -> [5]", "(multlast [3 1 8]) -> [8 8 8]", "(multlast [0 0 5 8 4]) -> [4 4 4 4 4]"], "time": 0.262388, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [6]) -> [6]", "(multlast [4 1 0]) -> [0 0 0]", "(multlast [9 5 1 7 6]) -> [6 6 6 6 6]"], "time": 0.246216, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0 2 6 4 0]) -> [0 0 0 0 0]", "(multlast [1 2 4]) -> [4 4 4]", "(multlast [2 5 5]) -> [5 5 5]", "(multlast [8]) -> [8]"], "time": 0.240439, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [2 3 0 5 8]) -> [8 8 8 8 8]", "(multlast [2 3 5 7 6]) -> [6 6 6 6 6]", "(multlast []) -> []"], "time": 0.259473, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8 6 7 3 1]) -> [1 1 1 1 1]", "(multlast [7 6 4]) -> [4 4 4]", "(multlast [0]) -> [0]", "(multlast [0 2]) -> [2 2]"], "time": 0.239206, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [6]) -> [6]", "(multlast [5 0 9 1]) -> [1 1 1 1]", "(multlast [2 5 9]) -> [9 9 9]", "(multlast []) -> []"], "time": 0.277429, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [4 4 4]) -> [4 4 4]", "(multlast [8]) -> [8]", "(multlast []) -> []", "(multlast []) -> []"], "time": 0.000719, "solution": "(let multlast (let a (lambda (b) b) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [4 1 5 4 7]) -> [7 7 7 7 7]", "(multlast [4 7 6 5]) -> [5 5 5 5]", "(multlast [4 5 6 1]) -> [1 1 1 1]"], "time": 0.218156, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [5]) -> [5]", "(multlast [0 8]) -> [8 8]", "(multlast [1 2 1]) -> [1 1 1]", "(multlast []) -> []"], "time": 0.237439, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8 7 0 3]) -> [3 3 3 3]", "(multlast [1 9 3 4]) -> [4 4 4 4]", "(multlast [2 5 3 5 1]) -> [1 1 1 1 1]", "(multlast [6 8 7 7]) -> [7 7 7 7]"], "time": 0.247469, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [7 6 5]) -> [5 5 5]", "(multlast [8]) -> [8]", "(multlast [4 4]) -> [4 4]", "(multlast []) -> []"], "time": 0.237281, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8 1]) -> [1 1]", "(multlast [9 8]) -> [8 8]", "(multlast []) -> []", "(multlast [8 6 8 3]) -> [3 3 3 3]"], "time": 0.239298, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [7]) -> [7]", "(multlast [1 6 3]) -> [3 3 3]", "(multlast []) -> []", "(multlast []) -> []"], "time": 0.21845, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [9 9 1]) -> [1 1 1]", "(multlast [1]) -> [1]", "(multlast []) -> []", "(multlast [4 2 0 0]) -> [0 0 0 0]"], "time": 0.214619, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (% c (+ 1 1))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2 6 5]) -> [5 5 5]", "(multlast [5 3]) -> [3 3]", "(multlast [5 1 2]) -> [2 2 2]", "(multlast [9 6]) -> [6 6]"], "time": 0.251215, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0]) -> [0]", "(multlast [7 5]) -> [5 5]", "(multlast [4 0]) -> [0 0]", "(multlast [5 2 0 0]) -> [0 0 0 0]"], "time": 0.253623, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [7 5 8 9]) -> [9 9 9 9]", "(multlast [1 2]) -> [2 2]", "(multlast [6 4 3 9]) -> [9 9 9 9]", "(multlast []) -> []"], "time": 0.242092, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 8 2]) -> [2 2 2]", "(multlast [6 4]) -> [4 4]", "(multlast [3 4]) -> [4 4]", "(multlast [1 9]) -> [9 9]"], "time": 0.229953, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [7 5 2]) -> [2 2 2]", "(multlast [7 9]) -> [9 9]", "(multlast [8]) -> [8]", "(multlast [2 5]) -> [5 5]"], "time": 0.257907, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [6 6]) -> [6 6]", "(multlast [5 1]) -> [1 1]", "(multlast [9 4]) -> [4 4]", "(multlast [2 9 4 4]) -> [4 4 4 4]"], "time": 0.233177, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast [7 1 6 8 4]) -> [4 4 4 4 4]", "(multlast [8 8 0 8]) -> [8 8 8 8]"], "time": 0.271731, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [1 3 9]) -> [9 9 9]", "(multlast [2]) -> [2]", "(multlast [1 5]) -> [5 5]"], "time": 0.279384, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 0]) -> [0 0]", "(multlast [1]) -> [1]", "(multlast [0 6]) -> [6 6]", "(multlast [6]) -> [6]"], "time": 0.085285, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [7 2 4]) -> [4 4 4]", "(multlast [2 8 7]) -> [7 7 7]", "(multlast []) -> []", "(multlast [9 5 8]) -> [8 8 8]"], "time": 0.050658, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr (cdr b)))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0 8 5 6 7]) -> [7 7 7 7 7]", "(multlast [8 9 9]) -> [9 9 9]", "(multlast []) -> []", "(multlast [3 4 3 8]) -> [8 8 8 8]"], "time": 0.181405, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 6]) -> [6 6]", "(multlast [3 8 5 1]) -> [1 1 1 1]", "(multlast [0]) -> [0]", "(multlast [8]) -> [8]"], "time": 0.227364, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [5 8 0]) -> [0 0 0]", "(multlast []) -> []", "(multlast [5 6]) -> [6 6]", "(multlast [1 7 9 8 2]) -> [2 2 2 2 2]"], "time": 0.175951, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0 7 5 6 6]) -> [6 6 6 6 6]", "(multlast [5 2]) -> [2 2]", "(multlast [5 1 5 3 5]) -> [5 5 5 5 5]", "(multlast []) -> []"], "time": 0.211561, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8]) -> [8]", "(multlast [0 3 1]) -> [1 1 1]", "(multlast []) -> []", "(multlast []) -> []"], "time": 0.199467, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [4 2 8]) -> [8 8 8]", "(multlast []) -> []", "(multlast [9]) -> [9]", "(multlast [6 9]) -> [9 9]"], "time": 0.234067, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2 7 0 9 1]) -> [1 1 1 1 1]", "(multlast [5 4 9 1]) -> [1 1 1 1]", "(multlast [1 4]) -> [4 4]", "(multlast [9 3]) -> [3 3]"], "time": 0.247359, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [1]) -> [1]", "(multlast []) -> []", "(multlast [8]) -> [8]", "(multlast [5 0]) -> [0 0]"], "time": 0.105517, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0 3 1]) -> [1 1 1]", "(multlast []) -> []", "(multlast [7]) -> [7]", "(multlast [0]) -> [0]"], "time": 0.217932, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [9 7 4 3]) -> [3 3 3 3]", "(multlast [9 1 3 4 3]) -> [3 3 3 3 3]", "(multlast [0]) -> [0]", "(multlast [4]) -> [4]"], "time": 0.287344, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0 0 6 7 6]) -> [6 6 6 6 6]", "(multlast [7 4 7 7]) -> [7 7 7 7]", "(multlast [1 8]) -> [8 8]", "(multlast [4]) -> [4]"], "time": 0.255017, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [7 1]) -> [1 1]", "(multlast []) -> []", "(multlast [6 9 5 3 8]) -> [8 8 8 8 8]", "(multlast [8 4]) -> [4 4]"], "time": 0.242834, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast [7]) -> [7]", "(multlast [6 8 7]) -> [7 7 7]"], "time": 0.237058, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [4 9 4 4]) -> [4 4 4 4]", "(multlast [7]) -> [7]", "(multlast [5]) -> [5]", "(multlast [8]) -> [8]"], "time": 0.020411, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [5 8 9]) -> [9 9 9]", "(multlast [9 1]) -> [1 1]", "(multlast []) -> []"], "time": 0.277469, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [5 2 3]) -> [3 3 3]", "(multlast [6 0]) -> [0 0]", "(multlast [3 3]) -> [3 3]", "(multlast [4]) -> [4]"], "time": 0.198728, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [5]) -> [5]", "(multlast [2]) -> [2]", "(multlast [8 1 6]) -> [6 6 6]", "(multlast [4 6 1]) -> [1 1 1]"], "time": 0.236262, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [9]) -> [9]", "(multlast [7 9 5 5 3]) -> [3 3 3 3 3]", "(multlast [1 0 4]) -> [4 4 4]", "(multlast [3 6 4 5]) -> [5 5 5 5]"], "time": 0.230854, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [7 3]) -> [3 3]", "(multlast [6]) -> [6]", "(multlast [7 4 9 9 9]) -> [9 9 9 9 9]", "(multlast [0 7 3 5]) -> [5 5 5 5]"], "time": 0.220836, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8 9]) -> [9 9]", "(multlast [5]) -> [5]", "(multlast []) -> []", "(multlast [4 1 8 3 5]) -> [5 5 5 5 5]"], "time": 0.203366, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [4 5]) -> [5 5]", "(multlast [2 9 9 0]) -> [0 0 0 0]", "(multlast [8 1 7 0 4]) -> [4 4 4 4 4]", "(multlast [1 9 4 3 0]) -> [0 0 0 0 0]"], "time": 0.195892, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [7]) -> [7]", "(multlast [5 1]) -> [1 1]", "(multlast [8 8 7 9 5]) -> [5 5 5 5 5]", "(multlast []) -> []"], "time": 0.205666, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [1 5]) -> [5 5]", "(multlast []) -> []", "(multlast [9 7 7 9 0]) -> [0 0 0 0 0]", "(multlast []) -> []"], "time": 0.211075, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [6]) -> [6]", "(multlast [7 6 2]) -> [2 2 2]", "(multlast [2]) -> [2]", "(multlast [0 7 0 3]) -> [3 3 3 3]"], "time": 0.193709, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [3 4 2 1 1]) -> [1 1 1 1 1]", "(multlast []) -> []", "(multlast [4 4]) -> [4 4]"], "time": 0.189913, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0 9]) -> [9 9]", "(multlast [3 7 0 9 3]) -> [3 3 3 3 3]", "(multlast [5 4 0]) -> [0 0 0]", "(multlast [7 2 5]) -> [5 5 5]"], "time": 0.20723, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [5]) -> [5]", "(multlast [0 2 8 5 9]) -> [9 9 9 9 9]", "(multlast [5 1 8 3 0]) -> [0 0 0 0 0]", "(multlast [2 1]) -> [1 1]"], "time": 0.22733, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 1]) -> [1 1]", "(multlast [6 6 5 1]) -> [1 1 1 1]", "(multlast [6 0 6 3 9]) -> [9 9 9 9 9]", "(multlast [9]) -> [9]"], "time": 0.208552, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8 7]) -> [7 7]", "(multlast [9]) -> [9]", "(multlast [1]) -> [1]", "(multlast [6 5 3 3 4]) -> [4 4 4 4 4]"], "time": 0.202862, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [4 9 4 6]) -> [6 6 6 6]", "(multlast [2 9 5]) -> [5 5 5]", "(multlast [4 4 0 8]) -> [8 8 8 8]", "(multlast [6]) -> [6]"], "time": 0.168884, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [3 0 2 7 9]) -> [9 9 9 9 9]", "(multlast [5 5 4 8]) -> [8 8 8 8]", "(multlast [5 8 9 0]) -> [0 0 0 0]"], "time": 0.192802, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [1 1 8 4 8]) -> [8 8 8 8 8]", "(multlast [6 9 1]) -> [1 1 1]", "(multlast [4 5 4 4 6]) -> [6 6 6 6 6]", "(multlast [6]) -> [6]"], "time": 0.164856, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [2 2 4 2]) -> [2 2 2 2]", "(multlast [6]) -> [6]", "(multlast [2 0 0 1 5]) -> [5 5 5 5 5]"], "time": 0.175821, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
