{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {0 {4 {8}}}) -> [0 4 8]", "(flatten {0 {0 {8} {8}}}) -> [0 0 8 8]", "(flatten {1}) -> [1]", "(flatten {7 {9 {7 {8} {0}}} {5 {1 {0}} {5 {3}}}}) -> [7 9 7 8 0 5 1 0 5 3]"], "time": 0.160343}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {6 {8}}) -> [6 8]", "(flatten {3 {1} {4}}) -> [3 1 4]", "(flatten {8 {3 {2 {1}}}}) -> [8 3 2 1]", "(flatten {3 {8 {9} {2}} {9 {9} {7}}}) -> [3 8 9 2 9 9 7]", "(flatten {1}) -> [1]"], "time": 0.169527}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {1 {8 {3} {8 {5} {1}}} {1 {2}}}) -> [1 8 3 8 5 1 1 2]", "(flatten {}) -> []", "(flatten {4}) -> [4]", "(flatten {}) -> []", "(flatten {6 {5 {2 {0}}} {6 {2 {8}} {3 {6}}}}) -> [6 5 2 0 6 2 8 3 6]"], "time": 0.114526}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7 {8} {6}}) -> [7 8 6]", "(flatten {2}) -> [2]", "(flatten {5 {0}}) -> [5 0]", "(flatten {9}) -> [9]", "(flatten {}) -> []"], "time": 0.156777}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {5 {5 {1} {1}} {7 {0} {3}}}) -> [5 5 1 1 7 0 3]", "(flatten {8}) -> [8]", "(flatten {3 {4} {1 {0}}}) -> [3 4 1 0]"], "time": 0.145101}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7}) -> [7]", "(flatten {2 {8}}) -> [2 8]", "(flatten {2 {6} {3}}) -> [2 6 3]", "(flatten {7}) -> [7]", "(flatten {7 {5}}) -> [7 5]"], "time": 0.095167}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {2 {9} {8}}) -> [2 9 8]", "(flatten {0}) -> [0]", "(flatten {2 {9}}) -> [2 9]", "(flatten {9 {3} {3}}) -> [9 3 3]"], "time": 0.13091}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {2 {9 {9} {0}}}) -> [2 9 9 0]", "(flatten {9}) -> [9]", "(flatten {9 {8}}) -> [9 8]", "(flatten {9}) -> [9]", "(flatten {7 {9 {7} {2}} {0 {7}}}) -> [7 9 7 2 0 7]"], "time": 0.170526}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {3}) -> [3]", "(flatten {1}) -> [1]", "(flatten {}) -> []", "(flatten {}) -> []"], "time": 0.101929}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {5 {7} {9 {4} {6}}}) -> [5 7 9 4 6]", "(flatten {1 {4}}) -> [1 4]", "(flatten {9 {2}}) -> [9 2]", "(flatten {7}) -> [7]"], "time": 0.128901}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7 {7 {6 {2} {7}} {4 {3} {6}}}}) -> [7 7 6 2 7 4 3 6]", "(flatten {9}) -> [9]", "(flatten {4 {8 {8 {8} {2}} {1 {3} {8}}}}) -> [4 8 8 8 2 1 3 8]", "(flatten {5 {8} {9}}) -> [5 8 9]", "(flatten {}) -> []"], "time": 0.14842}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {6}) -> [6]", "(flatten {}) -> []", "(flatten {2}) -> [2]", "(flatten {}) -> []"], "time": 0.138531}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {9 {8}}) -> [9 8]", "(flatten {}) -> []", "(flatten {2}) -> [2]", "(flatten {}) -> []", "(flatten {6 {8 {8}}}) -> [6 8 8]"], "time": 0.146526}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0 {4} {0}}) -> [0 4 0]", "(flatten {6 {1 {8} {9}}}) -> [6 1 8 9]", "(flatten {8 {3} {3}}) -> [8 3 3]", "(flatten {5}) -> [5]", "(flatten {7}) -> [7]"], "time": 0.178474}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {8}) -> [8]", "(flatten {}) -> []", "(flatten {1 {9} {7}}) -> [1 9 7]", "(flatten {1 {6} {8 {6 {0} {3}}}}) -> [1 6 8 6 0 3]"], "time": 0.157085}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {8 {1 {7} {6}}}) -> [8 1 7 6]", "(flatten {}) -> []", "(flatten {8 {9} {2}}) -> [8 9 2]", "(flatten {1}) -> [1]", "(flatten {9 {5}}) -> [9 5]"], "time": 0.126998}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0}) -> [0]", "(flatten {1}) -> [1]", "(flatten {}) -> []", "(flatten {3}) -> [3]", "(flatten {7}) -> [7]"], "time": 0.1199}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {3 {5 {7}} {6}}) -> [3 5 7 6]", "(flatten {9}) -> [9]", "(flatten {8}) -> [8]", "(flatten {0}) -> [0]"], "time": 0.100759}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {7 {8 {1} {1}} {3}}) -> [7 8 1 1 3]", "(flatten {3 {3 {6}} {3}}) -> [3 3 6 3]", "(flatten {}) -> []", "(flatten {}) -> []"], "time": 0.135928}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {1 {4}}) -> [1 4]", "(flatten {1 {3}}) -> [1 3]", "(flatten {2 {6 {0} {6}} {8}}) -> [2 6 0 6 8]", "(flatten {}) -> []"], "time": 0.133408}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {6 {5} {8}}) -> [6 5 8]", "(flatten {8 {0}}) -> [8 0]", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {9 {3}}) -> [9 3]"], "time": 0.119384}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3}) -> [3]", "(flatten {2}) -> [2]", "(flatten {7}) -> [7]", "(flatten {8 {9} {9}}) -> [8 9 9]", "(flatten {7}) -> [7]"], "time": 0.12961}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {2}) -> [2]", "(flatten {8 {9}}) -> [8 9]", "(flatten {2}) -> [2]", "(flatten {5 {5 {1} {5}} {1 {3}}}) -> [5 5 1 5 1 3]"], "time": 0.140414}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {8 {8}}) -> [8 8]", "(flatten {}) -> []", "(flatten {6 {2} {7}}) -> [6 2 7]", "(flatten {9 {9} {8 {3 {6} {4}} {7 {4}}}}) -> [9 9 8 3 6 4 7 4]", "(flatten {8 {7} {6}}) -> [8 7 6]"], "time": 0.146598}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {2}) -> [2]", "(flatten {9 {3} {0 {0} {9}}}) -> [9 3 0 0 9]", "(flatten {2 {8 {1} {5}} {9 {7} {7}}}) -> [2 8 1 5 9 7 7]", "(flatten {3 {0 {4 {8}}}}) -> [3 0 4 8]", "(flatten {3 {3 {1 {4} {0}}} {1}}) -> [3 3 1 4 0 1]"], "time": 0.128119}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {0}) -> [0]", "(flatten {4 {4}}) -> [4 4]"], "time": 0.153723}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {1 {2 {9}}}) -> [1 2 9]", "(flatten {3}) -> [3]", "(flatten {}) -> []", "(flatten {2 {8 {7} {3}}}) -> [2 8 7 3]", "(flatten {}) -> []"], "time": 0.147457}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0 {2 {2 {1} {0}} {2 {5} {5}}}}) -> [0 2 2 1 0 2 5 5]", "(flatten {9}) -> [9]", "(flatten {5}) -> [5]", "(flatten {}) -> []", "(flatten {}) -> []"], "time": 0.133732}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {5}) -> [5]", "(flatten {7 {8} {1}}) -> [7 8 1]", "(flatten {0}) -> [0]", "(flatten {5}) -> [5]", "(flatten {1}) -> [1]"], "time": 0.148166}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {5 {4 {7} {8}} {7 {4} {3}}}) -> [5 4 7 8 7 4 3]", "(flatten {7}) -> [7]", "(flatten {4 {2} {9 {4 {5} {0}}}}) -> [4 2 9 4 5 0]", "(flatten {1 {8}}) -> [1 8]", "(flatten {5 {9 {4}} {2 {6} {0}}}) -> [5 9 4 2 6 0]"], "time": 0.144881}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7}) -> [7]", "(flatten {}) -> []", "(flatten {0 {9 {2} {1}}}) -> [0 9 2 1]", "(flatten {}) -> []", "(flatten {5}) -> [5]"], "time": 0.130331}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3}) -> [3]", "(flatten {4 {1}}) -> [4 1]", "(flatten {3 {6 {4 {7} {0}}}}) -> [3 6 4 7 0]", "(flatten {6 {7} {3}}) -> [6 7 3]", "(flatten {}) -> []"], "time": 0.142915}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0}) -> [0]", "(flatten {}) -> []", "(flatten {5}) -> [5]", "(flatten {9 {9}}) -> [9 9]", "(flatten {1 {2}}) -> [1 2]"], "time": 0.1286}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3 {0}}) -> [3 0]", "(flatten {}) -> []", "(flatten {8}) -> [8]", "(flatten {7}) -> [7]", "(flatten {2 {8} {7}}) -> [2 8 7]"], "time": 0.151549}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {9 {7 {2} {7}} {3}}) -> [9 7 2 7 3]", "(flatten {1 {7} {8 {6} {0}}}) -> [1 7 8 6 0]", "(flatten {1 {5 {5} {7 {4} {9}}}}) -> [1 5 5 7 4 9]", "(flatten {8}) -> [8]", "(flatten {}) -> []"], "time": 0.121142}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {2 {6} {1 {7 {3}}}}) -> [2 6 1 7 3]", "(flatten {3}) -> [3]", "(flatten {8 {3}}) -> [8 3]", "(flatten {}) -> []", "(flatten {9}) -> [9]"], "time": 0.13337}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {0 {1}}) -> [0 1]", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {0}) -> [0]"], "time": 0.123522}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {4}) -> [4]", "(flatten {7 {3} {5}}) -> [7 3 5]", "(flatten {6 {0 {0}}}) -> [6 0 0]", "(flatten {}) -> []", "(flatten {4}) -> [4]"], "time": 0.182267}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {9 {7 {7} {4}}}) -> [9 7 7 4]", "(flatten {}) -> []", "(flatten {1}) -> [1]", "(flatten {9 {7 {2} {1 {4} {1}}} {8 {2 {7}} {5 {4} {5}}}}) -> [9 7 2 1 4 1 8 2 7 5 4 5]", "(flatten {5}) -> [5]"], "time": 0.106705}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {9 {3 {2 {3} {7}} {3 {8}}} {4}}) -> [9 3 2 3 7 3 8 4]", "(flatten {0 {8}}) -> [0 8]", "(flatten {6}) -> [6]"], "time": 0.151426}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {1 {4}}) -> [1 4]", "(flatten {9 {0} {0}}) -> [9 0 0]", "(flatten {1 {0} {2}}) -> [1 0 2]", "(flatten {5}) -> [5]", "(flatten {0 {0 {3} {1 {2}}}}) -> [0 0 3 1 2]"], "time": 0.158884}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {8 {3}}) -> [8 3]", "(flatten {8 {8}}) -> [8 8]", "(flatten {5 {7 {5}}}) -> [5 7 5]", "(flatten {}) -> []", "(flatten {7}) -> [7]"], "time": 0.161181}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {2 {7} {0}}) -> [2 7 0]", "(flatten {5 {3} {2}}) -> [5 3 2]", "(flatten {}) -> []"], "time": 0.185258}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {4 {0} {2}}) -> [4 0 2]", "(flatten {8 {3}}) -> [8 3]", "(flatten {}) -> []", "(flatten {7 {1 {7}} {6 {8} {6}}}) -> [7 1 7 6 8 6]", "(flatten {}) -> []"], "time": 0.134602}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3 {2 {0} {8}} {1 {3} {2}}}) -> [3 2 0 8 1 3 2]", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {6 {9 {4}}}) -> [6 9 4]", "(flatten {8}) -> [8]"], "time": 0.166484}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {2 {0}}) -> [2 0]", "(flatten {}) -> []", "(flatten {2 {7} {7 {6} {5}}}) -> [2 7 7 6 5]", "(flatten {5 {6 {8} {9}} {4 {1}}}) -> [5 6 8 9 4 1]", "(flatten {}) -> []"], "time": 0.13938}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {1 {8 {9}}}) -> [1 8 9]", "(flatten {0}) -> [0]", "(flatten {7 {2 {4} {4}} {1}}) -> [7 2 4 4 1]", "(flatten {2 {8 {4 {2} {6}} {1}}}) -> [2 8 4 2 6 1]", "(flatten {7}) -> [7]"], "time": 0.158824}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {2}) -> [2]", "(flatten {0 {7 {8} {6}} {3 {6}}}) -> [0 7 8 6 3 6]", "(flatten {}) -> []", "(flatten {6}) -> [6]", "(flatten {6 {6}}) -> [6 6]"], "time": 0.147539}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {5 {1} {4}}) -> [5 1 4]", "(flatten {9}) -> [9]", "(flatten {1 {2} {2 {9} {3}}}) -> [1 2 2 9 3]", "(flatten {7 {8}}) -> [7 8]", "(flatten {7 {9 {8 {2} {1}}}}) -> [7 9 8 2 1]"], "time": 0.129191}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {9 {3}}) -> [9 3]", "(flatten {7}) -> [7]", "(flatten {}) -> []", "(flatten {3}) -> [3]", "(flatten {9 {8 {8}}}) -> [9 8 8]"], "time": 0.085196}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {4 {0 {9}}}) -> [4 0 9]", "(flatten {9 {0 {2}} {2}}) -> [9 0 2 2]", "(flatten {}) -> []", "(flatten {4}) -> [4]"], "time": 0.097956}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {8}) -> [8]", "(flatten {3}) -> [3]", "(flatten {4 {3 {0} {5}} {2}}) -> [4 3 0 5 2]", "(flatten {9 {3 {6} {9 {8} {3}}} {1}}) -> [9 3 6 9 8 3 1]", "(flatten {4 {2} {5}}) -> [4 2 5]"], "time": 0.151638}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7 {7}}) -> [7 7]", "(flatten {6}) -> [6]", "(flatten {2 {4 {8} {9}}}) -> [2 4 8 9]", "(flatten {7 {5}}) -> [7 5]", "(flatten {}) -> []"], "time": 0.162467}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7 {3 {6 {8} {6}}}}) -> [7 3 6 8 6]", "(flatten {4}) -> [4]", "(flatten {7 {6 {4} {5}}}) -> [7 6 4 5]", "(flatten {}) -> []", "(flatten {}) -> []"], "time": 0.143039}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {4}) -> [4]", "(flatten {0}) -> [0]", "(flatten {3}) -> [3]", "(flatten {9 {9}}) -> [9 9]", "(flatten {0 {3}}) -> [0 3]"], "time": 0.14478}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {2 {9} {0}}) -> [2 9 0]", "(flatten {9}) -> [9]", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {4 {8 {5} {6}}}) -> [4 8 5 6]"], "time": 0.124376}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {9 {2 {4 {5} {1}} {3 {5} {9}}} {1}}) -> [9 2 4 5 1 3 5 9 1]", "(flatten {3}) -> [3]"], "time": 0.141722}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {8 {7 {8} {2}}}) -> [8 7 8 2]", "(flatten {}) -> []", "(flatten {9 {0 {8} {1}} {5}}) -> [9 0 8 1 5]", "(flatten {}) -> []", "(flatten {4 {8}}) -> [4 8]"], "time": 0.131166}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0 {9} {9}}) -> [0 9 9]", "(flatten {6 {9 {3} {3}}}) -> [6 9 3 3]", "(flatten {8 {8}}) -> [8 8]", "(flatten {}) -> []", "(flatten {}) -> []"], "time": 0.137542}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {0 {3} {9}}) -> [0 3 9]", "(flatten {1 {5}}) -> [1 5]", "(flatten {0 {3} {5 {7}}}) -> [0 3 5 7]", "(flatten {1 {8 {9 {6} {9}} {2 {2} {9}}} {0}}) -> [1 8 9 6 9 2 2 9 0]"], "time": 0.144356}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {8 {7}}) -> [8 7]", "(flatten {0}) -> [0]", "(flatten {9 {7} {0}}) -> [9 7 0]", "(flatten {1 {5 {6}} {1 {1}}}) -> [1 5 6 1 1]", "(flatten {3 {3} {9}}) -> [3 3 9]"], "time": 0.154927}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3 {1 {2}}}) -> [3 1 2]", "(flatten {2}) -> [2]", "(flatten {4}) -> [4]", "(flatten {}) -> []", "(flatten {2}) -> [2]"], "time": 0.157754}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3}) -> [3]", "(flatten {1 {1 {5}}}) -> [1 1 5]", "(flatten {8 {2}}) -> [8 2]", "(flatten {0 {8 {3} {0 {4}}}}) -> [0 8 3 0 4]", "(flatten {3 {4} {8}}) -> [3 4 8]"], "time": 0.14347}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0}) -> [0]", "(flatten {1 {0 {2 {1}}}}) -> [1 0 2 1]", "(flatten {7 {8}}) -> [7 8]", "(flatten {0 {1} {8}}) -> [0 1 8]", "(flatten {2}) -> [2]"], "time": 0.135439}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {6 {9 {9 {8} {4}} {6}} {6 {1 {3}}}}) -> [6 9 9 8 4 6 6 1 3]", "(flatten {4}) -> [4]", "(flatten {2}) -> [2]", "(flatten {4}) -> [4]", "(flatten {1 {1} {4}}) -> [1 1 4]"], "time": 0.127331}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7 {9}}) -> [7 9]", "(flatten {6}) -> [6]", "(flatten {1 {7}}) -> [1 7]", "(flatten {0 {2} {1}}) -> [0 2 1]", "(flatten {5 {6}}) -> [5 6]"], "time": 0.115647}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0}) -> [0]", "(flatten {0}) -> [0]", "(flatten {}) -> []", "(flatten {4}) -> [4]", "(flatten {}) -> []"], "time": 0.108844}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {2}) -> [2]", "(flatten {4 {4}}) -> [4 4]", "(flatten {}) -> []", "(flatten {5 {8 {6}}}) -> [5 8 6]", "(flatten {4 {5} {8 {8}}}) -> [4 5 8 8]"], "time": 0.108926}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {2 {8 {3} {5}}}) -> [2 8 3 5]", "(flatten {6 {4} {6 {2} {1}}}) -> [6 4 6 2 1]", "(flatten {1}) -> [1]", "(flatten {4 {1 {8} {9}} {5 {3} {6}}}) -> [4 1 8 9 5 3 6]", "(flatten {}) -> []"], "time": 0.115137}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0}) -> [0]", "(flatten {0}) -> [0]", "(flatten {7 {3}}) -> [7 3]", "(flatten {}) -> []", "(flatten {7 {1}}) -> [7 1]"], "time": 0.145936}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {8 {8 {2} {0 {7} {6}}}}) -> [8 8 2 0 7 6]", "(flatten {9 {7} {0}}) -> [9 7 0]", "(flatten {1}) -> [1]", "(flatten {0}) -> [0]", "(flatten {4}) -> [4]"], "time": 0.14761}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {2 {8}}) -> [2 8]", "(flatten {1 {0 {1}}}) -> [1 0 1]", "(flatten {6 {2 {4}}}) -> [6 2 4]", "(flatten {7 {5} {1 {9} {1}}}) -> [7 5 1 9 1]", "(flatten {}) -> []"], "time": 0.141182}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3 {9}}) -> [3 9]", "(flatten {8 {1 {6 {5}}} {4 {8} {5 {7}}}}) -> [8 1 6 5 4 8 5 7]", "(flatten {5 {6 {0}}}) -> [5 6 0]", "(flatten {1 {7 {5} {7}} {4 {9} {1}}}) -> [1 7 5 7 4 9 1]", "(flatten {8 {5 {3} {9}}}) -> [8 5 3 9]"], "time": 0.150602}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {8}) -> [8]", "(flatten {9 {4}}) -> [9 4]", "(flatten {9}) -> [9]", "(flatten {8 {5} {0 {5} {5}}}) -> [8 5 0 5 5]", "(flatten {}) -> []"], "time": 0.135294}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3 {3 {1 {3} {1}} {8}} {0 {2 {4}}}}) -> [3 3 1 3 1 8 0 2 4]", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {8 {0}}) -> [8 0]", "(flatten {4 {3}}) -> [4 3]"], "time": 0.154078}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7 {8 {0} {8}} {5 {1} {3}}}) -> [7 8 0 8 5 1 3]", "(flatten {9 {4 {2 {8} {1}} {4 {9}}} {1 {1} {3 {8} {0}}}}) -> [9 4 2 8 1 4 9 1 1 3 8 0]", "(flatten {}) -> []", "(flatten {4 {6}}) -> [4 6]", "(flatten {6 {1} {8}}) -> [6 1 8]"], "time": 0.155085}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {1}) -> [1]", "(flatten {}) -> []", "(flatten {0 {6 {3} {0}} {1}}) -> [0 6 3 0 1]", "(flatten {7 {7}}) -> [7 7]", "(flatten {7 {3} {9 {2 {6} {6}}}}) -> [7 3 9 2 6 6]"], "time": 0.109695}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {2 {9}}) -> [2 9]", "(flatten {2 {9} {7}}) -> [2 9 7]", "(flatten {9 {6} {4}}) -> [9 6 4]", "(flatten {1 {0 {5}} {9 {6}}}) -> [1 0 5 9 6]"], "time": 0.138822}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {5 {6 {5} {5}} {5}}) -> [5 6 5 5 5]", "(flatten {3}) -> [3]", "(flatten {}) -> []", "(flatten {9 {0 {7} {5}} {9}}) -> [9 0 7 5 9]", "(flatten {0 {8}}) -> [0 8]"], "time": 0.137722}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3 {7} {4}}) -> [3 7 4]", "(flatten {2 {1 {1} {4}} {7 {4}}}) -> [2 1 1 4 7 4]", "(flatten {}) -> []", "(flatten {7 {2} {4}}) -> [7 2 4]", "(flatten {7 {9 {1} {3}}}) -> [7 9 1 3]"], "time": 0.131237}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7 {6}}) -> [7 6]", "(flatten {9 {3} {2}}) -> [9 3 2]", "(flatten {8}) -> [8]", "(flatten {0 {1 {8 {3} {0}}} {4 {6} {7}}}) -> [0 1 8 3 0 4 6 7]", "(flatten {9}) -> [9]"], "time": 0.106515}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0 {5}}) -> [0 5]", "(flatten {5 {6}}) -> [5 6]", "(flatten {}) -> []", "(flatten {0}) -> [0]", "(flatten {6}) -> [6]"], "time": 0.121867}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {1}) -> [1]", "(flatten {3}) -> [3]", "(flatten {2}) -> [2]", "(flatten {3 {5 {1}}}) -> [3 5 1]", "(flatten {7 {8 {0} {5}} {2}}) -> [7 8 0 5 2]"], "time": 0.125809}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {1 {6 {2 {4} {9}} {5}} {4 {0 {3}} {3}}}) -> [1 6 2 4 9 5 4 0 3 3]", "(flatten {4 {5 {8} {1}}}) -> [4 5 8 1]", "(flatten {}) -> []", "(flatten {8 {6} {3}}) -> [8 6 3]", "(flatten {0}) -> [0]"], "time": 0.166889}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3 {2 {3 {6} {1}}}}) -> [3 2 3 6 1]", "(flatten {4 {6} {3}}) -> [4 6 3]", "(flatten {}) -> []", "(flatten {9 {1 {0 {2}} {9 {1}}} {4 {7 {4}} {2 {0} {4}}}}) -> [9 1 0 2 9 1 4 7 4 2 0 4]", "(flatten {0}) -> [0]"], "time": 0.144917}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {1}) -> [1]", "(flatten {5}) -> [5]", "(flatten {9 {9} {7}}) -> [9 9 7]", "(flatten {8 {4} {8}}) -> [8 4 8]", "(flatten {3 {4} {5}}) -> [3 4 5]"], "time": 0.134273}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {4 {3 {6}} {3}}) -> [4 3 6 3]", "(flatten {8 {3 {9 {1} {6}}}}) -> [8 3 9 1 6]", "(flatten {4}) -> [4]", "(flatten {5 {8 {2 {7} {4}}}}) -> [5 8 2 7 4]"], "time": 0.144093}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {5 {4} {3 {2}}}) -> [5 4 3 2]", "(flatten {0 {4 {6 {1}}} {2 {6} {0}}}) -> [0 4 6 1 2 6 0]", "(flatten {6 {1} {1}}) -> [6 1 1]", "(flatten {}) -> []", "(flatten {8}) -> [8]"], "time": 0.14431}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {6 {0} {8}}) -> [6 0 8]", "(flatten {8 {9 {0}}}) -> [8 9 0]", "(flatten {}) -> []", "(flatten {7 {1}}) -> [7 1]", "(flatten {1 {5}}) -> [1 5]"], "time": 0.167188}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {7 {0 {0 {3}}} {3 {6 {4}} {8 {3} {2}}}}) -> [7 0 0 3 3 6 4 8 3 2]", "(flatten {6 {4 {6 {0}}} {1 {8 {2}} {6 {4} {9}}}}) -> [6 4 6 0 1 8 2 6 4 9]", "(flatten {2 {3} {7}}) -> [2 3 7]"], "time": 0.144929}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {1 {3}}) -> [1 3]", "(flatten {1 {9}}) -> [1 9]", "(flatten {2 {5} {1}}) -> [2 5 1]", "(flatten {1 {5}}) -> [1 5]", "(flatten {8}) -> [8]"], "time": 0.14492}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {1 {8}}) -> [1 8]", "(flatten {}) -> []", "(flatten {9 {8}}) -> [9 8]", "(flatten {}) -> []", "(flatten {9 {2}}) -> [9 2]"], "time": 0.145676}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {0 {2 {1 {3} {6}} {2 {3} {5}}} {2}}) -> [0 2 1 3 6 2 3 5 2]", "(flatten {4 {9 {8} {1}}}) -> [4 9 8 1]", "(flatten {2 {5}}) -> [2 5]", "(flatten {5 {9 {5} {4}} {8 {4} {9}}}) -> [5 9 5 4 8 4 9]"], "time": 0.142543}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {9}) -> [9]", "(flatten {}) -> []", "(flatten {6 {9}}) -> [6 9]", "(flatten {0 {4 {3 {5} {4}}}}) -> [0 4 3 5 4]", "(flatten {8 {1} {5}}) -> [8 1 5]"], "time": 0.13669}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {4}) -> [4]", "(flatten {0}) -> [0]", "(flatten {8 {4}}) -> [8 4]", "(flatten {5 {7 {5}}}) -> [5 7 5]", "(flatten {}) -> []"], "time": 0.149012}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {6 {8} {1}}) -> [6 8 1]", "(flatten {8 {6} {8 {4}}}) -> [8 6 8 4]", "(flatten {8 {8 {5 {5}}}}) -> [8 8 5 5]", "(flatten {}) -> []"], "time": 0.131548}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {8}) -> [8]", "(flatten {9 {9} {2}}) -> [9 9 2]", "(flatten {7}) -> [7]", "(flatten {}) -> []", "(flatten {}) -> []"], "time": 0.078016}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {8}) -> [8]", "(flatten {7 {6}}) -> [7 6]", "(flatten {6 {0}}) -> [6 0]", "(flatten {5 {2 {7} {5}} {9}}) -> [5 2 7 5 9]"], "time": 0.079649}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7 {2 {5 {5} {1}} {3 {5} {7}}}}) -> [7 2 5 5 1 3 5 7]", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {1 {2} {0}}) -> [1 2 0]", "(flatten {9}) -> [9]"], "time": 0.080128}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {2 {9}}) -> [2 9]", "(flatten {0 {6}}) -> [0 6]", "(flatten {5 {2} {7}}) -> [5 2 7]", "(flatten {4 {1 {8} {1}}}) -> [4 1 8 1]", "(flatten {}) -> []"], "time": 0.078208}
