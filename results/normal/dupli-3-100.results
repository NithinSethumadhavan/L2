{"examples": ["(dupli []) -> []", "(dupli []) -> []"], "name": "dupli", "time": 0.000511, "solution": "(let dupli (let a (lambda (b) []) _) _)"}
{"examples": ["(dupli []) -> []", "(dupli [6 6]) -> [6 6 6 6]"], "name": "dupli", "time": 0.143845, "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c (cons c b))) [])) _) _)"}
{"examples": ["(dupli []) -> []", "(dupli [4 9]) -> [4 4 9 9]"], "name": "dupli", "time": 0.241222, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli []) -> []", "(dupli [1 7 1 9 2]) -> [1 1 7 7 1 1 9 9 2 2]"], "name": "dupli", "time": 0.203631, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli []) -> []", "(dupli [2]) -> [2 2]"], "name": "dupli", "time": 0.065516, "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c b)) [])) _) _)"}
{"examples": ["(dupli [0 0 9 0 8]) -> [0 0 0 0 9 9 0 0 8 8]", "(dupli []) -> []"], "name": "dupli", "time": 0.246868, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli []) -> []", "(dupli [5 0 5 9 3]) -> [5 5 0 0 5 5 9 9 3 3]"], "name": "dupli", "time": 0.275895, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli []) -> []", "(dupli [6]) -> [6 6]"], "name": "dupli", "time": 0.064975, "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c b)) [])) _) _)"}
{"examples": ["(dupli []) -> []", "(dupli [3 7]) -> [3 3 7 7]"], "name": "dupli", "time": 0.13966, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [2]) -> [2 2]", "(dupli [3]) -> [3 3]"], "name": "dupli", "time": 0.012134, "solution": "(let dupli (let a (lambda (b) (cons (car b) b)) _) _)"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []"], "name": "dupli", "time": 0.000513, "solution": "(let dupli (let a (lambda (b) []) _) _)"}
{"examples": ["(dupli [3]) -> [3 3]", "(dupli [3 1 9 7]) -> [3 3 1 1 9 9 7 7]"], "name": "dupli", "time": 0.543652, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [1 5 6 1]) -> [1 1 5 5 6 6 1 1]", "(dupli [8 2 4 7 7]) -> [8 8 2 2 4 4 7 7 7 7]"], "name": "dupli", "time": 0.586552, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [3 3 6]) -> [3 3 3 3 6 6]", "(dupli [9]) -> [9 9]"], "name": "dupli", "time": 0.573766, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [9 8 0]) -> [9 9 8 8 0 0]", "(dupli [9 6 5 5]) -> [9 9 6 6 5 5 5 5]"], "name": "dupli", "time": 0.594322, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [3 3]) -> [3 3 3 3]", "(dupli [6]) -> [6 6]"], "name": "dupli", "time": 0.089008, "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) b)) _) _)"}
{"examples": ["(dupli [0 8]) -> [0 0 8 8]", "(dupli []) -> []"], "name": "dupli", "time": 0.112667, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [4 2 2 8]) -> [4 4 2 2 2 2 8 8]", "(dupli [7 4 7]) -> [7 7 4 4 7 7]"], "name": "dupli", "time": 0.499834, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [8]) -> [8 8]", "(dupli [8 9 6]) -> [8 8 9 9 6 6]"], "name": "dupli", "time": 0.868547, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [0]) -> [0 0]", "(dupli [7 4 4 5 3]) -> [7 7 4 4 4 4 5 5 3 3]"], "name": "dupli", "time": 0.822212, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli []) -> []", "(dupli [9 3 6 6 0]) -> [9 9 3 3 6 6 6 6 0 0]"], "name": "dupli", "time": 0.145053, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [4 6]) -> [4 4 6 6]", "(dupli [7 5]) -> [7 7 5 5]"], "name": "dupli", "time": 0.876158, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [7 7 6 1]) -> [7 7 7 7 6 6 1 1]", "(dupli [4 5 6 5]) -> [4 4 5 5 6 6 5 5]"], "name": "dupli", "time": 0.848192, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [9 3 9 9]) -> [9 9 3 3 9 9 9 9]", "(dupli [7 2 9 0]) -> [7 7 2 2 9 9 0 0]"], "name": "dupli", "time": 0.73648, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [7]) -> [7 7]", "(dupli [0 4 5]) -> [0 0 4 4 5 5]"], "name": "dupli", "time": 0.731428, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [8 8 5 0]) -> [8 8 8 8 5 5 0 0]", "(dupli [6]) -> [6 6]"], "name": "dupli", "time": 0.540278, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [8 3]) -> [8 8 3 3]", "(dupli []) -> []"], "name": "dupli", "time": 0.206524, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [4 7 6 4]) -> [4 4 7 7 6 6 4 4]", "(dupli [0 9 4 0]) -> [0 0 9 9 4 4 0 0]"], "name": "dupli", "time": 0.80203, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [5]) -> [5 5]", "(dupli [4 9 2 4]) -> [4 4 9 9 2 2 4 4]"], "name": "dupli", "time": 0.669018, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [3 9 6 5 4]) -> [3 3 9 9 6 6 5 5 4 4]", "(dupli [7 3 6]) -> [7 7 3 3 6 6]"], "name": "dupli", "time": 0.78657, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [1 8 7]) -> [1 1 8 8 7 7]", "(dupli [9 3]) -> [9 9 3 3]"], "name": "dupli", "time": 0.712183, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [2]) -> [2 2]", "(dupli [1 1]) -> [1 1 1 1]"], "name": "dupli", "time": 0.044188, "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) b)) _) _)"}
{"examples": ["(dupli [4 2 7 9 8]) -> [4 4 2 2 7 7 9 9 8 8]", "(dupli [1]) -> [1 1]"], "name": "dupli", "time": 0.562624, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [8 8 6 8 9]) -> [8 8 8 8 6 6 8 8 9 9]", "(dupli [9 8 4]) -> [9 9 8 8 4 4]"], "name": "dupli", "time": 0.546783, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []"], "name": "dupli", "time": 0.000414, "solution": "(let dupli (let a (lambda (b) []) _) _)"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []"], "name": "dupli", "time": 0.000653, "solution": "(let dupli (let a (lambda (b) []) _) _)"}
{"examples": ["(dupli [8]) -> [8 8]", "(dupli [4]) -> [4 4]"], "name": "dupli", "time": 0.014625, "solution": "(let dupli (let a (lambda (b) (cons (car b) b)) _) _)"}
{"examples": ["(dupli []) -> []", "(dupli [7 9]) -> [7 7 9 9]"], "name": "dupli", "time": 0.111292, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [3 5]) -> [3 3 5 5]", "(dupli [6 3 3 1 8]) -> [6 6 3 3 3 3 1 1 8 8]"], "name": "dupli", "time": 0.523157, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [8 0]) -> [8 8 0 0]", "(dupli [1]) -> [1 1]"], "name": "dupli", "time": 0.603566, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli []) -> []", "(dupli [3 0 0]) -> [3 3 0 0 0 0]"], "name": "dupli", "time": 0.085306, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [5 1 2 8 9]) -> [5 5 1 1 2 2 8 8 9 9]", "(dupli [0]) -> [0 0]"], "name": "dupli", "time": 0.604824, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [6 8 8 8]) -> [6 6 8 8 8 8 8 8]", "(dupli [0 3 8 1]) -> [0 0 3 3 8 8 1 1]"], "name": "dupli", "time": 0.53327, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [2 6 2 5]) -> [2 2 6 6 2 2 5 5]", "(dupli [4 1]) -> [4 4 1 1]"], "name": "dupli", "time": 0.649849, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [7 4 8 4]) -> [7 7 4 4 8 8 4 4]", "(dupli [8 2 2 2 1]) -> [8 8 2 2 2 2 2 2 1 1]"], "name": "dupli", "time": 0.511898, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli []) -> []", "(dupli [7 5]) -> [7 7 5 5]"], "name": "dupli", "time": 0.219835, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [8]) -> [8 8]", "(dupli [5]) -> [5 5]"], "name": "dupli", "time": 0.007437, "solution": "(let dupli (let a (lambda (b) (cons (car b) b)) _) _)"}
{"examples": ["(dupli [0 3 1 2 2]) -> [0 0 3 3 1 1 2 2 2 2]", "(dupli []) -> []"], "name": "dupli", "time": 0.21279, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [9 6 0]) -> [9 9 6 6 0 0]", "(dupli [0 0 9]) -> [0 0 0 0 9 9]"], "name": "dupli", "time": 0.745772, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [9 7 7 6]) -> [9 9 7 7 7 7 6 6]", "(dupli [0 5]) -> [0 0 5 5]"], "name": "dupli", "time": 0.545184, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [0]) -> [0 0]", "(dupli [3 3 7 4 9]) -> [3 3 3 3 7 7 4 4 9 9]"], "name": "dupli", "time": 0.514742, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [1 3 6 7 8]) -> [1 1 3 3 6 6 7 7 8 8]", "(dupli [2 8]) -> [2 2 8 8]"], "name": "dupli", "time": 0.815129, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [3]) -> [3 3]", "(dupli [8 3]) -> [8 8 3 3]"], "name": "dupli", "time": 0.786142, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [5 2 7 4 5]) -> [5 5 2 2 7 7 4 4 5 5]", "(dupli [9 9 8 6]) -> [9 9 9 9 8 8 6 6]"], "name": "dupli", "time": 0.806085, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [0]) -> [0 0]", "(dupli [2 8 9 2]) -> [2 2 8 8 9 9 2 2]"], "name": "dupli", "time": 0.518655, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [6 8 3 0 7]) -> [6 6 8 8 3 3 0 0 7 7]", "(dupli [0 0 6]) -> [0 0 0 0 6 6]"], "name": "dupli", "time": 0.523916, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [4 0 3]) -> [4 4 0 0 3 3]", "(dupli [7]) -> [7 7]"], "name": "dupli", "time": 0.549526, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [9]) -> [9 9]", "(dupli []) -> []"], "name": "dupli", "time": 0.03869, "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c b)) [])) _) _)"}
{"examples": ["(dupli [5 4 1]) -> [5 5 4 4 1 1]", "(dupli [0 2 4]) -> [0 0 2 2 4 4]"], "name": "dupli", "time": 0.803981, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [8 3 8]) -> [8 8 3 3 8 8]", "(dupli [7 1 6 0 0]) -> [7 7 1 1 6 6 0 0 0 0]"], "name": "dupli", "time": 0.512999, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli []) -> []", "(dupli [0 9 3]) -> [0 0 9 9 3 3]"], "name": "dupli", "time": 0.142018, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []"], "name": "dupli", "time": 0.000413, "solution": "(let dupli (let a (lambda (b) []) _) _)"}
{"examples": ["(dupli [1]) -> [1 1]", "(dupli [7]) -> [7 7]"], "name": "dupli", "time": 0.008863, "solution": "(let dupli (let a (lambda (b) (cons (car b) b)) _) _)"}
{"examples": ["(dupli [1]) -> [1 1]", "(dupli []) -> []"], "name": "dupli", "time": 0.028271, "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons 1 b)) [])) _) _)"}
{"examples": ["(dupli [7]) -> [7 7]", "(dupli [3 3 7 3]) -> [3 3 3 3 7 7 3 3]"], "name": "dupli", "time": 0.691356, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [7 2]) -> [7 7 2 2]", "(dupli [4 6 3]) -> [4 4 6 6 3 3]"], "name": "dupli", "time": 0.676539, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [8 5]) -> [8 8 5 5]", "(dupli [0 1 6 7]) -> [0 0 1 1 6 6 7 7]"], "name": "dupli", "time": 0.584703, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [0]) -> [0 0]", "(dupli [7 7 7]) -> [7 7 7 7 7 7]"], "name": "dupli", "time": 0.090757, "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) b)) _) _)"}
{"examples": ["(dupli [9 4]) -> [9 9 4 4]", "(dupli [5 7 8 1]) -> [5 5 7 7 8 8 1 1]"], "name": "dupli", "time": 0.623459, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli []) -> []", "(dupli [5 5 3]) -> [5 5 5 5 3 3]"], "name": "dupli", "time": 0.187273, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli []) -> []", "(dupli [0 9 8 6 7]) -> [0 0 9 9 8 8 6 6 7 7]"], "name": "dupli", "time": 0.203831, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [7 7 6 5 9]) -> [7 7 7 7 6 6 5 5 9 9]", "(dupli []) -> []"], "name": "dupli", "time": 0.158172, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [2]) -> [2 2]", "(dupli [2 5 6 2]) -> [2 2 5 5 6 6 2 2]"], "name": "dupli", "time": 0.574786, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [7]) -> [7 7]", "(dupli [9 7]) -> [9 9 7 7]"], "name": "dupli", "time": 0.535546, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [8 4 0]) -> [8 8 4 4 0 0]", "(dupli [9 9 6 7 5]) -> [9 9 9 9 6 6 7 7 5 5]"], "name": "dupli", "time": 0.605321, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [1 0]) -> [1 1 0 0]", "(dupli [5 4 9 3 1]) -> [5 5 4 4 9 9 3 3 1 1]"], "name": "dupli", "time": 0.587207, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [5 6]) -> [5 5 6 6]", "(dupli [5 5 2 3]) -> [5 5 5 5 2 2 3 3]"], "name": "dupli", "time": 0.617154, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [7 5]) -> [7 7 5 5]", "(dupli [3 7 0 6]) -> [3 3 7 7 0 0 6 6]"], "name": "dupli", "time": 0.656499, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [6 5 4]) -> [6 6 5 5 4 4]", "(dupli [6 0 5]) -> [6 6 0 0 5 5]"], "name": "dupli", "time": 0.599299, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [5 3 6 5]) -> [5 5 3 3 6 6 5 5]", "(dupli []) -> []"], "name": "dupli", "time": 0.200169, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [7 6 0]) -> [7 7 6 6 0 0]", "(dupli [8 7]) -> [8 8 7 7]"], "name": "dupli", "time": 0.570215, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [3 5 8]) -> [3 3 5 5 8 8]", "(dupli [0]) -> [0 0]"], "name": "dupli", "time": 0.63553, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [7 5 0 7]) -> [7 7 5 5 0 0 7 7]", "(dupli [8 5 1 1 2]) -> [8 8 5 5 1 1 1 1 2 2]"], "name": "dupli", "time": 0.534794, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [6 2]) -> [6 6 2 2]", "(dupli []) -> []"], "name": "dupli", "time": 0.078074, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [0 0 1]) -> [0 0 0 0 1 1]", "(dupli []) -> []"], "name": "dupli", "time": 0.117866, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [4]) -> [4 4]", "(dupli [2 9 2 3]) -> [2 2 9 9 2 2 3 3]"], "name": "dupli", "time": 0.728438, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [8 4 0 9 8]) -> [8 8 4 4 0 0 9 9 8 8]", "(dupli [2 8 0]) -> [2 2 8 8 0 0]"], "name": "dupli", "time": 0.77666, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [9 8 5 3 5]) -> [9 9 8 8 5 5 3 3 5 5]", "(dupli [2 1 5]) -> [2 2 1 1 5 5]"], "name": "dupli", "time": 0.400762, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [5 1 0 5]) -> [5 5 1 1 0 0 5 5]", "(dupli [2 2 4 6 8]) -> [2 2 2 2 4 4 6 6 8 8]"], "name": "dupli", "time": 0.405262, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli []) -> []", "(dupli [1 1 3]) -> [1 1 1 1 3 3]"], "name": "dupli", "time": 0.111781, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [1 0 9 2 7]) -> [1 1 0 0 9 9 2 2 7 7]", "(dupli [8 5 3 2 1]) -> [8 8 5 5 3 3 2 2 1 1]"], "name": "dupli", "time": 0.785721, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli []) -> []", "(dupli [4 0 4]) -> [4 4 0 0 4 4]"], "name": "dupli", "time": 0.159778, "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [5 0 6 5 5]) -> [5 5 0 0 6 6 5 5 5 5]", "(dupli [6 7 3]) -> [6 6 7 7 3 3]"], "name": "dupli", "time": 0.349466, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [2 9 8]) -> [2 2 9 9 8 8]", "(dupli [0]) -> [0 0]"], "name": "dupli", "time": 0.754989, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [4 8 7]) -> [4 4 8 8 7 7]", "(dupli [5]) -> [5 5]"], "name": "dupli", "time": 0.727205, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [4 4 3]) -> [4 4 4 4 3 3]", "(dupli [1 6]) -> [1 1 6 6]"], "name": "dupli", "time": 0.597515, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [8 2 1]) -> [8 8 2 2 1 1]", "(dupli [8 0 9]) -> [8 8 0 0 9 9]"], "name": "dupli", "time": 0.3798, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [0 7 1]) -> [0 0 7 7 1 1]", "(dupli [3]) -> [3 3]"], "name": "dupli", "time": 0.595214, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [6]) -> [6 6]", "(dupli [9 0 0 0]) -> [9 9 0 0 0 0 0 0]"], "name": "dupli", "time": 0.554307, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [8 2 1 3 1]) -> [8 8 2 2 1 1 3 3 1 1]", "(dupli [4 6 0 8 1]) -> [4 4 6 6 0 0 8 8 1 1]"], "name": "dupli", "time": 0.418276, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
