{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 7 1 6 9]) -> [3 3 3 3 3]", "(multfirst [4 3 3 2 7]) -> [4 4 4 4 4]", "(multfirst [3 1]) -> [3 3]", "(multfirst [0]) -> [0]", "(multfirst [6]) -> [6]"], "time": 0.024921, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [6 5]) -> [6 6]", "(multfirst [5 0 8 1 3]) -> [5 5 5 5 5]", "(multfirst [6 9 4]) -> [6 6 6]", "(multfirst [5]) -> [5]"], "time": 0.036253, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 4]) -> [9 9]", "(multfirst [0]) -> [0]", "(multfirst []) -> []", "(multfirst [7 8 2]) -> [7 7 7]", "(multfirst [6 5 7]) -> [6 6 6]"], "time": 0.024397, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1 6 8 6 4]) -> [1 1 1 1 1]", "(multfirst [5 3]) -> [5 5]", "(multfirst [9 4 6 9 6]) -> [9 9 9 9 9]", "(multfirst []) -> []", "(multfirst [7 6 1 9]) -> [7 7 7 7]"], "time": 0.031605, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst [5 5 5 1]) -> [5 5 5 5]", "(multfirst [9 4 8 2 3]) -> [9 9 9 9 9]", "(multfirst [3 8 4 0 2]) -> [3 3 3 3 3]", "(multfirst []) -> []"], "time": 0.027404, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [2 7 8 8 1]) -> [2 2 2 2 2]", "(multfirst []) -> []", "(multfirst [9]) -> [9]", "(multfirst [7 4 0 4 1]) -> [7 7 7 7 7]", "(multfirst [8 2]) -> [8 8]"], "time": 0.038043, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 5 3 6]) -> [6 6 6 6]", "(multfirst [2 3 0]) -> [2 2 2]", "(multfirst [5 2 1 5]) -> [5 5 5 5]", "(multfirst [2 0 1 5 7]) -> [2 2 2 2 2]", "(multfirst [7 8 3 4]) -> [7 7 7 7]"], "time": 0.031664, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [7]) -> [7]", "(multfirst [8 8 7]) -> [8 8 8]", "(multfirst [3 8 4]) -> [3 3 3]", "(multfirst [6 7 7]) -> [6 6 6]", "(multfirst [3]) -> [3]"], "time": 0.028778, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0 2]) -> [0 0]", "(multfirst [2]) -> [2]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [5 9 4 5]) -> [5 5 5 5]"], "time": 0.026777, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 6]) -> [9 9]", "(multfirst [2 1]) -> [2 2]", "(multfirst [0 7 2 7]) -> [0 0 0 0]", "(multfirst []) -> []", "(multfirst [3 1]) -> [3 3]"], "time": 0.023698, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 8 7 3]) -> [9 9 9 9]", "(multfirst [0 6 9]) -> [0 0 0]", "(multfirst [2 5]) -> [2 2]", "(multfirst [3 7 5]) -> [3 3 3]", "(multfirst [4 5 0 6 3]) -> [4 4 4 4 4]"], "time": 0.032, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 6]) -> [6 6]", "(multfirst [9]) -> [9]", "(multfirst [7]) -> [7]", "(multfirst [8 7 5 0 0]) -> [8 8 8 8 8]", "(multfirst []) -> []"], "time": 0.039737, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4 8 5]) -> [4 4 4]", "(multfirst [0 6 1 7 5]) -> [0 0 0 0 0]", "(multfirst [3]) -> [3]", "(multfirst [1 1 0 6]) -> [1 1 1 1]", "(multfirst [2 9 3 8 9]) -> [2 2 2 2 2]"], "time": 0.037886, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5]) -> [5]", "(multfirst []) -> []", "(multfirst [8]) -> [8]", "(multfirst []) -> []", "(multfirst [1 0]) -> [1 1]"], "time": 0.024717, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1 9 6]) -> [1 1 1]", "(multfirst [5 9 1 4]) -> [5 5 5 5]", "(multfirst [7 7 3 7 0]) -> [7 7 7 7 7]", "(multfirst [9 4 2]) -> [9 9 9]", "(multfirst []) -> []"], "time": 0.024627, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1 3 8 4 3]) -> [1 1 1 1 1]", "(multfirst [7 6 4 6 4]) -> [7 7 7 7 7]", "(multfirst [3 9 4 3]) -> [3 3 3 3]", "(multfirst [1]) -> [1]", "(multfirst [0]) -> [0]"], "time": 0.026654, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [7 4 8 9]) -> [7 7 7 7]", "(multfirst [8 7 5 7]) -> [8 8 8 8]", "(multfirst [3 5]) -> [3 3]", "(multfirst [1 1 8 7 0]) -> [1 1 1 1 1]", "(multfirst []) -> []"], "time": 0.022324, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8 4 6 3 8]) -> [8 8 8 8 8]", "(multfirst [2 8 0 8 7]) -> [2 2 2 2 2]", "(multfirst []) -> []", "(multfirst [3 9 5 8]) -> [3 3 3 3]", "(multfirst [8 6]) -> [8 8]"], "time": 0.026109, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [4 3 6 2]) -> [4 4 4 4]", "(multfirst []) -> []"], "time": 0.031631, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8 0 3 6]) -> [8 8 8 8]", "(multfirst [8 9]) -> [8 8]", "(multfirst [5]) -> [5]", "(multfirst [2 5 2 3]) -> [2 2 2 2]", "(multfirst [7]) -> [7]"], "time": 0.025271, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [3 7]) -> [3 3]", "(multfirst [4 0 3 0]) -> [4 4 4 4]", "(multfirst [9 1 2]) -> [9 9 9]", "(multfirst [1 8 5 5 2]) -> [1 1 1 1 1]"], "time": 0.03113, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1 9 6 6]) -> [1 1 1 1]", "(multfirst [0 6 9 1 2]) -> [0 0 0 0 0]", "(multfirst [3]) -> [3]", "(multfirst []) -> []", "(multfirst [4 6 8 7]) -> [4 4 4 4]"], "time": 0.031685, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4 4 3 0 5]) -> [4 4 4 4 4]", "(multfirst [9 4 8]) -> [9 9 9]", "(multfirst [7 8 6]) -> [7 7 7]", "(multfirst [4 3 4 0]) -> [4 4 4 4]", "(multfirst [8 1]) -> [8 8]"], "time": 0.023564, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 8]) -> [9 9]", "(multfirst [1 6 3 6]) -> [1 1 1 1]", "(multfirst [9 6 9 0]) -> [9 9 9 9]", "(multfirst []) -> []", "(multfirst []) -> []"], "time": 0.037251, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8 1 0 7]) -> [8 8 8 8]", "(multfirst []) -> []", "(multfirst [5 3]) -> [5 5]", "(multfirst [3 7 8]) -> [3 3 3]", "(multfirst [9 1 0 9]) -> [9 9 9 9]"], "time": 0.028726, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0 9 2 7 1]) -> [0 0 0 0 0]", "(multfirst [9 3]) -> [9 9]", "(multfirst [2 7]) -> [2 2]", "(multfirst [8]) -> [8]", "(multfirst [6 1 0]) -> [6 6 6]"], "time": 0.027479, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst [6]) -> [6]", "(multfirst [0 0 2]) -> [0 0 0]", "(multfirst [3 4 3]) -> [3 3 3]", "(multfirst [8]) -> [8]"], "time": 0.03093, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0 4 9 7 6]) -> [0 0 0 0 0]", "(multfirst [8]) -> [8]", "(multfirst [3 1 3 1]) -> [3 3 3 3]", "(multfirst [8]) -> [8]", "(multfirst [4 0]) -> [4 4]"], "time": 0.035392, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 8 2 1 9]) -> [3 3 3 3 3]", "(multfirst [2 6]) -> [2 2]", "(multfirst [9 1 5 3 7]) -> [9 9 9 9 9]", "(multfirst [5 2 7 4]) -> [5 5 5 5]", "(multfirst [0 2]) -> [0 0]"], "time": 0.025539, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 9 6 2]) -> [9 9 9 9]", "(multfirst [7 0 2 4]) -> [7 7 7 7]", "(multfirst [5 2 9]) -> [5 5 5]", "(multfirst []) -> []", "(multfirst [0]) -> [0]"], "time": 0.027565, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7 5 0 4 6]) -> [7 7 7 7 7]", "(multfirst [2 8 3]) -> [2 2 2]", "(multfirst [1 4 6]) -> [1 1 1]", "(multfirst [5]) -> [5]"], "time": 0.031917, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [2 2 2 9 8]) -> [2 2 2 2 2]", "(multfirst [1]) -> [1]", "(multfirst [9 2]) -> [9 9]", "(multfirst [3 7]) -> [3 3]"], "time": 0.031417, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [7 6 7 1 8]) -> [7 7 7 7 7]", "(multfirst [4 8 1 3]) -> [4 4 4 4]", "(multfirst [4 1 7 4 8]) -> [4 4 4 4 4]", "(multfirst [6 6 4]) -> [6 6 6]", "(multfirst [4 1 0 0]) -> [4 4 4 4]"], "time": 0.032889, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 5 9 8]) -> [9 9 9 9]", "(multfirst []) -> []", "(multfirst [4]) -> [4]", "(multfirst [6 3 7]) -> [6 6 6]", "(multfirst [2]) -> [2]"], "time": 0.036197, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [9]) -> [9]", "(multfirst [5 2]) -> [5 5]", "(multfirst [7 3 9 1]) -> [7 7 7 7]", "(multfirst [5 7]) -> [5 5]"], "time": 0.022709, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1 0]) -> [1 1]", "(multfirst []) -> []", "(multfirst [8 8]) -> [8 8]", "(multfirst [3]) -> [3]", "(multfirst [8 7 6 2]) -> [8 8 8 8]"], "time": 0.02563, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0 0 6 2]) -> [0 0 0 0]", "(multfirst [7 7 4]) -> [7 7 7]", "(multfirst [4 5 0]) -> [4 4 4]", "(multfirst [2 1 0]) -> [2 2 2]", "(multfirst []) -> []"], "time": 0.030474, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8 2]) -> [8 8]", "(multfirst [4 2 1 4 1]) -> [4 4 4 4 4]", "(multfirst [2 8 0]) -> [2 2 2]", "(multfirst [4 2 9 3 8]) -> [4 4 4 4 4]", "(multfirst [7 7 7 8]) -> [7 7 7 7]"], "time": 0.032313, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 2]) -> [9 9]", "(multfirst [1 4 4 0 1]) -> [1 1 1 1 1]", "(multfirst [2 8 9]) -> [2 2 2]", "(multfirst [7 1]) -> [7 7]", "(multfirst [1]) -> [1]"], "time": 0.023028, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8 8 3 6]) -> [8 8 8 8]", "(multfirst [0 5 1 4]) -> [0 0 0 0]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [0]) -> [0]"], "time": 0.024359, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3]) -> [3]", "(multfirst [6 5]) -> [6 6]", "(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst [5 3]) -> [5 5]"], "time": 0.036522, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5]) -> [5]", "(multfirst [1]) -> [1]", "(multfirst [8 6]) -> [8 8]", "(multfirst [1 4]) -> [1 1]", "(multfirst []) -> []"], "time": 0.026815, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4 9 1 7]) -> [4 4 4 4]", "(multfirst [9 3 8]) -> [9 9 9]", "(multfirst [5 7 8]) -> [5 5 5]", "(multfirst [9 7 0 8 4]) -> [9 9 9 9 9]", "(multfirst [6 9]) -> [6 6]"], "time": 0.022903, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 1 8 0 9]) -> [6 6 6 6 6]", "(multfirst [8 3 3 6 8]) -> [8 8 8 8 8]", "(multfirst [1]) -> [1]", "(multfirst [3 4 4 0]) -> [3 3 3 3]", "(multfirst [5 1]) -> [5 5]"], "time": 0.025853, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 3 7 5]) -> [6 6 6 6]", "(multfirst [1 0 2]) -> [1 1 1]", "(multfirst [2]) -> [2]", "(multfirst [8 5 5 7]) -> [8 8 8 8]", "(multfirst [9]) -> [9]"], "time": 0.03473, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 6 5 2 9]) -> [3 3 3 3 3]", "(multfirst []) -> []", "(multfirst [9 4 4]) -> [9 9 9]", "(multfirst [3]) -> [3]", "(multfirst [1 3]) -> [1 1]"], "time": 0.027707, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0 3 5]) -> [0 0 0]", "(multfirst [6 2 3]) -> [6 6 6]", "(multfirst [2 4 0 0]) -> [2 2 2 2]", "(multfirst [0 4 8 0 7]) -> [0 0 0 0 0]", "(multfirst [9 9 0 1 5]) -> [9 9 9 9 9]"], "time": 0.035985, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [2 4 3 4 8]) -> [2 2 2 2 2]", "(multfirst [5 7]) -> [5 5]", "(multfirst [3 3]) -> [3 3]", "(multfirst [5 7 0]) -> [5 5 5]", "(multfirst [0]) -> [0]"], "time": 0.028837, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 2]) -> [6 6]", "(multfirst [3 4]) -> [3 3]", "(multfirst [6 9 9]) -> [6 6 6]", "(multfirst [1 8 2 1 6]) -> [1 1 1 1 1]", "(multfirst [2]) -> [2]"], "time": 0.021883, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [5 8 0]) -> [5 5 5]", "(multfirst [0]) -> [0]", "(multfirst [0 3]) -> [0 0]", "(multfirst []) -> []"], "time": 0.025335, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [2]) -> [2]", "(multfirst [1 1 8 0]) -> [1 1 1 1]", "(multfirst [2 7]) -> [2 2]", "(multfirst [8 7 2 9 5]) -> [8 8 8 8 8]"], "time": 0.032621, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 6 0 4 8]) -> [6 6 6 6 6]", "(multfirst [9 1 9 2]) -> [9 9 9 9]", "(multfirst [1 1 5 6 7]) -> [1 1 1 1 1]", "(multfirst [0 2 9 9 8]) -> [0 0 0 0 0]", "(multfirst [8 3]) -> [8 8]"], "time": 0.025535, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4]) -> [4]", "(multfirst [6 0 8 4 6]) -> [6 6 6 6 6]", "(multfirst [6 6 8 0 9]) -> [6 6 6 6 6]", "(multfirst [5 3 0]) -> [5 5 5]", "(multfirst [2 3 3]) -> [2 2 2]"], "time": 0.032235, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 3 4 4 4]) -> [3 3 3 3 3]", "(multfirst [2 8]) -> [2 2]", "(multfirst [4 7 1]) -> [4 4 4]", "(multfirst [0 3]) -> [0 0]", "(multfirst [8 3 6 8]) -> [8 8 8 8]"], "time": 0.034729, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7]) -> [7]", "(multfirst [3 9 6]) -> [3 3 3]", "(multfirst [9 5 5]) -> [9 9 9]", "(multfirst [9 2 4 8 3]) -> [9 9 9 9 9]"], "time": 0.036738, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5]) -> [5]", "(multfirst [2 6 8]) -> [2 2 2]", "(multfirst []) -> []", "(multfirst [9 8 1 9]) -> [9 9 9 9]", "(multfirst [0 9 4]) -> [0 0 0]"], "time": 0.022425, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5 1 8]) -> [5 5 5]", "(multfirst [9]) -> [9]", "(multfirst [2 6]) -> [2 2]", "(multfirst [5]) -> [5]", "(multfirst [8 9 5]) -> [8 8 8]"], "time": 0.034758, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 5 1 1]) -> [3 3 3 3]", "(multfirst [0 9 8 4 7]) -> [0 0 0 0 0]", "(multfirst [9 3 3 4]) -> [9 9 9 9]", "(multfirst [6 9]) -> [6 6]", "(multfirst []) -> []"], "time": 0.029576, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0 9 1]) -> [0 0 0]", "(multfirst [2 5 4]) -> [2 2 2]", "(multfirst [6]) -> [6]", "(multfirst [6 0 1]) -> [6 6 6]", "(multfirst [6]) -> [6]"], "time": 0.032454, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 8]) -> [3 3]", "(multfirst [0 6 0 3 4]) -> [0 0 0 0 0]", "(multfirst [7 5 5 8 9]) -> [7 7 7 7 7]", "(multfirst [3]) -> [3]", "(multfirst [1 9 0 4]) -> [1 1 1 1]"], "time": 0.031411, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [7 6 9 0]) -> [7 7 7 7]", "(multfirst []) -> []", "(multfirst [4 6 6 9 0]) -> [4 4 4 4 4]", "(multfirst [3 6 4]) -> [3 3 3]", "(multfirst [0 8 9 0 8]) -> [0 0 0 0 0]"], "time": 0.024093, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst [4 4 9 5]) -> [4 4 4 4]", "(multfirst [4]) -> [4]", "(multfirst [0 7 5]) -> [0 0 0]"], "time": 0.038372, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [2 7 4 9 3]) -> [2 2 2 2 2]", "(multfirst [0 6 1 1]) -> [0 0 0 0]", "(multfirst [4 7 8]) -> [4 4 4]", "(multfirst [2]) -> [2]", "(multfirst [3 6 9 5 6]) -> [3 3 3 3 3]"], "time": 0.024413, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 1]) -> [3 3]", "(multfirst [9 4 0 5 5]) -> [9 9 9 9 9]", "(multfirst [1 9]) -> [1 1]", "(multfirst []) -> []", "(multfirst [3 3 7 4]) -> [3 3 3 3]"], "time": 0.024609, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1 4 8 3 6]) -> [1 1 1 1 1]", "(multfirst [5 4 7 9]) -> [5 5 5 5]", "(multfirst [6 8 5 6]) -> [6 6 6 6]", "(multfirst []) -> []", "(multfirst [9 5 3]) -> [9 9 9]"], "time": 0.022573, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 4 0 7]) -> [3 3 3 3]", "(multfirst [5 7 6 2]) -> [5 5 5 5]", "(multfirst [5 2 0 1 6]) -> [5 5 5 5 5]", "(multfirst [8 4 8]) -> [8 8 8]", "(multfirst [4 0 5 6 5]) -> [4 4 4 4 4]"], "time": 0.029414, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [8]) -> [8]", "(multfirst [4 1 9]) -> [4 4 4]", "(multfirst [5 6 1 2 5]) -> [5 5 5 5 5]", "(multfirst [1 6]) -> [1 1]"], "time": 0.022725, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [2 3 1 6 3]) -> [2 2 2 2 2]", "(multfirst []) -> []", "(multfirst [3 1 3]) -> [3 3 3]", "(multfirst [2 6 5 9]) -> [2 2 2 2]", "(multfirst []) -> []"], "time": 0.028799, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 4]) -> [9 9]", "(multfirst [7 4 7 3]) -> [7 7 7 7]", "(multfirst [3 3]) -> [3 3]", "(multfirst []) -> []", "(multfirst [0 2 8 1 9]) -> [0 0 0 0 0]"], "time": 0.027828, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5 9 1 7 7]) -> [5 5 5 5 5]", "(multfirst [5 5 3 3 9]) -> [5 5 5 5 5]", "(multfirst [0 0]) -> [0 0]", "(multfirst [5 4 7 5 2]) -> [5 5 5 5 5]", "(multfirst [9 2 1 3 5]) -> [9 9 9 9 9]"], "time": 0.022271, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0 1 1 9]) -> [0 0 0 0]", "(multfirst [5 5 2]) -> [5 5 5]", "(multfirst [0 0 2]) -> [0 0 0]", "(multfirst []) -> []", "(multfirst [5 7 6]) -> [5 5 5]"], "time": 0.026355, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 2]) -> [9 9]", "(multfirst [5 9]) -> [5 5]", "(multfirst [6 4 6 8]) -> [6 6 6 6]", "(multfirst [8]) -> [8]", "(multfirst [6 9]) -> [6 6]"], "time": 0.035838, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4 9 1 3 3]) -> [4 4 4 4 4]", "(multfirst [6 6 1]) -> [6 6 6]", "(multfirst [4 3]) -> [4 4]", "(multfirst [9 9 5 2 2]) -> [9 9 9 9 9]", "(multfirst [6 1]) -> [6 6]"], "time": 0.036068, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8 1 8 1]) -> [8 8 8 8]", "(multfirst [9]) -> [9]", "(multfirst [7 4 8]) -> [7 7 7]", "(multfirst [9 3]) -> [9 9]", "(multfirst [5 7]) -> [5 5]"], "time": 0.028136, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [2]) -> [2]", "(multfirst [8 4 3 6]) -> [8 8 8 8]", "(multfirst [3 0]) -> [3 3]", "(multfirst [0 4 2 3 4]) -> [0 0 0 0 0]", "(multfirst [9 4]) -> [9 9]"], "time": 0.033451, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8 3 3 7 4]) -> [8 8 8 8 8]", "(multfirst [4]) -> [4]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [6]) -> [6]"], "time": 0.032007, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7]) -> [7]", "(multfirst [1 8 8 3 6]) -> [1 1 1 1 1]", "(multfirst []) -> []", "(multfirst []) -> []"], "time": 0.035663, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8 1 5]) -> [8 8 8]", "(multfirst [2 1]) -> [2 2]", "(multfirst []) -> []", "(multfirst [1 3 2 5 4]) -> [1 1 1 1 1]", "(multfirst []) -> []"], "time": 0.022349, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [7 7 6 4]) -> [7 7 7 7]", "(multfirst [8 2 9 1 0]) -> [8 8 8 8 8]", "(multfirst [2]) -> [2]", "(multfirst [5 1 1]) -> [5 5 5]", "(multfirst []) -> []"], "time": 0.023398, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [2 8 4]) -> [2 2 2]", "(multfirst [7 5 4 9]) -> [7 7 7 7]", "(multfirst [5 5 0 5]) -> [5 5 5 5]", "(multfirst [6 6 0 3 9]) -> [6 6 6 6 6]"], "time": 0.038031, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 6 3 3]) -> [3 3 3 3]", "(multfirst [1 3]) -> [1 1]", "(multfirst [0 5 9 5]) -> [0 0 0 0]", "(multfirst []) -> []", "(multfirst [5]) -> [5]"], "time": 0.023272, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5 3 0 3]) -> [5 5 5 5]", "(multfirst [1]) -> [1]", "(multfirst [2]) -> [2]", "(multfirst []) -> []", "(multfirst [1 6 5 1]) -> [1 1 1 1]"], "time": 0.026382, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 4]) -> [9 9]", "(multfirst []) -> []", "(multfirst [5 3 9]) -> [5 5 5]", "(multfirst [5 8 5]) -> [5 5 5]", "(multfirst [6 1 4 5]) -> [6 6 6 6]"], "time": 0.023199, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4 5]) -> [4 4]", "(multfirst [8 4 0 3]) -> [8 8 8 8]", "(multfirst [2 2 3]) -> [2 2 2]", "(multfirst [1 1]) -> [1 1]", "(multfirst [7 4 4 0 2]) -> [7 7 7 7 7]"], "time": 0.024881, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [7 8 8 2]) -> [7 7 7 7]", "(multfirst [1 2 3 3 8]) -> [1 1 1 1 1]", "(multfirst [1 5 3]) -> [1 1 1]", "(multfirst []) -> []", "(multfirst [8 1 1 7 5]) -> [8 8 8 8 8]"], "time": 0.021988, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 2 6 8]) -> [3 3 3 3]", "(multfirst [9 9 0 9 8]) -> [9 9 9 9 9]", "(multfirst [4 9 8]) -> [4 4 4]", "(multfirst []) -> []", "(multfirst [1 1]) -> [1 1]"], "time": 0.028425, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1 0 3 3 9]) -> [1 1 1 1 1]", "(multfirst [1 3 1]) -> [1 1 1]", "(multfirst []) -> []", "(multfirst [4]) -> [4]", "(multfirst [2 5 9 3]) -> [2 2 2 2]"], "time": 0.036441, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6]) -> [6]", "(multfirst [9 4 5 0]) -> [9 9 9 9]", "(multfirst [9 6 5 8 8]) -> [9 9 9 9 9]", "(multfirst [6 4 3 0]) -> [6 6 6 6]", "(multfirst [6 9 1 9 4]) -> [6 6 6 6 6]"], "time": 0.022421, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4 6 0 6 5]) -> [4 4 4 4 4]", "(multfirst [5]) -> [5]", "(multfirst [7]) -> [7]", "(multfirst [5 0 8 4 8]) -> [5 5 5 5 5]", "(multfirst [4 3]) -> [4 4]"], "time": 0.032514, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8 6 2 7]) -> [8 8 8 8]", "(multfirst [6 2]) -> [6 6]", "(multfirst [1]) -> [1]", "(multfirst [1 7 4 5 4]) -> [1 1 1 1 1]", "(multfirst [3 5 3 0]) -> [3 3 3 3]"], "time": 0.022581, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8]) -> [8]", "(multfirst []) -> []", "(multfirst [5 6 5]) -> [5 5 5]", "(multfirst [9 2 5 6 8]) -> [9 9 9 9 9]", "(multfirst [5 5 3 5 6]) -> [5 5 5 5 5]"], "time": 0.022434, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4 6 6 7]) -> [4 4 4 4]", "(multfirst [2 2 2 3 9]) -> [2 2 2 2 2]", "(multfirst [7 4 9]) -> [7 7 7]", "(multfirst [9 4 7 1]) -> [9 9 9 9]", "(multfirst []) -> []"], "time": 0.02236, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [2 0]) -> [2 2]", "(multfirst [3 4 1 1 2]) -> [3 3 3 3 3]", "(multfirst [5 8 2 0]) -> [5 5 5 5]", "(multfirst [7 3 1]) -> [7 7 7]", "(multfirst [5 3]) -> [5 5]"], "time": 0.032797, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4 4]) -> [4 4]", "(multfirst [0 1]) -> [0 0]", "(multfirst [2 3 7 5]) -> [2 2 2 2]", "(multfirst [9 4 3 2]) -> [9 9 9 9]", "(multfirst []) -> []"], "time": 0.028455, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9]) -> [9]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [4]) -> [4]", "(multfirst [0 5 0 6]) -> [0 0 0 0]"], "time": 0.035562, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 3 5 4]) -> [9 9 9 9]", "(multfirst [5 1]) -> [5 5]", "(multfirst [6 5 7 0]) -> [6 6 6 6]", "(multfirst [5 5 6 4]) -> [5 5 5 5]", "(multfirst [0 7 8]) -> [0 0 0]"], "time": 0.023895, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5 5 1]) -> [5 5 5]", "(multfirst [1]) -> [1]", "(multfirst [2 1 4]) -> [2 2 2]", "(multfirst [7 9 5 5 2]) -> [7 7 7 7 7]", "(multfirst [1 6 0]) -> [1 1 1]"], "time": 0.02297, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6]) -> [6]", "(multfirst [1 8 2 1 9]) -> [1 1 1 1 1]", "(multfirst [5 1 3 2 4]) -> [5 5 5 5 5]", "(multfirst [8 7]) -> [8 8]", "(multfirst [3 9 2 7]) -> [3 3 3 3]"], "time": 0.021818, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5 2 5 9 6]) -> [5 5 5 5 5]", "(multfirst [8 6 2 0]) -> [8 8 8 8]", "(multfirst [5 7 3 1 3]) -> [5 5 5 5 5]", "(multfirst [5]) -> [5]", "(multfirst [2]) -> [2]"], "time": 0.021607, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 4 7 5]) -> [6 6 6 6]", "(multfirst [4 6 1]) -> [4 4 4]", "(multfirst [5 9 3]) -> [5 5 5]", "(multfirst [9 4 6]) -> [9 9 9]", "(multfirst []) -> []"], "time": 0.021435, "name": "multfirst"}
