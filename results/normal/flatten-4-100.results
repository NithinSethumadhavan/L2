{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {1 {8 {8}} {6 {2} {6}}}) -> [1 8 8 6 2 6]", "(flatten {9 {8}}) -> [9 8]"], "time": 0.155676}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {9}) -> [9]", "(flatten {7 {1 {3 {0}}}}) -> [7 1 3 0]"], "time": 0.130149}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {6 {3 {3 {1}}}}) -> [6 3 3 1]", "(flatten {0}) -> [0]"], "time": 0.130823}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {5}) -> [5]", "(flatten {7 {1} {6}}) -> [7 1 6]"], "time": 0.135148}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {4 {9} {5}}) -> [4 9 5]", "(flatten {7 {8} {3}}) -> [7 8 3]"], "time": 0.152247}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons 1 [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {1}) -> [1]"], "time": 0.135489}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {2}) -> [2]", "(flatten {}) -> []"], "time": 0.147328}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {6 {0}}) -> [6 0]", "(flatten {2}) -> [2]"], "time": 0.174557}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {5}) -> [5]", "(flatten {2 {6}}) -> [2 6]"], "time": 0.133624}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {6}) -> [6]", "(flatten {6}) -> [6]"], "time": 0.125645}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3 {0}}) -> [3 0]", "(flatten {0 {6} {2}}) -> [0 6 2]"], "time": 0.154944}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {9}) -> [9]", "(flatten {}) -> []"], "time": 0.129883}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {4}) -> [4]", "(flatten {0 {4 {3}} {6}}) -> [0 4 3 6]"], "time": 0.151129}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7 {3}}) -> [7 3]", "(flatten {1}) -> [1]"], "time": 0.156203}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {9}) -> [9]", "(flatten {9 {7}}) -> [9 7]"], "time": 0.130118}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0 {2} {6 {2} {8}}}) -> [0 2 6 2 8]", "(flatten {1}) -> [1]"], "time": 0.146662}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {5 {7} {9}}) -> [5 7 9]"], "time": 0.130061}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {2 {7 {0} {3}}}) -> [2 7 0 3]", "(flatten {5 {5}}) -> [5 5]"], "time": 0.141975}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {9 {1}}) -> [9 1]", "(flatten {4 {6}}) -> [4 6]"], "time": 0.148997}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {1 {6} {7 {8}}}) -> [1 6 7 8]", "(flatten {}) -> []"], "time": 0.154564}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7 {5}}) -> [7 5]", "(flatten {9 {8}}) -> [9 8]"], "time": 0.109416}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons 1 [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {1}) -> [1]"], "time": 0.145847}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {6}) -> [6]", "(flatten {}) -> []"], "time": 0.148715}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {6 {0 {2} {4}}}) -> [6 0 2 4]", "(flatten {}) -> []"], "time": 0.147151}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {1 {2} {2 {2 {7} {0}}}}) -> [1 2 2 2 7 0]", "(flatten {2 {2 {4} {6 {3}}} {2 {8} {6 {1} {4}}}}) -> [2 2 4 6 3 2 8 6 1 4]"], "time": 0.161226}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {8 {9 {8}}}) -> [8 9 8]", "(flatten {3 {7} {1 {9}}}) -> [3 7 1 9]"], "time": 0.146451}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {3 {1 {6 {9}}} {2}}) -> [3 1 6 9 2]"], "time": 0.149024}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {4 {6 {3 {4} {3}} {4}}}) -> [4 6 3 4 3 4]", "(flatten {3}) -> [3]"], "time": 0.1505}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3}) -> [3]", "(flatten {4 {9 {7 {0}}} {1 {4 {8} {2}}}}) -> [4 9 7 0 1 4 8 2]"], "time": 0.142649}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3 {4 {4 {7} {2}} {9 {2}}} {8 {1}}}) -> [3 4 4 7 2 9 2 8 1]", "(flatten {4 {6 {8} {6}} {0 {2} {1}}}) -> [4 6 8 6 0 2 1]"], "time": 0.134868}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {9 {5} {3 {0 {7}} {7 {7} {6}}}}) -> [9 5 3 0 7 7 7 6]", "(flatten {0}) -> [0]"], "time": 0.149341}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {4 {2 {6} {4}} {6 {0}}}) -> [4 2 6 4 6 0]", "(flatten {2 {6} {3 {8}}}) -> [2 6 3 8]"], "time": 0.168125}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3}) -> [3]", "(flatten {4 {2 {7} {9}}}) -> [4 2 7 9]"], "time": 0.089779}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {8}) -> [8]"], "time": 0.114771}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7}) -> [7]", "(flatten {5 {4} {3 {2} {6}}}) -> [5 4 3 2 6]"], "time": 0.130276}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {4}) -> [4]", "(flatten {2}) -> [2]"], "time": 0.136859}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {6}) -> [6]", "(flatten {1 {1}}) -> [1 1]"], "time": 0.14133}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {6 {6} {6}}) -> [6 6 6]"], "time": 0.136208}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {5 {4}}) -> [5 4]", "(flatten {}) -> []"], "time": 0.111763}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {6}) -> [6]", "(flatten {3}) -> [3]"], "time": 0.12593}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {3}) -> [3]"], "time": 0.130582}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7 {0}}) -> [7 0]", "(flatten {}) -> []"], "time": 0.138717}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons 0 (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0 {0}}) -> [0 0]", "(flatten {}) -> []"], "time": 0.159594}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {6}) -> [6]", "(flatten {}) -> []"], "time": 0.117927}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {2}) -> [2]", "(flatten {5}) -> [5]"], "time": 0.104194}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {0 {9} {9}}) -> [0 9 9]"], "time": 0.146074}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3 {6 {6}} {2 {5}}}) -> [3 6 6 2 5]", "(flatten {4 {0}}) -> [4 0]"], "time": 0.136309}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {4 {2 {5} {8}}}) -> [4 2 5 8]"], "time": 0.138958}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {8 {1 {8}}}) -> [8 1 8]", "(flatten {6}) -> [6]"], "time": 0.116524}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3}) -> [3]", "(flatten {6 {9}}) -> [6 9]"], "time": 0.096323}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {9}) -> [9]"], "time": 0.116966}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {9 {7}}) -> [9 7]"], "time": 0.173811}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {2 {3}}) -> [2 3]", "(flatten {9 {1}}) -> [9 1]"], "time": 0.143395}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {2 {4 {6}}}) -> [2 4 6]", "(flatten {4 {5}}) -> [4 5]"], "time": 0.178447}
