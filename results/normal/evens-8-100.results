{"time": 0.116392, "name": "evens", "examples": ["(evens []) -> []", "(evens [9]) -> []", "(evens [9 9 8]) -> [8]", "(evens [5 7 9 9]) -> []", "(evens [5]) -> []", "(evens []) -> []", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (< c (car b))))) _) _)"}
{"time": 1.211783, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [6]) -> [6]", "(evens [8 1 0]) -> [8 0]", "(evens [2 7]) -> [2]", "(evens [6 1]) -> [6]", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (car b)))))) _) _)"}
{"time": 23.337242, "name": "evens", "examples": ["(evens []) -> []", "(evens [6]) -> [6]", "(evens [1 6 8 2]) -> [6 8 2]", "(evens [8 1 3 0]) -> [8 0]", "(evens [5 1]) -> []", "(evens [8 7 6 9]) -> [8 6]", "(evens [0 9 0 4]) -> [0 0 4]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 23.78594, "name": "evens", "examples": ["(evens []) -> []", "(evens [9 6]) -> [6]", "(evens []) -> []", "(evens [7 8 3]) -> [8]", "(evens [0 2 4 4]) -> [0 2 4 4]", "(evens [5]) -> []", "(evens [5 6]) -> [6]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 24.677081, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [8]) -> [8]", "(evens [9]) -> []", "(evens [0 1 8]) -> [0 8]", "(evens [2 0 1 3 1]) -> [2 0]", "(evens [6 3 1 5 4]) -> [6 4]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 25.057299, "name": "evens", "examples": ["(evens []) -> []", "(evens [9 9 5]) -> []", "(evens [2]) -> [2]", "(evens [6 7 5]) -> [6]", "(evens [8 5 4 4]) -> [8 4 4]", "(evens []) -> []", "(evens [8 9 4 8 4]) -> [8 4 8 4]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 25.729056, "name": "evens", "examples": ["(evens []) -> []", "(evens [3 1 8 9]) -> [8]", "(evens [3 8 9]) -> [8]", "(evens [8 3 5 1]) -> [8]", "(evens [0 0 1]) -> [0 0]", "(evens [6]) -> [6]", "(evens [5]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 27.620629, "name": "evens", "examples": ["(evens []) -> []", "(evens [3 5 5]) -> []", "(evens []) -> []", "(evens [8]) -> [8]", "(evens [3 3 5 7 9]) -> []", "(evens []) -> []", "(evens [9]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 27.960027, "name": "evens", "examples": ["(evens []) -> []", "(evens [3 1 7]) -> []", "(evens [5]) -> []", "(evens [7 7]) -> []", "(evens [2 6 8 5]) -> [2 6 8]", "(evens [8 6]) -> [8 6]", "(evens [0]) -> [0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 3.613704, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [8 2]) -> [8 2]", "(evens [3 9 0]) -> [0]", "(evens []) -> []", "(evens [0]) -> [0]", "(evens [6]) -> [6]"], "solution": "(let evens (let a (lambda (b) (foldl b (lambda (d c) (filter b (lambda (e) (<= e (* c e))))) [])) _) _)"}
{"time": 30.500213, "name": "evens", "examples": ["(evens []) -> []", "(evens [7 9 3 2]) -> [2]", "(evens [7]) -> []", "(evens [1 4]) -> [4]", "(evens [5 3 9]) -> []", "(evens [7 6 7 5 9]) -> [6]", "(evens [1 6]) -> [6]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 31.475142, "name": "evens", "examples": ["(evens []) -> []", "(evens [4 6 4 1]) -> [4 6 4]", "(evens [8 1 1 7]) -> [8]", "(evens []) -> []", "(evens [3 0 0 5]) -> [0 0]", "(evens [0 7 0 8]) -> [0 0 8]", "(evens [3 6 7 3 6]) -> [6 6]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 33.290372, "name": "evens", "examples": ["(evens []) -> []", "(evens [7 2 7 3 0]) -> [2 0]", "(evens [6 2 9]) -> [6 2]", "(evens [8 7 7 9 7]) -> [8]", "(evens [9 8 8 8 8]) -> [8 8 8 8]", "(evens [3]) -> []", "(evens [9]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 32.638918, "name": "evens", "examples": ["(evens []) -> []", "(evens [8 7]) -> [8]", "(evens []) -> []", "(evens []) -> []", "(evens [6 2 6]) -> [6 2 6]", "(evens [9 4 2 5]) -> [4 2]", "(evens [1 5 6]) -> [6]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 34.370132, "name": "evens", "examples": ["(evens []) -> []", "(evens [7 6 3 5 3]) -> [6]", "(evens [4 0 8]) -> [4 0 8]", "(evens [4 5 3 5]) -> [4]", "(evens []) -> []", "(evens [5 8 9 3]) -> [8]", "(evens [0]) -> [0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 35.317902, "name": "evens", "examples": ["(evens []) -> []", "(evens [1 0 9]) -> [0]", "(evens []) -> []", "(evens [2 7]) -> [2]", "(evens []) -> []", "(evens [5 1 2]) -> [2]", "(evens [0 7 3]) -> [0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 37.468442, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [6 2]) -> [6 2]", "(evens [5 4 6 7 5]) -> [4 6]", "(evens [4 1 5 5]) -> [4]", "(evens [7 3 9]) -> []", "(evens [1 4]) -> [4]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 37.44649, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [7 4 1 5]) -> [4]", "(evens [0 1]) -> [0]", "(evens [3 2 6 5]) -> [2 6]", "(evens [3 5 1 4]) -> [4]", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 5.923309, "name": "evens", "examples": ["(evens []) -> []", "(evens [9 7]) -> []", "(evens []) -> []", "(evens [0 9]) -> [0]", "(evens [1 1 3]) -> []", "(evens [1 3 2]) -> [2]", "(evens [9]) -> []"], "solution": "(let evens (let a (lambda (b) (foldr b (lambda (d c) (filter b (lambda (e) (= c (- e c))))) [])) _) _)"}
{"time": 40.741376, "name": "evens", "examples": ["(evens []) -> []", "(evens [5 9 5 6 8]) -> [6 8]", "(evens [6 8 2]) -> [6 8 2]", "(evens [0 1 9 1]) -> [0]", "(evens [4 4]) -> [4 4]", "(evens [8 6 7 3]) -> [8 6]", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 27.616489, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [5 6]) -> [6]", "(evens [2 3 2]) -> [2 2]", "(evens [4 5 1 0 1]) -> [4 0]", "(evens [2]) -> [2]", "(evens [4]) -> [4]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 25.552954, "name": "evens", "examples": ["(evens []) -> []", "(evens [0]) -> [0]", "(evens [2 1 5]) -> [2]", "(evens [0]) -> [0]", "(evens [0 7 5]) -> [0]", "(evens [5 5 9]) -> []", "(evens [1 9]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 30.156726, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [2]) -> [2]", "(evens [4 8 6 9]) -> [4 8 6]", "(evens [6 7 8]) -> [6 8]", "(evens [7 1 9 2 6]) -> [2 6]", "(evens [7 9]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 28.831032, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [8 5 4]) -> [8 4]", "(evens [2 9 0 9 9]) -> [2 0]", "(evens []) -> []", "(evens [3 1 0]) -> [0]", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 25.17657, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [1]) -> []", "(evens [8 2 1 0]) -> [8 2 0]", "(evens [5 9 6 7]) -> [6]", "(evens [4 5 7 2]) -> [4 2]", "(evens [7 6 5 8]) -> [6 8]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 34.539459, "name": "evens", "examples": ["(evens []) -> []", "(evens [9 9 2]) -> [2]", "(evens [6 4 8 5 5]) -> [6 4 8]", "(evens [6 9 8 1]) -> [6 8]", "(evens [9 1 3 8]) -> [8]", "(evens []) -> []", "(evens [7 1 3 3]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 24.639626, "name": "evens", "examples": ["(evens []) -> []", "(evens [6]) -> [6]", "(evens [3 4 6 9]) -> [4 6]", "(evens [3 1 3 9 5]) -> []", "(evens [3 0]) -> [0]", "(evens [0 3 1 1]) -> [0]", "(evens [6 9 2 7]) -> [6 2]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 38.589901, "name": "evens", "examples": ["(evens []) -> []", "(evens [7 6 5 5 2]) -> [6 2]", "(evens [2 0 8 3]) -> [2 0 8]", "(evens [9 6 0 1 3]) -> [6 0]", "(evens [7 3]) -> []", "(evens [2 4 1 4 6]) -> [2 4 4 6]", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 28.938327, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [4 3 2 8]) -> [4 2 8]", "(evens [1 6]) -> [6]", "(evens [8]) -> [8]", "(evens [1 4 1 8]) -> [4 8]", "(evens [0 4]) -> [0 4]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 36.142092, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [1 3]) -> []", "(evens [3 2 3 6 4]) -> [2 6 4]", "(evens [9 7 3 9]) -> []", "(evens [0 8 1 8 4]) -> [0 8 8 4]", "(evens [2 6]) -> [2 6]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 30.95161, "name": "evens", "examples": ["(evens []) -> []", "(evens [3 5]) -> []", "(evens [1 6]) -> [6]", "(evens [9 3 3 3 8]) -> [8]", "(evens [1]) -> []", "(evens []) -> []", "(evens [5 0]) -> [0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 0.228721, "name": "evens", "examples": ["(evens []) -> []", "(evens [4 4 0 2 7]) -> [4 4 0 2]", "(evens []) -> []", "(evens [4]) -> [4]", "(evens []) -> []", "(evens []) -> []", "(evens [8 0 6]) -> [8 0 6]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (<= c (car b))))) _) _)"}
{"time": 43.295686, "name": "evens", "examples": ["(evens []) -> []", "(evens [4 3 6 1 4]) -> [4 6 4]", "(evens [5 7]) -> []", "(evens [4 2]) -> [4 2]", "(evens [5 8 2 8 9]) -> [8 2 8]", "(evens [4 1 4 6 0]) -> [4 4 6 0]", "(evens [8 4]) -> [8 4]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 31.011122, "name": "evens", "examples": ["(evens []) -> []", "(evens [9 6 6 5]) -> [6 6]", "(evens []) -> []", "(evens [9]) -> []", "(evens [6 7 6]) -> [6 6]", "(evens []) -> []", "(evens [5 5]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 31.507441, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [5]) -> []", "(evens [5 4 1 8]) -> [4 8]", "(evens [7 1]) -> []", "(evens [8]) -> [8]", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 39.976009, "name": "evens", "examples": ["(evens []) -> []", "(evens [0 1 3 1 1]) -> [0]", "(evens [9 4 2 6 1]) -> [4 2 6]", "(evens [8 9 9]) -> [8]", "(evens []) -> []", "(evens [2 3 9 8 6]) -> [2 8 6]", "(evens [3 1]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 32.150268, "name": "evens", "examples": ["(evens []) -> []", "(evens [2 9 3 5 0]) -> [2 0]", "(evens [9 6 5 2]) -> [6 2]", "(evens []) -> []", "(evens []) -> []", "(evens [8 2]) -> [8 2]", "(evens [3 0 7]) -> [0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 24.862533, "name": "evens", "examples": ["(evens []) -> []", "(evens [6 6 7]) -> [6 6]", "(evens [1 8 7 5]) -> [8]", "(evens [1 0 3]) -> [0]", "(evens [5 3 2 4 3]) -> [2 4]", "(evens [3]) -> []", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 10.884506, "name": "evens", "examples": ["(evens []) -> []", "(evens [6 2]) -> [6 2]", "(evens [6 0]) -> [6 0]", "(evens [3]) -> []", "(evens [6 9 4 7]) -> [6 4]", "(evens [0 3 5 0]) -> [0 0]", "(evens [5]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (foldl b (lambda (e d) (~ e)) (<= c (car b)))))) _) _)"}
{"time": 24.998813, "name": "evens", "examples": ["(evens []) -> []", "(evens [4 7 8]) -> [4 8]", "(evens [8 6 4 0 4]) -> [8 6 4 0 4]", "(evens []) -> []", "(evens [3]) -> []", "(evens [5 3 4 9 5]) -> [4]", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 30.150428, "name": "evens", "examples": ["(evens []) -> []", "(evens [7 9 8 7]) -> [8]", "(evens [3 5 0 6]) -> [0 6]", "(evens [6]) -> [6]", "(evens [8 5]) -> [8]", "(evens [3 7]) -> []", "(evens [6 1 3]) -> [6]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 25.636905, "name": "evens", "examples": ["(evens []) -> []", "(evens [2 1]) -> [2]", "(evens [1]) -> []", "(evens [9 7 8 7 4]) -> [8 4]", "(evens [5 2 8 3]) -> [2 8]", "(evens []) -> []", "(evens [8 4 5 9 7]) -> [8 4]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 27.748289, "name": "evens", "examples": ["(evens []) -> []", "(evens [0 2 4 1 1]) -> [0 2 4]", "(evens [8 9 4 7 9]) -> [8 4]", "(evens [6]) -> [6]", "(evens []) -> []", "(evens [5 7]) -> []", "(evens [9 8 3]) -> [8]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 0.00118, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [8]) -> [8]", "(evens [6]) -> [6]", "(evens [0 0]) -> [0 0]", "(evens [8 2 6 4]) -> [8 2 6 4]", "(evens [4 4]) -> [4 4]"], "solution": "(let evens (let a (lambda (b) b) _) _)"}
{"time": 37.273343, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [0 5 0 5]) -> [0 0]", "(evens [5 2]) -> [2]", "(evens []) -> []", "(evens [3 3 0 4 0]) -> [0 4 0]", "(evens [5 8 3]) -> [8]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 28.355398, "name": "evens", "examples": ["(evens []) -> []", "(evens [5 0 6 7 7]) -> [0 6]", "(evens [6 2 1 0 1]) -> [6 2 0]", "(evens [8 3]) -> [8]", "(evens [4 4 0 1 3]) -> [4 4 0]", "(evens [4 6 3 7 6]) -> [4 6 6]", "(evens [4]) -> [4]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 33.711263, "name": "evens", "examples": ["(evens []) -> []", "(evens [6 5 1 6 3]) -> [6 6]", "(evens []) -> []", "(evens [3 2 4]) -> [2 4]", "(evens [5 3 9 2]) -> [2]", "(evens [3 7 8 2 5]) -> [8 2]", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 34.894025, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [5 4 3]) -> [4]", "(evens [5 9 8 4 2]) -> [8 4 2]", "(evens []) -> []", "(evens []) -> []", "(evens [3 1 5 1 8]) -> [8]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 30.867607, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [8 5]) -> [8]", "(evens [6 4 8 8]) -> [6 4 8 8]", "(evens [7 2 5 5 9]) -> [2]", "(evens [8 8]) -> [8 8]", "(evens [7 1 9 8]) -> [8]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 30.225883, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [7 0]) -> [0]", "(evens [0 3 8 8 0]) -> [0 8 8 0]", "(evens []) -> []", "(evens [4 3 1 7]) -> [4]", "(evens [6]) -> [6]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 36.66636, "name": "evens", "examples": ["(evens []) -> []", "(evens [9 3 6 9]) -> [6]", "(evens [7 9]) -> []", "(evens [4 5 8 5]) -> [4 8]", "(evens [7 6 9]) -> [6]", "(evens []) -> []", "(evens [1 1]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 34.977662, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [0 8 3]) -> [0 8]", "(evens [6 3 3 1]) -> [6]", "(evens [8 3 0 0]) -> [8 0 0]", "(evens []) -> []", "(evens [9 5 1 3]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 28.4896, "name": "evens", "examples": ["(evens []) -> []", "(evens [1 1 6 9]) -> [6]", "(evens [3 5 3]) -> []", "(evens [2 4 8 9]) -> [2 4 8]", "(evens []) -> []", "(evens [9 4]) -> [4]", "(evens [9 0]) -> [0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 29.06855, "name": "evens", "examples": ["(evens []) -> []", "(evens [3 8 3]) -> [8]", "(evens [3]) -> []", "(evens [5 1]) -> []", "(evens [8 8 2 6]) -> [8 8 2 6]", "(evens [0 9 8]) -> [0 8]", "(evens [9 5 8]) -> [8]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 31.915838, "name": "evens", "examples": ["(evens []) -> []", "(evens [8 9 6]) -> [8 6]", "(evens []) -> []", "(evens [9 2 9 4]) -> [2 4]", "(evens [9 6]) -> [6]", "(evens [5 8 4]) -> [8 4]", "(evens [4 8]) -> [4 8]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 32.826839, "name": "evens", "examples": ["(evens []) -> []", "(evens [8 6 0 7]) -> [8 6 0]", "(evens [8 0 4]) -> [8 0 4]", "(evens [8 1]) -> [8]", "(evens []) -> []", "(evens [4 3 0]) -> [4 0]", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 28.73813, "name": "evens", "examples": ["(evens []) -> []", "(evens [8]) -> [8]", "(evens [5 1]) -> []", "(evens [7]) -> []", "(evens [1 8 5 0]) -> [8 0]", "(evens []) -> []", "(evens [8 4]) -> [8 4]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 25.521525, "name": "evens", "examples": ["(evens []) -> []", "(evens [7 1]) -> []", "(evens [6 7 6 5 7]) -> [6 6]", "(evens [3 2 8]) -> [2 8]", "(evens []) -> []", "(evens [4]) -> [4]", "(evens [2 5 7 7]) -> [2]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 30.446622, "name": "evens", "examples": ["(evens []) -> []", "(evens [3 2 1]) -> [2]", "(evens []) -> []", "(evens []) -> []", "(evens []) -> []", "(evens [0 7 3 9]) -> [0]", "(evens [1]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 26.631866, "name": "evens", "examples": ["(evens []) -> []", "(evens [0]) -> [0]", "(evens [5 8]) -> [8]", "(evens [6 2]) -> [6 2]", "(evens [9 1 7 0 9]) -> [0]", "(evens [4]) -> [4]", "(evens [9 7 9 8 2]) -> [8 2]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 21.485602, "name": "evens", "examples": ["(evens []) -> []", "(evens [7 7]) -> []", "(evens [6]) -> [6]", "(evens [2 1]) -> [2]", "(evens [2 5 7 5]) -> [2]", "(evens []) -> []", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 7.037419, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [7]) -> []", "(evens []) -> []", "(evens [8 9 7]) -> [8]", "(evens [3]) -> []", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (foldl b (lambda (d c) (filter b (lambda (e) (= c (- e 1))))) [])) _) _)"}
{"time": 31.368092, "name": "evens", "examples": ["(evens []) -> []", "(evens [5 3 1]) -> []", "(evens [5 2 3 8 0]) -> [2 8 0]", "(evens [3]) -> []", "(evens [2 1 2]) -> [2 2]", "(evens [9 4 5 2]) -> [4 2]", "(evens [9 6]) -> [6]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 0.135042, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [5 1 6 8]) -> [6 8]", "(evens [7]) -> []", "(evens []) -> []", "(evens [3]) -> []", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (< (car b) c)))) _) _)"}
{"time": 31.628577, "name": "evens", "examples": ["(evens []) -> []", "(evens [3 5 6 5]) -> [6]", "(evens [8 0]) -> [8 0]", "(evens [1 6 3 1 4]) -> [6 4]", "(evens [5]) -> []", "(evens [1]) -> []", "(evens [4 1 1 9]) -> [4]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 23.270002, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [6]) -> [6]", "(evens [5 6]) -> [6]", "(evens [4 0 4 5]) -> [4 0 4]", "(evens [3 5 1 3]) -> []", "(evens [4 0 2]) -> [4 0 2]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 29.52007, "name": "evens", "examples": ["(evens []) -> []", "(evens [9 0 1]) -> [0]", "(evens [6 9 9 2]) -> [6 2]", "(evens [5]) -> []", "(evens [8]) -> [8]", "(evens [8 7 9 7 9]) -> [8]", "(evens [3]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 31.144343, "name": "evens", "examples": ["(evens []) -> []", "(evens [1 2 1 5]) -> [2]", "(evens [8 2 1 1]) -> [8 2]", "(evens [0 5 3 3]) -> [0]", "(evens []) -> []", "(evens [7 8]) -> [8]", "(evens [6 1]) -> [6]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 35.836007, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [8 5 0 5]) -> [8 0]", "(evens [1 9 8 8]) -> [8 8]", "(evens [6 3 1 6]) -> [6 6]", "(evens []) -> []", "(evens [6 5 4 1 0]) -> [6 4 0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 29.748767, "name": "evens", "examples": ["(evens []) -> []", "(evens [2 5 6]) -> [2 6]", "(evens []) -> []", "(evens []) -> []", "(evens [3]) -> []", "(evens [5]) -> []", "(evens [5 8 4]) -> [8 4]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 32.781879, "name": "evens", "examples": ["(evens []) -> []", "(evens [2 3 0 4 6]) -> [2 0 4 6]", "(evens [3 3 5 1]) -> []", "(evens [4]) -> [4]", "(evens []) -> []", "(evens [3 3 6 0]) -> [6 0]", "(evens [0 6]) -> [0 6]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 27.150133, "name": "evens", "examples": ["(evens []) -> []", "(evens [1 5 9 6]) -> [6]", "(evens [8 3 8 1 6]) -> [8 8 6]", "(evens [0]) -> [0]", "(evens []) -> []", "(evens [0 0 7 5 7]) -> [0 0]", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 39.335952, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [5 2 5 9 7]) -> [2]", "(evens []) -> []", "(evens [1 5 7 3 6]) -> [6]", "(evens [1 5 5]) -> []", "(evens [9 0 3 3 2]) -> [0 2]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 26.432723, "name": "evens", "examples": ["(evens []) -> []", "(evens [3 6]) -> [6]", "(evens [4]) -> [4]", "(evens [3 9 3]) -> []", "(evens []) -> []", "(evens []) -> []", "(evens [4]) -> [4]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 28.85429, "name": "evens", "examples": ["(evens []) -> []", "(evens [1 2]) -> [2]", "(evens [1 8 5 0]) -> [8 0]", "(evens [6 2 4 7]) -> [6 2 4]", "(evens [1 0]) -> [0]", "(evens [8 8]) -> [8 8]", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 29.069337, "name": "evens", "examples": ["(evens []) -> []", "(evens [1 6 8 9 1]) -> [6 8]", "(evens [1]) -> []", "(evens [3 6 7 8 2]) -> [6 8 2]", "(evens [9 5 2]) -> [2]", "(evens [2 4 0]) -> [2 4 0]", "(evens [9 0 1]) -> [0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 25.069636, "name": "evens", "examples": ["(evens []) -> []", "(evens [8]) -> [8]", "(evens [8 8]) -> [8 8]", "(evens []) -> []", "(evens [8 5]) -> [8]", "(evens [5]) -> []", "(evens [1 7 1 9 7]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 30.434973, "name": "evens", "examples": ["(evens []) -> []", "(evens [9 8]) -> [8]", "(evens []) -> []", "(evens []) -> []", "(evens [3 1 0]) -> [0]", "(evens [7 3 1 9]) -> []", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 25.496155, "name": "evens", "examples": ["(evens []) -> []", "(evens [5 9]) -> []", "(evens [2]) -> [2]", "(evens [5]) -> []", "(evens [0 3 6]) -> [0 6]", "(evens [2 3]) -> [2]", "(evens [5]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 4.014491, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [5]) -> []", "(evens [1 4 3]) -> [4]", "(evens [1 8 1 3]) -> [8]", "(evens [2 1 9 9]) -> [2]", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (foldl b (lambda (d c) (filter b (lambda (e) (!= 0 (% c e))))) [])) _) _)"}
{"time": 28.083827, "name": "evens", "examples": ["(evens []) -> []", "(evens [6 2]) -> [6 2]", "(evens []) -> []", "(evens []) -> []", "(evens [7 4]) -> [4]", "(evens [2 9]) -> [2]", "(evens [8 4 1 5]) -> [8 4]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 22.086854, "name": "evens", "examples": ["(evens []) -> []", "(evens [6 9]) -> [6]", "(evens [2 9 2 1 2]) -> [2 2 2]", "(evens [5 8]) -> [8]", "(evens [6 3]) -> [6]", "(evens [7 8]) -> [8]", "(evens [6]) -> [6]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 33.196449, "name": "evens", "examples": ["(evens []) -> []", "(evens [0 9 8 9 3]) -> [0 8]", "(evens [3]) -> []", "(evens [9 9 6 9]) -> [6]", "(evens [2 8 0]) -> [2 8 0]", "(evens [2]) -> [2]", "(evens []) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 32.124803, "name": "evens", "examples": ["(evens []) -> []", "(evens [9 5 7]) -> []", "(evens [5 6 0 4 9]) -> [6 0 4]", "(evens [5 3]) -> []", "(evens [6 0]) -> [6 0]", "(evens [2]) -> [2]", "(evens [5 1 8 1 3]) -> [8]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 31.097254, "name": "evens", "examples": ["(evens []) -> []", "(evens [9 9 2 1]) -> [2]", "(evens [4]) -> [4]", "(evens [8 1]) -> [8]", "(evens [9 5 5]) -> []", "(evens [8 3 0 0 6]) -> [8 0 0 6]", "(evens [8 9 8 9 9]) -> [8 8]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 34.814374, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [6 6 7 3]) -> [6 6]", "(evens [1 6 9 3 8]) -> [6 8]", "(evens []) -> []", "(evens [5 9]) -> []", "(evens [6 0 1 5]) -> [6 0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 27.502037, "name": "evens", "examples": ["(evens []) -> []", "(evens [9]) -> []", "(evens [5 3]) -> []", "(evens [7 0 3]) -> [0]", "(evens [3 3 7]) -> []", "(evens [0 8 5]) -> [0 8]", "(evens [6 0 1 5]) -> [6 0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 37.909667, "name": "evens", "examples": ["(evens []) -> []", "(evens [5 9 9]) -> []", "(evens [0 4 2 6]) -> [0 4 2 6]", "(evens [7 3 9 3]) -> []", "(evens [4 3 1 8]) -> [4 8]", "(evens [7 0 9 0 8]) -> [0 0 8]", "(evens [2 8 0 4 0]) -> [2 8 0 4 0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 35.317569, "name": "evens", "examples": ["(evens []) -> []", "(evens [4 5 9 9 7]) -> [4]", "(evens [3]) -> []", "(evens [6 5 4]) -> [6 4]", "(evens [4]) -> [4]", "(evens [1 2 2 3]) -> [2 2]", "(evens [2 9 5]) -> [2]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 30.009927, "name": "evens", "examples": ["(evens []) -> []", "(evens [0 7 3 4]) -> [0 4]", "(evens [2]) -> [2]", "(evens [5 9 8 8 6]) -> [8 8 6]", "(evens [1 8 9]) -> [8]", "(evens [5 1 3 7]) -> []", "(evens [5]) -> []"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 23.723717, "name": "evens", "examples": ["(evens []) -> []", "(evens [5 0]) -> [0]", "(evens [6 9 8]) -> [6 8]", "(evens []) -> []", "(evens [8 3 6 4 2]) -> [8 6 4 2]", "(evens []) -> []", "(evens [0 8 7 6 3]) -> [0 8 6]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 22.009169, "name": "evens", "examples": ["(evens []) -> []", "(evens [6 1]) -> [6]", "(evens [4 6 6 3]) -> [4 6 6]", "(evens [9 9 7]) -> []", "(evens [3 4]) -> [4]", "(evens [5 7 9 6 3]) -> [6]", "(evens [2 6]) -> [2 6]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 19.055993, "name": "evens", "examples": ["(evens []) -> []", "(evens [9 8 0]) -> [8 0]", "(evens []) -> []", "(evens [8 4]) -> [8 4]", "(evens [2 3 8 0]) -> [2 8 0]", "(evens [1 7 8 9]) -> [8]", "(evens [2]) -> [2]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 27.197556, "name": "evens", "examples": ["(evens []) -> []", "(evens [3]) -> []", "(evens []) -> []", "(evens [1 7]) -> []", "(evens []) -> []", "(evens [3 6 5 3 6]) -> [6 6]", "(evens [6 6 9 1 0]) -> [6 6 0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 21.56323, "name": "evens", "examples": ["(evens []) -> []", "(evens [9]) -> []", "(evens [8 1 2 5]) -> [8 2]", "(evens [5 3]) -> []", "(evens [8 2 6 7]) -> [8 2 6]", "(evens [0]) -> [0]", "(evens [2 1 6]) -> [2 6]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 25.321692, "name": "evens", "examples": ["(evens []) -> []", "(evens [3 9 5 6 1]) -> [6]", "(evens [9 2 7 9]) -> [2]", "(evens [3 4 4]) -> [4 4]", "(evens [8 0]) -> [8 0]", "(evens []) -> []", "(evens [0 7 1]) -> [0]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 32.023698, "name": "evens", "examples": ["(evens []) -> []", "(evens [8 4 8 6 9]) -> [8 4 8 6]", "(evens []) -> []", "(evens []) -> []", "(evens [4 4 9 1]) -> [4 4]", "(evens [2 5 5 9 9]) -> [2]", "(evens [3 4 6]) -> [4 6]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 31.241705, "name": "evens", "examples": ["(evens []) -> []", "(evens []) -> []", "(evens [3 9 3 7]) -> []", "(evens [4 6]) -> [4 6]", "(evens [9 9 7 4 7]) -> [4]", "(evens []) -> []", "(evens [5 8 6 2 7]) -> [8 6 2]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 25.860874, "name": "evens", "examples": ["(evens []) -> []", "(evens [0 2 4 3]) -> [0 2 4]", "(evens [4 3 0 9 4]) -> [4 0 4]", "(evens [5 6]) -> [6]", "(evens []) -> []", "(evens [1 8 5]) -> [8]", "(evens [4 6 1 9]) -> [4 6]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
{"time": 18.371504, "name": "evens", "examples": ["(evens []) -> []", "(evens [8 2 0 7]) -> [8 2 0]", "(evens [5]) -> []", "(evens [2 8]) -> [2 8]", "(evens [5 3 4 1 4]) -> [4 4]", "(evens []) -> []", "(evens [4]) -> [4]"], "solution": "(let evens (let a (lambda (b) (filter b (lambda (c) (= 0 (% c (+ 1 1)))))) _) _)"}
