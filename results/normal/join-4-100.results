{"examples": ["(join []) -> []", "(join []) -> []", "(join []) -> []"], "name": "join", "solution": "(let join (let a (lambda (b) []) _) _)", "time": 0.000392}
{"examples": ["(join []) -> []", "(join [[6 9 0] []]) -> [6 9 0]", "(join [[] [0 0]]) -> [0 0]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldl d (lambda (f e) d) c)) [])) _) _)", "time": 0.179998}
{"examples": ["(join []) -> []", "(join [[3 6] [5] [5 3 3 9 0]]) -> [3 6 5 5 3 3 9 0]", "(join [[3 5 6 8 6] [2 4]]) -> [3 5 6 8 6 2 4]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.947466}
{"examples": ["(join []) -> []", "(join [[7] [3 1 8 6 8] [3 7] [] [4 9 5 2]]) -> [7 3 1 8 6 8 3 7 4 9 5 2]", "(join [[] [4]]) -> [4]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.976913}
{"examples": ["(join []) -> []", "(join [[] [8]]) -> [8]", "(join [[] [] [] [8] [8 1 3 1]]) -> [8 8 1 3 1]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldl d (lambda (f e) (cons e c)) c)) [])) _) _)", "time": 0.95565}
{"examples": ["(join []) -> []", "(join []) -> []", "(join [[0] [] [5 2 2] [3] [3 3 2 9]]) -> [0 5 2 2 3 3 3 2 9]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.991995}
{"examples": ["(join []) -> []", "(join [[] [1]]) -> [1]", "(join [[3 6 8 3 1] [1 2 4] [6 5 9] [7 4 1]]) -> [3 6 8 3 1 1 2 4 6 5 9 7 4 1]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 1.077118}
{"examples": ["(join []) -> []", "(join [[9 1 4] [9 0] [2 1 2 6 5] [2 2 8 9]]) -> [9 1 4 9 0 2 1 2 6 5 2 2 8 9]", "(join [[7] [4 3 2] [8 9 3 5 1] [9 4] [5]]) -> [7 4 3 2 8 9 3 5 1 9 4 5]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 1.076195}
{"examples": ["(join []) -> []", "(join [[2] [1 5]]) -> [2 1 5]", "(join [[5 0] [6 3 5 9 7] [6 0] [3 4 0 0] [7 5]]) -> [5 0 6 3 5 9 7 6 0 3 4 0 0 7 5]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.95492}
{"examples": ["(join []) -> []", "(join [[8 2] [4 8 0] [9] [7]]) -> [8 2 4 8 0 9 7]", "(join [[4 0 4 3] [5 8 5 6 6]]) -> [4 0 4 3 5 8 5 6 6]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 1.080453}
{"examples": ["(join []) -> []", "(join [[2 6] [0 3] [9 4] [6 9]]) -> [2 6 0 3 9 4 6 9]", "(join [[8 7 0 5] [2 3 8] [0 7 8 5] [7 0 0 3] [9]]) -> [8 7 0 5 2 3 8 0 7 8 5 7 0 0 3 9]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 1.008656}
{"examples": ["(join []) -> []", "(join [[5] []]) -> [5]", "(join [[6 7 3] [0 5 8] [6 6 5 7]]) -> [6 7 3 0 5 8 6 6 5 7]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 1.110302}
{"examples": ["(join []) -> []", "(join [[6 7 3] [1 6 4 2] []]) -> [6 7 3 1 6 4 2]", "(join [[1 9] [0]]) -> [1 9 0]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 1.034601}
{"examples": ["(join []) -> []", "(join [[9] [1] [6 0 7 4] [3 2 2 8]]) -> [9 1 6 0 7 4 3 2 2 8]", "(join [[1 0 3 5 0] [5 5 7 1 3] [2]]) -> [1 0 3 5 0 5 5 7 1 3 2]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.999486}
{"examples": ["(join []) -> []", "(join [[7] [] [0]]) -> [7 0]", "(join [[] [2] [4 8 7 1] [5]]) -> [2 4 8 7 1 5]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 1.040471}
{"examples": ["(join []) -> []", "(join []) -> []", "(join []) -> []"], "name": "join", "solution": "(let join (let a (lambda (b) []) _) _)", "time": 0.000365}
{"examples": ["(join []) -> []", "(join [[9 4 5 3 4] [9 2 8 4] [5 5 4 6]]) -> [9 4 5 3 4 9 2 8 4 5 5 4 6]", "(join [[0 2]]) -> [0 2]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldr b (lambda (d c) (foldr c (lambda (f e) (cons e f)) d)) [])) _) _)", "time": 1.203552}
{"examples": ["(join []) -> []", "(join [[2 6 2 3] [8 7 0 7] [] []]) -> [2 6 2 3 8 7 0 7]", "(join [[4 0 4 2 9] [1 7 9 4 3]]) -> [4 0 4 2 9 1 7 9 4 3]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.861428}
{"examples": ["(join []) -> []", "(join [[6 5 4 8 7] [5 4 9 0 0] [5 7 9 3]]) -> [6 5 4 8 7 5 4 9 0 0 5 7 9 3]", "(join []) -> []"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.806244}
{"examples": ["(join []) -> []", "(join [[9 0 4 1 1] [0]]) -> [9 0 4 1 1 0]", "(join [[2 9 7 5] [3 3 5 8] [7 9 4 9 9]]) -> [2 9 7 5 3 3 5 8 7 9 4 9 9]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.800569}
{"examples": ["(join []) -> []", "(join [[7 1 0 6] [4 2 0 5 9] [0 5]]) -> [7 1 0 6 4 2 0 5 9 0 5]", "(join [[4] [] [0 5 7 8]]) -> [4 0 5 7 8]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.842447}
{"examples": ["(join []) -> []", "(join []) -> []", "(join [[9 5 4] [8 7] [3 2 2] [2 9]]) -> [9 5 4 8 7 3 2 2 2 9]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 1.003842}
{"examples": ["(join []) -> []", "(join [[9 8 4 9] [7 1 6] [8] [] []]) -> [9 8 4 9 7 1 6 8]", "(join [[] [5 3 2 8 3] [] [4 4] [2 7 5 9]]) -> [5 3 2 8 3 4 4 2 7 5 9]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 1.016174}
{"examples": ["(join []) -> []", "(join [[9 8 3 9]]) -> [9 8 3 9]", "(join [[] [5 5 7 4 5] [7] [4] [5 1]]) -> [5 5 7 4 5 7 4 5 1]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldr b (lambda (d c) (foldr c (lambda (f e) (cons e f)) d)) [])) _) _)", "time": 0.943347}
{"examples": ["(join []) -> []", "(join []) -> []", "(join [[2 7] [2] [2 2] [3 9]]) -> [2 7 2 2 2 3 9]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.882125}
{"examples": ["(join []) -> []", "(join [[] [4 8 3 4 8] [7] []]) -> [4 8 3 4 8 7]", "(join [[9 7 0] [] [9 5] [8 5 2 8]]) -> [9 7 0 9 5 8 5 2 8]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.998504}
{"examples": ["(join []) -> []", "(join [[2 7 2 7] [] [9 9 0 1 7] [] [1 9 2 7]]) -> [2 7 2 7 9 9 0 1 7 1 9 2 7]", "(join [[0 8] [] [0 7 2 6 1] [] [4 0]]) -> [0 8 0 7 2 6 1 4 0]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldl d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 1.000523}
{"examples": ["(join []) -> []", "(join [[1 3 7 1 2] [0 0 2 8 5] [0 1 8 7] [1 0]]) -> [1 3 7 1 2 0 0 2 8 5 0 1 8 7 1 0]", "(join []) -> []"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.994485}
{"examples": ["(join []) -> []", "(join [[5 0 4] [6 7 2] []]) -> [5 0 4 6 7 2]", "(join [[8]]) -> [8]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldr b (lambda (d c) (foldr c (lambda (f e) (cons e f)) d)) [])) _) _)", "time": 0.897331}
{"examples": ["(join []) -> []", "(join [[0 6 3 5] [1 5 6] [7 1 0 2 5]]) -> [0 6 3 5 1 5 6 7 1 0 2 5]", "(join []) -> []"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.754365}
{"examples": ["(join []) -> []", "(join [[3] [9 0]]) -> [3 9 0]", "(join [[8 7 2 0 2]]) -> [8 7 2 0 2]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldr b (lambda (d c) (foldr c (lambda (f e) (cons e f)) d)) [])) _) _)", "time": 1.081784}
{"examples": ["(join []) -> []", "(join [[6 6 0 3 8] [7] [] [9 3 7 5]]) -> [6 6 0 3 8 7 9 3 7 5]", "(join [[] [5 0 3 3 8] [8 1 5 6 8] [6 3] [9 6 1 7 2]]) -> [5 0 3 3 8 8 1 5 6 8 6 3 9 6 1 7 2]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 1.035746}
{"examples": ["(join []) -> []", "(join [[5 2]]) -> [5 2]", "(join [[2 3 1] [1 8]]) -> [2 3 1 1 8]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldr b (lambda (d c) (foldr c (lambda (f e) (cons e f)) d)) [])) _) _)", "time": 1.031293}
{"examples": ["(join []) -> []", "(join [[2]]) -> [2]", "(join [[2 2] []]) -> [2 2]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (car b)) [])) _) _)", "time": 0.02202}
{"examples": ["(join []) -> []", "(join [[2 8 5 1 9] [0 7 4] []]) -> [2 8 5 1 9 0 7 4]", "(join [[0 3 3] [0 1 3 7 7] [7 7] [8 7 9 3 9]]) -> [0 3 3 0 1 3 7 7 7 7 8 7 9 3 9]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.627596}
{"examples": ["(join []) -> []", "(join [[3 5 8] [5 9 9 3 9] [3 5 2 6]]) -> [3 5 8 5 9 9 3 9 3 5 2 6]", "(join [[5 7 2] [6 2 7] [] [3] [2 6 1]]) -> [5 7 2 6 2 7 3 2 6 1]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.682799}
{"examples": ["(join []) -> []", "(join [[2]]) -> [2]", "(join [[2 1] [4] [8 0 9 4]]) -> [2 1 4 8 0 9 4]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldr b (lambda (d c) (foldr c (lambda (f e) (cons e f)) d)) [])) _) _)", "time": 0.758167}
{"examples": ["(join []) -> []", "(join [[5 7 3] [1 1]]) -> [5 7 3 1 1]", "(join [[0 3 4 3] [7 8 5 0] [2] [7] [8 4 6 7 2]]) -> [0 3 4 3 7 8 5 0 2 7 8 4 6 7 2]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.904228}
{"examples": ["(join []) -> []", "(join [[7] [2 2 8 7] [5 7 5 4] [8 6 1 0 9]]) -> [7 2 2 8 7 5 7 5 4 8 6 1 0 9]", "(join [[6 0 5 1 7] [5 4] [0]]) -> [6 0 5 1 7 5 4 0]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.960017}
{"examples": ["(join []) -> []", "(join [[0 7] [8 6 8] [7 3 1 1]]) -> [0 7 8 6 8 7 3 1 1]", "(join [[] [0] [6 0] [7 0 1 3 9] []]) -> [0 6 0 7 0 1 3 9]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.701997}
{"examples": ["(join []) -> []", "(join [[9 1] [2 1 4 9]]) -> [9 1 2 1 4 9]", "(join [[8 5 8]]) -> [8 5 8]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldr b (lambda (d c) (foldr c (lambda (f e) (cons e f)) d)) [])) _) _)", "time": 0.837115}
{"examples": ["(join []) -> []", "(join [[1 3] [4]]) -> [1 3 4]", "(join [[1 2 3 6] [2 3 9 0] [4]]) -> [1 2 3 6 2 3 9 0 4]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.671447}
{"examples": ["(join []) -> []", "(join [[6 6] [] [6 0]]) -> [6 6 6 0]", "(join [[] [6] [2 3] [8 4 9 2]]) -> [6 2 3 8 4 9 2]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.950568}
{"examples": ["(join []) -> []", "(join [[5 3 7 5 1] [] [6 5 7 1] [5 9] []]) -> [5 3 7 5 1 6 5 7 1 5 9]", "(join [[2] [1 0 5] [3 1 1 9 1] [2 5 3 0]]) -> [2 1 0 5 3 1 1 9 1 2 5 3 0]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.936501}
{"examples": ["(join []) -> []", "(join [[0 8 8 1 8] [5] [0 6 0] [0]]) -> [0 8 8 1 8 5 0 6 0 0]", "(join []) -> []"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.949637}
{"examples": ["(join []) -> []", "(join []) -> []", "(join [[9 9] [4 0 5] [3]]) -> [9 9 4 0 5 3]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.77856}
{"examples": ["(join []) -> []", "(join [[]]) -> []", "(join [[9 7]]) -> [9 7]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) c) [])) _) _)", "time": 0.020967}
{"examples": ["(join []) -> []", "(join [[8 1 0 2 6]]) -> [8 1 0 2 6]", "(join [[3 4 7] [6 4 0 7 6] [5 0 2] [5 4 8 7 5]]) -> [3 4 7 6 4 0 7 6 5 0 2 5 4 8 7 5]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldr b (lambda (d c) (foldr c (lambda (f e) (cons e f)) d)) [])) _) _)", "time": 1.003695}
{"examples": ["(join []) -> []", "(join [[7] [1 5] [1 0]]) -> [7 1 5 1 0]", "(join []) -> []"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.935353}
{"examples": ["(join []) -> []", "(join [[5 0 0]]) -> [5 0 0]", "(join []) -> []"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) c) [])) _) _)", "time": 0.023832}
{"examples": ["(join []) -> []", "(join [[0 5] [1 6] [1 5] []]) -> [0 5 1 6 1 5]", "(join [[9] [6 9 5 0] [] [7 0 0]]) -> [9 6 9 5 0 7 0 0]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.822275}
{"examples": ["(join []) -> []", "(join []) -> []", "(join [[5 1 7 0 5] [2 4] [2] [1 6]]) -> [5 1 7 0 5 2 4 2 1 6]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.798274}
{"examples": ["(join []) -> []", "(join [[0 3 7 1 4] [9 4] [] [7 4 3] [7 6 2]]) -> [0 3 7 1 4 9 4 7 4 3 7 6 2]", "(join [[] []]) -> []"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.761039}
{"examples": ["(join []) -> []", "(join [[] []]) -> []", "(join [[0 8 4 2] [6] [0 3 7 8 8] [3] [7 9 2]]) -> [0 8 4 2 6 0 3 7 8 8 3 7 9 2]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.783277}
{"examples": ["(join []) -> []", "(join [[8 1 4 0] [9 2 8 6] [6 4]]) -> [8 1 4 0 9 2 8 6 6 4]", "(join [[8 4] []]) -> [8 4]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.746309}
{"examples": ["(join []) -> []", "(join [[6] [9 2 3 7] [2 3] [4 3 2 0]]) -> [6 9 2 3 7 2 3 4 3 2 0]", "(join [[2 9 4 9] [2 4 0 5 7] [1 2 9]]) -> [2 9 4 9 2 4 0 5 7 1 2 9]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.78601}
{"examples": ["(join []) -> []", "(join [[1 5 0 8] [2 0 8 8]]) -> [1 5 0 8 2 0 8 8]", "(join [[4 9] [9 9 4] [9]]) -> [4 9 9 9 4 9]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.776719}
{"examples": ["(join []) -> []", "(join [[7] [5 6] [6 9 3 6 5] []]) -> [7 5 6 6 9 3 6 5]", "(join [[4] [5 6 3 0] [4 3 5 6] [4 9 0 7] []]) -> [4 5 6 3 0 4 3 5 6 4 9 0 7]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.821762}
{"examples": ["(join []) -> []", "(join [[5] [5 5] [0 0 1 9] [7] [1 0]]) -> [5 5 5 0 0 1 9 7 1 0]", "(join []) -> []"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.803508}
{"examples": ["(join []) -> []", "(join [[6 4] [5 7] [2 4 1 7 6] [1] [7]]) -> [6 4 5 7 2 4 1 7 6 1 7]", "(join [[1] []]) -> [1]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.877374}
{"examples": ["(join []) -> []", "(join [[9 4] [6 6] []]) -> [9 4 6 6]", "(join [[7 1 4] [7 0] [] []]) -> [7 1 4 7 0]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.851565}
{"examples": ["(join []) -> []", "(join [[] [6 6] [] [4] [3]]) -> [6 6 4 3]", "(join [[5 6]]) -> [5 6]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldr b (lambda (d c) (foldr c (lambda (f e) (cons e f)) d)) [])) _) _)", "time": 1.053479}
{"examples": ["(join []) -> []", "(join [[0] [5] [5] [0]]) -> [0 5 5 0]", "(join [[9 8] [4 6 8 3 4] [1 8]]) -> [9 8 4 6 8 3 4 1 8]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.708039}
{"examples": ["(join []) -> []", "(join [[]]) -> []", "(join []) -> []"], "name": "join", "solution": "(let join (let a (lambda (b) []) _) _)", "time": 0.001223}
{"examples": ["(join []) -> []", "(join [[8 3 4]]) -> [8 3 4]", "(join [[7 6 5 6] [2]]) -> [7 6 5 6 2]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldr b (lambda (d c) (foldr c (lambda (f e) (cons e f)) d)) [])) _) _)", "time": 0.908103}
{"examples": ["(join []) -> []", "(join [[8 6 9 2] [0 9 0] [0 4 0] [] [4]]) -> [8 6 9 2 0 9 0 0 4 0 4]", "(join [[3 6 1] [7 4] [8 3 7 6] [7 1]]) -> [3 6 1 7 4 8 3 7 6 7 1]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 1.027588}
{"examples": ["(join []) -> []", "(join [[7] [1]]) -> [7 1]", "(join [[4 7 1] [7 9 3 4] [7 7] [1 2]]) -> [4 7 1 7 9 3 4 7 7 1 2]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.636034}
{"examples": ["(join []) -> []", "(join [[0] [7] [0] []]) -> [0 7 0]", "(join [[8 0 5 2 8] [9 2] [7 8 3 8 0] [5 4 2] []]) -> [8 0 5 2 8 9 2 7 8 3 8 0 5 4 2]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.87828}
{"examples": ["(join []) -> []", "(join [[1 1] [9 5 6 8 2] [7 7 1 5 7] [2 6] [2 6 8]]) -> [1 1 9 5 6 8 2 7 7 1 5 7 2 6 2 6 8]", "(join [[7 7 6]]) -> [7 7 6]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldr b (lambda (d c) (foldr c (lambda (f e) (cons e f)) d)) [])) _) _)", "time": 0.84403}
{"examples": ["(join []) -> []", "(join [[4 4] [4 1 8 2 1] [4]]) -> [4 4 4 1 8 2 1 4]", "(join [[7 7] [4 6 7 4 0] [8 6 8 7 6] [8 0 9 0]]) -> [7 7 4 6 7 4 0 8 6 8 7 6 8 0 9 0]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.892129}
{"examples": ["(join []) -> []", "(join [[] [1]]) -> [1]", "(join [[] [5 7 3] [0 6 1 0] [9 2] [2 3 4 4]]) -> [5 7 3 0 6 1 0 9 2 2 3 4 4]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.908415}
{"examples": ["(join []) -> []", "(join [[0] [4 8] [1] [] [6 4 9 9]]) -> [0 4 8 1 6 4 9 9]", "(join [[3 2 7] [5 0 2 2] [8 8 3] [8 1] [9 3]]) -> [3 2 7 5 0 2 2 8 8 3 8 1 9 3]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.83227}
{"examples": ["(join []) -> []", "(join [[9 8] [8 9 2 4 0]]) -> [9 8 8 9 2 4 0]", "(join []) -> []"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.842835}
{"examples": ["(join []) -> []", "(join [[8 2 5]]) -> [8 2 5]", "(join [[7 0 5 2 0] [9 4] [] [4 5 7] [6]]) -> [7 0 5 2 0 9 4 4 5 7 6]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldr b (lambda (d c) (foldr c (lambda (f e) (cons e f)) d)) [])) _) _)", "time": 0.933667}
{"examples": ["(join []) -> []", "(join []) -> []", "(join [[5 5 8 7] [5 9 6 8 1] [9 8 5 0] [1] [2]]) -> [5 5 8 7 5 9 6 8 1 9 8 5 0 1 2]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.951937}
{"examples": ["(join []) -> []", "(join [[5 4] [2 2]]) -> [5 4 2 2]", "(join [[1 1 4 3] [4 2 4] [5 0]]) -> [1 1 4 3 4 2 4 5 0]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.764454}
{"examples": ["(join []) -> []", "(join [[] [1 5]]) -> [1 5]", "(join [[8] [6] []]) -> [8 6]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 1.004265}
{"examples": ["(join []) -> []", "(join [[4 5 6 5] []]) -> [4 5 6 5]", "(join [[2 0]]) -> [2 0]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (car b)) [])) _) _)", "time": 0.024537}
{"examples": ["(join []) -> []", "(join [[4 5 1 1 6] [7 5 0 4] [1 8 4 4 6] [1 9 1 3] [0 9 4 6]]) -> [4 5 1 1 6 7 5 0 4 1 8 4 4 6 1 9 1 3 0 9 4 6]", "(join [[] [] [7 0 6 5]]) -> [7 0 6 5]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.627066}
{"examples": ["(join []) -> []", "(join [[] [] [8 7] [4 3]]) -> [8 7 4 3]", "(join [[] [7]]) -> [7]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.538176}
{"examples": ["(join []) -> []", "(join [[] [5 5]]) -> [5 5]", "(join []) -> []"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) c) [])) _) _)", "time": 0.018989}
{"examples": ["(join []) -> []", "(join [[9 9] [8 1 7] [7 8 6 7] []]) -> [9 9 8 1 7 7 8 6 7]", "(join []) -> []"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.976894}
{"examples": ["(join []) -> []", "(join [[4]]) -> [4]", "(join []) -> []"], "name": "join", "solution": "(let join (let a (lambda (b) (map b (lambda (c) (car c)))) _) _)", "time": 0.051791}
{"examples": ["(join []) -> []", "(join [[] [] [6 5 0 8 5] [7 9 3 2]]) -> [6 5 0 8 5 7 9 3 2]", "(join [[] [5] [6 6 0 8 6]]) -> [5 6 6 0 8 6]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 1.095063}
{"examples": ["(join []) -> []", "(join [[6 0 8 8] [3 3 4 3]]) -> [6 0 8 8 3 3 4 3]", "(join [[] [0] [6 7 5 5]]) -> [0 6 7 5 5]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.997004}
{"examples": ["(join []) -> []", "(join [[7 1] [7 3 8 7 7] [0 2 1 6] [2 2] []]) -> [7 1 7 3 8 7 7 0 2 1 6 2 2]", "(join [[7 4 3 3 2] [] [3] [3] [8 0 4 4 2]]) -> [7 4 3 3 2 3 3 8 0 4 4 2]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.584721}
{"examples": ["(join []) -> []", "(join [[3] [] []]) -> [3]", "(join [[2 2 1 6] [] [7 8 7 0] []]) -> [2 2 1 6 7 8 7 0]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.59497}
{"examples": ["(join []) -> []", "(join [[1 4 8 9 4] [1 4 8 8] [7 8 0] [3 3 4 4]]) -> [1 4 8 9 4 1 4 8 8 7 8 0 3 3 4 4]", "(join []) -> []"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 1.220909}
{"examples": ["(join []) -> []", "(join [[4 0 3 2 9] [5 2 7 0 7] [0 9 0 1] [3] [2 0 1]]) -> [4 0 3 2 9 5 2 7 0 7 0 9 0 1 3 2 0 1]", "(join [[] [0] [4 7]]) -> [0 4 7]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 1.190106}
{"examples": ["(join []) -> []", "(join [[2] [5 3] [4 3] [2 2 6 9] [1 1 1 2 4]]) -> [2 5 3 4 3 2 2 6 9 1 1 1 2 4]", "(join [[1 4 3] [5 4 3 6] [] [0 1]]) -> [1 4 3 5 4 3 6 0 1]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 1.148324}
{"examples": ["(join []) -> []", "(join [[6 2 1 7 8] [7 6 8 7 8] [] [7 8 1]]) -> [6 2 1 7 8 7 6 8 7 8 7 8 1]", "(join []) -> []"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 1.048298}
{"examples": ["(join []) -> []", "(join [[4 0] [6 7 2 0] [4]]) -> [4 0 6 7 2 0 4]", "(join [[3 3]]) -> [3 3]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldr b (lambda (d c) (foldr c (lambda (f e) (cons e f)) d)) [])) _) _)", "time": 0.578773}
{"examples": ["(join []) -> []", "(join [[] [6 6 6 6 5]]) -> [6 6 6 6 5]", "(join [[6 8 0] [] [8 7 6 7 2] [6 1 6] [6]]) -> [6 8 0 8 7 6 7 2 6 1 6 6]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.751995}
{"examples": ["(join []) -> []", "(join [[7 9 3 3]]) -> [7 9 3 3]", "(join [[7 4] [2]]) -> [7 4 2]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldr b (lambda (d c) (foldr c (lambda (f e) (cons e f)) d)) [])) _) _)", "time": 0.964632}
{"examples": ["(join []) -> []", "(join []) -> []", "(join [[8 8] [0 1] [7 9] [0]]) -> [8 8 0 1 7 9 0]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldr d (lambda (f e) (cons e f)) c)) [])) _) _)", "time": 0.57759}
{"examples": ["(join []) -> []", "(join [[3 7 9 9] [9 6 5]]) -> [3 7 9 9 9 6 5]", "(join [[]]) -> []"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldl c (lambda (f e) (foldr d (lambda (h g) (cons g h)) c)) [])) [])) _) _)", "time": 10.29681}
{"examples": ["(join []) -> []", "(join [[8 1 1 5 4] [5 3 3 9] [1]]) -> [8 1 1 5 4 5 3 3 9 1]", "(join [[]]) -> []"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldl c (lambda (f e) (foldr d (lambda (h g) (cons g h)) c)) [])) [])) _) _)", "time": 11.841342}
{"examples": ["(join []) -> []", "(join [[]]) -> []", "(join [[2 7 3 8] [6 4 1 7 1] [2] [2 4 0 0 6] [1 7 6 8]]) -> [2 7 3 8 6 4 1 7 1 2 2 4 0 0 6 1 7 6 8]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldl b (lambda (d c) (foldl c (lambda (f e) (foldr d (lambda (h g) (cons g h)) c)) [])) [])) _) _)", "time": 17.508193}
{"examples": ["(join []) -> []", "(join [[]]) -> []", "(join [[2 1 6 3] [4] [] []]) -> [2 1 6 3 4]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldr b (lambda (d c) (foldl c (lambda (f e) (foldr c (lambda (h g) (cons g h)) d)) [])) [])) _) _)", "time": 14.324676}
{"examples": ["(join []) -> []", "(join [[]]) -> []", "(join [[4 0 2 3] [6 0] [3 0] [9 5 1 0] []]) -> [4 0 2 3 6 0 3 0 9 5 1 0]"], "name": "join", "solution": "(let join (let a (lambda (b) (foldr b (lambda (d c) (foldl c (lambda (f e) (foldr c (lambda (h g) (cons g h)) d)) [])) [])) _) _)", "time": 14.665142}
