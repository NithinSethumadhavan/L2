{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.24841, "examples": ["(concat [] []) -> []", "(concat [8 3 5 9] [3 6 8]) -> [8 3 5 9 3 6 8]", "(concat [6 3 0 6] [9]) -> [6 3 0 6 9]", "(concat [0 6 2 7 2] [0 7]) -> [0 6 2 7 2 0 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d b)) b)) _) _)", "name": "concat", "time": 0.20115, "examples": ["(concat [] []) -> []", "(concat [] [4 6 3 6]) -> [4 6 3 6]", "(concat [8] [5]) -> [8 5]", "(concat [2] [1 1 7]) -> [2 1 1 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.255532, "examples": ["(concat [] []) -> []", "(concat [7 0 9 3 3] [1 1 2 4 5]) -> [7 0 9 3 3 1 1 2 4 5]", "(concat [9 3] []) -> [9 3]", "(concat [2] [4 9 6 3]) -> [2 4 9 6 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.251625, "examples": ["(concat [] []) -> []", "(concat [8 7 2] [8 2 8]) -> [8 7 2 8 2 8]", "(concat [7] []) -> [7]", "(concat [] [0]) -> [0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.256476, "examples": ["(concat [] []) -> []", "(concat [5 4 1 5 4] [2 1 8 9 8]) -> [5 4 1 5 4 2 1 8 9 8]", "(concat [5 6 6 4 1] [2 1 3 4]) -> [5 6 6 4 1 2 1 3 4]", "(concat [6 1 7 1 7] [9 4 8 3]) -> [6 1 7 1 7 9 4 8 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.217688, "examples": ["(concat [] []) -> []", "(concat [8 2] [9 3 6 4 2]) -> [8 2 9 3 6 4 2]", "(concat [7 4] [2 8]) -> [7 4 2 8]", "(concat [2 4 8 0] [0]) -> [2 4 8 0 0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.223516, "examples": ["(concat [] []) -> []", "(concat [8 8 9] [5 6 6]) -> [8 8 9 5 6 6]", "(concat [8 6 9] []) -> [8 6 9]", "(concat [2 7 9] [7 6 3]) -> [2 7 9 7 6 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.223789, "examples": ["(concat [] []) -> []", "(concat [0 9 2 7 7] []) -> [0 9 2 7 7]", "(concat [7 5 9] [7 6 5 2]) -> [7 5 9 7 6 5 2]", "(concat [2 8 9 6] [1 8]) -> [2 8 9 6 1 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.232233, "examples": ["(concat [] []) -> []", "(concat [9 0 6 7] [2 7 5 2 5]) -> [9 0 6 7 2 7 5 2 5]", "(concat [] [9 9]) -> [9 9]", "(concat [0 4] [8 6 1 4 4]) -> [0 4 8 6 1 4 4]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.206956, "examples": ["(concat [] []) -> []", "(concat [4 0] [5 5 8]) -> [4 0 5 5 8]", "(concat [2 8] [5 3 8]) -> [2 8 5 3 8]", "(concat [1 6] []) -> [1 6]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.249205, "examples": ["(concat [] []) -> []", "(concat [0 4 7 8 7] []) -> [0 4 7 8 7]", "(concat [] [8 3]) -> [8 3]", "(concat [4 5 5 1 4] [0 2 2 2]) -> [4 5 5 1 4 0 2 2 2]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.223222, "examples": ["(concat [] []) -> []", "(concat [] [4 9 6 8 8]) -> [4 9 6 8 8]", "(concat [9 7 2 1 9] [4 7 4 2]) -> [9 7 2 1 9 4 7 4 2]", "(concat [5 2 2 6] [4 4 0 9 9]) -> [5 2 2 6 4 4 0 9 9]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.234136, "examples": ["(concat [] []) -> []", "(concat [9 6 1 0] [0 7 4 1 5]) -> [9 6 1 0 0 7 4 1 5]", "(concat [3 4 6 1] [3 8 6]) -> [3 4 6 1 3 8 6]", "(concat [] []) -> []"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.245392, "examples": ["(concat [] []) -> []", "(concat [0 6 2 9 9] []) -> [0 6 2 9 9]", "(concat [8 0 0 4 0] [2 0 2]) -> [8 0 0 4 0 2 0 2]", "(concat [4 0] [9 1 3]) -> [4 0 9 1 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.216484, "examples": ["(concat [] []) -> []", "(concat [] [3 4 5 3 3]) -> [3 4 5 3 3]", "(concat [5 4 2 7] [3]) -> [5 4 2 7 3]", "(concat [8 1 6 6 7] [7 4 2 6]) -> [8 1 6 6 7 7 4 2 6]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.206308, "examples": ["(concat [] []) -> []", "(concat [0 2 1 6] [7]) -> [0 2 1 6 7]", "(concat [9 2 5] [0 9 1 5 4]) -> [9 2 5 0 9 1 5 4]", "(concat [] [0 9 3 1 1]) -> [0 9 3 1 1]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.177168, "examples": ["(concat [] []) -> []", "(concat [3 3] []) -> [3 3]", "(concat [3 0 7 3 8] [0 0 8 0 8]) -> [3 0 7 3 8 0 0 8 0 8]", "(concat [3 8] [4 8]) -> [3 8 4 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.258618, "examples": ["(concat [] []) -> []", "(concat [] [3 2 5 6]) -> [3 2 5 6]", "(concat [6 2] [8 8 6 2 3]) -> [6 2 8 8 6 2 3]", "(concat [] [7 2]) -> [7 2]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.220757, "examples": ["(concat [] []) -> []", "(concat [3 7] [6 7 4 0]) -> [3 7 6 7 4 0]", "(concat [9 5] [5 5 7 3]) -> [9 5 5 5 7 3]", "(concat [0] [8 3 1]) -> [0 8 3 1]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.185893, "examples": ["(concat [] []) -> []", "(concat [7] [8]) -> [7 8]", "(concat [0 2 3 2 7] [0 5 2]) -> [0 2 3 2 7 0 5 2]", "(concat [1 6 8] []) -> [1 6 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.245451, "examples": ["(concat [] []) -> []", "(concat [7 7 0 3 8] [6 8]) -> [7 7 0 3 8 6 8]", "(concat [7 9] [8 3 2]) -> [7 9 8 3 2]", "(concat [4 3 9] [2]) -> [4 3 9 2]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.231381, "examples": ["(concat [] []) -> []", "(concat [7 5] [6 9 3 4]) -> [7 5 6 9 3 4]", "(concat [1] [1]) -> [1 1]", "(concat [6 5 2] [9]) -> [6 5 2 9]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.239059, "examples": ["(concat [] []) -> []", "(concat [5 7 8 3 8] [1 7 0]) -> [5 7 8 3 8 1 7 0]", "(concat [3 9 6 4] [2 2 3 9]) -> [3 9 6 4 2 2 3 9]", "(concat [7 8 5 6 6] [6]) -> [7 8 5 6 6 6]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.215237, "examples": ["(concat [] []) -> []", "(concat [] [5]) -> [5]", "(concat [2 5] [0 8 1 9 9]) -> [2 5 0 8 1 9 9]", "(concat [3] [9 1 8]) -> [3 9 1 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.231, "examples": ["(concat [] []) -> []", "(concat [6 3 7 8 3] []) -> [6 3 7 8 3]", "(concat [3 9 0 6 4] [3 5 2]) -> [3 9 0 6 4 3 5 2]", "(concat [9] [6 7 5 9 0]) -> [9 6 7 5 9 0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.236187, "examples": ["(concat [] []) -> []", "(concat [6 6 1] [5 1]) -> [6 6 1 5 1]", "(concat [5 5] [3 0 9 8 5]) -> [5 5 3 0 9 8 5]", "(concat [2 2 9 2 0] [7]) -> [2 2 9 2 0 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.242479, "examples": ["(concat [] []) -> []", "(concat [7 0 5 1] [5 7]) -> [7 0 5 1 5 7]", "(concat [6 3 8 2] [9 2 3 6]) -> [6 3 8 2 9 2 3 6]", "(concat [7 9 5] [6 5 8 7]) -> [7 9 5 6 5 8 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.235393, "examples": ["(concat [] []) -> []", "(concat [0 6 0 0 4] [2 8 8 1 7]) -> [0 6 0 0 4 2 8 8 1 7]", "(concat [8 0 3 5] [3]) -> [8 0 3 5 3]", "(concat [3 4 7] [8 1]) -> [3 4 7 8 1]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.205106, "examples": ["(concat [] []) -> []", "(concat [] [0 4 6]) -> [0 4 6]", "(concat [7 8 4 6] [9 1]) -> [7 8 4 6 9 1]", "(concat [3 7 8] [8 8]) -> [3 7 8 8 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.241525, "examples": ["(concat [] []) -> []", "(concat [0 4] [8]) -> [0 4 8]", "(concat [3 6 0] [8 3 9 6]) -> [3 6 0 8 3 9 6]", "(concat [3 2 0] [9 6 0 0 2]) -> [3 2 0 9 6 0 0 2]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.235212, "examples": ["(concat [] []) -> []", "(concat [6 5 5] [8 0 7]) -> [6 5 5 8 0 7]", "(concat [6 1 8] [8 3 5 6 2]) -> [6 1 8 8 3 5 6 2]", "(concat [3 5 6 5 6] []) -> [3 5 6 5 6]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.242286, "examples": ["(concat [] []) -> []", "(concat [6 8 6] [3]) -> [6 8 6 3]", "(concat [1 0 6 8 8] []) -> [1 0 6 8 8]", "(concat [8] [6 0]) -> [8 6 0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.217296, "examples": ["(concat [] []) -> []", "(concat [4 2 9] [4 0 3 1]) -> [4 2 9 4 0 3 1]", "(concat [6 9 0] [8 9 8 5 8]) -> [6 9 0 8 9 8 5 8]", "(concat [6 7 2] [1 1]) -> [6 7 2 1 1]"]}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.220897, "examples": ["(concat [] []) -> []", "(concat [] [9 6]) -> [9 6]", "(concat [2 2 2] [3]) -> [2 2 2 3]", "(concat [] [3]) -> [3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.220286, "examples": ["(concat [] []) -> []", "(concat [8 4] [4]) -> [8 4 4]", "(concat [2 2 0 6] [4 7 4 7]) -> [2 2 0 6 4 7 4 7]", "(concat [7 4 4] [3 4 4 1]) -> [7 4 4 3 4 4 1]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.240163, "examples": ["(concat [] []) -> []", "(concat [9 9 5 9] [6 0]) -> [9 9 5 9 6 0]", "(concat [1 4 3] [3]) -> [1 4 3 3]", "(concat [8 5 1 4] [5 6 2 0]) -> [8 5 1 4 5 6 2 0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.237271, "examples": ["(concat [] []) -> []", "(concat [4] [4 0 1]) -> [4 4 0 1]", "(concat [9 1] []) -> [9 1]", "(concat [] [5 9 8 3 7]) -> [5 9 8 3 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.257857, "examples": ["(concat [] []) -> []", "(concat [] [6 8 6 6 4]) -> [6 8 6 6 4]", "(concat [0 7 9] [7]) -> [0 7 9 7]", "(concat [4 3 9 5] [2 6]) -> [4 3 9 5 2 6]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.230469, "examples": ["(concat [] []) -> []", "(concat [] [6 3 9 7]) -> [6 3 9 7]", "(concat [9] [9 9 1 0]) -> [9 9 9 1 0]", "(concat [3 4 3 6 8] [0 1]) -> [3 4 3 6 8 0 1]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.259774, "examples": ["(concat [] []) -> []", "(concat [4] []) -> [4]", "(concat [9 6 6 7 4] [6 4 7 4]) -> [9 6 6 7 4 6 4 7 4]", "(concat [3] [0]) -> [3 0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.227778, "examples": ["(concat [] []) -> []", "(concat [9 1] []) -> [9 1]", "(concat [4 8 8] [6 2]) -> [4 8 8 6 2]", "(concat [9 1 6 4] [2 7]) -> [9 1 6 4 2 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.245599, "examples": ["(concat [] []) -> []", "(concat [0 9 1 5] [5 4 8 8]) -> [0 9 1 5 5 4 8 8]", "(concat [5] []) -> [5]", "(concat [8] []) -> [8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.232158, "examples": ["(concat [] []) -> []", "(concat [6] []) -> [6]", "(concat [2] [7 2]) -> [2 7 2]", "(concat [0 8] [5]) -> [0 8 5]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.230382, "examples": ["(concat [] []) -> []", "(concat [0 1 1] [3 7]) -> [0 1 1 3 7]", "(concat [1 9 4 4 5] [8 4 0 8 0]) -> [1 9 4 4 5 8 4 0 8 0]", "(concat [1] [0 9 9 6 9]) -> [1 0 9 9 6 9]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.234571, "examples": ["(concat [] []) -> []", "(concat [1 1] [8 7 6 9 1]) -> [1 1 8 7 6 9 1]", "(concat [4 2 1] [2 2 8 3 8]) -> [4 2 1 2 2 8 3 8]", "(concat [5 8 3 4 9] [8 2 7 6 7]) -> [5 8 3 4 9 8 2 7 6 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.229976, "examples": ["(concat [] []) -> []", "(concat [5 9 3 2] [8 3 3 7]) -> [5 9 3 2 8 3 3 7]", "(concat [4] [9]) -> [4 9]", "(concat [5 2] [9 5]) -> [5 2 9 5]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.256573, "examples": ["(concat [] []) -> []", "(concat [2 4 3 2] [6 5 8 6 6]) -> [2 4 3 2 6 5 8 6 6]", "(concat [5] [3 1 4 8 0]) -> [5 3 1 4 8 0]", "(concat [3 5] [1 2 2 7 3]) -> [3 5 1 2 2 7 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.245826, "examples": ["(concat [] []) -> []", "(concat [6 5 8 5] []) -> [6 5 8 5]", "(concat [5 9 2] [8 7 5]) -> [5 9 2 8 7 5]", "(concat [0 6 0 3 5] [6 7 9 0]) -> [0 6 0 3 5 6 7 9 0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.248108, "examples": ["(concat [] []) -> []", "(concat [2] []) -> [2]", "(concat [7 4 9 2 8] [4 4 9]) -> [7 4 9 2 8 4 4 9]", "(concat [7] [7 5 3]) -> [7 7 5 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.219524, "examples": ["(concat [] []) -> []", "(concat [8 1] [4 1 1 8]) -> [8 1 4 1 1 8]", "(concat [7 7] [8 3 2 3 3]) -> [7 7 8 3 2 3 3]", "(concat [7 7] []) -> [7 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d b)) c)) _) _)", "name": "concat", "time": 0.191622, "examples": ["(concat [] []) -> []", "(concat [3] []) -> [3]", "(concat [8] [6 5]) -> [8 6 5]", "(concat [9] [2 9 0 6 0]) -> [9 2 9 0 6 0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.280416, "examples": ["(concat [] []) -> []", "(concat [2 7 0 2] []) -> [2 7 0 2]", "(concat [1 3 1 6 8] [1 1]) -> [1 3 1 6 8 1 1]", "(concat [4 3] [8 1 0]) -> [4 3 8 1 0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.213116, "examples": ["(concat [] []) -> []", "(concat [0 6 7 3 2] [6]) -> [0 6 7 3 2 6]", "(concat [] [4]) -> [4]", "(concat [7 7 0 1] [6]) -> [7 7 0 1 6]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.238391, "examples": ["(concat [] []) -> []", "(concat [] []) -> []", "(concat [8 1 3] [9 7]) -> [8 1 3 9 7]", "(concat [8] [5 0 2 7]) -> [8 5 0 2 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.197154, "examples": ["(concat [] []) -> []", "(concat [1 7 3] []) -> [1 7 3]", "(concat [] [7 2 1 9 4]) -> [7 2 1 9 4]", "(concat [8 9 1 3] [1 5 8 0 9]) -> [8 9 1 3 1 5 8 0 9]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.235869, "examples": ["(concat [] []) -> []", "(concat [7 4 3] [7 7]) -> [7 4 3 7 7]", "(concat [2 2 8] [8 6 1]) -> [2 2 8 8 6 1]", "(concat [] [5]) -> [5]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.212094, "examples": ["(concat [] []) -> []", "(concat [1] [0 8 4 5]) -> [1 0 8 4 5]", "(concat [4 4 4 2] [4 3]) -> [4 4 4 2 4 3]", "(concat [0 8 7 9] [9]) -> [0 8 7 9 9]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.24118, "examples": ["(concat [] []) -> []", "(concat [8 3 5 3 1] [9 0 5]) -> [8 3 5 3 1 9 0 5]", "(concat [4 8 4 9 0] [6]) -> [4 8 4 9 0 6]", "(concat [3 6 9] [2]) -> [3 6 9 2]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.280809, "examples": ["(concat [] []) -> []", "(concat [4 9 2] [2 5 1]) -> [4 9 2 2 5 1]", "(concat [6 4 5 7] [9 8 0]) -> [6 4 5 7 9 8 0]", "(concat [7] []) -> [7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.215729, "examples": ["(concat [] []) -> []", "(concat [3 1 9 6 8] [8 6]) -> [3 1 9 6 8 8 6]", "(concat [1 6] [7 8]) -> [1 6 7 8]", "(concat [6 2] [1 8 3 8 7]) -> [6 2 1 8 3 8 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.235139, "examples": ["(concat [] []) -> []", "(concat [4 9 2] [2 9 3]) -> [4 9 2 2 9 3]", "(concat [8] [3 8 1 4]) -> [8 3 8 1 4]", "(concat [7 4 9] [8]) -> [7 4 9 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.268578, "examples": ["(concat [] []) -> []", "(concat [6 0 4 8] [6 7 4 3]) -> [6 0 4 8 6 7 4 3]", "(concat [8] [0 1 9]) -> [8 0 1 9]", "(concat [6] [0]) -> [6 0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.239111, "examples": ["(concat [] []) -> []", "(concat [] [1 2]) -> [1 2]", "(concat [4 6] [9 8 6 6 7]) -> [4 6 9 8 6 6 7]", "(concat [6 9] [1 7 4 1 5]) -> [6 9 1 7 4 1 5]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.215665, "examples": ["(concat [] []) -> []", "(concat [4 0 4] [0 0 9]) -> [4 0 4 0 0 9]", "(concat [7 6 6 9 3] []) -> [7 6 6 9 3]", "(concat [6 9 5] []) -> [6 9 5]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.183494, "examples": ["(concat [] []) -> []", "(concat [0] [8 0 5 2 2]) -> [0 8 0 5 2 2]", "(concat [4 9 9 9] [5 5]) -> [4 9 9 9 5 5]", "(concat [3 8 8 5] [2 3 4 6 0]) -> [3 8 8 5 2 3 4 6 0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.221156, "examples": ["(concat [] []) -> []", "(concat [] [6 2 6 6 6]) -> [6 2 6 6 6]", "(concat [7 5 0 1 0] [6 3 8 0 2]) -> [7 5 0 1 0 6 3 8 0 2]", "(concat [6 2 2 0 3] [5 9 9 9]) -> [6 2 2 0 3 5 9 9 9]"]}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons 0 b)) b)) _) _)", "name": "concat", "time": 0.209442, "examples": ["(concat [] []) -> []", "(concat [] [6 2 9 3]) -> [6 2 9 3]", "(concat [] [0 7 5 2]) -> [0 7 5 2]", "(concat [0] [8 6 6 2]) -> [0 8 6 6 2]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.248265, "examples": ["(concat [] []) -> []", "(concat [5 9 0] [9 2]) -> [5 9 0 9 2]", "(concat [6 4] [2]) -> [6 4 2]", "(concat [1 4 0] [6 8]) -> [1 4 0 6 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.191001, "examples": ["(concat [] []) -> []", "(concat [2] [2 5]) -> [2 2 5]", "(concat [5 2 0 4] [6 8]) -> [5 2 0 4 6 8]", "(concat [9 1 5 2] [8 7]) -> [9 1 5 2 8 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.214673, "examples": ["(concat [] []) -> []", "(concat [4 3] [9 8]) -> [4 3 9 8]", "(concat [2 7 3 8] [0 9]) -> [2 7 3 8 0 9]", "(concat [0 3 9 7] [5 8]) -> [0 3 9 7 5 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.246372, "examples": ["(concat [] []) -> []", "(concat [7] [2 8 4]) -> [7 2 8 4]", "(concat [1 3 5] [4 7 0 1]) -> [1 3 5 4 7 0 1]", "(concat [7 3 6 4 9] [7 7]) -> [7 3 6 4 9 7 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.202956, "examples": ["(concat [] []) -> []", "(concat [5 8] [0]) -> [5 8 0]", "(concat [6 8 8 5] [0]) -> [6 8 8 5 0]", "(concat [8 8 6] [3 0 4]) -> [8 8 6 3 0 4]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.246432, "examples": ["(concat [] []) -> []", "(concat [3 4] [8 0 2 6 6]) -> [3 4 8 0 2 6 6]", "(concat [8 6] [5]) -> [8 6 5]", "(concat [] [5]) -> [5]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.197911, "examples": ["(concat [] []) -> []", "(concat [0 3 0 7 1] [7 0 2 2]) -> [0 3 0 7 1 7 0 2 2]", "(concat [0 1 4 6] [1 1 5 8 3]) -> [0 1 4 6 1 1 5 8 3]", "(concat [4 2 3 2 9] []) -> [4 2 3 2 9]"]}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d b)) b)) _) _)", "name": "concat", "time": 0.228637, "examples": ["(concat [] []) -> []", "(concat [5] [5 1 2 4 8]) -> [5 5 1 2 4 8]", "(concat [] []) -> []", "(concat [] [1 7 6 0]) -> [1 7 6 0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.237754, "examples": ["(concat [] []) -> []", "(concat [6 2 9 3] [1 8 1 4]) -> [6 2 9 3 1 8 1 4]", "(concat [] [6 0 3]) -> [6 0 3]", "(concat [3 6 1 5 8] [1 0 2 7]) -> [3 6 1 5 8 1 0 2 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.206061, "examples": ["(concat [] []) -> []", "(concat [3 1 9] [8 4 2]) -> [3 1 9 8 4 2]", "(concat [4 7 6 2] [2]) -> [4 7 6 2 2]", "(concat [6 1 5 8] [9 0 5 0]) -> [6 1 5 8 9 0 5 0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d b)) c)) _) _)", "name": "concat", "time": 0.208893, "examples": ["(concat [] []) -> []", "(concat [] []) -> []", "(concat [0] [2 5 6]) -> [0 2 5 6]", "(concat [9] [5]) -> [9 5]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.271568, "examples": ["(concat [] []) -> []", "(concat [8 2 3 0] [9 8]) -> [8 2 3 0 9 8]", "(concat [6 6 1] [8 3 3]) -> [6 6 1 8 3 3]", "(concat [8 8 1 1 6] [3 8 9]) -> [8 8 1 1 6 3 8 9]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.245695, "examples": ["(concat [] []) -> []", "(concat [] [2 5]) -> [2 5]", "(concat [4 5 4 1] [7 4 5 7 9]) -> [4 5 4 1 7 4 5 7 9]", "(concat [2 7] [5]) -> [2 7 5]"]}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) c) b)) _) _)", "name": "concat", "time": 0.041967, "examples": ["(concat [] []) -> []", "(concat [7 6 5 8] []) -> [7 6 5 8]", "(concat [1 3 9 4 8] []) -> [1 3 9 4 8]", "(concat [] [3 1 1]) -> [3 1 1]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.168362, "examples": ["(concat [] []) -> []", "(concat [2 9 9 4] [5 2 6]) -> [2 9 9 4 5 2 6]", "(concat [9 5 7 7] [1 2 8]) -> [9 5 7 7 1 2 8]", "(concat [7 9 7] [8 9 3]) -> [7 9 7 8 9 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.278455, "examples": ["(concat [] []) -> []", "(concat [3] []) -> [3]", "(concat [3 9 0 8] [1 7 1]) -> [3 9 0 8 1 7 1]", "(concat [] [0 3]) -> [0 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.20946, "examples": ["(concat [] []) -> []", "(concat [3 3 4 5 4] [9 3 0]) -> [3 3 4 5 4 9 3 0]", "(concat [0 6 3 4 8] [1]) -> [0 6 3 4 8 1]", "(concat [8 5 2 9] [4 6 7 7]) -> [8 5 2 9 4 6 7 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.195792, "examples": ["(concat [] []) -> []", "(concat [0 1] [8 8 5 6]) -> [0 1 8 8 5 6]", "(concat [4 7 8] [4 4 6 8]) -> [4 7 8 4 4 6 8]", "(concat [1 8 4 4] [8 2]) -> [1 8 4 4 8 2]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.233598, "examples": ["(concat [] []) -> []", "(concat [4 9 3] [3 5 4 0 9]) -> [4 9 3 3 5 4 0 9]", "(concat [0 3] [6 2 7 7]) -> [0 3 6 2 7 7]", "(concat [] [0 9 6]) -> [0 9 6]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.187539, "examples": ["(concat [] []) -> []", "(concat [1 9 9] []) -> [1 9 9]", "(concat [3] [6 7 2]) -> [3 6 7 2]", "(concat [9 1] []) -> [9 1]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.231025, "examples": ["(concat [] []) -> []", "(concat [6] [9 4 7 7 3]) -> [6 9 4 7 7 3]", "(concat [3 8 7 8] [4]) -> [3 8 7 8 4]", "(concat [0 3 3 7] [2 1]) -> [0 3 3 7 2 1]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.251504, "examples": ["(concat [] []) -> []", "(concat [5 9 1] [3 0 2 3 7]) -> [5 9 1 3 0 2 3 7]", "(concat [6 2 0 5] [8 2 7]) -> [6 2 0 5 8 2 7]", "(concat [] [0]) -> [0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.247759, "examples": ["(concat [] []) -> []", "(concat [7 0] [7 3 2 1]) -> [7 0 7 3 2 1]", "(concat [8] [1 3 5 6 3]) -> [8 1 3 5 6 3]", "(concat [9 0 9 5 5] [3 9 7]) -> [9 0 9 5 5 3 9 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.187332, "examples": ["(concat [] []) -> []", "(concat [7 6 5 7] []) -> [7 6 5 7]", "(concat [4 6 2 8] []) -> [4 6 2 8]", "(concat [9 7 0] [7]) -> [9 7 0 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.233368, "examples": ["(concat [] []) -> []", "(concat [5 6 5 3 3] [5 0]) -> [5 6 5 3 3 5 0]", "(concat [] [4 5 5]) -> [4 5 5]", "(concat [1] []) -> [1]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.219693, "examples": ["(concat [] []) -> []", "(concat [] [9]) -> [9]", "(concat [] [5]) -> [5]", "(concat [3 1 2 8] [9]) -> [3 1 2 8 9]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.232279, "examples": ["(concat [] []) -> []", "(concat [8 2 0 1 8] [3 8 6 9 6]) -> [8 2 0 1 8 3 8 6 9 6]", "(concat [] [4]) -> [4]", "(concat [5 1 1 0] [3]) -> [5 1 1 0 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.213005, "examples": ["(concat [] []) -> []", "(concat [8 5] []) -> [8 5]", "(concat [6 7] [0 1 6 4]) -> [6 7 0 1 6 4]", "(concat [] [9 9 4]) -> [9 9 4]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.238453, "examples": ["(concat [] []) -> []", "(concat [9 2] [3 5]) -> [9 2 3 5]", "(concat [2 0 4 4 5] []) -> [2 0 4 4 5]", "(concat [5 3 2 9 4] [7 5 8 7]) -> [5 3 2 9 4 7 5 8 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.098552, "examples": ["(concat [] []) -> []", "(concat [5 2] [7]) -> [5 2 7]", "(concat [] [5 8 5 7]) -> [5 8 5 7]", "(concat [7 2 8 7 9] [6 1]) -> [7 2 8 7 9 6 1]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.108184, "examples": ["(concat [] []) -> []", "(concat [9 8 6 3 1] [8 0 3 9 4]) -> [9 8 6 3 1 8 0 3 9 4]", "(concat [0 1] [5 2 4 5]) -> [0 1 5 2 4 5]", "(concat [0 3] [5 0 1]) -> [0 3 5 0 1]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.106883, "examples": ["(concat [] []) -> []", "(concat [8 4 6 8 0] [2 0 0]) -> [8 4 6 8 0 2 0 0]", "(concat [1 4] []) -> [1 4]", "(concat [6 1 2 4] [5 7]) -> [6 1 2 4 5 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.105746, "examples": ["(concat [] []) -> []", "(concat [2 2] [2 2 2]) -> [2 2 2 2 2]", "(concat [9 8] [6 9 6 7]) -> [9 8 6 9 6 7]", "(concat [3 5 0 6 1] []) -> [3 5 0 6 1]"]}
