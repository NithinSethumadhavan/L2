{"time": 1.119458, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 4) -> #f", "(member [5 5 0 6] 4) -> #f", "(member [6 0 3 7] 0) -> #t", "(member [1 7] 4) -> #f", "(member [1 3] 0) -> #f", "(member [9 7 1 4 8] 0) -> #f", "(member [8 3 0 8] 2) -> #f", "(member [8 7 1 7 2] 8) -> #t", "(member [3] 3) -> #t", "(member [] 1) -> #f", "(member [2 1 5] 9) -> #f", "(member [5 8] 1) -> #f", "(member [9 3 5 1] 5) -> #t", "(member [8 1 2] 0) -> #f", "(member [] 7) -> #f", "(member [2 1 2] 4) -> #f", "(member [5] 4) -> #f", "(member [7 2 0 2 3] 6) -> #f", "(member [6 3] 6) -> #t", "(member [6 0 2] 1) -> #f", "(member [] 0) -> #f", "(member [0 2] 8) -> #f", "(member [0 5 2] 0) -> #t", "(member [0 9 9] 0) -> #t", "(member [0 9 6] 5) -> #f", "(member [9 7 7 2 0] 5) -> #f", "(member [0 7] 9) -> #f", "(member [] 2) -> #f", "(member [3 3 3 6] 5) -> #f", "(member [0 7] 9) -> #f", "(member [3 4 2 9] 9) -> #t", "(member [4 5 2] 6) -> #f", "(member [1 4] 8) -> #f", "(member [] 9) -> #f", "(member [6] 6) -> #t", "(member [2 3 9 3 2] 6) -> #f", "(member [] 0) -> #f", "(member [5 0 6 5] 3) -> #f", "(member [] 5) -> #f", "(member [0 5 4 6 8] 5) -> #t", "(member [5 7 8 9] 1) -> #f", "(member [3 3 9] 5) -> #f", "(member [9 4 2 4] 6) -> #f", "(member [0] 8) -> #f", "(member [4 0 8] 6) -> #f", "(member [4 4 5 0 7] 1) -> #f", "(member [1] 3) -> #f", "(member [9 9 4 4] 0) -> #f", "(member [6 3 8 0 3] 6) -> #t", "(member [6 2 8 4 0] 6) -> #t", "(member [1 6 5 4 4] 1) -> #t", "(member [2 6 4 3 3] 9) -> #f", "(member [6 6] 9) -> #f", "(member [8] 6) -> #f", "(member [9 5 4] 5) -> #t", "(member [2 0 7 6] 3) -> #f", "(member [5 0 4] 5) -> #t", "(member [9 4] 8) -> #f", "(member [1 5 2 6] 4) -> #f", "(member [] 6) -> #f", "(member [6 6 0 3 4] 7) -> #f", "(member [1 2] 0) -> #f", "(member [] 1) -> #f", "(member [9 5 3 5] 5) -> #t", "(member [1 8] 2) -> #f", "(member [9 4 2 4] 8) -> #f", "(member [] 3) -> #f", "(member [4 5] 4) -> #t", "(member [1] 7) -> #f", "(member [0 5 2 0] 1) -> #f", "(member [6] 9) -> #f", "(member [0] 6) -> #f", "(member [8 7 9 2] 8) -> #t", "(member [5 5 3 0 0] 8) -> #f", "(member [] 3) -> #f", "(member [] 5) -> #f", "(member [6 6 7 4] 3) -> #f", "(member [3] 7) -> #f", "(member [] 0) -> #f", "(member [1 5 0 5] 0) -> #t", "(member [1] 2) -> #f", "(member [1 1 2] 6) -> #f", "(member [8] 4) -> #f", "(member [3] 1) -> #f", "(member [4 7 0] 0) -> #t", "(member [9 4 1 5] 2) -> #f", "(member [1 7] 7) -> #t", "(member [5 2] 3) -> #f", "(member [7 6 9 5 7] 8) -> #f", "(member [9] 0) -> #f", "(member [5 4 1 4 0] 3) -> #f", "(member [2] 9) -> #f"]}
{"time": 1.17603, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 6) -> #f", "(member [6] 9) -> #f", "(member [3 6 6 7] 3) -> #t", "(member [8] 5) -> #f", "(member [4 6] 4) -> #t", "(member [4 1 6 2] 6) -> #t", "(member [8 3 7] 4) -> #f", "(member [6 8] 1) -> #f", "(member [8 1 0 6 2] 8) -> #t", "(member [] 9) -> #f", "(member [5 7 1] 1) -> #t", "(member [7] 1) -> #f", "(member [5 3 2 6 2] 1) -> #f", "(member [8 4] 7) -> #f", "(member [1 5] 3) -> #f", "(member [2 3] 7) -> #f", "(member [2 2 0] 7) -> #f", "(member [3 4] 1) -> #f", "(member [0 4 6 6] 6) -> #t", "(member [7 4 7] 0) -> #f", "(member [8 8] 1) -> #f", "(member [9 8 5 4] 8) -> #t", "(member [8] 3) -> #f", "(member [8] 4) -> #f", "(member [] 8) -> #f", "(member [1] 2) -> #f", "(member [2 5 4 5] 4) -> #t", "(member [] 1) -> #f", "(member [7 1 2] 1) -> #t", "(member [] 1) -> #f", "(member [1 4 4 3 9] 9) -> #t", "(member [] 7) -> #f", "(member [0 6 8 0] 5) -> #f", "(member [4] 0) -> #f", "(member [6 9] 9) -> #t", "(member [] 8) -> #f", "(member [8] 0) -> #f", "(member [6 6 0] 5) -> #f", "(member [2] 8) -> #f", "(member [9] 0) -> #f", "(member [2 8 2 7 7] 1) -> #f", "(member [0] 4) -> #f", "(member [8 1 4 0 1] 9) -> #f", "(member [6] 8) -> #f", "(member [6 3] 1) -> #f", "(member [7 1 6 5 1] 3) -> #f", "(member [1 1 0] 6) -> #f", "(member [3 8 6 6 8] 7) -> #f", "(member [9 6 8 2] 2) -> #t", "(member [] 0) -> #f", "(member [5 6 7 8 4] 5) -> #t", "(member [1 6 8] 3) -> #f", "(member [5 6 3] 4) -> #f", "(member [1 3 3 0] 9) -> #f", "(member [4 3] 5) -> #f", "(member [] 1) -> #f", "(member [9 1] 5) -> #f", "(member [9 7 2 7] 5) -> #f", "(member [6 6 0] 5) -> #f", "(member [8 9 6] 6) -> #t", "(member [] 3) -> #f", "(member [] 9) -> #f", "(member [5 9 6 3] 1) -> #f", "(member [3] 6) -> #f", "(member [9 2 0] 2) -> #t", "(member [] 8) -> #f", "(member [] 4) -> #f", "(member [2 5 8 6] 0) -> #f", "(member [] 5) -> #f", "(member [5 4 4 4] 8) -> #f", "(member [3 8 5] 8) -> #t", "(member [3 2 6 7] 6) -> #t", "(member [3 0 8 5] 9) -> #f", "(member [4 4] 5) -> #f", "(member [5 2 5 1 6] 2) -> #t", "(member [3 5 9 2 4] 9) -> #t", "(member [] 9) -> #f", "(member [5 8 6 1] 3) -> #f", "(member [5 0 0 1] 9) -> #f", "(member [] 9) -> #f", "(member [1] 8) -> #f", "(member [] 2) -> #f", "(member [1 4 1 6 5] 1) -> #t", "(member [1 0 4 3 7] 3) -> #t", "(member [3 3 7 9 0] 8) -> #f", "(member [2 7] 3) -> #f", "(member [6 6 3 1 4] 3) -> #t", "(member [7] 3) -> #f", "(member [0 6 9 7] 7) -> #t", "(member [7 3] 7) -> #t", "(member [8 9] 1) -> #f", "(member [2 2 7 7 6] 4) -> #f"]}
{"time": 1.223795, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 8) -> #f", "(member [3 9] 9) -> #t", "(member [8 3] 3) -> #t", "(member [2 0 4 2] 6) -> #f", "(member [9 2 5] 9) -> #t", "(member [8] 6) -> #f", "(member [2] 6) -> #f", "(member [] 2) -> #f", "(member [6 6] 8) -> #f", "(member [0] 5) -> #f", "(member [] 9) -> #f", "(member [8 6 6 5 9] 5) -> #t", "(member [] 3) -> #f", "(member [4 5] 4) -> #t", "(member [2 1 5] 0) -> #f", "(member [3 0 4 1 5] 2) -> #f", "(member [8] 5) -> #f", "(member [6 4] 2) -> #f", "(member [] 0) -> #f", "(member [9 7] 6) -> #f", "(member [6 5 6 6 9] 3) -> #f", "(member [1 9] 3) -> #f", "(member [6 7 4] 2) -> #f", "(member [0 3 3 6 4] 9) -> #f", "(member [] 4) -> #f", "(member [9 2 9 1] 2) -> #t", "(member [1 9 6 0] 6) -> #t", "(member [1 9] 9) -> #t", "(member [] 2) -> #f", "(member [] 9) -> #f", "(member [2 8] 1) -> #f", "(member [2 3 9 2] 3) -> #t", "(member [8 5 4] 4) -> #t", "(member [] 9) -> #f", "(member [] 2) -> #f", "(member [0 1] 5) -> #f", "(member [7 9 8 2 9] 6) -> #f", "(member [6] 4) -> #f", "(member [] 3) -> #f", "(member [] 4) -> #f", "(member [1 1 6 0] 1) -> #t", "(member [] 7) -> #f", "(member [7 4] 0) -> #f", "(member [3 0 7 8] 8) -> #t", "(member [] 7) -> #f", "(member [3 0 8 4] 2) -> #f", "(member [3 5] 1) -> #f", "(member [0 8 2 6] 1) -> #f", "(member [8 0] 3) -> #f", "(member [3 0 2] 1) -> #f", "(member [4 8 4 0] 1) -> #f", "(member [6 3 8 7 0] 8) -> #t", "(member [2 9] 1) -> #f", "(member [6 0 2 6] 8) -> #f", "(member [1 2 9] 8) -> #f", "(member [8 4 7 3] 1) -> #f", "(member [1 6 8] 4) -> #f", "(member [9] 7) -> #f", "(member [] 1) -> #f", "(member [3 9 3 9] 3) -> #t", "(member [0 2 9] 2) -> #t", "(member [] 7) -> #f", "(member [1 4] 2) -> #f", "(member [1 5 9 3 9] 7) -> #f", "(member [1] 6) -> #f", "(member [1] 5) -> #f", "(member [5 6 9 2] 4) -> #f", "(member [8 2] 6) -> #f", "(member [1 0] 4) -> #f", "(member [3 9 9 9] 3) -> #t", "(member [] 0) -> #f", "(member [1 2 9] 4) -> #f", "(member [] 5) -> #f", "(member [2 4 6 4 4] 2) -> #t", "(member [6 5 6 6 4] 9) -> #f", "(member [3] 4) -> #f", "(member [8] 7) -> #f", "(member [] 0) -> #f", "(member [] 8) -> #f", "(member [] 9) -> #f", "(member [2 9] 2) -> #t", "(member [9 1 2 0 5] 7) -> #f", "(member [5 1 3] 6) -> #f", "(member [7 0] 9) -> #f", "(member [2 1 8 6] 3) -> #f", "(member [9 0 4] 3) -> #f", "(member [1 2 5 5] 1) -> #t", "(member [9] 5) -> #f", "(member [9 6 2 2 6] 5) -> #f", "(member [0 5] 2) -> #f", "(member [] 4) -> #f", "(member [2 8 5] 9) -> #f"]}
{"time": 1.201181, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 4) -> #f", "(member [2 1 9 2 8] 1) -> #t", "(member [4 1] 7) -> #f", "(member [2 0 7] 7) -> #t", "(member [9 2 0 2 5] 8) -> #f", "(member [] 7) -> #f", "(member [] 5) -> #f", "(member [2] 1) -> #f", "(member [8 0 9 3 6] 1) -> #f", "(member [] 9) -> #f", "(member [3 9 9] 2) -> #f", "(member [4] 3) -> #f", "(member [1 2 4 9] 5) -> #f", "(member [1 2] 2) -> #t", "(member [6] 7) -> #f", "(member [6 9 1] 4) -> #f", "(member [4 6 2 2] 1) -> #f", "(member [8 9] 8) -> #t", "(member [6 5 4] 6) -> #t", "(member [2 1] 0) -> #f", "(member [6] 8) -> #f", "(member [2] 6) -> #f", "(member [8 3 1] 0) -> #f", "(member [7 6 2] 1) -> #f", "(member [5 9 7 9] 2) -> #f", "(member [9] 1) -> #f", "(member [4 7] 0) -> #f", "(member [3 2 9 8 1] 1) -> #t", "(member [1 4 2] 9) -> #f", "(member [6 7 1] 2) -> #f", "(member [] 1) -> #f", "(member [1 7] 3) -> #f", "(member [7 3] 9) -> #f", "(member [] 2) -> #f", "(member [4 1 3 8 5] 3) -> #t", "(member [5] 6) -> #f", "(member [8 0] 2) -> #f", "(member [7 4] 3) -> #f", "(member [9 6 1] 4) -> #f", "(member [5 6] 6) -> #t", "(member [5 0 8 2 3] 3) -> #t", "(member [2 3 7] 4) -> #f", "(member [8 7 7 4 6] 8) -> #t", "(member [2] 3) -> #f", "(member [8 0] 9) -> #f", "(member [1 5 3 6] 9) -> #f", "(member [8 5 8 6] 2) -> #f", "(member [] 1) -> #f", "(member [] 0) -> #f", "(member [9] 4) -> #f", "(member [8 6 1] 5) -> #f", "(member [7 1 9] 0) -> #f", "(member [1 0 1] 9) -> #f", "(member [1 4] 1) -> #t", "(member [9 4 8 4] 1) -> #f", "(member [9 5] 3) -> #f", "(member [2 9 4 9] 2) -> #t", "(member [8 8] 8) -> #t", "(member [0 6 0] 7) -> #f", "(member [3 6 2 0 8] 0) -> #t", "(member [7 3 6 2] 0) -> #f", "(member [] 7) -> #f", "(member [7 2] 0) -> #f", "(member [] 8) -> #f", "(member [] 8) -> #f", "(member [9 5 0 6] 3) -> #f", "(member [9 1] 7) -> #f", "(member [] 3) -> #f", "(member [5 6 2 0 7] 3) -> #f", "(member [] 2) -> #f", "(member [0 5] 3) -> #f", "(member [4] 6) -> #f", "(member [4 3 5 1] 3) -> #t", "(member [] 4) -> #f", "(member [4 0 3 1 1] 4) -> #t", "(member [9] 2) -> #f", "(member [4 1] 7) -> #f", "(member [0 5 0 5] 4) -> #f", "(member [5] 2) -> #f", "(member [9 7] 6) -> #f", "(member [4 8 8] 0) -> #f", "(member [9 7 6 4] 6) -> #t", "(member [8] 8) -> #t", "(member [6 8 6 5 3] 7) -> #f", "(member [8 1 4 4] 0) -> #f", "(member [7 9 0] 8) -> #f", "(member [7 6 3 0] 4) -> #f", "(member [6 1 3] 1) -> #t", "(member [1] 9) -> #f", "(member [5 0] 4) -> #f", "(member [4 2 1] 6) -> #f", "(member [3 0] 8) -> #f"]}
{"time": 1.220161, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 3) -> #f", "(member [4] 7) -> #f", "(member [1 6 1 8] 4) -> #f", "(member [1] 6) -> #f", "(member [] 1) -> #f", "(member [] 8) -> #f", "(member [0 5 4 9] 0) -> #t", "(member [3 1] 3) -> #t", "(member [8 4 8 5 7] 9) -> #f", "(member [] 4) -> #f", "(member [5 7] 9) -> #f", "(member [8 7 9 4] 7) -> #t", "(member [3 0 6] 0) -> #t", "(member [4 4 7 2] 4) -> #t", "(member [6] 3) -> #f", "(member [] 1) -> #f", "(member [] 7) -> #f", "(member [] 8) -> #f", "(member [9] 3) -> #f", "(member [4] 7) -> #f", "(member [7 4 3] 7) -> #t", "(member [] 6) -> #f", "(member [] 3) -> #f", "(member [0 0 6] 1) -> #f", "(member [8 2 3 7 2] 1) -> #f", "(member [7 4 8] 7) -> #t", "(member [8] 8) -> #t", "(member [7 3 1] 0) -> #f", "(member [] 4) -> #f", "(member [] 5) -> #f", "(member [0 1] 1) -> #t", "(member [0] 0) -> #t", "(member [5 9 7] 3) -> #f", "(member [9] 4) -> #f", "(member [8] 9) -> #f", "(member [6 7 5 0 7] 6) -> #t", "(member [4 0 1 1] 5) -> #f", "(member [3 1 7 8] 0) -> #f", "(member [] 0) -> #f", "(member [2] 4) -> #f", "(member [7] 3) -> #f", "(member [0 1 1 9 6] 3) -> #f", "(member [5 0 6 2] 3) -> #f", "(member [7 6 3 7 0] 3) -> #t", "(member [5 5] 9) -> #f", "(member [1 5 0] 4) -> #f", "(member [] 9) -> #f", "(member [6 8] 0) -> #f", "(member [] 7) -> #f", "(member [3] 4) -> #f", "(member [] 7) -> #f", "(member [4] 0) -> #f", "(member [8] 7) -> #f", "(member [5 0 1 4] 8) -> #f", "(member [] 4) -> #f", "(member [5] 7) -> #f", "(member [0 9] 9) -> #t", "(member [4 2 3] 8) -> #f", "(member [0 0 0 5] 2) -> #f", "(member [1 8 0 9 6] 7) -> #f", "(member [5 4 1] 6) -> #f", "(member [0] 0) -> #t", "(member [9 7 6] 2) -> #f", "(member [5] 4) -> #f", "(member [5 6 7 6] 8) -> #f", "(member [9] 3) -> #f", "(member [6 8 5] 2) -> #f", "(member [9 0 4 3 8] 7) -> #f", "(member [] 4) -> #f", "(member [] 0) -> #f", "(member [6 1 8] 2) -> #f", "(member [5] 3) -> #f", "(member [8 3 9 0 3] 6) -> #f", "(member [9 4 6 9] 6) -> #t", "(member [9 3 9] 0) -> #f", "(member [5 6 4] 0) -> #f", "(member [] 7) -> #f", "(member [] 8) -> #f", "(member [1] 6) -> #f", "(member [9 9 3 2 1] 0) -> #f", "(member [1 7 0 2] 6) -> #f", "(member [] 5) -> #f", "(member [3 6 2 8 7] 9) -> #f", "(member [1 3 7] 9) -> #f", "(member [8 7] 7) -> #t", "(member [1 9 6] 2) -> #f", "(member [5 2 3 1] 8) -> #f", "(member [6 5] 4) -> #f", "(member [3 1 2 7] 2) -> #t", "(member [9 6] 2) -> #f", "(member [7 6] 9) -> #f", "(member [9 3 9 8 2] 5) -> #f"]}
{"time": 1.185323, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 4) -> #f", "(member [3] 2) -> #f", "(member [8 0] 6) -> #f", "(member [3 1 2 9] 7) -> #f", "(member [] 4) -> #f", "(member [9] 0) -> #f", "(member [5 0 0] 3) -> #f", "(member [5] 3) -> #f", "(member [7] 7) -> #t", "(member [0 3 2 3] 6) -> #f", "(member [] 7) -> #f", "(member [6 6 4] 5) -> #f", "(member [7 2 3 9] 3) -> #t", "(member [1] 8) -> #f", "(member [7 9] 2) -> #f", "(member [8 3 2 5 9] 7) -> #f", "(member [0 4] 5) -> #f", "(member [1] 1) -> #t", "(member [4 0 3 7] 4) -> #t", "(member [2] 8) -> #f", "(member [0] 7) -> #f", "(member [0 4] 6) -> #f", "(member [] 6) -> #f", "(member [6 0 5 4 0] 8) -> #f", "(member [3 9 0 1 5] 6) -> #f", "(member [5 4 1] 3) -> #f", "(member [5 6 5 3] 4) -> #f", "(member [5 4] 9) -> #f", "(member [3 7 7] 9) -> #f", "(member [8 5] 0) -> #f", "(member [2 9] 2) -> #t", "(member [1 8 7 7 0] 3) -> #f", "(member [5] 7) -> #f", "(member [1 1 9] 1) -> #t", "(member [5 8] 8) -> #t", "(member [1 7 1] 0) -> #f", "(member [9 8 0] 7) -> #f", "(member [8] 3) -> #f", "(member [6 9 7] 7) -> #t", "(member [5 4 7] 7) -> #t", "(member [8 0 2 6 4] 1) -> #f", "(member [3 9 0 8 4] 7) -> #f", "(member [2] 1) -> #f", "(member [4 3 8] 4) -> #t", "(member [0 8] 6) -> #f", "(member [8] 2) -> #f", "(member [7] 7) -> #t", "(member [2 1] 5) -> #f", "(member [6 3 0] 1) -> #f", "(member [] 0) -> #f", "(member [9 8 7 6] 3) -> #f", "(member [1 2] 8) -> #f", "(member [3 1 0 0 7] 4) -> #f", "(member [8] 9) -> #f", "(member [9 7 1] 2) -> #f", "(member [3 5 9 3] 9) -> #t", "(member [1 6 6 2 8] 7) -> #f", "(member [0 5] 1) -> #f", "(member [7 2 7] 6) -> #f", "(member [7 6] 9) -> #f", "(member [1] 2) -> #f", "(member [6] 5) -> #f", "(member [9 7 0 0] 0) -> #t", "(member [4 9 0 8 1] 8) -> #t", "(member [1 4 1] 5) -> #f", "(member [5 8 1 5] 4) -> #f", "(member [0 0] 1) -> #f", "(member [8] 2) -> #f", "(member [8] 5) -> #f", "(member [3 2 9] 1) -> #f", "(member [6 0 9 1 9] 8) -> #f", "(member [3 7 6 9 8] 3) -> #t", "(member [8 3 0] 9) -> #f", "(member [3 3 3 1] 1) -> #t", "(member [6 1 4 1] 5) -> #f", "(member [5 7 3] 3) -> #t", "(member [7 5] 5) -> #t", "(member [0] 8) -> #f", "(member [6 5 8 6 1] 4) -> #f", "(member [0 2] 1) -> #f", "(member [] 9) -> #f", "(member [4 2 4] 6) -> #f", "(member [1 6] 9) -> #f", "(member [1 5 2 7 0] 3) -> #f", "(member [5 9] 9) -> #t", "(member [] 5) -> #f", "(member [6 4 6 7] 2) -> #f", "(member [3 7 2 4 1] 9) -> #f", "(member [9 4 7 2] 5) -> #f", "(member [6 7 8 0] 8) -> #t", "(member [1 3 9 0 3] 7) -> #f", "(member [5 3 0] 6) -> #f"]}
{"time": 1.154231, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 6) -> #f", "(member [1 7 8] 7) -> #t", "(member [4 0 0] 5) -> #f", "(member [2] 7) -> #f", "(member [9 7 0 2] 6) -> #f", "(member [6 4 1 0] 1) -> #t", "(member [] 3) -> #f", "(member [7 3] 1) -> #f", "(member [3 1 0 7] 9) -> #f", "(member [] 7) -> #f", "(member [6 6 4 9] 9) -> #t", "(member [8 3] 1) -> #f", "(member [6 7 3] 5) -> #f", "(member [6 3] 8) -> #f", "(member [4 4 9 3 4] 7) -> #f", "(member [3] 4) -> #f", "(member [3] 1) -> #f", "(member [8 9] 1) -> #f", "(member [9] 2) -> #f", "(member [4] 0) -> #f", "(member [5 7 5 2] 5) -> #t", "(member [9 4 5 7] 7) -> #t", "(member [3] 3) -> #t", "(member [8 7 2 8] 9) -> #f", "(member [5] 0) -> #f", "(member [3 2] 0) -> #f", "(member [1 9 2 7 8] 3) -> #f", "(member [0] 0) -> #t", "(member [] 4) -> #f", "(member [0 1 5 7 3] 6) -> #f", "(member [3 4] 1) -> #f", "(member [] 1) -> #f", "(member [8 6] 1) -> #f", "(member [9 7] 7) -> #t", "(member [7] 1) -> #f", "(member [5 5 0] 5) -> #t", "(member [5 2] 5) -> #t", "(member [4] 2) -> #f", "(member [3 1 8 0 3] 6) -> #f", "(member [9 6 3 3 0] 1) -> #f", "(member [4] 1) -> #f", "(member [4 8] 2) -> #f", "(member [1 1] 1) -> #t", "(member [2 3 6 7] 7) -> #t", "(member [7 9] 1) -> #f", "(member [7 0 9] 1) -> #f", "(member [8] 2) -> #f", "(member [5 8 9] 9) -> #t", "(member [0 9 6 5] 2) -> #f", "(member [5 4 7 1] 7) -> #t", "(member [3 5 7 0] 0) -> #t", "(member [4 8 5 1] 4) -> #t", "(member [4 1 8 9 7] 3) -> #f", "(member [6 3 6 9 6] 4) -> #f", "(member [9 5] 3) -> #f", "(member [7 7] 8) -> #f", "(member [1 1 1] 1) -> #t", "(member [3] 7) -> #f", "(member [8] 5) -> #f", "(member [1 5 7 1 2] 8) -> #f", "(member [4 4] 6) -> #f", "(member [7 7 3 8 9] 9) -> #t", "(member [1 3 4] 0) -> #f", "(member [8 5 9 5 0] 9) -> #t", "(member [2 0] 5) -> #f", "(member [] 4) -> #f", "(member [] 7) -> #f", "(member [0 5] 9) -> #f", "(member [0] 8) -> #f", "(member [8] 2) -> #f", "(member [8] 4) -> #f", "(member [5 4 4 7 1] 7) -> #t", "(member [5 4 7] 2) -> #f", "(member [6 9 5 8 4] 1) -> #f", "(member [8 8 2 6] 9) -> #f", "(member [] 7) -> #f", "(member [3 9 0 1] 6) -> #f", "(member [6 3 2] 5) -> #f", "(member [6 6] 1) -> #f", "(member [3 2] 8) -> #f", "(member [3 5 3 5 8] 2) -> #f", "(member [5 6] 9) -> #f", "(member [1 5 4 1] 9) -> #f", "(member [0 6 7] 4) -> #f", "(member [2 3 8 6] 7) -> #f", "(member [7] 8) -> #f", "(member [] 2) -> #f", "(member [] 7) -> #f", "(member [4 5] 2) -> #f", "(member [6] 3) -> #f", "(member [9 2] 1) -> #f", "(member [5 2 3 5 4] 0) -> #f"]}
{"time": 1.182108, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 0) -> #f", "(member [4 6 2 2] 4) -> #t", "(member [7 5] 9) -> #f", "(member [6] 7) -> #f", "(member [1 2 4 8] 5) -> #f", "(member [6 2 2 2 4] 4) -> #t", "(member [8 4 1] 2) -> #f", "(member [2 2 1] 6) -> #f", "(member [] 6) -> #f", "(member [6 5 0] 6) -> #t", "(member [6] 1) -> #f", "(member [7 8] 2) -> #f", "(member [] 9) -> #f", "(member [8 6 2 0 9] 6) -> #t", "(member [4 6 1] 9) -> #f", "(member [0 5] 3) -> #f", "(member [] 2) -> #f", "(member [2 7 5 3] 7) -> #t", "(member [6 7 1 8] 9) -> #f", "(member [] 5) -> #f", "(member [4 4] 3) -> #f", "(member [0 6 7 8] 0) -> #t", "(member [] 3) -> #f", "(member [7 3] 6) -> #f", "(member [0] 1) -> #f", "(member [6] 8) -> #f", "(member [8 3 6 4 1] 7) -> #f", "(member [9] 3) -> #f", "(member [0] 7) -> #f", "(member [7 5 2 1] 2) -> #t", "(member [] 1) -> #f", "(member [4] 6) -> #f", "(member [4 9 9] 1) -> #f", "(member [5 0] 3) -> #f", "(member [3 0 8 5 9] 1) -> #f", "(member [1 2] 4) -> #f", "(member [6 6 4] 8) -> #f", "(member [7 2] 9) -> #f", "(member [] 9) -> #f", "(member [7 3 1 3 2] 9) -> #f", "(member [3 3] 5) -> #f", "(member [1 1 0] 8) -> #f", "(member [7 7 0 9 3] 9) -> #t", "(member [9] 8) -> #f", "(member [7 3 5 2 5] 1) -> #f", "(member [2 8 6 6] 0) -> #f", "(member [6 6 3] 4) -> #f", "(member [7] 5) -> #f", "(member [7] 1) -> #f", "(member [6 7 7] 4) -> #f", "(member [2 6 7 2 4] 9) -> #f", "(member [3 4 0 5 1] 8) -> #f", "(member [6 1 1 5] 4) -> #f", "(member [4] 4) -> #t", "(member [0] 1) -> #f", "(member [] 6) -> #f", "(member [9 0 3 6] 8) -> #f", "(member [] 4) -> #f", "(member [3 6 0] 2) -> #f", "(member [2 0] 2) -> #t", "(member [] 3) -> #f", "(member [4] 0) -> #f", "(member [6] 2) -> #f", "(member [2 6 1] 2) -> #t", "(member [5 4 4 6 8] 4) -> #t", "(member [] 2) -> #f", "(member [5 9 4 2 3] 4) -> #t", "(member [8 7 3 3 5] 6) -> #f", "(member [] 5) -> #f", "(member [] 3) -> #f", "(member [1] 3) -> #f", "(member [4 8] 7) -> #f", "(member [3 6 8 6] 7) -> #f", "(member [4 7 8 0] 1) -> #f", "(member [6 7 2 8 5] 0) -> #f", "(member [3 2 8] 4) -> #f", "(member [9 7 5] 5) -> #t", "(member [] 1) -> #f", "(member [8] 9) -> #f", "(member [4 0] 6) -> #f", "(member [6 5] 6) -> #t", "(member [0 6 6] 9) -> #f", "(member [0 6 4 6] 0) -> #t", "(member [2 8 0 7 4] 1) -> #f", "(member [1] 1) -> #t", "(member [2 8] 5) -> #f", "(member [3 3 9 0] 5) -> #f", "(member [6 9 2 3] 4) -> #f", "(member [1] 0) -> #f", "(member [] 4) -> #f", "(member [5 6 0 8 7] 6) -> #t", "(member [] 8) -> #f"]}
{"time": 1.207623, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 9) -> #f", "(member [5 6 8 2] 6) -> #t", "(member [5 4 2] 9) -> #f", "(member [] 8) -> #f", "(member [] 7) -> #f", "(member [] 3) -> #f", "(member [6 5 0 9 8] 0) -> #t", "(member [] 6) -> #f", "(member [2 0] 8) -> #f", "(member [2 1 5 6 1] 6) -> #t", "(member [] 3) -> #f", "(member [3 4] 6) -> #f", "(member [0 0 0 3 4] 9) -> #f", "(member [] 1) -> #f", "(member [] 1) -> #f", "(member [0 9] 9) -> #t", "(member [7 3 0 4 6] 9) -> #f", "(member [4] 6) -> #f", "(member [] 5) -> #f", "(member [6 3] 6) -> #t", "(member [] 6) -> #f", "(member [] 0) -> #f", "(member [6 5] 4) -> #f", "(member [] 3) -> #f", "(member [5 2 9] 2) -> #t", "(member [0 1 3 5] 6) -> #f", "(member [5] 3) -> #f", "(member [7 1 6 3 5] 7) -> #t", "(member [4 4 1] 4) -> #t", "(member [8] 4) -> #f", "(member [] 3) -> #f", "(member [6 5] 0) -> #f", "(member [4 8 7 7] 3) -> #f", "(member [2 5] 5) -> #t", "(member [8 3 9 5 7] 7) -> #t", "(member [] 8) -> #f", "(member [] 6) -> #f", "(member [8 2 4] 1) -> #f", "(member [] 1) -> #f", "(member [5 2 6 8 0] 8) -> #t", "(member [3 3 5] 5) -> #t", "(member [6 1 7 5] 3) -> #f", "(member [6 7 7 7] 8) -> #f", "(member [5 0] 3) -> #f", "(member [7 3] 5) -> #f", "(member [] 4) -> #f", "(member [3 2 3] 3) -> #t", "(member [] 7) -> #f", "(member [6 9 1 4 9] 8) -> #f", "(member [5 0 7 1] 4) -> #f", "(member [] 4) -> #f", "(member [5 4] 2) -> #f", "(member [5 8 2 7 1] 3) -> #f", "(member [] 3) -> #f", "(member [1 4 6] 3) -> #f", "(member [2 1] 6) -> #f", "(member [] 1) -> #f", "(member [9] 9) -> #t", "(member [1 6 7] 9) -> #f", "(member [] 1) -> #f", "(member [] 2) -> #f", "(member [0 9 2 8 4] 3) -> #f", "(member [4] 2) -> #f", "(member [2 5 3 9] 6) -> #f", "(member [0 4 5] 4) -> #t", "(member [3 4 2 4 8] 8) -> #t", "(member [6 3] 7) -> #f", "(member [9 8 9 9 0] 0) -> #t", "(member [9 5 6 2 3] 3) -> #t", "(member [0 1] 0) -> #t", "(member [1] 4) -> #f", "(member [6 9] 4) -> #f", "(member [3 1 7 4] 4) -> #t", "(member [2 8 8] 1) -> #f", "(member [3 1 8] 4) -> #f", "(member [6] 2) -> #f", "(member [3 5 0] 3) -> #t", "(member [8 8 7 8 9] 8) -> #t", "(member [6] 1) -> #f", "(member [7 3 2 4] 2) -> #t", "(member [8] 4) -> #f", "(member [1 1 9 0 3] 0) -> #t", "(member [1] 4) -> #f", "(member [] 5) -> #f", "(member [3 4 6 2] 8) -> #f", "(member [] 8) -> #f", "(member [0] 4) -> #f", "(member [1 1 4] 2) -> #f", "(member [9 9 6 5 5] 9) -> #t", "(member [5 0 7 7] 6) -> #f", "(member [2 0 8] 5) -> #f", "(member [6 7 7 1] 9) -> #f"]}
{"time": 1.166688, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 7) -> #f", "(member [7 5 3] 1) -> #f", "(member [0 0 7 4 3] 0) -> #t", "(member [6 5 7 5] 3) -> #f", "(member [0 5 0 3 2] 0) -> #t", "(member [1 9 3 0 4] 0) -> #t", "(member [5 7 6 8] 9) -> #f", "(member [] 6) -> #f", "(member [] 9) -> #f", "(member [2 1 6 1 9] 4) -> #f", "(member [] 8) -> #f", "(member [9 7 3] 1) -> #f", "(member [] 8) -> #f", "(member [9 6 7] 0) -> #f", "(member [7 4 6 6] 6) -> #t", "(member [6 5 4 9 5] 6) -> #t", "(member [9] 1) -> #f", "(member [5 9 0 2 1] 6) -> #f", "(member [] 7) -> #f", "(member [5 2 9 9 1] 8) -> #f", "(member [3 8 0 8] 2) -> #f", "(member [6 4] 9) -> #f", "(member [2] 9) -> #f", "(member [6] 1) -> #f", "(member [2 7] 7) -> #t", "(member [4] 9) -> #f", "(member [4 5 1 0 6] 5) -> #t", "(member [] 9) -> #f", "(member [9 4 8] 9) -> #t", "(member [5 2 2] 1) -> #f", "(member [] 3) -> #f", "(member [7 0 4 3 4] 6) -> #f", "(member [7 1 3 9] 5) -> #f", "(member [4 8 4 7] 5) -> #f", "(member [1 5 4] 0) -> #f", "(member [6 0 4 8 9] 8) -> #t", "(member [7 9 4 3] 6) -> #f", "(member [] 7) -> #f", "(member [2 9 2] 5) -> #f", "(member [] 5) -> #f", "(member [4 3 3] 9) -> #f", "(member [4 6 0] 8) -> #f", "(member [8 1 3 0 9] 7) -> #f", "(member [9 2 1 6 3] 3) -> #t", "(member [5 1] 1) -> #t", "(member [7 4 1] 7) -> #t", "(member [2 1 6 0] 7) -> #f", "(member [9 3] 4) -> #f", "(member [] 8) -> #f", "(member [8 0] 7) -> #f", "(member [7] 2) -> #f", "(member [5 9 8 3 4] 6) -> #f", "(member [5 0] 8) -> #f", "(member [7 4] 1) -> #f", "(member [] 8) -> #f", "(member [4 3 0] 6) -> #f", "(member [3 8 3] 1) -> #f", "(member [5 5 3] 3) -> #t", "(member [] 0) -> #f", "(member [5 8 1] 5) -> #t", "(member [4] 9) -> #f", "(member [8] 9) -> #f", "(member [3 0] 1) -> #f", "(member [5 9] 5) -> #t", "(member [7 8 4] 6) -> #f", "(member [1 5] 2) -> #f", "(member [0 2 7 2] 5) -> #f", "(member [6 0] 8) -> #f", "(member [8 9 6 4] 2) -> #f", "(member [9 0 8] 8) -> #t", "(member [] 9) -> #f", "(member [1 9 4 6] 1) -> #t", "(member [8] 9) -> #f", "(member [1 6 9 8 7] 0) -> #f", "(member [] 8) -> #f", "(member [8 8] 1) -> #f", "(member [2 8 1 7] 0) -> #f", "(member [1 8 0] 6) -> #f", "(member [] 8) -> #f", "(member [4 3 8 7] 3) -> #t", "(member [1] 4) -> #f", "(member [1] 8) -> #f", "(member [0 2 7 2 5] 0) -> #t", "(member [0 3 9 3] 6) -> #f", "(member [9] 0) -> #f", "(member [8] 0) -> #f", "(member [9] 5) -> #f", "(member [0 1] 9) -> #f", "(member [2] 2) -> #t", "(member [8 9 8 4 2] 4) -> #t", "(member [8 5] 7) -> #f", "(member [9] 0) -> #f"]}
{"time": 1.242347, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 3) -> #f", "(member [3 8 8 5 9] 5) -> #t", "(member [9 8 1 1] 4) -> #f", "(member [9 4 6 9] 4) -> #t", "(member [6] 6) -> #t", "(member [4] 0) -> #f", "(member [0 9] 0) -> #t", "(member [4 6] 8) -> #f", "(member [] 2) -> #f", "(member [2 7 0 3 8] 0) -> #t", "(member [2 5 2 1 1] 3) -> #f", "(member [] 2) -> #f", "(member [2 7] 6) -> #f", "(member [0] 1) -> #f", "(member [] 2) -> #f", "(member [5 6] 8) -> #f", "(member [9 8 7] 4) -> #f", "(member [0] 2) -> #f", "(member [0 9] 6) -> #f", "(member [5 7] 6) -> #f", "(member [4 7 9 9] 6) -> #f", "(member [3] 0) -> #f", "(member [9 4 1 6 4] 9) -> #t", "(member [0 5 5] 5) -> #t", "(member [2 1] 6) -> #f", "(member [9 2 2] 4) -> #f", "(member [] 2) -> #f", "(member [3 2 1 9] 1) -> #t", "(member [1] 6) -> #f", "(member [7] 6) -> #f", "(member [8] 9) -> #f", "(member [2 9] 8) -> #f", "(member [0 8 9 2 1] 2) -> #t", "(member [1 6 3 0 8] 4) -> #f", "(member [] 0) -> #f", "(member [7 4 4 8 2] 5) -> #f", "(member [2] 6) -> #f", "(member [7] 2) -> #f", "(member [9 6 3 5] 0) -> #f", "(member [9] 4) -> #f", "(member [0 7] 6) -> #f", "(member [3 8 7 1 5] 0) -> #f", "(member [6 8 3 3] 1) -> #f", "(member [] 3) -> #f", "(member [6 8 4 2] 0) -> #f", "(member [3] 0) -> #f", "(member [5 7 8 4 0] 8) -> #t", "(member [6 2] 6) -> #t", "(member [] 3) -> #f", "(member [2 8] 7) -> #f", "(member [0] 2) -> #f", "(member [] 2) -> #f", "(member [] 8) -> #f", "(member [9 5 7 9] 9) -> #t", "(member [2 5 5 9 2] 7) -> #f", "(member [] 9) -> #f", "(member [4 5] 7) -> #f", "(member [3 3] 9) -> #f", "(member [9 9 6] 4) -> #f", "(member [5 1 9 9] 2) -> #f", "(member [4] 4) -> #t", "(member [5 8 9 0 0] 8) -> #t", "(member [2 1 3 5] 9) -> #f", "(member [7] 4) -> #f", "(member [8 4 2] 8) -> #t", "(member [7 9] 8) -> #f", "(member [4 2 4 4 2] 9) -> #f", "(member [8 7 1] 1) -> #t", "(member [2 6 1 5] 1) -> #t", "(member [1 0 8 4] 9) -> #f", "(member [5 5 3] 1) -> #f", "(member [7 9 5] 5) -> #t", "(member [4 2 8] 1) -> #f", "(member [5 6] 5) -> #t", "(member [1] 7) -> #f", "(member [1 8 1 0] 2) -> #f", "(member [0] 2) -> #f", "(member [8 1 2 6] 5) -> #f", "(member [0 8 2 5] 9) -> #f", "(member [3 3 9 4 8] 4) -> #t", "(member [0 0 5 5] 3) -> #f", "(member [0] 8) -> #f", "(member [5 8 9] 7) -> #f", "(member [3] 2) -> #f", "(member [2 1] 6) -> #f", "(member [] 7) -> #f", "(member [9 5 0 0 2] 9) -> #t", "(member [4 5] 0) -> #f", "(member [1 1 7] 3) -> #f", "(member [] 0) -> #f", "(member [5 4 9 1] 5) -> #t", "(member [3 4 5 4 6] 2) -> #f"]}
{"time": 1.244884, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 3) -> #f", "(member [8] 0) -> #f", "(member [5 8 8] 2) -> #f", "(member [7 6 4] 9) -> #f", "(member [6] 1) -> #f", "(member [7 2 5] 5) -> #t", "(member [4 3 2] 5) -> #f", "(member [3 3 9 9 0] 0) -> #t", "(member [6 4 0] 7) -> #f", "(member [8 8 6] 6) -> #t", "(member [] 9) -> #f", "(member [1 4 4] 0) -> #f", "(member [5 2 3] 2) -> #t", "(member [2 9 0 3 9] 4) -> #f", "(member [0 1 6 3 2] 1) -> #t", "(member [] 0) -> #f", "(member [2 2 6 7 5] 5) -> #t", "(member [3 7 7] 4) -> #f", "(member [9] 9) -> #t", "(member [2 2 7 2] 7) -> #t", "(member [4 9 6 3 1] 9) -> #t", "(member [4 1 8] 9) -> #f", "(member [0 4] 8) -> #f", "(member [9 0 4 8 9] 5) -> #f", "(member [0] 7) -> #f", "(member [9 3 3] 2) -> #f", "(member [0 4 9 0] 4) -> #t", "(member [2] 1) -> #f", "(member [] 8) -> #f", "(member [] 3) -> #f", "(member [2 2 4 7 8] 0) -> #f", "(member [] 0) -> #f", "(member [1 2 4 5 9] 3) -> #f", "(member [4 9 5 0] 7) -> #f", "(member [1 9] 1) -> #t", "(member [4 3] 9) -> #f", "(member [2 0] 2) -> #t", "(member [6 2 4 5 6] 1) -> #f", "(member [9 5 1] 4) -> #f", "(member [5 7 2 0 0] 6) -> #f", "(member [8 3 7] 5) -> #f", "(member [8 8 8] 1) -> #f", "(member [7 5 0] 0) -> #t", "(member [5 7 5 6] 5) -> #t", "(member [] 2) -> #f", "(member [2 8 7 9 0] 0) -> #t", "(member [] 2) -> #f", "(member [] 4) -> #f", "(member [8 7 4] 3) -> #f", "(member [3] 9) -> #f", "(member [2 3 4] 0) -> #f", "(member [7 1 5 9 3] 9) -> #t", "(member [3] 2) -> #f", "(member [0 6 4] 5) -> #f", "(member [4 3 8] 0) -> #f", "(member [6 0 9] 7) -> #f", "(member [] 8) -> #f", "(member [6] 5) -> #f", "(member [1 8] 0) -> #f", "(member [6 2 1 5] 6) -> #t", "(member [4 1 3 7 2] 7) -> #t", "(member [2 1 6] 3) -> #f", "(member [6 9 6 4] 7) -> #f", "(member [7 7 1 2 1] 1) -> #t", "(member [] 6) -> #f", "(member [6] 6) -> #t", "(member [0 9 3 1 7] 9) -> #t", "(member [0 0 8 3] 0) -> #t", "(member [9 9] 6) -> #f", "(member [3 0 7] 3) -> #t", "(member [4 6 8 2 9] 0) -> #f", "(member [4] 0) -> #f", "(member [5 0 1 9 0] 3) -> #f", "(member [2 4 1] 8) -> #f", "(member [5 0 8 7 0] 1) -> #f", "(member [9 7 4 0 3] 5) -> #f", "(member [2 1] 9) -> #f", "(member [5 2] 7) -> #f", "(member [5 8 4 5] 1) -> #f", "(member [4 1 9 1 3] 7) -> #f", "(member [] 7) -> #f", "(member [3 8 1 5 1] 2) -> #f", "(member [5] 5) -> #t", "(member [2 8 3 7] 4) -> #f", "(member [3 4 3] 4) -> #t", "(member [7 7 6 0] 7) -> #t", "(member [6 1] 6) -> #t", "(member [9 2 9] 1) -> #f", "(member [9 1 3 6] 5) -> #f", "(member [6] 7) -> #f", "(member [8 5 5 0 1] 5) -> #t", "(member [1 1 2 8] 3) -> #f"]}
{"time": 1.252857, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 9) -> #f", "(member [9 6 5 3] 5) -> #t", "(member [] 3) -> #f", "(member [4 3 2 4 5] 6) -> #f", "(member [0 5 4 8 5] 1) -> #f", "(member [3 0 7 8] 6) -> #f", "(member [] 5) -> #f", "(member [6] 5) -> #f", "(member [9 2 4] 4) -> #t", "(member [0 5 0 6] 7) -> #f", "(member [4 4 7] 0) -> #f", "(member [0] 8) -> #f", "(member [] 2) -> #f", "(member [9 6 8 0 0] 6) -> #t", "(member [3 2 5 7 0] 1) -> #f", "(member [7 7 5 9] 5) -> #t", "(member [1] 3) -> #f", "(member [] 7) -> #f", "(member [2 2 3] 2) -> #t", "(member [6 1 2] 3) -> #f", "(member [] 0) -> #f", "(member [7 6 3] 4) -> #f", "(member [7 1 0 3] 8) -> #f", "(member [5 9 5 5 6] 4) -> #f", "(member [1 9 8 2 9] 4) -> #f", "(member [5 8] 7) -> #f", "(member [5 0] 5) -> #t", "(member [0 7] 1) -> #f", "(member [] 6) -> #f", "(member [9 7 9 2 4] 7) -> #t", "(member [] 8) -> #f", "(member [2 8] 9) -> #f", "(member [] 3) -> #f", "(member [8 0 9 1 9] 7) -> #f", "(member [9] 9) -> #t", "(member [0 4 2 7] 0) -> #t", "(member [2 4 4] 4) -> #t", "(member [9] 4) -> #f", "(member [1 1 3 0] 6) -> #f", "(member [5 8 2 2] 4) -> #f", "(member [4 7 9 9] 2) -> #f", "(member [3 5 5 6] 9) -> #f", "(member [7] 2) -> #f", "(member [9 9 8 4 1] 3) -> #f", "(member [3] 7) -> #f", "(member [] 4) -> #f", "(member [7 2 1] 7) -> #t", "(member [1 7 4 0] 3) -> #f", "(member [5 4] 2) -> #f", "(member [] 1) -> #f", "(member [] 7) -> #f", "(member [8 8] 5) -> #f", "(member [9] 0) -> #f", "(member [0 4 1 0 5] 5) -> #t", "(member [4 6 1] 0) -> #f", "(member [8 1 6 1] 8) -> #t", "(member [7 3 7 6] 2) -> #f", "(member [9 5 7] 7) -> #t", "(member [3 9] 3) -> #t", "(member [] 4) -> #f", "(member [] 5) -> #f", "(member [1] 8) -> #f", "(member [6 7] 7) -> #t", "(member [0 3 6 8] 6) -> #t", "(member [5] 1) -> #f", "(member [1 0 8] 8) -> #t", "(member [1 5] 3) -> #f", "(member [3 3 6 3 3] 1) -> #f", "(member [4 5] 4) -> #t", "(member [0 3 4 0 1] 0) -> #t", "(member [4 9] 9) -> #t", "(member [4 3 7] 6) -> #f", "(member [7 4] 7) -> #t", "(member [1 8 8] 8) -> #t", "(member [1 0] 8) -> #f", "(member [8 8 5 1 4] 6) -> #f", "(member [] 8) -> #f", "(member [7 5 2 4] 3) -> #f", "(member [1 5 9 4] 4) -> #t", "(member [8 1 9 5 9] 2) -> #f", "(member [0 5 7 7 4] 4) -> #t", "(member [3] 1) -> #f", "(member [] 6) -> #f", "(member [8 5 2] 3) -> #f", "(member [9 7] 0) -> #f", "(member [6] 2) -> #f", "(member [8 9 3 5] 1) -> #f", "(member [5 7 0 7] 5) -> #t", "(member [0 6 4] 3) -> #f", "(member [5 2] 5) -> #t", "(member [] 7) -> #f", "(member [5] 7) -> #f"]}
{"time": 1.237755, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 2) -> #f", "(member [4 3 5] 9) -> #f", "(member [0 2] 8) -> #f", "(member [7 9 5 8] 5) -> #t", "(member [6] 8) -> #f", "(member [1] 4) -> #f", "(member [8 1 5 6] 1) -> #t", "(member [3 6] 4) -> #f", "(member [8] 9) -> #f", "(member [3] 2) -> #f", "(member [3] 6) -> #f", "(member [5] 5) -> #t", "(member [0 3 4 1 1] 7) -> #f", "(member [] 1) -> #f", "(member [2] 4) -> #f", "(member [2 8 5] 8) -> #t", "(member [7 6 6 6] 0) -> #f", "(member [3] 5) -> #f", "(member [3 3 4 9 1] 6) -> #f", "(member [2 6 7] 7) -> #t", "(member [6 9 1 1] 9) -> #t", "(member [0 2 1] 5) -> #f", "(member [] 7) -> #f", "(member [1] 5) -> #f", "(member [7 2 9 2 2] 6) -> #f", "(member [8 3 3 9] 8) -> #t", "(member [1 1] 8) -> #f", "(member [] 3) -> #f", "(member [7] 6) -> #f", "(member [6] 4) -> #f", "(member [2 9 4 8 9] 8) -> #t", "(member [3 9 2 2] 4) -> #f", "(member [7 5] 4) -> #f", "(member [] 2) -> #f", "(member [0] 3) -> #f", "(member [2 7 4] 1) -> #f", "(member [5 1 2 2 3] 4) -> #f", "(member [1 1 5 7] 7) -> #t", "(member [6] 4) -> #f", "(member [0 1 2] 2) -> #t", "(member [5 2 2 2 2] 6) -> #f", "(member [0] 1) -> #f", "(member [3 2 6] 7) -> #f", "(member [7 7 0 9] 8) -> #f", "(member [7] 2) -> #f", "(member [2] 6) -> #f", "(member [0 1 1 6] 4) -> #f", "(member [6 3 9 7] 2) -> #f", "(member [0] 4) -> #f", "(member [3] 2) -> #f", "(member [0] 4) -> #f", "(member [0] 8) -> #f", "(member [5 4 5] 0) -> #f", "(member [] 1) -> #f", "(member [0] 2) -> #f", "(member [1] 5) -> #f", "(member [] 0) -> #f", "(member [] 1) -> #f", "(member [1 7] 7) -> #t", "(member [4 8 3 5 8] 3) -> #t", "(member [1] 6) -> #f", "(member [1 1] 4) -> #f", "(member [] 5) -> #f", "(member [6 4] 9) -> #f", "(member [6 3 6 9 1] 7) -> #f", "(member [0 2] 4) -> #f", "(member [7 4 5] 4) -> #t", "(member [] 4) -> #f", "(member [6 7 6 8] 0) -> #f", "(member [9 4 6] 7) -> #f", "(member [] 5) -> #f", "(member [] 7) -> #f", "(member [4] 2) -> #f", "(member [2 0 8] 9) -> #f", "(member [6 0 1] 6) -> #t", "(member [1 2 2 1 9] 0) -> #f", "(member [2 8 9] 3) -> #f", "(member [9] 2) -> #f", "(member [1 9 8] 3) -> #f", "(member [6 4 5 5] 4) -> #t", "(member [5 3 9 5] 3) -> #t", "(member [3 6] 7) -> #f", "(member [6] 5) -> #f", "(member [9 1 6] 2) -> #f", "(member [] 8) -> #f", "(member [3 1 7 9] 3) -> #t", "(member [3] 5) -> #f", "(member [3] 3) -> #t", "(member [2 0 0] 2) -> #t", "(member [5 6 4] 4) -> #t", "(member [2 2 4 1] 2) -> #t", "(member [2 7 2] 9) -> #f"]}
{"time": 1.320427, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 9) -> #f", "(member [6 4 2 4 2] 3) -> #f", "(member [9 4] 1) -> #f", "(member [] 2) -> #f", "(member [8 4 8] 9) -> #f", "(member [7 2 6 3 8] 6) -> #t", "(member [8] 0) -> #f", "(member [1 9 8 4 0] 4) -> #t", "(member [3] 6) -> #f", "(member [4 2 7 3] 1) -> #f", "(member [9 7 8 9] 5) -> #f", "(member [3 1 5 2] 7) -> #f", "(member [4 7] 4) -> #t", "(member [1 1 7 7] 5) -> #f", "(member [9] 5) -> #f", "(member [2 6 3 2] 1) -> #f", "(member [0 5 4 9 5] 3) -> #f", "(member [9 9] 9) -> #t", "(member [] 2) -> #f", "(member [9 8 3] 3) -> #t", "(member [1] 9) -> #f", "(member [5] 6) -> #f", "(member [8] 6) -> #f", "(member [5 9 1] 0) -> #f", "(member [3 9] 1) -> #f", "(member [3 6 5 3 9] 0) -> #f", "(member [] 1) -> #f", "(member [8 0] 9) -> #f", "(member [3 6 3 4] 1) -> #f", "(member [6 7 3] 4) -> #f", "(member [] 8) -> #f", "(member [] 9) -> #f", "(member [] 5) -> #f", "(member [3 8 0 0] 1) -> #f", "(member [1] 4) -> #f", "(member [9] 8) -> #f", "(member [4 7 6] 3) -> #f", "(member [1 0 1 6 1] 3) -> #f", "(member [6 1 0 8 3] 0) -> #t", "(member [7 9 8 4 4] 9) -> #t", "(member [3 3 4 8] 4) -> #t", "(member [1 4 4 0 9] 7) -> #f", "(member [6 0] 4) -> #f", "(member [9 3] 5) -> #f", "(member [2 6 3 2] 7) -> #f", "(member [] 1) -> #f", "(member [7 8 1 1] 2) -> #f", "(member [0 0 7 2] 2) -> #t", "(member [3] 9) -> #f", "(member [9 7 0 5 5] 6) -> #f", "(member [7 8 3] 2) -> #f", "(member [1 0 1 4] 4) -> #t", "(member [0 5 4] 6) -> #f", "(member [8 1 7 7 5] 8) -> #t", "(member [9 2 2 4] 1) -> #f", "(member [6] 3) -> #f", "(member [7 4 7] 0) -> #f", "(member [0 1 2 4] 6) -> #f", "(member [0] 4) -> #f", "(member [2 9 2 7] 2) -> #t", "(member [] 7) -> #f", "(member [8 6 2 1 5] 0) -> #f", "(member [6] 6) -> #t", "(member [0 6 6 2] 4) -> #f", "(member [] 7) -> #f", "(member [1] 8) -> #f", "(member [5] 7) -> #f", "(member [9] 5) -> #f", "(member [0 5 1 0] 1) -> #t", "(member [] 8) -> #f", "(member [6 0 8] 7) -> #f", "(member [] 6) -> #f", "(member [3] 0) -> #f", "(member [8 9] 1) -> #f", "(member [4 9 9 9 5] 7) -> #f", "(member [3 7] 8) -> #f", "(member [] 5) -> #f", "(member [4] 2) -> #f", "(member [4] 7) -> #f", "(member [9] 7) -> #f", "(member [3 0] 9) -> #f", "(member [] 3) -> #f", "(member [0 3] 5) -> #f", "(member [] 4) -> #f", "(member [1] 0) -> #f", "(member [2 3 1 9 9] 0) -> #f", "(member [2 8] 6) -> #f", "(member [2] 4) -> #f", "(member [2 1] 1) -> #t", "(member [4 0 8] 6) -> #f", "(member [4 8 7] 9) -> #f", "(member [8 6 4 9 1] 4) -> #t"]}
{"time": 1.325601, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 3) -> #f", "(member [5] 7) -> #f", "(member [7 6 2] 8) -> #f", "(member [3 2 3 2] 8) -> #f", "(member [1 1 0 3 8] 5) -> #f", "(member [1 1 6 7 7] 5) -> #f", "(member [] 4) -> #f", "(member [3 9] 2) -> #f", "(member [6 3 0 0 8] 4) -> #f", "(member [] 4) -> #f", "(member [9] 4) -> #f", "(member [0 5 2] 0) -> #t", "(member [7 5 8 3] 0) -> #f", "(member [0 1 4 2 2] 4) -> #t", "(member [2 6 4 3] 6) -> #t", "(member [0 5 7] 1) -> #f", "(member [] 5) -> #f", "(member [0 2] 9) -> #f", "(member [9 1 7] 1) -> #t", "(member [1 8 8 1 5] 8) -> #t", "(member [7 8 4] 5) -> #f", "(member [] 2) -> #f", "(member [7 7 4] 4) -> #t", "(member [5 2] 5) -> #t", "(member [5 5 0] 2) -> #f", "(member [4 0 4 6 9] 5) -> #f", "(member [0] 9) -> #f", "(member [1] 2) -> #f", "(member [3 0 0] 6) -> #f", "(member [7 7] 8) -> #f", "(member [9 2] 5) -> #f", "(member [6 6 8 1 8] 2) -> #f", "(member [] 7) -> #f", "(member [0 5 4 6 4] 7) -> #f", "(member [1] 7) -> #f", "(member [8 4 7 3] 9) -> #f", "(member [2 5 4 2] 1) -> #f", "(member [2 2] 0) -> #f", "(member [3] 5) -> #f", "(member [2 4] 6) -> #f", "(member [0 4 5 2 4] 8) -> #f", "(member [0 3] 2) -> #f", "(member [1 7 4 6] 1) -> #t", "(member [6 9] 7) -> #f", "(member [0] 0) -> #t", "(member [2 6 8] 2) -> #t", "(member [7 0 7 1 8] 5) -> #f", "(member [3 7 3 1 3] 7) -> #t", "(member [0] 4) -> #f", "(member [5 4 7 1] 9) -> #f", "(member [4 0 1] 0) -> #t", "(member [8 4 5] 0) -> #f", "(member [6 8 2] 8) -> #t", "(member [8 6 4 4 1] 9) -> #f", "(member [1] 0) -> #f", "(member [6 4 0] 6) -> #t", "(member [0 7 9] 5) -> #f", "(member [7 7 6] 0) -> #f", "(member [3 7 9 8] 6) -> #f", "(member [1 5 5 7] 2) -> #f", "(member [5 5 1 7 4] 9) -> #f", "(member [5 3 2] 0) -> #f", "(member [7] 2) -> #f", "(member [9 3 5] 0) -> #f", "(member [] 3) -> #f", "(member [2 6 3 5] 9) -> #f", "(member [6] 1) -> #f", "(member [9 2 5] 6) -> #f", "(member [9] 5) -> #f", "(member [2 9 3 4 2] 1) -> #f", "(member [1 2 0 2] 3) -> #f", "(member [] 6) -> #f", "(member [] 7) -> #f", "(member [7 5 9 1] 6) -> #f", "(member [0 8 2 0] 5) -> #f", "(member [5] 4) -> #f", "(member [4 3 7 4] 7) -> #t", "(member [3 8 9 7] 7) -> #t", "(member [7 0 9 3 9] 1) -> #f", "(member [2 0] 2) -> #t", "(member [5 0 5 8 3] 5) -> #t", "(member [] 4) -> #f", "(member [9 5 5] 7) -> #f", "(member [2] 4) -> #f", "(member [9 2 9 5 1] 6) -> #f", "(member [3 3 1 7 5] 5) -> #t", "(member [7 1 7] 4) -> #f", "(member [1 4] 5) -> #f", "(member [3 2] 8) -> #f", "(member [7 3 0 8] 2) -> #f", "(member [8 3] 6) -> #f", "(member [4 4 0] 7) -> #f"]}
{"time": 0.981486, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (= e (!= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 8) -> #f", "(member [9 7 0 5 6] 2) -> #f", "(member [5 2] 4) -> #f", "(member [9 5] 5) -> #t", "(member [] 2) -> #f", "(member [] 9) -> #f", "(member [7 3] 6) -> #f", "(member [5 3 4 3] 8) -> #f", "(member [2] 1) -> #f", "(member [1 0 3 1] 9) -> #f", "(member [6 1 9 0] 8) -> #f", "(member [] 4) -> #f", "(member [] 7) -> #f", "(member [0 4 7] 9) -> #f", "(member [] 6) -> #f", "(member [6 6 2 9 0] 8) -> #f", "(member [9 2 9 5] 5) -> #t", "(member [0 3] 1) -> #f", "(member [9 5] 0) -> #f", "(member [9 1] 0) -> #f", "(member [3 2 5] 5) -> #t", "(member [8 2 4 6 4] 6) -> #t", "(member [2 4 9] 6) -> #f", "(member [] 3) -> #f", "(member [4 0 2 4] 0) -> #t", "(member [5 3 9 4] 7) -> #f", "(member [1 4 3 2 8] 0) -> #f", "(member [7 1] 5) -> #f", "(member [8] 3) -> #f", "(member [4] 6) -> #f", "(member [6 4 8] 9) -> #f", "(member [4 1 8 9] 8) -> #t", "(member [4 7 0] 8) -> #f", "(member [] 6) -> #f", "(member [] 3) -> #f", "(member [0] 2) -> #f", "(member [9 3 3] 1) -> #f", "(member [] 2) -> #f", "(member [9 5] 7) -> #f", "(member [] 7) -> #f", "(member [2 9 8 6 9] 2) -> #t", "(member [9 9 2 4 0] 0) -> #t", "(member [8 9 2] 1) -> #f", "(member [1 6] 7) -> #f", "(member [5] 7) -> #f", "(member [0 9] 0) -> #t", "(member [9 7 0 7 1] 8) -> #f", "(member [9 9 5 9] 8) -> #f", "(member [3] 7) -> #f", "(member [8 1 4 9 8] 9) -> #t", "(member [7 3] 2) -> #f", "(member [6 0] 7) -> #f", "(member [0 0 0] 4) -> #f", "(member [9 5 1 2] 7) -> #f", "(member [3 3 5 5] 8) -> #f", "(member [3 3 5 7 7] 6) -> #f", "(member [] 6) -> #f", "(member [] 8) -> #f", "(member [6] 6) -> #t", "(member [] 9) -> #f", "(member [] 6) -> #f", "(member [3 0 2 9] 0) -> #t", "(member [] 4) -> #f", "(member [3 5 4 7 6] 3) -> #t", "(member [] 9) -> #f", "(member [8 5 7] 6) -> #f", "(member [5] 2) -> #f", "(member [8 8] 7) -> #f", "(member [9 2 3 5 0] 3) -> #t", "(member [1 4 8 2] 0) -> #f", "(member [0 2 4 4] 8) -> #f", "(member [] 3) -> #f", "(member [3] 9) -> #f", "(member [] 0) -> #f", "(member [1 6 9 8] 8) -> #t", "(member [3 0 2 3 8] 7) -> #f", "(member [9 9 6] 5) -> #f", "(member [6 7] 3) -> #f", "(member [7] 2) -> #f", "(member [] 3) -> #f", "(member [6] 3) -> #f", "(member [7 0 1 9 2] 9) -> #t", "(member [8 2] 4) -> #f", "(member [] 1) -> #f", "(member [8 1 3] 0) -> #f", "(member [4] 6) -> #f", "(member [2 8 9 4] 5) -> #f", "(member [8 8 3 3] 0) -> #f", "(member [9 3 4 4] 1) -> #f", "(member [9 6] 1) -> #f", "(member [4 6] 0) -> #f", "(member [8 5] 2) -> #f"]}
{"time": 1.034781, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 9) -> #f", "(member [4 2 6 2] 5) -> #f", "(member [2 9] 6) -> #f", "(member [7 4 1] 8) -> #f", "(member [8 1 0 4] 8) -> #t", "(member [4 0 7] 5) -> #f", "(member [5] 6) -> #f", "(member [] 7) -> #f", "(member [0 9] 4) -> #f", "(member [2] 2) -> #t", "(member [6] 4) -> #f", "(member [4 4] 7) -> #f", "(member [8] 1) -> #f", "(member [3 2 5] 2) -> #t", "(member [7 6 3 3] 3) -> #t", "(member [4 5] 2) -> #f", "(member [7] 5) -> #f", "(member [] 3) -> #f", "(member [0 3 3 9] 5) -> #f", "(member [3 4 6 0 3] 4) -> #t", "(member [7 3 9 3] 5) -> #f", "(member [1 2 0 2 6] 5) -> #f", "(member [0 0 8 7 0] 3) -> #f", "(member [5 0 1 7 2] 1) -> #t", "(member [8 2 6 2] 7) -> #f", "(member [2 3 1] 8) -> #f", "(member [] 2) -> #f", "(member [4 6 0 1 3] 0) -> #t", "(member [0] 1) -> #f", "(member [] 1) -> #f", "(member [2 6 9] 7) -> #f", "(member [0 8 3 0] 0) -> #t", "(member [] 9) -> #f", "(member [1 1 6] 9) -> #f", "(member [3] 8) -> #f", "(member [6] 1) -> #f", "(member [] 8) -> #f", "(member [9] 5) -> #f", "(member [6 8 3] 4) -> #f", "(member [4 6 5 9] 9) -> #t", "(member [7 6 4 1] 1) -> #t", "(member [7 3 5 7] 7) -> #t", "(member [] 6) -> #f", "(member [6 0 8 3 9] 8) -> #t", "(member [0 1 4] 3) -> #f", "(member [2 0 6 2] 0) -> #t", "(member [7] 4) -> #f", "(member [2] 9) -> #f", "(member [8 5 5] 8) -> #t", "(member [1 4] 3) -> #f", "(member [6 6] 8) -> #f", "(member [8 3 6 9 7] 7) -> #t", "(member [] 0) -> #f", "(member [1 0 3 4 0] 7) -> #f", "(member [5] 1) -> #f", "(member [4 0] 8) -> #f", "(member [3 0 8 2] 8) -> #t", "(member [9 7 9 9 2] 1) -> #f", "(member [] 7) -> #f", "(member [4] 5) -> #f", "(member [9] 8) -> #f", "(member [8] 4) -> #f", "(member [1 7 4 9] 7) -> #t", "(member [0] 0) -> #t", "(member [8 2 7 7] 0) -> #f", "(member [6 2] 2) -> #t", "(member [5 9 1 9] 6) -> #f", "(member [2 1 8 5] 2) -> #t", "(member [1 7 8 2 8] 6) -> #f", "(member [1 9 1] 4) -> #f", "(member [3] 7) -> #f", "(member [] 8) -> #f", "(member [7] 2) -> #f", "(member [6 4 9] 4) -> #t", "(member [9 0 1] 9) -> #t", "(member [] 6) -> #f", "(member [0 4] 4) -> #t", "(member [9 7 6] 5) -> #f", "(member [7 5] 8) -> #f", "(member [5 7 9 0 6] 1) -> #f", "(member [5 3 5 9 3] 8) -> #f", "(member [7 2 4] 0) -> #f", "(member [9 5 7] 0) -> #f", "(member [4 3] 1) -> #f", "(member [7 6 6] 6) -> #t", "(member [] 9) -> #f", "(member [0 0 4 1 9] 3) -> #f", "(member [] 8) -> #f", "(member [5 4 9 5] 3) -> #f", "(member [] 3) -> #f", "(member [1 1 1] 3) -> #f", "(member [8 1 0 0 4] 2) -> #f"]}
{"time": 0.926199, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 4) -> #f", "(member [7 4 0] 4) -> #t", "(member [] 8) -> #f", "(member [8 6 4 7] 1) -> #f", "(member [1] 1) -> #t", "(member [5 7 9] 0) -> #f", "(member [8 5 7 4] 2) -> #f", "(member [0 3] 9) -> #f", "(member [] 5) -> #f", "(member [5] 8) -> #f", "(member [9] 0) -> #f", "(member [5 0 6 3 8] 6) -> #t", "(member [8 1 0] 4) -> #f", "(member [9 1 7 6 7] 4) -> #f", "(member [8 3] 0) -> #f", "(member [3 6 2 7] 4) -> #f", "(member [6 6 2 8 2] 3) -> #f", "(member [8 2 1 5 0] 5) -> #t", "(member [7 4 5 7] 2) -> #f", "(member [4 9 7 1 2] 1) -> #t", "(member [6 4] 2) -> #f", "(member [5 4 9] 2) -> #f", "(member [5 4] 6) -> #f", "(member [3 0 1 9] 0) -> #t", "(member [6 0 0 4 1] 4) -> #t", "(member [3] 6) -> #f", "(member [9 9] 4) -> #f", "(member [9 7 4 1 7] 5) -> #f", "(member [6 2 4 6] 4) -> #t", "(member [0 8 6 8] 1) -> #f", "(member [6 1] 0) -> #f", "(member [6] 3) -> #f", "(member [6 7 2 1] 1) -> #t", "(member [1 4 6 6 5] 7) -> #f", "(member [] 3) -> #f", "(member [9] 0) -> #f", "(member [1 7] 3) -> #f", "(member [] 6) -> #f", "(member [1 3 8 8 0] 3) -> #t", "(member [3] 4) -> #f", "(member [0 9 0] 4) -> #f", "(member [6 5 3 5] 7) -> #f", "(member [4 3 1 5] 4) -> #t", "(member [9] 4) -> #f", "(member [9 6 8] 0) -> #f", "(member [3 6] 0) -> #f", "(member [8 0] 8) -> #t", "(member [1 6] 8) -> #f", "(member [] 0) -> #f", "(member [] 9) -> #f", "(member [3 6] 7) -> #f", "(member [6 2 3] 5) -> #f", "(member [0 3] 7) -> #f", "(member [4 2 9 1] 2) -> #t", "(member [] 6) -> #f", "(member [] 0) -> #f", "(member [3 8 9 7 6] 3) -> #t", "(member [9] 7) -> #f", "(member [] 6) -> #f", "(member [7] 1) -> #f", "(member [0 7] 8) -> #f", "(member [9 6] 0) -> #f", "(member [3 5 6 6] 9) -> #f", "(member [7] 5) -> #f", "(member [3 3 6 1] 0) -> #f", "(member [1 5 1 4 4] 1) -> #t", "(member [1 4 0 3 4] 1) -> #t", "(member [] 3) -> #f", "(member [3 3 8 7 1] 9) -> #f", "(member [8 9 1 2 1] 9) -> #t", "(member [8 5 7 5 7] 5) -> #t", "(member [8 4 2] 0) -> #f", "(member [5 3 4] 7) -> #f", "(member [] 1) -> #f", "(member [7 8 8 5 4] 4) -> #t", "(member [3 5 4] 5) -> #t", "(member [] 2) -> #f", "(member [1 3] 1) -> #t", "(member [0 9 9 1] 4) -> #f", "(member [0] 2) -> #f", "(member [] 0) -> #f", "(member [2 0] 1) -> #f", "(member [] 4) -> #f", "(member [] 9) -> #f", "(member [8 4] 5) -> #f", "(member [] 8) -> #f", "(member [5 0 9] 0) -> #t", "(member [5] 0) -> #f", "(member [7 6] 2) -> #f", "(member [1 4 9 4 2] 2) -> #t", "(member [9 9 3 0 2] 5) -> #f", "(member [4 0] 4) -> #t"]}
{"time": 0.954392, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 8) -> #f", "(member [1 0] 9) -> #f", "(member [4 2 5] 6) -> #f", "(member [9 0 2 5 8] 1) -> #f", "(member [3 8 0 5 4] 3) -> #t", "(member [1 8] 4) -> #f", "(member [8] 1) -> #f", "(member [] 2) -> #f", "(member [1 1 6] 4) -> #f", "(member [] 7) -> #f", "(member [8 9 5] 6) -> #f", "(member [5 2 9 5] 4) -> #f", "(member [] 0) -> #f", "(member [] 7) -> #f", "(member [3 5 8 3] 2) -> #f", "(member [9 9 6 0] 5) -> #f", "(member [3 3] 1) -> #f", "(member [] 9) -> #f", "(member [4] 5) -> #f", "(member [3 2 8 9 2] 1) -> #f", "(member [] 2) -> #f", "(member [5 5 0 1 2] 8) -> #f", "(member [1 3 4 6] 3) -> #t", "(member [8 0 0 3] 2) -> #f", "(member [7 4 2 3 3] 8) -> #f", "(member [2 8 1 4] 6) -> #f", "(member [7 6 9] 5) -> #f", "(member [7] 3) -> #f", "(member [5 9 0 1 0] 0) -> #t", "(member [8 4] 3) -> #f", "(member [5 6 9 4 1] 2) -> #f", "(member [2] 2) -> #t", "(member [1 9] 1) -> #t", "(member [] 5) -> #f", "(member [3 6 1 2] 6) -> #t", "(member [6 5 6 5 1] 3) -> #f", "(member [8 5 6 3 2] 8) -> #t", "(member [] 2) -> #f", "(member [3 8 8 4 8] 3) -> #t", "(member [4 2 3 4] 8) -> #f", "(member [4 9 1 3] 7) -> #f", "(member [0 3] 9) -> #f", "(member [6 8 2] 7) -> #f", "(member [4 6] 2) -> #f", "(member [0 3] 3) -> #t", "(member [6 2] 0) -> #f", "(member [6 5] 8) -> #f", "(member [8 9 6] 7) -> #f", "(member [6 9 8 1 5] 3) -> #f", "(member [3 0] 9) -> #f", "(member [] 4) -> #f", "(member [8 5 1] 9) -> #f", "(member [5 1 8 8] 6) -> #f", "(member [0 3 8 3] 4) -> #f", "(member [1 7 1] 3) -> #f", "(member [0 4 4 3] 0) -> #t", "(member [6 8] 6) -> #t", "(member [0] 6) -> #f", "(member [9 6 4] 8) -> #f", "(member [0 3 8 7 1] 9) -> #f", "(member [9 5] 6) -> #f", "(member [0 0] 1) -> #f", "(member [4 0] 8) -> #f", "(member [5 3 3 1 3] 4) -> #f", "(member [1 3] 1) -> #t", "(member [2 2] 5) -> #f", "(member [] 0) -> #f", "(member [8 6 7] 7) -> #t", "(member [8 4 7 3 2] 2) -> #t", "(member [5] 2) -> #f", "(member [2 9] 8) -> #f", "(member [7] 3) -> #f", "(member [8 7 5 6 7] 6) -> #t", "(member [8 0] 6) -> #f", "(member [5 4 3] 4) -> #t", "(member [4 6 2 0] 3) -> #f", "(member [5] 6) -> #f", "(member [2 4 7 0 1] 6) -> #f", "(member [9 8 5 6] 6) -> #t", "(member [7] 2) -> #f", "(member [2 0 6 2] 8) -> #f", "(member [2] 7) -> #f", "(member [4 7 2] 2) -> #t", "(member [9 9 1 9] 6) -> #f", "(member [7] 3) -> #f", "(member [0] 1) -> #f", "(member [5 9] 0) -> #f", "(member [2 2 4] 4) -> #t", "(member [2 5 1 9 8] 3) -> #f", "(member [] 0) -> #f", "(member [1 4 2] 9) -> #f", "(member [2] 4) -> #f"]}
{"time": 1.033977, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 7) -> #f", "(member [] 7) -> #f", "(member [] 9) -> #f", "(member [9 6 3] 2) -> #f", "(member [8 6 3 6] 3) -> #t", "(member [2] 6) -> #f", "(member [6 3 9 8 2] 4) -> #f", "(member [0 5 9 9 6] 2) -> #f", "(member [] 5) -> #f", "(member [4 3] 9) -> #f", "(member [4 8 4] 1) -> #f", "(member [8 4 1] 2) -> #f", "(member [0 7] 1) -> #f", "(member [3 2] 3) -> #t", "(member [5 1 1] 2) -> #f", "(member [1 9 7 4 9] 3) -> #f", "(member [0] 7) -> #f", "(member [0 4 1 5] 0) -> #t", "(member [2 0 8 7 3] 3) -> #t", "(member [3] 6) -> #f", "(member [0 8 4 6 8] 9) -> #f", "(member [3 2 7 8 2] 6) -> #f", "(member [7] 4) -> #f", "(member [1 9 7] 3) -> #f", "(member [5 3] 7) -> #f", "(member [2 4 2 7] 4) -> #t", "(member [] 7) -> #f", "(member [0 5 0] 0) -> #t", "(member [] 8) -> #f", "(member [] 2) -> #f", "(member [5 0 2 7] 1) -> #f", "(member [4] 7) -> #f", "(member [5 5 4 2 6] 5) -> #t", "(member [] 3) -> #f", "(member [9 5] 2) -> #f", "(member [3] 7) -> #f", "(member [8 7] 9) -> #f", "(member [0 9 2 6 6] 0) -> #t", "(member [6 2 4 2] 9) -> #f", "(member [4 5 8] 1) -> #f", "(member [1] 4) -> #f", "(member [] 0) -> #f", "(member [3 7 3 2] 8) -> #f", "(member [] 0) -> #f", "(member [9 5 0 3] 8) -> #f", "(member [8 8 7 6] 0) -> #f", "(member [] 5) -> #f", "(member [5 5 6 4 3] 8) -> #f", "(member [7 6] 2) -> #f", "(member [5 5] 4) -> #f", "(member [6 4 4 2 6] 5) -> #f", "(member [] 3) -> #f", "(member [] 8) -> #f", "(member [3 5 8] 4) -> #f", "(member [0 5 5 3 7] 0) -> #t", "(member [0] 0) -> #t", "(member [2 7 8 2] 0) -> #f", "(member [5 0 2 4 2] 8) -> #f", "(member [8 4] 3) -> #f", "(member [4 9 1 4 0] 3) -> #f", "(member [6 1] 7) -> #f", "(member [6 0 7 1 6] 2) -> #f", "(member [] 9) -> #f", "(member [] 3) -> #f", "(member [6 4] 2) -> #f", "(member [4 0 0 7] 6) -> #f", "(member [4] 2) -> #f", "(member [] 3) -> #f", "(member [2] 5) -> #f", "(member [0 8 4 0] 4) -> #t", "(member [5] 1) -> #f", "(member [] 1) -> #f", "(member [8 8 7 9 1] 8) -> #t", "(member [6 9 7 9] 1) -> #f", "(member [] 8) -> #f", "(member [9] 2) -> #f", "(member [2 2 7 3] 8) -> #f", "(member [0 8 2 2] 9) -> #f", "(member [9 0 1] 5) -> #f", "(member [4 0] 9) -> #f", "(member [0 5 8 8] 8) -> #t", "(member [6 8 8] 7) -> #f", "(member [4 8 6 4] 6) -> #t", "(member [] 6) -> #f", "(member [1 1 1 7] 2) -> #f", "(member [1 0 9 8 7] 8) -> #t", "(member [] 4) -> #f", "(member [8 1 6 4 1] 9) -> #f", "(member [] 1) -> #f", "(member [4 8 6] 7) -> #f", "(member [] 7) -> #f", "(member [] 3) -> #f"]}
{"time": 1.166125, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 2) -> #f", "(member [5 4 9 1 4] 7) -> #f", "(member [2] 1) -> #f", "(member [7] 7) -> #t", "(member [6 9 0] 5) -> #f", "(member [6] 3) -> #f", "(member [5] 4) -> #f", "(member [7 4 7 2 2] 9) -> #f", "(member [3] 7) -> #f", "(member [7 9 7 0] 2) -> #f", "(member [5 6 4] 7) -> #f", "(member [5 4 7 4] 0) -> #f", "(member [5 5 6] 0) -> #f", "(member [] 6) -> #f", "(member [5 9 3 9] 0) -> #f", "(member [0] 0) -> #t", "(member [] 8) -> #f", "(member [8] 4) -> #f", "(member [6 9 7 5 6] 4) -> #f", "(member [4] 0) -> #f", "(member [4 5 4] 0) -> #f", "(member [1 6 5 1 9] 2) -> #f", "(member [6] 0) -> #f", "(member [2] 2) -> #t", "(member [] 1) -> #f", "(member [5 9 9 8 8] 0) -> #f", "(member [] 4) -> #f", "(member [6] 8) -> #f", "(member [4 8 6 5 9] 9) -> #t", "(member [2 8 5 3 4] 8) -> #t", "(member [9 0 1 7] 9) -> #t", "(member [8 9 1] 0) -> #f", "(member [5 8] 6) -> #f", "(member [] 3) -> #f", "(member [7 9 8 7] 6) -> #f", "(member [] 5) -> #f", "(member [5 2] 1) -> #f", "(member [] 1) -> #f", "(member [2 1 5 1 6] 1) -> #t", "(member [9 7] 9) -> #t", "(member [4 9 9 5] 4) -> #t", "(member [4 0 5] 7) -> #f", "(member [3 6 7 9] 7) -> #t", "(member [6 0 0] 7) -> #f", "(member [0 2 5 1] 2) -> #t", "(member [] 7) -> #f", "(member [] 0) -> #f", "(member [2 1] 2) -> #t", "(member [4] 6) -> #f", "(member [] 2) -> #f", "(member [4 7 3 1] 7) -> #t", "(member [5 5 0 4] 9) -> #f", "(member [] 6) -> #f", "(member [4 7 0] 9) -> #f", "(member [0 0] 8) -> #f", "(member [2] 1) -> #f", "(member [5 3 3] 2) -> #f", "(member [1 1 7 9 9] 1) -> #t", "(member [0] 1) -> #f", "(member [9 8 9 6] 1) -> #f", "(member [9 4] 2) -> #f", "(member [0 9] 0) -> #t", "(member [6] 2) -> #f", "(member [1 0] 7) -> #f", "(member [3 3 9 6 8] 5) -> #f", "(member [] 3) -> #f", "(member [2 4 3] 7) -> #f", "(member [8 6 6 5] 1) -> #f", "(member [5 8 8 6 9] 7) -> #f", "(member [6 7 7] 4) -> #f", "(member [1 4 3 1] 4) -> #t", "(member [6 6 9 6 4] 8) -> #f", "(member [4 6 1 9 5] 2) -> #f", "(member [6] 5) -> #f", "(member [6 5] 4) -> #f", "(member [2 4] 3) -> #f", "(member [2 4 1] 8) -> #f", "(member [0 4 8 6 2] 0) -> #t", "(member [8 6 8 9 4] 0) -> #f", "(member [6 7 0 2 0] 3) -> #f", "(member [6 4] 7) -> #f", "(member [] 9) -> #f", "(member [9 9 8 7] 6) -> #f", "(member [] 3) -> #f", "(member [4 1 1 9] 6) -> #f", "(member [9 0 6 7 3] 2) -> #f", "(member [] 8) -> #f", "(member [2 5 3] 2) -> #t", "(member [1 1 7 7] 1) -> #t", "(member [8 3 1 4 5] 0) -> #f", "(member [2 3 1 4 0] 9) -> #f", "(member [3 4 3 2 2] 7) -> #f"]}
{"time": 1.092283, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (= e (!= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 3) -> #f", "(member [] 2) -> #f", "(member [9 7 2 7] 1) -> #f", "(member [8 8 1 7] 2) -> #f", "(member [4 4 4] 3) -> #f", "(member [6 0 0 4 3] 6) -> #t", "(member [1 9] 6) -> #f", "(member [4 8 0 7 4] 7) -> #t", "(member [] 2) -> #f", "(member [] 4) -> #f", "(member [6] 5) -> #f", "(member [5] 0) -> #f", "(member [4 3 7 7 3] 8) -> #f", "(member [4] 4) -> #t", "(member [8] 0) -> #f", "(member [4] 6) -> #f", "(member [9] 5) -> #f", "(member [9 1 7 8] 1) -> #t", "(member [3 6 1 6 4] 2) -> #f", "(member [8 0] 5) -> #f", "(member [2] 2) -> #t", "(member [4 6 7 3] 4) -> #t", "(member [1 6 9 7] 5) -> #f", "(member [7 5] 5) -> #t", "(member [3] 8) -> #f", "(member [8 7 7 8 8] 4) -> #f", "(member [0 0 1 5] 1) -> #t", "(member [9 5 4] 3) -> #f", "(member [7 1] 9) -> #f", "(member [1 6] 5) -> #f", "(member [4 2 0 3 2] 5) -> #f", "(member [] 6) -> #f", "(member [5] 0) -> #f", "(member [7 5 4] 9) -> #f", "(member [2 1 5] 7) -> #f", "(member [3 4 7 7 7] 9) -> #f", "(member [0 7 0 2 4] 3) -> #f", "(member [4 8 3 1] 5) -> #f", "(member [7 9 9 9] 7) -> #t", "(member [9 3] 2) -> #f", "(member [] 6) -> #f", "(member [7 5] 5) -> #t", "(member [2 2 1 7] 5) -> #f", "(member [4 5] 9) -> #f", "(member [4 4] 0) -> #f", "(member [3 2 4 5 1] 3) -> #t", "(member [1] 3) -> #f", "(member [7 6 7] 6) -> #t", "(member [3 6] 8) -> #f", "(member [0] 6) -> #f", "(member [8 8 0] 6) -> #f", "(member [2 3] 6) -> #f", "(member [1] 0) -> #f", "(member [2 6 6] 2) -> #t", "(member [2] 5) -> #f", "(member [4 2 4 1 1] 7) -> #f", "(member [3 2 8 4] 2) -> #t", "(member [2 7] 7) -> #t", "(member [5 2 3] 4) -> #f", "(member [3 8 4 2] 8) -> #t", "(member [] 3) -> #f", "(member [] 8) -> #f", "(member [1 0 1 1 5] 4) -> #f", "(member [] 7) -> #f", "(member [7 8 0] 5) -> #f", "(member [] 6) -> #f", "(member [8 7 3] 1) -> #f", "(member [] 6) -> #f", "(member [8 9 5 8] 7) -> #f", "(member [7 9 3 7] 1) -> #f", "(member [3 6 3] 8) -> #f", "(member [7 2 2 1 5] 7) -> #t", "(member [5 7 4 0] 1) -> #f", "(member [6 5] 9) -> #f", "(member [8 4 9 3] 1) -> #f", "(member [1 7 7] 6) -> #f", "(member [7 0 8 6 9] 5) -> #f", "(member [3 7] 6) -> #f", "(member [2] 1) -> #f", "(member [6 9 0 7 1] 5) -> #f", "(member [0 0 3 3 0] 5) -> #f", "(member [2 6 4 0 7] 3) -> #f", "(member [7 4 1] 7) -> #t", "(member [0 4 3 7] 3) -> #t", "(member [9 0] 5) -> #f", "(member [] 8) -> #f", "(member [8] 3) -> #f", "(member [5 4 4 5 6] 0) -> #f", "(member [4 0] 2) -> #f", "(member [4 3 4 2 4] 1) -> #f", "(member [1] 0) -> #f", "(member [4 9 8] 4) -> #t"]}
{"time": 1.076003, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 5) -> #f", "(member [9 5 5 4 2] 0) -> #f", "(member [7 2 6 6 0] 4) -> #f", "(member [] 8) -> #f", "(member [0 7 1 2] 4) -> #f", "(member [8] 6) -> #f", "(member [] 7) -> #f", "(member [5 7] 3) -> #f", "(member [7 1 8] 0) -> #f", "(member [4 5 4 2 9] 6) -> #f", "(member [4 2 7] 4) -> #t", "(member [8 7 7] 0) -> #f", "(member [8 3] 0) -> #f", "(member [6] 4) -> #f", "(member [4] 0) -> #f", "(member [1 8] 3) -> #f", "(member [6 2] 1) -> #f", "(member [3 6 9] 7) -> #f", "(member [8 7 4] 2) -> #f", "(member [] 5) -> #f", "(member [7 1] 4) -> #f", "(member [] 4) -> #f", "(member [5] 4) -> #f", "(member [8 0 2 3 1] 3) -> #t", "(member [4 0 7] 1) -> #f", "(member [0 5 4 0 7] 2) -> #f", "(member [2] 9) -> #f", "(member [9 0 3 5 7] 2) -> #f", "(member [4 2 1 6] 9) -> #f", "(member [2 4] 4) -> #t", "(member [1 0 7 2 0] 9) -> #f", "(member [2 3 2 9] 3) -> #t", "(member [] 9) -> #f", "(member [5 9 9 9] 3) -> #f", "(member [] 3) -> #f", "(member [9 7 0 2] 3) -> #f", "(member [6] 4) -> #f", "(member [9 3 4] 8) -> #f", "(member [9 2 8 8] 2) -> #t", "(member [] 1) -> #f", "(member [0] 9) -> #f", "(member [] 8) -> #f", "(member [9 4 9 9 2] 7) -> #f", "(member [4 3 2] 6) -> #f", "(member [2 9 2 7] 8) -> #f", "(member [2] 5) -> #f", "(member [5 6 8] 0) -> #f", "(member [7 3 6] 1) -> #f", "(member [1] 3) -> #f", "(member [] 2) -> #f", "(member [] 6) -> #f", "(member [4] 3) -> #f", "(member [2 8 1] 6) -> #f", "(member [9 6] 3) -> #f", "(member [3] 7) -> #f", "(member [4 9 8 0 7] 1) -> #f", "(member [0 9 1 5 5] 1) -> #t", "(member [2 0 7] 7) -> #t", "(member [1 4 2] 4) -> #t", "(member [9 1 8 1 0] 0) -> #t", "(member [1 1] 3) -> #f", "(member [9] 7) -> #f", "(member [9 8] 3) -> #f", "(member [5] 6) -> #f", "(member [4 9 7 1 7] 9) -> #t", "(member [8] 0) -> #f", "(member [6] 1) -> #f", "(member [0 3 8] 6) -> #f", "(member [8 8 6 1] 4) -> #f", "(member [] 8) -> #f", "(member [2 9] 7) -> #f", "(member [7] 3) -> #f", "(member [] 6) -> #f", "(member [8 4 0 2] 0) -> #t", "(member [3] 4) -> #f", "(member [] 1) -> #f", "(member [8 6 3 5] 4) -> #f", "(member [2 8 8 3 0] 5) -> #f", "(member [4 8 4 8] 9) -> #f", "(member [6 4 6 7 5] 2) -> #f", "(member [5 4 8 0 3] 8) -> #t", "(member [] 3) -> #f", "(member [4] 6) -> #f", "(member [1] 8) -> #f", "(member [7 7 7 6] 0) -> #f", "(member [] 9) -> #f", "(member [3 2 1 5] 6) -> #f", "(member [8 7 5 7] 7) -> #t", "(member [1 6 0 3] 5) -> #f", "(member [7 6 8 1] 4) -> #f", "(member [4] 2) -> #f", "(member [5 0 8 5] 9) -> #f"]}
{"time": 1.220847, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 2) -> #f", "(member [0] 9) -> #f", "(member [5 9] 5) -> #t", "(member [4 1] 5) -> #f", "(member [2 0 7 0 4] 4) -> #t", "(member [] 7) -> #f", "(member [] 9) -> #f", "(member [3] 2) -> #f", "(member [9 6 0] 0) -> #t", "(member [2 9 7] 0) -> #f", "(member [0 4] 0) -> #t", "(member [6 1 6 5] 5) -> #t", "(member [2 3] 8) -> #f", "(member [5 9 6] 0) -> #f", "(member [4 4] 6) -> #f", "(member [4 5 7 1 6] 6) -> #t", "(member [4 1 3] 9) -> #f", "(member [2 2 6] 5) -> #f", "(member [6 7] 8) -> #f", "(member [2 9 3 5] 7) -> #f", "(member [6 0 3 9] 4) -> #f", "(member [9 5 5] 3) -> #f", "(member [0 9 2 0] 1) -> #f", "(member [6 9 1 5 5] 8) -> #f", "(member [1 1 1] 6) -> #f", "(member [4 9] 1) -> #f", "(member [1 5 1] 5) -> #t", "(member [0 5] 2) -> #f", "(member [0 6 9] 5) -> #f", "(member [6 4 7] 2) -> #f", "(member [9] 8) -> #f", "(member [7 8] 3) -> #f", "(member [] 1) -> #f", "(member [4 3 3 8 6] 3) -> #t", "(member [4 8 5 2] 8) -> #t", "(member [3 1] 9) -> #f", "(member [7 3 5 6] 2) -> #f", "(member [8] 9) -> #f", "(member [] 4) -> #f", "(member [] 5) -> #f", "(member [1 8 5 7 9] 8) -> #t", "(member [5 5 8] 9) -> #f", "(member [5 6 8 6 7] 4) -> #f", "(member [5 4] 8) -> #f", "(member [4 1 7] 0) -> #f", "(member [4 2] 9) -> #f", "(member [5] 8) -> #f", "(member [] 3) -> #f", "(member [] 2) -> #f", "(member [1] 1) -> #t", "(member [4 9] 0) -> #f", "(member [5 5 8] 3) -> #f", "(member [7 1 5 0] 4) -> #f", "(member [3 7] 4) -> #f", "(member [4 7] 2) -> #f", "(member [9 5 5 1 7] 9) -> #t", "(member [0 0 7] 5) -> #f", "(member [] 0) -> #f", "(member [5 1] 1) -> #t", "(member [8 3] 0) -> #f", "(member [5 8 1] 1) -> #t", "(member [1 6 7] 2) -> #f", "(member [2 2 9 6] 6) -> #t", "(member [] 2) -> #f", "(member [9 9 4 4 7] 2) -> #f", "(member [8 8 7 1 0] 2) -> #f", "(member [] 1) -> #f", "(member [9 5 4 9] 1) -> #f", "(member [3 8 7] 7) -> #t", "(member [5] 9) -> #f", "(member [2 4 1] 3) -> #f", "(member [1 4 2 2] 8) -> #f", "(member [7 5] 3) -> #f", "(member [4 7 7] 7) -> #t", "(member [3 1 2 3] 5) -> #f", "(member [9 1 3] 1) -> #t", "(member [0 1 3 1] 9) -> #f", "(member [3 7 3 2 6] 0) -> #f", "(member [] 0) -> #f", "(member [9 8] 9) -> #t", "(member [] 0) -> #f", "(member [6 2 6 5] 0) -> #f", "(member [9 2 9 3] 9) -> #t", "(member [4] 9) -> #f", "(member [1 0 0 4 3] 0) -> #t", "(member [] 0) -> #f", "(member [6] 1) -> #f", "(member [8 6 3 2] 2) -> #t", "(member [0 8 3 9] 5) -> #f", "(member [8 1 0 7 6] 3) -> #f", "(member [3 9 9 3] 4) -> #f", "(member [7 1 8] 5) -> #f"]}
{"time": 1.315875, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 6) -> #f", "(member [8 4 1 9 3] 8) -> #t", "(member [3 3] 0) -> #f", "(member [0 8 3 9] 3) -> #t", "(member [8 2 7] 0) -> #f", "(member [7 1 3 8] 0) -> #f", "(member [0] 9) -> #f", "(member [0 0 9] 4) -> #f", "(member [7 4 9] 0) -> #f", "(member [] 3) -> #f", "(member [4 8 0 1 1] 3) -> #f", "(member [2 3] 7) -> #f", "(member [1 6 6 0 7] 4) -> #f", "(member [1 6 4] 5) -> #f", "(member [0 4 6 1 7] 3) -> #f", "(member [5 4] 6) -> #f", "(member [4 1 2 2 8] 8) -> #t", "(member [9 9 5 4] 3) -> #f", "(member [0 1 1 7 0] 2) -> #f", "(member [] 0) -> #f", "(member [] 3) -> #f", "(member [2 5 7 3] 2) -> #t", "(member [0] 7) -> #f", "(member [] 3) -> #f", "(member [1 6 4] 4) -> #t", "(member [0 8 9 9] 7) -> #f", "(member [4 2 7] 6) -> #f", "(member [] 0) -> #f", "(member [6] 9) -> #f", "(member [5] 2) -> #f", "(member [5] 1) -> #f", "(member [] 0) -> #f", "(member [6 9] 8) -> #f", "(member [5 0] 1) -> #f", "(member [] 3) -> #f", "(member [5] 6) -> #f", "(member [1 8 5 2] 0) -> #f", "(member [2 1] 5) -> #f", "(member [4 0 0] 1) -> #f", "(member [5] 3) -> #f", "(member [2 6 1] 9) -> #f", "(member [0 4 1] 6) -> #f", "(member [4 4 3] 0) -> #f", "(member [8 4 4 2 6] 4) -> #t", "(member [] 9) -> #f", "(member [5 4 1 0 6] 4) -> #t", "(member [4 8 9 9 8] 1) -> #f", "(member [8 0] 2) -> #f", "(member [] 0) -> #f", "(member [3 1] 5) -> #f", "(member [8 1] 1) -> #t", "(member [9 7 1] 2) -> #f", "(member [1 9 8] 8) -> #t", "(member [] 0) -> #f", "(member [1 3 8 6 5] 2) -> #f", "(member [] 0) -> #f", "(member [3 9 0 4 1] 1) -> #t", "(member [8 2] 4) -> #f", "(member [0] 0) -> #t", "(member [] 3) -> #f", "(member [] 8) -> #f", "(member [0] 8) -> #f", "(member [8 9 0] 4) -> #f", "(member [3 1] 0) -> #f", "(member [6 4 3] 1) -> #f", "(member [] 2) -> #f", "(member [0 3 7] 7) -> #t", "(member [8] 5) -> #f", "(member [6 7 7 8 8] 4) -> #f", "(member [7 4] 5) -> #f", "(member [1 1 6] 6) -> #t", "(member [7 7] 3) -> #f", "(member [4 8 3 2 3] 0) -> #f", "(member [] 7) -> #f", "(member [] 1) -> #f", "(member [6 0 8] 3) -> #f", "(member [] 0) -> #f", "(member [5 1 9] 9) -> #t", "(member [] 1) -> #f", "(member [8 6 4] 8) -> #t", "(member [4 3 0] 3) -> #t", "(member [1 8 6 6 7] 4) -> #f", "(member [5] 7) -> #f", "(member [0 9 6 9] 2) -> #f", "(member [8 2] 7) -> #f", "(member [] 7) -> #f", "(member [5] 0) -> #f", "(member [] 3) -> #f", "(member [2] 3) -> #f", "(member [1 1 3 2 5] 6) -> #f", "(member [9] 8) -> #f", "(member [1 5 0 3 8] 4) -> #f"]}
{"time": 1.461128, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 7) -> #f", "(member [6 8 6] 3) -> #f", "(member [1 7] 4) -> #f", "(member [] 1) -> #f", "(member [6 7 5 7 3] 0) -> #f", "(member [] 2) -> #f", "(member [8 1] 0) -> #f", "(member [2 8 9 5] 5) -> #t", "(member [8 5 0 7] 8) -> #t", "(member [8 5 5 8 1] 2) -> #f", "(member [6 9 8 7 9] 8) -> #t", "(member [8] 5) -> #f", "(member [] 9) -> #f", "(member [2] 7) -> #f", "(member [7 3] 3) -> #t", "(member [6 5 7] 1) -> #f", "(member [] 3) -> #f", "(member [] 4) -> #f", "(member [9] 3) -> #f", "(member [0 1 5] 5) -> #t", "(member [0] 9) -> #f", "(member [8 4 9] 8) -> #t", "(member [2 1] 7) -> #f", "(member [] 4) -> #f", "(member [] 6) -> #f", "(member [0 3 3 5 4] 7) -> #f", "(member [6 1 0 6] 8) -> #f", "(member [1] 6) -> #f", "(member [4 8 5 8] 5) -> #t", "(member [2 3] 2) -> #t", "(member [0] 3) -> #f", "(member [7 1] 3) -> #f", "(member [2 0 6 6 5] 8) -> #f", "(member [4 4] 5) -> #f", "(member [5 8 6] 9) -> #f", "(member [5 5 5 3 1] 8) -> #f", "(member [3 4 0] 6) -> #f", "(member [1 5 5 8] 8) -> #t", "(member [6 3 9 9] 3) -> #t", "(member [5 7 8 7 9] 7) -> #t", "(member [3 3 3] 5) -> #f", "(member [4] 0) -> #f", "(member [3 6] 0) -> #f", "(member [3 2 8 9] 5) -> #f", "(member [4 0 5] 9) -> #f", "(member [7 4 4 9] 5) -> #f", "(member [2 3] 6) -> #f", "(member [7 8 1 6 9] 9) -> #t", "(member [4 0 0 3 7] 3) -> #t", "(member [] 8) -> #f", "(member [5 8 3] 2) -> #f", "(member [6] 7) -> #f", "(member [8 5 7 8 1] 3) -> #f", "(member [4 8 4 6 7] 2) -> #f", "(member [4] 9) -> #f", "(member [2 4 8 8] 9) -> #f", "(member [8 2 1 8 0] 1) -> #t", "(member [7 2] 0) -> #f", "(member [4 5 6 6 4] 6) -> #t", "(member [0 2 4 7 1] 4) -> #t", "(member [4] 2) -> #f", "(member [] 3) -> #f", "(member [5 7 5 0] 1) -> #f", "(member [9 1] 4) -> #f", "(member [3 7 3 9] 0) -> #f", "(member [9 1 0] 6) -> #f", "(member [9 1] 7) -> #f", "(member [] 0) -> #f", "(member [1 8 2] 5) -> #f", "(member [7] 8) -> #f", "(member [8 5 2 2] 5) -> #t", "(member [5 2 2 7 5] 0) -> #f", "(member [5 1] 5) -> #t", "(member [5 1] 3) -> #f", "(member [9] 0) -> #f", "(member [7 1 1 0 3] 1) -> #t", "(member [6] 2) -> #f", "(member [9 7 9 9 8] 5) -> #f", "(member [9] 4) -> #f", "(member [8] 3) -> #f", "(member [2 5 2 1] 0) -> #f", "(member [9 8 1] 0) -> #f", "(member [5 9 4 2] 1) -> #f", "(member [7 1] 8) -> #f", "(member [2 4 8] 1) -> #f", "(member [9 6 0 3] 2) -> #f", "(member [8 0] 9) -> #f", "(member [9 1 4 7 6] 6) -> #t", "(member [8 6 2 0 8] 9) -> #f", "(member [5 7 6] 6) -> #t", "(member [2 2 9] 1) -> #f", "(member [5 8 7 7] 4) -> #f"]}
{"time": 1.451018, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 8) -> #f", "(member [3 4 1 6] 5) -> #f", "(member [8 4] 6) -> #f", "(member [1] 6) -> #f", "(member [6 0 2] 9) -> #f", "(member [3 4 2 0] 7) -> #f", "(member [2 3] 6) -> #f", "(member [0 4 3 1 3] 1) -> #t", "(member [2] 9) -> #f", "(member [9 0 7] 8) -> #f", "(member [1] 1) -> #t", "(member [1 8 4 6] 1) -> #t", "(member [6] 3) -> #f", "(member [7 6 6 4] 6) -> #t", "(member [3 8] 9) -> #f", "(member [2 9] 3) -> #f", "(member [0 6 8 4] 5) -> #f", "(member [3 5 1 2] 0) -> #f", "(member [2 9 9 4 3] 9) -> #t", "(member [9 3 2 1] 3) -> #t", "(member [9 2 0] 9) -> #t", "(member [2 6] 3) -> #f", "(member [2 0 1] 6) -> #f", "(member [9 9 2] 7) -> #f", "(member [2 5 9 6 3] 1) -> #f", "(member [8] 9) -> #f", "(member [2 6 3] 2) -> #t", "(member [2 2 7] 8) -> #f", "(member [3 9 0 1 0] 6) -> #f", "(member [] 6) -> #f", "(member [] 4) -> #f", "(member [7 0 3 9] 3) -> #t", "(member [5] 1) -> #f", "(member [2] 8) -> #f", "(member [] 6) -> #f", "(member [4 1] 5) -> #f", "(member [] 2) -> #f", "(member [9 8 3] 2) -> #f", "(member [] 4) -> #f", "(member [] 7) -> #f", "(member [0] 8) -> #f", "(member [6 6 7] 1) -> #f", "(member [5] 2) -> #f", "(member [5 9 3 7 3] 5) -> #t", "(member [] 4) -> #f", "(member [5 6 9 1 1] 6) -> #t", "(member [1 5 3 3 1] 2) -> #f", "(member [1 2] 4) -> #f", "(member [] 7) -> #f", "(member [9 3 4] 0) -> #f", "(member [1] 6) -> #f", "(member [1 3] 5) -> #f", "(member [6 9] 6) -> #t", "(member [3 4 2] 0) -> #f", "(member [] 3) -> #f", "(member [0 5 7 4 1] 4) -> #t", "(member [] 8) -> #f", "(member [] 7) -> #f", "(member [1 7 1] 2) -> #f", "(member [7 0 5 8 1] 8) -> #t", "(member [1 1 0 0 7] 7) -> #t", "(member [2 0 2 5 6] 4) -> #f", "(member [4] 3) -> #f", "(member [] 4) -> #f", "(member [3 7 6 7] 6) -> #t", "(member [] 5) -> #f", "(member [8 2 8 8] 0) -> #f", "(member [6 3 8 0] 0) -> #t", "(member [3 2 3] 3) -> #t", "(member [] 3) -> #f", "(member [2 6 8 1] 1) -> #t", "(member [3 6 7 0] 4) -> #f", "(member [2 7 7 1] 8) -> #f", "(member [2 3 3 5] 5) -> #t", "(member [] 0) -> #f", "(member [3 9] 3) -> #t", "(member [8] 8) -> #t", "(member [4 0 2 4 2] 0) -> #t", "(member [] 6) -> #f", "(member [1 1 2] 5) -> #f", "(member [] 2) -> #f", "(member [3 8 9] 4) -> #f", "(member [1 6 9 7] 4) -> #f", "(member [2] 5) -> #f", "(member [7 1 2] 1) -> #t", "(member [1 7 9] 2) -> #f", "(member [3 3] 4) -> #f", "(member [7 5 0] 6) -> #f", "(member [0 5 3 7 8] 4) -> #f", "(member [6] 9) -> #f", "(member [3 8 8] 3) -> #t", "(member [7 0 6 3 8] 6) -> #t"]}
{"time": 1.373058, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 3) -> #f", "(member [2 8 1 1] 9) -> #f", "(member [9] 2) -> #f", "(member [4 1 5 3] 6) -> #f", "(member [6 7] 1) -> #f", "(member [9 0 3 9] 3) -> #t", "(member [2 1 5 2 9] 3) -> #f", "(member [0 8] 1) -> #f", "(member [7] 5) -> #f", "(member [] 4) -> #f", "(member [6 2 9] 3) -> #f", "(member [6 6 6] 0) -> #f", "(member [] 4) -> #f", "(member [] 0) -> #f", "(member [] 1) -> #f", "(member [] 4) -> #f", "(member [8] 7) -> #f", "(member [0 5] 1) -> #f", "(member [] 3) -> #f", "(member [2 4 7] 2) -> #t", "(member [] 2) -> #f", "(member [6] 7) -> #f", "(member [7 3] 8) -> #f", "(member [5] 2) -> #f", "(member [4 8 3 8] 9) -> #f", "(member [2 5 4 2] 6) -> #f", "(member [7 7] 4) -> #f", "(member [8 8] 1) -> #f", "(member [] 8) -> #f", "(member [6 9 3 6] 3) -> #t", "(member [6 4 1 7 8] 8) -> #t", "(member [4 8 1 6] 6) -> #t", "(member [3 7 9] 5) -> #f", "(member [6 8 6 4 2] 4) -> #t", "(member [2 4] 8) -> #f", "(member [2 5 3] 7) -> #f", "(member [1 5 0 4] 3) -> #f", "(member [] 0) -> #f", "(member [] 1) -> #f", "(member [] 8) -> #f", "(member [1] 0) -> #f", "(member [0 9 6] 3) -> #f", "(member [8 9 1] 5) -> #f", "(member [8 0] 0) -> #t", "(member [] 9) -> #f", "(member [6 0 5] 9) -> #f", "(member [4 6] 1) -> #f", "(member [9] 8) -> #f", "(member [4 5 6 7 5] 3) -> #f", "(member [9 5 5 9 0] 0) -> #t", "(member [1 9 3 8 0] 3) -> #t", "(member [] 5) -> #f", "(member [6 2] 9) -> #f", "(member [4 0 6] 1) -> #f", "(member [9 7 9] 5) -> #f", "(member [] 2) -> #f", "(member [9 5] 1) -> #f", "(member [] 6) -> #f", "(member [7 5 8 4 2] 9) -> #f", "(member [8 4] 6) -> #f", "(member [0 6 2 0] 0) -> #t", "(member [5 9] 1) -> #f", "(member [3 6] 5) -> #f", "(member [7 8 4 5 8] 8) -> #t", "(member [2 3 4] 9) -> #f", "(member [7 2 8] 4) -> #f", "(member [2 8 3 1] 4) -> #f", "(member [] 2) -> #f", "(member [3 8 4] 6) -> #f", "(member [3 4 8] 9) -> #f", "(member [] 1) -> #f", "(member [] 1) -> #f", "(member [4 3] 5) -> #f", "(member [8 3 0 2] 9) -> #f", "(member [] 2) -> #f", "(member [4 4 4 6 8] 1) -> #f", "(member [9 7] 3) -> #f", "(member [1 5 7] 4) -> #f", "(member [9 9 3 8] 9) -> #t", "(member [4 7 0 0] 8) -> #f", "(member [1 2] 8) -> #f", "(member [4 2 7] 9) -> #f", "(member [] 1) -> #f", "(member [8 5] 9) -> #f", "(member [] 9) -> #f", "(member [7 5 8 2] 8) -> #t", "(member [8 2 7] 3) -> #f", "(member [1 2] 4) -> #f", "(member [8 0] 2) -> #f", "(member [1] 5) -> #f", "(member [2 9] 6) -> #f", "(member [2 1 7] 2) -> #t"]}
{"time": 1.575548, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 3) -> #f", "(member [] 9) -> #f", "(member [0 6 4 8] 3) -> #f", "(member [5 0 5 5] 3) -> #f", "(member [3 1 1 7] 5) -> #f", "(member [1 7 0 3 5] 3) -> #t", "(member [1 2 9] 1) -> #t", "(member [1 1 1 8 8] 1) -> #t", "(member [2] 6) -> #f", "(member [0 7 7 3] 3) -> #t", "(member [2 5 4 9] 6) -> #f", "(member [2 6] 9) -> #f", "(member [1 3 1] 4) -> #f", "(member [8 0 5 1 7] 5) -> #t", "(member [2 2] 1) -> #f", "(member [] 8) -> #f", "(member [5 5 2 1] 2) -> #t", "(member [0 1 9] 0) -> #t", "(member [2 9 5] 0) -> #f", "(member [2] 7) -> #f", "(member [4 3] 4) -> #t", "(member [] 3) -> #f", "(member [8 0] 3) -> #f", "(member [] 6) -> #f", "(member [] 7) -> #f", "(member [9 6] 4) -> #f", "(member [2 0 8 3 9] 5) -> #f", "(member [7 7] 6) -> #f", "(member [8 0 1 2 1] 7) -> #f", "(member [5 0 0 0 0] 0) -> #t", "(member [8 2 5 5 5] 3) -> #f", "(member [0 4 0 2 1] 6) -> #f", "(member [7 9 4] 2) -> #f", "(member [] 6) -> #f", "(member [2 8 1] 8) -> #t", "(member [0 2 0 7] 0) -> #t", "(member [] 9) -> #f", "(member [] 5) -> #f", "(member [7 3 3 6 0] 3) -> #t", "(member [9 1 7 3] 3) -> #t", "(member [0 7] 4) -> #f", "(member [5] 6) -> #f", "(member [6 8 1] 5) -> #f", "(member [6 6 3 9 0] 8) -> #f", "(member [8 6] 8) -> #t", "(member [] 4) -> #f", "(member [1 9 4] 5) -> #f", "(member [1 3 8 8] 5) -> #f", "(member [1 3 2 1] 9) -> #f", "(member [0] 3) -> #f", "(member [0 9 3 6 9] 1) -> #f", "(member [3] 8) -> #f", "(member [] 0) -> #f", "(member [3 9 1 7] 1) -> #t", "(member [2] 7) -> #f", "(member [4 2 8 1] 2) -> #t", "(member [] 8) -> #f", "(member [] 9) -> #f", "(member [7] 9) -> #f", "(member [6] 2) -> #f", "(member [4 9 4 3] 5) -> #f", "(member [6 3] 7) -> #f", "(member [] 0) -> #f", "(member [7 7 8] 2) -> #f", "(member [8 0] 5) -> #f", "(member [6 4 7 2] 0) -> #f", "(member [7 6 2] 6) -> #t", "(member [7] 8) -> #f", "(member [4 3 4 2] 5) -> #f", "(member [] 6) -> #f", "(member [6 2 9] 1) -> #f", "(member [6 4 7 0] 6) -> #t", "(member [] 2) -> #f", "(member [1 6 7 2 3] 1) -> #t", "(member [9] 6) -> #f", "(member [7 4 7 5] 5) -> #t", "(member [6 1 2 0] 9) -> #f", "(member [7] 0) -> #f", "(member [1 5 0 0 9] 9) -> #t", "(member [6 4 6] 9) -> #f", "(member [] 2) -> #f", "(member [9] 4) -> #f", "(member [] 7) -> #f", "(member [6 2 9 3] 0) -> #f", "(member [0 0 8] 3) -> #f", "(member [6 2 5] 6) -> #t", "(member [1 8 3] 4) -> #f", "(member [0 3 9 7 8] 1) -> #f", "(member [1 2 9] 7) -> #f", "(member [1 6 9] 3) -> #f", "(member [8 3 1 3] 4) -> #f", "(member [8 6 1 3] 8) -> #t"]}
{"time": 1.406832, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 4) -> #f", "(member [4 8 4] 9) -> #f", "(member [0 6 3 5 0] 4) -> #f", "(member [7 7 9 1 4] 5) -> #f", "(member [9 0 7 0 0] 7) -> #t", "(member [7] 2) -> #f", "(member [] 4) -> #f", "(member [3 9] 1) -> #f", "(member [3] 0) -> #f", "(member [] 2) -> #f", "(member [2 6 4 8] 3) -> #f", "(member [1 4 4 0 9] 2) -> #f", "(member [] 7) -> #f", "(member [7 6 5 3 7] 0) -> #f", "(member [8 2 9 3] 6) -> #f", "(member [1 7 9 5] 2) -> #f", "(member [4 9 8 5 4] 2) -> #f", "(member [4 4] 6) -> #f", "(member [5 0 6 8] 0) -> #t", "(member [9 9] 7) -> #f", "(member [5] 5) -> #t", "(member [3 3 2] 3) -> #t", "(member [0 5 9 4] 8) -> #f", "(member [4 6 3] 8) -> #f", "(member [5] 7) -> #f", "(member [0] 8) -> #f", "(member [9 2 2] 2) -> #t", "(member [3 8] 9) -> #f", "(member [0 5 9] 2) -> #f", "(member [8 5 7 2 0] 6) -> #f", "(member [0 8] 6) -> #f", "(member [6 0] 6) -> #t", "(member [8] 7) -> #f", "(member [6 4] 9) -> #f", "(member [3 1] 4) -> #f", "(member [7] 5) -> #f", "(member [1 0 5 4] 2) -> #f", "(member [8 0 5 2] 5) -> #t", "(member [2 4 7 7 7] 4) -> #t", "(member [9 9 1] 0) -> #f", "(member [2 3 7] 2) -> #t", "(member [4 5 0] 7) -> #f", "(member [5 9 4] 0) -> #f", "(member [9] 8) -> #f", "(member [5] 8) -> #f", "(member [4 3 3 5 1] 7) -> #f", "(member [1] 6) -> #f", "(member [0 1 5 5 5] 5) -> #t", "(member [5] 2) -> #f", "(member [] 3) -> #f", "(member [3 3] 0) -> #f", "(member [6 1] 7) -> #f", "(member [0 9 4 6] 3) -> #f", "(member [5 2] 7) -> #f", "(member [7 9] 4) -> #f", "(member [1 4 1 5 9] 5) -> #t", "(member [3] 1) -> #f", "(member [1 7 5 1] 2) -> #f", "(member [5 2 5 5 6] 4) -> #f", "(member [] 1) -> #f", "(member [5 3 8 9] 6) -> #f", "(member [6] 6) -> #t", "(member [] 2) -> #f", "(member [8 0 8 1] 4) -> #f", "(member [4 2 7 4 9] 5) -> #f", "(member [1 7] 7) -> #t", "(member [7 9] 7) -> #t", "(member [] 2) -> #f", "(member [] 3) -> #f", "(member [2 9 4 1 6] 0) -> #f", "(member [1 4] 4) -> #t", "(member [1] 7) -> #f", "(member [7 5] 2) -> #f", "(member [] 8) -> #f", "(member [] 8) -> #f", "(member [3 7 8] 2) -> #f", "(member [8 8 7 2] 3) -> #f", "(member [0 8 0] 8) -> #t", "(member [4 2 1 2 6] 6) -> #t", "(member [8 3] 9) -> #f", "(member [3 0 9 0] 9) -> #t", "(member [2 8 8 6 3] 2) -> #t", "(member [8 2 5] 3) -> #f", "(member [8 6] 9) -> #f", "(member [] 3) -> #f", "(member [5 6 4 2 5] 2) -> #t", "(member [3 6 4] 1) -> #f", "(member [2 3 7 4 2] 5) -> #f", "(member [] 7) -> #f", "(member [7] 5) -> #f", "(member [4 4 1 9 6] 1) -> #t", "(member [9 0 9 9 7] 4) -> #f"]}
{"time": 1.477466, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 4) -> #f", "(member [] 3) -> #f", "(member [8 2 4 4] 6) -> #f", "(member [2 8 6 5] 5) -> #t", "(member [1] 9) -> #f", "(member [] 3) -> #f", "(member [5] 0) -> #f", "(member [5 5 2 0] 4) -> #f", "(member [6 3 5 7] 8) -> #f", "(member [6 9 5 7] 0) -> #f", "(member [7] 0) -> #f", "(member [] 3) -> #f", "(member [2 0 1] 9) -> #f", "(member [] 9) -> #f", "(member [6 1 8] 6) -> #t", "(member [] 3) -> #f", "(member [6] 3) -> #f", "(member [0 2 7 4] 0) -> #t", "(member [4 5 1 5 0] 5) -> #t", "(member [9 2 3] 1) -> #f", "(member [4 6 3] 5) -> #f", "(member [9 5 9 3] 1) -> #f", "(member [5 2 2 0 7] 4) -> #f", "(member [9 4 3 4 4] 3) -> #t", "(member [9] 7) -> #f", "(member [7 5 8 8] 7) -> #t", "(member [0 5 5 5 9] 8) -> #f", "(member [9] 8) -> #f", "(member [0 9] 0) -> #t", "(member [5 7] 1) -> #f", "(member [5 9] 5) -> #t", "(member [9 0 1 1 0] 7) -> #f", "(member [] 1) -> #f", "(member [9 4] 6) -> #f", "(member [5 0 3 8 5] 7) -> #f", "(member [3 5 5 8 4] 0) -> #f", "(member [0 2 1 4 6] 2) -> #t", "(member [2 3 4 6 9] 7) -> #f", "(member [5 9 8 0 3] 9) -> #t", "(member [] 1) -> #f", "(member [] 3) -> #f", "(member [7 6] 1) -> #f", "(member [1 3 9 4] 9) -> #t", "(member [4] 7) -> #f", "(member [5 8 8 4] 6) -> #f", "(member [8 5 5 2 1] 4) -> #f", "(member [7 3 1] 8) -> #f", "(member [0 1 7 0] 4) -> #f", "(member [6] 1) -> #f", "(member [5 7 1] 4) -> #f", "(member [8 6 2 3 4] 0) -> #f", "(member [9 0] 3) -> #f", "(member [1 1 1 1 3] 6) -> #f", "(member [9 1] 5) -> #f", "(member [9 8 4 2 0] 8) -> #t", "(member [8 1 7] 6) -> #f", "(member [9 3 9 4] 1) -> #f", "(member [] 7) -> #f", "(member [7] 9) -> #f", "(member [8 3] 7) -> #f", "(member [7 1 3 8 4] 9) -> #f", "(member [] 4) -> #f", "(member [2 2] 2) -> #t", "(member [] 7) -> #f", "(member [9 4] 5) -> #f", "(member [7 3 1 1 2] 6) -> #f", "(member [0 6 7] 0) -> #t", "(member [0 9 9 8 8] 5) -> #f", "(member [7 3 0] 1) -> #f", "(member [8 8 4 2 7] 0) -> #f", "(member [] 9) -> #f", "(member [3 5] 6) -> #f", "(member [3 7 1 0 1] 3) -> #t", "(member [9 5] 3) -> #f", "(member [4 0 9 1 9] 1) -> #t", "(member [4 4 9 3 4] 6) -> #f", "(member [2 8 6 5] 4) -> #f", "(member [6 5 9] 8) -> #f", "(member [] 8) -> #f", "(member [3] 5) -> #f", "(member [0 5 1 3] 0) -> #t", "(member [7] 1) -> #f", "(member [0 1 6 8] 3) -> #f", "(member [] 0) -> #f", "(member [9 9 3] 8) -> #f", "(member [9 2 8 3] 4) -> #f", "(member [6 4 8 1] 5) -> #f", "(member [9 3 6 7 7] 2) -> #f", "(member [] 6) -> #f", "(member [8] 2) -> #f", "(member [3 5 5] 9) -> #f", "(member [4 1 2 9 5] 9) -> #t"]}
{"time": 0.778833, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 7) -> #f", "(member [4 9 5] 4) -> #t", "(member [3 6 0] 6) -> #t", "(member [6 0 8] 6) -> #t", "(member [1 7 8 5] 4) -> #f", "(member [5 2 7] 7) -> #t", "(member [4 5] 8) -> #f", "(member [3 8 7] 1) -> #f", "(member [7 8 3 5] 9) -> #f", "(member [0 3 6 2] 1) -> #f", "(member [] 1) -> #f", "(member [] 4) -> #f", "(member [] 0) -> #f", "(member [1 1 6 2 2] 6) -> #t", "(member [6 2 1 3] 5) -> #f", "(member [3 7 7] 6) -> #f", "(member [0] 8) -> #f", "(member [] 6) -> #f", "(member [] 2) -> #f", "(member [0] 5) -> #f", "(member [8] 7) -> #f", "(member [3 4 3] 4) -> #t", "(member [0 2 0 3] 2) -> #t", "(member [3 5 6 2 2] 5) -> #t", "(member [2 9] 4) -> #f", "(member [9 5 3 5 8] 8) -> #t", "(member [0 4 0 2] 7) -> #f", "(member [] 4) -> #f", "(member [7] 6) -> #f", "(member [8 5 3 2] 4) -> #f", "(member [3 5 8] 7) -> #f", "(member [6 5 4 3] 5) -> #t", "(member [3 8] 3) -> #t", "(member [1 4 8] 1) -> #t", "(member [] 0) -> #f", "(member [6 3 6 0 2] 9) -> #f", "(member [9 1] 6) -> #f", "(member [9 1] 3) -> #f", "(member [] 4) -> #f", "(member [6 0 8 5 9] 0) -> #t", "(member [] 5) -> #f", "(member [2 5 9 8] 5) -> #t", "(member [6] 4) -> #f", "(member [] 7) -> #f", "(member [8 3 8] 9) -> #f", "(member [9 0] 0) -> #t", "(member [] 9) -> #f", "(member [0 2 2] 8) -> #f", "(member [1 6] 5) -> #f", "(member [2 0 5] 7) -> #f", "(member [3 4 5 5] 6) -> #f", "(member [2 8 7 5 7] 9) -> #f", "(member [] 9) -> #f", "(member [0 6 6 6] 8) -> #f", "(member [] 4) -> #f", "(member [1 5 7 8] 6) -> #f", "(member [6] 7) -> #f", "(member [5 7 6 9] 3) -> #f", "(member [1] 3) -> #f", "(member [8 5 1 5] 0) -> #f", "(member [4 2] 1) -> #f", "(member [5] 4) -> #f", "(member [0 2 7 1 1] 8) -> #f", "(member [1 8 2 9] 5) -> #f", "(member [1 3 1 6 9] 3) -> #t", "(member [8 1] 3) -> #f", "(member [1] 0) -> #f", "(member [7 4] 6) -> #f", "(member [0 3] 3) -> #t", "(member [5 1] 3) -> #f", "(member [2 5 0 1 3] 3) -> #t", "(member [8 6] 4) -> #f", "(member [8 5 5 2] 6) -> #f", "(member [] 5) -> #f", "(member [0 0 2 7] 7) -> #t", "(member [6] 0) -> #f", "(member [] 8) -> #f", "(member [9 8 2 8 0] 8) -> #t", "(member [4 0 0] 7) -> #f", "(member [] 4) -> #f", "(member [9 1 5 6 9] 2) -> #f", "(member [] 0) -> #f", "(member [3 0 6] 2) -> #f", "(member [8 8 5 5] 6) -> #f", "(member [1 2 9] 2) -> #t", "(member [] 1) -> #f", "(member [0 5] 9) -> #f", "(member [9 7] 7) -> #t", "(member [1 7] 4) -> #f", "(member [] 0) -> #f", "(member [4 4 4 8 6] 5) -> #f", "(member [9 5 3 3 2] 7) -> #f"]}
{"time": 0.863274, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 6) -> #f", "(member [9 9 1 0] 8) -> #f", "(member [9 2 0 5 5] 0) -> #t", "(member [6 3 6 0] 6) -> #t", "(member [1 4 3] 8) -> #f", "(member [5 2 2] 6) -> #f", "(member [0 3 7 3] 7) -> #t", "(member [8] 7) -> #f", "(member [4 0 1 3] 7) -> #f", "(member [5] 4) -> #f", "(member [4] 6) -> #f", "(member [2 8 0] 9) -> #f", "(member [2] 4) -> #f", "(member [5 6 7] 9) -> #f", "(member [3 8 0 2 8] 3) -> #t", "(member [0] 4) -> #f", "(member [1] 5) -> #f", "(member [4 3] 9) -> #f", "(member [] 8) -> #f", "(member [4 1] 8) -> #f", "(member [7] 5) -> #f", "(member [] 6) -> #f", "(member [9] 0) -> #f", "(member [9 9 6 0] 9) -> #t", "(member [7 4 0 1] 5) -> #f", "(member [] 1) -> #f", "(member [5 5] 9) -> #f", "(member [7] 3) -> #f", "(member [7 4 2] 5) -> #f", "(member [1] 9) -> #f", "(member [] 5) -> #f", "(member [0 1 2] 8) -> #f", "(member [9 1 9 6] 5) -> #f", "(member [9 1] 1) -> #t", "(member [1 2 6 8] 8) -> #t", "(member [] 1) -> #f", "(member [] 2) -> #f", "(member [3 6 7 0] 9) -> #f", "(member [] 9) -> #f", "(member [7 0 3] 7) -> #t", "(member [4 5 3] 4) -> #t", "(member [4] 7) -> #f", "(member [7 1 3 6] 5) -> #f", "(member [3 9 7 9] 1) -> #f", "(member [7 8] 1) -> #f", "(member [5 6] 3) -> #f", "(member [0 6 4] 6) -> #t", "(member [8] 5) -> #f", "(member [0 8 8] 3) -> #f", "(member [4] 2) -> #f", "(member [0 8 9 1 3] 4) -> #f", "(member [4 8 8] 6) -> #f", "(member [6 8 9] 2) -> #f", "(member [] 8) -> #f", "(member [1 1] 7) -> #f", "(member [9 4 0 3] 6) -> #f", "(member [] 2) -> #f", "(member [5 3] 1) -> #f", "(member [1 7] 5) -> #f", "(member [5 8 2] 9) -> #f", "(member [2 9 5 5] 4) -> #f", "(member [0 0 5 0] 0) -> #t", "(member [] 2) -> #f", "(member [7 9 8 2 7] 9) -> #t", "(member [4] 2) -> #f", "(member [6 3 8] 4) -> #f", "(member [4 9 9 0] 9) -> #t", "(member [4 4] 1) -> #f", "(member [9] 9) -> #t", "(member [4 5] 5) -> #t", "(member [2 5] 2) -> #t", "(member [2 8 1] 1) -> #t", "(member [9 3 2 0 7] 8) -> #f", "(member [3 0 7 4] 8) -> #f", "(member [1 8 1] 5) -> #f", "(member [] 7) -> #f", "(member [] 6) -> #f", "(member [1] 1) -> #t", "(member [8 2 0 6 6] 0) -> #t", "(member [] 1) -> #f", "(member [] 2) -> #f", "(member [1 3 2] 2) -> #t", "(member [7 4 2 1 5] 3) -> #f", "(member [7 5 1 0] 9) -> #f", "(member [4 0] 5) -> #f", "(member [3 6 9] 1) -> #f", "(member [] 2) -> #f", "(member [] 8) -> #f", "(member [7 7 9] 0) -> #f", "(member [3 2] 5) -> #f", "(member [4 3] 4) -> #t", "(member [0 6 0 0] 6) -> #t"]}
{"time": 0.865337, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 9) -> #f", "(member [4 8] 3) -> #f", "(member [0 5 5] 0) -> #t", "(member [] 7) -> #f", "(member [] 3) -> #f", "(member [8 4 0 7 2] 7) -> #t", "(member [] 7) -> #f", "(member [5 4] 7) -> #f", "(member [0 2 4] 1) -> #f", "(member [1 6 1 3 1] 1) -> #t", "(member [1 7 9 5] 9) -> #t", "(member [8 4 1 4] 6) -> #f", "(member [8] 5) -> #f", "(member [1 1] 3) -> #f", "(member [5 8 5] 0) -> #f", "(member [9 3 3 6 4] 0) -> #f", "(member [7 7] 0) -> #f", "(member [4 9 3 1] 6) -> #f", "(member [4 6 6] 6) -> #t", "(member [2] 3) -> #f", "(member [] 8) -> #f", "(member [7 1 1 7 2] 5) -> #f", "(member [] 2) -> #f", "(member [3 0 4 7] 2) -> #f", "(member [0 6] 9) -> #f", "(member [6 8 8] 8) -> #t", "(member [5 2 4 4] 1) -> #f", "(member [] 1) -> #f", "(member [3 9 9 6 9] 0) -> #f", "(member [9 8 5 5] 8) -> #t", "(member [4 5] 9) -> #f", "(member [0 9 2] 3) -> #f", "(member [5 0 7] 9) -> #f", "(member [0 3] 7) -> #f", "(member [5 6 9 4] 4) -> #t", "(member [3 7 8] 6) -> #f", "(member [] 8) -> #f", "(member [5 0 3] 3) -> #t", "(member [1 9 7 4] 3) -> #f", "(member [4 4 6 9] 2) -> #f", "(member [] 4) -> #f", "(member [8 0 9 3] 9) -> #t", "(member [2 1 8] 5) -> #f", "(member [1] 5) -> #f", "(member [] 9) -> #f", "(member [5 5 3 8 3] 5) -> #t", "(member [5 9 9 6] 2) -> #f", "(member [] 9) -> #f", "(member [3 4 0] 1) -> #f", "(member [] 2) -> #f", "(member [4 6 1] 4) -> #t", "(member [4] 2) -> #f", "(member [2 0 6] 8) -> #f", "(member [5 4 7 0 6] 3) -> #f", "(member [5 6 3 5] 6) -> #t", "(member [1 8 1 7 0] 3) -> #f", "(member [6 6] 4) -> #f", "(member [1 4 7 3 9] 7) -> #t", "(member [1 6 0 2 7] 5) -> #f", "(member [9 7 3 5] 1) -> #f", "(member [4 7 4] 8) -> #f", "(member [4 5] 8) -> #f", "(member [4 8 8 1] 8) -> #t", "(member [7] 7) -> #t", "(member [2 7 0 0 2] 2) -> #t", "(member [3 5 9 6] 8) -> #f", "(member [] 2) -> #f", "(member [7 9] 3) -> #f", "(member [7 8 9] 1) -> #f", "(member [] 9) -> #f", "(member [6 8 0] 5) -> #f", "(member [9] 4) -> #f", "(member [7] 4) -> #f", "(member [8 5 9 8] 2) -> #f", "(member [] 4) -> #f", "(member [2] 3) -> #f", "(member [5] 3) -> #f", "(member [0 9 1] 4) -> #f", "(member [] 5) -> #f", "(member [] 6) -> #f", "(member [] 2) -> #f", "(member [4 3 0] 6) -> #f", "(member [3 8] 2) -> #f", "(member [5 5 2] 9) -> #f", "(member [6 7 0] 0) -> #t", "(member [5 0 0] 4) -> #f", "(member [9 1 1] 3) -> #f", "(member [7 0] 4) -> #f", "(member [4 3 6 3] 6) -> #t", "(member [1] 0) -> #f", "(member [9 2 9] 4) -> #f", "(member [9 5 6] 1) -> #f"]}
{"time": 0.990077, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 5) -> #f", "(member [5 1 3 1 7] 9) -> #f", "(member [] 6) -> #f", "(member [6] 1) -> #f", "(member [8 9] 7) -> #f", "(member [] 2) -> #f", "(member [0 9 7] 1) -> #f", "(member [6] 5) -> #f", "(member [5] 2) -> #f", "(member [9 7] 4) -> #f", "(member [7 9 4 6 9] 3) -> #f", "(member [6 5 2 1 7] 6) -> #t", "(member [] 0) -> #f", "(member [7 3] 4) -> #f", "(member [] 8) -> #f", "(member [4 0] 0) -> #t", "(member [6 1 9 5 1] 0) -> #f", "(member [4 8 3] 3) -> #t", "(member [7] 5) -> #f", "(member [1] 2) -> #f", "(member [9 1 3] 4) -> #f", "(member [4 5] 2) -> #f", "(member [0 0] 3) -> #f", "(member [5 7] 4) -> #f", "(member [] 9) -> #f", "(member [3 1 2] 0) -> #f", "(member [1 6 8] 6) -> #t", "(member [1 9 4] 2) -> #f", "(member [6 8 0] 6) -> #t", "(member [7 2 5] 3) -> #f", "(member [] 6) -> #f", "(member [0 2] 8) -> #f", "(member [4] 6) -> #f", "(member [9] 1) -> #f", "(member [7] 8) -> #f", "(member [0 7] 0) -> #t", "(member [] 5) -> #f", "(member [8 3] 5) -> #f", "(member [8 8 7] 4) -> #f", "(member [4 9 6 1 5] 8) -> #f", "(member [1 6 1 7 5] 4) -> #f", "(member [0 4 2 6] 7) -> #f", "(member [6] 0) -> #f", "(member [] 6) -> #f", "(member [0 0 6 1 7] 9) -> #f", "(member [4 5 3 8 0] 3) -> #t", "(member [8 4] 2) -> #f", "(member [8] 5) -> #f", "(member [3 5 9 9 9] 6) -> #f", "(member [0 0] 2) -> #f", "(member [1 3 2 5] 2) -> #t", "(member [6 5] 5) -> #t", "(member [8 0] 7) -> #f", "(member [0 4 3 1 4] 3) -> #t", "(member [4] 5) -> #f", "(member [3 8 7] 9) -> #f", "(member [8] 9) -> #f", "(member [9 7 7 0 7] 9) -> #t", "(member [] 5) -> #f", "(member [] 8) -> #f", "(member [3 2 0 0 3] 1) -> #f", "(member [8 8] 8) -> #t", "(member [5 6 3] 0) -> #f", "(member [0 8 4 4] 7) -> #f", "(member [6 6 2 4 5] 2) -> #t", "(member [5 6] 2) -> #f", "(member [7 8] 7) -> #t", "(member [5 9 1] 2) -> #f", "(member [6 7 2] 2) -> #t", "(member [9 9 1 3] 4) -> #f", "(member [] 9) -> #f", "(member [1 6 6 9] 0) -> #f", "(member [4 7] 4) -> #t", "(member [8 5 7] 9) -> #f", "(member [8] 7) -> #f", "(member [9 7 8 1] 0) -> #f", "(member [3 6 0 5 4] 4) -> #t", "(member [0 8 1 3 2] 0) -> #t", "(member [] 4) -> #f", "(member [] 8) -> #f", "(member [2 0 7 2 8] 0) -> #t", "(member [0] 7) -> #f", "(member [2 1 3 8 7] 0) -> #f", "(member [5 1 4 3] 9) -> #f", "(member [1 6 0 9] 4) -> #f", "(member [0 2 0 9 4] 0) -> #t", "(member [7 7 1 7 3] 4) -> #f", "(member [8 4] 3) -> #f", "(member [9 1 4 2] 3) -> #f", "(member [1 7 5 0] 7) -> #t", "(member [1 4 3] 5) -> #f", "(member [4 9] 8) -> #f"]}
{"time": 1.123421, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 3) -> #f", "(member [3] 4) -> #f", "(member [6] 5) -> #f", "(member [6 5 0 1 5] 7) -> #f", "(member [2] 1) -> #f", "(member [6 4 6 5] 5) -> #t", "(member [4] 9) -> #f", "(member [2 0 2 6] 9) -> #f", "(member [1 4] 5) -> #f", "(member [5 8 8 4 2] 4) -> #t", "(member [6 3] 9) -> #f", "(member [1 9] 5) -> #f", "(member [] 2) -> #f", "(member [0] 3) -> #f", "(member [5 5 8 6 9] 5) -> #t", "(member [] 9) -> #f", "(member [6 6] 0) -> #f", "(member [6 6 0 3] 4) -> #f", "(member [3 0 6 4] 7) -> #f", "(member [4] 0) -> #f", "(member [8 0 7 1] 9) -> #f", "(member [0] 5) -> #f", "(member [3] 1) -> #f", "(member [8 2 8] 9) -> #f", "(member [9 0 5 0] 5) -> #t", "(member [9] 5) -> #f", "(member [9 2 9 5] 0) -> #f", "(member [4 9] 6) -> #f", "(member [6] 7) -> #f", "(member [8 8 0 5] 2) -> #f", "(member [] 1) -> #f", "(member [0 8] 0) -> #t", "(member [] 0) -> #f", "(member [0 7 8] 0) -> #t", "(member [2 9] 0) -> #f", "(member [1 0] 2) -> #f", "(member [0 2 0] 0) -> #t", "(member [0 5] 2) -> #f", "(member [5 7 2 3 7] 1) -> #f", "(member [0 1 5 3 9] 1) -> #t", "(member [0] 6) -> #f", "(member [] 7) -> #f", "(member [2 4 9 5] 0) -> #f", "(member [0 9 9 2 1] 9) -> #t", "(member [5 0] 5) -> #t", "(member [] 6) -> #f", "(member [4] 3) -> #f", "(member [2 5 2 2 8] 6) -> #f", "(member [9 3 9 4] 7) -> #f", "(member [1] 1) -> #t", "(member [] 8) -> #f", "(member [3] 7) -> #f", "(member [5 4 9] 7) -> #f", "(member [8 6 0] 8) -> #t", "(member [6 6] 7) -> #f", "(member [3 5 6] 5) -> #t", "(member [5 4] 4) -> #t", "(member [8 9] 4) -> #f", "(member [9 0] 1) -> #f", "(member [4 3 0] 1) -> #f", "(member [6 6 1] 0) -> #f", "(member [5 9] 1) -> #f", "(member [2] 7) -> #f", "(member [2] 9) -> #f", "(member [6] 8) -> #f", "(member [9 5] 3) -> #f", "(member [9 3 9] 7) -> #f", "(member [6] 3) -> #f", "(member [3 8] 1) -> #f", "(member [6 0 1 6] 0) -> #t", "(member [] 1) -> #f", "(member [5 9 3 8] 2) -> #f", "(member [7 9 6 5 2] 0) -> #f", "(member [6 8 0 8] 8) -> #t", "(member [] 0) -> #f", "(member [9 3 3 8] 9) -> #t", "(member [7 0] 2) -> #f", "(member [3] 7) -> #f", "(member [7 5 9 5 0] 8) -> #f", "(member [8 9 6 6 5] 5) -> #t", "(member [6 6] 8) -> #f", "(member [0 0 4 8] 4) -> #t", "(member [6] 1) -> #f", "(member [2 1 7] 1) -> #t", "(member [3 4 8 5] 2) -> #f", "(member [6 1] 6) -> #t", "(member [4 3] 7) -> #f", "(member [1] 5) -> #f", "(member [9 0 0 7 2] 3) -> #f", "(member [2 8 1 4 2] 2) -> #t", "(member [7 0 4 7] 7) -> #t", "(member [8 1 3 1] 9) -> #f"]}
{"time": 1.165752, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 8) -> #f", "(member [9 1] 4) -> #f", "(member [9] 8) -> #f", "(member [0 9] 4) -> #f", "(member [] 4) -> #f", "(member [5 3 3 1 5] 8) -> #f", "(member [0 2 4 5] 2) -> #t", "(member [1] 8) -> #f", "(member [] 6) -> #f", "(member [5 3 5] 6) -> #f", "(member [0 7 0 3 9] 3) -> #t", "(member [2] 1) -> #f", "(member [5 9 9 1] 6) -> #f", "(member [7 4 4 0 5] 2) -> #f", "(member [5 1] 7) -> #f", "(member [4] 1) -> #f", "(member [6 7 5 5 2] 0) -> #f", "(member [1 7 9 4 8] 8) -> #t", "(member [5] 3) -> #f", "(member [2 4] 7) -> #f", "(member [4 1] 0) -> #f", "(member [7 4 2 9 8] 6) -> #f", "(member [6 6 7 3 9] 1) -> #f", "(member [3 8 2] 2) -> #t", "(member [8 1 2 1] 5) -> #f", "(member [7 6] 8) -> #f", "(member [5 3] 8) -> #f", "(member [8 8 7] 7) -> #t", "(member [3] 1) -> #f", "(member [2 8 5 3] 9) -> #f", "(member [] 4) -> #f", "(member [5] 9) -> #f", "(member [3 6] 8) -> #f", "(member [3 5 4] 6) -> #f", "(member [8 9 7 2] 5) -> #f", "(member [1 1] 0) -> #f", "(member [6 4 9] 6) -> #t", "(member [2 3 9 1] 9) -> #t", "(member [9] 4) -> #f", "(member [0 2 6 9] 5) -> #f", "(member [3 0 3] 6) -> #f", "(member [] 7) -> #f", "(member [2 0 6] 6) -> #t", "(member [8 7] 1) -> #f", "(member [8 2 5 1 0] 9) -> #f", "(member [] 3) -> #f", "(member [2 7 7 3] 6) -> #f", "(member [9 4 5] 2) -> #f", "(member [] 2) -> #f", "(member [9 7 4] 8) -> #f", "(member [7 3 6 4] 3) -> #t", "(member [5 8 5 9] 4) -> #f", "(member [2 2] 0) -> #f", "(member [3] 3) -> #t", "(member [4] 3) -> #f", "(member [] 1) -> #f", "(member [7 3 1] 6) -> #f", "(member [] 1) -> #f", "(member [5 8 1] 6) -> #f", "(member [8 6 2 1] 5) -> #f", "(member [3 9 1 7 4] 2) -> #f", "(member [4] 0) -> #f", "(member [] 0) -> #f", "(member [1 6 2 1 1] 0) -> #f", "(member [3 2 1 9] 4) -> #f", "(member [8 0] 1) -> #f", "(member [2 8 6 2 4] 6) -> #t", "(member [9 0 2] 2) -> #t", "(member [8 8 7 8 1] 1) -> #t", "(member [] 1) -> #f", "(member [3 1] 7) -> #f", "(member [0 7] 1) -> #f", "(member [] 2) -> #f", "(member [9 7] 9) -> #t", "(member [3 6 2] 8) -> #f", "(member [2 9 9] 1) -> #f", "(member [5 8] 0) -> #f", "(member [7 0] 9) -> #f", "(member [6 3 8 2 8] 8) -> #t", "(member [] 8) -> #f", "(member [5 2 9 2 9] 1) -> #f", "(member [] 5) -> #f", "(member [4 1] 7) -> #f", "(member [] 7) -> #f", "(member [4 1] 0) -> #f", "(member [1 3 6 4 3] 7) -> #f", "(member [7 7 2 1 9] 5) -> #f", "(member [] 6) -> #f", "(member [5 6] 6) -> #t", "(member [8 5 4 0 4] 9) -> #f", "(member [6 7 9] 4) -> #f", "(member [2] 2) -> #t"]}
{"time": 0.828597, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 0) -> #f", "(member [1 2 8 4] 4) -> #t", "(member [9] 2) -> #f", "(member [] 0) -> #f", "(member [2] 8) -> #f", "(member [8 3 5] 9) -> #f", "(member [6 2 0 8] 3) -> #f", "(member [9] 5) -> #f", "(member [1 1 6 7] 6) -> #t", "(member [8] 7) -> #f", "(member [5 6 8 1] 6) -> #t", "(member [5 9] 7) -> #f", "(member [] 2) -> #f", "(member [1 9 3 8 0] 5) -> #f", "(member [3 7 2 7] 3) -> #t", "(member [9 7 2 6 0] 8) -> #f", "(member [1] 4) -> #f", "(member [1 3 8 0] 1) -> #t", "(member [6 9 7 6] 8) -> #f", "(member [3 8 9] 6) -> #f", "(member [5 1 2 4 8] 2) -> #t", "(member [2 5 9 7] 0) -> #f", "(member [7 9 0] 1) -> #f", "(member [9 5] 7) -> #f", "(member [8 2] 9) -> #f", "(member [6 3 3] 8) -> #f", "(member [1 0 6 2] 7) -> #f", "(member [1] 9) -> #f", "(member [] 1) -> #f", "(member [7 5 4 2] 4) -> #t", "(member [6] 4) -> #f", "(member [5 6 5] 3) -> #f", "(member [2 6] 1) -> #f", "(member [8 5 6 3 0] 8) -> #t", "(member [0] 1) -> #f", "(member [1 7 9] 4) -> #f", "(member [] 9) -> #f", "(member [8 7] 9) -> #f", "(member [8 8 1] 5) -> #f", "(member [3] 1) -> #f", "(member [1 8 0 1 3] 1) -> #t", "(member [4 0 3 0] 9) -> #f", "(member [5] 8) -> #f", "(member [9] 6) -> #f", "(member [4 9 0 5] 6) -> #f", "(member [6 7 7 7] 3) -> #f", "(member [8 8 3] 9) -> #f", "(member [9 1 0 5 1] 0) -> #t", "(member [0 1] 6) -> #f", "(member [9 7 7 4] 3) -> #f", "(member [] 9) -> #f", "(member [4 2] 8) -> #f", "(member [1] 7) -> #f", "(member [] 9) -> #f", "(member [8] 4) -> #f", "(member [9] 7) -> #f", "(member [] 0) -> #f", "(member [8 6 4 7 9] 7) -> #t", "(member [4 7] 7) -> #t", "(member [8 8 7] 1) -> #f", "(member [6 6 3 4] 0) -> #f", "(member [1] 0) -> #f", "(member [6 7] 1) -> #f", "(member [1 5] 9) -> #f", "(member [] 0) -> #f", "(member [1] 7) -> #f", "(member [8 8 6 0 2] 2) -> #t", "(member [2 4 4 0 6] 9) -> #f", "(member [3 4 0 5 0] 6) -> #f", "(member [1] 7) -> #f", "(member [] 1) -> #f", "(member [2 8 9] 7) -> #f", "(member [8 9 2 9] 1) -> #f", "(member [] 4) -> #f", "(member [7 9 0 9] 7) -> #t", "(member [4 6 7 3 0] 2) -> #f", "(member [3 1] 4) -> #f", "(member [8] 5) -> #f", "(member [9] 1) -> #f", "(member [6 5 3 0] 0) -> #t", "(member [] 7) -> #f", "(member [0 4 3 5] 8) -> #f", "(member [] 7) -> #f", "(member [] 3) -> #f", "(member [9 7 6] 1) -> #f", "(member [4 8 5] 0) -> #f", "(member [1] 8) -> #f", "(member [0 2] 6) -> #f", "(member [8 2 1 1] 8) -> #t", "(member [6 2 7 1] 0) -> #f", "(member [7 0 9] 0) -> #t", "(member [] 6) -> #f"]}
{"time": 1.267711, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 4) -> #f", "(member [5 6 8 7] 5) -> #t", "(member [9 5] 3) -> #f", "(member [] 8) -> #f", "(member [9 5 9 1] 2) -> #f", "(member [2 3 8] 6) -> #f", "(member [7 5 6 7] 2) -> #f", "(member [7] 9) -> #f", "(member [7] 2) -> #f", "(member [3 9 4] 5) -> #f", "(member [1 4 4 0] 5) -> #f", "(member [1 7 6 9] 6) -> #t", "(member [3 9 6] 4) -> #f", "(member [8 4 2 6 2] 3) -> #f", "(member [4 2 0 6 6] 7) -> #f", "(member [1 0 1 2] 4) -> #f", "(member [6 2 4] 4) -> #t", "(member [9 2 7 0] 8) -> #f", "(member [3] 5) -> #f", "(member [] 2) -> #f", "(member [5] 6) -> #f", "(member [6] 0) -> #f", "(member [5 3 1] 5) -> #t", "(member [3 4 2 2] 5) -> #f", "(member [8 5] 0) -> #f", "(member [6] 7) -> #f", "(member [5 2 1 8] 1) -> #t", "(member [] 7) -> #f", "(member [0 7 3 9] 6) -> #f", "(member [5 3 8] 5) -> #t", "(member [1 8] 7) -> #f", "(member [9 5 4] 6) -> #f", "(member [6 1 7 4 1] 4) -> #t", "(member [4 7] 8) -> #f", "(member [5 3 3 4] 1) -> #f", "(member [9] 5) -> #f", "(member [3 6 2 2] 3) -> #t", "(member [0] 6) -> #f", "(member [6] 8) -> #f", "(member [0 5 1] 1) -> #t", "(member [5 8] 6) -> #f", "(member [3] 6) -> #f", "(member [9 9] 4) -> #f", "(member [1 3 1 0] 6) -> #f", "(member [] 7) -> #f", "(member [8 8] 5) -> #f", "(member [3 3 9 3] 6) -> #f", "(member [6 2 4 2 0] 1) -> #f", "(member [] 8) -> #f", "(member [0] 0) -> #t", "(member [3 3] 0) -> #f", "(member [6 2 2 2 7] 0) -> #f", "(member [5 5 6] 3) -> #f", "(member [1 7 5] 2) -> #f", "(member [7 9] 6) -> #f", "(member [7] 0) -> #f", "(member [3 1 8 1] 3) -> #t", "(member [1 3] 7) -> #f", "(member [9 9] 9) -> #t", "(member [2] 0) -> #f", "(member [7 4 5] 7) -> #t", "(member [7 4 0 9] 2) -> #f", "(member [2 8 0] 2) -> #t", "(member [7 3 5 6] 0) -> #f", "(member [] 8) -> #f", "(member [] 3) -> #f", "(member [0] 9) -> #f", "(member [] 9) -> #f", "(member [9 0 5 6] 7) -> #f", "(member [9 4 2] 9) -> #t", "(member [1 5 1 7 9] 5) -> #t", "(member [1 5 5 9] 2) -> #f", "(member [8 2 5 8] 5) -> #t", "(member [3 7 9 9] 7) -> #t", "(member [] 9) -> #f", "(member [0 5 1] 5) -> #t", "(member [9 8] 9) -> #t", "(member [2 3 0 8 2] 8) -> #t", "(member [] 1) -> #f", "(member [2 5 6 3 0] 4) -> #f", "(member [1 8 6] 9) -> #f", "(member [] 6) -> #f", "(member [3 3 4 9 3] 6) -> #f", "(member [4] 3) -> #f", "(member [5 7 2] 7) -> #t", "(member [] 0) -> #f", "(member [7 6] 9) -> #f", "(member [0 7] 8) -> #f", "(member [3] 7) -> #f", "(member [2 8] 4) -> #f", "(member [7 0 4] 9) -> #f", "(member [4] 1) -> #f"]}
{"time": 1.366366, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 2) -> #f", "(member [] 3) -> #f", "(member [2] 4) -> #f", "(member [9 1 2 4] 7) -> #f", "(member [6 0] 9) -> #f", "(member [] 8) -> #f", "(member [4] 8) -> #f", "(member [2 2 9 3 2] 9) -> #t", "(member [5 2 8] 4) -> #f", "(member [] 2) -> #f", "(member [6 9 2 7 6] 1) -> #f", "(member [4] 2) -> #f", "(member [3 7 6] 8) -> #f", "(member [1 3 2] 6) -> #f", "(member [5 0 8 9] 1) -> #f", "(member [] 4) -> #f", "(member [1 5] 0) -> #f", "(member [8 1 2 0 6] 3) -> #f", "(member [6 9 6 2] 7) -> #f", "(member [7 5 0] 5) -> #t", "(member [7 3 4] 2) -> #f", "(member [] 3) -> #f", "(member [5 6 1] 6) -> #t", "(member [1 7 1 3 6] 7) -> #t", "(member [8 6 4 2 2] 5) -> #f", "(member [] 5) -> #f", "(member [0 3 0] 1) -> #f", "(member [4] 1) -> #f", "(member [9 0 8 8] 6) -> #f", "(member [4] 6) -> #f", "(member [0 5] 0) -> #t", "(member [0 0 7 0] 0) -> #t", "(member [3 1 0] 5) -> #f", "(member [0 0] 5) -> #f", "(member [] 5) -> #f", "(member [1 2] 5) -> #f", "(member [5 9 4 7] 0) -> #f", "(member [3] 1) -> #f", "(member [8] 2) -> #f", "(member [7 5 2 3] 2) -> #t", "(member [9 9 0] 7) -> #f", "(member [7 5 4 6 3] 0) -> #f", "(member [6 2] 0) -> #f", "(member [8] 3) -> #f", "(member [3] 7) -> #f", "(member [7 3 7 0 7] 7) -> #t", "(member [7 0 8 7] 5) -> #f", "(member [5 8 6 5 1] 4) -> #f", "(member [1 5 7 3] 9) -> #f", "(member [6] 7) -> #f", "(member [] 1) -> #f", "(member [2 3 9 2] 4) -> #f", "(member [3] 7) -> #f", "(member [2 9 1] 2) -> #t", "(member [4 6 5 7 3] 3) -> #t", "(member [] 1) -> #f", "(member [5] 7) -> #f", "(member [8 3 6 7] 2) -> #f", "(member [6 0 6 2] 2) -> #t", "(member [2] 5) -> #f", "(member [0 2 0 4 9] 1) -> #f", "(member [3] 8) -> #f", "(member [6 4 4 9 8] 5) -> #f", "(member [2] 3) -> #f", "(member [2 5 6 6] 6) -> #t", "(member [] 4) -> #f", "(member [9 0 0 9 6] 8) -> #f", "(member [7 9 8 1] 8) -> #t", "(member [2 0 0 5] 3) -> #f", "(member [6 5] 0) -> #f", "(member [6 0 7 9] 0) -> #t", "(member [1] 7) -> #f", "(member [3 8 8 6 2] 5) -> #f", "(member [7 4] 8) -> #f", "(member [] 7) -> #f", "(member [8 3] 6) -> #f", "(member [9 7 0 3 1] 5) -> #f", "(member [9] 4) -> #f", "(member [7 3 4 1 9] 3) -> #t", "(member [1 9 9] 9) -> #t", "(member [3 5 4 6 3] 5) -> #t", "(member [3 3] 6) -> #f", "(member [9 3 5] 9) -> #t", "(member [3 6] 9) -> #f", "(member [3] 4) -> #f", "(member [0 7 5 2 3] 9) -> #f", "(member [0 4 2 3] 1) -> #f", "(member [1 8 4 5 8] 0) -> #f", "(member [3 2] 7) -> #f", "(member [5 8] 1) -> #f", "(member [4 0] 9) -> #f", "(member [] 5) -> #f"]}
{"time": 0.877711, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (= e (!= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 2) -> #f", "(member [6] 8) -> #f", "(member [] 9) -> #f", "(member [5 6 1 5 0] 2) -> #f", "(member [9 7 1 7 0] 5) -> #f", "(member [3 5] 3) -> #t", "(member [8 3 7 0] 5) -> #f", "(member [4 2 9 4] 6) -> #f", "(member [] 3) -> #f", "(member [6 4] 9) -> #f", "(member [4 7 2] 4) -> #t", "(member [5 3 3 2] 8) -> #f", "(member [0] 2) -> #f", "(member [8 0] 8) -> #t", "(member [] 9) -> #f", "(member [] 4) -> #f", "(member [3] 2) -> #f", "(member [0 4 7] 0) -> #t", "(member [9] 9) -> #t", "(member [1] 4) -> #f", "(member [6 7 7] 4) -> #f", "(member [8 5 2] 6) -> #f", "(member [0 7] 5) -> #f", "(member [] 2) -> #f", "(member [2 0] 9) -> #f", "(member [8 7 6 4] 7) -> #t", "(member [1 7] 3) -> #f", "(member [2 0] 1) -> #f", "(member [2 6 1] 3) -> #f", "(member [3 6 9] 0) -> #f", "(member [8] 3) -> #f", "(member [2 2 4] 3) -> #f", "(member [3 9 4 4] 7) -> #f", "(member [] 8) -> #f", "(member [9 2 5 9] 0) -> #f", "(member [9 0 9] 2) -> #f", "(member [1 3] 1) -> #t", "(member [5 3 3] 2) -> #f", "(member [9 5 1 8 7] 9) -> #t", "(member [8 6 2 7 5] 5) -> #t", "(member [] 3) -> #f", "(member [] 3) -> #f", "(member [3 0 1] 3) -> #t", "(member [6 7] 0) -> #f", "(member [3 3 1 0 8] 2) -> #f", "(member [0 1 1 0] 8) -> #f", "(member [8 7] 8) -> #t", "(member [3 2] 7) -> #f", "(member [7 1] 5) -> #f", "(member [8 3 6] 4) -> #f", "(member [1] 0) -> #f", "(member [3 2 3 9 0] 4) -> #f", "(member [5 4 1 2] 8) -> #f", "(member [9 6] 1) -> #f", "(member [0 9 2 1] 0) -> #t", "(member [2] 6) -> #f", "(member [] 4) -> #f", "(member [9] 6) -> #f", "(member [4 4 4 4 0] 5) -> #f", "(member [] 1) -> #f", "(member [1] 4) -> #f", "(member [3 1 0 3 3] 6) -> #f", "(member [3 6 6 2 0] 9) -> #f", "(member [4 4 2 4] 1) -> #f", "(member [4] 7) -> #f", "(member [2 7 5] 1) -> #f", "(member [] 3) -> #f", "(member [9 0] 0) -> #t", "(member [8 8] 0) -> #f", "(member [0 2 3] 5) -> #f", "(member [0 0 1 9 8] 7) -> #f", "(member [4 6 8 7 8] 7) -> #t", "(member [0] 5) -> #f", "(member [3 8 8 8 2] 4) -> #f", "(member [6] 6) -> #t", "(member [6 3 8] 1) -> #f", "(member [9 4] 4) -> #t", "(member [1] 1) -> #t", "(member [1 1] 9) -> #f", "(member [2 1 5 1 8] 0) -> #f", "(member [4 1 0 7] 3) -> #f", "(member [4 2 3 0 5] 2) -> #t", "(member [4 8 0 0 9] 5) -> #f", "(member [6 8 1] 5) -> #f", "(member [] 7) -> #f", "(member [9 8 3 4 6] 1) -> #f", "(member [1 5 7] 5) -> #t", "(member [4 9 6 4] 2) -> #f", "(member [3 4 6 2] 4) -> #t", "(member [7 0] 6) -> #f", "(member [] 1) -> #f", "(member [6 3 6 0 8] 4) -> #f"]}
{"time": 1.148022, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 1) -> #f", "(member [1 0 7] 9) -> #f", "(member [9 0 2 7 0] 9) -> #t", "(member [2 5] 9) -> #f", "(member [1 4 9] 6) -> #f", "(member [] 1) -> #f", "(member [6 6 5] 9) -> #f", "(member [0 4] 7) -> #f", "(member [] 0) -> #f", "(member [6] 5) -> #f", "(member [7 6 9 9] 8) -> #f", "(member [9] 6) -> #f", "(member [3 6] 5) -> #f", "(member [2 0 8 4] 1) -> #f", "(member [] 5) -> #f", "(member [0 8 1 9] 7) -> #f", "(member [3 8 3] 1) -> #f", "(member [3] 7) -> #f", "(member [0] 4) -> #f", "(member [5 8 4 2 1] 2) -> #t", "(member [2 4 0 6 2] 5) -> #f", "(member [0] 8) -> #f", "(member [9 0 3 8 6] 7) -> #f", "(member [1 9 6] 1) -> #t", "(member [3 4] 2) -> #f", "(member [] 6) -> #f", "(member [1 5] 0) -> #f", "(member [6 9 3 5 5] 4) -> #f", "(member [3] 2) -> #f", "(member [9 2 3 5 8] 0) -> #f", "(member [] 6) -> #f", "(member [4 2 9 0] 6) -> #f", "(member [8 2 9 4 7] 7) -> #t", "(member [0] 8) -> #f", "(member [5 7] 4) -> #f", "(member [3 6 8 0 9] 5) -> #f", "(member [6] 1) -> #f", "(member [5 2 5] 8) -> #f", "(member [1 0 7 2] 1) -> #t", "(member [6 1 0 9] 2) -> #f", "(member [] 4) -> #f", "(member [3 6 4 2] 4) -> #t", "(member [0] 1) -> #f", "(member [] 4) -> #f", "(member [9 6 0] 2) -> #f", "(member [0 8 5] 4) -> #f", "(member [8 2 4 0 7] 8) -> #t", "(member [1 0 1] 2) -> #f", "(member [9] 2) -> #f", "(member [3 3 9 7] 1) -> #f", "(member [5 3 5 7 4] 8) -> #f", "(member [9 0 9] 9) -> #t", "(member [8] 5) -> #f", "(member [6] 3) -> #f", "(member [] 4) -> #f", "(member [] 5) -> #f", "(member [7 4 6] 9) -> #f", "(member [4 7 8 4 8] 3) -> #f", "(member [0] 3) -> #f", "(member [0] 0) -> #t", "(member [4 2 7 9 0] 3) -> #f", "(member [6 7] 6) -> #t", "(member [8 0 0 0 4] 7) -> #f", "(member [4 5 8] 0) -> #f", "(member [2 2 8 3] 5) -> #f", "(member [3 8] 6) -> #f", "(member [9 3 8 9] 3) -> #t", "(member [3 2 3 3] 5) -> #f", "(member [9 6] 9) -> #t", "(member [1 0 6 2] 9) -> #f", "(member [2 7 7 0] 9) -> #f", "(member [3 5] 3) -> #t", "(member [8 6] 1) -> #f", "(member [8 8 1 9] 9) -> #t", "(member [] 1) -> #f", "(member [9 6 5 9 9] 2) -> #f", "(member [5 1 5 5 8] 0) -> #f", "(member [4 1 7 9 9] 7) -> #t", "(member [0 1] 6) -> #f", "(member [8 9 7 5 6] 9) -> #t", "(member [9 6 0 8] 1) -> #f", "(member [5 3 4] 1) -> #f", "(member [0] 9) -> #f", "(member [0 9 6] 2) -> #f", "(member [8 7 2 7] 5) -> #f", "(member [1 2 1 1] 9) -> #f", "(member [6 0 9] 9) -> #t", "(member [] 8) -> #f", "(member [] 5) -> #f", "(member [5 9 7 1 1] 1) -> #t", "(member [8] 0) -> #f", "(member [3 0 4] 3) -> #t"]}
{"time": 0.824943, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 7) -> #f", "(member [2 6] 2) -> #t", "(member [] 6) -> #f", "(member [3 4 1 0] 4) -> #t", "(member [8 7] 1) -> #f", "(member [7 1 1] 6) -> #f", "(member [0 9 8 8 0] 4) -> #f", "(member [5 0 9 3] 2) -> #f", "(member [2 5 7 5] 8) -> #f", "(member [7] 2) -> #f", "(member [6 8 6] 8) -> #t", "(member [5 7 1 5] 0) -> #f", "(member [6 1] 0) -> #f", "(member [7 1] 5) -> #f", "(member [4 9 2 7 4] 1) -> #f", "(member [8 6 8 3] 4) -> #f", "(member [3 7 3 0] 6) -> #f", "(member [] 2) -> #f", "(member [0 0 1] 7) -> #f", "(member [6] 3) -> #f", "(member [2 1] 1) -> #t", "(member [1 9 0] 8) -> #f", "(member [2 9 4 5] 7) -> #f", "(member [1 0 9 2 1] 8) -> #f", "(member [] 0) -> #f", "(member [0 1] 2) -> #f", "(member [3 6 6 8] 8) -> #t", "(member [7 3 8] 1) -> #f", "(member [2 1 6 3 2] 9) -> #f", "(member [7 3 2 5] 9) -> #f", "(member [2 1 3 2] 7) -> #f", "(member [9 1 1 1] 3) -> #f", "(member [6 7] 5) -> #f", "(member [5 0 3 9 9] 8) -> #f", "(member [] 1) -> #f", "(member [0] 4) -> #f", "(member [2 4 5 4 2] 3) -> #f", "(member [3 1] 7) -> #f", "(member [6 5 8 8 4] 1) -> #f", "(member [5 2 1] 9) -> #f", "(member [8 1] 0) -> #f", "(member [5] 2) -> #f", "(member [5 4] 8) -> #f", "(member [] 4) -> #f", "(member [7] 6) -> #f", "(member [2 6 4 3 4] 5) -> #f", "(member [7 3] 5) -> #f", "(member [5 2 4 5] 1) -> #f", "(member [5 3 6 0] 6) -> #t", "(member [7 8 7] 7) -> #t", "(member [8 2 3 4] 1) -> #f", "(member [] 5) -> #f", "(member [] 9) -> #f", "(member [9 0 1] 6) -> #f", "(member [8 5 5 6 3] 6) -> #t", "(member [6 1 7 4 4] 4) -> #t", "(member [8 5] 4) -> #f", "(member [0 4 0] 2) -> #f", "(member [] 2) -> #f", "(member [0 6 4] 1) -> #f", "(member [] 0) -> #f", "(member [0 2 6 9 4] 0) -> #t", "(member [0 4 7] 7) -> #t", "(member [3 1 8 0 7] 9) -> #f", "(member [3 6 3 9 8] 7) -> #f", "(member [1 2 1 3] 5) -> #f", "(member [] 6) -> #f", "(member [9] 0) -> #f", "(member [] 0) -> #f", "(member [3] 0) -> #f", "(member [4 7] 2) -> #f", "(member [4 1 5] 8) -> #f", "(member [2] 8) -> #f", "(member [4 5] 6) -> #f", "(member [] 8) -> #f", "(member [5 2 0 0 5] 3) -> #f", "(member [2] 3) -> #f", "(member [] 4) -> #f", "(member [0 7] 2) -> #f", "(member [8 9 7 4] 3) -> #f", "(member [] 3) -> #f", "(member [0 3] 0) -> #t", "(member [] 6) -> #f", "(member [3 3 7 9] 8) -> #f", "(member [8 8] 9) -> #f", "(member [5 2 1] 6) -> #f", "(member [3] 0) -> #f", "(member [7 0 4 5] 4) -> #t", "(member [0 2 4 2] 3) -> #f", "(member [5 1 9 0] 9) -> #t", "(member [] 7) -> #f", "(member [5 8 7 2 4] 4) -> #t"]}
{"time": 1.063981, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 3) -> #f", "(member [3 0] 7) -> #f", "(member [3 7 7 2] 4) -> #f", "(member [5 1 0 7] 0) -> #t", "(member [4 0 3] 6) -> #f", "(member [0 6 3] 2) -> #f", "(member [4 5] 0) -> #f", "(member [0 0] 6) -> #f", "(member [8 0 1 2] 0) -> #t", "(member [] 8) -> #f", "(member [] 7) -> #f", "(member [] 5) -> #f", "(member [5] 1) -> #f", "(member [9 2 2 5] 0) -> #f", "(member [7 5 5 1 5] 4) -> #f", "(member [1 0 3 3 5] 3) -> #t", "(member [7] 4) -> #f", "(member [4 9 8] 4) -> #t", "(member [8 9] 8) -> #t", "(member [6 2 0 1] 7) -> #f", "(member [6 5 7] 5) -> #t", "(member [5 2 7] 6) -> #f", "(member [1 2] 4) -> #f", "(member [0 9] 5) -> #f", "(member [8 1 1 8 7] 0) -> #f", "(member [5 4] 2) -> #f", "(member [] 8) -> #f", "(member [9 2 3 0 3] 1) -> #f", "(member [5 5 4] 3) -> #f", "(member [] 7) -> #f", "(member [] 8) -> #f", "(member [7 4 5 6] 0) -> #f", "(member [9 2] 7) -> #f", "(member [2 4] 5) -> #f", "(member [6 9] 2) -> #f", "(member [4 4 4 6 3] 1) -> #f", "(member [6] 8) -> #f", "(member [6 5 3 8 7] 2) -> #f", "(member [5 3 9 9] 9) -> #t", "(member [8 0 2 9] 2) -> #t", "(member [2 2 4 8 7] 1) -> #f", "(member [3 7] 7) -> #t", "(member [7 7] 7) -> #t", "(member [3] 4) -> #f", "(member [0 1 5 4 1] 9) -> #f", "(member [3 3 8 0 7] 6) -> #f", "(member [8 8 8 1 9] 6) -> #f", "(member [3] 6) -> #f", "(member [8 1 0] 8) -> #t", "(member [8] 8) -> #t", "(member [8 9 7 4 7] 0) -> #f", "(member [] 0) -> #f", "(member [5 6 0] 2) -> #f", "(member [] 2) -> #f", "(member [] 6) -> #f", "(member [0 1] 1) -> #t", "(member [4 2 1 0] 9) -> #f", "(member [6 2 7 1] 8) -> #f", "(member [] 4) -> #f", "(member [9] 8) -> #f", "(member [1 3 8 0] 4) -> #f", "(member [8 7 0 2 5] 2) -> #t", "(member [1 2 0] 7) -> #f", "(member [3 1] 1) -> #t", "(member [5] 7) -> #f", "(member [8 3 9] 0) -> #f", "(member [6 7 0 5] 9) -> #f", "(member [6] 6) -> #t", "(member [3 8 4] 3) -> #t", "(member [8] 1) -> #f", "(member [6 6] 1) -> #f", "(member [8 4] 0) -> #f", "(member [6 4] 2) -> #f", "(member [8 3 7 4 6] 4) -> #t", "(member [2 9 7] 4) -> #f", "(member [2 7] 0) -> #f", "(member [3 4 4 4] 5) -> #f", "(member [1 5 4 2 6] 8) -> #f", "(member [] 1) -> #f", "(member [0 3 0 2 1] 6) -> #f", "(member [] 0) -> #f", "(member [] 0) -> #f", "(member [8 0 4 8 9] 8) -> #t", "(member [1] 8) -> #f", "(member [2] 8) -> #f", "(member [9 7 8 6] 9) -> #t", "(member [3 5 5 7 4] 0) -> #f", "(member [] 4) -> #f", "(member [1 1] 7) -> #f", "(member [] 6) -> #f", "(member [] 3) -> #f", "(member [] 0) -> #f"]}
{"time": 0.828314, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 7) -> #f", "(member [] 1) -> #f", "(member [3 9] 9) -> #t", "(member [] 4) -> #f", "(member [1 4] 4) -> #t", "(member [] 0) -> #f", "(member [5 3 2 2] 7) -> #f", "(member [5 0 7 0] 7) -> #t", "(member [] 6) -> #f", "(member [2 8 2 8 9] 1) -> #f", "(member [8 2] 1) -> #f", "(member [] 6) -> #f", "(member [4 6 4 1] 0) -> #f", "(member [3 8 1 7] 8) -> #t", "(member [0 6 7 4] 1) -> #f", "(member [] 5) -> #f", "(member [0 4] 7) -> #f", "(member [] 8) -> #f", "(member [4 2 2 9] 9) -> #t", "(member [9 6 0] 7) -> #f", "(member [5 2 6] 8) -> #f", "(member [6 5 3 2 4] 2) -> #t", "(member [0 1 2 5 1] 3) -> #f", "(member [] 4) -> #f", "(member [3 1 9 7 7] 2) -> #f", "(member [7 7 4 3] 5) -> #f", "(member [7 2] 8) -> #f", "(member [2 7] 4) -> #f", "(member [9 0] 0) -> #t", "(member [7 5 2 5 2] 6) -> #f", "(member [4 6 1 1 0] 6) -> #t", "(member [7 2] 1) -> #f", "(member [] 3) -> #f", "(member [9 2 2 2] 1) -> #f", "(member [] 7) -> #f", "(member [7 1] 8) -> #f", "(member [5] 2) -> #f", "(member [] 4) -> #f", "(member [6 6 8 8 7] 6) -> #t", "(member [9 1 7] 1) -> #t", "(member [] 1) -> #f", "(member [3 2 9] 3) -> #t", "(member [8] 0) -> #f", "(member [3 9 8] 5) -> #f", "(member [3 9 5 0] 7) -> #f", "(member [8 5] 1) -> #f", "(member [3 5 3] 4) -> #f", "(member [6] 3) -> #f", "(member [3 7 4] 6) -> #f", "(member [0 7 5 6 9] 4) -> #f", "(member [4 6 5 4] 0) -> #f", "(member [1 7 2 2] 6) -> #f", "(member [8 6] 7) -> #f", "(member [8 2 9 1] 2) -> #t", "(member [6 1 0 9] 3) -> #f", "(member [3 3 2] 7) -> #f", "(member [] 5) -> #f", "(member [3 7] 4) -> #f", "(member [5 9 5 6 2] 7) -> #f", "(member [8 0 9] 6) -> #f", "(member [4 8 7] 0) -> #f", "(member [8 3 6 1] 2) -> #f", "(member [1] 2) -> #f", "(member [9] 5) -> #f", "(member [] 0) -> #f", "(member [6 2 4 3 1] 0) -> #f", "(member [7 1] 5) -> #f", "(member [2 5 3 9 3] 9) -> #t", "(member [8 0 0] 3) -> #f", "(member [6 1 2] 6) -> #t", "(member [9 4 8] 1) -> #f", "(member [] 6) -> #f", "(member [4 6 8] 6) -> #t", "(member [7 8 7 2] 3) -> #f", "(member [] 7) -> #f", "(member [6] 3) -> #f", "(member [8] 2) -> #f", "(member [7 6] 1) -> #f", "(member [7] 2) -> #f", "(member [0 6 2 9] 8) -> #f", "(member [] 9) -> #f", "(member [4 3 3 1 2] 5) -> #f", "(member [0] 3) -> #f", "(member [8 4 9 9 6] 4) -> #t", "(member [] 1) -> #f", "(member [3 0 2 1 4] 6) -> #f", "(member [] 0) -> #f", "(member [4 9 8 5] 0) -> #f", "(member [8 5 5] 9) -> #f", "(member [4 3 9 8 0] 3) -> #t", "(member [] 5) -> #f", "(member [2 7 9 0 9] 6) -> #f"]}
{"time": 0.689147, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 4) -> #f", "(member [9 0 3 5 2] 8) -> #f", "(member [3] 3) -> #t", "(member [] 5) -> #f", "(member [5] 3) -> #f", "(member [6 7 0 2 6] 6) -> #t", "(member [1 4 5 0] 4) -> #t", "(member [] 3) -> #f", "(member [5 7 7] 4) -> #f", "(member [2 0 1 3 6] 4) -> #f", "(member [] 7) -> #f", "(member [1 3 2] 8) -> #f", "(member [7] 6) -> #f", "(member [4 4 9] 3) -> #f", "(member [2 0 2 5] 1) -> #f", "(member [] 5) -> #f", "(member [8 4 2] 6) -> #f", "(member [1 9 8] 8) -> #t", "(member [8 6 4 3 0] 9) -> #f", "(member [] 9) -> #f", "(member [] 5) -> #f", "(member [2 8 9 7 2] 6) -> #f", "(member [] 8) -> #f", "(member [2 6 0 2 8] 4) -> #f", "(member [4 9 0] 8) -> #f", "(member [1 9 4] 3) -> #f", "(member [] 4) -> #f", "(member [1 4] 1) -> #t", "(member [1 0 1 2] 8) -> #f", "(member [] 5) -> #f", "(member [0] 6) -> #f", "(member [7 0 5] 9) -> #f", "(member [2 7 6 7] 5) -> #f", "(member [3 9 5 6] 7) -> #f", "(member [] 4) -> #f", "(member [3 8 8 6] 5) -> #f", "(member [0 9 5 2] 1) -> #f", "(member [9] 2) -> #f", "(member [6 4 4 8 8] 8) -> #t", "(member [3 7 7] 0) -> #f", "(member [0 8 7] 8) -> #t", "(member [6] 4) -> #f", "(member [] 5) -> #f", "(member [2 5 2 2] 8) -> #f", "(member [] 1) -> #f", "(member [2] 9) -> #f", "(member [4 6 0 8 6] 8) -> #t", "(member [8] 9) -> #f", "(member [2] 9) -> #f", "(member [3 1 3 7] 7) -> #t", "(member [2 9 3] 0) -> #f", "(member [8 8 5] 7) -> #f", "(member [6 1] 4) -> #f", "(member [8 6 8 0] 4) -> #f", "(member [] 2) -> #f", "(member [8 4 0 3 5] 8) -> #t", "(member [] 1) -> #f", "(member [] 1) -> #f", "(member [] 5) -> #f", "(member [5] 2) -> #f", "(member [0] 8) -> #f", "(member [] 3) -> #f", "(member [6 2 8 2] 8) -> #t", "(member [0] 0) -> #t", "(member [9] 0) -> #f", "(member [5 4 3 8 2] 6) -> #f", "(member [8 2 9 3 1] 3) -> #t", "(member [0 6] 0) -> #t", "(member [8 8] 5) -> #f", "(member [4] 1) -> #f", "(member [3 3 8 5] 4) -> #f", "(member [1 5 0] 7) -> #f", "(member [5] 7) -> #f", "(member [1] 8) -> #f", "(member [2 4 7 7] 4) -> #t", "(member [8 3 5] 7) -> #f", "(member [9 0] 6) -> #f", "(member [5 6] 5) -> #t", "(member [] 7) -> #f", "(member [0 3] 2) -> #f", "(member [] 3) -> #f", "(member [] 5) -> #f", "(member [2 8 1 6] 0) -> #f", "(member [3 0 0] 0) -> #t", "(member [2 3 4 6 2] 0) -> #f", "(member [] 3) -> #f", "(member [0 2] 9) -> #f", "(member [2 6 3 7] 8) -> #f", "(member [0 9 1 4 4] 1) -> #t", "(member [9] 5) -> #f", "(member [3 3] 1) -> #f", "(member [8 1] 9) -> #f"]}
{"time": 1.572714, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (= e (!= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 4) -> #f", "(member [] 7) -> #f", "(member [7 4 2 6 3] 9) -> #f", "(member [1] 3) -> #f", "(member [2 8 3] 9) -> #f", "(member [] 4) -> #f", "(member [0 2 7 0 7] 9) -> #f", "(member [0] 6) -> #f", "(member [5 8 7] 3) -> #f", "(member [6 7 6 0 9] 5) -> #f", "(member [4] 2) -> #f", "(member [4 5] 3) -> #f", "(member [4 5 6 2] 5) -> #t", "(member [] 9) -> #f", "(member [5] 6) -> #f", "(member [7 5 8 3 7] 9) -> #f", "(member [0 5 9 1 4] 2) -> #f", "(member [4 2 0 9 7] 4) -> #t", "(member [] 4) -> #f", "(member [0 9 7] 1) -> #f", "(member [3] 9) -> #f", "(member [5 6] 3) -> #f", "(member [9 9 1 3 6] 2) -> #f", "(member [] 9) -> #f", "(member [7 3 9 6 7] 1) -> #f", "(member [2 3 6 3] 1) -> #f", "(member [9 3 2 3 9] 8) -> #f", "(member [8 3 2 5] 1) -> #f", "(member [5] 1) -> #f", "(member [7 2 1 7] 6) -> #f", "(member [1 5 0 2] 7) -> #f", "(member [5 5 4] 1) -> #f", "(member [0 9 1] 0) -> #t", "(member [9] 8) -> #f", "(member [2 6] 7) -> #f", "(member [1 9 8 7 3] 6) -> #f", "(member [] 0) -> #f", "(member [8 2] 8) -> #t", "(member [3 1 7 1 0] 5) -> #f", "(member [3 3 6 0] 8) -> #f", "(member [2 6 5 7 1] 0) -> #f", "(member [5 6 2 0 5] 2) -> #t", "(member [9 2 6] 8) -> #f", "(member [5] 6) -> #f", "(member [6] 3) -> #f", "(member [6 7] 3) -> #f", "(member [3 6 8 2 9] 8) -> #t", "(member [] 6) -> #f", "(member [4 9 2 3] 9) -> #t", "(member [0] 5) -> #f", "(member [] 9) -> #f", "(member [9 0 5 5 9] 8) -> #f", "(member [5 3 0 4 7] 0) -> #t", "(member [8 8 2] 9) -> #f", "(member [1] 1) -> #t", "(member [9 5 7 4] 3) -> #f", "(member [3 9 9 1] 3) -> #t", "(member [7 1 7 9 0] 9) -> #t", "(member [0] 6) -> #f", "(member [3] 7) -> #f", "(member [8] 0) -> #f", "(member [2 2 3 0 5] 1) -> #f", "(member [1 0] 2) -> #f", "(member [0 3 0 0 8] 6) -> #f", "(member [6] 1) -> #f", "(member [0 1 3 8] 3) -> #t", "(member [9 2] 0) -> #f", "(member [5 5 3 1 1] 9) -> #f", "(member [9 6] 1) -> #f", "(member [5 3 4] 0) -> #f", "(member [1 4] 6) -> #f", "(member [3 2 0 9 1] 5) -> #f", "(member [0 6 3 1 1] 7) -> #f", "(member [0 9 4 5] 7) -> #f", "(member [9] 7) -> #f", "(member [1 8 8 8 6] 6) -> #t", "(member [0 2 6] 7) -> #f", "(member [2 2 0] 6) -> #f", "(member [7 1 8] 3) -> #f", "(member [] 8) -> #f", "(member [] 7) -> #f", "(member [6 7 4 6 5] 9) -> #f", "(member [] 4) -> #f", "(member [] 8) -> #f", "(member [0] 9) -> #f", "(member [3 5 4] 1) -> #f", "(member [5 7] 8) -> #f", "(member [3 9 3] 0) -> #f", "(member [3] 3) -> #t", "(member [0 4 3 1] 4) -> #t", "(member [6] 1) -> #f", "(member [0] 9) -> #f"]}
{"time": 1.294808, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 4) -> #f", "(member [6 0 6] 2) -> #f", "(member [0 9 5] 7) -> #f", "(member [0 4 9 3 2] 7) -> #f", "(member [7 6 5 1] 4) -> #f", "(member [1 2 7] 7) -> #t", "(member [5 7 1 5] 8) -> #f", "(member [5 2 2] 1) -> #f", "(member [8] 6) -> #f", "(member [8 9 6 0 4] 6) -> #t", "(member [0] 0) -> #t", "(member [6 9 9 1 5] 8) -> #f", "(member [4 7 3 9] 1) -> #f", "(member [3 9 2 0 7] 4) -> #f", "(member [2 4] 2) -> #t", "(member [8] 0) -> #f", "(member [5 9 6 7 3] 8) -> #f", "(member [6 8 8 2] 7) -> #f", "(member [] 5) -> #f", "(member [4] 0) -> #f", "(member [] 6) -> #f", "(member [2 7 6] 2) -> #t", "(member [5] 1) -> #f", "(member [3] 8) -> #f", "(member [0 0 7] 1) -> #f", "(member [4 0 8 4] 7) -> #f", "(member [7 7 2 8 9] 5) -> #f", "(member [9] 4) -> #f", "(member [7 9 7] 7) -> #t", "(member [] 5) -> #f", "(member [1 9 1 3] 5) -> #f", "(member [9 0 5] 3) -> #f", "(member [3] 5) -> #f", "(member [] 7) -> #f", "(member [3 3 8 1 7] 2) -> #f", "(member [2 6] 1) -> #f", "(member [8] 4) -> #f", "(member [] 2) -> #f", "(member [] 1) -> #f", "(member [9 3 9 2] 3) -> #t", "(member [] 2) -> #f", "(member [4 0 7 6 9] 4) -> #t", "(member [3 0 8 8] 2) -> #f", "(member [] 1) -> #f", "(member [5 7 4 9 8] 6) -> #f", "(member [9] 8) -> #f", "(member [8] 2) -> #f", "(member [7 3] 4) -> #f", "(member [3 7 8 7] 4) -> #f", "(member [] 3) -> #f", "(member [3] 2) -> #f", "(member [1 9 5] 2) -> #f", "(member [5] 5) -> #t", "(member [3 1 9] 3) -> #t", "(member [7 4] 9) -> #f", "(member [7] 5) -> #f", "(member [] 3) -> #f", "(member [3 3] 2) -> #f", "(member [] 0) -> #f", "(member [2] 6) -> #f", "(member [6 3 6] 3) -> #t", "(member [5 1 6 6] 2) -> #f", "(member [9] 0) -> #f", "(member [0 1 6 8 9] 9) -> #t", "(member [5 7 5 5] 5) -> #t", "(member [2 4 5 9] 4) -> #t", "(member [] 2) -> #f", "(member [8] 3) -> #f", "(member [7 1 8 5] 7) -> #t", "(member [9 8] 8) -> #t", "(member [9 8 9] 1) -> #f", "(member [] 0) -> #f", "(member [5 1] 1) -> #t", "(member [9 4] 6) -> #f", "(member [4 1] 9) -> #f", "(member [7] 2) -> #f", "(member [3 7 9 5] 2) -> #f", "(member [0 1 0 0 0] 5) -> #f", "(member [4 2 1 7] 2) -> #t", "(member [] 2) -> #f", "(member [4 0] 1) -> #f", "(member [] 2) -> #f", "(member [5] 9) -> #f", "(member [] 8) -> #f", "(member [7 1 8] 5) -> #f", "(member [9 7] 8) -> #f", "(member [8 8 1 2 3] 0) -> #f", "(member [5 6] 8) -> #f", "(member [1] 8) -> #f", "(member [9 6 8 9] 1) -> #f", "(member [] 1) -> #f", "(member [7 0] 8) -> #f"]}
{"time": 0.774796, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 7) -> #f", "(member [4] 5) -> #f", "(member [9 9] 2) -> #f", "(member [9 0 9] 9) -> #t", "(member [5 4 0] 2) -> #f", "(member [8 7] 7) -> #t", "(member [9 6 5 9] 0) -> #f", "(member [9 9 9 9] 5) -> #f", "(member [0 8 4 5] 2) -> #f", "(member [5 8 0 8 2] 0) -> #t", "(member [1 6] 5) -> #f", "(member [4] 4) -> #t", "(member [9 3 4 7 0] 7) -> #t", "(member [9 3] 1) -> #f", "(member [1 4 4] 2) -> #f", "(member [4 8 1] 8) -> #t", "(member [8 5 6] 1) -> #f", "(member [7 9 6 0] 8) -> #f", "(member [3 8 0 2] 0) -> #t", "(member [] 1) -> #f", "(member [9 4] 2) -> #f", "(member [1 3 7 4 0] 0) -> #t", "(member [] 9) -> #f", "(member [6 0] 0) -> #t", "(member [1 9 6 6 2] 2) -> #t", "(member [4 0 9 7] 3) -> #f", "(member [] 0) -> #f", "(member [7] 2) -> #f", "(member [2 8] 4) -> #f", "(member [2 5 3] 7) -> #f", "(member [3 1] 0) -> #f", "(member [] 8) -> #f", "(member [0 9 4 4 5] 6) -> #f", "(member [1 4 8 9 7] 8) -> #t", "(member [8 0] 4) -> #f", "(member [] 1) -> #f", "(member [0 4 5] 5) -> #t", "(member [0 9 1 3 9] 8) -> #f", "(member [3 3] 9) -> #f", "(member [0 9 9 5 9] 8) -> #f", "(member [] 6) -> #f", "(member [6 7 7] 1) -> #f", "(member [2 4 2 5] 2) -> #t", "(member [2 7] 9) -> #f", "(member [0 9 5] 2) -> #f", "(member [7 6] 2) -> #f", "(member [8 7 0 7] 5) -> #f", "(member [9 4] 1) -> #f", "(member [1 2 7 6] 0) -> #f", "(member [] 7) -> #f", "(member [1] 5) -> #f", "(member [8 2 2 0] 3) -> #f", "(member [9 4 4 9 0] 2) -> #f", "(member [5] 1) -> #f", "(member [3 9 7] 2) -> #f", "(member [3 2 7 1] 4) -> #f", "(member [7 9 3 7 1] 6) -> #f", "(member [9 2] 6) -> #f", "(member [2] 9) -> #f", "(member [1 0 6] 4) -> #f", "(member [7 5] 9) -> #f", "(member [5 8 3] 7) -> #f", "(member [8 6] 4) -> #f", "(member [] 5) -> #f", "(member [1 7 4] 4) -> #t", "(member [] 1) -> #f", "(member [1] 2) -> #f", "(member [6 7 5] 5) -> #t", "(member [9 6] 8) -> #f", "(member [] 2) -> #f", "(member [8] 7) -> #f", "(member [] 8) -> #f", "(member [] 7) -> #f", "(member [] 5) -> #f", "(member [9 0 4 5] 6) -> #f", "(member [8 1 8] 0) -> #f", "(member [5 7] 3) -> #f", "(member [] 3) -> #f", "(member [2 9 6] 1) -> #f", "(member [9 1 8 0 5] 0) -> #t", "(member [1 0 3 2] 2) -> #t", "(member [3 7 2 4 7] 3) -> #t", "(member [8 5 7 2] 6) -> #f", "(member [] 1) -> #f", "(member [4 0 5 5] 7) -> #f", "(member [2] 3) -> #f", "(member [7 5 6 7] 9) -> #f", "(member [8 8 6] 2) -> #f", "(member [4 9 7 0] 9) -> #t", "(member [8 2 8 5 4] 0) -> #f", "(member [8 9] 0) -> #f", "(member [1] 2) -> #f"]}
{"time": 0.872423, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 8) -> #f", "(member [4 0 7] 6) -> #f", "(member [9 3 8 0 2] 3) -> #t", "(member [2 9] 5) -> #f", "(member [6 8] 3) -> #f", "(member [8 5] 8) -> #t", "(member [6 4] 8) -> #f", "(member [1] 2) -> #f", "(member [] 3) -> #f", "(member [3 9 6 9 0] 6) -> #t", "(member [4 3] 9) -> #f", "(member [5 0 6 6 8] 1) -> #f", "(member [5 9] 7) -> #f", "(member [2 6] 1) -> #f", "(member [7 9] 3) -> #f", "(member [4] 9) -> #f", "(member [3 8 9] 0) -> #f", "(member [6] 9) -> #f", "(member [8 0 5 5] 7) -> #f", "(member [8 6 2 9] 5) -> #f", "(member [5 7 4 0] 0) -> #t", "(member [] 9) -> #f", "(member [1 7 9 2] 4) -> #f", "(member [3 4] 0) -> #f", "(member [] 1) -> #f", "(member [4 8 4 7] 6) -> #f", "(member [6 4] 0) -> #f", "(member [2 8 9] 9) -> #t", "(member [9] 3) -> #f", "(member [] 8) -> #f", "(member [3 7 5 8 8] 9) -> #f", "(member [3 5] 2) -> #f", "(member [7 8] 1) -> #f", "(member [2 6 7] 0) -> #f", "(member [6 1 3 6 7] 2) -> #f", "(member [3 1] 9) -> #f", "(member [2] 4) -> #f", "(member [] 4) -> #f", "(member [0 6 3] 1) -> #f", "(member [] 8) -> #f", "(member [] 4) -> #f", "(member [5] 5) -> #t", "(member [0 8] 2) -> #f", "(member [2 0 6 3] 3) -> #t", "(member [7 3 0] 1) -> #f", "(member [1] 0) -> #f", "(member [9 7 3 0] 7) -> #t", "(member [5] 6) -> #f", "(member [3] 0) -> #f", "(member [5 5] 3) -> #f", "(member [8 8] 3) -> #f", "(member [] 6) -> #f", "(member [3 5] 1) -> #f", "(member [9 7 7 1 9] 0) -> #f", "(member [4 4 8 1] 3) -> #f", "(member [6 5 6] 8) -> #f", "(member [] 0) -> #f", "(member [9 3 9 7 6] 3) -> #t", "(member [3 9] 8) -> #f", "(member [1 1] 2) -> #f", "(member [9] 4) -> #f", "(member [2 0 3] 3) -> #t", "(member [7] 3) -> #f", "(member [3 0 9 1 7] 8) -> #f", "(member [8 4 6 2 0] 2) -> #t", "(member [2 4 8 0] 9) -> #f", "(member [6 1] 2) -> #f", "(member [2 4 4 0 4] 6) -> #f", "(member [2 9 2] 5) -> #f", "(member [0 6] 5) -> #f", "(member [6] 2) -> #f", "(member [2 1 0] 5) -> #f", "(member [7 9] 5) -> #f", "(member [2 0 0] 4) -> #f", "(member [6 3 5 7] 3) -> #t", "(member [5 5] 2) -> #f", "(member [2 6 8] 5) -> #f", "(member [2 6] 7) -> #f", "(member [1] 6) -> #f", "(member [6 4 7 0] 6) -> #t", "(member [7 2 0 7 2] 3) -> #f", "(member [7 1 5] 1) -> #t", "(member [5 7 1] 6) -> #f", "(member [] 9) -> #f", "(member [4 7 6 6 9] 6) -> #t", "(member [8 9] 9) -> #t", "(member [4 0] 6) -> #f", "(member [4] 2) -> #f", "(member [0] 5) -> #f", "(member [3 4 4 6] 0) -> #f", "(member [8 8 9 5 6] 7) -> #f", "(member [4 9 6 4 3] 2) -> #f"]}
{"time": 1.273663, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 3) -> #f", "(member [3 4 0] 1) -> #f", "(member [1 4 1 0] 2) -> #f", "(member [3] 4) -> #f", "(member [9] 4) -> #f", "(member [] 4) -> #f", "(member [5 1] 9) -> #f", "(member [4] 3) -> #f", "(member [1 9] 7) -> #f", "(member [4 2 7 9] 2) -> #t", "(member [2 4] 5) -> #f", "(member [7 9] 4) -> #f", "(member [8 1 0 9] 1) -> #t", "(member [0] 0) -> #t", "(member [6 2 9 3] 5) -> #f", "(member [2 3 3 3 2] 9) -> #f", "(member [1 9] 9) -> #t", "(member [6 7 3 2] 9) -> #f", "(member [] 6) -> #f", "(member [0 3 6] 8) -> #f", "(member [0 2 1 1 0] 4) -> #f", "(member [3] 2) -> #f", "(member [2 7 7] 0) -> #f", "(member [8 7 8 8] 7) -> #t", "(member [0] 3) -> #f", "(member [3 8 0] 6) -> #f", "(member [9 3 9 0] 5) -> #f", "(member [] 1) -> #f", "(member [8 9 9] 2) -> #f", "(member [] 1) -> #f", "(member [9 3 0 4 4] 0) -> #t", "(member [] 9) -> #f", "(member [5 3 1 5 6] 5) -> #t", "(member [6 0] 3) -> #f", "(member [6 2 9] 0) -> #f", "(member [3 7] 6) -> #f", "(member [2] 3) -> #f", "(member [7 2 9 1] 8) -> #f", "(member [3 6 9 1] 7) -> #f", "(member [6 7 9 2 7] 1) -> #f", "(member [4 9 1 7 8] 5) -> #f", "(member [7 1] 0) -> #f", "(member [] 0) -> #f", "(member [4 6 8 8 6] 2) -> #f", "(member [4 5 0] 4) -> #t", "(member [9 7 9 9] 9) -> #t", "(member [3 2] 7) -> #f", "(member [5 4] 2) -> #f", "(member [6 2] 6) -> #t", "(member [] 8) -> #f", "(member [0 3 3] 7) -> #f", "(member [5 4] 4) -> #t", "(member [] 2) -> #f", "(member [5 7 9] 6) -> #f", "(member [3 4 8] 7) -> #f", "(member [1] 2) -> #f", "(member [4 4 4] 1) -> #f", "(member [] 1) -> #f", "(member [6] 9) -> #f", "(member [5 2 9 7] 3) -> #f", "(member [9 8 1 2 9] 9) -> #t", "(member [2 7 5 1] 6) -> #f", "(member [4 4 2] 3) -> #f", "(member [3 1 9 4 8] 0) -> #f", "(member [9 1 5] 1) -> #t", "(member [7 5 7] 1) -> #f", "(member [3 3] 6) -> #f", "(member [6 4 9] 8) -> #f", "(member [] 1) -> #f", "(member [5 3 2 4] 3) -> #t", "(member [2 7 3] 9) -> #f", "(member [7] 3) -> #f", "(member [7 2 2 2] 7) -> #t", "(member [5 0] 9) -> #f", "(member [9 6 9 1] 1) -> #t", "(member [3] 9) -> #f", "(member [5 9 4 6] 4) -> #t", "(member [8 7 7 3 3] 0) -> #f", "(member [6 0 7] 8) -> #f", "(member [6 7 3 9] 8) -> #f", "(member [0 9 4] 8) -> #f", "(member [2 1] 8) -> #f", "(member [5 1 1 3 4] 2) -> #f", "(member [] 2) -> #f", "(member [6] 4) -> #f", "(member [8 4 0 9 2] 0) -> #t", "(member [0 7] 9) -> #f", "(member [2 6 4] 0) -> #f", "(member [9] 4) -> #f", "(member [9 7 8 0] 1) -> #f", "(member [1 8] 4) -> #f", "(member [] 9) -> #f"]}
{"time": 0.928663, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 2) -> #f", "(member [2 0 6 0] 0) -> #t", "(member [0 9 6 8] 3) -> #f", "(member [] 0) -> #f", "(member [3 5 0 0 3] 2) -> #f", "(member [7 5 7 1 2] 7) -> #t", "(member [] 6) -> #f", "(member [4 1 3] 0) -> #f", "(member [9 0 4 1] 3) -> #f", "(member [] 6) -> #f", "(member [0] 1) -> #f", "(member [0 5 6 8 8] 9) -> #f", "(member [5 2 8 7] 2) -> #t", "(member [1] 4) -> #f", "(member [6 5 3 0 9] 9) -> #t", "(member [8 5 3 4 8] 6) -> #f", "(member [5 9 2] 1) -> #f", "(member [9] 1) -> #f", "(member [1 1 9] 9) -> #t", "(member [3 9 3 0 2] 3) -> #t", "(member [5 5 0 1] 3) -> #f", "(member [7 5] 1) -> #f", "(member [3 6 6 3] 1) -> #f", "(member [1 6 6] 3) -> #f", "(member [6 3 9] 5) -> #f", "(member [6 3 4 4 2] 8) -> #f", "(member [9 9 8 3 5] 1) -> #f", "(member [6 1 0 6] 8) -> #f", "(member [7 0] 7) -> #t", "(member [3] 2) -> #f", "(member [0 9 7 7] 1) -> #f", "(member [] 7) -> #f", "(member [2 2 4] 1) -> #f", "(member [6 3 3 3 6] 5) -> #f", "(member [9 5 8 8] 6) -> #f", "(member [] 1) -> #f", "(member [5 0 1 6] 6) -> #t", "(member [9 8 0 1 1] 9) -> #t", "(member [6 2] 0) -> #f", "(member [0 4] 7) -> #f", "(member [2 7 4 8 5] 8) -> #t", "(member [1 4 7] 5) -> #f", "(member [7 6] 0) -> #f", "(member [] 1) -> #f", "(member [] 3) -> #f", "(member [7] 0) -> #f", "(member [5 0 6 3] 8) -> #f", "(member [4 2 7 2] 3) -> #f", "(member [6 3 1] 7) -> #f", "(member [6 7 9 6] 4) -> #f", "(member [] 3) -> #f", "(member [6 1 6 9 4] 8) -> #f", "(member [5 3 1] 8) -> #f", "(member [5] 2) -> #f", "(member [2 7 9] 3) -> #f", "(member [1 2 8 3] 2) -> #t", "(member [3 3 7 1] 0) -> #f", "(member [7] 4) -> #f", "(member [0] 0) -> #t", "(member [6 4 6 5] 0) -> #f", "(member [] 6) -> #f", "(member [5 5 0 2] 9) -> #f", "(member [] 4) -> #f", "(member [] 1) -> #f", "(member [6 1 8 1] 6) -> #t", "(member [2 8 4 1 3] 5) -> #f", "(member [8 0 9 5] 5) -> #t", "(member [1] 9) -> #f", "(member [5] 1) -> #f", "(member [0 4 4 4] 5) -> #f", "(member [] 5) -> #f", "(member [8 3] 9) -> #f", "(member [] 8) -> #f", "(member [0 6 4 3] 0) -> #t", "(member [4 6 2 4] 6) -> #t", "(member [9 8 1] 7) -> #f", "(member [5] 6) -> #f", "(member [] 8) -> #f", "(member [2 8] 8) -> #t", "(member [2 9] 8) -> #f", "(member [5] 7) -> #f", "(member [3] 8) -> #f", "(member [] 6) -> #f", "(member [8 5] 0) -> #f", "(member [7 5 3 5 2] 9) -> #f", "(member [4 9] 6) -> #f", "(member [2 3 3 2] 7) -> #f", "(member [8 6 7 8] 7) -> #t", "(member [8 3 2 5] 9) -> #f", "(member [4 0] 6) -> #f", "(member [9 3 6 7 7] 5) -> #f", "(member [4 6] 3) -> #f"]}
{"time": 1.345484, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 3) -> #f", "(member [5 3 3] 0) -> #f", "(member [7 7 6] 0) -> #f", "(member [6] 7) -> #f", "(member [6 2 8 1 6] 4) -> #f", "(member [0 9 5 8] 6) -> #f", "(member [] 4) -> #f", "(member [1] 7) -> #f", "(member [1 3 9] 5) -> #f", "(member [4 6 2 5 5] 5) -> #t", "(member [9 8 6 6 6] 2) -> #f", "(member [] 5) -> #f", "(member [4 3 0 2 8] 1) -> #f", "(member [5 2 2 4] 2) -> #t", "(member [1 4 4] 9) -> #f", "(member [0 9 5] 3) -> #f", "(member [9] 3) -> #f", "(member [0 5] 0) -> #t", "(member [3 8 9 9] 8) -> #t", "(member [9] 2) -> #f", "(member [] 6) -> #f", "(member [9 1 8 6] 1) -> #t", "(member [5 3 0 3] 1) -> #f", "(member [] 0) -> #f", "(member [6 3] 2) -> #f", "(member [] 5) -> #f", "(member [] 3) -> #f", "(member [] 4) -> #f", "(member [] 1) -> #f", "(member [8 0 2] 6) -> #f", "(member [3 3] 4) -> #f", "(member [] 3) -> #f", "(member [] 1) -> #f", "(member [3] 0) -> #f", "(member [] 5) -> #f", "(member [2 3 1] 9) -> #f", "(member [6 7] 1) -> #f", "(member [9 3 3] 2) -> #f", "(member [0 5 2 5] 7) -> #f", "(member [9 0] 8) -> #f", "(member [4 8 0 1] 0) -> #t", "(member [6 2 7 2] 6) -> #t", "(member [4 6 4 6 5] 8) -> #f", "(member [9 3] 8) -> #f", "(member [8 4 4 9 9] 7) -> #f", "(member [1 8 7 2 9] 3) -> #f", "(member [8] 6) -> #f", "(member [5 3 0 9] 5) -> #t", "(member [4] 5) -> #f", "(member [] 0) -> #f", "(member [] 7) -> #f", "(member [4 4] 6) -> #f", "(member [6 2] 8) -> #f", "(member [8 0 7 7 1] 4) -> #f", "(member [7 8] 1) -> #f", "(member [2] 5) -> #f", "(member [8 8 3] 0) -> #f", "(member [5 2 2 6 2] 8) -> #f", "(member [6 8 0 3] 6) -> #t", "(member [] 1) -> #f", "(member [4 9 1 1 2] 1) -> #t", "(member [0 0 6 4 1] 6) -> #t", "(member [] 2) -> #f", "(member [5 4 5 7] 8) -> #f", "(member [1] 7) -> #f", "(member [5 7] 0) -> #f", "(member [] 6) -> #f", "(member [8 9 1 4 4] 6) -> #f", "(member [5 7] 5) -> #t", "(member [7 4 3 6 9] 5) -> #f", "(member [] 8) -> #f", "(member [] 9) -> #f", "(member [1 5 5 8 9] 5) -> #t", "(member [8 2] 9) -> #f", "(member [3 2 9] 8) -> #f", "(member [6 5 9] 1) -> #f", "(member [8 8 0 4 3] 5) -> #f", "(member [0 7 4 9 3] 4) -> #t", "(member [3 4 8 1 2] 1) -> #t", "(member [4 1 3] 5) -> #f", "(member [3 0] 6) -> #f", "(member [8 1 6 8 8] 1) -> #t", "(member [6 7 4 9 5] 8) -> #f", "(member [1 1 9 2] 4) -> #f", "(member [9 1 1 3] 5) -> #f", "(member [3 0 5] 2) -> #f", "(member [2] 0) -> #f", "(member [6 8 1] 6) -> #t", "(member [6 6] 7) -> #f", "(member [0 3] 6) -> #f", "(member [3 7 8] 3) -> #t", "(member [8] 9) -> #f"]}
{"time": 1.292817, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 1) -> #f", "(member [3] 9) -> #f", "(member [9 0] 6) -> #f", "(member [6] 3) -> #f", "(member [4 0 1] 7) -> #f", "(member [6] 3) -> #f", "(member [0 4 7 2] 1) -> #f", "(member [6 6 4 0] 5) -> #f", "(member [6 6 6] 7) -> #f", "(member [0 1 3 5 2] 6) -> #f", "(member [] 7) -> #f", "(member [] 1) -> #f", "(member [4 5 7 0 6] 7) -> #t", "(member [1 8 4] 7) -> #f", "(member [9 0 4] 7) -> #f", "(member [5 2 4] 8) -> #f", "(member [6 2 3 9] 0) -> #f", "(member [2] 1) -> #f", "(member [] 6) -> #f", "(member [6 7 4 5] 4) -> #t", "(member [3] 3) -> #t", "(member [] 8) -> #f", "(member [1 3 0 8] 3) -> #t", "(member [8 4 1] 3) -> #f", "(member [2] 8) -> #f", "(member [3 5 9 8 1] 1) -> #t", "(member [7 7 7 6 3] 4) -> #f", "(member [5 5 7] 8) -> #f", "(member [4 1] 8) -> #f", "(member [5 6 4] 3) -> #f", "(member [4 4] 0) -> #f", "(member [8 8 7 7 0] 1) -> #f", "(member [4 1 6 1] 5) -> #f", "(member [6 9 9 9 9] 0) -> #f", "(member [3 4 2 1 3] 1) -> #t", "(member [6 4 3 3 6] 1) -> #f", "(member [5 5 0 0] 1) -> #f", "(member [3 6 6 2] 8) -> #f", "(member [4] 4) -> #t", "(member [2 2] 0) -> #f", "(member [0 1 5] 6) -> #f", "(member [6 2 4 9 8] 1) -> #f", "(member [8 7 0 0 3] 9) -> #f", "(member [5 4 0 8] 4) -> #t", "(member [3] 2) -> #f", "(member [4 1] 0) -> #f", "(member [1 7] 4) -> #f", "(member [] 5) -> #f", "(member [3 6 1 1] 6) -> #t", "(member [1 1 4] 6) -> #f", "(member [0 0 4] 5) -> #f", "(member [3 9 1 0 8] 3) -> #t", "(member [] 0) -> #f", "(member [1 9 4] 0) -> #f", "(member [3 9 4] 0) -> #f", "(member [] 3) -> #f", "(member [8 9 0 0] 8) -> #t", "(member [5 4 6 4] 3) -> #f", "(member [6] 2) -> #f", "(member [] 2) -> #f", "(member [8 6] 2) -> #f", "(member [] 2) -> #f", "(member [2 5 8 7] 6) -> #f", "(member [] 3) -> #f", "(member [5 2] 2) -> #t", "(member [5 0] 5) -> #t", "(member [2 8 9 6 8] 9) -> #t", "(member [7] 5) -> #f", "(member [1 7 0 0 5] 2) -> #f", "(member [] 5) -> #f", "(member [] 9) -> #f", "(member [9] 7) -> #f", "(member [6 1 8 9] 3) -> #f", "(member [8 8 3 5] 7) -> #f", "(member [8 4] 3) -> #f", "(member [] 5) -> #f", "(member [6 4 8 8 5] 4) -> #t", "(member [] 8) -> #f", "(member [6 3] 4) -> #f", "(member [9 0 1 7 4] 0) -> #t", "(member [0 0 4 6] 0) -> #t", "(member [0 3 2] 2) -> #t", "(member [0 8 6 8] 5) -> #f", "(member [4] 7) -> #f", "(member [1 5] 7) -> #f", "(member [3 8 7] 3) -> #t", "(member [6 5 2 8 8] 6) -> #t", "(member [6 5 8] 4) -> #f", "(member [] 1) -> #f", "(member [1] 4) -> #f", "(member [5 9 1] 2) -> #f", "(member [8 5 0 7 7] 8) -> #t"]}
{"time": 0.979244, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 9) -> #f", "(member [2 8 4] 0) -> #f", "(member [1] 4) -> #f", "(member [5 5] 9) -> #f", "(member [6 1 5 9] 3) -> #f", "(member [4 5 4 7 4] 3) -> #f", "(member [] 0) -> #f", "(member [0 0 8 4] 4) -> #t", "(member [1 6 6] 4) -> #f", "(member [7] 3) -> #f", "(member [5 4] 9) -> #f", "(member [9 2 2 3] 0) -> #f", "(member [8 6 9 6 9] 8) -> #t", "(member [3 8 1 4 0] 4) -> #t", "(member [0 3] 5) -> #f", "(member [2 0 7 9 3] 2) -> #t", "(member [3] 7) -> #f", "(member [0] 5) -> #f", "(member [6 3 6 5] 1) -> #f", "(member [1 7 7 1] 9) -> #f", "(member [1 4 4 7 9] 3) -> #f", "(member [6 9 7 1] 1) -> #t", "(member [3 2] 4) -> #f", "(member [8] 5) -> #f", "(member [9 5] 3) -> #f", "(member [5] 1) -> #f", "(member [5 6 5 6] 6) -> #t", "(member [2 7 7] 3) -> #f", "(member [7] 8) -> #f", "(member [] 7) -> #f", "(member [4 8] 1) -> #f", "(member [8 4 2 7] 4) -> #t", "(member [4 2 4 0] 5) -> #f", "(member [0 1 9 4] 2) -> #f", "(member [5 2 9] 5) -> #t", "(member [5 0 1] 2) -> #f", "(member [8 2 6] 6) -> #t", "(member [2 9 0] 0) -> #t", "(member [2 3 6 5] 1) -> #f", "(member [0 1 0 2] 0) -> #t", "(member [2] 9) -> #f", "(member [4 5 4] 7) -> #f", "(member [1 8 9] 3) -> #f", "(member [6 2 3 0] 4) -> #f", "(member [7 6 9 0] 2) -> #f", "(member [] 0) -> #f", "(member [] 1) -> #f", "(member [2 2 8 2 9] 3) -> #f", "(member [3 9 8 1 3] 4) -> #f", "(member [5 6 4 0 2] 0) -> #t", "(member [4 2 8] 0) -> #f", "(member [] 1) -> #f", "(member [3 2] 1) -> #f", "(member [8 8 7 7 8] 1) -> #f", "(member [] 3) -> #f", "(member [0 5 1 3] 7) -> #f", "(member [7 5 6 4 6] 4) -> #t", "(member [0 7 4] 4) -> #t", "(member [4 0 7 1 3] 0) -> #t", "(member [6 8 1] 2) -> #f", "(member [] 3) -> #f", "(member [] 9) -> #f", "(member [7 0 1 4] 9) -> #f", "(member [] 7) -> #f", "(member [4 7] 0) -> #f", "(member [0 1] 2) -> #f", "(member [0 2 7 1] 2) -> #t", "(member [6 0] 9) -> #f", "(member [] 3) -> #f", "(member [7 1 6] 4) -> #f", "(member [5] 9) -> #f", "(member [9] 3) -> #f", "(member [5] 4) -> #f", "(member [5 2 2] 0) -> #f", "(member [8 5 7 2 8] 2) -> #t", "(member [5 5 0 2 4] 0) -> #t", "(member [5 2 3 5] 0) -> #f", "(member [4 1 4 6] 3) -> #f", "(member [3] 8) -> #f", "(member [6 7 1] 0) -> #f", "(member [3 7 3 7 0] 6) -> #f", "(member [2 7 6] 1) -> #f", "(member [1 0 6 9 2] 4) -> #f", "(member [0 4 7] 8) -> #f", "(member [1 0 4] 0) -> #t", "(member [5 1] 7) -> #f", "(member [3 9 6 7] 7) -> #t", "(member [] 2) -> #f", "(member [9 0] 5) -> #f", "(member [8 0 5 8] 1) -> #f", "(member [3 8 7 0 1] 9) -> #f", "(member [5 4 0] 5) -> #t"]}
{"time": 1.39534, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 1) -> #f", "(member [7 6 6 4 1] 5) -> #f", "(member [0 3 5] 8) -> #f", "(member [7 5] 9) -> #f", "(member [0 0 2 2] 8) -> #f", "(member [9 8 0] 4) -> #f", "(member [6 2] 6) -> #t", "(member [] 2) -> #f", "(member [9 1 2] 7) -> #f", "(member [7 8] 6) -> #f", "(member [5] 1) -> #f", "(member [] 1) -> #f", "(member [1 3] 6) -> #f", "(member [1 1 5] 2) -> #f", "(member [2 6 2] 1) -> #f", "(member [9] 5) -> #f", "(member [1 4 5 6] 3) -> #f", "(member [] 4) -> #f", "(member [1 8 6] 1) -> #t", "(member [] 0) -> #f", "(member [3 2 0] 2) -> #t", "(member [1 5 1 6] 3) -> #f", "(member [9 4 1 0] 4) -> #t", "(member [] 3) -> #f", "(member [] 9) -> #f", "(member [0 2 7] 7) -> #t", "(member [7 2 8 9 6] 6) -> #t", "(member [9 9 3 8] 7) -> #f", "(member [4 0 7 2] 7) -> #t", "(member [5 1 7 7] 2) -> #f", "(member [] 6) -> #f", "(member [] 3) -> #f", "(member [5 8 6] 3) -> #f", "(member [9 0 2 8 3] 3) -> #t", "(member [3 9 5 1] 4) -> #f", "(member [5] 7) -> #f", "(member [0 2 0] 3) -> #f", "(member [6 4 5 5] 0) -> #f", "(member [] 6) -> #f", "(member [0 2] 8) -> #f", "(member [] 8) -> #f", "(member [4] 6) -> #f", "(member [4 0 3 0] 3) -> #t", "(member [8 6 3] 4) -> #f", "(member [2] 8) -> #f", "(member [3] 8) -> #f", "(member [6 2 8 6 3] 6) -> #t", "(member [9 5] 9) -> #t", "(member [1 1 0 9 7] 4) -> #f", "(member [5 1 3 0 5] 2) -> #f", "(member [5 0] 2) -> #f", "(member [2 7 5] 7) -> #t", "(member [7 4 9] 7) -> #t", "(member [] 2) -> #f", "(member [4 1] 0) -> #f", "(member [5 2] 6) -> #f", "(member [1 5 0] 5) -> #t", "(member [0 5] 8) -> #f", "(member [7 1 2 2 4] 0) -> #f", "(member [6 7 6 4] 6) -> #t", "(member [9 3 1] 0) -> #f", "(member [9 7] 5) -> #f", "(member [0 1 8 3] 2) -> #f", "(member [9 8 9 7] 6) -> #f", "(member [0 7 0 9 9] 7) -> #t", "(member [4] 7) -> #f", "(member [9] 8) -> #f", "(member [1] 0) -> #f", "(member [0 9] 3) -> #f", "(member [2 8 0 9] 0) -> #t", "(member [8] 5) -> #f", "(member [3 3 3 1 2] 0) -> #f", "(member [6 3 3 0] 9) -> #f", "(member [0 6 4 6 5] 9) -> #f", "(member [] 1) -> #f", "(member [0 2 4] 5) -> #f", "(member [4 6] 0) -> #f", "(member [6 9 8 7] 3) -> #f", "(member [6 9 2 1 6] 1) -> #t", "(member [5 3 2 2] 6) -> #f", "(member [] 8) -> #f", "(member [3] 7) -> #f", "(member [7 9 7] 8) -> #f", "(member [] 5) -> #f", "(member [5 3 8 0 5] 4) -> #f", "(member [2 4 0 5] 2) -> #t", "(member [9 0 1] 1) -> #t", "(member [9] 9) -> #t", "(member [8 9 0 8] 0) -> #t", "(member [0] 3) -> #f", "(member [] 5) -> #f", "(member [1 5] 4) -> #f"]}
{"time": 1.231878, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (= e (!= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 4) -> #f", "(member [6 3] 5) -> #f", "(member [6 5 2 2 6] 8) -> #f", "(member [] 7) -> #f", "(member [] 2) -> #f", "(member [8 9] 9) -> #t", "(member [3] 5) -> #f", "(member [5 3 9 4 7] 1) -> #f", "(member [9 6 7] 7) -> #t", "(member [] 6) -> #f", "(member [5] 9) -> #f", "(member [2 6 8] 5) -> #f", "(member [3] 6) -> #f", "(member [] 8) -> #f", "(member [7 0 5 4] 1) -> #f", "(member [0 6 4 5] 6) -> #t", "(member [0 0] 1) -> #f", "(member [5 3 3 1 5] 6) -> #f", "(member [5 3 8 3] 8) -> #t", "(member [7 2] 5) -> #f", "(member [8 9 0] 7) -> #f", "(member [2 6] 1) -> #f", "(member [8 6 1 4] 2) -> #f", "(member [6] 9) -> #f", "(member [8] 8) -> #t", "(member [3 4 0 4 5] 8) -> #f", "(member [9 6 1 7] 7) -> #t", "(member [8] 6) -> #f", "(member [5 0 7] 2) -> #f", "(member [3 6 7] 1) -> #f", "(member [8] 9) -> #f", "(member [9] 9) -> #t", "(member [8 6 5 8] 6) -> #t", "(member [2 8 6 4 5] 4) -> #t", "(member [7 5] 0) -> #f", "(member [] 2) -> #f", "(member [4 5 6 8 2] 4) -> #t", "(member [5] 3) -> #f", "(member [6 8 1 4 4] 2) -> #f", "(member [] 6) -> #f", "(member [2 7] 1) -> #f", "(member [4 1] 4) -> #t", "(member [7 3 8] 0) -> #f", "(member [] 2) -> #f", "(member [5 1 0 4] 6) -> #f", "(member [0 7 1 2] 5) -> #f", "(member [1 8] 0) -> #f", "(member [5] 5) -> #t", "(member [3 6 5] 1) -> #f", "(member [8 3] 1) -> #f", "(member [4 6 4 5 3] 3) -> #t", "(member [0] 3) -> #f", "(member [1 6] 7) -> #f", "(member [9 8] 4) -> #f", "(member [7] 2) -> #f", "(member [] 8) -> #f", "(member [1] 2) -> #f", "(member [2 8 5 3] 2) -> #t", "(member [] 7) -> #f", "(member [3 4] 4) -> #t", "(member [0 8 9] 7) -> #f", "(member [5 5 8 1] 3) -> #f", "(member [6] 3) -> #f", "(member [0 4] 2) -> #f", "(member [8 4 9 6 8] 4) -> #t", "(member [9 3 4 4] 0) -> #f", "(member [] 1) -> #f", "(member [] 7) -> #f", "(member [1 2 4] 0) -> #f", "(member [3] 8) -> #f", "(member [] 3) -> #f", "(member [] 3) -> #f", "(member [6 9 5 6 6] 5) -> #t", "(member [2] 9) -> #f", "(member [2 7] 7) -> #t", "(member [7 8 3 7 9] 3) -> #t", "(member [8 4] 4) -> #t", "(member [7] 0) -> #f", "(member [2 0 6 6 4] 7) -> #f", "(member [1 1] 9) -> #f", "(member [] 7) -> #f", "(member [0 7] 7) -> #t", "(member [6 4] 6) -> #t", "(member [9 7 7 6] 6) -> #t", "(member [5] 1) -> #f", "(member [1] 9) -> #f", "(member [] 0) -> #f", "(member [8] 3) -> #f", "(member [1 1] 6) -> #f", "(member [0 3 1 5 6] 4) -> #f", "(member [] 6) -> #f", "(member [] 0) -> #f"]}
{"time": 0.905541, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 2) -> #f", "(member [3 9] 5) -> #f", "(member [2 2] 0) -> #f", "(member [2 3 4 7 8] 5) -> #f", "(member [0 0 8 4] 0) -> #t", "(member [6 0 7 2 1] 6) -> #t", "(member [2] 2) -> #t", "(member [6 7 8 7 8] 4) -> #f", "(member [8 8 0] 5) -> #f", "(member [0] 7) -> #f", "(member [7] 9) -> #f", "(member [] 9) -> #f", "(member [6 3] 4) -> #f", "(member [3 3] 4) -> #f", "(member [] 3) -> #f", "(member [] 7) -> #f", "(member [3] 6) -> #f", "(member [2 9 2 7 4] 1) -> #f", "(member [5 2] 6) -> #f", "(member [5 6 5] 0) -> #f", "(member [] 3) -> #f", "(member [8 7] 2) -> #f", "(member [9 7 8] 4) -> #f", "(member [6 6 5 9] 4) -> #f", "(member [] 1) -> #f", "(member [2 3 5] 3) -> #t", "(member [] 2) -> #f", "(member [0] 9) -> #f", "(member [4] 1) -> #f", "(member [5 3 4 1] 1) -> #t", "(member [4 0 6 7 0] 1) -> #f", "(member [7 3 8 3 0] 0) -> #t", "(member [4 9 7] 1) -> #f", "(member [0 0 5 9 8] 2) -> #f", "(member [3 2 2 8] 8) -> #t", "(member [0 4 4 3 2] 8) -> #f", "(member [8 1 2 3 4] 9) -> #f", "(member [6 6] 7) -> #f", "(member [5] 2) -> #f", "(member [7 9] 7) -> #t", "(member [] 0) -> #f", "(member [1] 9) -> #f", "(member [3 2] 4) -> #f", "(member [4] 7) -> #f", "(member [4 4 7] 0) -> #f", "(member [0 5 1] 5) -> #t", "(member [5 9 9 5 4] 1) -> #f", "(member [3 1 7] 2) -> #f", "(member [] 2) -> #f", "(member [5 4 4 1 5] 9) -> #f", "(member [9 3] 3) -> #t", "(member [9 4 8 4 5] 1) -> #f", "(member [] 6) -> #f", "(member [8 7 4 3 7] 9) -> #f", "(member [] 0) -> #f", "(member [9 1] 8) -> #f", "(member [8 5 3 6 5] 5) -> #t", "(member [7 5 0 3] 9) -> #f", "(member [2 9 2 6 0] 1) -> #f", "(member [7 6] 2) -> #f", "(member [7 3 8] 7) -> #t", "(member [] 7) -> #f", "(member [9 8 2] 1) -> #f", "(member [1 2 5 1] 7) -> #f", "(member [8 5] 3) -> #f", "(member [0 1 5 6 4] 6) -> #t", "(member [2 8] 2) -> #t", "(member [6 7 6] 7) -> #t", "(member [3 7 1 3] 8) -> #f", "(member [] 6) -> #f", "(member [2 5 8] 6) -> #f", "(member [8] 0) -> #f", "(member [4 3] 6) -> #f", "(member [8] 4) -> #f", "(member [6 2 1] 5) -> #f", "(member [1 6] 9) -> #f", "(member [9] 0) -> #f", "(member [] 9) -> #f", "(member [] 4) -> #f", "(member [4 4 8 1 2] 9) -> #f", "(member [0 3 1] 5) -> #f", "(member [1 5 8] 9) -> #f", "(member [9 0 9] 8) -> #f", "(member [9 3 7 1] 7) -> #t", "(member [1] 2) -> #f", "(member [2 0 2] 7) -> #f", "(member [6 4 3 5 6] 8) -> #f", "(member [] 1) -> #f", "(member [7 2 6] 0) -> #f", "(member [3 1 8] 4) -> #f", "(member [7 6 8 2 3] 9) -> #f", "(member [3 5] 1) -> #f"]}
{"time": 1.052877, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 1) -> #f", "(member [3 1 9] 0) -> #f", "(member [3 1 9 2] 0) -> #f", "(member [2] 6) -> #f", "(member [8] 9) -> #f", "(member [4 3 8 0 2] 9) -> #f", "(member [9 9 5] 2) -> #f", "(member [4 7 5] 7) -> #t", "(member [0 1 9] 5) -> #f", "(member [1 0] 5) -> #f", "(member [7 1 3 0] 1) -> #t", "(member [2 5 2] 0) -> #f", "(member [6 2 8] 2) -> #t", "(member [6] 0) -> #f", "(member [] 8) -> #f", "(member [4 5 3 3] 5) -> #t", "(member [3 0 4 5] 2) -> #f", "(member [4 7] 2) -> #f", "(member [4] 0) -> #f", "(member [8 0 3 9 5] 8) -> #t", "(member [6 1 9 7] 2) -> #f", "(member [1 0 9 5] 7) -> #f", "(member [] 0) -> #f", "(member [5 8 3 4 8] 5) -> #t", "(member [2 2 7 6 7] 8) -> #f", "(member [] 2) -> #f", "(member [3 5] 1) -> #f", "(member [0 0] 7) -> #f", "(member [7 4 2] 4) -> #t", "(member [2 4 7] 5) -> #f", "(member [0 6 9] 9) -> #t", "(member [2 6 3 5 0] 6) -> #t", "(member [4 8 5] 8) -> #t", "(member [] 4) -> #f", "(member [0 3 6] 9) -> #f", "(member [4 6 5 1] 6) -> #t", "(member [7] 2) -> #f", "(member [4 8 8] 6) -> #f", "(member [] 1) -> #f", "(member [2 9] 7) -> #f", "(member [4] 8) -> #f", "(member [] 0) -> #f", "(member [7 4] 6) -> #f", "(member [] 2) -> #f", "(member [6 2 3 6] 0) -> #f", "(member [] 4) -> #f", "(member [] 6) -> #f", "(member [3 6] 3) -> #t", "(member [1 6 4] 1) -> #t", "(member [9] 8) -> #f", "(member [5 0 1 6] 2) -> #f", "(member [] 2) -> #f", "(member [5 9] 0) -> #f", "(member [6 8 6 6 2] 8) -> #t", "(member [5 0] 0) -> #t", "(member [6 5 2 1 0] 0) -> #t", "(member [1] 5) -> #f", "(member [] 1) -> #f", "(member [6] 0) -> #f", "(member [3 8 5] 0) -> #f", "(member [1 2 9 5] 1) -> #t", "(member [3] 4) -> #f", "(member [3 0 3 2 9] 5) -> #f", "(member [] 3) -> #f", "(member [3 8 7 2] 3) -> #t", "(member [8 4 5 2 5] 2) -> #t", "(member [8 2 7 1] 5) -> #f", "(member [] 3) -> #f", "(member [4 1] 0) -> #f", "(member [4 1 0] 4) -> #t", "(member [9 1 5 2 1] 9) -> #t", "(member [] 9) -> #f", "(member [8 4 8 3 2] 5) -> #f", "(member [4 8 7 1] 7) -> #t", "(member [2 1 8] 9) -> #f", "(member [1 8 0] 4) -> #f", "(member [5] 5) -> #t", "(member [] 0) -> #f", "(member [2] 0) -> #f", "(member [2 8] 8) -> #t", "(member [7] 0) -> #f", "(member [1 8 7 7 0] 5) -> #f", "(member [7] 0) -> #f", "(member [9] 9) -> #t", "(member [3 0 0 8] 9) -> #f", "(member [6 0 1 8 7] 2) -> #f", "(member [6 0 2 7 9] 9) -> #t", "(member [0 5 2 3] 2) -> #t", "(member [5] 6) -> #f", "(member [7 7 1 2 3] 7) -> #t", "(member [6] 1) -> #f", "(member [1] 3) -> #f"]}
{"time": 1.053224, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 8) -> #f", "(member [3 7 9 0 7] 9) -> #t", "(member [5] 2) -> #f", "(member [1 8] 3) -> #f", "(member [7 5 6] 6) -> #t", "(member [0 7 9] 9) -> #t", "(member [3 7 0 0] 1) -> #f", "(member [9 1 9 0] 6) -> #f", "(member [] 4) -> #f", "(member [] 0) -> #f", "(member [8] 4) -> #f", "(member [3] 4) -> #f", "(member [1 7 8 2] 8) -> #t", "(member [7 1 6 0 6] 2) -> #f", "(member [7 6 5 0] 9) -> #f", "(member [] 5) -> #f", "(member [9 8] 6) -> #f", "(member [0 1 3] 6) -> #f", "(member [6] 1) -> #f", "(member [9 2 0] 0) -> #t", "(member [3 7 0 5 5] 7) -> #t", "(member [1 3 3 2] 0) -> #f", "(member [2 6 2 4] 2) -> #t", "(member [4] 2) -> #f", "(member [0 2 4 6] 0) -> #t", "(member [1] 0) -> #f", "(member [7 2] 5) -> #f", "(member [] 5) -> #f", "(member [] 8) -> #f", "(member [5 3 7] 8) -> #f", "(member [1 0 1 7 8] 6) -> #f", "(member [5 6 4 4] 0) -> #f", "(member [4] 7) -> #f", "(member [5 6 2] 3) -> #f", "(member [9] 4) -> #f", "(member [4 3 7] 9) -> #f", "(member [1] 5) -> #f", "(member [7] 6) -> #f", "(member [8] 1) -> #f", "(member [] 8) -> #f", "(member [3 0 5 1] 3) -> #t", "(member [2] 4) -> #f", "(member [6 3 1] 0) -> #f", "(member [6 1 1] 6) -> #t", "(member [8 3 4 3] 9) -> #f", "(member [6] 5) -> #f", "(member [5 6] 6) -> #t", "(member [8 6 3] 0) -> #f", "(member [6] 7) -> #f", "(member [9 2 3 7 9] 5) -> #f", "(member [4 9 0] 7) -> #f", "(member [7 3 6] 8) -> #f", "(member [6 8 6 4] 7) -> #f", "(member [0 4 7 1] 6) -> #f", "(member [] 6) -> #f", "(member [4 9 6 1] 0) -> #f", "(member [1] 2) -> #f", "(member [5 2 3 6 8] 2) -> #t", "(member [3 8 2 9] 7) -> #f", "(member [5 8 2 5 6] 8) -> #t", "(member [9] 3) -> #f", "(member [4 8 1 5 6] 3) -> #f", "(member [2] 0) -> #f", "(member [] 3) -> #f", "(member [8] 2) -> #f", "(member [6 9 9 4] 4) -> #t", "(member [] 1) -> #f", "(member [8 5 5 0] 1) -> #f", "(member [9 0 5 6] 3) -> #f", "(member [1 1 4 4 1] 8) -> #f", "(member [] 4) -> #f", "(member [] 4) -> #f", "(member [2 6 3] 4) -> #f", "(member [3 1] 9) -> #f", "(member [1 7 5] 7) -> #t", "(member [] 7) -> #f", "(member [] 8) -> #f", "(member [3] 1) -> #f", "(member [1] 5) -> #f", "(member [3 5 8] 4) -> #f", "(member [7 8 5 5] 2) -> #f", "(member [2 6 5] 7) -> #f", "(member [6 8 3] 7) -> #f", "(member [9] 3) -> #f", "(member [8 3 7] 2) -> #f", "(member [] 1) -> #f", "(member [7 5 4] 1) -> #f", "(member [5 4] 1) -> #f", "(member [] 6) -> #f", "(member [3 0 4 0 0] 7) -> #f", "(member [2 0 3] 1) -> #f", "(member [7 0 7 7 4] 1) -> #f"]}
{"time": 1.024294, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 6) -> #f", "(member [3 5 4 3] 0) -> #f", "(member [1] 0) -> #f", "(member [0 2 8 1 3] 4) -> #f", "(member [3 0 8] 0) -> #t", "(member [] 3) -> #f", "(member [0] 4) -> #f", "(member [8 7 2 2 0] 4) -> #f", "(member [7 8] 0) -> #f", "(member [2 3 1] 1) -> #t", "(member [3] 8) -> #f", "(member [3 2 9 0 3] 0) -> #t", "(member [5 0] 2) -> #f", "(member [9 6] 7) -> #f", "(member [] 5) -> #f", "(member [3 7 8 2] 2) -> #t", "(member [4 8 3 8 7] 3) -> #t", "(member [9 9] 5) -> #f", "(member [3 1 2] 3) -> #t", "(member [6 8] 6) -> #t", "(member [3] 1) -> #f", "(member [4 0 8] 4) -> #t", "(member [3 2 9] 2) -> #t", "(member [2 2 4 7] 8) -> #f", "(member [8 6 0] 1) -> #f", "(member [4 3 7 5 9] 8) -> #f", "(member [0 9 4] 7) -> #f", "(member [8 6 9 9 0] 4) -> #f", "(member [8 7 2] 3) -> #f", "(member [9 8 4] 0) -> #f", "(member [] 3) -> #f", "(member [8] 8) -> #t", "(member [5] 8) -> #f", "(member [7 9] 5) -> #f", "(member [2 6] 1) -> #f", "(member [4 1 6 3 4] 6) -> #t", "(member [3 4] 9) -> #f", "(member [7 6 2 5 1] 0) -> #f", "(member [] 3) -> #f", "(member [9 3 9] 7) -> #f", "(member [2 6 4] 1) -> #f", "(member [3] 0) -> #f", "(member [4] 3) -> #f", "(member [4 0 2 3 1] 6) -> #f", "(member [2 5 8] 6) -> #f", "(member [9 5 3] 9) -> #t", "(member [1 2 0 4] 5) -> #f", "(member [5 9] 1) -> #f", "(member [] 0) -> #f", "(member [8 5 5 6] 0) -> #f", "(member [0 6 1] 1) -> #t", "(member [7 6 0 9] 9) -> #t", "(member [0 6 0 3] 1) -> #f", "(member [6 9] 8) -> #f", "(member [4 1 1] 6) -> #f", "(member [0 5 6] 4) -> #f", "(member [6 4] 6) -> #t", "(member [3 4 4 6 4] 9) -> #f", "(member [4 0 7] 2) -> #f", "(member [2 3] 1) -> #f", "(member [4] 1) -> #f", "(member [] 9) -> #f", "(member [5 9 4 5] 8) -> #f", "(member [] 7) -> #f", "(member [3 4 5 8] 5) -> #t", "(member [] 7) -> #f", "(member [] 1) -> #f", "(member [] 0) -> #f", "(member [5] 2) -> #f", "(member [] 6) -> #f", "(member [7 1 4] 5) -> #f", "(member [6 7 7 0] 8) -> #f", "(member [6 4 8 1] 0) -> #f", "(member [5 9 8] 3) -> #f", "(member [3] 2) -> #f", "(member [] 5) -> #f", "(member [3 3 1 5] 0) -> #f", "(member [5 8 4] 4) -> #t", "(member [5 3 5 4 2] 6) -> #f", "(member [3 2 0] 5) -> #f", "(member [7 9 3] 2) -> #f", "(member [4 6 8 5] 9) -> #f", "(member [0 6 4] 3) -> #f", "(member [7 4] 1) -> #f", "(member [7 8 0 3 3] 3) -> #t", "(member [0 1 8 9] 5) -> #f", "(member [1 5 0 4 2] 1) -> #t", "(member [3] 7) -> #f", "(member [5] 9) -> #f", "(member [2] 0) -> #f", "(member [6 1 5 3] 9) -> #f", "(member [2 2] 9) -> #f"]}
{"time": 1.047542, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 9) -> #f", "(member [8] 4) -> #f", "(member [6 6 3] 4) -> #f", "(member [2 0 9 6 4] 7) -> #f", "(member [0 5 4] 1) -> #f", "(member [2] 1) -> #f", "(member [9 4 0] 2) -> #f", "(member [7 3] 0) -> #f", "(member [9 1 4 6 3] 3) -> #t", "(member [5] 2) -> #f", "(member [1 9 4] 7) -> #f", "(member [0 8 4 9] 9) -> #t", "(member [3] 5) -> #f", "(member [7 1 4 0 1] 2) -> #f", "(member [4 3 1 6] 3) -> #t", "(member [3] 3) -> #t", "(member [9] 4) -> #f", "(member [7 7 9 2 6] 8) -> #f", "(member [2 5 7] 6) -> #f", "(member [1] 7) -> #f", "(member [0 6 2 3] 2) -> #t", "(member [6 4] 9) -> #f", "(member [] 5) -> #f", "(member [8 5 5 4 5] 0) -> #f", "(member [3] 7) -> #f", "(member [1 9 4 5 2] 2) -> #t", "(member [9 4 8 0 9] 7) -> #f", "(member [1 0] 9) -> #f", "(member [] 8) -> #f", "(member [7 2 5 0 9] 8) -> #f", "(member [6 5] 5) -> #t", "(member [7 3 4 6] 1) -> #f", "(member [9 4 7 9 0] 6) -> #f", "(member [6] 9) -> #f", "(member [] 9) -> #f", "(member [1 0 0 0] 2) -> #f", "(member [1 4 9 9] 5) -> #f", "(member [8 4] 8) -> #t", "(member [1 8 4 1 7] 9) -> #f", "(member [8 4 6 5 3] 1) -> #f", "(member [0] 9) -> #f", "(member [5 3 5 6 7] 4) -> #f", "(member [9 1] 7) -> #f", "(member [2] 5) -> #f", "(member [] 6) -> #f", "(member [] 8) -> #f", "(member [3 7 8] 2) -> #f", "(member [3 3 8 2 6] 1) -> #f", "(member [] 4) -> #f", "(member [5 5 1 1] 4) -> #f", "(member [] 8) -> #f", "(member [3 3] 0) -> #f", "(member [3 3 5 5 3] 5) -> #t", "(member [2] 2) -> #t", "(member [7 4 1] 5) -> #f", "(member [8] 7) -> #f", "(member [4 3 2] 4) -> #t", "(member [6 3 0] 7) -> #f", "(member [9] 5) -> #f", "(member [0 0 4 8] 2) -> #f", "(member [3] 9) -> #f", "(member [3 0 8] 8) -> #t", "(member [6 6] 6) -> #t", "(member [5 6] 2) -> #f", "(member [] 6) -> #f", "(member [4] 5) -> #f", "(member [1 9 8 2] 8) -> #t", "(member [7 1 6] 1) -> #t", "(member [] 9) -> #f", "(member [8 5 1 3 6] 4) -> #f", "(member [0 0 5] 9) -> #f", "(member [7 5 2] 0) -> #f", "(member [5] 6) -> #f", "(member [] 1) -> #f", "(member [4 5 9 5 7] 7) -> #t", "(member [1] 9) -> #f", "(member [3 7 0] 8) -> #f", "(member [8] 3) -> #f", "(member [4] 3) -> #f", "(member [0 0 3 1 0] 6) -> #f", "(member [4 8 1 8] 1) -> #t", "(member [0 2 7 0 7] 7) -> #t", "(member [] 4) -> #f", "(member [8 8 9] 8) -> #t", "(member [8 8 9 4 6] 9) -> #t", "(member [4 9 2 2 1] 0) -> #f", "(member [] 8) -> #f", "(member [3 7 3] 4) -> #f", "(member [2 3 8] 2) -> #t", "(member [8 4 8 8] 6) -> #f", "(member [3 9] 5) -> #f", "(member [] 8) -> #f"]}
{"time": 0.917241, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 0) -> #f", "(member [6 8 2 7 7] 6) -> #t", "(member [6 2 2 7] 6) -> #t", "(member [3] 9) -> #f", "(member [] 2) -> #f", "(member [1 4] 7) -> #f", "(member [4 1 8] 0) -> #f", "(member [2 6 5] 8) -> #f", "(member [3 1 7 3 3] 6) -> #f", "(member [9 8 2 8 9] 6) -> #f", "(member [] 7) -> #f", "(member [3 2 1 3] 7) -> #f", "(member [0 0 3 2 9] 0) -> #t", "(member [9] 0) -> #f", "(member [5 2 4] 0) -> #f", "(member [3 8 2 4] 1) -> #f", "(member [] 5) -> #f", "(member [] 0) -> #f", "(member [] 1) -> #f", "(member [0] 9) -> #f", "(member [8 9 6 2 2] 5) -> #f", "(member [8] 6) -> #f", "(member [2 6 3 7] 6) -> #t", "(member [6 5 2] 0) -> #f", "(member [] 3) -> #f", "(member [0 2 3 1] 6) -> #f", "(member [8 3 0] 5) -> #f", "(member [] 3) -> #f", "(member [2 6 0 0 9] 9) -> #t", "(member [] 8) -> #f", "(member [] 9) -> #f", "(member [] 6) -> #f", "(member [8 4 3] 0) -> #f", "(member [8 3 0] 8) -> #t", "(member [8 4 1] 8) -> #t", "(member [7 7 0 2] 7) -> #t", "(member [2 1 5 1 4] 0) -> #f", "(member [4 1 8 3] 7) -> #f", "(member [9 4 8] 0) -> #f", "(member [7] 7) -> #t", "(member [9 0] 5) -> #f", "(member [] 0) -> #f", "(member [6 9 2 0] 3) -> #f", "(member [6 6 3 5] 5) -> #t", "(member [8 9 3 6 1] 0) -> #f", "(member [4] 1) -> #f", "(member [1 9 3 7 5] 8) -> #f", "(member [5 9 0 9 9] 9) -> #t", "(member [6 2 5 9 2] 5) -> #t", "(member [0] 8) -> #f", "(member [5 7 1] 8) -> #f", "(member [6 6 8 7] 7) -> #t", "(member [4 3] 4) -> #t", "(member [7 8] 7) -> #t", "(member [4 3 4 6 3] 9) -> #f", "(member [3 0] 3) -> #t", "(member [8 7] 9) -> #f", "(member [4 6 2] 5) -> #f", "(member [4 8 9] 4) -> #t", "(member [7 6 5 0] 9) -> #f", "(member [0 8] 9) -> #f", "(member [6 9 8] 2) -> #f", "(member [7 5 3 1] 8) -> #f", "(member [1 4 7 9] 0) -> #f", "(member [] 5) -> #f", "(member [] 3) -> #f", "(member [7] 1) -> #f", "(member [2 0] 1) -> #f", "(member [7 1 8 1 9] 7) -> #t", "(member [5 2] 0) -> #f", "(member [1 7 2] 2) -> #t", "(member [3 3] 3) -> #t", "(member [] 8) -> #f", "(member [4 0 8 7] 6) -> #f", "(member [7] 2) -> #f", "(member [3 0 2 6] 5) -> #f", "(member [4 5 1 8 9] 0) -> #f", "(member [5 7 9] 4) -> #f", "(member [4 1] 4) -> #t", "(member [9 8] 3) -> #f", "(member [7 5] 1) -> #f", "(member [3 2 7] 9) -> #f", "(member [2 1 6 2] 4) -> #f", "(member [1 5 8] 1) -> #t", "(member [3 2 1] 2) -> #t", "(member [9 5 0] 2) -> #f", "(member [7 2 5 7] 2) -> #t", "(member [8 5 8 7] 8) -> #t", "(member [0 2 6 9] 2) -> #t", "(member [3] 1) -> #f", "(member [2 0 0 1 3] 0) -> #t", "(member [1 5 9 0 7] 1) -> #t"]}
{"time": 0.938898, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 1) -> #f", "(member [6 0 5 2] 3) -> #f", "(member [] 5) -> #f", "(member [9 4 0 7] 9) -> #t", "(member [6 6] 1) -> #f", "(member [1 7] 8) -> #f", "(member [1 0 5 5 0] 9) -> #f", "(member [7 7 8 9 0] 8) -> #t", "(member [] 5) -> #f", "(member [] 8) -> #f", "(member [8 3 2 7 6] 6) -> #t", "(member [8 9 7] 1) -> #f", "(member [] 7) -> #f", "(member [0 4 1] 8) -> #f", "(member [4 4 8 7] 2) -> #f", "(member [0 0 7 1] 5) -> #f", "(member [2 9] 8) -> #f", "(member [5 6 1 2 8] 2) -> #t", "(member [1 7 0 0] 8) -> #f", "(member [3 9] 9) -> #t", "(member [] 4) -> #f", "(member [9 1 4 2] 2) -> #t", "(member [3 7 3 6] 3) -> #t", "(member [2 1 7 7 8] 8) -> #t", "(member [0 0] 3) -> #f", "(member [0 3] 0) -> #t", "(member [0 1] 6) -> #f", "(member [9 3 9 5 9] 0) -> #f", "(member [6] 7) -> #f", "(member [5 1 7 4 4] 6) -> #f", "(member [0 4 9 8 3] 2) -> #f", "(member [6] 8) -> #f", "(member [4 1] 5) -> #f", "(member [9 4 7 9] 9) -> #t", "(member [] 3) -> #f", "(member [0 1 0 2] 9) -> #f", "(member [5 4 1 4 4] 2) -> #f", "(member [] 2) -> #f", "(member [1] 1) -> #t", "(member [9 3 4 9] 4) -> #t", "(member [0 6 0 0 2] 6) -> #t", "(member [] 6) -> #f", "(member [6 2 7 9 7] 9) -> #t", "(member [4 0 5 5] 0) -> #t", "(member [3 8] 8) -> #t", "(member [9] 3) -> #f", "(member [6 1] 9) -> #f", "(member [4 2 4 5 2] 6) -> #f", "(member [1 4 0] 2) -> #f", "(member [2] 7) -> #f", "(member [1 1 5 6 3] 2) -> #f", "(member [8 9 1] 1) -> #t", "(member [0 7 0 0 4] 4) -> #t", "(member [8 9 4 0] 8) -> #t", "(member [2 2 0 4 2] 7) -> #f", "(member [6 9 2] 1) -> #f", "(member [8 7] 5) -> #f", "(member [5 3] 9) -> #f", "(member [7 3 1 8] 2) -> #f", "(member [4 0 2 7] 6) -> #f", "(member [7 0] 1) -> #f", "(member [4 3 6] 8) -> #f", "(member [2 9 3 4 3] 2) -> #t", "(member [8 5 5 6 6] 1) -> #f", "(member [0 7 8 1] 0) -> #t", "(member [2 0 2] 2) -> #t", "(member [6] 6) -> #t", "(member [0 1 8] 0) -> #t", "(member [] 7) -> #f", "(member [3 2 2] 0) -> #f", "(member [9] 6) -> #f", "(member [5 8 9 5] 6) -> #f", "(member [8 1 1 2] 3) -> #f", "(member [2 5 9 2] 5) -> #t", "(member [7 0 5 7] 0) -> #t", "(member [2 4 6 7] 3) -> #f", "(member [0 1] 1) -> #t", "(member [] 4) -> #f", "(member [9 2 3] 5) -> #f", "(member [2] 8) -> #f", "(member [4 7 1] 8) -> #f", "(member [] 2) -> #f", "(member [8] 9) -> #f", "(member [6 0 1] 8) -> #f", "(member [0 7 3 2] 9) -> #f", "(member [3 4 5 4 6] 1) -> #f", "(member [4 3 4 6] 1) -> #f", "(member [8 9 6 2] 9) -> #t", "(member [1] 3) -> #f", "(member [1 2 4 2] 6) -> #f", "(member [8 9] 6) -> #f", "(member [3] 6) -> #f"]}
{"time": 1.132944, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 9) -> #f", "(member [3] 9) -> #f", "(member [1 2 5] 8) -> #f", "(member [2 7 5] 4) -> #f", "(member [5 3 5 9 5] 6) -> #f", "(member [9 3 3 0 2] 6) -> #f", "(member [] 3) -> #f", "(member [4 9 9 4] 2) -> #f", "(member [6 9 6] 6) -> #t", "(member [0 3 7 1] 2) -> #f", "(member [7 6 2 0 7] 3) -> #f", "(member [7] 1) -> #f", "(member [9] 9) -> #t", "(member [0] 0) -> #t", "(member [8 2 4 6] 6) -> #t", "(member [8] 0) -> #f", "(member [1 9] 6) -> #f", "(member [2 7 0] 0) -> #t", "(member [7 9 5 3] 2) -> #f", "(member [] 8) -> #f", "(member [9 9] 6) -> #f", "(member [9 2 6 7] 9) -> #t", "(member [3 4] 3) -> #t", "(member [0 4 3 2 6] 9) -> #f", "(member [9 5] 1) -> #f", "(member [5 1 9 8] 4) -> #f", "(member [3 2 8] 1) -> #f", "(member [7] 5) -> #f", "(member [4 1 3 4 5] 9) -> #f", "(member [8] 7) -> #f", "(member [] 0) -> #f", "(member [1 7] 9) -> #f", "(member [3 2 2 2] 0) -> #f", "(member [5 8 9] 5) -> #t", "(member [] 5) -> #f", "(member [8 5 5] 6) -> #f", "(member [8 2 3 8 1] 9) -> #f", "(member [1 1 8] 5) -> #f", "(member [9] 5) -> #f", "(member [8 7] 9) -> #f", "(member [7 4 0] 9) -> #f", "(member [0] 1) -> #f", "(member [6 9] 7) -> #f", "(member [5] 5) -> #t", "(member [3 7 0] 5) -> #f", "(member [7] 6) -> #f", "(member [1 3 1 4] 6) -> #f", "(member [3 3 8 1 9] 1) -> #t", "(member [7 1 3 9 8] 1) -> #t", "(member [6 2] 6) -> #t", "(member [8] 5) -> #f", "(member [9 4 5] 1) -> #f", "(member [5 4 2 4] 1) -> #f", "(member [6 7] 1) -> #f", "(member [8 2 7] 5) -> #f", "(member [6 4] 1) -> #f", "(member [2] 2) -> #t", "(member [] 4) -> #f", "(member [] 0) -> #f", "(member [4] 1) -> #f", "(member [2 0 6 3] 9) -> #f", "(member [6 6] 1) -> #f", "(member [0 6] 9) -> #f", "(member [7 9 3 2] 5) -> #f", "(member [1 1] 8) -> #f", "(member [4 6] 4) -> #t", "(member [] 9) -> #f", "(member [2] 1) -> #f", "(member [] 9) -> #f", "(member [7 3 3 0 1] 6) -> #f", "(member [2] 7) -> #f", "(member [9 3 0] 6) -> #f", "(member [1 2 0] 3) -> #f", "(member [3 7 2] 9) -> #f", "(member [6] 8) -> #f", "(member [5] 8) -> #f", "(member [] 7) -> #f", "(member [9 0 9 9] 4) -> #f", "(member [5 9 3 2 9] 6) -> #f", "(member [5] 3) -> #f", "(member [7 0 5 9] 5) -> #t", "(member [] 7) -> #f", "(member [3 9 8 1] 9) -> #t", "(member [2 3 6 7] 9) -> #f", "(member [3 7 4] 0) -> #f", "(member [9 6 6 7 9] 0) -> #f", "(member [4] 3) -> #f", "(member [5 8 5 5 0] 7) -> #f", "(member [2 4 4 0] 6) -> #f", "(member [0 2] 3) -> #f", "(member [8 7] 5) -> #f", "(member [3 6 7 7 6] 4) -> #f"]}
{"time": 0.910571, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 4) -> #f", "(member [9 2] 5) -> #f", "(member [6 3 4] 1) -> #f", "(member [7 9] 2) -> #f", "(member [9 3 2 8] 9) -> #t", "(member [9 5] 9) -> #t", "(member [1 1] 5) -> #f", "(member [0 5 0] 4) -> #f", "(member [9 9 9 3] 7) -> #f", "(member [1 9 6] 5) -> #f", "(member [7 7 6 6 8] 7) -> #t", "(member [3 1] 2) -> #f", "(member [0] 6) -> #f", "(member [2 4 5 1] 9) -> #f", "(member [] 6) -> #f", "(member [4] 9) -> #f", "(member [7 1] 9) -> #f", "(member [] 3) -> #f", "(member [] 5) -> #f", "(member [8] 2) -> #f", "(member [3 3 2] 6) -> #f", "(member [3 6] 7) -> #f", "(member [] 6) -> #f", "(member [] 7) -> #f", "(member [2 7 6 3 6] 7) -> #t", "(member [4 4] 3) -> #f", "(member [6 7] 4) -> #f", "(member [5 7 8] 1) -> #f", "(member [0 9 8] 4) -> #f", "(member [3] 0) -> #f", "(member [3] 9) -> #f", "(member [] 3) -> #f", "(member [2 1] 2) -> #t", "(member [0] 2) -> #f", "(member [4 0] 2) -> #f", "(member [7 6 1 8 2] 3) -> #f", "(member [8 4 1 7 7] 7) -> #t", "(member [8 1] 5) -> #f", "(member [8 6] 5) -> #f", "(member [] 3) -> #f", "(member [3 5 9 6] 3) -> #t", "(member [6 5 7 3] 6) -> #t", "(member [1 0 0 9] 6) -> #f", "(member [8 4 9 3] 8) -> #t", "(member [0 1 6] 2) -> #f", "(member [5 2 5] 7) -> #f", "(member [8 7] 9) -> #f", "(member [3 8 3 9 3] 8) -> #t", "(member [6 2 4] 9) -> #f", "(member [4 1 1 4 0] 9) -> #f", "(member [7 9 6 9] 3) -> #f", "(member [] 9) -> #f", "(member [] 0) -> #f", "(member [7 4] 6) -> #f", "(member [6 1 2 0 1] 1) -> #t", "(member [9 9] 5) -> #f", "(member [3 7 6 3] 3) -> #t", "(member [7 4 2 8 8] 1) -> #f", "(member [8] 5) -> #f", "(member [] 6) -> #f", "(member [] 0) -> #f", "(member [4 9 8 1] 3) -> #f", "(member [7] 1) -> #f", "(member [] 0) -> #f", "(member [4 6 3] 5) -> #f", "(member [1 9] 6) -> #f", "(member [] 5) -> #f", "(member [2 8 6 6] 9) -> #f", "(member [7 4 6 7 4] 9) -> #f", "(member [7] 5) -> #f", "(member [1] 9) -> #f", "(member [4 3 3] 8) -> #f", "(member [] 4) -> #f", "(member [2] 7) -> #f", "(member [] 7) -> #f", "(member [5 2] 6) -> #f", "(member [5] 9) -> #f", "(member [8 1 2] 1) -> #t", "(member [] 3) -> #f", "(member [0 0 9] 9) -> #t", "(member [8 8] 6) -> #f", "(member [7 1 4 7] 3) -> #f", "(member [5] 9) -> #f", "(member [8 0 4 2 8] 6) -> #f", "(member [5 9 1] 0) -> #f", "(member [] 1) -> #f", "(member [7] 7) -> #t", "(member [8 6 7 5] 5) -> #t", "(member [2] 1) -> #f", "(member [5 8 6] 1) -> #f", "(member [] 5) -> #f", "(member [8] 3) -> #f"]}
{"time": 0.890797, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 3) -> #f", "(member [8 0 3 0] 7) -> #f", "(member [8 2 4 8 6] 0) -> #f", "(member [0 6 1 1] 9) -> #f", "(member [8 0] 7) -> #f", "(member [4 7] 7) -> #t", "(member [] 8) -> #f", "(member [] 9) -> #f", "(member [3 0 0 3] 5) -> #f", "(member [6] 9) -> #f", "(member [7 4 7 3 3] 2) -> #f", "(member [8 2 0 8] 0) -> #t", "(member [6 5 6 6] 4) -> #f", "(member [7] 4) -> #f", "(member [9 2] 8) -> #f", "(member [4] 6) -> #f", "(member [8] 7) -> #f", "(member [5 7 0 3 1] 6) -> #f", "(member [4] 4) -> #t", "(member [4 9 4 2 6] 0) -> #f", "(member [] 7) -> #f", "(member [7 7 2] 8) -> #f", "(member [0 8 9 6 1] 0) -> #t", "(member [5 8 6 4 0] 1) -> #f", "(member [] 6) -> #f", "(member [7 6 0 5] 7) -> #t", "(member [7 0 0 5] 7) -> #t", "(member [9 4 6 4 3] 4) -> #t", "(member [8 8] 9) -> #f", "(member [1 8 1] 2) -> #f", "(member [6 6] 7) -> #f", "(member [7 6 3] 5) -> #f", "(member [4 6 0] 7) -> #f", "(member [9 6 3 4 9] 3) -> #t", "(member [1 5 8 4] 0) -> #f", "(member [0 8 8 3 9] 3) -> #t", "(member [4 9 2] 6) -> #f", "(member [5 5 1 9 1] 6) -> #f", "(member [2 8 7 2 9] 6) -> #f", "(member [] 4) -> #f", "(member [3 3 6 9] 1) -> #f", "(member [5] 2) -> #f", "(member [5 5 0] 0) -> #t", "(member [4 2 3] 5) -> #f", "(member [1 8] 7) -> #f", "(member [6] 1) -> #f", "(member [1 5 5 4] 4) -> #t", "(member [3] 1) -> #f", "(member [1] 8) -> #f", "(member [4 1 1 5 4] 7) -> #f", "(member [8 3 7 9 3] 4) -> #f", "(member [1 4 4 8 0] 1) -> #t", "(member [] 4) -> #f", "(member [2 0 9 1] 2) -> #t", "(member [] 8) -> #f", "(member [] 9) -> #f", "(member [] 5) -> #f", "(member [] 4) -> #f", "(member [5] 0) -> #f", "(member [] 8) -> #f", "(member [1 9 3] 8) -> #f", "(member [] 4) -> #f", "(member [5 5 6 7 0] 0) -> #t", "(member [5 5] 5) -> #t", "(member [4 6 8 7] 7) -> #t", "(member [1 3 9 2] 1) -> #t", "(member [1 8 6 0 4] 5) -> #f", "(member [] 7) -> #f", "(member [1 3 9 2 5] 7) -> #f", "(member [8] 7) -> #f", "(member [] 5) -> #f", "(member [3 5 4] 1) -> #f", "(member [2 8 7 1 4] 4) -> #t", "(member [] 7) -> #f", "(member [] 6) -> #f", "(member [] 2) -> #f", "(member [4 9 1 1] 8) -> #f", "(member [9 3] 3) -> #t", "(member [1 4 6] 8) -> #f", "(member [1 2 3 9] 1) -> #t", "(member [3 3] 7) -> #f", "(member [8] 2) -> #f", "(member [4 4 0 7] 2) -> #f", "(member [3 6] 2) -> #f", "(member [3 3 8] 9) -> #f", "(member [5 3 1] 8) -> #f", "(member [3] 3) -> #t", "(member [8 9 0 9] 0) -> #t", "(member [5 2 6] 9) -> #f", "(member [1 9 4 7 1] 3) -> #f", "(member [8 4 7] 5) -> #f", "(member [8 5 2] 6) -> #f"]}
{"time": 0.948213, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 2) -> #f", "(member [4 9 8 9 2] 4) -> #t", "(member [3 0 4 5 2] 4) -> #t", "(member [5 9] 7) -> #f", "(member [7 3 4 8] 6) -> #f", "(member [2] 5) -> #f", "(member [5 5 4] 4) -> #t", "(member [7] 9) -> #f", "(member [3 2 6 3 7] 6) -> #t", "(member [] 2) -> #f", "(member [7 4 2 4] 6) -> #f", "(member [5 6 4 3] 7) -> #f", "(member [2] 1) -> #f", "(member [8 7 7 6 5] 2) -> #f", "(member [0] 2) -> #f", "(member [9 5 2 0 9] 6) -> #f", "(member [] 9) -> #f", "(member [1] 6) -> #f", "(member [3 1 9 6 2] 5) -> #f", "(member [2 2 3 0] 4) -> #f", "(member [8 8] 4) -> #f", "(member [1 0] 0) -> #t", "(member [5 0 2 0] 4) -> #f", "(member [8 2 2] 4) -> #f", "(member [0] 4) -> #f", "(member [5] 7) -> #f", "(member [5 7 8 7] 5) -> #t", "(member [6] 6) -> #t", "(member [2 7 5 7 8] 1) -> #f", "(member [1 2 0] 1) -> #t", "(member [5 9 0] 7) -> #f", "(member [3 0 7 4 9] 5) -> #f", "(member [] 6) -> #f", "(member [4 8 2] 1) -> #f", "(member [] 7) -> #f", "(member [4 5 3 7 7] 0) -> #f", "(member [] 2) -> #f", "(member [1 1 3 8] 2) -> #f", "(member [0 6 7 1] 5) -> #f", "(member [9 3 8 7 8] 4) -> #f", "(member [3] 7) -> #f", "(member [9 7] 4) -> #f", "(member [6 7 7 0 4] 1) -> #f", "(member [0 0 8 4 3] 9) -> #f", "(member [4 5] 7) -> #f", "(member [6 1 6 7] 9) -> #f", "(member [1 0 0] 9) -> #f", "(member [9 5 6 6] 3) -> #f", "(member [] 0) -> #f", "(member [8 5] 0) -> #f", "(member [0 5] 5) -> #t", "(member [7 7 4] 8) -> #f", "(member [9 4 2 2 6] 7) -> #f", "(member [4 7 1 6] 6) -> #t", "(member [5 6 0 6 7] 8) -> #f", "(member [9] 7) -> #f", "(member [9 6 1 1 6] 5) -> #f", "(member [9] 7) -> #f", "(member [3 0 8 2 8] 3) -> #t", "(member [9 8] 9) -> #t", "(member [] 9) -> #f", "(member [6 0 2 4 8] 0) -> #t", "(member [0 7 3 0 6] 6) -> #t", "(member [3] 3) -> #t", "(member [4 6] 6) -> #t", "(member [] 7) -> #f", "(member [5] 0) -> #f", "(member [0] 0) -> #t", "(member [7] 5) -> #f", "(member [3] 2) -> #f", "(member [] 5) -> #f", "(member [9 9 6] 9) -> #t", "(member [4] 9) -> #f", "(member [] 2) -> #f", "(member [] 5) -> #f", "(member [5] 3) -> #f", "(member [9 7 5] 4) -> #f", "(member [] 7) -> #f", "(member [8 8 9 4 0] 7) -> #f", "(member [] 0) -> #f", "(member [2 5 5 1 5] 4) -> #f", "(member [0 4 5] 2) -> #f", "(member [6 5] 9) -> #f", "(member [8 9 2] 8) -> #t", "(member [3 5 4] 8) -> #f", "(member [0 8] 9) -> #f", "(member [7 8 4 3] 1) -> #f", "(member [9 3 8] 9) -> #t", "(member [] 9) -> #f", "(member [9 4 0 2] 4) -> #t", "(member [1 9 3] 1) -> #t", "(member [] 0) -> #f"]}
{"time": 0.97717, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 3) -> #f", "(member [0 4 5] 8) -> #f", "(member [9 7] 4) -> #f", "(member [9] 1) -> #f", "(member [5 5 6 1 0] 8) -> #f", "(member [] 4) -> #f", "(member [1 0 9 7] 4) -> #f", "(member [6] 3) -> #f", "(member [2] 2) -> #t", "(member [] 1) -> #f", "(member [] 6) -> #f", "(member [3] 7) -> #f", "(member [5 3 0 6 1] 8) -> #f", "(member [0 5 6 6] 2) -> #f", "(member [5 5 4 6] 6) -> #t", "(member [4 3 8 1 2] 0) -> #f", "(member [5 9 7 0 2] 1) -> #f", "(member [9 2 2] 1) -> #f", "(member [3 1] 8) -> #f", "(member [5 1 8 6] 3) -> #f", "(member [4 1] 9) -> #f", "(member [9 8 2 4] 4) -> #t", "(member [3] 4) -> #f", "(member [1 1 5 9 6] 4) -> #f", "(member [3 2 2] 1) -> #f", "(member [9 5] 2) -> #f", "(member [8] 2) -> #f", "(member [0 8 3 2] 2) -> #t", "(member [] 1) -> #f", "(member [1 3 4] 8) -> #f", "(member [] 6) -> #f", "(member [1 1 3] 5) -> #f", "(member [] 2) -> #f", "(member [3 3 2 5 1] 9) -> #f", "(member [5 6 1] 6) -> #t", "(member [] 2) -> #f", "(member [] 2) -> #f", "(member [4 0 5 3] 7) -> #f", "(member [9 7 9 2] 6) -> #f", "(member [9 1 3 2] 3) -> #t", "(member [1 3 7 8] 7) -> #t", "(member [7 7] 3) -> #f", "(member [3 2] 4) -> #f", "(member [6 1] 4) -> #f", "(member [1 2 6 6 9] 0) -> #f", "(member [3 9 4] 8) -> #f", "(member [] 9) -> #f", "(member [3 7 7] 7) -> #t", "(member [7 7 3 1] 5) -> #f", "(member [8 0] 4) -> #f", "(member [2 5 7 4] 2) -> #t", "(member [1 8 0 5] 3) -> #f", "(member [3 8 5] 1) -> #f", "(member [5 2 1 5 7] 3) -> #f", "(member [7 2 2 8] 0) -> #f", "(member [] 1) -> #f", "(member [8] 5) -> #f", "(member [0 7 4 5 0] 0) -> #t", "(member [4 1 1 1 8] 7) -> #f", "(member [] 9) -> #f", "(member [0 0 0] 5) -> #f", "(member [] 5) -> #f", "(member [4 4 7] 2) -> #f", "(member [4 8 3 5] 2) -> #f", "(member [5 2 4] 2) -> #t", "(member [4 4 0 9 3] 1) -> #f", "(member [9 9 6 4] 1) -> #f", "(member [5] 7) -> #f", "(member [4 1 1] 2) -> #f", "(member [] 2) -> #f", "(member [2 7 0 0] 6) -> #f", "(member [9 6] 1) -> #f", "(member [7] 2) -> #f", "(member [6 2 0 6] 4) -> #f", "(member [2 9 4] 9) -> #t", "(member [] 7) -> #f", "(member [4] 1) -> #f", "(member [5 3 7 8] 4) -> #f", "(member [3 2 3 9 3] 5) -> #f", "(member [4 5 6 1] 2) -> #f", "(member [] 4) -> #f", "(member [9 6 0] 1) -> #f", "(member [8] 2) -> #f", "(member [5 8] 8) -> #t", "(member [9 3 1 3] 9) -> #t", "(member [5 3 0] 8) -> #f", "(member [0 4 8] 8) -> #t", "(member [1] 4) -> #f", "(member [7 9 8] 6) -> #f", "(member [5 2 7] 0) -> #f", "(member [1 3 9] 7) -> #f", "(member [0] 1) -> #f"]}
{"time": 1.125904, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 1) -> #f", "(member [3 6 8 1 0] 8) -> #t", "(member [2 6] 7) -> #f", "(member [5 4 0 3] 3) -> #t", "(member [9 2 8] 2) -> #t", "(member [8] 5) -> #f", "(member [4 9 9 5] 3) -> #f", "(member [5 5 9] 4) -> #f", "(member [6] 3) -> #f", "(member [0 9 8 3] 7) -> #f", "(member [5 1 9] 9) -> #t", "(member [] 7) -> #f", "(member [9 0 5 5 4] 4) -> #t", "(member [1] 9) -> #f", "(member [3 7 8 7] 6) -> #f", "(member [8] 5) -> #f", "(member [9 5 9 4 5] 3) -> #f", "(member [1 2 4 8 4] 6) -> #f", "(member [1 2] 9) -> #f", "(member [9 4 9] 4) -> #t", "(member [6] 9) -> #f", "(member [5 8 9 1 8] 2) -> #f", "(member [6 4 2] 2) -> #t", "(member [6 6 4 2] 7) -> #f", "(member [] 8) -> #f", "(member [] 8) -> #f", "(member [] 7) -> #f", "(member [4 8 9 4] 0) -> #f", "(member [3 9 0] 7) -> #f", "(member [] 5) -> #f", "(member [0 5] 7) -> #f", "(member [] 0) -> #f", "(member [] 6) -> #f", "(member [8 4 5 4] 8) -> #t", "(member [7] 3) -> #f", "(member [9 9 0] 7) -> #f", "(member [3 2 3] 2) -> #t", "(member [] 6) -> #f", "(member [3 0 7 8] 9) -> #f", "(member [] 0) -> #f", "(member [2 9 5 8] 5) -> #t", "(member [3] 1) -> #f", "(member [6 1 2 6 8] 4) -> #f", "(member [0 2 9 8 0] 4) -> #f", "(member [0 0 8] 8) -> #t", "(member [] 9) -> #f", "(member [4 1 7 9 4] 9) -> #t", "(member [4 7] 1) -> #f", "(member [0 7 3 5] 1) -> #f", "(member [9 1 1 7] 0) -> #f", "(member [9 7 4 7 2] 1) -> #f", "(member [6] 6) -> #t", "(member [7 8 2 2 6] 3) -> #f", "(member [3 7 7 3] 1) -> #f", "(member [6 3] 2) -> #f", "(member [0 9 9 1 2] 6) -> #f", "(member [3 6 6 7 6] 4) -> #f", "(member [] 6) -> #f", "(member [2 9 8 1 1] 2) -> #t", "(member [] 6) -> #f", "(member [5 3 8 3 7] 3) -> #t", "(member [] 1) -> #f", "(member [3 2 4 0] 3) -> #t", "(member [4 2] 7) -> #f", "(member [6 8 4] 3) -> #f", "(member [2 8] 8) -> #t", "(member [5] 1) -> #f", "(member [3] 3) -> #t", "(member [6] 2) -> #f", "(member [4 0 0 2] 5) -> #f", "(member [5 0 0 2 4] 1) -> #f", "(member [6] 5) -> #f", "(member [] 7) -> #f", "(member [] 5) -> #f", "(member [] 4) -> #f", "(member [7 6] 7) -> #t", "(member [1 9 8 0 7] 4) -> #f", "(member [] 3) -> #f", "(member [3 1 6 6 8] 3) -> #t", "(member [6 5 1] 4) -> #f", "(member [2 1 0 2 2] 7) -> #f", "(member [0] 9) -> #f", "(member [5 1 6 3 0] 2) -> #f", "(member [9 1 6 8 8] 2) -> #f", "(member [4 0] 0) -> #t", "(member [6 6 5 2] 1) -> #f", "(member [9 0 8 7] 4) -> #f", "(member [6] 5) -> #f", "(member [3 0 7 4] 9) -> #f", "(member [] 7) -> #f", "(member [2 2] 9) -> #f", "(member [7 0 7 2 8] 5) -> #f"]}
{"time": 1.2548, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 8) -> #f", "(member [6 9 8] 1) -> #f", "(member [8 0 5] 1) -> #f", "(member [] 2) -> #f", "(member [5 5] 0) -> #f", "(member [9 2 6 3] 4) -> #f", "(member [] 5) -> #f", "(member [6 4 4 4] 4) -> #t", "(member [6 4] 1) -> #f", "(member [] 4) -> #f", "(member [1 4 9] 9) -> #t", "(member [] 1) -> #f", "(member [3 1 6] 3) -> #t", "(member [7 1] 1) -> #t", "(member [6 0] 2) -> #f", "(member [9 8 4 0] 5) -> #f", "(member [5 7 8 3 0] 7) -> #t", "(member [6 1 6 0] 0) -> #t", "(member [8 6 7] 4) -> #f", "(member [0 9 5 5] 5) -> #t", "(member [5] 8) -> #f", "(member [6 9 9 2 3] 1) -> #f", "(member [9 7] 5) -> #f", "(member [4 4 0 4] 9) -> #f", "(member [1] 4) -> #f", "(member [2 6 4 7] 7) -> #t", "(member [8 7 3 7 5] 5) -> #t", "(member [1 2 9 2 3] 3) -> #t", "(member [6 3 7] 2) -> #f", "(member [9] 9) -> #t", "(member [9 4 3 4] 7) -> #f", "(member [] 4) -> #f", "(member [] 4) -> #f", "(member [0] 1) -> #f", "(member [9] 4) -> #f", "(member [7 5 1 1 9] 8) -> #f", "(member [0 7 3 3] 3) -> #t", "(member [6 1 4] 0) -> #f", "(member [4 7] 9) -> #f", "(member [0] 3) -> #f", "(member [7 7 6] 6) -> #t", "(member [1 8 2] 8) -> #t", "(member [9 0 5] 6) -> #f", "(member [0 1 6 9 9] 5) -> #f", "(member [0 6] 0) -> #t", "(member [7] 5) -> #f", "(member [6 2] 5) -> #f", "(member [4] 6) -> #f", "(member [4 3] 2) -> #f", "(member [3 4 7 3] 3) -> #t", "(member [6 2 6] 5) -> #f", "(member [8 3] 2) -> #f", "(member [] 5) -> #f", "(member [3 7 1 1] 2) -> #f", "(member [3 7 1 8] 5) -> #f", "(member [] 3) -> #f", "(member [3 3] 7) -> #f", "(member [5 1] 3) -> #f", "(member [2 5] 2) -> #t", "(member [1] 1) -> #t", "(member [9 5 6 6 5] 6) -> #t", "(member [] 5) -> #f", "(member [7 4 5 6 7] 8) -> #f", "(member [9 3 0] 0) -> #t", "(member [5 6 2 8] 2) -> #t", "(member [0 5 6] 3) -> #f", "(member [5 9 3 5] 5) -> #t", "(member [2 3 8 2 6] 6) -> #t", "(member [4 1 2 0 5] 0) -> #t", "(member [6 3 9 2 1] 9) -> #t", "(member [9 3 0 3 4] 1) -> #f", "(member [7 2] 1) -> #f", "(member [9 9] 4) -> #f", "(member [] 6) -> #f", "(member [6] 4) -> #f", "(member [2] 1) -> #f", "(member [] 1) -> #f", "(member [7 5] 6) -> #f", "(member [2 7 6] 6) -> #t", "(member [8 4 5 0] 1) -> #f", "(member [1 0] 2) -> #f", "(member [4 0 2 3] 1) -> #f", "(member [8] 3) -> #f", "(member [5] 7) -> #f", "(member [] 0) -> #f", "(member [5 6] 0) -> #f", "(member [4 5] 9) -> #f", "(member [7 0 9] 7) -> #t", "(member [5 2] 2) -> #t", "(member [4] 3) -> #f", "(member [3 8 5 0 9] 1) -> #f", "(member [0 4 3 9] 8) -> #f"]}
{"time": 1.16124, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 3) -> #f", "(member [8 7 6] 0) -> #f", "(member [8 8 8] 5) -> #f", "(member [9 7] 0) -> #f", "(member [4] 4) -> #t", "(member [7] 4) -> #f", "(member [] 1) -> #f", "(member [4 3 6 4 0] 2) -> #f", "(member [2 4] 2) -> #t", "(member [3 3 6 1] 5) -> #f", "(member [3 1 8 2 1] 4) -> #f", "(member [6 4 6 0] 2) -> #f", "(member [8 9 8 8] 0) -> #f", "(member [] 1) -> #f", "(member [2 1] 0) -> #f", "(member [] 1) -> #f", "(member [3] 7) -> #f", "(member [3] 5) -> #f", "(member [1 1 6 3 5] 9) -> #f", "(member [0 5 0] 2) -> #f", "(member [2 1 9 0 6] 3) -> #f", "(member [3 3 9 6] 3) -> #t", "(member [7 0 7 6 8] 0) -> #t", "(member [3 1] 8) -> #f", "(member [1 6 1 1 8] 8) -> #t", "(member [6] 5) -> #f", "(member [0 1 8 0 2] 9) -> #f", "(member [8 0 6 4 7] 4) -> #t", "(member [6 6] 9) -> #f", "(member [5 8 8 2 8] 6) -> #f", "(member [7 7 0 0 4] 0) -> #t", "(member [0 4] 8) -> #f", "(member [7 1 2] 4) -> #f", "(member [9] 0) -> #f", "(member [2] 2) -> #t", "(member [7] 3) -> #f", "(member [5 0] 0) -> #t", "(member [8 5 6 6] 3) -> #f", "(member [4 6 6 4] 2) -> #f", "(member [4] 3) -> #f", "(member [2 4] 5) -> #f", "(member [7 0 1] 7) -> #t", "(member [3 6 4 9 9] 8) -> #f", "(member [7 6 2 8 8] 6) -> #t", "(member [1] 2) -> #f", "(member [] 8) -> #f", "(member [] 4) -> #f", "(member [3] 0) -> #f", "(member [2 8 1 3 3] 0) -> #f", "(member [] 7) -> #f", "(member [1 4 8] 6) -> #f", "(member [9] 3) -> #f", "(member [8] 2) -> #f", "(member [0 4] 1) -> #f", "(member [9] 8) -> #f", "(member [1 1] 8) -> #f", "(member [4 4 7] 4) -> #t", "(member [6 2 4] 7) -> #f", "(member [1] 8) -> #f", "(member [2] 2) -> #t", "(member [3 3 9 2 6] 1) -> #f", "(member [] 9) -> #f", "(member [4 9 4 9 4] 3) -> #f", "(member [] 1) -> #f", "(member [] 3) -> #f", "(member [6 5 5 1 2] 9) -> #f", "(member [0 0 1] 3) -> #f", "(member [3 1] 2) -> #f", "(member [2 8] 6) -> #f", "(member [3 8] 3) -> #t", "(member [4 6 9 4 0] 1) -> #f", "(member [4 1] 5) -> #f", "(member [] 5) -> #f", "(member [9 1] 7) -> #f", "(member [7] 5) -> #f", "(member [6 9] 6) -> #t", "(member [8 9] 2) -> #f", "(member [3 2 9] 6) -> #f", "(member [1 6 6 6] 6) -> #t", "(member [7 0] 0) -> #t", "(member [6 1 9 5 5] 1) -> #t", "(member [1] 4) -> #f", "(member [] 5) -> #f", "(member [6 1 1] 3) -> #f", "(member [3] 8) -> #f", "(member [9 9 0 9] 4) -> #f", "(member [0] 5) -> #f", "(member [0 9] 5) -> #f", "(member [4 9 8 2] 0) -> #f", "(member [7] 0) -> #f", "(member [1 4 9 3 9] 5) -> #f", "(member [1 6 9 4 6] 7) -> #f"]}
{"time": 0.865008, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 8) -> #f", "(member [8] 9) -> #f", "(member [8 1 9 9 2] 7) -> #f", "(member [3 0 0 6 9] 5) -> #f", "(member [4 4 5] 3) -> #f", "(member [5 8] 8) -> #t", "(member [4 1 5 1 4] 3) -> #f", "(member [2 1 6] 5) -> #f", "(member [5 5 4 6 3] 1) -> #f", "(member [0] 5) -> #f", "(member [7 5 5] 8) -> #f", "(member [2] 7) -> #f", "(member [3 5 5 1] 5) -> #t", "(member [8] 2) -> #f", "(member [6 3 4] 9) -> #f", "(member [9 0 0 0] 9) -> #t", "(member [0 4 9] 2) -> #f", "(member [2 4 3] 3) -> #t", "(member [0 8 9 0 3] 2) -> #f", "(member [4 0 8 9] 3) -> #f", "(member [] 5) -> #f", "(member [5 5] 5) -> #t", "(member [4 4] 8) -> #f", "(member [7 1 5] 0) -> #f", "(member [5 7] 6) -> #f", "(member [5] 9) -> #f", "(member [3 0 7] 5) -> #f", "(member [2 3] 2) -> #t", "(member [] 0) -> #f", "(member [9] 7) -> #f", "(member [3] 8) -> #f", "(member [9 5 9] 1) -> #f", "(member [4 9 9] 1) -> #f", "(member [3 4 7] 9) -> #f", "(member [4 5] 1) -> #f", "(member [] 1) -> #f", "(member [1 5] 4) -> #f", "(member [3 1 2 5] 5) -> #t", "(member [4 8] 9) -> #f", "(member [7 8 6 8] 2) -> #f", "(member [7 6 6] 9) -> #f", "(member [9] 5) -> #f", "(member [9 1 2 9] 9) -> #t", "(member [2] 2) -> #t", "(member [4 3 4 8] 1) -> #f", "(member [1 8 4 2 3] 2) -> #t", "(member [] 1) -> #f", "(member [8] 3) -> #f", "(member [9 1] 3) -> #f", "(member [] 5) -> #f", "(member [5 2 3] 7) -> #f", "(member [3 7] 6) -> #f", "(member [3 6 9 1 0] 0) -> #t", "(member [3] 6) -> #f", "(member [8] 8) -> #t", "(member [6 6] 2) -> #f", "(member [4] 1) -> #f", "(member [7 2 5 4] 8) -> #f", "(member [0 5 6 4 1] 5) -> #t", "(member [9 6 7 0 8] 7) -> #t", "(member [0 0] 1) -> #f", "(member [1 3 2 7] 7) -> #t", "(member [3 0] 2) -> #f", "(member [3 0 3] 9) -> #f", "(member [1] 8) -> #f", "(member [6 9 3 6 9] 0) -> #f", "(member [] 1) -> #f", "(member [9 6 5] 8) -> #f", "(member [4] 1) -> #f", "(member [5 9 1] 5) -> #t", "(member [] 4) -> #f", "(member [1 4] 8) -> #f", "(member [1 5 9 0] 8) -> #f", "(member [0 6 1 2] 8) -> #f", "(member [] 7) -> #f", "(member [0 6 8] 4) -> #f", "(member [8] 7) -> #f", "(member [] 6) -> #f", "(member [2 4 9 1 0] 6) -> #f", "(member [] 1) -> #f", "(member [7 1 9] 1) -> #t", "(member [8 6] 9) -> #f", "(member [3 3] 7) -> #f", "(member [8 5 8 3] 0) -> #f", "(member [7 7 9 9 4] 6) -> #f", "(member [9 5 9] 2) -> #f", "(member [6 7 0] 2) -> #f", "(member [3 2] 4) -> #f", "(member [3] 0) -> #f", "(member [6 5 0] 1) -> #f", "(member [4 8 6 8] 5) -> #f", "(member [6 3 8] 7) -> #f"]}
{"time": 1.228227, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 1) -> #f", "(member [9 8] 8) -> #t", "(member [2 3] 9) -> #f", "(member [6] 6) -> #t", "(member [4 3 6 3] 4) -> #t", "(member [9 7] 9) -> #t", "(member [0] 7) -> #f", "(member [] 0) -> #f", "(member [7 4] 4) -> #t", "(member [5] 0) -> #f", "(member [7] 2) -> #f", "(member [0 1 8 0] 1) -> #t", "(member [] 5) -> #f", "(member [5 0 5] 9) -> #f", "(member [] 2) -> #f", "(member [] 8) -> #f", "(member [8 7 9] 1) -> #f", "(member [4 1 3 8] 4) -> #t", "(member [1 9 4 3 0] 4) -> #t", "(member [] 6) -> #f", "(member [9] 2) -> #f", "(member [2 1] 3) -> #f", "(member [8 8 8] 5) -> #f", "(member [3 3 8 7] 8) -> #t", "(member [9 3 2 2] 8) -> #f", "(member [5 3 8 0] 6) -> #f", "(member [9 4 0 2 3] 7) -> #f", "(member [] 4) -> #f", "(member [0 1 7 8] 8) -> #t", "(member [] 2) -> #f", "(member [1 3 7] 5) -> #f", "(member [2 1 6 4] 1) -> #t", "(member [3] 3) -> #t", "(member [3 9 9 9] 8) -> #f", "(member [8 2 5 5 6] 0) -> #f", "(member [6 8 7 1] 7) -> #t", "(member [7 1 9 1] 2) -> #f", "(member [] 5) -> #f", "(member [1 4 4 0 7] 8) -> #f", "(member [] 7) -> #f", "(member [2 9 2] 8) -> #f", "(member [9 2 9 3] 6) -> #f", "(member [9 6 7 0] 0) -> #t", "(member [2 2 5] 4) -> #f", "(member [6 0 5 9] 5) -> #t", "(member [9 6] 2) -> #f", "(member [] 4) -> #f", "(member [7 3] 0) -> #f", "(member [9] 4) -> #f", "(member [5 3 3 4] 5) -> #t", "(member [] 8) -> #f", "(member [6 2] 9) -> #f", "(member [] 2) -> #f", "(member [5] 7) -> #f", "(member [1 2 1 6 6] 4) -> #f", "(member [] 0) -> #f", "(member [1 5 3 8] 7) -> #f", "(member [7 4] 9) -> #f", "(member [6] 5) -> #f", "(member [1 5 8 5 0] 3) -> #f", "(member [2 5 3 9] 9) -> #t", "(member [4] 8) -> #f", "(member [2 3 7 1 0] 1) -> #t", "(member [1 8 6 6] 7) -> #f", "(member [2 7 9] 8) -> #f", "(member [3 7 0] 8) -> #f", "(member [3] 0) -> #f", "(member [6 1 5 5] 7) -> #f", "(member [] 4) -> #f", "(member [5 5 8 4] 3) -> #f", "(member [2 1] 6) -> #f", "(member [2 7 9 2] 9) -> #t", "(member [6 1 1 5 8] 6) -> #t", "(member [0 1 6] 1) -> #t", "(member [0 3 3 4] 0) -> #t", "(member [4] 1) -> #f", "(member [2 0] 8) -> #f", "(member [7 7] 2) -> #f", "(member [2 2 0 0 1] 9) -> #f", "(member [2 0 5 2 7] 2) -> #t", "(member [8] 8) -> #t", "(member [6 4 2 4] 2) -> #t", "(member [] 3) -> #f", "(member [2] 0) -> #f", "(member [] 6) -> #f", "(member [7 3 4 6] 4) -> #t", "(member [9 5 7] 8) -> #f", "(member [8 8 7 7] 8) -> #t", "(member [0 5 5] 5) -> #t", "(member [6 9 2 5 7] 6) -> #t", "(member [8 8] 2) -> #f", "(member [1] 3) -> #f"]}
{"time": 1.332624, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 1) -> #f", "(member [5 2] 4) -> #f", "(member [0] 9) -> #f", "(member [8 6 0 0] 2) -> #f", "(member [7 2 7] 0) -> #f", "(member [7 0] 4) -> #f", "(member [4 5 7 7] 0) -> #f", "(member [] 8) -> #f", "(member [4] 5) -> #f", "(member [] 1) -> #f", "(member [7] 0) -> #f", "(member [7 7 2] 8) -> #f", "(member [5 9 5 2 6] 5) -> #t", "(member [0 0] 7) -> #f", "(member [4 7 4 0] 9) -> #f", "(member [3 5] 1) -> #f", "(member [8 9 3 7] 9) -> #t", "(member [8] 4) -> #f", "(member [7 0] 7) -> #t", "(member [7 4 7 3] 3) -> #t", "(member [5 3 1 2] 7) -> #f", "(member [] 7) -> #f", "(member [] 8) -> #f", "(member [1 1 0 9 0] 4) -> #f", "(member [] 2) -> #f", "(member [] 3) -> #f", "(member [0 3 9 7] 5) -> #f", "(member [7 6 5] 7) -> #t", "(member [3 6 6] 1) -> #f", "(member [] 6) -> #f", "(member [3 2 4 1] 9) -> #f", "(member [7 7] 4) -> #f", "(member [9 5] 9) -> #t", "(member [5] 4) -> #f", "(member [1] 8) -> #f", "(member [5 9 3] 0) -> #f", "(member [1 1 6] 4) -> #f", "(member [1 7 5 1] 6) -> #f", "(member [4 1 6 9] 7) -> #f", "(member [1 1 5] 7) -> #f", "(member [] 6) -> #f", "(member [5 8] 9) -> #f", "(member [1 6 8] 9) -> #f", "(member [6 9] 2) -> #f", "(member [] 4) -> #f", "(member [7 7 5 9 5] 4) -> #f", "(member [9 2 4] 8) -> #f", "(member [3 4] 4) -> #t", "(member [3 2 2] 3) -> #t", "(member [7 6 3] 6) -> #t", "(member [7] 8) -> #f", "(member [3 4] 4) -> #t", "(member [7 8 2 2 6] 9) -> #f", "(member [8 8 9 4 3] 7) -> #f", "(member [2 4 3 2] 4) -> #t", "(member [] 0) -> #f", "(member [6 8 4 0 7] 1) -> #f", "(member [1 7 8] 6) -> #f", "(member [6 4 9] 9) -> #t", "(member [6 8] 3) -> #f", "(member [3 2 8 1] 3) -> #t", "(member [6 1 3 4] 1) -> #t", "(member [9 0] 8) -> #f", "(member [9] 1) -> #f", "(member [] 4) -> #f", "(member [8 6 4 9] 8) -> #t", "(member [] 3) -> #f", "(member [4 3 3 1] 4) -> #t", "(member [6 4] 3) -> #f", "(member [1 6 3] 5) -> #f", "(member [4 7 7 3 2] 0) -> #f", "(member [] 2) -> #f", "(member [5 8 8 9 9] 1) -> #f", "(member [9 0 7] 5) -> #f", "(member [3 9] 3) -> #t", "(member [9 7 4 4] 4) -> #t", "(member [6 6 4 5] 2) -> #f", "(member [1] 4) -> #f", "(member [3 4 0 0 4] 9) -> #f", "(member [6 2] 8) -> #f", "(member [5] 9) -> #f", "(member [7 2 9 9 3] 8) -> #f", "(member [9] 2) -> #f", "(member [4] 7) -> #f", "(member [0 2 0] 8) -> #f", "(member [8] 0) -> #f", "(member [2 7 2] 8) -> #f", "(member [] 1) -> #f", "(member [7 5 9] 1) -> #f", "(member [6] 3) -> #f", "(member [9 8 7 1] 8) -> #t", "(member [3 5 6] 9) -> #f"]}
{"time": 0.735203, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 7) -> #f", "(member [2] 1) -> #f", "(member [0 0 8] 2) -> #f", "(member [2 8] 3) -> #f", "(member [9] 2) -> #f", "(member [0 7 7 4 8] 4) -> #t", "(member [5 5 7 0] 3) -> #f", "(member [4 7] 6) -> #f", "(member [6 4 8] 3) -> #f", "(member [4 1 2] 0) -> #f", "(member [8 7 9 1 9] 7) -> #t", "(member [5 0 9 2] 4) -> #f", "(member [3 8 6] 1) -> #f", "(member [9 5 3 5] 7) -> #f", "(member [9 6] 7) -> #f", "(member [8 7] 4) -> #f", "(member [2 6] 9) -> #f", "(member [0 5] 6) -> #f", "(member [9 5] 9) -> #t", "(member [6 2] 7) -> #f", "(member [] 5) -> #f", "(member [1 9 2 3 4] 7) -> #f", "(member [6 2 3 9] 7) -> #f", "(member [1 2 2 0 1] 8) -> #f", "(member [1 8 6 3 6] 0) -> #f", "(member [3 7] 0) -> #f", "(member [2 3 3 2] 8) -> #f", "(member [1 3 4] 6) -> #f", "(member [4 2 9] 3) -> #f", "(member [5 5 4] 1) -> #f", "(member [5 0 4] 1) -> #f", "(member [8 8 1 5 2] 2) -> #t", "(member [] 5) -> #f", "(member [2 6] 3) -> #f", "(member [6 6 8 6 9] 5) -> #f", "(member [0] 9) -> #f", "(member [4] 0) -> #f", "(member [8 8] 2) -> #f", "(member [] 4) -> #f", "(member [9 4 5 9] 6) -> #f", "(member [7 9 3 6 9] 1) -> #f", "(member [0] 6) -> #f", "(member [7 4] 4) -> #t", "(member [0 3 1 5 6] 3) -> #t", "(member [8 9] 2) -> #f", "(member [9 2 7 2 6] 7) -> #t", "(member [6 2 1 4 9] 4) -> #t", "(member [4 5] 8) -> #f", "(member [] 7) -> #f", "(member [0 8 5] 4) -> #f", "(member [] 6) -> #f", "(member [6 9 4 2] 1) -> #f", "(member [6 9 7 3 8] 2) -> #f", "(member [1 0 2 8 6] 5) -> #f", "(member [5 1 6] 2) -> #f", "(member [1 4 9] 6) -> #f", "(member [1 5 2 3 5] 3) -> #t", "(member [2] 2) -> #t", "(member [4] 2) -> #f", "(member [] 9) -> #f", "(member [7 4 1 3 1] 6) -> #f", "(member [7 5] 0) -> #f", "(member [0 8] 5) -> #f", "(member [1 5 4 5 8] 2) -> #f", "(member [3] 2) -> #f", "(member [0 7 4 9] 5) -> #f", "(member [0 2 3 0 0] 7) -> #f", "(member [] 1) -> #f", "(member [3 1 0 0 3] 3) -> #t", "(member [8 2 6 9] 0) -> #f", "(member [] 0) -> #f", "(member [4 3 6 5 9] 0) -> #f", "(member [4 0] 5) -> #f", "(member [3 8 2 3] 7) -> #f", "(member [7 0] 1) -> #f", "(member [7 1 8 5 9] 6) -> #f", "(member [6 1 0] 6) -> #t", "(member [8 2 4 7 1] 9) -> #f", "(member [2 5 5 4 2] 2) -> #t", "(member [2 0] 9) -> #f", "(member [8 7 9 6 1] 7) -> #t", "(member [3 1 8 2] 2) -> #t", "(member [] 8) -> #f", "(member [4 1 7 6] 3) -> #f", "(member [3 9 9 4 2] 6) -> #f", "(member [3] 9) -> #f", "(member [8 0 0 4 4] 5) -> #f", "(member [0 7 1] 7) -> #t", "(member [4 0] 3) -> #f", "(member [] 0) -> #f", "(member [] 3) -> #f", "(member [6] 6) -> #t"]}
{"time": 1.29929, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 1) -> #f", "(member [8 6 3 1] 6) -> #t", "(member [] 2) -> #f", "(member [3 0 0] 1) -> #f", "(member [0] 8) -> #f", "(member [0 6] 7) -> #f", "(member [4 2 3 5] 8) -> #f", "(member [5 5 8 6 7] 7) -> #t", "(member [4 4 7 2] 6) -> #f", "(member [] 5) -> #f", "(member [1 8] 9) -> #f", "(member [2 9 7] 4) -> #f", "(member [2 9] 7) -> #f", "(member [7 8] 0) -> #f", "(member [8 2 5] 4) -> #f", "(member [] 3) -> #f", "(member [] 0) -> #f", "(member [7 0 9] 0) -> #t", "(member [2 5] 0) -> #f", "(member [2] 3) -> #f", "(member [2] 2) -> #t", "(member [] 8) -> #f", "(member [7 2 3 7] 6) -> #f", "(member [8] 6) -> #f", "(member [] 6) -> #f", "(member [2 1] 2) -> #t", "(member [] 9) -> #f", "(member [7] 9) -> #f", "(member [2 8 5] 2) -> #t", "(member [1 2] 5) -> #f", "(member [3] 1) -> #f", "(member [] 0) -> #f", "(member [0 3 8] 2) -> #f", "(member [8 8 9 6] 7) -> #f", "(member [1 0 2] 0) -> #t", "(member [9] 1) -> #f", "(member [8] 2) -> #f", "(member [6 9] 4) -> #f", "(member [5 0] 3) -> #f", "(member [4] 4) -> #t", "(member [5 0 8 1 7] 4) -> #f", "(member [0 2] 5) -> #f", "(member [5 8 8 3 5] 4) -> #f", "(member [] 8) -> #f", "(member [] 3) -> #f", "(member [5 3] 2) -> #f", "(member [3 9 1 3] 4) -> #f", "(member [] 0) -> #f", "(member [9 4 6 8 0] 2) -> #f", "(member [9 2 4] 7) -> #f", "(member [9] 3) -> #f", "(member [8 4 5 0 5] 7) -> #f", "(member [2 1 7 4 2] 5) -> #f", "(member [5 4 8] 8) -> #t", "(member [6 4 0 1 4] 3) -> #f", "(member [3 2 1 9 7] 4) -> #f", "(member [6] 4) -> #f", "(member [] 3) -> #f", "(member [6 2 8 7] 6) -> #t", "(member [1 0 2 9 8] 0) -> #t", "(member [5 0 2 3] 7) -> #f", "(member [0 3 2 3 5] 7) -> #f", "(member [9] 2) -> #f", "(member [4] 6) -> #f", "(member [8 2 6] 4) -> #f", "(member [4 7 4] 7) -> #t", "(member [6 7] 0) -> #f", "(member [1 7 1] 8) -> #f", "(member [1 8 3 0] 6) -> #f", "(member [] 6) -> #f", "(member [4 9 7 0 7] 4) -> #t", "(member [3 0 3 7 8] 3) -> #t", "(member [9 2 8 4 2] 9) -> #t", "(member [6 3 0 5 0] 3) -> #t", "(member [1 2 5 5 5] 2) -> #t", "(member [6] 4) -> #f", "(member [2 1 0 7 8] 9) -> #f", "(member [0 7 5 1 5] 2) -> #f", "(member [0 4 4 1] 4) -> #t", "(member [4 8 8 8 8] 2) -> #f", "(member [8 2 2 4] 1) -> #f", "(member [4] 5) -> #f", "(member [9 3 5 5] 8) -> #f", "(member [1 2 1] 5) -> #f", "(member [0 4] 9) -> #f", "(member [5] 4) -> #f", "(member [1 5 0] 1) -> #t", "(member [3 5] 2) -> #f", "(member [8 9] 6) -> #f", "(member [5 8 4 3 2] 4) -> #t", "(member [] 7) -> #f", "(member [0 3 7 6] 8) -> #f"]}
{"time": 0.73456, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 0) -> #f", "(member [1 5 9 1] 8) -> #f", "(member [4 3 1 0 9] 0) -> #t", "(member [1 6] 9) -> #f", "(member [1 0 8 7 3] 0) -> #t", "(member [9 1 8 8] 0) -> #f", "(member [] 1) -> #f", "(member [1 8 2 2 3] 5) -> #f", "(member [0 0 9] 4) -> #f", "(member [3 8 8 0 6] 9) -> #f", "(member [6 8 2 6] 7) -> #f", "(member [6 3] 6) -> #t", "(member [6 0 3] 2) -> #f", "(member [4] 2) -> #f", "(member [2 4 9] 1) -> #f", "(member [] 5) -> #f", "(member [8 9] 0) -> #f", "(member [] 0) -> #f", "(member [9 3 4 3 8] 5) -> #f", "(member [9 4] 9) -> #t", "(member [] 4) -> #f", "(member [1 4] 8) -> #f", "(member [0] 1) -> #f", "(member [4] 3) -> #f", "(member [] 5) -> #f", "(member [5 9 4] 2) -> #f", "(member [1] 9) -> #f", "(member [5 4 7 2 7] 8) -> #f", "(member [7 1 1] 2) -> #f", "(member [5 6 1 5] 4) -> #f", "(member [7 6 6] 4) -> #f", "(member [3 9 4 9] 5) -> #f", "(member [9 3 4] 6) -> #f", "(member [1 0 0 4] 7) -> #f", "(member [] 1) -> #f", "(member [] 8) -> #f", "(member [3 6 7] 1) -> #f", "(member [2 2 6] 8) -> #f", "(member [] 5) -> #f", "(member [5 4 8] 9) -> #f", "(member [9 6 8 0 5] 4) -> #f", "(member [] 0) -> #f", "(member [1 7 9] 3) -> #f", "(member [4 3 5] 9) -> #f", "(member [4 6 6] 4) -> #t", "(member [2 8 8 4 9] 9) -> #t", "(member [5 6 0 0 2] 0) -> #t", "(member [2 9 4] 1) -> #f", "(member [] 0) -> #f", "(member [0 4 3 7] 3) -> #t", "(member [6 2 9 1] 9) -> #t", "(member [] 2) -> #f", "(member [] 3) -> #f", "(member [4] 4) -> #t", "(member [3 5 5] 8) -> #f", "(member [1 1 7] 7) -> #t", "(member [4] 1) -> #f", "(member [7] 3) -> #f", "(member [0] 9) -> #f", "(member [0 3 2] 2) -> #t", "(member [] 2) -> #f", "(member [0 4] 2) -> #f", "(member [5] 2) -> #f", "(member [3 6 1] 1) -> #t", "(member [5 6 1 2 4] 1) -> #t", "(member [] 2) -> #f", "(member [4 2 0 5] 1) -> #f", "(member [5 9] 1) -> #f", "(member [6 2 2] 1) -> #f", "(member [] 9) -> #f", "(member [4 7 1 3] 6) -> #f", "(member [7 6 0 8 0] 1) -> #f", "(member [7 5 7 3] 5) -> #t", "(member [7] 2) -> #f", "(member [4 8 2 4 0] 9) -> #f", "(member [9 9 0 5] 3) -> #f", "(member [2 2 4] 4) -> #t", "(member [7 3] 3) -> #t", "(member [7 4 1 3 4] 8) -> #f", "(member [9 9 9 6 8] 3) -> #f", "(member [3] 4) -> #f", "(member [] 3) -> #f", "(member [9 9 8 3] 9) -> #t", "(member [6 9] 5) -> #f", "(member [0 3 1 3 0] 1) -> #t", "(member [6 3 4] 6) -> #t", "(member [0] 6) -> #f", "(member [6 1 0 1 1] 2) -> #f", "(member [7 6 4] 7) -> #t", "(member [] 5) -> #f", "(member [0] 3) -> #f", "(member [8 3 2 1 1] 8) -> #t"]}
{"time": 1.416639, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 1) -> #f", "(member [5 0 7 7] 8) -> #f", "(member [0 2 0 1 2] 8) -> #f", "(member [6 8 5 4 7] 7) -> #t", "(member [2 8] 2) -> #t", "(member [7 6 5 1] 4) -> #f", "(member [0] 0) -> #t", "(member [5 5 5 9] 6) -> #f", "(member [0 3 8 6 4] 2) -> #f", "(member [2 3 0] 4) -> #f", "(member [0 4 2 9] 1) -> #f", "(member [0 7 7] 4) -> #f", "(member [4 9 7 6 7] 5) -> #f", "(member [2 0 8 5] 8) -> #t", "(member [5 2 9 4] 0) -> #f", "(member [9 1 1] 7) -> #f", "(member [0 1 0 7] 5) -> #f", "(member [2 7 9 1] 1) -> #t", "(member [0 2 1] 3) -> #f", "(member [9 6 5 4] 2) -> #f", "(member [5 4 7] 1) -> #f", "(member [] 7) -> #f", "(member [2] 2) -> #t", "(member [3] 1) -> #f", "(member [9 7 3 0 0] 9) -> #t", "(member [1 6 1] 1) -> #t", "(member [5 3] 4) -> #f", "(member [1 9 9] 9) -> #t", "(member [9 1] 4) -> #f", "(member [4 0 4] 1) -> #f", "(member [] 1) -> #f", "(member [4 6 6 4] 4) -> #t", "(member [] 6) -> #f", "(member [4 8 7] 1) -> #f", "(member [6] 6) -> #t", "(member [7] 3) -> #f", "(member [0] 5) -> #f", "(member [3 6 8] 7) -> #f", "(member [4 5 9 8 3] 3) -> #t", "(member [5] 1) -> #f", "(member [9 0] 9) -> #t", "(member [3 2 7] 5) -> #f", "(member [] 6) -> #f", "(member [] 8) -> #f", "(member [1] 2) -> #f", "(member [2 4 9 5] 4) -> #t", "(member [5] 8) -> #f", "(member [] 8) -> #f", "(member [4] 9) -> #f", "(member [9 1 2 5] 6) -> #f", "(member [] 0) -> #f", "(member [0] 7) -> #f", "(member [4 6] 4) -> #t", "(member [] 0) -> #f", "(member [2 5 2 1] 4) -> #f", "(member [9 2 5] 0) -> #f", "(member [8] 4) -> #f", "(member [8 1 7] 5) -> #f", "(member [4 0 2] 1) -> #f", "(member [0] 5) -> #f", "(member [6 0 0] 5) -> #f", "(member [1 0] 8) -> #f", "(member [0 6 6 8 3] 4) -> #f", "(member [7] 9) -> #f", "(member [5 3 0] 0) -> #t", "(member [1 1] 9) -> #f", "(member [0 4 0 5] 8) -> #f", "(member [8 9] 0) -> #f", "(member [7 1 7 2] 6) -> #f", "(member [3 4 1 7] 8) -> #f", "(member [] 7) -> #f", "(member [5] 6) -> #f", "(member [6] 9) -> #f", "(member [1 9 3 3 3] 2) -> #f", "(member [7 1 7 8] 8) -> #t", "(member [2 6] 8) -> #f", "(member [] 4) -> #f", "(member [3] 4) -> #f", "(member [5 5] 0) -> #f", "(member [] 2) -> #f", "(member [0 1 7] 2) -> #f", "(member [6 5] 9) -> #f", "(member [3 3 8 0 7] 3) -> #t", "(member [] 9) -> #f", "(member [2] 8) -> #f", "(member [2 5 4] 6) -> #f", "(member [1] 2) -> #f", "(member [3 1] 8) -> #f", "(member [] 7) -> #f", "(member [2 9 5] 6) -> #f", "(member [8] 5) -> #f", "(member [] 9) -> #f"]}
{"time": 1.580486, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 4) -> #f", "(member [] 3) -> #f", "(member [] 3) -> #f", "(member [1 9 4 8] 8) -> #t", "(member [5 0 0] 6) -> #f", "(member [9 9 9] 4) -> #f", "(member [1 7] 8) -> #f", "(member [] 3) -> #f", "(member [3 1 0] 8) -> #f", "(member [1] 0) -> #f", "(member [2 7 4] 8) -> #f", "(member [6 6] 7) -> #f", "(member [2 0 0 3] 6) -> #f", "(member [] 0) -> #f", "(member [] 3) -> #f", "(member [] 6) -> #f", "(member [4 4] 6) -> #f", "(member [5] 8) -> #f", "(member [9 1 7] 4) -> #f", "(member [5 6 5 1] 2) -> #f", "(member [8 1 0] 8) -> #t", "(member [5 8 9 8] 2) -> #f", "(member [] 0) -> #f", "(member [9] 2) -> #f", "(member [3 7 6 8] 1) -> #f", "(member [3 4 4] 2) -> #f", "(member [1 1 8 9 1] 8) -> #t", "(member [] 3) -> #f", "(member [3] 5) -> #f", "(member [1] 8) -> #f", "(member [2 8 5 6] 7) -> #f", "(member [9 9 6 4] 9) -> #t", "(member [1 2 2] 7) -> #f", "(member [7 9 0 4] 9) -> #t", "(member [] 7) -> #f", "(member [] 4) -> #f", "(member [1 6 3 3] 5) -> #f", "(member [4 7 1 7 2] 3) -> #f", "(member [] 4) -> #f", "(member [5 7 0 7 6] 5) -> #t", "(member [2 6 3 8 6] 5) -> #f", "(member [6] 0) -> #f", "(member [3 7 6 5] 9) -> #f", "(member [3 1 4 6] 2) -> #f", "(member [6 1] 7) -> #f", "(member [4] 8) -> #f", "(member [] 8) -> #f", "(member [8 7 4 6 0] 5) -> #f", "(member [] 9) -> #f", "(member [3 7] 4) -> #f", "(member [1] 1) -> #t", "(member [3] 4) -> #f", "(member [5 9 3] 0) -> #f", "(member [3 3 4 7] 2) -> #f", "(member [7 1 3 7] 8) -> #f", "(member [2 2 7] 2) -> #t", "(member [1 4 4] 5) -> #f", "(member [] 0) -> #f", "(member [8 3 9] 5) -> #f", "(member [4 8] 8) -> #t", "(member [1 9 3] 0) -> #f", "(member [] 4) -> #f", "(member [9 0 4 1 3] 1) -> #t", "(member [3 2 3 8] 1) -> #f", "(member [8 1 4 9 7] 2) -> #f", "(member [7 4] 6) -> #f", "(member [8 4 8] 1) -> #f", "(member [] 2) -> #f", "(member [4 6 8] 6) -> #t", "(member [0] 5) -> #f", "(member [6 4] 1) -> #f", "(member [3 0 3] 6) -> #f", "(member [9 3] 9) -> #t", "(member [3 4] 4) -> #t", "(member [] 6) -> #f", "(member [9 1] 4) -> #f", "(member [4 1] 2) -> #f", "(member [4] 5) -> #f", "(member [2 0 0 0] 4) -> #f", "(member [4 9 9 1] 4) -> #t", "(member [8 5 7 9] 9) -> #t", "(member [5 2 6 2 3] 8) -> #f", "(member [3 8] 2) -> #f", "(member [1 9 6] 5) -> #f", "(member [3 0 0 5 5] 5) -> #t", "(member [] 5) -> #f", "(member [2 4 8 0] 2) -> #t", "(member [3] 0) -> #f", "(member [2 1] 6) -> #f", "(member [8 3 3 5 2] 1) -> #f", "(member [5 9 2] 3) -> #f", "(member [] 1) -> #f"]}
{"time": 0.807791, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 2) -> #f", "(member [2 3 4] 2) -> #t", "(member [4 3] 5) -> #f", "(member [5 6 8 4] 5) -> #t", "(member [2] 8) -> #f", "(member [] 8) -> #f", "(member [0 1 4 0 6] 4) -> #t", "(member [1 4 0 3] 6) -> #f", "(member [0 6 6] 3) -> #f", "(member [7 5 1 6 5] 1) -> #t", "(member [8 9] 5) -> #f", "(member [5 4 4 3 7] 3) -> #t", "(member [0 5 3 6 8] 2) -> #f", "(member [4] 0) -> #f", "(member [2 2] 7) -> #f", "(member [8 5] 2) -> #f", "(member [7 9] 3) -> #f", "(member [1 5 6 5 0] 9) -> #f", "(member [3 8 1 1] 2) -> #f", "(member [] 0) -> #f", "(member [0 8 5] 2) -> #f", "(member [8] 8) -> #t", "(member [6 4 9 4] 9) -> #t", "(member [9 2 2] 2) -> #t", "(member [9] 5) -> #f", "(member [4 8] 7) -> #f", "(member [3 0] 0) -> #t", "(member [6 5] 2) -> #f", "(member [4 0 2] 4) -> #t", "(member [9 0] 2) -> #f", "(member [] 6) -> #f", "(member [9 7 7 5 4] 8) -> #f", "(member [1] 4) -> #f", "(member [] 2) -> #f", "(member [3] 3) -> #t", "(member [4 8 1 0 6] 3) -> #f", "(member [7 1] 5) -> #f", "(member [] 5) -> #f", "(member [] 1) -> #f", "(member [4 1] 7) -> #f", "(member [] 7) -> #f", "(member [] 2) -> #f", "(member [4 2 3 9 2] 6) -> #f", "(member [8] 0) -> #f", "(member [7 4 8 9 6] 2) -> #f", "(member [] 5) -> #f", "(member [9 0] 0) -> #t", "(member [1 2 7] 9) -> #f", "(member [4] 5) -> #f", "(member [] 3) -> #f", "(member [8 0] 3) -> #f", "(member [] 1) -> #f", "(member [0 9 0] 9) -> #t", "(member [9 5 0 9 8] 6) -> #f", "(member [6 9 3 3 4] 9) -> #t", "(member [2 9 1] 6) -> #f", "(member [1 2 8 4] 1) -> #t", "(member [8 8 2 8 4] 7) -> #f", "(member [4 8 6 3 1] 5) -> #f", "(member [6] 5) -> #f", "(member [6 3 0 2 0] 3) -> #t", "(member [5 4] 1) -> #f", "(member [1 3 2 6] 5) -> #f", "(member [5 6 2 5] 7) -> #f", "(member [3 9 2 7] 0) -> #f", "(member [3 4 4 7 6] 4) -> #t", "(member [] 2) -> #f", "(member [9 0 0 7 3] 1) -> #f", "(member [0] 2) -> #f", "(member [9 6] 0) -> #f", "(member [8 6 1 0] 5) -> #f", "(member [4 0 3 7 2] 3) -> #t", "(member [] 0) -> #f", "(member [9] 6) -> #f", "(member [7 6 1 5 9] 7) -> #t", "(member [5 7 3] 3) -> #t", "(member [2 0] 5) -> #f", "(member [] 6) -> #f", "(member [9 6 1 4] 8) -> #f", "(member [6 1 7 6] 4) -> #f", "(member [5 7 0 4] 4) -> #t", "(member [1 1 2 4 0] 4) -> #t", "(member [7 3 6 2 8] 0) -> #f", "(member [1 1] 3) -> #f", "(member [8 6 5 8 6] 6) -> #t", "(member [] 2) -> #f", "(member [] 2) -> #f", "(member [9] 8) -> #f", "(member [] 0) -> #f", "(member [6 2] 2) -> #t", "(member [0 2 8 6 9] 3) -> #f", "(member [5 3 5] 2) -> #f"]}
{"time": 0.874142, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 6) -> #f", "(member [6 0 7 3 3] 8) -> #f", "(member [7 1 9] 7) -> #t", "(member [2 2 5 0] 9) -> #f", "(member [6 6] 9) -> #f", "(member [4 7 4 2] 4) -> #t", "(member [7 5 5] 0) -> #f", "(member [8 4 1] 5) -> #f", "(member [] 4) -> #f", "(member [1 6] 5) -> #f", "(member [9 1 7 6 6] 7) -> #t", "(member [3 9 0] 7) -> #f", "(member [3 4 6 5] 7) -> #f", "(member [0 1] 7) -> #f", "(member [6 8 8 0] 9) -> #f", "(member [] 5) -> #f", "(member [0] 6) -> #f", "(member [] 6) -> #f", "(member [4 7 6] 2) -> #f", "(member [] 2) -> #f", "(member [9] 6) -> #f", "(member [1 6 0 5 5] 8) -> #f", "(member [0 4 6 4] 5) -> #f", "(member [3] 2) -> #f", "(member [7 9] 8) -> #f", "(member [0 9 4] 1) -> #f", "(member [] 9) -> #f", "(member [1 9] 1) -> #t", "(member [3] 0) -> #f", "(member [7 9 3 8] 4) -> #f", "(member [8 1 7] 5) -> #f", "(member [8] 2) -> #f", "(member [4] 0) -> #f", "(member [8] 7) -> #f", "(member [] 3) -> #f", "(member [3 2 4 3] 5) -> #f", "(member [6 8 5 9] 2) -> #f", "(member [6] 5) -> #f", "(member [6 8 6] 3) -> #f", "(member [2 1 0 2] 9) -> #f", "(member [1 8] 6) -> #f", "(member [4 0 3 4 2] 5) -> #f", "(member [] 5) -> #f", "(member [8 9 7 4 0] 2) -> #f", "(member [8 6 2 4 9] 1) -> #f", "(member [0] 0) -> #t", "(member [6 6 6 1 8] 0) -> #f", "(member [8] 9) -> #f", "(member [9 9] 6) -> #f", "(member [7 2 4] 3) -> #f", "(member [8 0 2] 2) -> #t", "(member [7 6 7] 3) -> #f", "(member [0 8 0] 3) -> #f", "(member [0 9 7 1 0] 9) -> #t", "(member [9] 8) -> #f", "(member [] 1) -> #f", "(member [8 4 2 0 2] 5) -> #f", "(member [] 8) -> #f", "(member [9] 8) -> #f", "(member [0] 8) -> #f", "(member [7] 9) -> #f", "(member [6] 3) -> #f", "(member [9] 2) -> #f", "(member [4 0 9] 0) -> #t", "(member [3 1 4 3 5] 8) -> #f", "(member [4 9] 9) -> #t", "(member [0 5] 9) -> #f", "(member [4 1 4] 5) -> #f", "(member [3] 4) -> #f", "(member [6 6] 6) -> #t", "(member [2 9 4 6 0] 0) -> #t", "(member [8 4 4] 7) -> #f", "(member [6 7] 8) -> #f", "(member [8 0] 5) -> #f", "(member [8 1 7] 2) -> #f", "(member [9 9 0 7 7] 2) -> #f", "(member [5] 9) -> #f", "(member [] 6) -> #f", "(member [9 8 9 8 0] 2) -> #f", "(member [4 7] 0) -> #f", "(member [] 7) -> #f", "(member [1 5] 3) -> #f", "(member [6 0 9] 1) -> #f", "(member [2 6] 8) -> #f", "(member [1 3 7 7 5] 1) -> #t", "(member [6] 5) -> #f", "(member [3 8 7 5 8] 5) -> #t", "(member [7 6] 9) -> #f", "(member [1 0 8 4] 0) -> #t", "(member [9 5 1 8] 9) -> #t", "(member [9 6 7] 9) -> #t", "(member [8 7 8 7] 3) -> #f"]}
{"time": 0.848147, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 5) -> #f", "(member [3 5 7] 3) -> #t", "(member [4 1] 4) -> #t", "(member [1] 4) -> #f", "(member [4] 2) -> #f", "(member [5] 3) -> #f", "(member [6 0] 6) -> #t", "(member [3 5] 4) -> #f", "(member [] 0) -> #f", "(member [4 4 5 2] 8) -> #f", "(member [] 3) -> #f", "(member [] 3) -> #f", "(member [4] 1) -> #f", "(member [2] 2) -> #t", "(member [2 7 9 3 4] 3) -> #t", "(member [7] 4) -> #f", "(member [] 3) -> #f", "(member [] 8) -> #f", "(member [2] 0) -> #f", "(member [2 3 2 2 7] 4) -> #f", "(member [3 3] 6) -> #f", "(member [] 3) -> #f", "(member [0 6 1 8 0] 7) -> #f", "(member [4] 6) -> #f", "(member [8 9 3 7 4] 9) -> #t", "(member [] 1) -> #f", "(member [8 7 8 9] 0) -> #f", "(member [4 7 2] 3) -> #f", "(member [1 2 2 3 7] 6) -> #f", "(member [0] 0) -> #t", "(member [1 4 8 2 2] 5) -> #f", "(member [9] 3) -> #f", "(member [7 8 6 4] 3) -> #f", "(member [9 1 6 9 6] 5) -> #f", "(member [2 5] 6) -> #f", "(member [6 6] 8) -> #f", "(member [0 0] 9) -> #f", "(member [0 9 9 7] 2) -> #f", "(member [6] 6) -> #t", "(member [2 8] 1) -> #f", "(member [6 2 6 5 1] 5) -> #t", "(member [6] 9) -> #f", "(member [] 2) -> #f", "(member [] 9) -> #f", "(member [4 3 5 0] 6) -> #f", "(member [8 1 7 9 7] 2) -> #f", "(member [0] 0) -> #t", "(member [7 2] 8) -> #f", "(member [6 7] 1) -> #f", "(member [4 8 7 2 2] 1) -> #f", "(member [8 9] 1) -> #f", "(member [7 3] 7) -> #t", "(member [8 3 6] 9) -> #f", "(member [1 9 6 2] 4) -> #f", "(member [5 8 1] 8) -> #t", "(member [4 2 7 7 4] 7) -> #t", "(member [] 1) -> #f", "(member [1 3 9 7 7] 0) -> #f", "(member [] 2) -> #f", "(member [7 2 1 3 9] 0) -> #f", "(member [7] 4) -> #f", "(member [5] 7) -> #f", "(member [7 8 3 6] 2) -> #f", "(member [] 9) -> #f", "(member [7 7 9] 7) -> #t", "(member [1 1 7] 5) -> #f", "(member [5 4] 3) -> #f", "(member [] 2) -> #f", "(member [5] 4) -> #f", "(member [0 8 5] 8) -> #t", "(member [4 8] 0) -> #f", "(member [3 7] 8) -> #f", "(member [7 8] 2) -> #f", "(member [] 6) -> #f", "(member [2 2 4 3 1] 5) -> #f", "(member [4 3] 9) -> #f", "(member [0 4 4 6 3] 1) -> #f", "(member [2 8] 9) -> #f", "(member [7 0 5 4] 3) -> #f", "(member [] 3) -> #f", "(member [2 3 2 8] 0) -> #f", "(member [] 3) -> #f", "(member [9 0 0 1 8] 5) -> #f", "(member [7 3 9 0] 8) -> #f", "(member [6] 5) -> #f", "(member [2 1] 5) -> #f", "(member [2 4 2 7] 3) -> #f", "(member [0 2 5] 4) -> #f", "(member [] 9) -> #f", "(member [7] 9) -> #f", "(member [6 2] 7) -> #f", "(member [2 1 6 0] 6) -> #t"]}
{"time": 1.430466, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (= e (!= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 4) -> #f", "(member [0] 0) -> #t", "(member [1 0] 7) -> #f", "(member [0] 3) -> #f", "(member [2 2] 3) -> #f", "(member [2 0 8 9 0] 6) -> #f", "(member [7 7 5 3 4] 1) -> #f", "(member [0 5 7 0] 6) -> #f", "(member [1 7] 6) -> #f", "(member [9] 6) -> #f", "(member [5 7 5 4 5] 6) -> #f", "(member [3 0 0 0] 8) -> #f", "(member [6 5 3 0] 9) -> #f", "(member [7 5 1 2] 8) -> #f", "(member [] 1) -> #f", "(member [9 8 1 6 2] 3) -> #f", "(member [6 8] 2) -> #f", "(member [6] 2) -> #f", "(member [8 6 1 3] 6) -> #t", "(member [2 4 8] 0) -> #f", "(member [9 7 4 6 3] 7) -> #t", "(member [8 5] 3) -> #f", "(member [3 4 9 2] 3) -> #t", "(member [] 4) -> #f", "(member [9] 6) -> #f", "(member [3 2 7] 3) -> #t", "(member [5 0] 6) -> #f", "(member [8 1 1 8] 2) -> #f", "(member [9] 5) -> #f", "(member [3 5 5 6] 9) -> #f", "(member [5 7 8] 5) -> #t", "(member [8 6 4 1 9] 4) -> #t", "(member [7 7] 6) -> #f", "(member [8 4] 2) -> #f", "(member [1 4] 6) -> #f", "(member [] 6) -> #f", "(member [6] 0) -> #f", "(member [1] 7) -> #f", "(member [1 4] 5) -> #f", "(member [1] 5) -> #f", "(member [3] 4) -> #f", "(member [] 4) -> #f", "(member [7 4 6] 6) -> #t", "(member [4] 2) -> #f", "(member [] 0) -> #f", "(member [9 6 1] 7) -> #f", "(member [0 3 8 2] 5) -> #f", "(member [2 2 0 1 7] 6) -> #f", "(member [9 8 1 0 1] 5) -> #f", "(member [1 4 1] 7) -> #f", "(member [7 3 6] 5) -> #f", "(member [4 0 5 5 4] 6) -> #f", "(member [9 8 7 8] 0) -> #f", "(member [] 8) -> #f", "(member [] 6) -> #f", "(member [7 5 2] 1) -> #f", "(member [1 4 1 0 2] 6) -> #f", "(member [6 0 2] 2) -> #t", "(member [] 1) -> #f", "(member [] 4) -> #f", "(member [] 5) -> #f", "(member [6] 3) -> #f", "(member [3 7 9 8] 5) -> #f", "(member [6] 9) -> #f", "(member [4 2 8 2] 1) -> #f", "(member [9 5] 7) -> #f", "(member [9 0] 5) -> #f", "(member [2 7] 5) -> #f", "(member [3 8 6 3] 9) -> #f", "(member [6 6 6 9] 1) -> #f", "(member [4] 9) -> #f", "(member [4 9 3 5 7] 8) -> #f", "(member [6 8 6 8] 2) -> #f", "(member [2 2 4 4 4] 1) -> #f", "(member [8 9] 7) -> #f", "(member [3 4 9 6 2] 6) -> #t", "(member [4 6 5] 9) -> #f", "(member [3 2] 4) -> #f", "(member [2 7] 4) -> #f", "(member [3 0] 2) -> #f", "(member [0 9] 3) -> #f", "(member [7 7 1 0 3] 3) -> #t", "(member [1] 7) -> #f", "(member [2 7 6] 1) -> #f", "(member [4 7 0 1 5] 8) -> #f", "(member [3 1 5 5] 4) -> #f", "(member [1] 8) -> #f", "(member [4 0 6] 4) -> #t", "(member [5 3] 5) -> #t", "(member [1] 3) -> #f", "(member [5 2 4 6] 1) -> #f", "(member [7] 4) -> #f"]}
{"time": 1.419649, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (= e (!= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 4) -> #f", "(member [0] 7) -> #f", "(member [3 2 7] 7) -> #t", "(member [8 3 4 1 9] 2) -> #f", "(member [9 1] 4) -> #f", "(member [1 9 1 0 5] 7) -> #f", "(member [] 8) -> #f", "(member [] 7) -> #f", "(member [9 8 3] 5) -> #f", "(member [8 4 3] 6) -> #f", "(member [7 8 8 3 7] 0) -> #f", "(member [] 3) -> #f", "(member [9 7 3 8 0] 7) -> #t", "(member [7 8 8 7 2] 3) -> #f", "(member [9 0 1 2] 4) -> #f", "(member [0 2] 9) -> #f", "(member [7] 2) -> #f", "(member [5 4 3 9 4] 6) -> #f", "(member [8 9 2] 8) -> #t", "(member [5 9] 4) -> #f", "(member [8 8 9 1] 9) -> #t", "(member [4 8 8] 9) -> #f", "(member [] 4) -> #f", "(member [] 0) -> #f", "(member [1 4 5] 8) -> #f", "(member [4 7 3] 6) -> #f", "(member [] 0) -> #f", "(member [4 2 3] 1) -> #f", "(member [1 9 3 8] 3) -> #t", "(member [5 8 8] 1) -> #f", "(member [6 9] 1) -> #f", "(member [8] 8) -> #t", "(member [2 9 9 5] 4) -> #f", "(member [2 4 7 5 4] 3) -> #f", "(member [0 8] 4) -> #f", "(member [2] 1) -> #f", "(member [6 4 6 4] 2) -> #f", "(member [2 4 1 5] 3) -> #f", "(member [2 3 3 5] 5) -> #t", "(member [8 0] 0) -> #t", "(member [6 7 9 8 6] 8) -> #t", "(member [] 8) -> #f", "(member [4 7 1 4 5] 2) -> #f", "(member [1 9 1 2] 9) -> #t", "(member [9 3 3 3] 8) -> #f", "(member [7 2] 9) -> #f", "(member [8 5] 7) -> #f", "(member [7 1 0 9 4] 2) -> #f", "(member [4 2] 3) -> #f", "(member [3 8 4 8] 7) -> #f", "(member [8 3] 4) -> #f", "(member [] 4) -> #f", "(member [6 7 3] 8) -> #f", "(member [9 5 4 8] 5) -> #t", "(member [5] 4) -> #f", "(member [] 1) -> #f", "(member [3 8 9 5] 8) -> #t", "(member [3 8 8] 1) -> #f", "(member [] 7) -> #f", "(member [] 3) -> #f", "(member [2 9 3 7] 8) -> #f", "(member [1 0] 9) -> #f", "(member [5 9] 6) -> #f", "(member [3 6 4 1 5] 5) -> #t", "(member [3] 5) -> #f", "(member [4 5 4] 8) -> #f", "(member [3 0 8 6] 4) -> #f", "(member [6 4] 4) -> #t", "(member [4 5 2 7 0] 0) -> #t", "(member [9 9] 5) -> #f", "(member [4 9 5 7] 3) -> #f", "(member [2 4] 2) -> #t", "(member [9 8 2] 1) -> #f", "(member [4 0 6 4 4] 6) -> #t", "(member [7 6 5 2] 9) -> #f", "(member [6 5] 6) -> #t", "(member [5 6 0 2] 4) -> #f", "(member [] 9) -> #f", "(member [4 8] 5) -> #f", "(member [7 5 8] 7) -> #t", "(member [4 8 9 3] 9) -> #t", "(member [] 0) -> #f", "(member [0 5 8] 7) -> #f", "(member [] 0) -> #f", "(member [6 0 7 3 3] 0) -> #t", "(member [4 0 1 3 3] 5) -> #f", "(member [1] 1) -> #t", "(member [] 7) -> #f", "(member [] 9) -> #f", "(member [0 0 8 0] 2) -> #f", "(member [5 8 6] 3) -> #f", "(member [0 3 9 2] 5) -> #f"]}
{"time": 1.380148, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 0) -> #f", "(member [8] 5) -> #f", "(member [6 0 2 9 8] 0) -> #t", "(member [7 2 1 4 9] 7) -> #t", "(member [8 1 6 2] 9) -> #f", "(member [0 2] 1) -> #f", "(member [4 2 7 5 1] 0) -> #f", "(member [5] 9) -> #f", "(member [8 8 4] 4) -> #t", "(member [2 2 0 6] 4) -> #f", "(member [] 3) -> #f", "(member [] 4) -> #f", "(member [] 3) -> #f", "(member [3 1 2 1 9] 8) -> #f", "(member [4 4] 7) -> #f", "(member [5 2 8] 0) -> #f", "(member [3 7] 9) -> #f", "(member [4 2] 9) -> #f", "(member [4 9 4 6] 2) -> #f", "(member [2] 8) -> #f", "(member [3 2 8 1] 5) -> #f", "(member [4 3] 1) -> #f", "(member [6] 9) -> #f", "(member [2 1 2 1 4] 9) -> #f", "(member [2 7 7 0 3] 3) -> #t", "(member [3 4 0] 3) -> #t", "(member [6 5 9 8] 7) -> #f", "(member [4] 8) -> #f", "(member [6 1 4] 4) -> #t", "(member [2 3] 0) -> #f", "(member [] 6) -> #f", "(member [2 2 9 3 1] 1) -> #t", "(member [] 6) -> #f", "(member [4 0 3 7] 7) -> #t", "(member [5 9 6 7] 1) -> #f", "(member [5 2] 6) -> #f", "(member [7 4 4 2 7] 6) -> #f", "(member [6] 1) -> #f", "(member [6] 7) -> #f", "(member [0 3 4] 9) -> #f", "(member [8 8 0 0] 0) -> #t", "(member [4 4] 3) -> #f", "(member [9 4 4 1 6] 5) -> #f", "(member [5 7 9 6] 9) -> #t", "(member [9 1 1 9 6] 5) -> #f", "(member [7 6] 0) -> #f", "(member [9] 6) -> #f", "(member [8 7 6] 7) -> #t", "(member [4] 1) -> #f", "(member [1 2 2 3] 8) -> #f", "(member [7] 8) -> #f", "(member [1 6] 9) -> #f", "(member [3 4] 9) -> #f", "(member [2 4 5 7] 8) -> #f", "(member [6 9 3 1 7] 6) -> #t", "(member [0 1 3 4] 0) -> #t", "(member [0 4 8 1 3] 7) -> #f", "(member [3 0 9 3 8] 8) -> #t", "(member [5 1 0 2 3] 5) -> #t", "(member [1 8 7 9] 0) -> #f", "(member [9] 6) -> #f", "(member [1 0 8 7] 9) -> #f", "(member [1 2 9 6] 0) -> #f", "(member [9 9 3] 6) -> #f", "(member [] 8) -> #f", "(member [5] 7) -> #f", "(member [2] 9) -> #f", "(member [1 9 9 2 4] 9) -> #t", "(member [1 8 1] 3) -> #f", "(member [0] 4) -> #f", "(member [8 8 2 3] 5) -> #f", "(member [7] 2) -> #f", "(member [7 1 9] 2) -> #f", "(member [9 5] 5) -> #t", "(member [2 9 8] 5) -> #f", "(member [5 9 7] 1) -> #f", "(member [] 8) -> #f", "(member [5 1 0 1 5] 9) -> #f", "(member [] 0) -> #f", "(member [4 4 7 9] 0) -> #f", "(member [7 8 7 1 3] 6) -> #f", "(member [4] 8) -> #f", "(member [8] 8) -> #t", "(member [0 7 9 6 7] 3) -> #f", "(member [0 6 6 0 9] 9) -> #t", "(member [3] 1) -> #f", "(member [0 6] 2) -> #f", "(member [6 5 5] 4) -> #f", "(member [] 7) -> #f", "(member [6] 4) -> #f", "(member [1 2 8] 8) -> #t", "(member [] 6) -> #f"]}
{"time": 0.96036, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 9) -> #f", "(member [] 0) -> #f", "(member [7 8 6 9 4] 4) -> #t", "(member [5 6 8 1] 6) -> #t", "(member [6 6 5 9 5] 6) -> #t", "(member [9 7] 7) -> #t", "(member [4 4] 4) -> #t", "(member [7 5 8] 3) -> #f", "(member [4] 9) -> #f", "(member [9 1 1] 1) -> #t", "(member [8 7] 6) -> #f", "(member [9 5] 0) -> #f", "(member [0 2 1 5 1] 6) -> #f", "(member [3 0] 4) -> #f", "(member [7 5 5 1] 5) -> #t", "(member [5 8 6] 5) -> #t", "(member [2 3 7] 4) -> #f", "(member [0 0 3 8] 5) -> #f", "(member [7 0 1] 3) -> #f", "(member [3 3 6 0 1] 6) -> #t", "(member [6 7 1 6 8] 8) -> #t", "(member [] 8) -> #f", "(member [] 9) -> #f", "(member [] 2) -> #f", "(member [0] 6) -> #f", "(member [6 7 1] 1) -> #t", "(member [3 4 6 0] 0) -> #t", "(member [6 9 2 6] 8) -> #f", "(member [] 3) -> #f", "(member [3 9] 1) -> #f", "(member [4 1 4 5] 3) -> #f", "(member [4 2 6] 6) -> #t", "(member [8 4] 1) -> #f", "(member [1 1 0 7 6] 1) -> #t", "(member [] 5) -> #f", "(member [6 7 3 0 1] 5) -> #f", "(member [0 2 8] 7) -> #f", "(member [] 6) -> #f", "(member [6 5 3 2] 7) -> #f", "(member [3 5 0] 0) -> #t", "(member [8 1] 9) -> #f", "(member [9 3 1 0] 8) -> #f", "(member [2 7 6 4] 0) -> #f", "(member [5 3 8 8] 5) -> #t", "(member [] 5) -> #f", "(member [] 5) -> #f", "(member [8 4 3 9] 0) -> #f", "(member [] 2) -> #f", "(member [5 0 3] 6) -> #f", "(member [5 7 6 0] 1) -> #f", "(member [4 1 9 0] 2) -> #f", "(member [1 6 5] 7) -> #f", "(member [5 2 3 7 9] 2) -> #t", "(member [] 2) -> #f", "(member [7 1 2 1 0] 9) -> #f", "(member [9] 6) -> #f", "(member [4 3] 8) -> #f", "(member [2 6] 2) -> #t", "(member [8 3 4 1 2] 0) -> #f", "(member [4] 0) -> #f", "(member [3 8 1 3 8] 9) -> #f", "(member [8] 9) -> #f", "(member [9 3] 6) -> #f", "(member [4 4 8 1] 3) -> #f", "(member [7 0 7 9 9] 9) -> #t", "(member [8] 0) -> #f", "(member [] 9) -> #f", "(member [] 9) -> #f", "(member [7 5 7 0 3] 8) -> #f", "(member [1] 5) -> #f", "(member [0 2 9 3 1] 6) -> #f", "(member [3 0 4 3 3] 5) -> #f", "(member [7 6 9 7] 3) -> #f", "(member [7 6 8] 6) -> #t", "(member [] 7) -> #f", "(member [6 1] 8) -> #f", "(member [0 8 0 6 8] 9) -> #f", "(member [] 0) -> #f", "(member [2 9 6 4 4] 0) -> #f", "(member [5 6 3 3] 7) -> #f", "(member [4 9 8] 5) -> #f", "(member [0 6 1 1 3] 0) -> #t", "(member [4 3 8 1] 0) -> #f", "(member [] 9) -> #f", "(member [4 6 3] 1) -> #f", "(member [5] 9) -> #f", "(member [7 4 8 4 3] 9) -> #f", "(member [1] 4) -> #f", "(member [7 5] 0) -> #f", "(member [2 0] 5) -> #f", "(member [1 4 0 5] 5) -> #t", "(member [] 1) -> #f"]}
{"time": 1.263545, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 6) -> #f", "(member [7 6] 1) -> #f", "(member [7 0 9 0 3] 7) -> #t", "(member [7 1 9] 5) -> #f", "(member [6 6 4] 2) -> #f", "(member [2 6 7 3 1] 0) -> #f", "(member [6 6 6] 7) -> #f", "(member [] 9) -> #f", "(member [] 8) -> #f", "(member [4 1 5] 4) -> #t", "(member [7 1 3 2 4] 7) -> #t", "(member [6 3] 9) -> #f", "(member [] 3) -> #f", "(member [3 0 3] 0) -> #t", "(member [2 5 0 0 2] 2) -> #t", "(member [] 8) -> #f", "(member [3] 7) -> #f", "(member [1] 5) -> #f", "(member [2 1 8 9 5] 4) -> #f", "(member [0 6 2 2] 2) -> #t", "(member [8 5 7 3] 7) -> #t", "(member [8 8 2 9 4] 0) -> #f", "(member [6] 1) -> #f", "(member [8 8 5 3 2] 2) -> #t", "(member [8 5 2 9 9] 9) -> #t", "(member [6 7 2 0 3] 5) -> #f", "(member [] 8) -> #f", "(member [0 5 0 5 7] 4) -> #f", "(member [7 6 8] 4) -> #f", "(member [6 6 7 9 8] 4) -> #f", "(member [1 1 6 5] 9) -> #f", "(member [4 1] 5) -> #f", "(member [9 8 0] 2) -> #f", "(member [3 9 3 3 3] 8) -> #f", "(member [] 7) -> #f", "(member [0 3] 5) -> #f", "(member [6 5 5] 4) -> #f", "(member [4 8 4] 7) -> #f", "(member [5 7 8] 5) -> #t", "(member [1 9] 0) -> #f", "(member [0 4 0] 9) -> #f", "(member [6 9 7 9] 2) -> #f", "(member [] 6) -> #f", "(member [5] 4) -> #f", "(member [5 0 4 1] 0) -> #t", "(member [8] 2) -> #f", "(member [2] 7) -> #f", "(member [4] 1) -> #f", "(member [4 5 1] 4) -> #t", "(member [8 1 3 0] 7) -> #f", "(member [0 8 7 9] 6) -> #f", "(member [0 4 2 7 0] 2) -> #t", "(member [9] 3) -> #f", "(member [9 5] 5) -> #t", "(member [7 4 6 3] 0) -> #f", "(member [] 4) -> #f", "(member [2 7] 8) -> #f", "(member [2 8 4 4 9] 5) -> #f", "(member [8 1 9 0] 5) -> #f", "(member [4] 0) -> #f", "(member [8 4 6] 0) -> #f", "(member [5 3 9] 2) -> #f", "(member [3 2 3 6] 5) -> #f", "(member [8] 6) -> #f", "(member [3] 7) -> #f", "(member [4 2 0] 4) -> #t", "(member [1 1 9 9 2] 5) -> #f", "(member [] 5) -> #f", "(member [4] 3) -> #f", "(member [6 7 5 6] 7) -> #t", "(member [] 1) -> #f", "(member [9 2] 6) -> #f", "(member [] 3) -> #f", "(member [3] 6) -> #f", "(member [7 9 0 6] 7) -> #t", "(member [6 1 0] 8) -> #f", "(member [3 0 0 4 9] 6) -> #f", "(member [] 9) -> #f", "(member [2 5 8 3] 5) -> #t", "(member [8 5 2 8 1] 3) -> #f", "(member [] 0) -> #f", "(member [1 9 9 2 2] 8) -> #f", "(member [7 1 0 3] 0) -> #t", "(member [] 0) -> #f", "(member [1] 5) -> #f", "(member [6] 5) -> #f", "(member [] 9) -> #f", "(member [6 2 1 8 3] 4) -> #f", "(member [4 2] 1) -> #f", "(member [0 7 0] 7) -> #t", "(member [] 1) -> #f", "(member [4 7] 2) -> #f"]}
{"time": 1.364632, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (= e (!= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 3) -> #f", "(member [0 9 0 6 2] 9) -> #t", "(member [] 5) -> #f", "(member [6 5 4 9] 7) -> #f", "(member [1 5 8] 9) -> #f", "(member [0 4] 6) -> #f", "(member [] 9) -> #f", "(member [] 0) -> #f", "(member [5 7 3] 9) -> #f", "(member [9 7 9 9 8] 8) -> #t", "(member [] 8) -> #f", "(member [6 4 2] 8) -> #f", "(member [5] 4) -> #f", "(member [8 8 3 2] 3) -> #t", "(member [9 8 5 3] 2) -> #f", "(member [1 4 0 9 5] 1) -> #t", "(member [6 3 6] 1) -> #f", "(member [0] 4) -> #f", "(member [6] 1) -> #f", "(member [7 6 1 3 0] 1) -> #t", "(member [1 7 6] 4) -> #f", "(member [0] 1) -> #f", "(member [8 0 2 4 5] 6) -> #f", "(member [8 6 1 2] 2) -> #t", "(member [4 1 5 5] 7) -> #f", "(member [4 5] 6) -> #f", "(member [8 9 8 0 5] 7) -> #f", "(member [] 4) -> #f", "(member [3 7 7 4] 5) -> #f", "(member [0 7 1 6 6] 2) -> #f", "(member [3 4] 0) -> #f", "(member [3] 4) -> #f", "(member [3] 1) -> #f", "(member [8 9 4 2 7] 5) -> #f", "(member [3 0] 7) -> #f", "(member [5 7 3 3] 6) -> #f", "(member [4] 0) -> #f", "(member [2 7 0 2] 4) -> #f", "(member [1 8 7] 7) -> #t", "(member [3 1] 0) -> #f", "(member [2 4 7 6 9] 3) -> #f", "(member [1] 7) -> #f", "(member [] 6) -> #f", "(member [] 3) -> #f", "(member [8 0] 8) -> #t", "(member [1 6 3 4] 4) -> #t", "(member [4 1 7] 1) -> #t", "(member [4 7 4 5 9] 7) -> #t", "(member [7 6 1 2 4] 4) -> #t", "(member [1 2] 8) -> #f", "(member [6] 8) -> #f", "(member [2] 4) -> #f", "(member [1] 4) -> #f", "(member [0 8 7 9] 4) -> #f", "(member [4] 3) -> #f", "(member [0 7 6 6] 4) -> #f", "(member [9] 9) -> #t", "(member [6 1 3 4] 6) -> #t", "(member [0 6] 2) -> #f", "(member [0] 9) -> #f", "(member [1 6 8 5 5] 7) -> #f", "(member [5 6 8 1] 5) -> #t", "(member [1 5 8 7] 2) -> #f", "(member [5 8 7] 9) -> #f", "(member [] 4) -> #f", "(member [9 8 6] 9) -> #t", "(member [6 0 7] 8) -> #f", "(member [6 2 7] 3) -> #f", "(member [5] 7) -> #f", "(member [2 8] 6) -> #f", "(member [] 4) -> #f", "(member [4 4] 8) -> #f", "(member [] 5) -> #f", "(member [5] 3) -> #f", "(member [] 7) -> #f", "(member [5 1 3] 6) -> #f", "(member [5 1] 0) -> #f", "(member [6] 0) -> #f", "(member [5 4 1 4 2] 3) -> #f", "(member [7 9 3] 3) -> #t", "(member [6] 5) -> #f", "(member [] 6) -> #f", "(member [8 7 2] 7) -> #t", "(member [] 0) -> #f", "(member [0 3 0 1] 4) -> #f", "(member [8 4] 3) -> #f", "(member [7 2] 9) -> #f", "(member [1 8 5 4 6] 4) -> #t", "(member [5 6 3] 1) -> #f", "(member [7] 6) -> #f", "(member [] 9) -> #f", "(member [9 0] 3) -> #f"]}
{"time": 0.915975, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 3) -> #f", "(member [] 0) -> #f", "(member [4 8 7 3] 9) -> #f", "(member [] 4) -> #f", "(member [4 4] 8) -> #f", "(member [] 0) -> #f", "(member [3 4 7 6 8] 4) -> #t", "(member [1 4 1] 3) -> #f", "(member [] 1) -> #f", "(member [9 3 0 8] 1) -> #f", "(member [1] 1) -> #t", "(member [5 9] 9) -> #t", "(member [5 3 5] 4) -> #f", "(member [9 5 5 1] 5) -> #t", "(member [5 7 3 5 2] 0) -> #f", "(member [8 0 3 2] 9) -> #f", "(member [4 3 2 5 4] 6) -> #f", "(member [] 0) -> #f", "(member [] 3) -> #f", "(member [5 1] 8) -> #f", "(member [9 8 5] 4) -> #f", "(member [5] 5) -> #t", "(member [7 7 3] 8) -> #f", "(member [8 7 9] 7) -> #t", "(member [] 4) -> #f", "(member [3 5] 6) -> #f", "(member [6 4 2 4 9] 2) -> #t", "(member [7 9 9] 3) -> #f", "(member [3 4 6 9] 3) -> #t", "(member [0 3 9 0] 5) -> #f", "(member [5] 2) -> #f", "(member [4 5 0 2] 5) -> #t", "(member [4 4] 7) -> #f", "(member [0 6 3 2] 0) -> #t", "(member [2 2 1 7] 1) -> #t", "(member [5 8 8] 8) -> #t", "(member [] 9) -> #f", "(member [7 4 0 0] 0) -> #t", "(member [0 1 6 3] 1) -> #t", "(member [5 9 1 1 9] 6) -> #f", "(member [2 4] 3) -> #f", "(member [2 5] 9) -> #f", "(member [] 1) -> #f", "(member [3 2 2 5 5] 2) -> #t", "(member [6 4 6 7] 0) -> #f", "(member [3 4 0 6 0] 7) -> #f", "(member [] 6) -> #f", "(member [0 3 2 2 7] 3) -> #t", "(member [] 7) -> #f", "(member [0 6 7 7] 5) -> #f", "(member [6 8 7] 9) -> #f", "(member [4 1 4] 8) -> #f", "(member [7 1 9 9 5] 9) -> #t", "(member [8 4 4] 6) -> #f", "(member [9 1 4] 6) -> #f", "(member [] 0) -> #f", "(member [0 3 2 3] 2) -> #t", "(member [] 7) -> #f", "(member [] 0) -> #f", "(member [] 5) -> #f", "(member [2 6 9 3 6] 1) -> #f", "(member [6 3 0 0] 8) -> #f", "(member [4 3 7 5] 8) -> #f", "(member [4] 4) -> #t", "(member [8 7] 2) -> #f", "(member [3 9] 4) -> #f", "(member [1 4 9 9] 2) -> #f", "(member [3 6 9 3] 9) -> #t", "(member [3 1 0 7] 0) -> #t", "(member [] 8) -> #f", "(member [5 2 4 7] 8) -> #f", "(member [7 0 6 3] 3) -> #t", "(member [8 2] 9) -> #f", "(member [2] 1) -> #f", "(member [8 2] 3) -> #f", "(member [6 3 6 6 6] 0) -> #f", "(member [9 2] 5) -> #f", "(member [9 9 5] 2) -> #f", "(member [] 4) -> #f", "(member [9 2 2 1] 1) -> #t", "(member [6 3 4 9 6] 2) -> #f", "(member [1 0 2] 0) -> #t", "(member [1 6] 7) -> #f", "(member [0] 9) -> #f", "(member [4 8 6 2] 1) -> #f", "(member [4 7] 8) -> #f", "(member [8 2] 2) -> #t", "(member [9 0 9 5 5] 8) -> #f", "(member [2 9 2 6 9] 7) -> #f", "(member [5] 1) -> #f", "(member [2] 2) -> #t", "(member [] 1) -> #f"]}
{"time": 1.448951, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 7) -> #f", "(member [8 7 9 8 7] 6) -> #f", "(member [8 7 4] 5) -> #f", "(member [4] 2) -> #f", "(member [] 3) -> #f", "(member [3] 2) -> #f", "(member [6] 5) -> #f", "(member [2 1 9 4 0] 4) -> #t", "(member [7 5] 5) -> #t", "(member [0 4] 0) -> #t", "(member [1 4] 3) -> #f", "(member [2 7 4] 2) -> #t", "(member [2 7] 3) -> #f", "(member [2 2 6 7 9] 0) -> #f", "(member [2 8 6] 0) -> #f", "(member [1 1 0 9] 3) -> #f", "(member [9 6 8 0 6] 9) -> #t", "(member [] 2) -> #f", "(member [9] 0) -> #f", "(member [3] 5) -> #f", "(member [4 9 3] 9) -> #t", "(member [1 5 6] 1) -> #t", "(member [7 4 8] 0) -> #f", "(member [] 8) -> #f", "(member [3] 6) -> #f", "(member [3] 7) -> #f", "(member [4 6 5 0] 5) -> #t", "(member [3 1] 0) -> #f", "(member [] 5) -> #f", "(member [8] 0) -> #f", "(member [2 8] 8) -> #t", "(member [3 9 9 3 7] 1) -> #f", "(member [3] 2) -> #f", "(member [] 9) -> #f", "(member [3 0 8] 2) -> #f", "(member [5 0 8] 2) -> #f", "(member [] 8) -> #f", "(member [2 5 3 6 8] 2) -> #t", "(member [4 8 5] 3) -> #f", "(member [7 1 6 5 7] 1) -> #t", "(member [8 1 6 1] 2) -> #f", "(member [9 0 8 5] 6) -> #f", "(member [0 5 5 2 9] 7) -> #f", "(member [3] 0) -> #f", "(member [2 3 9] 6) -> #f", "(member [7 9 1] 1) -> #t", "(member [9] 2) -> #f", "(member [2 4 9 3] 5) -> #f", "(member [1] 2) -> #f", "(member [0 5] 1) -> #f", "(member [5 5 4 8] 1) -> #f", "(member [4 8 9 0 5] 8) -> #t", "(member [7 6 0 1 4] 7) -> #t", "(member [9 7 2] 8) -> #f", "(member [] 9) -> #f", "(member [7] 7) -> #t", "(member [] 0) -> #f", "(member [7 2] 8) -> #f", "(member [3 8 1] 7) -> #f", "(member [9 7 1 6] 0) -> #f", "(member [6 2 3 2 1] 3) -> #t", "(member [0 9] 7) -> #f", "(member [] 4) -> #f", "(member [5 1 6 9] 2) -> #f", "(member [8 1 0 0] 6) -> #f", "(member [6 5 1] 1) -> #t", "(member [8 5] 4) -> #f", "(member [] 6) -> #f", "(member [5] 8) -> #f", "(member [3 8] 6) -> #f", "(member [] 7) -> #f", "(member [3 9] 4) -> #f", "(member [6 0 6 0] 4) -> #f", "(member [8 7 1 4 2] 8) -> #t", "(member [8 6 2 1] 8) -> #t", "(member [4 1 5 6 5] 7) -> #f", "(member [7 7] 9) -> #f", "(member [9] 3) -> #f", "(member [2 0] 4) -> #f", "(member [8 4] 4) -> #t", "(member [1 8] 6) -> #f", "(member [8 8 0] 2) -> #f", "(member [3 7 3 4] 8) -> #f", "(member [6 1 5 4] 3) -> #f", "(member [9 1] 8) -> #f", "(member [2 5 2 0 7] 2) -> #t", "(member [1 0 5 5] 7) -> #f", "(member [2 3 0 9] 9) -> #t", "(member [5 0] 3) -> #f", "(member [3] 4) -> #f", "(member [1 3 8 7 8] 4) -> #f", "(member [5 0 7] 7) -> #t"]}
{"time": 1.170931, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 7) -> #f", "(member [8 0] 6) -> #f", "(member [2 2 9 9 9] 2) -> #t", "(member [0 6 4 3] 5) -> #f", "(member [3 9 7 7] 7) -> #t", "(member [2 4 6] 3) -> #f", "(member [2 0] 0) -> #t", "(member [4 6 8 0] 1) -> #f", "(member [3 7 6 7 8] 6) -> #t", "(member [7] 0) -> #f", "(member [0 4 8] 0) -> #t", "(member [3] 6) -> #f", "(member [5 8 9] 1) -> #f", "(member [] 6) -> #f", "(member [] 4) -> #f", "(member [0 8] 5) -> #f", "(member [8] 3) -> #f", "(member [2 1 3] 1) -> #t", "(member [0] 8) -> #f", "(member [] 1) -> #f", "(member [] 1) -> #f", "(member [4 0 2] 0) -> #t", "(member [5 5 1 6] 8) -> #f", "(member [3] 0) -> #f", "(member [3 2 5 7 5] 6) -> #f", "(member [3] 0) -> #f", "(member [] 4) -> #f", "(member [4 7 4 8] 3) -> #f", "(member [] 0) -> #f", "(member [8 7] 1) -> #f", "(member [9 0 0 7] 8) -> #f", "(member [0] 5) -> #f", "(member [3 3 8] 2) -> #f", "(member [3] 4) -> #f", "(member [9] 8) -> #f", "(member [0 9 8 8] 9) -> #t", "(member [2 3] 2) -> #t", "(member [3 9 2] 4) -> #f", "(member [9 8 1 0 4] 6) -> #f", "(member [2 5 0 7 3] 7) -> #t", "(member [6 8] 1) -> #f", "(member [3 5] 6) -> #f", "(member [2 2 8 6 3] 2) -> #t", "(member [5 8 2 3] 6) -> #f", "(member [2 3 4] 1) -> #f", "(member [] 6) -> #f", "(member [8 5] 2) -> #f", "(member [2 6 8] 4) -> #f", "(member [5 0 1 5] 1) -> #t", "(member [6 8 7 1 6] 6) -> #t", "(member [4 2] 2) -> #t", "(member [4 1] 1) -> #t", "(member [] 3) -> #f", "(member [3 7] 1) -> #f", "(member [5 2 7 7 5] 6) -> #f", "(member [9 6] 3) -> #f", "(member [3] 3) -> #t", "(member [3 3] 0) -> #f", "(member [7 9 2 1 0] 5) -> #f", "(member [] 4) -> #f", "(member [9 3] 3) -> #t", "(member [6 3 6] 0) -> #f", "(member [9 0 5 3 5] 0) -> #t", "(member [8 5] 2) -> #f", "(member [1 1 5] 3) -> #f", "(member [1 6 3] 3) -> #t", "(member [2] 1) -> #f", "(member [4 3 9 9] 4) -> #t", "(member [2 3 8 2 7] 4) -> #f", "(member [5 8 5 1] 4) -> #f", "(member [4 8 4 8] 0) -> #f", "(member [9] 0) -> #f", "(member [2] 9) -> #f", "(member [4 1] 7) -> #f", "(member [0] 9) -> #f", "(member [1 0 0 2 1] 0) -> #t", "(member [9 1 4] 5) -> #f", "(member [5 4] 3) -> #f", "(member [9 2 7 5] 9) -> #t", "(member [2 6 0 4] 1) -> #f", "(member [2 0] 9) -> #f", "(member [5 8 4 1 2] 4) -> #t", "(member [1 8 7 4 0] 0) -> #t", "(member [1 4] 6) -> #f", "(member [5 1] 4) -> #f", "(member [5 2 7 0] 3) -> #f", "(member [3 0 1] 8) -> #f", "(member [] 3) -> #f", "(member [3] 1) -> #f", "(member [9 7 2 1 1] 9) -> #t", "(member [0 3 4 6] 6) -> #t", "(member [8 9 3] 5) -> #f"]}
{"time": 1.121726, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 4) -> #f", "(member [6 6] 3) -> #f", "(member [] 0) -> #f", "(member [3 7 4] 3) -> #t", "(member [] 8) -> #f", "(member [9 5 9 9] 1) -> #f", "(member [4 7 6] 9) -> #f", "(member [1 7 1] 1) -> #t", "(member [7 8 4 7 6] 7) -> #t", "(member [7 1 7] 1) -> #t", "(member [9 0 8 6] 2) -> #f", "(member [0 2] 4) -> #f", "(member [4 7 7 8 2] 0) -> #f", "(member [7 6 7 6 1] 6) -> #t", "(member [4 7 4] 0) -> #f", "(member [9 3 8 4] 8) -> #t", "(member [4 3 1 3 0] 1) -> #t", "(member [3 6] 6) -> #t", "(member [4] 0) -> #f", "(member [5 0 8] 1) -> #f", "(member [1 8 0] 0) -> #t", "(member [6 9 0] 4) -> #f", "(member [0 4 8 8 1] 3) -> #f", "(member [5 9] 3) -> #f", "(member [1 7 3 7 9] 8) -> #f", "(member [9 8 7] 2) -> #f", "(member [2 1] 9) -> #f", "(member [5 2 5 3] 3) -> #t", "(member [9 2] 4) -> #f", "(member [8] 3) -> #f", "(member [2 9 9 9 3] 7) -> #f", "(member [3 8 6 1 6] 6) -> #t", "(member [] 8) -> #f", "(member [4] 5) -> #f", "(member [] 4) -> #f", "(member [9 8 7] 5) -> #f", "(member [1 7 1] 5) -> #f", "(member [8 9] 4) -> #f", "(member [4] 7) -> #f", "(member [] 3) -> #f", "(member [7 8] 2) -> #f", "(member [3 4 7] 5) -> #f", "(member [7 1 5 6 1] 0) -> #f", "(member [] 4) -> #f", "(member [7] 1) -> #f", "(member [2] 0) -> #f", "(member [4] 9) -> #f", "(member [] 4) -> #f", "(member [] 7) -> #f", "(member [4 6 6] 0) -> #f", "(member [2 3 9 1 9] 6) -> #f", "(member [2] 6) -> #f", "(member [3 6 1] 9) -> #f", "(member [1 0 6 1] 4) -> #f", "(member [2 4 6] 6) -> #t", "(member [4 2 7 9 6] 1) -> #f", "(member [9 4 0] 2) -> #f", "(member [7 9 6] 7) -> #t", "(member [2 6 6 9 9] 5) -> #f", "(member [5 4 1 0] 8) -> #f", "(member [3 7 6] 5) -> #f", "(member [] 5) -> #f", "(member [0 0 9 8] 1) -> #f", "(member [] 3) -> #f", "(member [0 4 4] 8) -> #f", "(member [7 3] 0) -> #f", "(member [9 8 1 6 6] 5) -> #f", "(member [3 7 2] 8) -> #f", "(member [1 6] 8) -> #f", "(member [4 7 5] 6) -> #f", "(member [3 4] 3) -> #t", "(member [8 8 5] 0) -> #f", "(member [5] 5) -> #t", "(member [5 7 4 0 0] 4) -> #t", "(member [0 6] 3) -> #f", "(member [6] 9) -> #f", "(member [] 7) -> #f", "(member [5] 5) -> #t", "(member [2 3] 1) -> #f", "(member [] 2) -> #f", "(member [0 0] 7) -> #f", "(member [3 4 5 2] 4) -> #t", "(member [1 7 2] 7) -> #t", "(member [5] 4) -> #f", "(member [2 8 7 9 0] 4) -> #f", "(member [9 3 2 0] 1) -> #f", "(member [] 9) -> #f", "(member [6 5 3] 2) -> #f", "(member [1] 2) -> #f", "(member [4] 4) -> #t", "(member [1] 5) -> #f", "(member [1 1 0 3] 6) -> #f"]}
{"time": 0.706226, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 3) -> #f", "(member [5 7] 9) -> #f", "(member [] 5) -> #f", "(member [] 1) -> #f", "(member [7 5] 5) -> #t", "(member [2 3] 2) -> #t", "(member [] 8) -> #f", "(member [1] 0) -> #f", "(member [] 4) -> #f", "(member [6] 6) -> #t", "(member [8 5 7 2 4] 0) -> #f", "(member [3 9 8 2 2] 2) -> #t", "(member [7] 5) -> #f", "(member [0 5 8 4 0] 7) -> #f", "(member [8 6 0 0] 7) -> #f", "(member [0 9 5 6 0] 9) -> #t", "(member [] 8) -> #f", "(member [4 2 5 1] 5) -> #t", "(member [4] 3) -> #f", "(member [] 7) -> #f", "(member [4 0 2 4 4] 6) -> #f", "(member [] 6) -> #f", "(member [7 6 8 1] 8) -> #t", "(member [4 8] 5) -> #f", "(member [2 0 8 2] 7) -> #f", "(member [0 1] 4) -> #f", "(member [5 7 9] 1) -> #f", "(member [2 0 3 7 3] 8) -> #f", "(member [] 0) -> #f", "(member [6 2 5 2 9] 4) -> #f", "(member [7] 1) -> #f", "(member [] 0) -> #f", "(member [3 9 0] 2) -> #f", "(member [] 2) -> #f", "(member [2] 2) -> #t", "(member [9 7] 6) -> #f", "(member [3] 7) -> #f", "(member [4 6] 2) -> #f", "(member [6 4 6] 7) -> #f", "(member [4 0 9] 8) -> #f", "(member [6] 6) -> #t", "(member [] 8) -> #f", "(member [4 5 6] 0) -> #f", "(member [] 6) -> #f", "(member [3 5 0 5 1] 4) -> #f", "(member [7] 4) -> #f", "(member [0 3] 1) -> #f", "(member [2 2 0 9 0] 3) -> #f", "(member [9 3 3 0 1] 7) -> #f", "(member [] 2) -> #f", "(member [4 4 1] 3) -> #f", "(member [8 0 9] 5) -> #f", "(member [5 0 5] 0) -> #t", "(member [4 2 3] 0) -> #f", "(member [4 9 5 9] 0) -> #f", "(member [5 0 5] 2) -> #f", "(member [7 8 8] 8) -> #t", "(member [8 5 2 0] 9) -> #f", "(member [2 6 8 3 7] 1) -> #f", "(member [7] 5) -> #f", "(member [9 8 2 1 6] 1) -> #t", "(member [] 0) -> #f", "(member [3 2 9 6] 9) -> #t", "(member [0 4] 7) -> #f", "(member [4] 0) -> #f", "(member [8 6 9 1] 6) -> #t", "(member [9 1] 2) -> #f", "(member [8 6 6] 0) -> #f", "(member [] 7) -> #f", "(member [1 6 1 9] 5) -> #f", "(member [8 0 7 4 9] 6) -> #f", "(member [7 7 3 2 5] 3) -> #t", "(member [4 1 4 4] 2) -> #f", "(member [1 2] 7) -> #f", "(member [] 2) -> #f", "(member [2 9 6 9 9] 2) -> #t", "(member [] 0) -> #f", "(member [0 3 3] 8) -> #f", "(member [4 3 1] 0) -> #f", "(member [] 5) -> #f", "(member [8 4 5 6 7] 2) -> #f", "(member [3 0 1] 4) -> #f", "(member [0 9] 5) -> #f", "(member [5 5 1] 0) -> #f", "(member [9 5 0 2 6] 7) -> #f", "(member [5 2] 6) -> #f", "(member [] 9) -> #f", "(member [4 2 9 2] 2) -> #t", "(member [4 0 3 9] 9) -> #t", "(member [2 1] 7) -> #f", "(member [4 0 2 1 6] 1) -> #t", "(member [] 6) -> #f"]}
{"time": 1.219529, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 1) -> #f", "(member [2 1 7] 5) -> #f", "(member [8 0 4] 8) -> #t", "(member [] 2) -> #f", "(member [5 5 6] 0) -> #f", "(member [] 5) -> #f", "(member [2 4] 5) -> #f", "(member [8 1 4] 3) -> #f", "(member [] 8) -> #f", "(member [0 3 0 3 3] 8) -> #f", "(member [2 5 6 1 8] 0) -> #f", "(member [] 9) -> #f", "(member [0] 2) -> #f", "(member [1 0 0] 9) -> #f", "(member [] 1) -> #f", "(member [] 6) -> #f", "(member [2 0 6] 2) -> #t", "(member [0 1 1] 8) -> #f", "(member [1 7 4 5] 3) -> #f", "(member [4 2] 0) -> #f", "(member [4] 3) -> #f", "(member [4 5 1 1 7] 4) -> #t", "(member [0 7 6 8] 4) -> #f", "(member [7 7 7 6] 0) -> #f", "(member [2] 9) -> #f", "(member [4] 9) -> #f", "(member [] 3) -> #f", "(member [3] 8) -> #f", "(member [8 9] 1) -> #f", "(member [9 4] 3) -> #f", "(member [0] 4) -> #f", "(member [] 9) -> #f", "(member [2 8 6] 7) -> #f", "(member [] 9) -> #f", "(member [4] 6) -> #f", "(member [3 8] 2) -> #f", "(member [2 5 9] 9) -> #t", "(member [6 6] 9) -> #f", "(member [] 0) -> #f", "(member [5 6] 2) -> #f", "(member [7 3] 0) -> #f", "(member [] 3) -> #f", "(member [9] 3) -> #f", "(member [7] 7) -> #t", "(member [1 9 9 7] 4) -> #f", "(member [4 7 3 9 6] 4) -> #t", "(member [0 9 3] 4) -> #f", "(member [9 9 4] 2) -> #f", "(member [8] 6) -> #f", "(member [7] 0) -> #f", "(member [7 8 9] 2) -> #f", "(member [] 5) -> #f", "(member [8 1 3 7 1] 0) -> #f", "(member [9 3 7 6 7] 8) -> #f", "(member [] 0) -> #f", "(member [] 7) -> #f", "(member [] 6) -> #f", "(member [8 5 2 7 8] 8) -> #t", "(member [6 2 3] 0) -> #f", "(member [1 3] 5) -> #f", "(member [4] 1) -> #f", "(member [9 8 3 8 9] 4) -> #f", "(member [7 5 2] 1) -> #f", "(member [0 5 4 8 0] 7) -> #f", "(member [9 9 5 9 1] 1) -> #t", "(member [] 2) -> #f", "(member [9] 8) -> #f", "(member [7] 8) -> #f", "(member [1 8 6 8] 8) -> #t", "(member [2] 8) -> #f", "(member [8 3] 7) -> #f", "(member [9 7 7] 8) -> #f", "(member [6 4 4 4] 9) -> #f", "(member [5 8 1 8] 5) -> #t", "(member [9 1 9] 7) -> #f", "(member [] 3) -> #f", "(member [5 1 0 8 0] 0) -> #t", "(member [5 8 0 6] 1) -> #f", "(member [9 0 7 1 8] 1) -> #t", "(member [5 0 4] 1) -> #f", "(member [] 5) -> #f", "(member [0 0 1 1 6] 2) -> #f", "(member [7 7 8] 8) -> #t", "(member [8 3 8 3 8] 5) -> #f", "(member [8 4 2 9 4] 7) -> #f", "(member [] 5) -> #f", "(member [3 4] 4) -> #t", "(member [] 8) -> #f", "(member [0] 8) -> #f", "(member [5 6 9 4 5] 0) -> #f", "(member [7 1 8 9 4] 4) -> #t", "(member [7 5 0] 8) -> #f"]}
{"time": 0.721454, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 6) -> #f", "(member [0] 2) -> #f", "(member [] 7) -> #f", "(member [] 6) -> #f", "(member [6 8] 3) -> #f", "(member [4] 6) -> #f", "(member [1 1 0 3 2] 5) -> #f", "(member [0 0 6 1 4] 1) -> #t", "(member [7 2] 3) -> #f", "(member [1 3 5 7] 8) -> #f", "(member [0 2 8] 5) -> #f", "(member [5] 2) -> #f", "(member [5 2 9 8] 0) -> #f", "(member [4 2 3] 2) -> #t", "(member [9 1 3 5 3] 9) -> #t", "(member [8 3 2] 4) -> #f", "(member [5 3 4 2] 0) -> #f", "(member [9 4 1] 3) -> #f", "(member [6 4 1 6] 0) -> #f", "(member [] 9) -> #f", "(member [3] 7) -> #f", "(member [4 8 9 2 0] 7) -> #f", "(member [5 9 8 5] 1) -> #f", "(member [9] 1) -> #f", "(member [4 3 1] 9) -> #f", "(member [2] 5) -> #f", "(member [2 8 4 0 8] 8) -> #t", "(member [] 1) -> #f", "(member [8 2 6] 0) -> #f", "(member [0 4] 0) -> #t", "(member [0 8 1 2 9] 3) -> #f", "(member [2 4] 2) -> #t", "(member [3 8 3 4] 9) -> #f", "(member [4 1 7 9] 8) -> #f", "(member [] 0) -> #f", "(member [6 9] 3) -> #f", "(member [] 7) -> #f", "(member [1 7 3 2] 6) -> #f", "(member [5 8] 7) -> #f", "(member [4] 8) -> #f", "(member [] 7) -> #f", "(member [5] 1) -> #f", "(member [9] 9) -> #t", "(member [5 0 1 4 1] 4) -> #t", "(member [0 8 5] 4) -> #f", "(member [5 9 3 9] 8) -> #f", "(member [7 6 5] 1) -> #f", "(member [9 1 6 3 1] 0) -> #f", "(member [0 6 6] 3) -> #f", "(member [4 7] 1) -> #f", "(member [7 3] 4) -> #f", "(member [5] 9) -> #f", "(member [7] 0) -> #f", "(member [5 0 7 2] 7) -> #t", "(member [6 2 1 1 0] 6) -> #t", "(member [] 5) -> #f", "(member [8 3 9] 3) -> #t", "(member [3 9 4 2 1] 1) -> #t", "(member [1 4 5 9 2] 0) -> #f", "(member [3 7] 3) -> #t", "(member [0 4 4 4] 4) -> #t", "(member [1 9 9 5 0] 3) -> #f", "(member [0] 1) -> #f", "(member [7 8] 8) -> #t", "(member [0 7 5 5] 5) -> #t", "(member [9 4 8 6] 2) -> #f", "(member [6] 3) -> #f", "(member [] 6) -> #f", "(member [] 0) -> #f", "(member [0 1] 9) -> #f", "(member [0 4 0 2] 0) -> #t", "(member [0 7 0 7 8] 6) -> #f", "(member [1] 3) -> #f", "(member [5] 5) -> #t", "(member [0 8 8] 0) -> #t", "(member [7 5 3 4 4] 3) -> #t", "(member [] 4) -> #f", "(member [6 7 0] 2) -> #f", "(member [0 6 0 0 8] 7) -> #f", "(member [8 9 6 1 9] 7) -> #f", "(member [9 6 8] 9) -> #t", "(member [] 9) -> #f", "(member [] 3) -> #f", "(member [] 1) -> #f", "(member [5 0] 2) -> #f", "(member [1 7 7] 1) -> #t", "(member [1 3 6 9 8] 9) -> #t", "(member [2 2 8 7] 0) -> #f", "(member [0] 1) -> #f", "(member [6 4 7 3] 2) -> #f", "(member [9 9 4 8] 3) -> #f", "(member [9 1 9 0] 6) -> #f"]}
{"time": 0.473348, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 9) -> #f", "(member [9 6] 8) -> #f", "(member [5 3 8 8] 1) -> #f", "(member [8 2 2 5] 4) -> #f", "(member [0] 4) -> #f", "(member [1 4 7] 4) -> #t", "(member [] 2) -> #f", "(member [3 1 9 5] 3) -> #t", "(member [8 6 5 2] 1) -> #f", "(member [] 7) -> #f", "(member [1] 9) -> #f", "(member [9] 8) -> #f", "(member [0 3 6] 2) -> #f", "(member [1 6] 6) -> #t", "(member [7] 8) -> #f", "(member [2 8 4] 2) -> #t", "(member [] 7) -> #f", "(member [] 9) -> #f", "(member [9 5 1 9 6] 5) -> #t", "(member [0] 3) -> #f", "(member [2 6 3] 5) -> #f", "(member [6 0] 2) -> #f", "(member [1 4 2 2 4] 7) -> #f", "(member [7] 4) -> #f", "(member [1 7 9 0] 6) -> #f", "(member [] 2) -> #f", "(member [1] 6) -> #f", "(member [3 9 1] 5) -> #f", "(member [2 0 7 2 9] 9) -> #t", "(member [4 9] 8) -> #f", "(member [3 9 4 1 2] 9) -> #t", "(member [6 6 8] 9) -> #f", "(member [5 7 8] 1) -> #f", "(member [3 8 2 1] 5) -> #f", "(member [4 4 0] 7) -> #f", "(member [8 5 2] 2) -> #t", "(member [0 8 8 6] 9) -> #f", "(member [9 0 1 9] 8) -> #f", "(member [4 7 9] 6) -> #f", "(member [5] 8) -> #f", "(member [7 2 6] 9) -> #f", "(member [] 5) -> #f", "(member [0 9 4 4] 1) -> #f", "(member [7] 7) -> #t", "(member [9] 2) -> #f", "(member [4 9] 3) -> #f", "(member [6] 4) -> #f", "(member [8 4 9 4] 3) -> #f", "(member [9] 3) -> #f", "(member [] 5) -> #f", "(member [9 7 8] 7) -> #t", "(member [1 4 4 5] 0) -> #f", "(member [8 6] 8) -> #t", "(member [2 8 8 6] 1) -> #f", "(member [2 1 1 1 4] 1) -> #t", "(member [2 9 5 5] 9) -> #t", "(member [5 5 8 8 8] 7) -> #f", "(member [7 3] 1) -> #f", "(member [2] 9) -> #f", "(member [7 7 8 0] 3) -> #f", "(member [9 6 1] 6) -> #t", "(member [6 8 0] 4) -> #f", "(member [] 6) -> #f", "(member [6 0] 1) -> #f", "(member [1 7] 9) -> #f", "(member [1 5 1] 9) -> #f", "(member [] 7) -> #f", "(member [3 2 3 8 5] 3) -> #t", "(member [4 1 3 8] 1) -> #t", "(member [7 4 3 6 9] 1) -> #f", "(member [3] 9) -> #f", "(member [] 0) -> #f", "(member [4 4 2 5] 8) -> #f", "(member [1] 5) -> #f", "(member [] 7) -> #f", "(member [] 6) -> #f", "(member [] 5) -> #f", "(member [2 1 1] 3) -> #f", "(member [1 4] 6) -> #f", "(member [5 3 4 9 4] 6) -> #f", "(member [1 7 7 6 6] 5) -> #f", "(member [] 8) -> #f", "(member [3 0 7] 1) -> #f", "(member [0] 6) -> #f", "(member [7] 9) -> #f", "(member [4 6 9 2] 7) -> #f", "(member [9 4 0 4 9] 8) -> #f", "(member [4 6 4 7] 8) -> #f", "(member [] 9) -> #f", "(member [8] 5) -> #f", "(member [9 7 4 0] 4) -> #t", "(member [5 6 2] 3) -> #f"]}
{"time": 0.450079, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 6) -> #f", "(member [1] 0) -> #f", "(member [9 3 6 7 9] 0) -> #f", "(member [0 0 3 0] 6) -> #f", "(member [0 8 3 7 0] 2) -> #f", "(member [7 2 5] 2) -> #t", "(member [0 1 8] 6) -> #f", "(member [6 7 7 8 7] 1) -> #f", "(member [3 1 8 4] 7) -> #f", "(member [5 0] 4) -> #f", "(member [2] 9) -> #f", "(member [7 6 0] 2) -> #f", "(member [1 0] 8) -> #f", "(member [] 2) -> #f", "(member [4] 8) -> #f", "(member [] 7) -> #f", "(member [] 9) -> #f", "(member [1 4 9] 0) -> #f", "(member [7] 2) -> #f", "(member [] 4) -> #f", "(member [] 7) -> #f", "(member [9 4 1] 2) -> #f", "(member [9] 3) -> #f", "(member [7 9 2 8 9] 6) -> #f", "(member [7 4 5 4] 6) -> #f", "(member [] 6) -> #f", "(member [7 6 4 1] 5) -> #f", "(member [3 5 3 4] 6) -> #f", "(member [9 5 9 8 0] 7) -> #f", "(member [1 1 4] 9) -> #f", "(member [0 0 8 1 4] 2) -> #f", "(member [2 2 9 6] 4) -> #f", "(member [4] 8) -> #f", "(member [7 2 5 1] 8) -> #f", "(member [0 7] 5) -> #f", "(member [7 4] 2) -> #f", "(member [1] 6) -> #f", "(member [1 2] 4) -> #f", "(member [1 3 4 8] 8) -> #t", "(member [3 5] 9) -> #f", "(member [] 9) -> #f", "(member [] 0) -> #f", "(member [6 9] 4) -> #f", "(member [5 1] 8) -> #f", "(member [8 8 8] 5) -> #f", "(member [] 5) -> #f", "(member [6 1 1 6] 8) -> #f", "(member [4 5 4 1 0] 5) -> #t", "(member [4 2 3 3] 8) -> #f", "(member [3] 7) -> #f", "(member [7 6 4 1] 8) -> #f", "(member [8] 9) -> #f", "(member [6 8] 6) -> #t", "(member [5 5 5 8 3] 8) -> #t", "(member [0 6] 6) -> #t", "(member [7 7 1] 9) -> #f", "(member [8 0] 6) -> #f", "(member [3 5] 2) -> #f", "(member [] 4) -> #f", "(member [7 0 4 1 9] 4) -> #t", "(member [4 0] 7) -> #f", "(member [5 8 1 4] 6) -> #f", "(member [6] 3) -> #f", "(member [5] 9) -> #f", "(member [9 6 0 4] 2) -> #f", "(member [3 9] 6) -> #f", "(member [0 9 0 7 7] 9) -> #t", "(member [4 0 2 1 6] 5) -> #f", "(member [3] 1) -> #f", "(member [9 9] 6) -> #f", "(member [9 9] 4) -> #f", "(member [5 5 9 2] 8) -> #f", "(member [] 7) -> #f", "(member [2] 6) -> #f", "(member [2] 8) -> #f", "(member [7 8] 9) -> #f", "(member [2] 1) -> #f", "(member [2 4 8 5] 0) -> #f", "(member [3 5] 1) -> #f", "(member [9 3 5 6 6] 8) -> #f", "(member [3 9 9] 3) -> #t", "(member [9 4 1 9 5] 0) -> #f", "(member [1 7] 3) -> #f", "(member [7 1 4 1] 1) -> #t", "(member [] 1) -> #f", "(member [] 3) -> #f", "(member [8 5] 2) -> #f", "(member [6 9] 1) -> #f", "(member [] 5) -> #f", "(member [3 5 6 8] 7) -> #f", "(member [5 4] 4) -> #t", "(member [8 3 5 8 5] 3) -> #t"]}
{"time": 0.47957, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)", "name": "member", "examples": ["(member [] 2) -> #f", "(member [] 8) -> #f", "(member [6 7 2 0 8] 6) -> #t", "(member [1] 3) -> #f", "(member [8 9 4 1 8] 6) -> #f", "(member [9 0 2 7 4] 1) -> #f", "(member [9 1 0 0] 7) -> #f", "(member [4 6] 7) -> #f", "(member [8 9 4 3 6] 4) -> #t", "(member [8 5 3 9] 2) -> #f", "(member [5 2 4] 4) -> #t", "(member [8 0 6 4] 2) -> #f", "(member [6 7 4] 7) -> #t", "(member [2 9] 5) -> #f", "(member [1 3 8 1] 4) -> #f", "(member [4 2 1 0 6] 2) -> #t", "(member [3 4 2 8] 4) -> #t", "(member [1 4 4] 4) -> #t", "(member [5 6 2 8] 8) -> #t", "(member [1 0 4] 8) -> #f", "(member [1] 8) -> #f", "(member [9 2 3] 5) -> #f", "(member [] 0) -> #f", "(member [3] 2) -> #f", "(member [8 1 5 3] 6) -> #f", "(member [] 8) -> #f", "(member [7 6 4 3] 5) -> #f", "(member [1 3 4] 1) -> #t", "(member [8 7] 6) -> #f", "(member [0 1 2 8 9] 6) -> #f", "(member [0 1 1 1 7] 6) -> #f", "(member [4 1 0] 3) -> #f", "(member [1 7] 1) -> #t", "(member [2 1 9 7] 3) -> #f", "(member [8 5] 2) -> #f", "(member [1 6 6 6 4] 1) -> #t", "(member [5] 8) -> #f", "(member [5 2] 4) -> #f", "(member [] 4) -> #f", "(member [] 7) -> #f", "(member [1] 5) -> #f", "(member [1 1 7 0] 8) -> #f", "(member [4 5 2 8] 4) -> #t", "(member [9 2] 5) -> #f", "(member [1 7] 8) -> #f", "(member [7] 4) -> #f", "(member [7] 5) -> #f", "(member [7 5] 1) -> #f", "(member [] 3) -> #f", "(member [5 7 6] 2) -> #f", "(member [0 7 1 7] 9) -> #f", "(member [4] 8) -> #f", "(member [] 8) -> #f", "(member [6 8] 4) -> #f", "(member [] 0) -> #f", "(member [7 1 3 4 9] 4) -> #t", "(member [] 3) -> #f", "(member [4 5 6 3] 7) -> #f", "(member [9] 8) -> #f", "(member [3] 8) -> #f", "(member [4 6 5 6 4] 3) -> #f", "(member [1] 7) -> #f", "(member [] 8) -> #f", "(member [] 3) -> #f", "(member [1] 5) -> #f", "(member [5] 1) -> #f", "(member [2 3 7 4] 8) -> #f", "(member [5 2 6 5 1] 1) -> #t", "(member [] 8) -> #f", "(member [2 1] 6) -> #f", "(member [5 1 2] 8) -> #f", "(member [] 7) -> #f", "(member [3] 4) -> #f", "(member [3] 7) -> #f", "(member [] 2) -> #f", "(member [8 4 3 1] 7) -> #f", "(member [0 4 0 2] 0) -> #t", "(member [8 1 5] 9) -> #f", "(member [0 2 7 7] 2) -> #t", "(member [8 2 3 2] 8) -> #t", "(member [9 0 2 0] 1) -> #f", "(member [1 9 4 3 2] 7) -> #f", "(member [9] 2) -> #f", "(member [5 1 7] 5) -> #t", "(member [3 6] 8) -> #f", "(member [] 9) -> #f", "(member [2 4 4 7] 1) -> #f", "(member [6 7 6 2] 2) -> #t", "(member [7 3 1] 5) -> #f", "(member [3 4 3 6] 0) -> #f", "(member [] 4) -> #f", "(member [8 7 8] 3) -> #f"]}
