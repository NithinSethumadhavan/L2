{"examples": ["(sums []) -> []", "(sums [[]]) -> [0]", "(sums [[0]]) -> [0]"], "time": 0.021779, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) 0))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[0 8 4]]) -> [12]"], "time": 0.255907, "name": "sums", "solution": "(let sums (let a (lambda (b) (foldl b (lambda (d c) (foldl d (lambda (f e) d) [12])) [])) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[9 5 2 7]]) -> [23]"], "time": 0.227784, "name": "sums", "solution": "(let sums (let a (lambda (b) (foldl b (lambda (d c) (foldl d (lambda (f e) d) [23])) [])) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 2 1] [3 7] [1 3 6 9]]) -> [7 10 19]", "(sums [[8 3 2] []]) -> [13 0]"], "time": 0.516722, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 1 9] [7] [2 9 9 7 6] [3 9] []]) -> [16 7 33 12 0]", "(sums []) -> []"], "time": 0.597375, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [5 8 6] [9 3 6 9]]) -> [0 19 27]", "(sums [[0 9 5 4] [0 6 7] [6 4 4 8] [3 5] []]) -> [18 13 22 8 0]"], "time": 0.502095, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 9 0 4 9] [5 7 3 2 1] [6 2 2] [2] [4 9 0 3 4]]) -> [26 18 10 2 20]", "(sums [[]]) -> [0]"], "time": 0.619747, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1 0 0] [1 9] [2 3 9 9 7] [8 2 8 8 3] [9 2]]) -> [1 10 30 29 11]", "(sums [[] [] [3] [4 7 5] [0 5 3]]) -> [0 0 3 16 8]"], "time": 0.675128, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2 7 9] [0 2 5 9 6] [] [0]]) -> [18 22 0 0]", "(sums [[0 6] [0 2 5 6 9]]) -> [6 22]"], "time": 0.677268, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [7 8 9 4 8] [6 9 5 3 5] [7] [5 3 6]]) -> [0 36 28 7 14]", "(sums [[7 1]]) -> [8]"], "time": 0.69643, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[3 2 4 0]]) -> [9]", "(sums [[4 3 8 0 2] [2 1] [8 4 8 0]]) -> [17 3 20]"], "time": 0.792158, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 1 3 9] [] [5 8 3 9] [6 5 1 5 3] [1 5 5 9 8]]) -> [21 0 25 20 28]", "(sums [[1 7] []]) -> [8 0]"], "time": 0.697585, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [5 2] [9 0] [0]]) -> [0 7 9 0]", "(sums []) -> []"], "time": 0.49262, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[8 3 8 2]]) -> [21]"], "time": 0.25303, "name": "sums", "solution": "(let sums (let a (lambda (b) (foldl b (lambda (d c) (foldl d (lambda (f e) d) [21])) [])) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 4 0 4] [7 2 0 0] [9 4 8 4] [5 2 5 0 5]]) -> [16 9 25 17]", "(sums [[0] [9 0 9] [5] [7] [0 2 6]]) -> [0 18 5 7 8]"], "time": 0.98745, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 7 0] [2 0 8 8]]) -> [15 18]", "(sums [[0 6 3 3]]) -> [12]"], "time": 1.091495, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 5 5 3 6] [7 8 4 0]]) -> [26 19]", "(sums [[6 7 6 9] [7 9 2 5 5] [9] [] []]) -> [28 28 9 0 0]"], "time": 0.431784, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[3 9 1 8 3] [2 8 6] []]) -> [24 16 0]", "(sums []) -> []"], "time": 0.563761, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[2 4 9] [1 4 0]]) -> [15 5]"], "time": 1.242113, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 1 7] [3 0]]) -> [12 3]", "(sums []) -> []"], "time": 1.210134, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[5 8 9]]) -> [22]", "(sums [[6 5 9 9] [0 4 6 4] [] [] [7 8]]) -> [29 14 0 0 15]"], "time": 0.524538, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0 5 3]]) -> [8]", "(sums [[0 9] [9 5 3] [7 4 3 6]]) -> [9 17 20]"], "time": 1.0109, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [5 5] [6 1 7 9 8] [3 7 2 0]]) -> [0 10 31 12]", "(sums [[] [6 6 1 0] [] [8] [5 9 4 7]]) -> [0 13 0 8 25]"], "time": 0.466422, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [7 1 6]]) -> [0 14]", "(sums [[2 9 0] [7 4 4 2 2] [4 1 7 0 6] [6]]) -> [11 19 18 6]"], "time": 0.476556, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [7 5 4 0] [6] [8 6 9 3] [0 8]]) -> [0 16 6 26 8]", "(sums [[6] [] []]) -> [6 0 0]"], "time": 0.482653, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 5 2 7] [3 8 8 2 3] [1 1 5 1]]) -> [20 24 8]", "(sums [[] [6 0] [5 9 2 2 8]]) -> [0 6 26]"], "time": 0.540804, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [0 4] [5 5 6 1 6] [5 3 2 5] [3 1 6]]) -> [0 4 23 15 10]", "(sums [[] [2] [0]]) -> [0 2 0]"], "time": 0.467086, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 4 7 1 3] [2 5 8 0 2] [0 0 0 0 2] [] []]) -> [19 17 2 0 0]", "(sums [[4]]) -> [4]"], "time": 0.386649, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[3 6 6 4] [4 7 4 6]]) -> [19 21]", "(sums [[9 9 9 1 8] [7] [6] [5 9 8 9 3]]) -> [36 7 6 34]"], "time": 0.956818, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 1 8] [5 6 3] [0 3] [2 7 8] [8 1 3 0]]) -> [17 14 3 17 12]", "(sums [[2 2 4 1 9] [9 3] [6 2 9 1 1] [] [2 2 7 0]]) -> [18 12 19 0 11]"], "time": 0.467526, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[3] [6 8 6 6] [0]]) -> [3 26 0]", "(sums [[6 9 0 4]]) -> [19]"], "time": 0.918261, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[5 4]]) -> [9]", "(sums []) -> []"], "time": 0.315644, "name": "sums", "solution": "(let sums (let a (lambda (b) (foldl b (lambda (d c) (foldl d (lambda (f e) d) [9])) [])) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 4 1]]) -> [12]", "(sums [[] [] [2]]) -> [0 0 2]"], "time": 0.38962, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[3 7 9 8 5] [9]]) -> [32 9]", "(sums [[6 6 7 6 7] []]) -> [32 0]"], "time": 0.615889, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1 2 2 4]]) -> [9]", "(sums []) -> []"], "time": 0.163352, "name": "sums", "solution": "(let sums (let a (lambda (b) (foldl b (lambda (d c) (foldl d (lambda (f e) d) [9])) [])) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1 9 3 5 7] [2 0 9 2] [5 7 8 3 5] [1 5] [0 9]]) -> [25 13 28 6 9]", "(sums []) -> []"], "time": 1.192843, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2 1 9 7] [5 9 4 0 6] [4 5 4] [7 3 4 1]]) -> [19 24 13 15]", "(sums [[1 5 8 8 3] [4 5 3 6 9] [9 9]]) -> [25 27 18]"], "time": 0.806144, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 6] [8] [5 2 3]]) -> [14 8 10]", "(sums [[4 2] [7] [6 7 5] [8 4 4]]) -> [6 7 18 16]"], "time": 0.778667, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8] [6] [0] [] [0 6 6 2 9]]) -> [8 6 0 0 23]", "(sums [[7] [4 3]]) -> [7 7]"], "time": 0.756777, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 7 4]]) -> [17]", "(sums []) -> []"], "time": 0.256533, "name": "sums", "solution": "(let sums (let a (lambda (b) (foldl b (lambda (d c) (foldl d (lambda (f e) d) [17])) [])) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[5 8] [0 2] [] [7]]) -> [13 2 0 7]"], "time": 0.439681, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0]]) -> [0]", "(sums [[5 3 7 8 2] [5 8 6]]) -> [25 19]"], "time": 0.641227, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[6 2] [8 9 9 6] [1 3 1 0]]) -> [8 32 5]"], "time": 1.400051, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 6 8 4] [0 3] [6 4] [1 6]]) -> [26 3 10 7]", "(sums []) -> []"], "time": 0.708185, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[]]) -> [0]", "(sums [[7 5] [6 5 3 9 4] [6 0 8 6 9] [9 6 3 7 0]]) -> [12 27 29 25]"], "time": 0.598226, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[3 5 6 5]]) -> [19]", "(sums [[6 4 1 5 2]]) -> [18]"], "time": 1.057706, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4] [8 1]]) -> [4 9]", "(sums [[7] [4 3 4 4 0] [0 4 9 7 2] [8 3 5 1]]) -> [7 15 22 17]"], "time": 1.319504, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [0 8 6 7] [3 5 7 5] [3 8 9 8] []]) -> [0 21 20 28 0]", "(sums [[5 0] [2 5 1 4] [3]]) -> [5 12 3]"], "time": 0.365927, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0] [3 8 4 1 1] [3 1 7] [4 9 9]]) -> [0 17 11 22]", "(sums [[8 1] [] [4 1] [1 2 2 2 0] []]) -> [9 0 5 7 0]"], "time": 0.362632, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 3 4 3 1] [1 8 3 7] [5 3 8] [0 1 9 1] [8 0]]) -> [18 19 16 11 8]", "(sums [[6 0] [9 1 1 9 7] [9 7 1 2]]) -> [6 27 19]"], "time": 1.264533, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2] [9] [3 0 8 5] [] [2]]) -> [2 9 16 0 2]", "(sums [[9 8 8 6] [8] [9 8 3] [5 6] []]) -> [31 8 20 11 0]"], "time": 0.743405, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[6 4 5 4]]) -> [19]"], "time": 0.235343, "name": "sums", "solution": "(let sums (let a (lambda (b) (foldl b (lambda (d c) (foldl d (lambda (f e) d) [19])) [])) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 8 5] [8 8] [9 2 3] [5 8]]) -> [19 16 14 13]", "(sums [[8 4]]) -> [12]"], "time": 0.629286, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 1 9 6 2]]) -> [25]", "(sums [[0] [] [3 4 4 2]]) -> [0 0 13]"], "time": 0.560611, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[5 3]]) -> [8]", "(sums [[5 3 4]]) -> [12]"], "time": 1.047522, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[3 6 0]]) -> [9]", "(sums []) -> []"], "time": 0.141028, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (* (car c) (car c))))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[1 3] [0 3 4 1 3]]) -> [4 11]"], "time": 1.227666, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[]]) -> [0]", "(sums [[8 4 6]]) -> [18]"], "time": 0.478102, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1 1 9] [] []]) -> [11 0 0]", "(sums [[] [2 1 1 9] [1 1 1 5]]) -> [0 13 8]"], "time": 0.358964, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [3 5 0 3 6] [6 3 3 2 4] [8 6 4 2 3]]) -> [0 17 18 23]", "(sums [[9 6] [] [5] [0 7 2 1 1] [3]]) -> [15 0 5 11 3]"], "time": 0.382873, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[2 0 9]]) -> [11]"], "time": 0.17222, "name": "sums", "solution": "(let sums (let a (lambda (b) (foldl b (lambda (d c) (foldl d (lambda (f e) d) [11])) [])) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4] [2 0 2 1] [4] []]) -> [4 5 4 0]", "(sums [[0 7 5 8]]) -> [20]"], "time": 0.381443, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 4 9] [9 8 5 3]]) -> [19 25]", "(sums [[2 8 9] [2 3 6] [2 0] [0] []]) -> [19 11 2 0 0]"], "time": 0.426011, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[3 5 5 2]]) -> [15]"], "time": 0.220329, "name": "sums", "solution": "(let sums (let a (lambda (b) (foldl b (lambda (d c) (foldl d (lambda (f e) d) [15])) [])) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums []) -> []"], "time": 0.000578, "name": "sums", "solution": "(let sums (let a (lambda (b) []) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[1 2 8] [5 3 1 7]]) -> [11 16]"], "time": 0.721644, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 6] [7 0 4] [7 1 4 4]]) -> [10 11 16]", "(sums [[6] [] [4 1 0] [3 5 0 7] [0 2]]) -> [6 0 5 15 2]"], "time": 0.400216, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[5 2 2 3] [] [1 2 6 8 1] []]) -> [12 0 18 0]", "(sums [[8 9 6] [4 6 3 6]]) -> [23 19]"], "time": 0.431817, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0 3 7] [8 0 7 0 6]]) -> [10 21]", "(sums [[4 9 5 0 6] [] [8 0 4 0]]) -> [24 0 12]"], "time": 0.365338, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[5 4] [7 1 2 0] [3 9]]) -> [9 10 12]", "(sums [[8] [5 0 8 2 0]]) -> [8 15]"], "time": 1.037031, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 7] [0 5 3 3] [6 8]]) -> [11 11 14]", "(sums [[4 0 9 0 5] [4 7 9 4 1] [6 0 7 8]]) -> [18 25 21]"], "time": 0.885561, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[5 6] [8 6 8 6] [] [9 6 6 4 4]]) -> [11 28 0 29]"], "time": 0.380286, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 1 2 7 4] []]) -> [18 0]", "(sums [[9] [2 3 6 2] [4 0] [9 8 8] [1 0 1 9 2]]) -> [9 13 4 25 13]"], "time": 0.530531, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 7] [7 9 9] [4 6 3 6] [1 7 6]]) -> [13 25 19 14]", "(sums [[9 5 6 0] [] [7 7 3 2 4] [8 6]]) -> [20 0 23 14]"], "time": 0.579434, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[] [3 5]]) -> [0 8]"], "time": 0.473266, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0] [9 2]]) -> [0 11]", "(sums [[9 4 5 8 5] [] [0 6 9 5]]) -> [31 0 20]"], "time": 0.520504, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[] [8 5] [0 9] [1] [4 7 9 9]]) -> [0 13 9 1 29]"], "time": 0.52923, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[1 5 1 0 5] [2 9 7 1] [7 3] [8 9]]) -> [12 19 10 17]"], "time": 0.977529, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 7 8] [2 4 4] [7] [] [4 5 1]]) -> [22 10 7 0 10]", "(sums [[4 2 6 5] [] [0 5 6 8 6] [2 3 8 2]]) -> [17 0 25 15]"], "time": 0.569042, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 2 0] [7 6 0 7] [4 2 6]]) -> [6 20 12]", "(sums [[0 0 4 0 6] [4] [5 4] [1]]) -> [10 4 9 1]"], "time": 0.857096, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 1 9]]) -> [17]", "(sums [[] [5 3 4 8]]) -> [0 20]"], "time": 0.441302, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[5 3 5] [1 3 7 3 4]]) -> [13 18]"], "time": 0.846012, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[1 6] [0 0 1] [2] [5 8 7 8]]) -> [7 1 2 28]"], "time": 0.97052, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [9 5]]) -> [0 14]", "(sums []) -> []"], "time": 0.535103, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 9 2] [2 4 7 7]]) -> [20 20]", "(sums [[9 4 0 7 3] [6 9 7] [5] [2 4 8 0 9]]) -> [23 22 5 23]"], "time": 0.892305, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[5 4 5] [9] [7 8 0 4 7] []]) -> [14 9 26 0]", "(sums [[]]) -> [0]"], "time": 0.367696, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 9] [4 4] [0] [5 5] [7 3]]) -> [15 8 0 10 10]", "(sums [[] [3 4 0] []]) -> [0 7 0]"], "time": 0.587953, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 0 6] [7 0 1 5 4] [8 7 3]]) -> [14 17 18]", "(sums [[7] [7 2] [1 8] [] [4 2 6 7 1]]) -> [7 9 9 0 20]"], "time": 0.503006, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0] [9 7 8] [2 2 2]]) -> [0 24 6]", "(sums [[6]]) -> [6]"], "time": 0.757378, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2 4] [1 1 7 8 6] [7 0] [] [9 8 7 2]]) -> [6 23 7 0 26]", "(sums [[] [1 3 2]]) -> [0 6]"], "time": 0.340644, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 2 0 5] [3 8] [0]]) -> [14 11 0]", "(sums [[]]) -> [0]"], "time": 0.388891, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 4 1 8 8]]) -> [28]", "(sums [[] [] [7]]) -> [0 0 7]"], "time": 0.3869, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7] [4 4 6 8] [4 7]]) -> [7 22 11]", "(sums [[3 2 2 4] [] [2 8 0 5] [] [3 4 2 0]]) -> [11 0 15 0 9]"], "time": 0.304784, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [3 6] [2 6 1 1 2] [4] [0 0 6 9]]) -> [0 9 12 4 15]", "(sums [[1 1 7 0] [] [9]]) -> [9 0 9]"], "time": 0.391334, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[6 8 2 0 9] [7 0 9 8 5] [1 0] [2 1 9 4 0] [0 3]]) -> [25 29 1 16 3]"], "time": 0.832438, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 2 5 0] [7 4] [5 8]]) -> [13 11 13]", "(sums []) -> []"], "time": 0.517522, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2 9 1 3] [0] [0 2] [3 0 4 5 5] [5 2]]) -> [15 0 2 17 7]", "(sums [[] [8 7 8 2 9]]) -> [0 34]"], "time": 0.336548, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[5 2] [8 0 6 9] [0 7] [6 4 0 4 5] [3 8]]) -> [7 23 7 19 11]"], "time": 0.568977, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2 6 4 4 4] [1 3 1 5] [2 3] [0 1] [1 9 8]]) -> [20 10 5 1 18]", "(sums []) -> []"], "time": 0.587606, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 8 8 6] [7 2 9 3] [9 2 0] [8 0]]) -> [29 21 11 8]", "(sums [[8 5] [6 7] [5 3 3 3 8]]) -> [13 13 22]"], "time": 0.530757, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
