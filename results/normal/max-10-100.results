{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 1 0 9]) -> 9", "(max [6 0]) -> 6", "(max [5]) -> 5", "(max [6 4]) -> 6", "(max [3 1]) -> 3", "(max [0 2 9 9 0]) -> 9", "(max [7 2 6 9 3]) -> 9", "(max [7 6 1 6 6]) -> 7", "(max [4 7 8 5 3]) -> 8"], "time": 7.751108}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 9 5 8]) -> 9", "(max [4]) -> 4", "(max [0 6 1 9 9]) -> 9", "(max [2 5 8]) -> 8", "(max [4 8]) -> 8", "(max [9 5 1]) -> 9", "(max [4]) -> 4", "(max [4 9 6 0]) -> 9", "(max [2]) -> 2"], "time": 7.90938}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7]) -> 7", "(max [4 3 2 1]) -> 4", "(max [2 0 2]) -> 2", "(max [1 0]) -> 1", "(max [0 2 4 4 7]) -> 7", "(max [1 9 0 5 8]) -> 9", "(max [1 0 8]) -> 8", "(max [4 9 0 5]) -> 9", "(max [5]) -> 5"], "time": 7.912841}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 2 4 6 7]) -> 7", "(max [3 0]) -> 3", "(max [9 2 1 8 8]) -> 9", "(max [9 9 6 4 6]) -> 9", "(max [0 9 1]) -> 9", "(max [4 4 0]) -> 4", "(max [7 6 2 1]) -> 7", "(max [6]) -> 6", "(max [7 1 1 4 3]) -> 7"], "time": 7.884938}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 2]) -> 7", "(max [0 8]) -> 8", "(max [5 5]) -> 5", "(max [1 9 3]) -> 9", "(max [5 5 9]) -> 9", "(max [9 9 3 2 4]) -> 9", "(max [4 8 5 9]) -> 9", "(max [9 1 6 1]) -> 9", "(max [5 5 8 2]) -> 8"], "time": 7.959534}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5]) -> 5", "(max [3 4 9 8 8]) -> 9", "(max [1 0 1]) -> 1", "(max [2]) -> 2", "(max [4 8 3 3]) -> 8", "(max [4 7]) -> 7", "(max [5 7 7]) -> 7", "(max [6 3 0 5]) -> 6", "(max [8 2 4 8 5]) -> 8"], "time": 7.965533}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 2 7 5]) -> 8", "(max [4 3 6]) -> 6", "(max [9 3 0 0]) -> 9", "(max [8 4 3 7]) -> 8", "(max [8 4]) -> 8", "(max [3 4]) -> 4", "(max [8 4]) -> 8", "(max [4]) -> 4", "(max [5 9 9 7]) -> 9"], "time": 8.052351}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 4 4 2 0]) -> 4", "(max [6]) -> 6", "(max [4]) -> 4", "(max [8 1 1 0]) -> 8", "(max [3 8]) -> 8", "(max [7]) -> 7", "(max [9 0 5]) -> 9", "(max [8 5 3 1]) -> 8", "(max [3 8 2 1 8]) -> 8"], "time": 8.217276}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 7 4 2 4]) -> 8", "(max [4 0 3]) -> 4", "(max [3]) -> 3", "(max [2 1]) -> 2", "(max [7]) -> 7", "(max [3 6 3 3]) -> 6", "(max [4 0 4 9 2]) -> 9", "(max [3 3 6]) -> 6", "(max [5 3 2 9 5]) -> 9"], "time": 8.576703}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 9 4 1 2]) -> 9", "(max [0 7 7 3 3]) -> 7", "(max [8 2 2 2 0]) -> 8", "(max [2 9]) -> 9", "(max [8]) -> 8", "(max [8 9 1]) -> 9", "(max [2 9 7]) -> 9", "(max [2 1]) -> 2", "(max [1]) -> 1"], "time": 8.560903}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 9 1 9]) -> 9", "(max [3 9 5]) -> 9", "(max [6 8]) -> 8", "(max [3]) -> 3", "(max [8 3 2]) -> 8", "(max [7]) -> 7", "(max [3 2 6 5 4]) -> 6", "(max [0]) -> 0", "(max [8 1 5]) -> 8"], "time": 8.791176}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3]) -> 3", "(max [3 8 6]) -> 8", "(max [9 2 6 0 7]) -> 9", "(max [4]) -> 4", "(max [0 2]) -> 2", "(max [8 7]) -> 8", "(max [4]) -> 4", "(max [3]) -> 3", "(max [9]) -> 9"], "time": 8.82591}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 7 3]) -> 7", "(max [4]) -> 4", "(max [3 5 9 9 4]) -> 9", "(max [5 4 3 7 9]) -> 9", "(max [8 0 1 9]) -> 9", "(max [8 0 9 5 3]) -> 9", "(max [1]) -> 1", "(max [2]) -> 2", "(max [9 0 4 2]) -> 9"], "time": 8.919856}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 1 4]) -> 4", "(max [6 5 7 3 7]) -> 7", "(max [5 8 5 2 6]) -> 8", "(max [2 7 2 9]) -> 9", "(max [9 5]) -> 9", "(max [4 3 7 1 4]) -> 7", "(max [1]) -> 1", "(max [9 5 2 9]) -> 9", "(max [3]) -> 3"], "time": 8.975794}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 2]) -> 5", "(max [6 6 0]) -> 6", "(max [5 6]) -> 6", "(max [6 5 2 5]) -> 6", "(max [6 2 3 1 4]) -> 6", "(max [1 1 7]) -> 7", "(max [8 3]) -> 8", "(max [5 2 4 9 9]) -> 9", "(max [6 5 4 2 9]) -> 9"], "time": 9.223232}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 5 6]) -> 6", "(max [9 0]) -> 9", "(max [3 8 6 5]) -> 8", "(max [3 1 5 7]) -> 7", "(max [3 5 2 7]) -> 7", "(max [2 2]) -> 2", "(max [1 8]) -> 8", "(max [0 9 3 0]) -> 9", "(max [4 7 8 6 8]) -> 8"], "time": 9.331424}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5]) -> 5", "(max [1]) -> 1", "(max [3 4 5 2]) -> 5", "(max [4 7 6 3]) -> 7", "(max [0 6]) -> 6", "(max [0 0]) -> 0", "(max [0 7]) -> 7", "(max [5 6 8 4 1]) -> 8", "(max [9 5 4 8 1]) -> 9"], "time": 6.398187}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0]) -> 0", "(max [2]) -> 2", "(max [6 5 3 2]) -> 6", "(max [1 6 6 2 5]) -> 6", "(max [8 4 4 0]) -> 8", "(max [7 8 0 3]) -> 8", "(max [7 7 4 9]) -> 9", "(max [9 1 4 0 8]) -> 9", "(max [7 8 4 1 7]) -> 8"], "time": 6.956062}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7]) -> 7", "(max [0 6 0 8]) -> 8", "(max [6 7 7 9]) -> 9", "(max [5]) -> 5", "(max [3 5 2]) -> 5", "(max [4 4 1]) -> 4", "(max [2 9]) -> 9", "(max [6]) -> 6", "(max [6 2 0 9 4]) -> 9"], "time": 6.941451}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3]) -> 3", "(max [2 1]) -> 2", "(max [6 9 5 0]) -> 9", "(max [7 9 2 1]) -> 9", "(max [5 1]) -> 5", "(max [2 7 5 1]) -> 7", "(max [9 3]) -> 9", "(max [9 7 4 5]) -> 9", "(max [7 3 5 3 8]) -> 8"], "time": 8.05833}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 2 5 1]) -> 5", "(max [3 0]) -> 3", "(max [5 3 1]) -> 5", "(max [0 8]) -> 8", "(max [5 7 8 1]) -> 8", "(max [3 0 9 9 0]) -> 9", "(max [1 9 3 1]) -> 9", "(max [9]) -> 9", "(max [1 4 7]) -> 7"], "time": 8.230047}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 5 5]) -> 6", "(max [4 0 2]) -> 4", "(max [5]) -> 5", "(max [4 6 3 3 2]) -> 6", "(max [6]) -> 6", "(max [1 7]) -> 7", "(max [1 0]) -> 1", "(max [3 5 3]) -> 5", "(max [6 3 2 7]) -> 7"], "time": 8.659811}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 7 3 9]) -> 9", "(max [9 5 1 8 1]) -> 9", "(max [4 2 9 0 4]) -> 9", "(max [9 7]) -> 9", "(max [0 3]) -> 3", "(max [2 6 4 8 2]) -> 8", "(max [8 7 0 4 6]) -> 8", "(max [2 2]) -> 2", "(max [1 2 2 8 6]) -> 8"], "time": 7.76547}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 5 7 0]) -> 7", "(max [1]) -> 1", "(max [3]) -> 3", "(max [6]) -> 6", "(max [9 6 7]) -> 9", "(max [0 7]) -> 7", "(max [5 5 9 7 8]) -> 9", "(max [4 3 8 4 2]) -> 8", "(max [1 1 6 5]) -> 6"], "time": 9.041628}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 5 9 9]) -> 9", "(max [1 8 1 3]) -> 8", "(max [0 7 6 9]) -> 9", "(max [4]) -> 4", "(max [7 1 5 9 2]) -> 9", "(max [3 2 4 0]) -> 4", "(max [4 6 4 3]) -> 6", "(max [8 1]) -> 8", "(max [1 6]) -> 6"], "time": 9.051378}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 5 9 5]) -> 9", "(max [8 0 1 7 4]) -> 8", "(max [2 2 1 4]) -> 4", "(max [5 9]) -> 9", "(max [5 5 8]) -> 8", "(max [7]) -> 7", "(max [7 1 8 7]) -> 8", "(max [0 6 7]) -> 7", "(max [8 2 4 6]) -> 8"], "time": 8.664168}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1]) -> 1", "(max [9 7 0 9]) -> 9", "(max [1 7 8 5]) -> 8", "(max [8 8 7 1 7]) -> 8", "(max [1 3 5 6 7]) -> 7", "(max [8 0 7]) -> 8", "(max [0 6 4]) -> 6", "(max [4 7 8]) -> 8", "(max [7 5 5 3 3]) -> 7"], "time": 8.420627}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 4 9 6]) -> 9", "(max [1 6 3 1 7]) -> 7", "(max [8 6]) -> 8", "(max [9 5 9 7 7]) -> 9", "(max [0 2]) -> 2", "(max [8 2 0 6]) -> 8", "(max [8 3 6 7 4]) -> 8", "(max [3 7 5]) -> 7", "(max [0 7 8 6]) -> 8"], "time": 8.811224}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 0 8]) -> 8", "(max [5 2 0]) -> 5", "(max [2 8 0 1]) -> 8", "(max [3]) -> 3", "(max [4 9 7 9 9]) -> 9", "(max [3]) -> 3", "(max [3]) -> 3", "(max [5 4 4 4]) -> 5", "(max [8]) -> 8"], "time": 8.795268}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 4 4]) -> 7", "(max [1 1]) -> 1", "(max [8 7 3 4]) -> 8", "(max [1]) -> 1", "(max [5]) -> 5", "(max [2 6 5]) -> 6", "(max [9 7 7]) -> 9", "(max [3 5]) -> 5", "(max [4 0 9 4]) -> 9"], "time": 8.923616}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5]) -> 5", "(max [3 1 7 9]) -> 9", "(max [9 4 4 6]) -> 9", "(max [0 4 5 0]) -> 5", "(max [4 4 9 2]) -> 9", "(max [4 4 7]) -> 7", "(max [7 0 0 4]) -> 7", "(max [3 4 4 2 4]) -> 4", "(max [8 2]) -> 8"], "time": 8.709149}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 2 8 5 4]) -> 8", "(max [2 2 7 3]) -> 7", "(max [7 1 9 0]) -> 9", "(max [7 6 4 2 2]) -> 7", "(max [8 6]) -> 8", "(max [6 2 2 2]) -> 6", "(max [2 3 7 8]) -> 8", "(max [5 3 7]) -> 7", "(max [0]) -> 0"], "time": 9.29084}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 3 7 1]) -> 7", "(max [7 9 4 5]) -> 9", "(max [4 1 6 9]) -> 9", "(max [5]) -> 5", "(max [6]) -> 6", "(max [4]) -> 4", "(max [8 8 8]) -> 8", "(max [5 4 0]) -> 5", "(max [0 2 6 2 8]) -> 8"], "time": 6.863447}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8]) -> 8", "(max [9 6 5 3 4]) -> 9", "(max [0 6 2]) -> 6", "(max [1 5 3 5]) -> 5", "(max [4 8 1 0]) -> 8", "(max [4 8]) -> 8", "(max [2]) -> 2", "(max [6 4 6]) -> 6", "(max [0 9 5]) -> 9"], "time": 8.849474}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 2]) -> 6", "(max [6]) -> 6", "(max [5]) -> 5", "(max [9 7]) -> 9", "(max [9]) -> 9", "(max [0 6 3 8]) -> 8", "(max [7]) -> 7", "(max [8 7 1 3 2]) -> 8", "(max [2 9 5 5 0]) -> 9"], "time": 7.095071}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 7 1 3 3]) -> 7", "(max [0 0]) -> 0", "(max [0 5 5]) -> 5", "(max [1]) -> 1", "(max [0 3]) -> 3", "(max [5]) -> 5", "(max [7 4 6 7]) -> 7", "(max [0]) -> 0", "(max [8 6 8 2 7]) -> 8"], "time": 5.898119}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 8 4]) -> 8", "(max [3 8 3]) -> 8", "(max [2 1]) -> 2", "(max [2 6 7]) -> 7", "(max [0 7 0 3 7]) -> 7", "(max [3 1 5]) -> 5", "(max [6 7]) -> 7", "(max [6 8 1 2]) -> 8", "(max [5 8 0 9]) -> 9"], "time": 7.027864}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9]) -> 9", "(max [9 7 3]) -> 9", "(max [6 3 2 9]) -> 9", "(max [2 7]) -> 7", "(max [3 0 3 5]) -> 5", "(max [5 9 1]) -> 9", "(max [7 1 5 0]) -> 7", "(max [3 1 2 6]) -> 6", "(max [1 3 6 4]) -> 6"], "time": 9.154662}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 7 9 3 1]) -> 9", "(max [6 6 0 2 0]) -> 6", "(max [4 3 3]) -> 4", "(max [1 7 3 2 7]) -> 7", "(max [5 0 8 3 4]) -> 8", "(max [7]) -> 7", "(max [6 5 6 5 6]) -> 6", "(max [3 1]) -> 3", "(max [7 5 0 2 0]) -> 7"], "time": 7.067642}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 0 3]) -> 8", "(max [1 3 9 4 6]) -> 9", "(max [7 0 6 3 7]) -> 7", "(max [9 7]) -> 9", "(max [4 4 3 1]) -> 4", "(max [3 6 3 0 1]) -> 6", "(max [9]) -> 9", "(max [1 3 5 2 6]) -> 6", "(max [2]) -> 2"], "time": 5.801326}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 7 1 3]) -> 7", "(max [8 0 1 7 7]) -> 8", "(max [9 6 0 5 6]) -> 9", "(max [3 9 6 1]) -> 9", "(max [8 4 8]) -> 8", "(max [6 8 1 7 6]) -> 8", "(max [0]) -> 0", "(max [8 2 0 4]) -> 8", "(max [7 7 5]) -> 7"], "time": 8.514235}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 5 9 5]) -> 9", "(max [6 0 8 1]) -> 8", "(max [6]) -> 6", "(max [0]) -> 0", "(max [3 1 1]) -> 3", "(max [7 1 6 7]) -> 7", "(max [0 6 1]) -> 6", "(max [7]) -> 7", "(max [9 8]) -> 9"], "time": 7.755723}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 6 9]) -> 9", "(max [5 7 9]) -> 9", "(max [3 3]) -> 3", "(max [6]) -> 6", "(max [1 6]) -> 6", "(max [3 1]) -> 3", "(max [8 8 6]) -> 8", "(max [9 3]) -> 9", "(max [2 0 5]) -> 5"], "time": 9.681986}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 2 3 1]) -> 4", "(max [5 2 5 1 4]) -> 5", "(max [3]) -> 3", "(max [5 2 6 0 3]) -> 6", "(max [0 5]) -> 5", "(max [7 2 1 7]) -> 7", "(max [3 5]) -> 5", "(max [4 2]) -> 4", "(max [5]) -> 5"], "time": 10.395637}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 1 9]) -> 9", "(max [8 1]) -> 8", "(max [7 4 3 7]) -> 7", "(max [7 3 3 9 7]) -> 9", "(max [7 8 8 9 0]) -> 9", "(max [8]) -> 8", "(max [7]) -> 7", "(max [4 9 6 1 3]) -> 9", "(max [1 5 6 0]) -> 6"], "time": 10.517416}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 9 1 1 5]) -> 9", "(max [8 8 5]) -> 8", "(max [9]) -> 9", "(max [0 7 7 3]) -> 7", "(max [3]) -> 3", "(max [8 5 7]) -> 8", "(max [3 6 2 7]) -> 7", "(max [6 6]) -> 6", "(max [4]) -> 4"], "time": 10.559438}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2]) -> 2", "(max [9]) -> 9", "(max [8 7]) -> 8", "(max [7]) -> 7", "(max [0]) -> 0", "(max [3 2 9 5]) -> 9", "(max [6 7 8 2 2]) -> 8", "(max [4 7 9 5 8]) -> 9", "(max [7]) -> 7"], "time": 10.33755}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 6 1]) -> 6", "(max [0 4]) -> 4", "(max [4 9]) -> 9", "(max [9]) -> 9", "(max [9 1 3 4]) -> 9", "(max [8 5 9 7 0]) -> 9", "(max [3 7 2 8 9]) -> 9", "(max [2 5 5 2 7]) -> 7", "(max [9 5 2 8]) -> 9"], "time": 10.149073}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 6 6 5 3]) -> 8", "(max [5 7]) -> 7", "(max [5]) -> 5", "(max [6 2 1]) -> 6", "(max [8 5 9 7 9]) -> 9", "(max [8 9 8]) -> 9", "(max [2 8]) -> 8", "(max [4 4 6 9 7]) -> 9", "(max [0]) -> 0"], "time": 7.602852}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 2 1]) -> 9", "(max [3 1]) -> 3", "(max [4 1]) -> 4", "(max [2]) -> 2", "(max [4 6 4 8 4]) -> 8", "(max [2 9 9 2 4]) -> 9", "(max [6]) -> 6", "(max [7 2 6]) -> 7", "(max [6 1 1]) -> 6"], "time": 6.681438}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 7 4 0]) -> 7", "(max [7 5 4 5 9]) -> 9", "(max [0 3 6 8 0]) -> 8", "(max [7]) -> 7", "(max [0 5 0 7]) -> 7", "(max [8 5]) -> 8", "(max [7 2 3 1]) -> 7", "(max [5 6 5 1 8]) -> 8", "(max [6]) -> 6"], "time": 7.116562}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 4]) -> 4", "(max [0 2 3 7]) -> 7", "(max [9 4 7 6]) -> 9", "(max [4 8 3]) -> 8", "(max [8 1 1 4 5]) -> 8", "(max [9 8 1 1]) -> 9", "(max [2 0 1 9]) -> 9", "(max [7 4 1 1 3]) -> 7", "(max [3 3 0]) -> 3"], "time": 7.432369}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 4 1]) -> 6", "(max [9 9]) -> 9", "(max [7 0 7 7 9]) -> 9", "(max [7 2]) -> 7", "(max [0 9 4 8 9]) -> 9", "(max [8]) -> 8", "(max [8 5 6 2 6]) -> 8", "(max [0 9]) -> 9", "(max [4 4]) -> 4"], "time": 7.501541}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5]) -> 5", "(max [6]) -> 6", "(max [3]) -> 3", "(max [1 7 6 2]) -> 7", "(max [3 7 1 6]) -> 7", "(max [4]) -> 4", "(max [5 7 2]) -> 7", "(max [5 6 2]) -> 6", "(max [3 1]) -> 3"], "time": 8.732102}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 0 c) d c)) 0)) _) _)", "examples": ["(max [4]) -> 4", "(max [7 8 0]) -> 8", "(max [7 6 2 8]) -> 8", "(max [3 5 7 9 0]) -> 9", "(max [9]) -> 9", "(max [2]) -> 2", "(max [8 8 3 9]) -> 9", "(max [4]) -> 4", "(max [8 1 9]) -> 9"], "time": 8.669474}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 3 4 1 3]) -> 8", "(max [6 4 4]) -> 6", "(max [2 0 2 7]) -> 7", "(max [1 9 1 9 9]) -> 9", "(max [0 9 7 5]) -> 9", "(max [9 7 1 1 5]) -> 9", "(max [0]) -> 0", "(max [8 7 0 4]) -> 8", "(max [0 5]) -> 5"], "time": 9.678981}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0]) -> 0", "(max [5 4]) -> 5", "(max [1 7 8]) -> 8", "(max [5 5 3]) -> 5", "(max [1 0 9 4 3]) -> 9", "(max [9]) -> 9", "(max [2 5 9 6 0]) -> 9", "(max [4]) -> 4", "(max [2]) -> 2"], "time": 8.152652}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0]) -> 0", "(max [4 5 0 4]) -> 5", "(max [8 3 2]) -> 8", "(max [2 7 9 6]) -> 9", "(max [9]) -> 9", "(max [0 8 3 2]) -> 8", "(max [3 5 9 1]) -> 9", "(max [0 0]) -> 0", "(max [9 8 5 5]) -> 9"], "time": 7.270433}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 2 1 3 8]) -> 8", "(max [4 8 8 8]) -> 8", "(max [8 5]) -> 8", "(max [8 7 3 2]) -> 8", "(max [6]) -> 6", "(max [0 3 8 3]) -> 8", "(max [2]) -> 2", "(max [6 8 1 2 1]) -> 8", "(max [1 4 5 5 5]) -> 5"], "time": 8.583502}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0]) -> 0", "(max [2 6 6 8]) -> 8", "(max [1]) -> 1", "(max [6 2]) -> 6", "(max [8]) -> 8", "(max [8 7 2 7]) -> 8", "(max [1 5]) -> 5", "(max [1 1 3 6 9]) -> 9", "(max [9 8 9]) -> 9"], "time": 7.696731}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 1 4 2 5]) -> 5", "(max [6 2 2 1]) -> 6", "(max [0]) -> 0", "(max [1 4 8]) -> 8", "(max [4 5 8 1 6]) -> 8", "(max [3 4 1]) -> 4", "(max [7 2 7 9]) -> 9", "(max [9]) -> 9", "(max [5]) -> 5"], "time": 5.516437}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 5 5 3 4]) -> 9", "(max [2 4]) -> 4", "(max [0]) -> 0", "(max [2]) -> 2", "(max [2]) -> 2", "(max [9 8 7 1 3]) -> 9", "(max [1 2 6 1 2]) -> 6", "(max [8 7]) -> 8", "(max [7]) -> 7"], "time": 8.687671}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 4 1]) -> 9", "(max [6 6 2 4 0]) -> 6", "(max [2]) -> 2", "(max [1]) -> 1", "(max [9 7 7 5]) -> 9", "(max [7 8 5]) -> 8", "(max [9 5]) -> 9", "(max [2]) -> 2", "(max [2 8 9 1]) -> 9"], "time": 8.833694}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 8]) -> 8", "(max [1 9 9]) -> 9", "(max [3 0 1 6]) -> 6", "(max [6 4 6]) -> 6", "(max [1 9 0]) -> 9", "(max [7 6 0 3 7]) -> 7", "(max [6 9 7]) -> 9", "(max [8]) -> 8", "(max [1 4]) -> 4"], "time": 9.138026}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 7]) -> 7", "(max [2 8 1 1]) -> 8", "(max [8 4 9 3]) -> 9", "(max [7 2 9 7 2]) -> 9", "(max [6]) -> 6", "(max [9 5 5 4]) -> 9", "(max [6 0 1 1 8]) -> 8", "(max [4 9 0 8]) -> 9", "(max [8 2]) -> 8"], "time": 10.696602}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 5 3 4 9]) -> 9", "(max [2 0 5 1 0]) -> 5", "(max [7 4 6 7]) -> 7", "(max [1 9]) -> 9", "(max [8 7 6 1]) -> 8", "(max [9]) -> 9", "(max [7 7 5 0]) -> 7", "(max [1 1 6 4 7]) -> 7", "(max [4 0 0 1 9]) -> 9"], "time": 10.808261}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 5 7 5]) -> 7", "(max [3 9 3 2]) -> 9", "(max [6 5 9]) -> 9", "(max [5 8 2 2 2]) -> 8", "(max [7 9 5 4]) -> 9", "(max [6 0 4 5 9]) -> 9", "(max [9 2 4 0]) -> 9", "(max [9 5 2 6 2]) -> 9", "(max [3]) -> 3"], "time": 7.229028}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 8]) -> 8", "(max [9 6]) -> 9", "(max [8 5 0]) -> 8", "(max [7]) -> 7", "(max [8 3 1]) -> 8", "(max [8 8 4 2 5]) -> 8", "(max [5 8 0 8]) -> 8", "(max [5 3]) -> 5", "(max [4 2 1 5]) -> 5"], "time": 8.03872}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1]) -> 1", "(max [0 9 7]) -> 9", "(max [9 4]) -> 9", "(max [1 3]) -> 3", "(max [3 1]) -> 3", "(max [1 8 9 3 7]) -> 9", "(max [7 5 1 2 3]) -> 7", "(max [0 7]) -> 7", "(max [5 0 2 9]) -> 9"], "time": 7.942796}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 4]) -> 4", "(max [5]) -> 5", "(max [2 4 2 8 2]) -> 8", "(max [8]) -> 8", "(max [0 3 1 0 7]) -> 7", "(max [0]) -> 0", "(max [3]) -> 3", "(max [0 4 4]) -> 4", "(max [0 5 4 2]) -> 5"], "time": 10.51619}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 3 7 0]) -> 7", "(max [7 4 3 5]) -> 7", "(max [9 6 3 3 2]) -> 9", "(max [4]) -> 4", "(max [4 0 8 6 7]) -> 8", "(max [0 9 6 5 6]) -> 9", "(max [3 4 5]) -> 5", "(max [9 5 9 2 7]) -> 9", "(max [9 4]) -> 9"], "time": 9.966069}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 0 8 9]) -> 9", "(max [6 0 0]) -> 6", "(max [8 2 2]) -> 8", "(max [8 2]) -> 8", "(max [1 2]) -> 2", "(max [2]) -> 2", "(max [7]) -> 7", "(max [0 8 9 1]) -> 9", "(max [4]) -> 4"], "time": 10.683069}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 5 0]) -> 7", "(max [6 4 8 2 5]) -> 8", "(max [8 8 7 5]) -> 8", "(max [8 4 5 4 1]) -> 8", "(max [9 5 4 9]) -> 9", "(max [4 6 9 1 4]) -> 9", "(max [6 0 1 5]) -> 6", "(max [5 2 3]) -> 5", "(max [0 0]) -> 0"], "time": 8.985307}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 9 7]) -> 9", "(max [5 6 1 6 6]) -> 6", "(max [1 3 7 9 2]) -> 9", "(max [5 0 9]) -> 9", "(max [0 4 7]) -> 7", "(max [9]) -> 9", "(max [5 7 9 4 7]) -> 9", "(max [2 7]) -> 7", "(max [4 6 1 7 3]) -> 7"], "time": 10.277702}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7]) -> 7", "(max [8 1 8]) -> 8", "(max [8 0 2]) -> 8", "(max [1 5 2 8 2]) -> 8", "(max [4 4]) -> 4", "(max [4 2 8 1]) -> 8", "(max [5 3 9 0]) -> 9", "(max [0 6 0 4]) -> 6", "(max [9]) -> 9"], "time": 6.680601}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 3]) -> 3", "(max [1 7 1]) -> 7", "(max [9]) -> 9", "(max [9 8 4]) -> 9", "(max [9 1]) -> 9", "(max [7 6 1 1]) -> 7", "(max [9 9 9 4]) -> 9", "(max [3 2]) -> 3", "(max [8 7 0 6 3]) -> 8"], "time": 9.732714}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 0]) -> 2", "(max [9 1 0 5 0]) -> 9", "(max [2 7]) -> 7", "(max [5 8 6]) -> 8", "(max [4 2 1 5]) -> 5", "(max [7 5 0 0 2]) -> 7", "(max [2 5 9 9]) -> 9", "(max [9 0 7 9 6]) -> 9", "(max [1]) -> 1"], "time": 7.033366}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 9 7 1 9]) -> 9", "(max [7]) -> 7", "(max [1 6 5 1]) -> 6", "(max [0 3 7 3]) -> 7", "(max [9 7 0 7 8]) -> 9", "(max [6 6 7]) -> 7", "(max [5 5 7 2]) -> 7", "(max [3]) -> 3", "(max [3 7 3 9]) -> 9"], "time": 11.643548}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 8 1]) -> 8", "(max [5 4 5 4]) -> 5", "(max [0 1 4]) -> 4", "(max [9]) -> 9", "(max [6 4]) -> 6", "(max [4]) -> 4", "(max [3 7 9]) -> 9", "(max [1 2 2 4 2]) -> 4", "(max [2 6 7]) -> 7"], "time": 8.4604}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 9 2]) -> 9", "(max [4 5 0 8 9]) -> 9", "(max [9 5 2 0]) -> 9", "(max [7 1]) -> 7", "(max [9 8]) -> 9", "(max [4]) -> 4", "(max [9 4 5]) -> 9", "(max [2 1 4 1 1]) -> 4", "(max [4 5]) -> 5"], "time": 8.573719}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 1]) -> 2", "(max [4 5 0 7]) -> 7", "(max [0]) -> 0", "(max [1]) -> 1", "(max [6 7]) -> 7", "(max [3 9 3 9]) -> 9", "(max [7]) -> 7", "(max [3 7 4 0 3]) -> 7", "(max [5]) -> 5"], "time": 4.969106}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 7 5 8 6]) -> 8", "(max [4 3 8 6 6]) -> 8", "(max [5 7]) -> 7", "(max [0 7]) -> 7", "(max [3 6 5 5]) -> 6", "(max [9 2 5 5 3]) -> 9", "(max [0]) -> 0", "(max [3]) -> 3", "(max [9 9 0]) -> 9"], "time": 10.097097}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 3 1 5 3]) -> 5", "(max [8 5 6 9 7]) -> 9", "(max [6 1 1]) -> 6", "(max [7]) -> 7", "(max [3]) -> 3", "(max [1 8 8 3 7]) -> 8", "(max [1 4 9 4]) -> 9", "(max [5 7 9 5]) -> 9", "(max [3 8 5 1 8]) -> 8"], "time": 7.539382}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 5]) -> 8", "(max [3 4 5 3 9]) -> 9", "(max [0 1 7 4]) -> 7", "(max [5]) -> 5", "(max [0 2 5 5 2]) -> 5", "(max [6]) -> 6", "(max [2 3]) -> 3", "(max [6 5]) -> 6", "(max [5 2]) -> 5"], "time": 4.886095}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3]) -> 3", "(max [7 1]) -> 7", "(max [4 5]) -> 5", "(max [6 3 7]) -> 7", "(max [0 0 2 3 6]) -> 6", "(max [8 9 3 8]) -> 9", "(max [1]) -> 1", "(max [2 4 0]) -> 4", "(max [5 3]) -> 5"], "time": 5.125426}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 1 0 6 6]) -> 8", "(max [8 5 5]) -> 8", "(max [2 9 4]) -> 9", "(max [0]) -> 0", "(max [9]) -> 9", "(max [8 2 4]) -> 8", "(max [5 1 3 1 2]) -> 5", "(max [3]) -> 3", "(max [7 1]) -> 7"], "time": 6.645595}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 1]) -> 1", "(max [0 9 0]) -> 9", "(max [6]) -> 6", "(max [6]) -> 6", "(max [7 0 2 5 9]) -> 9", "(max [4 9 4 6 2]) -> 9", "(max [7 7 2 4 1]) -> 7", "(max [6 8 0 7 8]) -> 8", "(max [6 5]) -> 6"], "time": 8.873328}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 7 3 8 5]) -> 8", "(max [0 4 1]) -> 4", "(max [7]) -> 7", "(max [8 8 0 9]) -> 9", "(max [6 3 8 7 8]) -> 8", "(max [4]) -> 4", "(max [9 4 5 6]) -> 9", "(max [4 9 4]) -> 9", "(max [3 7 2 0 8]) -> 8"], "time": 11.210559}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2]) -> 2", "(max [9]) -> 9", "(max [7 7 6 1]) -> 7", "(max [6 0 7]) -> 7", "(max [5 7 2 2 8]) -> 8", "(max [4 3]) -> 4", "(max [0 1 8 8 2]) -> 8", "(max [3]) -> 3", "(max [6 6]) -> 6"], "time": 9.345725}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 2]) -> 6", "(max [1 8 6 7]) -> 8", "(max [2 5 1 3]) -> 5", "(max [6 1 3 7]) -> 7", "(max [0 7 5]) -> 7", "(max [5 8 1]) -> 8", "(max [4 0 9 0]) -> 9", "(max [9 6 6 0 2]) -> 9", "(max [8 2 5 8 6]) -> 8"], "time": 8.170866}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 2 9]) -> 9", "(max [2 6 6 8]) -> 8", "(max [8]) -> 8", "(max [6 9 0]) -> 9", "(max [0 2 1 3]) -> 3", "(max [7 8 5 2 7]) -> 8", "(max [9 6 4]) -> 9", "(max [6 6 1]) -> 6", "(max [0 3 9]) -> 9"], "time": 10.416947}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 0 d) c d)) 0)) _) _)", "examples": ["(max [8 4 8 3 8]) -> 8", "(max [7 7 7]) -> 7", "(max [9 0 7 3]) -> 9", "(max [0 4 0]) -> 4", "(max [4]) -> 4", "(max [3]) -> 3", "(max [4 2]) -> 4", "(max [7 4 0 1]) -> 7", "(max [4 0]) -> 4"], "time": 9.808996}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6]) -> 6", "(max [9 9 9 6]) -> 9", "(max [0 4 7 9]) -> 9", "(max [7 1 2 2 5]) -> 7", "(max [7]) -> 7", "(max [0 9]) -> 9", "(max [1 7 8]) -> 8", "(max [2]) -> 2", "(max [2 8 6 8]) -> 8"], "time": 8.329841}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 6 5 8]) -> 8", "(max [6 5 7]) -> 7", "(max [7]) -> 7", "(max [9 1 6]) -> 9", "(max [3 9 2 8]) -> 9", "(max [9 7 1 8 2]) -> 9", "(max [3 3 5 6]) -> 6", "(max [2 0]) -> 2", "(max [6]) -> 6"], "time": 7.926027}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 7 8 5 2]) -> 8", "(max [5 8 2 0 4]) -> 8", "(max [5 0 0 1 6]) -> 6", "(max [3 6]) -> 6", "(max [0 5]) -> 5", "(max [7]) -> 7", "(max [0 9 9 9]) -> 9", "(max [0]) -> 0", "(max [0 1 5 4]) -> 5"], "time": 9.226763}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 4]) -> 4", "(max [5 7]) -> 7", "(max [4 0 2]) -> 4", "(max [0 4 3]) -> 4", "(max [4]) -> 4", "(max [3 3 8 8 2]) -> 8", "(max [3 7 6]) -> 7", "(max [1 9 5]) -> 9", "(max [3 7 4 0]) -> 7"], "time": 4.230126}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 8 1 2]) -> 8", "(max [2]) -> 2", "(max [6 6 9 5]) -> 9", "(max [8 3 0 3]) -> 8", "(max [4 4 2]) -> 4", "(max [2 7 9]) -> 9", "(max [6 3 9 2 8]) -> 9", "(max [2]) -> 2", "(max [1]) -> 1"], "time": 6.524466}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 9]) -> 9", "(max [4 2 3 7]) -> 7", "(max [2 1 5 8]) -> 8", "(max [1 9 9 8]) -> 9", "(max [3]) -> 3", "(max [5 7 7]) -> 7", "(max [0 7 2 2]) -> 7", "(max [1]) -> 1", "(max [6]) -> 6"], "time": 3.18546}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 9 8]) -> 9", "(max [7 1 0]) -> 7", "(max [4 2 1 6 1]) -> 6", "(max [3 0]) -> 3", "(max [1 0 3 2]) -> 3", "(max [6 0 8 8]) -> 8", "(max [4 9 7 1]) -> 9", "(max [1 1 7]) -> 7", "(max [1 6 2]) -> 6"], "time": 5.305095}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 5 3 7 5]) -> 7", "(max [9]) -> 9", "(max [5 8 5]) -> 8", "(max [8]) -> 8", "(max [1 4 7 7]) -> 7", "(max [6 9]) -> 9", "(max [8 3 7 8]) -> 8", "(max [8 2 5 1]) -> 8", "(max [4 3 2 2 9]) -> 9"], "time": 5.098599}
