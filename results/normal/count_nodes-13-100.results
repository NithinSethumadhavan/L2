{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {9 {8}}}) -> 3", "(count_nodes {3 {5}}) -> 2", "(count_nodes {1 {3}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {7 {3 {0 {7}}}}) -> 4", "(count_nodes {7 {7}}) -> 2", "(count_nodes {0 {0 {2} {3}}}) -> 4", "(count_nodes {4}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.097295, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {2 {2}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {6 {1 {2}} {3 {5}}}) -> 5", "(count_nodes {9 {8} {2 {8} {2 {7} {4}}}}) -> 7", "(count_nodes {6 {9 {4} {5}} {7 {5} {9}}}) -> 7", "(count_nodes {8 {9 {9 {0} {0}}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {8 {6 {2 {7} {4}}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {0}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.120557, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {2}) -> 1", "(count_nodes {3 {6} {2 {8}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {8}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ c 1)) 1)) 0)) _) _)", "time": 1.057833, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {4 {5}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {8 {4} {9}}) -> 3", "(count_nodes {5}) -> 1", "(count_nodes {5 {6 {1} {7}} {7}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {1 {3 {6} {0 {2} {3}}} {5 {5 {3}} {4 {9}}}}) -> 11", "(count_nodes {8 {7} {2}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.117276, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {8 {6}}}) -> 3", "(count_nodes {1}) -> 1", "(count_nodes {4 {4 {1}}}) -> 3", "(count_nodes {5 {4 {1 {3} {0}} {7 {1} {8}}}}) -> 8", "(count_nodes {8 {4}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {2 {6} {3}}) -> 3", "(count_nodes {4}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.025001, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {8}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {9}) -> 1", "(count_nodes {1 {3} {6}}) -> 3", "(count_nodes {6}) -> 1", "(count_nodes {6 {0} {5 {3} {4}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {6 {1 {0}} {3}}) -> 4", "(count_nodes {6 {8}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.151729, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {8 {8} {6}} {5 {2} {1}}}) -> 7", "(count_nodes {}) -> 0", "(count_nodes {2 {6} {9}}) -> 3", "(count_nodes {5}) -> 1", "(count_nodes {9 {3}}) -> 2", "(count_nodes {2 {4}}) -> 2", "(count_nodes {9 {2 {5}}}) -> 3", "(count_nodes {5 {2} {2 {4 {6} {3}} {0}}}) -> 7", "(count_nodes {6 {0 {6 {6}} {9 {8}}} {6 {7}}}) -> 8", "(count_nodes {}) -> 0", "(count_nodes {0 {2 {2} {2 {4} {7}}}}) -> 6"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.126648, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {7 {6 {8} {2}}} {2 {0} {9 {3}}}}) -> 9", "(count_nodes {8 {4 {0 {7} {7}} {0 {4} {1}}}}) -> 8", "(count_nodes {3 {6 {7}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {7 {9} {7 {6}}}) -> 4", "(count_nodes {6 {2}}) -> 2", "(count_nodes {3}) -> 1", "(count_nodes {9 {3 {4 {8}}} {3}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {8 {9}}) -> 2", "(count_nodes {4}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.209193, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {5}) -> 1", "(count_nodes {0 {6}}) -> 2", "(count_nodes {2 {3 {9}}}) -> 3", "(count_nodes {3}) -> 1", "(count_nodes {9 {5 {8 {7} {4}}}}) -> 5", "(count_nodes {7}) -> 1", "(count_nodes {9 {0 {8}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {0 {6 {8}}}) -> 3", "(count_nodes {4 {6 {4 {8}} {7 {0} {8}}} {7 {0 {6} {4}}}}) -> 11"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.185535, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {5}}) -> 2", "(count_nodes {0 {1 {2 {3} {9}} {1}}}) -> 6", "(count_nodes {7 {2} {4 {6 {6} {4}}}}) -> 6", "(count_nodes {6 {7} {4}}) -> 3", "(count_nodes {5 {2 {2}} {4}}) -> 4", "(count_nodes {3 {3 {2 {8} {7}}}}) -> 5", "(count_nodes {9}) -> 1", "(count_nodes {5 {7} {6}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.215557, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {0} {3 {3}}}) -> 4", "(count_nodes {4 {2} {2}}) -> 3", "(count_nodes {6 {2} {3}}) -> 3", "(count_nodes {6 {6 {9 {1} {9}} {6 {3} {9}}} {6 {6 {9} {5}} {0 {3}}}}) -> 14", "(count_nodes {0 {4}}) -> 2", "(count_nodes {3}) -> 1", "(count_nodes {7 {6 {3}} {4}}) -> 4", "(count_nodes {7 {8 {0}} {6}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {4 {8 {5}}}) -> 3", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.204873, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {2}) -> 1", "(count_nodes {0}) -> 1", "(count_nodes {1 {5 {7 {3} {2}}} {0 {9 {1} {2}}}}) -> 9", "(count_nodes {4}) -> 1", "(count_nodes {6 {7 {6}} {1 {7} {6}}}) -> 6", "(count_nodes {8 {0} {8 {6}}}) -> 4", "(count_nodes {0 {5} {2}}) -> 3", "(count_nodes {4 {6 {5} {2}}}) -> 4", "(count_nodes {1}) -> 1", "(count_nodes {8}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.22589, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8 {7} {7}}) -> 3", "(count_nodes {3}) -> 1", "(count_nodes {3 {2 {3} {9}}}) -> 4", "(count_nodes {4}) -> 1", "(count_nodes {1 {1 {8 {0}}} {5 {8 {1} {3}}}}) -> 8", "(count_nodes {7 {8 {7} {9}}}) -> 4", "(count_nodes {3 {4 {9 {9}}} {9 {7 {4}} {3}}}) -> 8", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2 {8} {2}}) -> 3", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.250424, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {4 {0}}) -> 2", "(count_nodes {5 {5}}) -> 2", "(count_nodes {7 {8 {3} {1}} {9 {7} {7}}}) -> 7", "(count_nodes {}) -> 0", "(count_nodes {4 {5}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {3}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.211356, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {1 {9 {3 {5} {8}} {2 {8} {7}}}}) -> 8", "(count_nodes {7 {9 {3} {1}}}) -> 4", "(count_nodes {4}) -> 1", "(count_nodes {8}) -> 1", "(count_nodes {6}) -> 1", "(count_nodes {2 {2 {8} {7 {0} {8}}} {9 {2 {0}}}}) -> 9", "(count_nodes {5 {5 {7}} {6}}) -> 4", "(count_nodes {9}) -> 1", "(count_nodes {3 {5} {6}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.296066, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2 {5 {2 {1} {1}}} {2 {7 {9}}}}) -> 8", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {8 {2 {1}}}) -> 3", "(count_nodes {1 {4} {5}}) -> 3", "(count_nodes {7}) -> 1", "(count_nodes {3 {6}}) -> 2", "(count_nodes {5 {3 {2} {0}} {8}}) -> 5", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.407562, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {1}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {0 {6}}) -> 2", "(count_nodes {6}) -> 1", "(count_nodes {3 {2} {5 {3}}}) -> 4", "(count_nodes {1 {9} {4}}) -> 3", "(count_nodes {8 {6 {5}} {9}}) -> 4", "(count_nodes {6 {3}}) -> 2", "(count_nodes {7 {9} {6}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.81693, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {0 {1}}) -> 2", "(count_nodes {2}) -> 1", "(count_nodes {0 {3 {4}}}) -> 3", "(count_nodes {8}) -> 1", "(count_nodes {1 {0 {1} {8}} {7 {9}}}) -> 6", "(count_nodes {3}) -> 1", "(count_nodes {0 {8}}) -> 2", "(count_nodes {0}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.805408, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {9 {5} {5}}) -> 3", "(count_nodes {0}) -> 1", "(count_nodes {9 {0 {9}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {2 {7}}) -> 2", "(count_nodes {3 {6} {4 {8}}}) -> 4", "(count_nodes {2 {8} {4}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {4 {3}}) -> 2", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.830523, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {7 {8}}) -> 2", "(count_nodes {5}) -> 1", "(count_nodes {3}) -> 1", "(count_nodes {2 {6} {2}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {3 {7 {2} {3}} {9}}) -> 5", "(count_nodes {9}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {8 {1 {7} {5 {0}}} {3}}) -> 6"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.849454, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {9 {8} {7}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6 {5}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.963763, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2 {9}}) -> 2", "(count_nodes {8}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {5 {8 {9}} {8}}) -> 4", "(count_nodes {2}) -> 1", "(count_nodes {0 {3}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {4 {7 {0}}}) -> 3", "(count_nodes {7 {2}}) -> 2", "(count_nodes {6 {0}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.809971, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {9 {8 {0} {1}}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {9 {0}}) -> 2", "(count_nodes {5 {3} {4}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {9 {2 {1} {9}} {2}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {0 {9 {7 {9} {1}} {5 {6} {8}}}}) -> 8", "(count_nodes {4 {4 {2 {1} {4}} {2 {5}}} {5}}) -> 8", "(count_nodes {1 {0 {0} {4}}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.974097, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {7} {5}}) -> 3", "(count_nodes {5 {4 {1}} {4 {4} {6}}}) -> 6", "(count_nodes {8}) -> 1", "(count_nodes {4 {8}}) -> 2", "(count_nodes {4}) -> 1", "(count_nodes {8 {0}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {0 {0} {4}}) -> 3", "(count_nodes {9 {1 {3} {2}} {3 {9}}}) -> 6", "(count_nodes {4}) -> 1", "(count_nodes {1 {7} {6}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.13718, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {9 {3}}) -> 2", "(count_nodes {4 {7 {3 {5}}} {7 {8}}}) -> 6", "(count_nodes {4}) -> 1", "(count_nodes {9 {6} {3}}) -> 3", "(count_nodes {7 {6 {0} {0}}}) -> 4", "(count_nodes {2 {4}}) -> 2", "(count_nodes {6 {2}}) -> 2", "(count_nodes {0}) -> 1", "(count_nodes {2 {4 {9}}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.254357, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {4 {8 {8}}}}) -> 4", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2 {9}}) -> 2", "(count_nodes {4}) -> 1", "(count_nodes {7}) -> 1", "(count_nodes {2 {6} {1 {9} {4}}}) -> 5", "(count_nodes {1}) -> 1", "(count_nodes {6 {2 {4 {6} {2}} {9 {9}}}}) -> 7", "(count_nodes {9 {8} {7}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.398556, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {2 {3}} {6 {0} {5}}}) -> 6", "(count_nodes {1 {1 {2} {8}}}) -> 4", "(count_nodes {7}) -> 1", "(count_nodes {9 {3} {1}}) -> 3", "(count_nodes {7}) -> 1", "(count_nodes {3 {5}}) -> 2", "(count_nodes {2 {7} {5}}) -> 3", "(count_nodes {4}) -> 1", "(count_nodes {9}) -> 1", "(count_nodes {2 {5 {0} {7}}}) -> 4", "(count_nodes {0 {4 {2}}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.414641, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {6 {1} {7}} {0 {7} {7}}}) -> 7", "(count_nodes {}) -> 0", "(count_nodes {0 {6}}) -> 2", "(count_nodes {7}) -> 1", "(count_nodes {4 {1 {2} {5}} {6 {3} {4}}}) -> 7", "(count_nodes {8 {5 {8} {0}}}) -> 4", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {2 {5} {8}}) -> 3", "(count_nodes {8 {4}}) -> 2", "(count_nodes {8 {4} {1}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.433825, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8 {8 {2} {0}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {3 {4 {6} {2}}}) -> 4", "(count_nodes {2}) -> 1", "(count_nodes {9 {2}}) -> 2", "(count_nodes {2}) -> 1", "(count_nodes {7}) -> 1", "(count_nodes {0 {5}}) -> 2", "(count_nodes {6 {5} {8}}) -> 3", "(count_nodes {2 {6}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.267147, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {7}}) -> 2", "(count_nodes {1 {7}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2 {6} {1 {7} {3 {3}}}}) -> 6", "(count_nodes {3 {6 {4}}}) -> 3", "(count_nodes {5 {2}}) -> 2", "(count_nodes {2 {8 {7}} {9}}) -> 4", "(count_nodes {2}) -> 1", "(count_nodes {7 {4 {7}} {4 {3}}}) -> 5", "(count_nodes {7}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.532192, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {2}) -> 1", "(count_nodes {8}) -> 1", "(count_nodes {8}) -> 1", "(count_nodes {9 {9} {4 {4} {2}}}) -> 5", "(count_nodes {1}) -> 1", "(count_nodes {8}) -> 1", "(count_nodes {4 {7 {2 {5}} {3 {3} {6}}} {5}}) -> 8", "(count_nodes {}) -> 0", "(count_nodes {5 {0 {7 {9}}} {5}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.600169, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {5 {0 {4}}}) -> 3", "(count_nodes {2 {9}}) -> 2", "(count_nodes {2 {4} {3}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {7 {3 {0 {0}} {7 {4}}}}) -> 6", "(count_nodes {0 {6 {4}}}) -> 3", "(count_nodes {9}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.355122, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3 {1}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {3 {0} {1 {6} {3}}}) -> 5", "(count_nodes {3 {7 {9} {8}} {8 {3} {9}}}) -> 7", "(count_nodes {9 {0 {4}} {8 {0}}}) -> 5", "(count_nodes {7}) -> 1", "(count_nodes {9}) -> 1", "(count_nodes {8 {6}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.489198, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {0}) -> 1", "(count_nodes {6 {9 {9 {0} {4}}}}) -> 5", "(count_nodes {4 {1} {4}}) -> 3", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {6 {0 {3}} {8 {5} {3}}}) -> 6", "(count_nodes {4 {5 {1}}}) -> 3", "(count_nodes {5}) -> 1", "(count_nodes {4 {7 {7 {4}} {1 {0} {7}}} {4 {3 {9} {6}} {4}}}) -> 12", "(count_nodes {9 {6 {5}}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.66248, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {6 {3} {8 {6} {8}}} {5 {1 {6}} {9 {8} {2}}}}) -> 12", "(count_nodes {2 {1 {2} {7}} {3 {8 {6} {6}} {3}}}) -> 9", "(count_nodes {3}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {0 {5}}) -> 2", "(count_nodes {2 {5} {4}}) -> 3", "(count_nodes {3}) -> 1", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {3 {1}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.659837, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {5 {8 {9 {4} {9}}} {4 {7} {2 {8} {1}}}}) -> 10", "(count_nodes {}) -> 0", "(count_nodes {1 {8 {2 {8}} {9 {5} {7}}} {6}}) -> 8", "(count_nodes {1 {8 {9}} {9 {7} {1}}}) -> 6", "(count_nodes {4}) -> 1", "(count_nodes {5 {0 {3}} {3}}) -> 4", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {8 {1 {8 {8}} {6}}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.778727, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {7} {0 {9}}}) -> 4", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {6 {1 {6 {7} {9}} {5 {5}}}}) -> 7", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {7 {0} {8 {7} {9}}}) -> 5", "(count_nodes {1}) -> 1", "(count_nodes {1 {9}}) -> 2", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.595472, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3 {4}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {4 {9 {6}}}) -> 3", "(count_nodes {4 {6}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {2 {5} {4}}) -> 3", "(count_nodes {2 {6 {0}}}) -> 3", "(count_nodes {5 {9 {4} {4}} {3}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.655297, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {0 {1}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {9 {4}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {6 {1 {5}} {6 {9}}}) -> 5", "(count_nodes {8}) -> 1", "(count_nodes {1 {9 {7} {3 {1} {5}}} {4 {6} {7 {1}}}}) -> 10", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.438202, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {8 {0} {2 {1} {7}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {2 {2} {9}}) -> 3", "(count_nodes {5 {6 {8} {1}}}) -> 4", "(count_nodes {1 {1 {5}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {4 {7 {4} {5}} {9}}) -> 5", "(count_nodes {8 {6 {2} {8}}}) -> 4", "(count_nodes {3 {6 {3}}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.669182, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {6 {0}}}) -> 3", "(count_nodes {9}) -> 1", "(count_nodes {5 {0 {5 {1}} {8 {4}}} {9 {5 {7} {5}} {8}}}) -> 11", "(count_nodes {3 {7}}) -> 2", "(count_nodes {5 {1}}) -> 2", "(count_nodes {0 {4 {1}}}) -> 3", "(count_nodes {1 {6 {1} {5 {4}}}}) -> 5", "(count_nodes {4 {2}}) -> 2", "(count_nodes {2}) -> 1", "(count_nodes {0 {2 {5}} {4 {1} {0}}}) -> 6", "(count_nodes {9}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.426392, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {7 {1 {7}} {0}}) -> 4", "(count_nodes {1}) -> 1", "(count_nodes {0 {6}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {8 {5 {4}} {7 {6 {4}}}}) -> 6", "(count_nodes {4 {8 {2} {3}}}) -> 4", "(count_nodes {0}) -> 1", "(count_nodes {8 {2}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.204092, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {5 {8} {0}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {1 {3}}) -> 2", "(count_nodes {9 {6}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {8 {0 {6}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {3}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.627899, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {2 {7 {3 {9} {5}} {3}} {5 {1} {5 {3}}}}) -> 10", "(count_nodes {9 {4} {4}}) -> 3", "(count_nodes {6}) -> 1", "(count_nodes {2 {0 {7} {4}} {7 {4}}}) -> 6", "(count_nodes {7 {6} {9}}) -> 3", "(count_nodes {2 {3 {1}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {2 {9 {1} {4}} {4 {6}}}) -> 6", "(count_nodes {4}) -> 1", "(count_nodes {8}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.647461, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {4 {8}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {1}) -> 1", "(count_nodes {9}) -> 1", "(count_nodes {5}) -> 1", "(count_nodes {8 {6}}) -> 2", "(count_nodes {0 {5 {0} {4 {2}}} {3}}) -> 6", "(count_nodes {9 {5} {8}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.218942, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {4 {1 {3}} {9}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {2 {3 {1 {9} {7}}} {9 {2} {7}}}) -> 8", "(count_nodes {4}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {8 {0 {3} {0}} {8 {8}}}) -> 6", "(count_nodes {4}) -> 1", "(count_nodes {6}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.445216, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8 {1 {4} {9 {9}}} {9 {2 {7} {3}}}}) -> 9", "(count_nodes {0}) -> 1", "(count_nodes {8 {8 {9}} {6 {1} {2}}}) -> 6", "(count_nodes {7 {2}}) -> 2", "(count_nodes {1}) -> 1", "(count_nodes {3}) -> 1", "(count_nodes {4 {6} {6}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {8 {4}}) -> 2", "(count_nodes {1 {1} {2}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.854896, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1 {5}}) -> 2", "(count_nodes {8 {8 {6} {1}} {2 {0}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {0 {4 {1}} {9 {3}}}) -> 5", "(count_nodes {6 {0}}) -> 2", "(count_nodes {4}) -> 1", "(count_nodes {9}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.626288, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {1 {9}}) -> 2", "(count_nodes {7}) -> 1", "(count_nodes {9 {7}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {0 {4}}) -> 2", "(count_nodes {4 {4 {0}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {3 {4} {2 {8 {1}}}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.634067, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {8 {1 {4 {7} {2}} {6}}}) -> 6", "(count_nodes {4 {8}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {6 {4 {1} {9}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {6 {7 {1 {7}}} {8 {5} {7}}}) -> 7", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {4 {4 {8} {7}}}) -> 4", "(count_nodes {5 {6 {0}} {2 {4}}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.854277, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1 {8 {4} {3}} {8 {0} {6 {2}}}}) -> 8", "(count_nodes {1}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {2 {7 {2}}}) -> 3", "(count_nodes {3 {4 {2}}}) -> 3", "(count_nodes {9}) -> 1", "(count_nodes {7}) -> 1", "(count_nodes {8}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.733607, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {8 {1} {2}}) -> 3", "(count_nodes {5}) -> 1", "(count_nodes {8}) -> 1", "(count_nodes {3}) -> 1", "(count_nodes {2}) -> 1", "(count_nodes {0}) -> 1", "(count_nodes {7 {9}}) -> 2", "(count_nodes {3}) -> 1", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 1.484328, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {5 {5} {3}}) -> 3", "(count_nodes {1 {0} {1}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6 {9 {7} {6}} {8}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6 {9}}) -> 2", "(count_nodes {2 {3}}) -> 2", "(count_nodes {8}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.151567, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {0 {9} {3}} {7 {8} {8}}}) -> 7", "(count_nodes {7 {6 {6} {2}} {0}}) -> 5", "(count_nodes {7}) -> 1", "(count_nodes {3 {1 {5} {0 {0}}}}) -> 5", "(count_nodes {8}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {8 {2}}) -> 2", "(count_nodes {9 {0}}) -> 2", "(count_nodes {6 {3}}) -> 2", "(count_nodes {1 {6}}) -> 2", "(count_nodes {1 {0 {2}}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.879537, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {1 {3} {9 {3}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {7 {6}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f f)) 1)) 0)) _) _)", "time": 0.615609, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {7}) -> 1", "(count_nodes {4}) -> 1", "(count_nodes {9 {8 {3 {9} {5}} {1 {0} {7}}} {3 {5 {5}} {1 {5}}}}) -> 13", "(count_nodes {9 {9} {7 {6 {8} {2}} {0}}}) -> 7", "(count_nodes {4 {4}}) -> 2", "(count_nodes {7 {0}}) -> 2", "(count_nodes {8}) -> 1", "(count_nodes {1 {1}}) -> 2", "(count_nodes {3 {8}}) -> 2", "(count_nodes {8}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.422811, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {2}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {7 {4 {6}} {9 {5} {3}}}) -> 6", "(count_nodes {1 {0} {3}}) -> 3", "(count_nodes {7 {4}}) -> 2", "(count_nodes {7 {0 {5}} {5 {0} {4}}}) -> 6", "(count_nodes {9 {3} {0}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {7 {4 {2}}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.253976, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6 {3} {2 {8} {5}}}) -> 5", "(count_nodes {3 {1 {3}}}) -> 3", "(count_nodes {1}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {7 {4 {3 {7}} {8 {8}}}}) -> 6", "(count_nodes {4 {0} {7 {3 {4}}}}) -> 5", "(count_nodes {3 {1 {8 {3} {6}}} {3 {1 {5} {4}} {3}}}) -> 10", "(count_nodes {5 {2} {6 {8} {5}}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.824588, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {4 {4 {6} {2}}} {2 {6}}}) -> 7", "(count_nodes {6 {3} {8}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {9 {2 {6 {6} {8}}} {5 {5 {4}}}}) -> 8", "(count_nodes {5}) -> 1", "(count_nodes {2 {4 {1}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {3 {5 {9} {6}}}) -> 4", "(count_nodes {9 {1} {7 {4} {8}}}) -> 5", "(count_nodes {9 {0 {8 {0}} {0 {5} {6}}} {3 {4}}}) -> 9", "(count_nodes {3}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.344805, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {3 {7}}}) -> 3", "(count_nodes {4 {8} {2}}) -> 3", "(count_nodes {0 {5 {1}} {2 {9}}}) -> 5", "(count_nodes {9 {4 {2 {1}}} {4 {0 {2}}}}) -> 7", "(count_nodes {0 {0 {9} {5}}}) -> 4", "(count_nodes {6 {0 {6 {2}} {5}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {9}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.064101, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {8}) -> 1", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {5 {8 {2 {2}}} {0}}) -> 5", "(count_nodes {2 {7} {2 {3 {0} {9}}}}) -> 6"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.907921, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {2 {4}}}) -> 3", "(count_nodes {3 {6 {6} {1}} {5 {5 {8} {0}}}}) -> 8", "(count_nodes {9 {7 {7}} {5}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {0 {2}}) -> 2", "(count_nodes {2 {8 {8} {6}} {3}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {0 {1 {4} {9}} {6 {0} {6}}}) -> 7", "(count_nodes {0 {3}}) -> 2", "(count_nodes {5 {8 {1}}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.876628, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {7}}) -> 2", "(count_nodes {2}) -> 1", "(count_nodes {3 {5} {9}}) -> 3", "(count_nodes {7 {1}}) -> 2", "(count_nodes {2}) -> 1", "(count_nodes {0 {1 {2 {6} {7}} {9}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {1 {3} {1 {0}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {7 {5 {8} {1}}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.898306, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {0 {7} {5}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {0 {9 {3 {3} {5}}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1 {7} {7}}) -> 3", "(count_nodes {1}) -> 1", "(count_nodes {4 {6}}) -> 2", "(count_nodes {5}) -> 1", "(count_nodes {2 {5} {0}}) -> 3", "(count_nodes {8 {0 {1} {6}} {2}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.143035, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {4}}) -> 2", "(count_nodes {8 {3} {3}}) -> 3", "(count_nodes {0 {4 {9}} {3 {8} {8}}}) -> 6", "(count_nodes {2 {3 {7} {5 {8} {1}}}}) -> 6", "(count_nodes {3}) -> 1", "(count_nodes {9 {0 {2 {3}}}}) -> 4", "(count_nodes {6}) -> 1", "(count_nodes {3 {4}}) -> 2", "(count_nodes {4 {4}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.894204, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {9 {4 {3}} {7 {4} {3}}}) -> 6", "(count_nodes {5 {7 {0}} {7 {1} {7}}}) -> 6", "(count_nodes {8}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {9 {5} {7}}) -> 3", "(count_nodes {6}) -> 1", "(count_nodes {9}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.986436, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {3}) -> 1", "(count_nodes {8 {3 {8} {2}} {8 {8}}}) -> 6", "(count_nodes {3 {8} {0}}) -> 3", "(count_nodes {6}) -> 1", "(count_nodes {0 {8 {0} {1}} {9 {5} {9}}}) -> 7", "(count_nodes {4}) -> 1", "(count_nodes {0}) -> 1", "(count_nodes {5 {1}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {5 {5} {7}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.869047, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8 {7 {7}}}) -> 3", "(count_nodes {4 {6 {9}}}) -> 3", "(count_nodes {0 {4 {4 {0}}} {2 {1 {0} {5}} {8}}}) -> 9", "(count_nodes {3}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {5 {4}}) -> 2", "(count_nodes {9 {1} {8}}) -> 3", "(count_nodes {4 {5}}) -> 2", "(count_nodes {4}) -> 1", "(count_nodes {5 {8 {3}} {2 {2}}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.101212, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {3}}) -> 2", "(count_nodes {5 {9}}) -> 2", "(count_nodes {4 {6}}) -> 2", "(count_nodes {5 {9 {8 {3} {3}}}}) -> 5", "(count_nodes {4}) -> 1", "(count_nodes {7 {0}}) -> 2", "(count_nodes {3 {3} {2}}) -> 3", "(count_nodes {3 {5 {1} {2}}}) -> 4", "(count_nodes {7 {2 {7} {8}}}) -> 4", "(count_nodes {7 {9} {4}}) -> 3", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.005487, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {7} {9 {2 {2}}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {3 {4 {9 {8}}} {8}}) -> 5", "(count_nodes {0 {8}}) -> 2", "(count_nodes {8 {8} {8 {4}}}) -> 4", "(count_nodes {4 {2 {6}} {5 {7}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {8 {7}}) -> 2", "(count_nodes {9 {2} {1}}) -> 3", "(count_nodes {6 {0}}) -> 2", "(count_nodes {2 {1} {4}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.903148, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {9 {3 {6} {2}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {0 {8 {4 {2}} {2 {6}}} {1}}) -> 7", "(count_nodes {3 {8} {0}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {5}) -> 1", "(count_nodes {8 {1} {3}}) -> 3", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.960728, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {4 {3}}) -> 2", "(count_nodes {5 {7} {2}}) -> 3", "(count_nodes {3}) -> 1", "(count_nodes {9}) -> 1", "(count_nodes {8 {6 {1 {3} {2}}} {0 {2 {4}}}}) -> 8", "(count_nodes {6 {8 {0}} {1}}) -> 4", "(count_nodes {5}) -> 1", "(count_nodes {9 {5} {9 {9}}}) -> 4", "(count_nodes {4 {7 {0 {9}} {1}} {7 {2 {2} {1}} {8 {8} {2}}}}) -> 12", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.106668, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {7}}) -> 2", "(count_nodes {5}) -> 1", "(count_nodes {2 {6} {2}}) -> 3", "(count_nodes {6}) -> 1", "(count_nodes {2 {2} {8 {0} {4}}}) -> 5", "(count_nodes {3 {8 {8 {9} {5}}}}) -> 5", "(count_nodes {7}) -> 1", "(count_nodes {5 {1 {3}}}) -> 3", "(count_nodes {3}) -> 1", "(count_nodes {7}) -> 1", "(count_nodes {9 {8}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.137822, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {5} {4}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {6 {5} {8 {0} {6}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {2}) -> 1", "(count_nodes {2 {0 {9} {4}}}) -> 4", "(count_nodes {8 {0 {3 {0}} {2 {4} {5}}}}) -> 7", "(count_nodes {1}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.778248, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {6 {4}} {0 {2} {0}}}) -> 6", "(count_nodes {8 {9} {0}}) -> 3", "(count_nodes {2 {9}}) -> 2", "(count_nodes {5 {1} {0 {5 {8}} {7 {6} {1}}}}) -> 8", "(count_nodes {5}) -> 1", "(count_nodes {6}) -> 1", "(count_nodes {4}) -> 1", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {4 {0 {8} {8}} {3}}) -> 5", "(count_nodes {5}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.302307, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {6 {2 {8}}}) -> 3", "(count_nodes {5 {7}}) -> 2", "(count_nodes {7 {0 {2}}}) -> 3", "(count_nodes {5}) -> 1", "(count_nodes {1}) -> 1", "(count_nodes {4 {5 {8}} {0 {2} {6}}}) -> 6", "(count_nodes {7 {7} {0}}) -> 3", "(count_nodes {9 {2} {6 {3 {3}}}}) -> 5", "(count_nodes {7 {9 {7 {4}} {0}}}) -> 5", "(count_nodes {6}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.796367, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {7}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {0 {7}}) -> 2", "(count_nodes {4 {1 {6 {8} {4}}}}) -> 5", "(count_nodes {4 {4 {3}}}) -> 3", "(count_nodes {3 {3}}) -> 2", "(count_nodes {8 {8 {6}} {0 {2 {2} {9}}}}) -> 7", "(count_nodes {1}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.841748, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {5}}) -> 2", "(count_nodes {2 {2}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {0 {9}}) -> 2", "(count_nodes {8}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {0 {8 {1}}}) -> 3", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 e)) 1)) 0)) _) _)", "time": 1.222431, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {2 {4} {8}}) -> 3", "(count_nodes {7 {6}}) -> 2", "(count_nodes {0 {6 {7 {7}}}}) -> 4", "(count_nodes {3 {6} {8}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {5 {6} {1 {9 {3} {5}}}}) -> 6", "(count_nodes {5}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.786675, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {5 {2 {0 {9} {5}} {7 {7} {9}}} {3 {1}}}) -> 10", "(count_nodes {3 {0 {6} {2}} {3 {5} {4}}}) -> 7", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {4 {4} {0 {7} {5}}}) -> 5", "(count_nodes {3 {8} {1}}) -> 3", "(count_nodes {1}) -> 1", "(count_nodes {2 {1 {5} {1}}}) -> 4", "(count_nodes {3 {2 {3} {3}} {5 {2}}}) -> 6", "(count_nodes {3}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.993577, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {0 {6 {8 {9}}}}) -> 4", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {9 {5 {7 {7} {9}} {3 {3}}} {3 {2}}}) -> 9", "(count_nodes {3}) -> 1", "(count_nodes {8 {2}}) -> 2", "(count_nodes {4}) -> 1", "(count_nodes {7 {6 {8} {2}}}) -> 4", "(count_nodes {2 {0 {2}} {8 {5} {5}}}) -> 6"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.836074, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {0 {5} {0}}}) -> 4", "(count_nodes {1}) -> 1", "(count_nodes {8}) -> 1", "(count_nodes {7 {9} {5 {8 {8}} {5 {0}}}}) -> 7", "(count_nodes {5 {3} {6}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {5 {4}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {2 {1} {9}}) -> 3", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.144973, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {2 {3 {2 {6}} {0 {2} {9}}} {6 {8 {8}} {6}}}) -> 11", "(count_nodes {7 {7} {7}}) -> 3", "(count_nodes {8 {7} {6}}) -> 3", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {5 {9} {7}}) -> 3", "(count_nodes {5 {4 {4}} {4 {5}}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.022888, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {5 {1 {8 {0}}} {3}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {8 {2} {3}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {4 {7}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {5 {4 {1} {1}}}) -> 4", "(count_nodes {9 {3} {4 {6 {3}} {5 {9}}}}) -> 7", "(count_nodes {4 {5} {1 {5 {9}} {2 {5}}}}) -> 7", "(count_nodes {1 {3}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.884268, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {0 {3} {6}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {3 {7}}) -> 2", "(count_nodes {9 {0} {3}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {5 {2}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {5 {6 {0} {1 {8} {0}}} {8}}) -> 7"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.762291, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8 {2}}) -> 2", "(count_nodes {5 {2} {0}}) -> 3", "(count_nodes {7 {7 {2} {1}}}) -> 4", "(count_nodes {6 {1 {5} {1}} {8 {8} {0}}}) -> 7", "(count_nodes {3 {6 {7} {5}}}) -> 4", "(count_nodes {4 {7 {7} {0}}}) -> 4", "(count_nodes {4 {7 {3}} {2}}) -> 4", "(count_nodes {7}) -> 1", "(count_nodes {9 {5 {3}}}) -> 3", "(count_nodes {6 {0 {1}}}) -> 3", "(count_nodes {6 {5}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.021776, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {2}}) -> 2", "(count_nodes {6}) -> 1", "(count_nodes {8}) -> 1", "(count_nodes {0 {9} {3 {4}}}) -> 4", "(count_nodes {6 {1 {6}} {8 {9} {0}}}) -> 6", "(count_nodes {4 {7} {0 {9}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {9 {2}}) -> 2", "(count_nodes {1}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.724702, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {7 {0 {5} {1}}} {9 {1 {9}}}}) -> 8", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1 {9 {8} {8}}}) -> 4", "(count_nodes {3}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6 {6}}) -> 2", "(count_nodes {0 {2}}) -> 2", "(count_nodes {8}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.341038, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {6 {8 {0 {7} {5}} {4}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {4 {4 {0 {4} {4}}} {7 {7 {4} {6}}}}) -> 9", "(count_nodes {8 {2}}) -> 2", "(count_nodes {9}) -> 1", "(count_nodes {4 {0} {9}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {1 {7 {8}}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.933013, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {3 {1 {4}} {8 {7}}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {3}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {1 {3 {9} {8}} {3}}) -> 5", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.019695, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {7} {2}}) -> 3", "(count_nodes {9 {3} {0}}) -> 3", "(count_nodes {2 {1} {2}}) -> 3", "(count_nodes {3}) -> 1", "(count_nodes {3}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {7 {1 {1} {7}} {7 {0}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.481135, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {4 {0} {6 {2} {3}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {3 {3 {7 {6} {3}}} {1 {7 {2}} {1 {8}}}}) -> 10", "(count_nodes {}) -> 0", "(count_nodes {5 {2 {5}}}) -> 3", "(count_nodes {1 {7}}) -> 2", "(count_nodes {1 {9 {6} {0}} {5 {8} {9}}}) -> 7", "(count_nodes {4}) -> 1", "(count_nodes {9 {7} {9}}) -> 3", "(count_nodes {4 {0 {7} {0}} {5 {1 {5} {7}} {0 {4} {2}}}}) -> 11"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.835559, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {3 {9}}}) -> 3", "(count_nodes {6}) -> 1", "(count_nodes {1 {5}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {0 {2}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6 {8} {0 {5} {5}}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.568413, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {7 {0}}) -> 2", "(count_nodes {3 {8}}) -> 2", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {7 {6}}) -> 2", "(count_nodes {0}) -> 1", "(count_nodes {7 {9 {7} {2 {2} {0}}} {3}}) -> 7", "(count_nodes {3 {0}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.480969, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {9 {9 {7} {9}} {9}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {3 {8}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {6 {5 {0 {4}} {4 {0}}} {9}}) -> 7", "(count_nodes {0 {6}}) -> 2", "(count_nodes {6 {8 {0 {5} {6}} {8 {4} {1}}}}) -> 8", "(count_nodes {}) -> 0", "(count_nodes {5 {0 {3 {6}} {7}} {9 {9}}}) -> 7", "(count_nodes {4 {2} {8}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.60587, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {6 {5 {1 {4}} {1}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {6 {0} {7}}) -> 3", "(count_nodes {3}) -> 1", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.671127, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {1} {6}}) -> 3", "(count_nodes {2 {1} {2}}) -> 3", "(count_nodes {9 {4 {2}}}) -> 3", "(count_nodes {8}) -> 1", "(count_nodes {3 {8} {3}}) -> 3", "(count_nodes {3 {0 {0}} {6}}) -> 4", "(count_nodes {0}) -> 1", "(count_nodes {5 {9 {1}}}) -> 3", "(count_nodes {8 {3} {1}}) -> 3", "(count_nodes {1}) -> 1", "(count_nodes {0 {9} {8}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.688644, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {5 {5} {0 {3}}}) -> 4", "(count_nodes {4}) -> 1", "(count_nodes {3 {3}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {9 {8} {0}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.674596, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {7 {1 {2}}}) -> 3", "(count_nodes {1 {6} {5}}) -> 3", "(count_nodes {6 {8 {9 {0}} {9 {3} {5}}}}) -> 7", "(count_nodes {8}) -> 1", "(count_nodes {3 {2 {3}}}) -> 3", "(count_nodes {7 {6} {2}}) -> 3", "(count_nodes {5 {9}}) -> 2", "(count_nodes {0 {8}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.751344, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {0 {9 {1} {6}}} {0 {0 {7} {3}} {0}}}) -> 10", "(count_nodes {9 {0 {5}} {4}}) -> 4", "(count_nodes {1 {6 {9} {2 {0}}} {3}}) -> 6", "(count_nodes {8 {9}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {9 {2 {0 {0}}} {6 {2} {8 {0} {0}}}}) -> 9", "(count_nodes {}) -> 0", "(count_nodes {4 {8 {2} {6}} {5 {0} {9}}}) -> 7", "(count_nodes {}) -> 0", "(count_nodes {6 {1} {7}}) -> 3", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.640629, "name": "count_nodes"}
