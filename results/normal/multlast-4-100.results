{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [1]) -> [1]"], "time": 0.000554, "solution": "(let multlast (let a (lambda (b) b) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2]) -> [2]", "(multlast []) -> []"], "time": 0.000373, "solution": "(let multlast (let a (lambda (b) b) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [6 9 9 8 9]) -> [9 9 9 9 9]", "(multlast []) -> []"], "time": 0.027301, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr b))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0]) -> [0]", "(multlast [4]) -> [4]"], "time": 0.000599, "solution": "(let multlast (let a (lambda (b) b) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [7 0 8 3 7]) -> [7 7 7 7 7]", "(multlast [7]) -> [7]"], "time": 0.033169, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2]) -> [2]", "(multlast []) -> []"], "time": 0.000455, "solution": "(let multlast (let a (lambda (b) b) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8 0 0]) -> [0 0 0]", "(multlast [8 7 7 0]) -> [0 0 0 0]"], "time": 0.026948, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) 0))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [1 1]) -> [1 1]", "(multlast [4 8 3 8]) -> [8 8 8 8]"], "time": 0.035186, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr b))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 2]) -> [2 2]", "(multlast []) -> []"], "time": 0.036961, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (+ 1 1)))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [9]) -> [9]", "(multlast [2 6 0 2]) -> [2 2 2 2]"], "time": 0.025634, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [4]) -> [4]"], "time": 0.000383, "solution": "(let multlast (let a (lambda (b) b) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [2 6]) -> [6 6]"], "time": 0.038769, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr b))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [5 9]) -> [9 9]", "(multlast [1 5]) -> [5 5]"], "time": 0.026701, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr b))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0 4 4]) -> [4 4 4]", "(multlast [1]) -> [1]"], "time": 0.118752, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3]) -> [3]", "(multlast [0 6]) -> [6 6]"], "time": 0.098107, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [5 9]) -> [9 9]", "(multlast []) -> []"], "time": 0.041792, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr b))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 7 0 7 1]) -> [1 1 1 1 1]", "(multlast [4 1 2 4 6]) -> [6 6 6 6 6]"], "time": 0.249686, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [9 5]) -> [5 5]", "(multlast [7 3]) -> [3 3]"], "time": 0.031877, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr b))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 0 2 8]) -> [8 8 8 8]", "(multlast [7]) -> [7]"], "time": 0.268444, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []"], "time": 0.000427, "solution": "(let multlast (let a (lambda (b) []) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [4]) -> [4]", "(multlast [6 1 2]) -> [2 2 2]"], "time": 0.284325, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2 3]) -> [3 3]", "(multlast [5]) -> [5]"], "time": 0.101909, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [6 1]) -> [1 1]", "(multlast []) -> []"], "time": 0.030058, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) 1))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [5 0 2]) -> [2 2 2]", "(multlast []) -> []"], "time": 0.048015, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (+ 1 1)))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3]) -> [3]", "(multlast [6 3 8 2]) -> [2 2 2 2]"], "time": 0.278994, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 0 3 6 8]) -> [8 8 8 8 8]", "(multlast [6 7 9 7]) -> [7 7 7 7]"], "time": 0.313043, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2 0 0]) -> [0 0 0]", "(multlast [5 0 3 8 9]) -> [9 9 9 9 9]"], "time": 0.282626, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8 0 2 8]) -> [8 8 8 8]", "(multlast [3]) -> [3]"], "time": 0.03632, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [7 9 0]) -> [0 0 0]", "(multlast [9]) -> [9]"], "time": 0.273387, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [5 5 0]) -> [0 0 0]", "(multlast [5 7 3 0 9]) -> [9 9 9 9 9]"], "time": 0.276501, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [4 7 5]) -> [5 5 5]", "(multlast []) -> []"], "time": 0.122952, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (+ 1 (car b))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [9 8 7]) -> [7 7 7]", "(multlast [7]) -> [7]"], "time": 0.26644, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0 6 1]) -> [1 1 1]", "(multlast [8 5]) -> [5 5]"], "time": 0.29342, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [4 4 8 8 5]) -> [5 5 5 5 5]", "(multlast [7]) -> [7]"], "time": 0.289676, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0 4 4 1 1]) -> [1 1 1 1 1]", "(multlast [2 7]) -> [7 7]"], "time": 0.281962, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0 2 7]) -> [7 7 7]", "(multlast [7 1 1 1]) -> [1 1 1 1]"], "time": 0.08491, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr (cdr b)))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8]) -> [8]", "(multlast [7 7 7]) -> [7 7 7]"], "time": 0.000358, "solution": "(let multlast (let a (lambda (b) b) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [5 7 3 3 9]) -> [9 9 9 9 9]", "(multlast [5 7 4]) -> [4 4 4]"], "time": 0.28876, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0 4 1 0 5]) -> [5 5 5 5 5]", "(multlast [9 2 4]) -> [4 4 4]"], "time": 0.301256, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3]) -> [3]", "(multlast [4 8]) -> [8 8]"], "time": 0.127181, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [1 6 4]) -> [4 4 4]", "(multlast [8 3 6 4]) -> [4 4 4 4]"], "time": 0.229105, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [7 3 5]) -> [5 5 5]", "(multlast [5 0 2]) -> [2 2 2]"], "time": 0.121412, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr (cdr b)))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [6 2 7 2 3]) -> [3 3 3 3 3]"], "time": 0.227132, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (+ 1 (+ 1 1))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [9 2 7]) -> [7 7 7]", "(multlast [2 0 7 3 6]) -> [6 6 6 6 6]"], "time": 0.289325, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0 5 9]) -> [9 9 9]", "(multlast [1 7 1 5]) -> [5 5 5 5]"], "time": 0.290883, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8 6 9 2]) -> [2 2 2 2]", "(multlast []) -> []"], "time": 0.047848, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (+ 1 1)))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [1 4 7 7]) -> [7 7 7 7]", "(multlast [2 9]) -> [9 9]"], "time": 0.301545, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 0 6 8]) -> [8 8 8 8]", "(multlast [4]) -> [4]"], "time": 0.299135, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [8 1 5]) -> [5 5 5]"], "time": 0.116797, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr (cdr b)))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 8 6 3]) -> [3 3 3 3]", "(multlast [7 5 8 4]) -> [4 4 4 4]"], "time": 0.202729, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr (cdr (cdr b))))))) _) _)"}
