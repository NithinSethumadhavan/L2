{"examples": ["(dupli []) -> []"], "name": "dupli", "time": 0.000268, "solution": "(let dupli (let a (lambda (b) []) _) _)"}
{"examples": ["(dupli []) -> []"], "name": "dupli", "time": 0.000196, "solution": "(let dupli (let a (lambda (b) []) _) _)"}
{"examples": ["(dupli []) -> []"], "name": "dupli", "time": 0.000275, "solution": "(let dupli (let a (lambda (b) []) _) _)"}
{"examples": ["(dupli [9]) -> [9 9]"], "name": "dupli", "time": 0.006086, "solution": "(let dupli (let a (lambda (b) (cons (car b) b)) _) _)"}
{"examples": ["(dupli []) -> []"], "name": "dupli", "time": 0.000578, "solution": "(let dupli (let a (lambda (b) []) _) _)"}
{"examples": ["(dupli []) -> []"], "name": "dupli", "time": 0.000677, "solution": "(let dupli (let a (lambda (b) []) _) _)"}
{"examples": ["(dupli [9]) -> [9 9]"], "name": "dupli", "time": 0.0168, "solution": "(let dupli (let a (lambda (b) (cons (car b) b)) _) _)"}
{"examples": ["(dupli []) -> []"], "name": "dupli", "time": 0.000626, "solution": "(let dupli (let a (lambda (b) []) _) _)"}
{"examples": ["(dupli [4]) -> [4 4]"], "name": "dupli", "time": 0.029858, "solution": "(let dupli (let a (lambda (b) (cons (car b) b)) _) _)"}
{"examples": ["(dupli [9]) -> [9 9]"], "name": "dupli", "time": 0.016366, "solution": "(let dupli (let a (lambda (b) (cons (car b) b)) _) _)"}
{"examples": ["(dupli [6 6 9 8 6]) -> [6 6 6 6 9 9 8 8 6 6]"], "name": "dupli", "time": 0.751525, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [2 6 0 0]) -> [2 2 6 6 0 0 0 0]"], "name": "dupli", "time": 0.828737, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [2 6 5 3]) -> [2 2 6 6 5 5 3 3]"], "name": "dupli", "time": 0.710938, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [4 6 7 9 0]) -> [4 4 6 6 7 7 9 9 0 0]"], "name": "dupli", "time": 0.835232, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [5 3]) -> [5 5 3 3]"], "name": "dupli", "time": 0.704592, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [7 0]) -> [7 7 0 0]"], "name": "dupli", "time": 0.859229, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [6 2 5 5 0]) -> [6 6 2 2 5 5 5 5 0 0]"], "name": "dupli", "time": 0.815241, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [1 6 4 5]) -> [1 1 6 6 4 4 5 5]"], "name": "dupli", "time": 0.77335, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [9 3]) -> [9 9 3 3]"], "name": "dupli", "time": 0.721169, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [2 9 8]) -> [2 2 9 9 8 8]"], "name": "dupli", "time": 0.814458, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [9 9 1 6]) -> [9 9 9 9 1 1 6 6]"], "name": "dupli", "time": 0.822017, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [6 0 3 0]) -> [6 6 0 0 3 3 0 0]"], "name": "dupli", "time": 0.877775, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [9]) -> [9 9]"], "name": "dupli", "time": 0.009459, "solution": "(let dupli (let a (lambda (b) (cons (car b) b)) _) _)"}
{"examples": ["(dupli []) -> []"], "name": "dupli", "time": 0.000387, "solution": "(let dupli (let a (lambda (b) []) _) _)"}
{"examples": ["(dupli [1 1]) -> [1 1 1 1]"], "name": "dupli", "time": 0.035652, "solution": "(let dupli (let a (lambda (b) (cons 1 (cons 1 b))) _) _)"}
{"examples": ["(dupli [5 1]) -> [5 5 1 1]"], "name": "dupli", "time": 0.757059, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [6 1]) -> [6 6 1 1]"], "name": "dupli", "time": 0.675553, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [6 5 3 1 5]) -> [6 6 5 5 3 3 1 1 5 5]"], "name": "dupli", "time": 0.810644, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [5 5]) -> [5 5 5 5]"], "name": "dupli", "time": 0.112561, "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) b)) _) _)"}
{"examples": ["(dupli []) -> []"], "name": "dupli", "time": 0.000593, "solution": "(let dupli (let a (lambda (b) []) _) _)"}
{"examples": ["(dupli [9]) -> [9 9]"], "name": "dupli", "time": 0.013543, "solution": "(let dupli (let a (lambda (b) (cons (car b) b)) _) _)"}
{"examples": ["(dupli [3 9 3]) -> [3 3 9 9 3 3]"], "name": "dupli", "time": 0.470661, "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [6 4 6]) -> [6 6 4 4 6 6]"], "name": "dupli", "time": 0.529703, "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli []) -> []"], "name": "dupli", "time": 0.000533, "solution": "(let dupli (let a (lambda (b) []) _) _)"}
{"examples": ["(dupli [9 8 2 2]) -> [9 9 8 8 2 2 2 2]"], "name": "dupli", "time": 0.705716, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [3 0 2 8]) -> [3 3 0 0 2 2 8 8]"], "name": "dupli", "time": 0.78182, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
{"examples": ["(dupli [3 3 0]) -> [3 3 3 3 0 0]"], "name": "dupli", "time": 0.731152, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)"}
