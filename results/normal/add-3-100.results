{"name": "add", "examples": ["(add [] 2) -> []", "(add [] 7) -> []"], "solution": "(let add (let a (lambda (c b) []) _) _)", "time": 0.00067}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [8 9 5] 0) -> [8 9 5]"], "solution": "(let add (let a (lambda (c b) c) _) _)", "time": 0.000348}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [] 8) -> []"], "solution": "(let add (let a (lambda (c b) []) _) _)", "time": 0.000466}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [] 4) -> []"], "solution": "(let add (let a (lambda (c b) []) _) _)", "time": 0.000741}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [6 2] 4) -> [10 6]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031569}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [3] 0) -> [3]"], "solution": "(let add (let a (lambda (c b) c) _) _)", "time": 0.000574}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [4] 7) -> [11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.047632}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [5 5 7 6] 1) -> [6 6 8 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.034549}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [5] 1) -> [6]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.046472}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [8 2 3 4] 9) -> [17 11 12 13]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.048313}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [7 0] 3) -> [10 3]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.039967}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [0 8 8 9 2] 3) -> [3 11 11 12 5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.030848}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [4] 7) -> [11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.047002}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [7] 5) -> [12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.050375}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [7 7] 8) -> [15 15]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.034864}
{"name": "add", "examples": ["(add [] 0) -> []", "(add [0 5 9 1] 3) -> [3 8 12 4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.045291}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [2 6] 0) -> [2 6]"], "solution": "(let add (let a (lambda (c b) c) _) _)", "time": 0.000563}
{"name": "add", "examples": ["(add [] 0) -> []", "(add [] 4) -> []"], "solution": "(let add (let a (lambda (c b) []) _) _)", "time": 0.000429}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [] 3) -> []"], "solution": "(let add (let a (lambda (c b) []) _) _)", "time": 0.000619}
{"name": "add", "examples": ["(add [] 0) -> []", "(add [4 8 0] 7) -> [11 15 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.033758}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [4 4 9 3 2] 3) -> [7 7 12 6 5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.049697}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [] 5) -> []"], "solution": "(let add (let a (lambda (c b) []) _) _)", "time": 0.000508}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [1 3 5 3 7] 8) -> [9 11 13 11 15]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.033615}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [] 2) -> []"], "solution": "(let add (let a (lambda (c b) []) _) _)", "time": 0.000461}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [2 3] 0) -> [2 3]"], "solution": "(let add (let a (lambda (c b) c) _) _)", "time": 0.000445}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [] 6) -> []"], "solution": "(let add (let a (lambda (c b) []) _) _)", "time": 0.000476}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [6] 7) -> [13]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031588}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [7 7 7 7 9] 7) -> [14 14 14 14 16]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.048352}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [8 8] 6) -> [14 14]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.049768}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [1 3 6 5 4] 6) -> [7 9 12 11 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.036048}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [1 6 5 4 4] 8) -> [9 14 13 12 12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.040993}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [0 7 3 0] 4) -> [4 11 7 4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.050145}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [5 9 0] 0) -> [5 9 0]"], "solution": "(let add (let a (lambda (c b) c) _) _)", "time": 0.00043}
{"name": "add", "examples": ["(add [] 0) -> []", "(add [0 8] 3) -> [3 11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.038076}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [6 8 6] 9) -> [15 17 15]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031251}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [8 3 1 4] 0) -> [8 3 1 4]"], "solution": "(let add (let a (lambda (c b) c) _) _)", "time": 0.000394}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [] 2) -> []"], "solution": "(let add (let a (lambda (c b) []) _) _)", "time": 0.000502}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [9 4 7] 7) -> [16 11 14]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.052792}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [7 8 6] 9) -> [16 17 15]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.04395}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [6 6 3 0] 1) -> [7 7 4 1]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.038884}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [] 2) -> []"], "solution": "(let add (let a (lambda (c b) []) _) _)", "time": 0.000654}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [2 9 1 0] 6) -> [8 15 7 6]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.032336}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [3 2 2 2] 8) -> [11 10 10 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.038587}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [9 8 0 7] 5) -> [14 13 5 12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.049581}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [0 1 0 0] 9) -> [9 10 9 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.044324}
{"name": "add", "examples": ["(add [] 0) -> []", "(add [9 1 1 5 6] 7) -> [16 8 8 12 13]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031309}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [9 0 9] 6) -> [15 6 15]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.048554}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [1 3 8 6 1] 7) -> [8 10 15 13 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.03691}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [] 9) -> []"], "solution": "(let add (let a (lambda (c b) []) _) _)", "time": 0.000392}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [0 2 3 1 9] 9) -> [9 11 12 10 18]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.047987}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [0 8 4 0] 6) -> [6 14 10 6]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.032453}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [7] 1) -> [8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.042739}
