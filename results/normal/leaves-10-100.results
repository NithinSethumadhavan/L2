{"time": 0.658317, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {9 {8} {8}}) -> [8 8]", "(leaves {3}) -> [3]", "(leaves {8 {7}}) -> [7]", "(leaves {1 {9 {5} {5}}}) -> [5 5]", "(leaves {7 {1} {6}}) -> [1 6]", "(leaves {8}) -> [8]", "(leaves {0 {7} {3}}) -> [7 3]"], "name": "leaves"}
{"time": 0.719082, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {2 {3} {4}}) -> [3 4]", "(leaves {0}) -> [0]", "(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {2}) -> [2]", "(leaves {7}) -> [7]", "(leaves {5}) -> [5]"], "name": "leaves"}
{"time": 0.71329, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {8 {3}}) -> [3]", "(leaves {9 {8} {0}}) -> [8 0]", "(leaves {8 {0}}) -> [0]", "(leaves {8}) -> [8]", "(leaves {2 {1} {6 {0 {3} {0}}}}) -> [1 3 0]", "(leaves {8 {2 {2}} {4 {3} {3}}}) -> [2 3 3]", "(leaves {7 {9 {1 {2} {3}} {4 {1} {3}}} {4 {2} {9 {5} {8}}}}) -> [2 3 1 3 2 5 8]"], "name": "leaves"}
{"time": 0.801072, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {3 {9} {9}}) -> [9 9]", "(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {6 {4} {7 {6} {8 {2}}}}) -> [4 6 2]", "(leaves {2 {2 {6 {6}}}}) -> [6]", "(leaves {8 {1 {9 {5} {7}} {5 {5} {3}}}}) -> [5 7 5 3]", "(leaves {0 {1} {3}}) -> [1 3]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.779215, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {1 {4 {9} {0}} {4}}) -> [9 0 4]", "(leaves {5 {7 {0}}}) -> [0]", "(leaves {7}) -> [7]", "(leaves {0 {1 {0} {6}}}) -> [0 6]", "(leaves {3}) -> [3]", "(leaves {2}) -> [2]"], "name": "leaves"}
{"time": 0.72208, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2 {9}}) -> [9]", "(leaves {2 {9 {3}}}) -> [3]", "(leaves {0 {4}}) -> [4]", "(leaves {5 {4 {8} {1}}}) -> [8 1]", "(leaves {9 {9}}) -> [9]", "(leaves {6 {7 {4 {8} {6}} {5 {9} {9}}}}) -> [8 6 9 9]", "(leaves {4 {5}}) -> [5]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.787663, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0 {4} {6}}) -> [4 6]", "(leaves {1}) -> [1]", "(leaves {1 {3}}) -> [3]", "(leaves {2}) -> [2]", "(leaves {}) -> []", "(leaves {6 {4 {9 {3}}} {5 {0 {5}} {8}}}) -> [3 5 8]", "(leaves {2 {3}}) -> [3]", "(leaves {4 {0 {7 {1} {2}} {7 {6} {9}}}}) -> [1 2 6 9]"], "name": "leaves"}
{"time": 0.777043, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {3}) -> [3]", "(leaves {5 {9 {3}}}) -> [3]", "(leaves {0}) -> [0]", "(leaves {8}) -> [8]", "(leaves {}) -> []", "(leaves {9}) -> [9]"], "name": "leaves"}
{"time": 0.992391, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {7 {0}}) -> [0]", "(leaves {9 {6}}) -> [6]", "(leaves {}) -> []", "(leaves {9 {2 {6} {6}}}) -> [6 6]", "(leaves {7}) -> [7]", "(leaves {0 {0} {3}}) -> [0 3]", "(leaves {7 {4}}) -> [4]"], "name": "leaves"}
{"time": 1.018247, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {9}) -> [9]", "(leaves {}) -> []", "(leaves {0 {1 {4}} {5}}) -> [4 5]", "(leaves {5}) -> [5]", "(leaves {0 {9} {5}}) -> [9 5]", "(leaves {5}) -> [5]", "(leaves {3}) -> [3]"], "name": "leaves"}
{"time": 1.066436, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5 {3 {2}}}) -> [2]", "(leaves {}) -> []", "(leaves {4 {7 {8}}}) -> [8]", "(leaves {4 {7}}) -> [7]", "(leaves {1}) -> [1]", "(leaves {7 {8}}) -> [8]", "(leaves {}) -> []", "(leaves {4 {8 {7 {2} {9}} {7 {8}}} {8 {4} {7}}}) -> [2 9 8 4 7]"], "name": "leaves"}
{"time": 1.060368, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2 {1}}) -> [1]", "(leaves {0}) -> [0]", "(leaves {3}) -> [3]", "(leaves {1}) -> [1]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6 {4 {0} {7}} {2}}) -> [0 7 2]"], "name": "leaves"}
{"time": 1.065489, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {5 {2} {0 {6 {9} {4}} {0 {2} {9}}}}) -> [2 9 4 2 9]", "(leaves {4}) -> [4]", "(leaves {1 {8 {3}}}) -> [3]", "(leaves {3}) -> [3]", "(leaves {8}) -> [8]", "(leaves {2}) -> [2]"], "name": "leaves"}
{"time": 1.125429, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2 {5 {1 {1}}}}) -> [1]", "(leaves {}) -> []", "(leaves {6 {8 {6 {0} {4}} {3 {2}}}}) -> [0 4 2]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7 {3} {2}}) -> [3 2]", "(leaves {1 {2} {1}}) -> [2 1]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 1.106565, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6 {9 {2}}}) -> [2]", "(leaves {}) -> []", "(leaves {6 {3 {4 {5} {6}}}}) -> [5 6]", "(leaves {}) -> []", "(leaves {5 {2}}) -> [2]", "(leaves {5 {0}}) -> [0]", "(leaves {8}) -> [8]", "(leaves {2 {2} {7}}) -> [2 7]"], "name": "leaves"}
{"time": 1.165763, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5 {1 {2 {8}}} {3 {2 {0} {1}}}}) -> [8 0 1]", "(leaves {2 {6}}) -> [6]", "(leaves {3 {6 {5}}}) -> [5]", "(leaves {0 {5 {2}} {1 {5} {6}}}) -> [2 5 6]", "(leaves {7 {1} {3 {3 {5} {4}} {9 {7}}}}) -> [1 5 4 7]", "(leaves {0}) -> [0]", "(leaves {4 {7 {5 {9} {0}} {0 {8} {0}}} {4}}) -> [9 0 8 0 4]"], "name": "leaves"}
{"time": 0.592811, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5 {8 {0}}}) -> [0]", "(leaves {0}) -> [0]", "(leaves {8 {5 {6}}}) -> [6]", "(leaves {}) -> []", "(leaves {2 {6}}) -> [6]"], "name": "leaves"}
{"time": 0.767819, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0 {9}}) -> [9]", "(leaves {2 {4 {8 {9}} {6 {9} {9}}} {3}}) -> [9 9 9 3]", "(leaves {5 {1 {2 {0}} {8}} {2}}) -> [0 8 2]", "(leaves {2 {8}}) -> [8]", "(leaves {}) -> []", "(leaves {9 {1} {4 {2 {8}} {2 {7}}}}) -> [1 8 7]", "(leaves {9}) -> [9]", "(leaves {6 {0} {4}}) -> [0 4]"], "name": "leaves"}
{"time": 0.75887, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {9}) -> [9]", "(leaves {8}) -> [8]", "(leaves {3 {5} {8}}) -> [5 8]", "(leaves {}) -> []", "(leaves {9 {5}}) -> [5]", "(leaves {9 {3} {8}}) -> [3 8]"], "name": "leaves"}
{"time": 0.941233, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {1 {2} {6}} {6 {2} {1}}}) -> [2 6 2 1]", "(leaves {8}) -> [8]", "(leaves {4}) -> [4]", "(leaves {2 {1}}) -> [1]", "(leaves {3 {0 {8}}}) -> [8]", "(leaves {3 {6}}) -> [6]", "(leaves {9}) -> [9]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.937047, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0 {0 {1 {0}} {7 {6}}}}) -> [0 6]", "(leaves {7 {3 {0}}}) -> [0]", "(leaves {}) -> []", "(leaves {5 {8 {9}}}) -> [9]", "(leaves {8 {2 {3} {2}} {1}}) -> [3 2 1]", "(leaves {2 {5} {4 {8 {4} {2}} {5 {5}}}}) -> [5 4 2 5]", "(leaves {2 {1} {4}}) -> [1 4]", "(leaves {7}) -> [7]"], "name": "leaves"}
{"time": 0.867389, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5 {8 {6}} {3 {6}}}) -> [6 6]", "(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {5 {8 {0 {2}} {2 {5}}}}) -> [2 5]", "(leaves {3 {2}}) -> [2]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6 {6}}) -> [6]"], "name": "leaves"}
{"time": 0.972849, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {3 {1 {0} {9}} {6}}) -> [0 9 6]", "(leaves {}) -> []", "(leaves {5 {3} {4}}) -> [3 4]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5 {7}}) -> [7]", "(leaves {0 {1}}) -> [1]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.713337, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {9 {4 {5 {2} {6}} {9}}}) -> [2 6 9]", "(leaves {}) -> []", "(leaves {4 {4}}) -> [4]", "(leaves {}) -> []", "(leaves {9 {2}}) -> [2]", "(leaves {2 {6 {6}} {6 {7} {2}}}) -> [6 7 2]", "(leaves {5 {6}}) -> [6]"], "name": "leaves"}
{"time": 0.910922, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {7 {3}}) -> [3]", "(leaves {9 {4}}) -> [4]", "(leaves {7 {8}}) -> [8]", "(leaves {1}) -> [1]", "(leaves {6}) -> [6]", "(leaves {2 {0}}) -> [0]", "(leaves {0 {3 {0} {3}} {3 {9} {9}}}) -> [0 3 9 9]", "(leaves {5}) -> [5]"], "name": "leaves"}
{"time": 0.70336, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {7 {2 {0} {9}}}) -> [0 9]", "(leaves {6}) -> [6]", "(leaves {0}) -> [0]", "(leaves {}) -> []", "(leaves {7 {4}}) -> [4]", "(leaves {6}) -> [6]"], "name": "leaves"}
{"time": 0.755249, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {4 {1 {0 {2}} {0 {8} {6}}} {9 {4} {6 {8} {0}}}}) -> [2 8 6 4 8 0]", "(leaves {4 {0 {8 {4} {0}} {4 {5}}}}) -> [4 0 5]", "(leaves {2 {8 {8} {2}} {4 {3}}}) -> [8 2 3]", "(leaves {6 {4} {1}}) -> [4 1]", "(leaves {}) -> []", "(leaves {4}) -> [4]"], "name": "leaves"}
{"time": 0.760713, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5 {1 {3} {0}} {3 {5}}}) -> [3 0 5]", "(leaves {9 {6} {4 {8}}}) -> [6 8]", "(leaves {8 {1} {9 {3} {3 {7}}}}) -> [1 3 7]", "(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {5}) -> [5]", "(leaves {}) -> []", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.824384, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7 {9 {9 {8} {5}} {2 {3}}} {2 {4} {0 {3} {6}}}}) -> [8 5 3 4 3 6]", "(leaves {0 {0 {3 {8}}}}) -> [8]", "(leaves {6 {5} {6 {4} {1}}}) -> [5 4 1]", "(leaves {9 {1}}) -> [1]", "(leaves {}) -> []", "(leaves {6 {0 {5}}}) -> [5]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.916699, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6 {2 {6} {8}} {6 {0}}}) -> [6 8 0]", "(leaves {}) -> []", "(leaves {7 {4}}) -> [4]", "(leaves {7 {3 {3} {4}} {4 {4}}}) -> [3 4 4]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.885831, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5 {9} {5}}) -> [9 5]", "(leaves {1 {8 {9} {5 {0} {5}}}}) -> [9 0 5]", "(leaves {5}) -> [5]", "(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {1 {3 {4}} {5}}) -> [4 5]", "(leaves {7 {7 {5}} {1 {5} {1}}}) -> [5 5 1]", "(leaves {7 {5} {3}}) -> [5 3]"], "name": "leaves"}
{"time": 0.851951, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {4 {9} {6}}) -> [9 6]", "(leaves {8}) -> [8]", "(leaves {7 {4 {5} {6}}}) -> [5 6]", "(leaves {4 {9 {6 {9}} {1}}}) -> [9 1]", "(leaves {7}) -> [7]", "(leaves {7 {2}}) -> [2]", "(leaves {5 {0} {8}}) -> [0 8]"], "name": "leaves"}
{"time": 0.546424, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {5 {7 {7}}}) -> [7]", "(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {}) -> []", "(leaves {1 {8 {3} {5}} {0 {8} {2}}}) -> [3 5 8 2]", "(leaves {3 {1 {4} {7}}}) -> [4 7]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.734226, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5 {0 {3} {9}}}) -> [3 9]", "(leaves {4 {4 {1}} {6 {0}}}) -> [1 0]", "(leaves {6 {1}}) -> [1]", "(leaves {9 {3 {8} {3}}}) -> [8 3]", "(leaves {1}) -> [1]", "(leaves {5 {9}}) -> [9]", "(leaves {5 {9}}) -> [9]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.573955, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {0 {2}}) -> [2]", "(leaves {1 {2}}) -> [2]", "(leaves {2}) -> [2]", "(leaves {7 {1}}) -> [1]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2 {7 {0}}}) -> [0]"], "name": "leaves"}
{"time": 0.766803, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {6 {1}} {1}}) -> [1 1]", "(leaves {4}) -> [4]", "(leaves {1 {3}}) -> [3]", "(leaves {9 {3 {0}} {6 {7} {9}}}) -> [0 7 9]", "(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {2 {9}}) -> [9]", "(leaves {8}) -> [8]"], "name": "leaves"}
{"time": 0.554087, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8 {1}}) -> [1]", "(leaves {}) -> []", "(leaves {8 {0 {9}}}) -> [9]", "(leaves {5 {4}}) -> [4]"], "name": "leaves"}
{"time": 0.7106, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {4 {5} {0}}}) -> [5 0]", "(leaves {3 {1}}) -> [1]", "(leaves {7 {1 {3}} {7 {4}}}) -> [3 4]", "(leaves {2 {1}}) -> [1]", "(leaves {8}) -> [8]", "(leaves {8}) -> [8]", "(leaves {8 {6}}) -> [6]", "(leaves {6 {0}}) -> [0]"], "name": "leaves"}
{"time": 0.671923, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4 {8}}) -> [8]", "(leaves {}) -> []", "(leaves {2 {0 {3 {4} {2}} {2 {2} {9}}} {2}}) -> [4 2 2 9 2]", "(leaves {3 {0 {3}}}) -> [3]", "(leaves {7 {5}}) -> [5]", "(leaves {9 {3}}) -> [3]", "(leaves {5}) -> [5]"], "name": "leaves"}
{"time": 0.737707, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9 {9}}) -> [9]", "(leaves {3 {3}}) -> [3]", "(leaves {1 {9}}) -> [9]", "(leaves {9}) -> [9]", "(leaves {0 {5}}) -> [5]", "(leaves {8 {2} {3}}) -> [2 3]", "(leaves {}) -> []", "(leaves {1}) -> [1]"], "name": "leaves"}
{"time": 0.740617, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {7 {6 {0}} {0 {5}}}) -> [0 5]", "(leaves {}) -> []", "(leaves {0 {1} {0}}) -> [1 0]", "(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {3}) -> [3]", "(leaves {0 {2 {0 {6} {4}}} {6 {0 {5}}}}) -> [6 4 5]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.845644, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4 {3 {5} {9}}}) -> [5 9]", "(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {7}) -> [7]", "(leaves {}) -> []", "(leaves {1 {7 {6 {5} {9}} {6}} {8 {3 {6} {6}} {5 {7}}}}) -> [5 9 6 6 6 7]", "(leaves {7 {3 {4} {9}}}) -> [4 9]"], "name": "leaves"}
{"time": 0.81519, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9 {4 {6}} {1 {6}}}) -> [6 6]", "(leaves {1 {0 {7} {5}} {4 {4} {3}}}) -> [7 5 4 3]", "(leaves {0 {7} {7}}) -> [7 7]", "(leaves {}) -> []", "(leaves {4 {2} {9}}) -> [2 9]", "(leaves {2 {2}}) -> [2]", "(leaves {4}) -> [4]", "(leaves {6 {2 {9 {6} {0}}}}) -> [6 0]"], "name": "leaves"}
{"time": 0.823188, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {0 {1 {0} {7}} {7 {8} {8}}}) -> [0 7 8 8]", "(leaves {9 {2} {5}}) -> [2 5]", "(leaves {}) -> []", "(leaves {3 {4} {2 {3 {0}}}}) -> [4 0]", "(leaves {3}) -> [3]", "(leaves {7}) -> [7]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.780311, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5 {0}}) -> [0]", "(leaves {8 {7} {1}}) -> [7 1]", "(leaves {9 {2 {2} {9 {3}}} {0 {9 {7}} {1}}}) -> [2 3 7 1]", "(leaves {1 {6} {8 {2} {8}}}) -> [6 2 8]", "(leaves {6 {7 {5}} {9 {6 {1} {1}}}}) -> [5 1 1]", "(leaves {}) -> []", "(leaves {4 {9 {1}} {8}}) -> [1 8]"], "name": "leaves"}
{"time": 0.444274, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9 {6 {5}}}) -> [5]", "(leaves {2}) -> [2]", "(leaves {3}) -> [3]", "(leaves {3}) -> [3]", "(leaves {1}) -> [1]", "(leaves {6}) -> [6]", "(leaves {}) -> []", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.712642, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {0}) -> [0]", "(leaves {0 {1}}) -> [1]", "(leaves {8}) -> [8]", "(leaves {8}) -> [8]", "(leaves {7 {3}}) -> [3]", "(leaves {2}) -> [2]", "(leaves {0 {6} {2}}) -> [6 2]"], "name": "leaves"}
{"time": 0.835792, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6 {2 {9}} {7 {1} {9}}}) -> [9 1 9]", "(leaves {9 {5} {9}}) -> [5 9]", "(leaves {8 {6 {6 {9} {1}} {2}} {5 {7} {0 {4}}}}) -> [9 1 2 7 4]", "(leaves {8}) -> [8]", "(leaves {3}) -> [3]", "(leaves {5 {4 {8} {3}}}) -> [8 3]", "(leaves {4}) -> [4]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.764772, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6 {9 {9} {8}} {0 {1}}}) -> [9 8 1]", "(leaves {1 {8} {3}}) -> [8 3]", "(leaves {7}) -> [7]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7 {8}}) -> [8]", "(leaves {4}) -> [4]"], "name": "leaves"}
{"time": 0.568907, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6 {9 {8}}}) -> [8]", "(leaves {1 {5}}) -> [5]", "(leaves {2}) -> [2]", "(leaves {3 {2} {0}}) -> [2 0]", "(leaves {}) -> []", "(leaves {6 {2 {4 {4} {3}}} {9 {2 {2} {9}} {3 {9}}}}) -> [4 3 2 9 9]", "(leaves {2}) -> [2]"], "name": "leaves"}
{"time": 0.512602, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2 {9 {9 {0}}}}) -> [0]", "(leaves {4}) -> [4]", "(leaves {7 {4 {0}} {7 {7 {7}}}}) -> [0 7]", "(leaves {}) -> []", "(leaves {8 {2}}) -> [2]", "(leaves {3 {6 {7 {6} {9}} {2 {7}}}}) -> [6 9 7]", "(leaves {1}) -> [1]"], "name": "leaves"}
{"time": 0.497776, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {9 {6}}}) -> [6]", "(leaves {3}) -> [3]", "(leaves {2 {9 {4 {5}}}}) -> [5]", "(leaves {6}) -> [6]", "(leaves {0 {8}}) -> [8]", "(leaves {3 {8 {3}} {9 {0} {6}}}) -> [3 0 6]", "(leaves {2 {8 {8 {2} {1}}}}) -> [2 1]", "(leaves {4 {9 {4} {0}}}) -> [4 0]"], "name": "leaves"}
{"time": 0.591932, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {2 {6} {3 {8}}} {9}}) -> [6 8 9]", "(leaves {4 {3}}) -> [3]", "(leaves {9}) -> [9]", "(leaves {0}) -> [0]", "(leaves {3 {1 {6} {1}} {6 {5} {2}}}) -> [6 1 5 2]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3 {5 {1} {2}}}) -> [1 2]"], "name": "leaves"}
{"time": 1.094145, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0 {9 {5}}}) -> [5]", "(leaves {3}) -> [3]", "(leaves {6 {7} {0}}) -> [7 0]", "(leaves {2 {2}}) -> [2]", "(leaves {4 {2} {8}}) -> [2 8]", "(leaves {}) -> []", "(leaves {4 {6}}) -> [6]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 1.109296, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5 {3} {0}}) -> [3 0]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2 {7} {8}}) -> [7 8]", "(leaves {5 {3 {9}}}) -> [9]", "(leaves {1 {8} {0}}) -> [8 0]", "(leaves {}) -> []", "(leaves {}) -> []"], "name": "leaves"}
{"time": 1.106248, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2 {1}}) -> [1]", "(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {8 {0 {1} {9}}}) -> [1 9]", "(leaves {5}) -> [5]", "(leaves {}) -> []", "(leaves {6 {7 {8}} {0}}) -> [8 0]", "(leaves {1 {1}}) -> [1]"], "name": "leaves"}
{"time": 1.265411, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {4 {0}}) -> [0]", "(leaves {3}) -> [3]", "(leaves {}) -> []", "(leaves {5 {6}}) -> [6]", "(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {0 {3} {1 {3 {6}} {0}}}) -> [3 6 0]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.440512, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {1 {2} {8}}) -> [2 8]", "(leaves {5 {5 {3 {6}}}}) -> [6]", "(leaves {}) -> []", "(leaves {0 {2}}) -> [2]", "(leaves {5 {7} {1 {8 {7} {4}}}}) -> [7 7 4]", "(leaves {0 {9} {8 {6} {1}}}) -> [9 6 1]", "(leaves {3 {3 {8 {8}}}}) -> [8]", "(leaves {9}) -> [9]"], "name": "leaves"}
{"time": 1.206504, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {4 {7}}) -> [7]", "(leaves {}) -> []", "(leaves {9 {2 {7 {0} {1}}}}) -> [0 1]", "(leaves {4 {7 {0 {5} {0}} {6 {3}}} {6 {4 {4} {8}} {6 {5}}}}) -> [5 0 3 4 8 5]", "(leaves {9 {5 {6 {4} {2}}} {0}}) -> [4 2 0]", "(leaves {2}) -> [2]", "(leaves {}) -> []", "(leaves {7 {3} {0}}) -> [3 0]"], "name": "leaves"}
{"time": 0.505608, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {4}) -> [4]", "(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {4 {2 {4}} {7 {5}}}) -> [4 5]", "(leaves {7}) -> [7]", "(leaves {}) -> []", "(leaves {0 {0} {3}}) -> [0 3]"], "name": "leaves"}
{"time": 1.208509, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5 {4}}) -> [4]", "(leaves {2 {0 {0 {7} {8}} {4 {5} {9}}}}) -> [7 8 5 9]", "(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {3 {2 {4}}}) -> [4]", "(leaves {9 {0 {5}}}) -> [5]", "(leaves {}) -> []", "(leaves {3 {1} {6 {3 {4}} {0 {7} {3}}}}) -> [1 4 7 3]"], "name": "leaves"}
{"time": 1.306134, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {3 {1}}) -> [1]", "(leaves {1}) -> [1]", "(leaves {1 {5 {5}} {5 {4} {5 {7}}}}) -> [5 4 7]", "(leaves {6 {2 {4} {7}}}) -> [4 7]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3 {3 {5} {3}} {3}}) -> [5 3 3]"], "name": "leaves"}
{"time": 1.152421, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {}) -> []", "(leaves {9 {7}}) -> [7]", "(leaves {}) -> []", "(leaves {7 {9} {6}}) -> [9 6]", "(leaves {3 {7}}) -> [7]", "(leaves {4 {2} {6}}) -> [2 6]", "(leaves {0 {8 {0 {4}}} {5 {0 {4} {9}} {4}}}) -> [4 4 9 4]"], "name": "leaves"}
{"time": 0.558327, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5 {4} {0}}) -> [4 0]", "(leaves {6}) -> [6]", "(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 1.196498, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {4 {2 {8}} {7}}) -> [8 7]", "(leaves {3}) -> [3]", "(leaves {8}) -> [8]", "(leaves {8}) -> [8]", "(leaves {6 {6}}) -> [6]", "(leaves {3 {6} {7}}) -> [6 7]", "(leaves {7 {3 {1 {2} {2}} {7 {6} {9}}} {9}}) -> [2 2 6 9 9]", "(leaves {9 {3 {7 {7}}} {1 {7 {4} {4}} {0 {4}}}}) -> [7 4 4 4]"], "name": "leaves"}
{"time": 1.129693, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5 {3 {0}}}) -> [0]", "(leaves {5 {5}}) -> [5]", "(leaves {8 {5}}) -> [5]", "(leaves {8 {9 {6 {9}} {2 {7}}} {5 {4 {6} {2}} {7 {0}}}}) -> [9 7 6 2 0]", "(leaves {6 {0} {3}}) -> [0 3]", "(leaves {}) -> []", "(leaves {5 {5}}) -> [5]", "(leaves {6 {2} {5}}) -> [2 5]"], "name": "leaves"}
{"time": 1.339607, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0 {5 {0}} {7 {7 {0} {9}} {5 {5}}}}) -> [0 0 9 5]", "(leaves {9}) -> [9]", "(leaves {}) -> []", "(leaves {0 {5 {1 {4}} {5}}}) -> [4 5]", "(leaves {7 {4}}) -> [4]", "(leaves {5 {5} {7}}) -> [5 7]", "(leaves {3 {1 {3} {8 {7} {5}}} {9 {5 {0} {7}}}}) -> [3 7 5 0 7]", "(leaves {5 {7}}) -> [7]"], "name": "leaves"}
{"time": 1.181056, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {3 {0} {2}}) -> [0 2]", "(leaves {5 {2 {4 {9}}} {5 {6 {2} {9}}}}) -> [9 2 9]", "(leaves {2}) -> [2]", "(leaves {6}) -> [6]", "(leaves {6 {2 {2}}}) -> [2]", "(leaves {5 {1} {1}}) -> [1 1]", "(leaves {6 {1 {9} {8}}}) -> [9 8]", "(leaves {1}) -> [1]"], "name": "leaves"}
{"time": 1.086694, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {7 {3}}) -> [3]", "(leaves {6 {7}}) -> [7]", "(leaves {5 {8} {9}}) -> [8 9]", "(leaves {}) -> []", "(leaves {0 {1}}) -> [1]", "(leaves {6 {4 {6}} {3 {9} {7}}}) -> [6 9 7]", "(leaves {6 {8 {4}} {0 {3}}}) -> [4 3]", "(leaves {1}) -> [1]"], "name": "leaves"}
{"time": 0.688272, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5 {8 {0 {4} {1}} {5 {0} {3}}}}) -> [4 1 0 3]", "(leaves {4 {6}}) -> [6]", "(leaves {7 {9 {7 {1} {1}} {9 {1} {9}}} {6 {8 {0} {6}}}}) -> [1 1 1 9 0 6]", "(leaves {3}) -> [3]", "(leaves {9}) -> [9]", "(leaves {}) -> []", "(leaves {9 {7 {3} {1 {4}}}}) -> [3 4]", "(leaves {8 {3} {7}}) -> [3 7]"], "name": "leaves"}
{"time": 0.750146, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5 {3 {6} {0}} {2 {3}}}) -> [6 0 3]", "(leaves {0}) -> [0]", "(leaves {7 {0 {2}} {5 {0}}}) -> [2 0]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {2}) -> [2]", "(leaves {1}) -> [1]"], "name": "leaves"}
{"time": 0.662828, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {6}) -> [6]", "(leaves {8 {2 {9 {6}} {6 {6}}}}) -> [6 6]", "(leaves {5 {2 {8}} {8 {0} {6}}}) -> [8 0 6]", "(leaves {}) -> []", "(leaves {4 {2}}) -> [2]", "(leaves {8}) -> [8]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.734519, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {}) -> []", "(leaves {6 {6} {0}}) -> [6 0]", "(leaves {6}) -> [6]", "(leaves {6 {6}}) -> [6]", "(leaves {7}) -> [7]", "(leaves {8}) -> [8]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.743128, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4 {6} {4}}) -> [6 4]", "(leaves {3 {8}}) -> [8]", "(leaves {9 {9}}) -> [9]", "(leaves {0 {2}}) -> [2]", "(leaves {5 {8} {3 {4} {7}}}) -> [8 4 7]", "(leaves {0}) -> [0]", "(leaves {7 {8}}) -> [8]"], "name": "leaves"}
{"time": 0.733888, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {2 {7 {5}} {1 {1} {1}}}) -> [5 1 1]", "(leaves {}) -> []", "(leaves {6 {8}}) -> [8]", "(leaves {9}) -> [9]", "(leaves {7}) -> [7]", "(leaves {}) -> []", "(leaves {7}) -> [7]"], "name": "leaves"}
{"time": 0.773982, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {4 {8 {5}} {5}}) -> [5 5]", "(leaves {5 {2 {2} {6}} {1 {6} {3}}}) -> [2 6 6 3]", "(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {7}) -> [7]", "(leaves {4}) -> [4]", "(leaves {4 {4}}) -> [4]", "(leaves {3 {7 {5 {5}} {8}} {5 {1}}}) -> [5 8 1]"], "name": "leaves"}
{"time": 0.77151, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5 {2 {3 {1}}}}) -> [1]", "(leaves {8}) -> [8]", "(leaves {5 {8} {1}}) -> [8 1]", "(leaves {1}) -> [1]", "(leaves {6 {0} {9}}) -> [0 9]", "(leaves {2 {7} {6}}) -> [7 6]", "(leaves {}) -> []", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.823877, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {7 {5 {0}} {8 {3} {1}}}) -> [0 3 1]", "(leaves {8 {6 {4 {7}} {5}}}) -> [7 5]", "(leaves {8 {4 {2 {6}}}}) -> [6]", "(leaves {8 {6 {1 {5}}}}) -> [5]", "(leaves {5 {3 {5} {2 {8} {3}}}}) -> [5 8 3]", "(leaves {}) -> []", "(leaves {8 {2 {0}} {0}}) -> [0 0]", "(leaves {4 {3 {8 {0} {3}} {5 {2}}} {2 {5 {0}} {2 {4} {1}}}}) -> [0 3 2 0 4 1]"], "name": "leaves"}
{"time": 0.768301, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {3 {3 {3}} {2 {4}}}) -> [3 4]", "(leaves {8}) -> [8]", "(leaves {9}) -> [9]", "(leaves {1 {4} {8}}) -> [4 8]", "(leaves {6 {1} {5}}) -> [1 5]", "(leaves {8 {0}}) -> [0]", "(leaves {1 {6}}) -> [6]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.715877, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {4 {0}}) -> [0]", "(leaves {6 {5 {9 {7}}} {0 {9 {6}}}}) -> [7 6]", "(leaves {9 {9}}) -> [9]", "(leaves {3}) -> [3]", "(leaves {1 {7} {7}}) -> [7 7]", "(leaves {3}) -> [3]", "(leaves {}) -> []", "(leaves {2 {6 {6 {8}} {3 {6} {6}}} {1 {7 {0}}}}) -> [8 6 6 0]"], "name": "leaves"}
{"time": 0.736315, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {}) -> []", "(leaves {8 {5} {0}}) -> [5 0]", "(leaves {}) -> []", "(leaves {5 {4} {4}}) -> [4 4]"], "name": "leaves"}
{"time": 0.803553, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6 {8 {3} {4}} {4 {2}}}) -> [3 4 2]", "(leaves {8}) -> [8]", "(leaves {}) -> []", "(leaves {8 {5 {7 {4} {2}}}}) -> [4 2]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6 {6 {1}}}) -> [1]", "(leaves {6}) -> [6]"], "name": "leaves"}
{"time": 0.900321, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0 {8 {4} {9}} {2 {3}}}) -> [4 9 3]", "(leaves {0 {9}}) -> [9]", "(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {}) -> []", "(leaves {0 {3 {4 {9}}}}) -> [9]", "(leaves {9 {9 {9} {6}}}) -> [9 6]", "(leaves {7 {6 {4} {4 {7} {8}}} {1 {1 {6} {2}} {8 {5} {1}}}}) -> [4 7 8 6 2 5 1]"], "name": "leaves"}
{"time": 0.689502, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {7 {6} {5}}) -> [6 5]", "(leaves {3 {9 {3} {1}}}) -> [3 1]", "(leaves {1}) -> [1]", "(leaves {3}) -> [3]", "(leaves {7}) -> [7]", "(leaves {7 {7 {3}}}) -> [3]", "(leaves {8 {8 {1 {1}} {0 {4} {8}}} {9 {0 {7} {4}} {3}}}) -> [1 4 8 7 4 3]", "(leaves {2}) -> [2]"], "name": "leaves"}
{"time": 0.811959, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9 {8} {3}}) -> [8 3]", "(leaves {7 {4} {2 {8}}}) -> [4 8]", "(leaves {}) -> []", "(leaves {0 {4} {7}}) -> [4 7]", "(leaves {8 {4 {8}}}) -> [8]", "(leaves {0 {7} {4}}) -> [7 4]", "(leaves {7 {9 {5} {8}}}) -> [5 8]"], "name": "leaves"}
{"time": 0.774716, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {5}) -> [5]", "(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {2 {8 {3} {5 {4} {0}}}}) -> [3 4 0]"], "name": "leaves"}
{"time": 0.620586, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {2 {3} {9 {7 {6} {8}} {5}}}) -> [3 6 8 5]", "(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {2 {8}}) -> [8]", "(leaves {1 {8 {0} {0}}}) -> [0 0]", "(leaves {2 {1} {3 {3} {0}}}) -> [1 3 0]", "(leaves {2}) -> [2]"], "name": "leaves"}
{"time": 0.65358, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {1 {7 {2 {9} {9}} {7 {2}}}}) -> [9 9 2]", "(leaves {9}) -> [9]", "(leaves {8}) -> [8]", "(leaves {3 {2 {9 {0}} {4 {3} {8}}} {1 {0 {5} {1}} {7 {3}}}}) -> [0 3 8 5 1 3]", "(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {1 {3 {0}} {7 {3} {7}}}) -> [0 3 7]"], "name": "leaves"}
{"time": 0.652348, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {}) -> []", "(leaves {3 {1 {2} {3 {2}}}}) -> [2 2]", "(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {}) -> []", "(leaves {5 {8 {9 {0} {3}}}}) -> [0 3]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.753958, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9 {3} {1}}) -> [3 1]", "(leaves {8 {1}}) -> [1]", "(leaves {9 {0 {9}}}) -> [9]", "(leaves {5 {9} {4}}) -> [9 4]", "(leaves {8}) -> [8]", "(leaves {3 {7}}) -> [7]", "(leaves {2 {2}}) -> [2]", "(leaves {5}) -> [5]"], "name": "leaves"}
{"time": 0.621301, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6 {9}}) -> [9]", "(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {1}) -> [1]", "(leaves {9 {1 {2} {5}}}) -> [2 5]", "(leaves {9}) -> [9]", "(leaves {0 {1 {3}}}) -> [3]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.702129, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {4 {9 {5}} {4}} {9 {4 {4} {4}}}}) -> [5 4 4 4]", "(leaves {2 {9 {2} {6 {4}}}}) -> [2 4]", "(leaves {0}) -> [0]", "(leaves {}) -> []", "(leaves {2 {3 {9 {6}} {1 {4}}} {0 {7 {0}}}}) -> [6 4 0]", "(leaves {7 {3}}) -> [3]", "(leaves {8 {6} {7 {5}}}) -> [6 5]", "(leaves {7}) -> [7]"], "name": "leaves"}
{"time": 0.515891, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {4}) -> [4]", "(leaves {1 {2} {2}}) -> [2 2]", "(leaves {3 {7 {1} {9}} {6}}) -> [1 9 6]", "(leaves {3 {7}}) -> [7]", "(leaves {5 {0 {1} {8 {7}}}}) -> [1 7]", "(leaves {5 {9 {8}} {3}}) -> [8 3]"], "name": "leaves"}
{"time": 0.664442, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2 {9}}) -> [9]", "(leaves {2}) -> [2]", "(leaves {9 {6 {2} {7 {9}}} {8 {6 {1}}}}) -> [2 9 1]", "(leaves {9 {8}}) -> [8]", "(leaves {3 {9}}) -> [9]", "(leaves {0}) -> [0]", "(leaves {8 {9 {4 {3}}} {6 {5 {2}}}}) -> [3 2]"], "name": "leaves"}
{"time": 0.49005, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {3 {3} {6}}) -> [3 6]", "(leaves {0 {9}}) -> [9]", "(leaves {6 {0}}) -> [0]", "(leaves {8 {1} {7 {4}}}) -> [1 4]", "(leaves {8}) -> [8]", "(leaves {}) -> []", "(leaves {2 {5 {7} {4}} {9 {1}}}) -> [7 4 1]"], "name": "leaves"}
{"time": 0.502789, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9 {9}}) -> [9]", "(leaves {4}) -> [4]", "(leaves {7 {9} {4 {9}}}) -> [9 9]", "(leaves {5 {5 {9} {1}}}) -> [9 1]", "(leaves {2}) -> [2]", "(leaves {9}) -> [9]", "(leaves {4}) -> [4]", "(leaves {2 {5 {0 {9}} {8 {4}}} {4 {1 {9} {2}} {7}}}) -> [9 4 9 2 7]"], "name": "leaves"}
{"time": 0.646035, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {4 {4 {9}} {3 {9 {8}} {0 {6} {9}}}}) -> [9 8 6 9]", "(leaves {9 {0 {4}}}) -> [4]", "(leaves {7 {5} {2}}) -> [5 2]", "(leaves {5 {6}}) -> [6]", "(leaves {3}) -> [3]", "(leaves {8}) -> [8]", "(leaves {}) -> []", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.470783, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0 {1 {6}}}) -> [6]", "(leaves {6 {0 {3} {0}} {9}}) -> [3 0 9]", "(leaves {2 {5 {5}}}) -> [5]", "(leaves {1 {8}}) -> [8]", "(leaves {1}) -> [1]", "(leaves {}) -> []", "(leaves {4 {8 {7}}}) -> [7]", "(leaves {5 {9} {6}}) -> [9 6]"], "name": "leaves"}
{"time": 0.467302, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2 {7 {4}} {5}}) -> [4 5]", "(leaves {7 {0} {5}}) -> [0 5]", "(leaves {2}) -> [2]", "(leaves {3}) -> [3]", "(leaves {0}) -> [0]", "(leaves {9}) -> [9]", "(leaves {2 {9 {9 {7} {7}}}}) -> [7 7]", "(leaves {4 {5 {5}}}) -> [5]"], "name": "leaves"}
{"time": 0.441677, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {9}) -> [9]", "(leaves {6}) -> [6]", "(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {2 {7 {0 {1} {4}}}}) -> [1 4]", "(leaves {}) -> []", "(leaves {}) -> []"], "name": "leaves"}
