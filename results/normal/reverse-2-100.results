{"examples": ["(reverse [6]) -> [6]"], "time": 0.000325, "solution": "(let reverse (let a (lambda (b) b) _) _)", "name": "reverse"}
{"examples": ["(reverse []) -> []"], "time": 0.000415, "solution": "(let reverse (let a (lambda (b) []) _) _)", "name": "reverse"}
{"examples": ["(reverse [9]) -> [9]"], "time": 0.000416, "solution": "(let reverse (let a (lambda (b) b) _) _)", "name": "reverse"}
{"examples": ["(reverse [0 0 1 0 4]) -> [4 0 1 0 0]"], "time": 0.12603, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [4 8]) -> [8 4]"], "time": 0.132163, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [8 5 8 4 5]) -> [5 4 8 5 8]"], "time": 0.113683, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [6 7 7 0]) -> [0 7 7 6]"], "time": 0.109513, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [1 6]) -> [6 1]"], "time": 0.093946, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [9 7 1 8]) -> [8 1 7 9]"], "time": 0.103869, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [4 6 3 4]) -> [4 3 6 4]"], "time": 0.105044, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [4 1 1 5]) -> [5 1 1 4]"], "time": 0.10543, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [6 5 3]) -> [3 5 6]"], "time": 0.135676, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [9 5 6 3 5]) -> [5 3 6 5 9]"], "time": 0.107632, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [4 3 6 2]) -> [2 6 3 4]"], "time": 0.129188, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [4 5 5 8]) -> [8 5 5 4]"], "time": 0.127968, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [4 6 7 3 9]) -> [9 3 7 6 4]"], "time": 0.115887, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [9 3 7 4 7]) -> [7 4 7 3 9]"], "time": 0.091683, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [6 3 0]) -> [0 3 6]"], "time": 0.102571, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse []) -> []"], "time": 0.000367, "solution": "(let reverse (let a (lambda (b) []) _) _)", "name": "reverse"}
{"examples": ["(reverse [7]) -> [7]"], "time": 0.000458, "solution": "(let reverse (let a (lambda (b) b) _) _)", "name": "reverse"}
{"examples": ["(reverse [2 7 4 9]) -> [9 4 7 2]"], "time": 0.104994, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [5]) -> [5]"], "time": 0.000437, "solution": "(let reverse (let a (lambda (b) b) _) _)", "name": "reverse"}
{"examples": ["(reverse []) -> []"], "time": 0.000787, "solution": "(let reverse (let a (lambda (b) []) _) _)", "name": "reverse"}
{"examples": ["(reverse [7]) -> [7]"], "time": 0.000375, "solution": "(let reverse (let a (lambda (b) b) _) _)", "name": "reverse"}
{"examples": ["(reverse [5 6 1 4 5]) -> [5 4 1 6 5]"], "time": 0.110165, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [1 7]) -> [7 1]"], "time": 0.120074, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [6 5 0 4 0]) -> [0 4 0 5 6]"], "time": 0.124315, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [3 8 1]) -> [1 8 3]"], "time": 0.091459, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [2 3]) -> [3 2]"], "time": 0.103658, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [3 8 9]) -> [9 8 3]"], "time": 0.102988, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [3 3 5 6 3]) -> [3 6 5 3 3]"], "time": 0.102024, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [8 0]) -> [0 8]"], "time": 0.099581, "solution": "(let reverse (let a (lambda (b) (cons 0 (cons (car b) []))) _) _)", "name": "reverse"}
{"examples": ["(reverse [9 7 0 9]) -> [9 0 7 9]"], "time": 0.098955, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse []) -> []"], "time": 0.000354, "solution": "(let reverse (let a (lambda (b) []) _) _)", "name": "reverse"}
{"examples": ["(reverse [0 6 2 3]) -> [3 2 6 0]"], "time": 0.126847, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse []) -> []"], "time": 0.00064, "solution": "(let reverse (let a (lambda (b) []) _) _)", "name": "reverse"}
{"examples": ["(reverse []) -> []"], "time": 0.00054, "solution": "(let reverse (let a (lambda (b) []) _) _)", "name": "reverse"}
{"examples": ["(reverse [1 5 2 0]) -> [0 2 5 1]"], "time": 0.100118, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse []) -> []"], "time": 0.000468, "solution": "(let reverse (let a (lambda (b) []) _) _)", "name": "reverse"}
{"examples": ["(reverse []) -> []"], "time": 0.000671, "solution": "(let reverse (let a (lambda (b) []) _) _)", "name": "reverse"}
{"examples": ["(reverse [8]) -> [8]"], "time": 0.000465, "solution": "(let reverse (let a (lambda (b) b) _) _)", "name": "reverse"}
{"examples": ["(reverse [4 1 0 9]) -> [9 0 1 4]"], "time": 0.10099, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [7 1 4]) -> [4 1 7]"], "time": 0.103029, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [8 0 8 2]) -> [2 8 0 8]"], "time": 0.094183, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [0 3 2 3]) -> [3 2 3 0]"], "time": 0.096081, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [4 5]) -> [5 4]"], "time": 0.107002, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse []) -> []"], "time": 0.000459, "solution": "(let reverse (let a (lambda (b) []) _) _)", "name": "reverse"}
{"examples": ["(reverse [5 1 1 4]) -> [4 1 1 5]"], "time": 0.079609, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse []) -> []"], "time": 0.000354, "solution": "(let reverse (let a (lambda (b) []) _) _)", "name": "reverse"}
{"examples": ["(reverse [0 3]) -> [3 0]"], "time": 0.10283, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [5 8 9 4 7]) -> [7 4 9 8 5]"], "time": 0.11902, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [6]) -> [6]"], "time": 0.000508, "solution": "(let reverse (let a (lambda (b) b) _) _)", "name": "reverse"}
{"examples": ["(reverse [4 5 9 1]) -> [1 9 5 4]"], "time": 0.084205, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [6 6 3 3 4]) -> [4 3 3 6 6]"], "time": 0.112253, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse []) -> []"], "time": 0.000661, "solution": "(let reverse (let a (lambda (b) []) _) _)", "name": "reverse"}
