{"time": 0.035215, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum []) -> 0", "(sum [9 1]) -> 10", "(sum []) -> 0", "(sum [5 6]) -> 11"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.033998, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum [5]) -> 5", "(sum [5 0 4 7 3]) -> 19", "(sum [8 5 7]) -> 20", "(sum [9 4 4]) -> 17"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.033663, "examples": ["(sum []) -> 0", "(sum [3 5]) -> 8", "(sum [8]) -> 8", "(sum [0 5]) -> 5", "(sum []) -> 0", "(sum [5 1]) -> 6"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.043029, "examples": ["(sum []) -> 0", "(sum [3 4 0]) -> 7", "(sum [0 1 3 5 6]) -> 15", "(sum [5 6 8 5 4]) -> 28", "(sum [3 4 3 0 8]) -> 18", "(sum [9 0 9 8 6]) -> 32"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.031289, "examples": ["(sum []) -> 0", "(sum [7 3 2 2 1]) -> 15", "(sum [6 3 3]) -> 12", "(sum [9]) -> 9", "(sum [2 6 9]) -> 17", "(sum [0 7 0 1]) -> 8"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.053344, "examples": ["(sum []) -> 0", "(sum [7 1 9 9 3]) -> 29", "(sum [3 5 8 5 0]) -> 21", "(sum [7 7 4 3]) -> 21", "(sum [1 0 5]) -> 6", "(sum [6 1 5]) -> 12"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.031435, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum [3 9]) -> 12", "(sum [5 7 3]) -> 15", "(sum [3]) -> 3", "(sum [3 5 4 0 6]) -> 18"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.031144, "examples": ["(sum []) -> 0", "(sum [9]) -> 9", "(sum []) -> 0", "(sum [4 5 7 8 9]) -> 33", "(sum [7 2 0 3 7]) -> 19", "(sum [5 4 2 0]) -> 11"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.052233, "examples": ["(sum []) -> 0", "(sum [6 2 4 8]) -> 20", "(sum [8 7 2 9 3]) -> 29", "(sum []) -> 0", "(sum []) -> 0", "(sum []) -> 0"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.045892, "examples": ["(sum []) -> 0", "(sum [7 8 2 0 2]) -> 19", "(sum [0 6 2 9 6]) -> 23", "(sum [9 8 9 3 4]) -> 33", "(sum [6 4 2 3]) -> 15", "(sum [5 9]) -> 14"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.053927, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum [2 5]) -> 7", "(sum [6 4]) -> 10", "(sum []) -> 0", "(sum [5 6]) -> 11"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.044378, "examples": ["(sum []) -> 0", "(sum [0 0]) -> 0", "(sum [3]) -> 3", "(sum [3 7 1]) -> 11", "(sum [4]) -> 4", "(sum [3 4 7]) -> 14"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.03578, "examples": ["(sum []) -> 0", "(sum [1 8]) -> 9", "(sum [8]) -> 8", "(sum [1 7 5 5]) -> 18", "(sum []) -> 0", "(sum [9 6]) -> 15"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.037487, "examples": ["(sum []) -> 0", "(sum [8 1 2]) -> 11", "(sum [4 5 4 2 0]) -> 15", "(sum [4 0 1 7]) -> 12", "(sum [1 4 9 4]) -> 18", "(sum [3 0 1 9 5]) -> 18"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.048383, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum []) -> 0", "(sum [5 7 1 8 6]) -> 27", "(sum [9 1 8 1 6]) -> 25", "(sum [5]) -> 5"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.043501, "examples": ["(sum []) -> 0", "(sum [8 6 7 0]) -> 21", "(sum []) -> 0", "(sum []) -> 0", "(sum [0 5 3]) -> 8", "(sum [9 3 8 6 0]) -> 26"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.03126, "examples": ["(sum []) -> 0", "(sum [7 2 6 7 9]) -> 31", "(sum [1 8 5 9]) -> 23", "(sum []) -> 0", "(sum [4 2 9 0 8]) -> 23", "(sum [2 5]) -> 7"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.038265, "examples": ["(sum []) -> 0", "(sum [0 2 4]) -> 6", "(sum [7]) -> 7", "(sum [1]) -> 1", "(sum []) -> 0", "(sum [2 1]) -> 3"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.029837, "examples": ["(sum []) -> 0", "(sum [5]) -> 5", "(sum [5 0]) -> 5", "(sum []) -> 0", "(sum [7 6 3]) -> 16", "(sum []) -> 0"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.050111, "examples": ["(sum []) -> 0", "(sum [8 9]) -> 17", "(sum [5 4 3]) -> 12", "(sum [1 9 2]) -> 12", "(sum [5 0 4 0]) -> 9", "(sum [2 0]) -> 2"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.035833, "examples": ["(sum []) -> 0", "(sum [2 0 2 8]) -> 12", "(sum [9 8 4 6 6]) -> 33", "(sum [8 4 1]) -> 13", "(sum [5]) -> 5", "(sum [5]) -> 5"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.047008, "examples": ["(sum []) -> 0", "(sum [3 9 1]) -> 13", "(sum []) -> 0", "(sum [2 2 3 6]) -> 13", "(sum [2 4 4]) -> 10", "(sum [9 4 7 4 8]) -> 32"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.0437, "examples": ["(sum []) -> 0", "(sum [0 5 1 9]) -> 15", "(sum []) -> 0", "(sum [2 4]) -> 6", "(sum [9]) -> 9", "(sum [1 8]) -> 9"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.038232, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum [2 4 8 7 8]) -> 29", "(sum [2 4 6 9]) -> 21", "(sum [5 7]) -> 12", "(sum [9 3 1 5 7]) -> 25"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.032725, "examples": ["(sum []) -> 0", "(sum [2 1 1 7]) -> 11", "(sum [8 2 4]) -> 14", "(sum [4 4 1]) -> 9", "(sum [5 5 8 4]) -> 22", "(sum [3 7 0 3 7]) -> 20"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.03215, "examples": ["(sum []) -> 0", "(sum [9 2 8 0]) -> 19", "(sum []) -> 0", "(sum [0]) -> 0", "(sum [0 7]) -> 7", "(sum [8 9 7 7 9]) -> 40"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.041525, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum []) -> 0", "(sum [8 9 9 8]) -> 34", "(sum [0 2]) -> 2", "(sum [6 3 0 8 1]) -> 18"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.035181, "examples": ["(sum []) -> 0", "(sum [3 5 1 0]) -> 9", "(sum [4 3 0]) -> 7", "(sum [7 3 0 1 9]) -> 20", "(sum [4 5]) -> 9", "(sum [5 2 8 8 2]) -> 25"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.031838, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum [2 9]) -> 11", "(sum [3 1 5 2 1]) -> 12", "(sum [1 5 8]) -> 14", "(sum [0]) -> 0"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.032823, "examples": ["(sum []) -> 0", "(sum [0 5 8 2]) -> 15", "(sum [1 0 2 3 5]) -> 11", "(sum [2 2 2 8]) -> 14", "(sum [7 7]) -> 14", "(sum [7 5 6 2 4]) -> 24"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.0395, "examples": ["(sum []) -> 0", "(sum [3 2 0]) -> 5", "(sum [4 0 9 6 3]) -> 22", "(sum [6 8 8 2]) -> 24", "(sum [6]) -> 6", "(sum [3 0]) -> 3"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.042574, "examples": ["(sum []) -> 0", "(sum [2 4 1 6]) -> 13", "(sum [2 9 6 1 0]) -> 18", "(sum [1 4 9]) -> 14", "(sum [6 1 3 9]) -> 19", "(sum [6]) -> 6"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.036446, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum []) -> 0", "(sum [8]) -> 8", "(sum [6 2 9 3 8]) -> 28", "(sum [1]) -> 1"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.029957, "examples": ["(sum []) -> 0", "(sum [4 6 1]) -> 11", "(sum []) -> 0", "(sum [3 0]) -> 3", "(sum [6]) -> 6", "(sum [6]) -> 6"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.05102, "examples": ["(sum []) -> 0", "(sum [8]) -> 8", "(sum [2 9 8]) -> 19", "(sum []) -> 0", "(sum [9]) -> 9", "(sum [0 1 2 6 6]) -> 15"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.032811, "examples": ["(sum []) -> 0", "(sum [4 1 7]) -> 12", "(sum [4 5]) -> 9", "(sum [6]) -> 6", "(sum []) -> 0", "(sum [0 9 2 6 1]) -> 18"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.029941, "examples": ["(sum []) -> 0", "(sum [8 0]) -> 8", "(sum [8 4 4 2]) -> 18", "(sum [5 7]) -> 12", "(sum [2 3 7 2]) -> 14", "(sum [1 7 6 9 3]) -> 26"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.030119, "examples": ["(sum []) -> 0", "(sum [3 1]) -> 4", "(sum [9 9]) -> 18", "(sum [3 8]) -> 11", "(sum [2 0 0 8 0]) -> 10", "(sum [8 7]) -> 15"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.047952, "examples": ["(sum []) -> 0", "(sum [0 3]) -> 3", "(sum [4 2 3]) -> 9", "(sum []) -> 0", "(sum []) -> 0", "(sum [8 2 3 5 7]) -> 25"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.037556, "examples": ["(sum []) -> 0", "(sum [4 0 2 5]) -> 11", "(sum [3 3 7 4 0]) -> 17", "(sum []) -> 0", "(sum []) -> 0", "(sum [7 9 4 1 5]) -> 26"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.047227, "examples": ["(sum []) -> 0", "(sum [1]) -> 1", "(sum [7 8 8 2]) -> 25", "(sum [5 4 7 3 0]) -> 19", "(sum [4 9 3]) -> 16", "(sum [2 7 1 6]) -> 16"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.041314, "examples": ["(sum []) -> 0", "(sum [7 1 7 1 2]) -> 18", "(sum [3 8 2 1]) -> 14", "(sum [9]) -> 9", "(sum [7 1 5]) -> 13", "(sum [1 4 4 9]) -> 18"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.044088, "examples": ["(sum []) -> 0", "(sum [5 4 7]) -> 16", "(sum [8]) -> 8", "(sum [9 3]) -> 12", "(sum [1 3 0 5]) -> 9", "(sum [7]) -> 7"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.047208, "examples": ["(sum []) -> 0", "(sum [6 1 6 0 9]) -> 22", "(sum [7 6 6 7]) -> 26", "(sum []) -> 0", "(sum []) -> 0", "(sum [8 1]) -> 9"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.050763, "examples": ["(sum []) -> 0", "(sum [8 3 9]) -> 20", "(sum [5 9 0]) -> 14", "(sum [9]) -> 9", "(sum []) -> 0", "(sum [9 3]) -> 12"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.041375, "examples": ["(sum []) -> 0", "(sum [6]) -> 6", "(sum [9 2 5 6]) -> 22", "(sum []) -> 0", "(sum [7]) -> 7", "(sum [6 3 6 5]) -> 20"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.046447, "examples": ["(sum []) -> 0", "(sum [4 4 0 6 6]) -> 20", "(sum [7 5]) -> 12", "(sum [4 3 8 2]) -> 17", "(sum [8]) -> 8", "(sum [2 8]) -> 10"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.051787, "examples": ["(sum []) -> 0", "(sum [8 0 6]) -> 14", "(sum []) -> 0", "(sum [7]) -> 7", "(sum [4 4 7]) -> 15", "(sum [6 9]) -> 15"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.049962, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum []) -> 0", "(sum [5 6 7 5]) -> 23", "(sum [5]) -> 5", "(sum [5 8 0 8 6]) -> 27"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.049561, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum []) -> 0", "(sum []) -> 0", "(sum [2 3 5 1]) -> 11", "(sum [3 5 3 0 6]) -> 17"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.051642, "examples": ["(sum []) -> 0", "(sum [0 4 6 1 0]) -> 11", "(sum [5]) -> 5", "(sum []) -> 0", "(sum []) -> 0", "(sum [8]) -> 8"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.044852, "examples": ["(sum []) -> 0", "(sum [4]) -> 4", "(sum [4 9 4 9 2]) -> 28", "(sum [0 8 6 4 3]) -> 21", "(sum [5]) -> 5", "(sum []) -> 0"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.046412, "examples": ["(sum []) -> 0", "(sum [8 9 0 0]) -> 17", "(sum [9 6 1 9]) -> 25", "(sum [2 2 1]) -> 5", "(sum [8]) -> 8", "(sum []) -> 0"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.036012, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum [4 7 9 9 8]) -> 37", "(sum [6 9]) -> 15", "(sum [1 5 0 5]) -> 11", "(sum []) -> 0"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.049325, "examples": ["(sum []) -> 0", "(sum [3]) -> 3", "(sum [8 0 5]) -> 13", "(sum [8 6]) -> 14", "(sum []) -> 0", "(sum [4 8 1 2 2]) -> 17"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.032498, "examples": ["(sum []) -> 0", "(sum [9 2 5]) -> 16", "(sum [9]) -> 9", "(sum [7 6 9 3 9]) -> 34", "(sum [8 9]) -> 17", "(sum [3 8 5]) -> 16"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.029584, "examples": ["(sum []) -> 0", "(sum [1 5 3 5]) -> 14", "(sum [8 5 8 4 5]) -> 30", "(sum [6 3]) -> 9", "(sum [4]) -> 4", "(sum [4 8 4 1]) -> 17"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.047755, "examples": ["(sum []) -> 0", "(sum [3]) -> 3", "(sum [3]) -> 3", "(sum [5 2 3]) -> 10", "(sum [6 8]) -> 14", "(sum [6 0 6 6]) -> 18"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.031771, "examples": ["(sum []) -> 0", "(sum [8]) -> 8", "(sum [3 8 4 0]) -> 15", "(sum [1 2 1 3 7]) -> 14", "(sum [5 6 8]) -> 19", "(sum [2 4 7 3 3]) -> 19"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.043337, "examples": ["(sum []) -> 0", "(sum [2 8 8 1 2]) -> 21", "(sum [5 6 9]) -> 20", "(sum [4]) -> 4", "(sum [8 6 1]) -> 15", "(sum [8 8 1 5 9]) -> 31"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.030698, "examples": ["(sum []) -> 0", "(sum [3 0 8]) -> 11", "(sum [8 5 9]) -> 22", "(sum [5]) -> 5", "(sum []) -> 0", "(sum []) -> 0"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.048292, "examples": ["(sum []) -> 0", "(sum [9 0 5 5 1]) -> 20", "(sum [4 8]) -> 12", "(sum [3 8 3 4]) -> 18", "(sum [3]) -> 3", "(sum [0 4 9 0]) -> 13"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.04363, "examples": ["(sum []) -> 0", "(sum [4 6 3 8 5]) -> 26", "(sum [8]) -> 8", "(sum [0 9 2 8 8]) -> 27", "(sum [5 7 8 2 8]) -> 30", "(sum [7 3 6 4]) -> 20"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.044691, "examples": ["(sum []) -> 0", "(sum [2]) -> 2", "(sum [2 4 4 7 6]) -> 23", "(sum [5 4 8 0]) -> 17", "(sum [3 8 1 9 2]) -> 23", "(sum [7 3 3 8]) -> 21"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.044471, "examples": ["(sum []) -> 0", "(sum [3 0]) -> 3", "(sum [1]) -> 1", "(sum [5 4]) -> 9", "(sum [6 2 9 7 2]) -> 26", "(sum []) -> 0"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.041348, "examples": ["(sum []) -> 0", "(sum [4 7 9 9]) -> 29", "(sum []) -> 0", "(sum []) -> 0", "(sum []) -> 0", "(sum [5 1 2]) -> 8"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.030057, "examples": ["(sum []) -> 0", "(sum [3 7 4 1]) -> 15", "(sum [1]) -> 1", "(sum [6 7]) -> 13", "(sum [0 1]) -> 1", "(sum [3 1 0 8 7]) -> 19"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.034288, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum [4 0 7 8 0]) -> 19", "(sum [5 6 0]) -> 11", "(sum [5 9 4]) -> 18", "(sum [7 3 8 5]) -> 23"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.049138, "examples": ["(sum []) -> 0", "(sum [9 0]) -> 9", "(sum [0 8 8 2 7]) -> 25", "(sum [1 8 9 6]) -> 24", "(sum [1 2 5 6 5]) -> 19", "(sum []) -> 0"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.032113, "examples": ["(sum []) -> 0", "(sum [9]) -> 9", "(sum [4 7]) -> 11", "(sum [7]) -> 7", "(sum [7]) -> 7", "(sum [0 4 3 6 0]) -> 13"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.034208, "examples": ["(sum []) -> 0", "(sum [3]) -> 3", "(sum [5 0]) -> 5", "(sum [8 8 4]) -> 20", "(sum [2]) -> 2", "(sum [6 8 7 4 1]) -> 26"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.032672, "examples": ["(sum []) -> 0", "(sum [6]) -> 6", "(sum []) -> 0", "(sum [5 7 7 6 0]) -> 25", "(sum [7]) -> 7", "(sum [6 5 1 6]) -> 18"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.033156, "examples": ["(sum []) -> 0", "(sum [8 1 1 8 5]) -> 23", "(sum []) -> 0", "(sum [4 0 9]) -> 13", "(sum []) -> 0", "(sum [5]) -> 5"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.040369, "examples": ["(sum []) -> 0", "(sum [8]) -> 8", "(sum [5]) -> 5", "(sum []) -> 0", "(sum [8 7 6 9]) -> 30", "(sum [0 5 7]) -> 12"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.031458, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum [7]) -> 7", "(sum [7]) -> 7", "(sum []) -> 0", "(sum [6 4]) -> 10"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.035365, "examples": ["(sum []) -> 0", "(sum [3 4 5 3]) -> 15", "(sum [6 9 4 1]) -> 20", "(sum [5 2 9]) -> 16", "(sum []) -> 0", "(sum [4 2 2 3 8]) -> 19"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.05374, "examples": ["(sum []) -> 0", "(sum [1 8 5 0]) -> 14", "(sum [9 6 1 9 8]) -> 33", "(sum [2 1 8 5 1]) -> 17", "(sum []) -> 0", "(sum [9 3 4 8 2]) -> 26"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.038391, "examples": ["(sum []) -> 0", "(sum [9 9 1]) -> 19", "(sum [6 3 9]) -> 18", "(sum [6 5 2]) -> 13", "(sum [9 1 8]) -> 18", "(sum []) -> 0"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.040893, "examples": ["(sum []) -> 0", "(sum [9 3]) -> 12", "(sum []) -> 0", "(sum []) -> 0", "(sum [4 7 6 7 6]) -> 30", "(sum [7 2 6]) -> 15"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.039955, "examples": ["(sum []) -> 0", "(sum [4]) -> 4", "(sum [3 3 7]) -> 13", "(sum []) -> 0", "(sum []) -> 0", "(sum []) -> 0"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.035213, "examples": ["(sum []) -> 0", "(sum [5 7 2 5 7]) -> 26", "(sum []) -> 0", "(sum [4]) -> 4", "(sum []) -> 0", "(sum [7 8 5]) -> 20"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.039445, "examples": ["(sum []) -> 0", "(sum [8 1 1]) -> 10", "(sum []) -> 0", "(sum [5]) -> 5", "(sum [8 9 5]) -> 22", "(sum [2]) -> 2"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.040541, "examples": ["(sum []) -> 0", "(sum [0 9 8]) -> 17", "(sum [4 9]) -> 13", "(sum [2]) -> 2", "(sum [3 3]) -> 6", "(sum [3]) -> 3"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.031778, "examples": ["(sum []) -> 0", "(sum [5 4 5]) -> 14", "(sum []) -> 0", "(sum []) -> 0", "(sum [8 0]) -> 8", "(sum [9 6]) -> 15"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.030666, "examples": ["(sum []) -> 0", "(sum [6]) -> 6", "(sum [1]) -> 1", "(sum []) -> 0", "(sum []) -> 0", "(sum [7 3 9 2]) -> 21"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.031173, "examples": ["(sum []) -> 0", "(sum [3 5 6 9 4]) -> 27", "(sum [0 0]) -> 0", "(sum [0 3 7 9 8]) -> 27", "(sum [7 2 0]) -> 9", "(sum [7 2 8 8 7]) -> 32"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.032211, "examples": ["(sum []) -> 0", "(sum [5 0 4]) -> 9", "(sum [0 3 0 6]) -> 9", "(sum [6 3]) -> 9", "(sum [4 4 2]) -> 10", "(sum [9 6 2]) -> 17"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.042326, "examples": ["(sum []) -> 0", "(sum [2 7]) -> 9", "(sum []) -> 0", "(sum [1 6 6 0]) -> 13", "(sum [8 6 9 9]) -> 32", "(sum []) -> 0"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.03118, "examples": ["(sum []) -> 0", "(sum [7 1 6 9]) -> 23", "(sum [7 7 0]) -> 14", "(sum [5 7]) -> 12", "(sum [5 4 0 3 4]) -> 16", "(sum [9 6]) -> 15"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.039892, "examples": ["(sum []) -> 0", "(sum [0 2 4 1 4]) -> 11", "(sum [6 8 5 8 4]) -> 31", "(sum [6 9 6 9]) -> 30", "(sum [9 2]) -> 11", "(sum [7 4]) -> 11"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.052466, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum [3]) -> 3", "(sum []) -> 0", "(sum []) -> 0", "(sum [2 4]) -> 6"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.02937, "examples": ["(sum []) -> 0", "(sum [7 2 3]) -> 12", "(sum [5]) -> 5", "(sum [0 8 9 7]) -> 24", "(sum [8]) -> 8", "(sum [4 5 8]) -> 17"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.038137, "examples": ["(sum []) -> 0", "(sum [6]) -> 6", "(sum [6 2]) -> 8", "(sum []) -> 0", "(sum [4 7]) -> 11", "(sum [9 2]) -> 11"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.030803, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum [7 7 7 5 1]) -> 27", "(sum [1 6 5 9 1]) -> 22", "(sum [4 0]) -> 4", "(sum [5]) -> 5"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.031712, "examples": ["(sum []) -> 0", "(sum [2 4 8 7 1]) -> 22", "(sum [5 2 6 5]) -> 18", "(sum [7 0 0 5 0]) -> 12", "(sum [4 7 8 3 1]) -> 23", "(sum [4 6]) -> 10"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.028711, "examples": ["(sum []) -> 0", "(sum [8 7]) -> 15", "(sum [3 7 4 5]) -> 19", "(sum []) -> 0", "(sum [9]) -> 9", "(sum []) -> 0"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.029856, "examples": ["(sum []) -> 0", "(sum [3 1 4 5 5]) -> 18", "(sum []) -> 0", "(sum [7 9 6]) -> 22", "(sum []) -> 0", "(sum [8 9 9 4 1]) -> 31"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.028374, "examples": ["(sum []) -> 0", "(sum [5 0 1 0]) -> 6", "(sum []) -> 0", "(sum [4 0]) -> 4", "(sum []) -> 0", "(sum [7 3 2 9]) -> 21"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.028769, "examples": ["(sum []) -> 0", "(sum [7 2 1 3]) -> 13", "(sum [1 7 5 8 7]) -> 28", "(sum []) -> 0", "(sum [6 1]) -> 7", "(sum [2 8 5]) -> 15"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.028451, "examples": ["(sum []) -> 0", "(sum [9 9]) -> 18", "(sum [0]) -> 0", "(sum [0 8 4 6 1]) -> 19", "(sum []) -> 0", "(sum [5 9 2 6]) -> 22"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
