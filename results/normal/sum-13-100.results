{"time": 0.031272, "examples": ["(sum []) -> 0", "(sum [2 6 0]) -> 8", "(sum [5]) -> 5", "(sum [5]) -> 5", "(sum []) -> 0", "(sum [1 1]) -> 2", "(sum [9]) -> 9", "(sum [3]) -> 3", "(sum []) -> 0", "(sum [0 2]) -> 2", "(sum [1]) -> 1", "(sum []) -> 0"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.045233, "examples": ["(sum []) -> 0", "(sum [2]) -> 2", "(sum [4 7 6 8 7]) -> 32", "(sum [9 8 7 6 5]) -> 35", "(sum [5 4 7]) -> 16", "(sum [0 9 7 2 9]) -> 27", "(sum [9 2 3 6]) -> 20", "(sum []) -> 0", "(sum [9 3 1 5]) -> 18", "(sum [9]) -> 9", "(sum [4 1 0]) -> 5", "(sum [6 0 5]) -> 11"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.040073, "examples": ["(sum []) -> 0", "(sum [2 0 1 5 4]) -> 12", "(sum [3 6 5 5]) -> 19", "(sum []) -> 0", "(sum [7 9 6]) -> 22", "(sum [7 8 4 3 1]) -> 23", "(sum [5 1 2]) -> 8", "(sum [2 0 1]) -> 3", "(sum [9]) -> 9", "(sum [4 0 1 7 7]) -> 19", "(sum [7 4 7 8]) -> 26", "(sum []) -> 0"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.040726, "examples": ["(sum []) -> 0", "(sum [5 2 5]) -> 12", "(sum [6 0 5]) -> 11", "(sum [5]) -> 5", "(sum [5 2 6 2 4]) -> 19", "(sum [5 5 6]) -> 16", "(sum []) -> 0", "(sum [6 2 2 4 3]) -> 17", "(sum [8 8 4]) -> 20", "(sum [2 1 7 4]) -> 14", "(sum [9 1 6 7 4]) -> 27", "(sum [9]) -> 9"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.047556, "examples": ["(sum []) -> 0", "(sum [9 3 6 6]) -> 24", "(sum [1]) -> 1", "(sum [6 1 1 6]) -> 14", "(sum [5]) -> 5", "(sum []) -> 0", "(sum [5]) -> 5", "(sum [4 9 5]) -> 18", "(sum []) -> 0", "(sum [3]) -> 3", "(sum [5 9]) -> 14", "(sum [7]) -> 7"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.051392, "examples": ["(sum []) -> 0", "(sum [5 1 7 5 0]) -> 18", "(sum [5 8 0]) -> 13", "(sum []) -> 0", "(sum []) -> 0", "(sum [2 0 0 1 9]) -> 12", "(sum [1 8]) -> 9", "(sum []) -> 0", "(sum [2 0 9 0 5]) -> 16", "(sum [2 7 8 4 6]) -> 27", "(sum [3 8]) -> 11", "(sum [6 7 5 8 0]) -> 26"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.034334, "examples": ["(sum []) -> 0", "(sum [9 9 9]) -> 27", "(sum []) -> 0", "(sum [7 7 4 0 8]) -> 26", "(sum [7 7 7 0 2]) -> 23", "(sum [3 1]) -> 4", "(sum [5]) -> 5", "(sum [9 5 3 8 6]) -> 31", "(sum [4 0]) -> 4", "(sum [3 2]) -> 5", "(sum [2 4 9 6 7]) -> 28", "(sum [6 9]) -> 15"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.041244, "examples": ["(sum []) -> 0", "(sum [7 7]) -> 14", "(sum [5]) -> 5", "(sum [1 4]) -> 5", "(sum [0 8 9 7]) -> 24", "(sum [1 9 6 1 1]) -> 18", "(sum [6 4]) -> 10", "(sum [6 4 7 3]) -> 20", "(sum [0 9]) -> 9", "(sum [1 2 7 3 2]) -> 15", "(sum [9 5 1]) -> 15", "(sum [6 8 9 9 5]) -> 37"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.035416, "examples": ["(sum []) -> 0", "(sum [6 7]) -> 13", "(sum [4 0]) -> 4", "(sum [3 8]) -> 11", "(sum []) -> 0", "(sum [9]) -> 9", "(sum [5 5]) -> 10", "(sum [3 2 6]) -> 11", "(sum [8 7 7 2]) -> 24", "(sum [7]) -> 7", "(sum [7 4 6 0]) -> 17", "(sum [2 0 4 7]) -> 13"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.040846, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum [6 3 7]) -> 16", "(sum [5 3 0 2]) -> 10", "(sum [5 1]) -> 6", "(sum [9 9]) -> 18", "(sum [4 8 0 9 6]) -> 27", "(sum [9 0 8 3 5]) -> 25", "(sum [3]) -> 3", "(sum [7]) -> 7", "(sum [6 3 9 7]) -> 25", "(sum [4 1]) -> 5"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.042437, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum [1 3 7 4 0]) -> 15", "(sum [8 5 4]) -> 17", "(sum [7]) -> 7", "(sum [4 0]) -> 4", "(sum [5 4 6 9 2]) -> 26", "(sum [1 6 5]) -> 12", "(sum []) -> 0", "(sum []) -> 0", "(sum [8 9 2 8]) -> 27", "(sum [8 9 0 2 8]) -> 27"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.039688, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum [9 2 2 5]) -> 18", "(sum [8 6 6 6]) -> 26", "(sum []) -> 0", "(sum [7 0]) -> 7", "(sum []) -> 0", "(sum [3]) -> 3", "(sum [9 4]) -> 13", "(sum []) -> 0", "(sum [2 8 6 1 8]) -> 25", "(sum []) -> 0"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.042844, "examples": ["(sum []) -> 0", "(sum [2 7 4 8]) -> 21", "(sum [6]) -> 6", "(sum [1]) -> 1", "(sum [2 5]) -> 7", "(sum [2]) -> 2", "(sum [6 5]) -> 11", "(sum [5 4 2]) -> 11", "(sum [2 3 3]) -> 8", "(sum [3]) -> 3", "(sum [7 7]) -> 14", "(sum [8]) -> 8"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.03529, "examples": ["(sum []) -> 0", "(sum [2 1 6]) -> 9", "(sum [9]) -> 9", "(sum [2 6 3 4]) -> 15", "(sum [0 4 4 0]) -> 8", "(sum [5]) -> 5", "(sum [8 8 1 6 2]) -> 25", "(sum [9 8 7]) -> 24", "(sum [1 8 3 0 6]) -> 18", "(sum [8]) -> 8", "(sum [1 4]) -> 5", "(sum [9 8 4 0 3]) -> 24"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.040844, "examples": ["(sum []) -> 0", "(sum [4 9]) -> 13", "(sum [3 4 6 2]) -> 15", "(sum [1 3 5 1]) -> 10", "(sum [3 9 7 0 9]) -> 28", "(sum [8 4 5]) -> 17", "(sum [3 0]) -> 3", "(sum [1 3 4 6]) -> 14", "(sum [1 4 7]) -> 12", "(sum [9 1 9 8 4]) -> 31", "(sum [7]) -> 7", "(sum [1 0]) -> 1"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.042848, "examples": ["(sum []) -> 0", "(sum [1 4]) -> 5", "(sum []) -> 0", "(sum [6 6 6]) -> 18", "(sum [4 9 6]) -> 19", "(sum [7]) -> 7", "(sum [6 9 8 9]) -> 32", "(sum [0 8]) -> 8", "(sum []) -> 0", "(sum [5]) -> 5", "(sum [4 4]) -> 8", "(sum [2 2 5]) -> 9"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.036495, "examples": ["(sum []) -> 0", "(sum [8 0]) -> 8", "(sum []) -> 0", "(sum [6]) -> 6", "(sum [5]) -> 5", "(sum [7 2 1 6 4]) -> 20", "(sum [7]) -> 7", "(sum [3 0 7 6 0]) -> 16", "(sum []) -> 0", "(sum [9 9]) -> 18", "(sum []) -> 0", "(sum [3 0]) -> 3"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.032632, "examples": ["(sum []) -> 0", "(sum [8 4]) -> 12", "(sum [6 2]) -> 8", "(sum [6 4 7]) -> 17", "(sum [7 7 8 4 6]) -> 32", "(sum [1 2]) -> 3", "(sum [8 2 2 5]) -> 17", "(sum [9]) -> 9", "(sum [5 1 4 9]) -> 19", "(sum [3 5 3]) -> 11", "(sum [9 4 9 7 4]) -> 33", "(sum [0 0 7 7]) -> 14"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.048741, "examples": ["(sum []) -> 0", "(sum [7 8 4]) -> 19", "(sum [7]) -> 7", "(sum []) -> 0", "(sum [9 6 3]) -> 18", "(sum [1 2]) -> 3", "(sum [9 4 5 3]) -> 21", "(sum [9 6 6 7]) -> 28", "(sum [7 1 0 4]) -> 12", "(sum [4 2]) -> 6", "(sum [6 0 6 7 3]) -> 22", "(sum [3]) -> 3"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.040179, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum [0]) -> 0", "(sum [2 6 7 4]) -> 19", "(sum [6 8 9 3 5]) -> 31", "(sum [5 9 4 6 7]) -> 31", "(sum [2 8 9 7]) -> 26", "(sum [6 5 8 8 8]) -> 35", "(sum [9 9 9]) -> 27", "(sum []) -> 0", "(sum [1 2 4 9]) -> 16", "(sum [8 9 7]) -> 24"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.043515, "examples": ["(sum []) -> 0", "(sum [6]) -> 6", "(sum [1 9 8]) -> 18", "(sum [4 2 7 0]) -> 13", "(sum [9 2 5]) -> 16", "(sum []) -> 0", "(sum [5 6 9 1]) -> 21", "(sum []) -> 0", "(sum [3 5 4 7]) -> 19", "(sum [8 8 1]) -> 17", "(sum []) -> 0", "(sum []) -> 0"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.036597, "examples": ["(sum []) -> 0", "(sum [7 9]) -> 16", "(sum [6 6 5 4 7]) -> 28", "(sum [8 5]) -> 13", "(sum [1 7 8 8]) -> 24", "(sum [5 8 5 5 2]) -> 25", "(sum []) -> 0", "(sum []) -> 0", "(sum []) -> 0", "(sum []) -> 0", "(sum []) -> 0", "(sum [7 9 8 1]) -> 25"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.040943, "examples": ["(sum []) -> 0", "(sum [0]) -> 0", "(sum [7 0]) -> 7", "(sum [3 6 6 4 6]) -> 25", "(sum [5 0]) -> 5", "(sum [6 1 3 6 7]) -> 23", "(sum [6 9 5 5]) -> 25", "(sum [4]) -> 4", "(sum [0 5 0 0 1]) -> 6", "(sum [2]) -> 2", "(sum [2]) -> 2", "(sum [3 8 3]) -> 14"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.031358, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum [5 8]) -> 13", "(sum [2 8 6]) -> 16", "(sum [9 9 7 5]) -> 30", "(sum [9 3 3 4 8]) -> 27", "(sum [2 6 2 9 9]) -> 28", "(sum []) -> 0", "(sum [1 0]) -> 1", "(sum [8 2 7 5 5]) -> 27", "(sum [5 0 9 2 2]) -> 18", "(sum []) -> 0"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.049812, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum [2 0]) -> 2", "(sum [9 1 8 9]) -> 27", "(sum [4 3 3 2]) -> 12", "(sum [4 0 6]) -> 10", "(sum [5]) -> 5", "(sum [1 0 5 7 8]) -> 21", "(sum []) -> 0", "(sum [8 2 5 1]) -> 16", "(sum [1 2 3]) -> 6", "(sum [8]) -> 8"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.031421, "examples": ["(sum []) -> 0", "(sum [6 4 4]) -> 14", "(sum [6 8 2]) -> 16", "(sum [9 7 9 7]) -> 32", "(sum [7 1 5]) -> 13", "(sum [4 7 7]) -> 18", "(sum [3]) -> 3", "(sum [1]) -> 1", "(sum [7 7 2 0]) -> 16", "(sum [4]) -> 4", "(sum [7 8 7 5]) -> 27", "(sum [5 6 9 0]) -> 20"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.048537, "examples": ["(sum []) -> 0", "(sum [6 2 0]) -> 8", "(sum [5]) -> 5", "(sum [9]) -> 9", "(sum [7 2 8 4]) -> 21", "(sum [9]) -> 9", "(sum []) -> 0", "(sum [5 6 3 6]) -> 20", "(sum [5 4 3 5]) -> 17", "(sum [1]) -> 1", "(sum [3 5 4]) -> 12", "(sum [9]) -> 9"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.042085, "examples": ["(sum []) -> 0", "(sum [4 7 7 0]) -> 18", "(sum []) -> 0", "(sum [9 5 4]) -> 18", "(sum [9 4 7 7 1]) -> 28", "(sum [0]) -> 0", "(sum [8]) -> 8", "(sum [5 4]) -> 9", "(sum [1]) -> 1", "(sum []) -> 0", "(sum [7]) -> 7", "(sum []) -> 0"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.031371, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum [4 3 1 1]) -> 9", "(sum [4 7 0 0]) -> 11", "(sum [9 6 1 3]) -> 19", "(sum []) -> 0", "(sum []) -> 0", "(sum []) -> 0", "(sum [7 4 2]) -> 13", "(sum [8 7 2]) -> 17", "(sum []) -> 0", "(sum [1 3 3 1]) -> 8"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.052365, "examples": ["(sum []) -> 0", "(sum [9 2]) -> 11", "(sum [0 3 0 7 7]) -> 17", "(sum [4 5 0 9]) -> 18", "(sum [8 0]) -> 8", "(sum [9 7 9 4]) -> 29", "(sum []) -> 0", "(sum [5 8 6 5]) -> 24", "(sum [0 6]) -> 6", "(sum [7]) -> 7", "(sum [2 7 3]) -> 12", "(sum [2 7 5 7]) -> 21"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.039849, "examples": ["(sum []) -> 0", "(sum [1 9 3 3 7]) -> 23", "(sum []) -> 0", "(sum [7 7 4 5 1]) -> 24", "(sum [7 6]) -> 13", "(sum [5 3 0]) -> 8", "(sum [8 7 2]) -> 17", "(sum [0 4 8]) -> 12", "(sum [9 7 2 9 0]) -> 27", "(sum [9 9 1 9]) -> 28", "(sum [1 0 0 9 0]) -> 10", "(sum [1 9 2 9]) -> 21"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.050867, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum [8 2 5 9 7]) -> 31", "(sum [1 0 0 6 2]) -> 9", "(sum []) -> 0", "(sum [2 3 7 6]) -> 18", "(sum []) -> 0", "(sum [0]) -> 0", "(sum []) -> 0", "(sum [4]) -> 4", "(sum [7 7 3 7 9]) -> 33", "(sum [1 2 6]) -> 9"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.046828, "examples": ["(sum []) -> 0", "(sum [5 9 0 8 4]) -> 26", "(sum [1 3 0 6]) -> 10", "(sum [8 8]) -> 16", "(sum [4 0]) -> 4", "(sum []) -> 0", "(sum [7]) -> 7", "(sum [8 2 0]) -> 10", "(sum []) -> 0", "(sum []) -> 0", "(sum [8 1 2]) -> 11", "(sum [2 9 7 1]) -> 19"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.030257, "examples": ["(sum []) -> 0", "(sum [7 9 0 2]) -> 18", "(sum [3 8 9 9 6]) -> 35", "(sum [8 0]) -> 8", "(sum [7 7 8 1]) -> 23", "(sum [3 0 1]) -> 4", "(sum [8 5 2]) -> 15", "(sum [4 3 6 9 3]) -> 25", "(sum [0 5 4 2]) -> 11", "(sum []) -> 0", "(sum [9 2]) -> 11", "(sum [3 6 1 3]) -> 13"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.035948, "examples": ["(sum []) -> 0", "(sum [4 7 2 3 5]) -> 21", "(sum [1 5 9]) -> 15", "(sum [2 7 4 5 3]) -> 21", "(sum [8 2 4 3 0]) -> 17", "(sum [4]) -> 4", "(sum [1 8 8 2 8]) -> 27", "(sum [7]) -> 7", "(sum [2]) -> 2", "(sum [6]) -> 6", "(sum [0 9]) -> 9", "(sum [2 7 6]) -> 15"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.040927, "examples": ["(sum []) -> 0", "(sum [8]) -> 8", "(sum [7 8 2]) -> 17", "(sum [6 2 7 7 3]) -> 25", "(sum []) -> 0", "(sum [2 5 9 1 4]) -> 21", "(sum [0 2]) -> 2", "(sum [5 1 0]) -> 6", "(sum []) -> 0", "(sum [8 2 0 5]) -> 15", "(sum [0 6]) -> 6", "(sum [1 8 9 4 5]) -> 27"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.031473, "examples": ["(sum []) -> 0", "(sum [0 5]) -> 5", "(sum [9 4 0 2]) -> 15", "(sum [8 9 7 6 4]) -> 34", "(sum [7 0 7 2 4]) -> 20", "(sum [5]) -> 5", "(sum [4 6 2 4 9]) -> 25", "(sum []) -> 0", "(sum [7 4]) -> 11", "(sum [6 6 1 4 9]) -> 26", "(sum [7 6 5]) -> 18", "(sum [7 1]) -> 8"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.031705, "examples": ["(sum []) -> 0", "(sum [2 7]) -> 9", "(sum [0]) -> 0", "(sum [8]) -> 8", "(sum [9 1 6 3 6]) -> 25", "(sum [0 0 4 2 6]) -> 12", "(sum []) -> 0", "(sum [2 8]) -> 10", "(sum [9 3 5 0 5]) -> 22", "(sum [8]) -> 8", "(sum []) -> 0", "(sum [9]) -> 9"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.048543, "examples": ["(sum []) -> 0", "(sum [3 7 8 0 4]) -> 22", "(sum [8]) -> 8", "(sum [0 3 5 3]) -> 11", "(sum [9 2 8]) -> 19", "(sum [1]) -> 1", "(sum [9 1 5 5]) -> 20", "(sum [6 6 9 0 0]) -> 21", "(sum [8 1 1 3]) -> 13", "(sum [6 3 5 8 8]) -> 30", "(sum [7 6 6 5]) -> 24", "(sum [6 6 2 1]) -> 15"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.043448, "examples": ["(sum []) -> 0", "(sum [1 9]) -> 10", "(sum [4 5 3 4 8]) -> 24", "(sum []) -> 0", "(sum [7 9 9 4]) -> 29", "(sum [7 5 4 6 0]) -> 22", "(sum [8 8 6 9]) -> 31", "(sum [8 1]) -> 9", "(sum [4 8]) -> 12", "(sum [8 8]) -> 16", "(sum [5 8 0]) -> 13", "(sum [4 6 1 2 1]) -> 14"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.037882, "examples": ["(sum []) -> 0", "(sum [6]) -> 6", "(sum [2 3]) -> 5", "(sum [7 5 9 4]) -> 25", "(sum [5 6 1]) -> 12", "(sum [6 3 4]) -> 13", "(sum [9 6 1 7 3]) -> 26", "(sum [6 1 7 3]) -> 17", "(sum [9 1]) -> 10", "(sum [3 7]) -> 10", "(sum [7 8 4 3]) -> 22", "(sum [7]) -> 7"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.029983, "examples": ["(sum []) -> 0", "(sum [7 8]) -> 15", "(sum [1 8]) -> 9", "(sum [9 9]) -> 18", "(sum []) -> 0", "(sum [5 6 1 2]) -> 14", "(sum [7 2 5 7 3]) -> 24", "(sum [2 0 5]) -> 7", "(sum [2 8 6 4]) -> 20", "(sum [3 4 7 8 2]) -> 24", "(sum [4 2 4]) -> 10", "(sum [6 1 9 4 3]) -> 23"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.041905, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum [7 6 4]) -> 17", "(sum [1 3 2]) -> 6", "(sum [4 5 1 2 2]) -> 14", "(sum [8 8 2]) -> 18", "(sum [5 8]) -> 13", "(sum [0 7 6 3 0]) -> 16", "(sum [2 0 9 9 3]) -> 23", "(sum [3]) -> 3", "(sum [4]) -> 4", "(sum [5 4]) -> 9"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.0314, "examples": ["(sum []) -> 0", "(sum [8 3 0 0]) -> 11", "(sum [5 7 7 2 3]) -> 24", "(sum [3 4 7]) -> 14", "(sum [7 4 0 3 0]) -> 14", "(sum [2 9 9 7]) -> 27", "(sum [6 2 1]) -> 9", "(sum [1 2 1 1]) -> 5", "(sum [1 3 8 2]) -> 14", "(sum []) -> 0", "(sum [5 2 1 3]) -> 11", "(sum [2 7 9]) -> 18"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.035629, "examples": ["(sum []) -> 0", "(sum [2 6 0]) -> 8", "(sum [5 8 0 0]) -> 13", "(sum [9]) -> 9", "(sum [0 0 5 8 1]) -> 14", "(sum [3 1 9 8]) -> 21", "(sum []) -> 0", "(sum []) -> 0", "(sum [3 2 4 3 3]) -> 15", "(sum [0 8]) -> 8", "(sum [0 7 8 3 2]) -> 20", "(sum [9 0 1 6 8]) -> 24"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.046413, "examples": ["(sum []) -> 0", "(sum [3 0 5]) -> 8", "(sum [3 6 2]) -> 11", "(sum [8 1 4 2 7]) -> 22", "(sum [5 7 8]) -> 20", "(sum [0 0 1]) -> 1", "(sum [0 6 1 4]) -> 11", "(sum [1 0 5 5]) -> 11", "(sum [9 6 2]) -> 17", "(sum [3 4 4 7]) -> 18", "(sum []) -> 0", "(sum [3 3 1 6]) -> 13"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.04924, "examples": ["(sum []) -> 0", "(sum [3 4 4 8 0]) -> 19", "(sum [8 0 8 4 2]) -> 22", "(sum [8 6 1 2]) -> 17", "(sum [4 4 9]) -> 17", "(sum []) -> 0", "(sum [1]) -> 1", "(sum [3 6 7 9]) -> 25", "(sum [3 4 0 7]) -> 14", "(sum [8 6]) -> 14", "(sum [5 2 5 0]) -> 12", "(sum [5 5 4 8 7]) -> 29"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.037219, "examples": ["(sum []) -> 0", "(sum [3]) -> 3", "(sum [5]) -> 5", "(sum [1]) -> 1", "(sum [7 1 3 1]) -> 12", "(sum [7]) -> 7", "(sum [1 5 0 0 2]) -> 8", "(sum [0 5 8 2]) -> 15", "(sum [8 2]) -> 10", "(sum [2 6]) -> 8", "(sum [1 7 8 7 3]) -> 26", "(sum [9 0 0 9]) -> 18"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.029589, "examples": ["(sum []) -> 0", "(sum [2]) -> 2", "(sum [4 6]) -> 10", "(sum [7 4 8 9]) -> 28", "(sum [7]) -> 7", "(sum []) -> 0", "(sum [0 0 0]) -> 0", "(sum [8 1 6]) -> 15", "(sum [8]) -> 8", "(sum [9 8 2 6 8]) -> 33", "(sum [5 9]) -> 14", "(sum [3 3]) -> 6"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.048551, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum [9]) -> 9", "(sum [6 4 9 2 2]) -> 23", "(sum [5 0 8]) -> 13", "(sum [8 6 6]) -> 20", "(sum [1 0 2 5]) -> 8", "(sum [4]) -> 4", "(sum []) -> 0", "(sum [8 5 0]) -> 13", "(sum [5]) -> 5", "(sum [5 7 4]) -> 16"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.049809, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum [5]) -> 5", "(sum [5 8 6 5 7]) -> 31", "(sum []) -> 0", "(sum [5 0 7 3]) -> 15", "(sum [9 9 9 6 7]) -> 40", "(sum [3 5 8 3 6]) -> 25", "(sum []) -> 0", "(sum [0 3 3 7]) -> 13", "(sum [2 0 2 4]) -> 8", "(sum [7 6 1]) -> 14"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.036676, "examples": ["(sum []) -> 0", "(sum [8 7 5 7]) -> 27", "(sum [4]) -> 4", "(sum [9]) -> 9", "(sum [8 6]) -> 14", "(sum []) -> 0", "(sum [7 7]) -> 14", "(sum [5]) -> 5", "(sum [4 7 2]) -> 13", "(sum [0]) -> 0", "(sum [9 9 1 9 3]) -> 31", "(sum [3 7 9]) -> 19"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.043669, "examples": ["(sum []) -> 0", "(sum [2 0]) -> 2", "(sum [3 0]) -> 3", "(sum [7 8 6]) -> 21", "(sum [2 2 2 5 1]) -> 12", "(sum [6 8 7 9]) -> 30", "(sum [7]) -> 7", "(sum [9]) -> 9", "(sum []) -> 0", "(sum [2 7 6 2 0]) -> 17", "(sum [1 8 8 0 0]) -> 17", "(sum [5 5 1]) -> 11"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.030909, "examples": ["(sum []) -> 0", "(sum [6 0 9 8 6]) -> 29", "(sum [5 4]) -> 9", "(sum [8 2 2 1]) -> 13", "(sum [8 2 6 8]) -> 24", "(sum []) -> 0", "(sum [3 0]) -> 3", "(sum [5 5 0 7]) -> 17", "(sum [8 5 5 2 1]) -> 21", "(sum [2 3 6 7 0]) -> 18", "(sum [0 9 4 2 5]) -> 20", "(sum [0 9 6 8 2]) -> 25"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.050571, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum []) -> 0", "(sum [8 8 4 5 7]) -> 32", "(sum [5 4 4]) -> 13", "(sum []) -> 0", "(sum [3 5 5]) -> 13", "(sum [1 4 4 5 7]) -> 21", "(sum [3 8 5]) -> 16", "(sum []) -> 0", "(sum [3 4 0 8]) -> 15", "(sum [5 3]) -> 8"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.031282, "examples": ["(sum []) -> 0", "(sum [9 4]) -> 13", "(sum [8 5 5 7 8]) -> 33", "(sum [5]) -> 5", "(sum [5 1 6 9 9]) -> 30", "(sum [3 8 5 1 1]) -> 18", "(sum [3 1 8]) -> 12", "(sum [9 2 2 8]) -> 21", "(sum []) -> 0", "(sum []) -> 0", "(sum [8 4 3]) -> 15", "(sum [2 8 4 9 3]) -> 26"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.033314, "examples": ["(sum []) -> 0", "(sum [5 3 8 4 5]) -> 25", "(sum [4 1 8 9]) -> 22", "(sum []) -> 0", "(sum [7 7]) -> 14", "(sum [8 9 6]) -> 23", "(sum [0 0]) -> 0", "(sum [6 9 3 8 0]) -> 26", "(sum [5]) -> 5", "(sum []) -> 0", "(sum [3]) -> 3", "(sum [6 8]) -> 14"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.048436, "examples": ["(sum []) -> 0", "(sum [0 7 2]) -> 9", "(sum [8 3 4 4]) -> 19", "(sum [3]) -> 3", "(sum []) -> 0", "(sum []) -> 0", "(sum [2 7]) -> 9", "(sum [3 2 7]) -> 12", "(sum [2 7 3 4 3]) -> 19", "(sum [5 0 0 1 6]) -> 12", "(sum [9 4 5 7 8]) -> 33", "(sum []) -> 0"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.040968, "examples": ["(sum []) -> 0", "(sum [1 0 0 4]) -> 5", "(sum [0 2 2]) -> 4", "(sum [7 1 8 9]) -> 25", "(sum [9 1]) -> 10", "(sum [0 4 7]) -> 11", "(sum []) -> 0", "(sum [1]) -> 1", "(sum [9 7 3 7 9]) -> 35", "(sum [4 4 7 0]) -> 15", "(sum [4 5 6]) -> 15", "(sum []) -> 0"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.04329, "examples": ["(sum []) -> 0", "(sum [5 5]) -> 10", "(sum [2 0 6]) -> 8", "(sum []) -> 0", "(sum [7 7 0 3 5]) -> 22", "(sum [5 0 5]) -> 10", "(sum [9 5]) -> 14", "(sum []) -> 0", "(sum [7 6 0 9]) -> 22", "(sum []) -> 0", "(sum [1]) -> 1", "(sum []) -> 0"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.034131, "examples": ["(sum []) -> 0", "(sum [5 2]) -> 7", "(sum []) -> 0", "(sum [5 9 9]) -> 23", "(sum [8 8 1]) -> 17", "(sum [5 7 5 9 6]) -> 32", "(sum [3 2]) -> 5", "(sum []) -> 0", "(sum [7 0 4 0 4]) -> 15", "(sum []) -> 0", "(sum [6 5 7 2]) -> 20", "(sum [9]) -> 9"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.031846, "examples": ["(sum []) -> 0", "(sum [8 6 2 2 9]) -> 27", "(sum [0]) -> 0", "(sum [9 5]) -> 14", "(sum [2 9 0 8 0]) -> 19", "(sum [4 0 5 8 0]) -> 17", "(sum [7]) -> 7", "(sum [8 1 2]) -> 11", "(sum [8 1]) -> 9", "(sum [7 7]) -> 14", "(sum [4 6 4 3]) -> 17", "(sum [1 4]) -> 5"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.039265, "examples": ["(sum []) -> 0", "(sum [8 9 9]) -> 26", "(sum [1 5 9 7]) -> 22", "(sum [8 1 0 4]) -> 13", "(sum [0 6 0]) -> 6", "(sum [3 1]) -> 4", "(sum [4 0]) -> 4", "(sum [4]) -> 4", "(sum [4 4 6 0 7]) -> 21", "(sum [7 1 8 6 1]) -> 23", "(sum [4]) -> 4", "(sum [8 7 4]) -> 19"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.048176, "examples": ["(sum []) -> 0", "(sum [0 2 7 9 6]) -> 24", "(sum [2 3]) -> 5", "(sum [0 0 8]) -> 8", "(sum [4 4 4 3]) -> 15", "(sum [8 3]) -> 11", "(sum [2 0 5 3 0]) -> 10", "(sum [4 8 9 7]) -> 28", "(sum []) -> 0", "(sum [9]) -> 9", "(sum [4 1 9 7]) -> 21", "(sum [4 1 6 2 3]) -> 16"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.049616, "examples": ["(sum []) -> 0", "(sum [1 3]) -> 4", "(sum [0 7 6 2 3]) -> 18", "(sum [8 1]) -> 9", "(sum [6]) -> 6", "(sum [5 9]) -> 14", "(sum [3 4]) -> 7", "(sum [4]) -> 4", "(sum [6 5 5]) -> 16", "(sum [6 5 1 9]) -> 21", "(sum [0]) -> 0", "(sum [0 2 6]) -> 8"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.029859, "examples": ["(sum []) -> 0", "(sum [0 2 9 1 9]) -> 21", "(sum [2]) -> 2", "(sum [6 4 7]) -> 17", "(sum []) -> 0", "(sum [2 4 4 0]) -> 10", "(sum [3 4]) -> 7", "(sum [0 4 1]) -> 5", "(sum []) -> 0", "(sum [6]) -> 6", "(sum [6]) -> 6", "(sum [2 3]) -> 5"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.033989, "examples": ["(sum []) -> 0", "(sum [8 0 5 4]) -> 17", "(sum [9 1]) -> 10", "(sum [6 7 2]) -> 15", "(sum []) -> 0", "(sum [9 4 4 0 9]) -> 26", "(sum [8 3 7 2]) -> 20", "(sum [7 1 4 3]) -> 15", "(sum [4 4 1 1 5]) -> 15", "(sum [2]) -> 2", "(sum [4 7 9]) -> 20", "(sum []) -> 0"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.030287, "examples": ["(sum []) -> 0", "(sum [2 0 6]) -> 8", "(sum [7]) -> 7", "(sum [1 2 9 4 5]) -> 21", "(sum []) -> 0", "(sum []) -> 0", "(sum [2 9]) -> 11", "(sum [0]) -> 0", "(sum []) -> 0", "(sum [8 4 6]) -> 18", "(sum [3 1]) -> 4", "(sum [6 4 6 7]) -> 23"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.030337, "examples": ["(sum []) -> 0", "(sum [6 7]) -> 13", "(sum [0 6 9]) -> 15", "(sum [8 0 1]) -> 9", "(sum [1 6 9]) -> 16", "(sum [4 0 9 8]) -> 21", "(sum []) -> 0", "(sum [0 1]) -> 1", "(sum []) -> 0", "(sum []) -> 0", "(sum [0 3]) -> 3", "(sum [9 9 8 5 3]) -> 34"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.043425, "examples": ["(sum []) -> 0", "(sum [3 3 0 7]) -> 13", "(sum [0 0 7 8 3]) -> 18", "(sum [8 7 0]) -> 15", "(sum [3 4 6 6 3]) -> 22", "(sum []) -> 0", "(sum [3 1 9 5 8]) -> 26", "(sum [1 3 4]) -> 8", "(sum [6]) -> 6", "(sum [1]) -> 1", "(sum [4 7 9 4]) -> 24", "(sum [2 7 7]) -> 16"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.048464, "examples": ["(sum []) -> 0", "(sum [1 4]) -> 5", "(sum [4 9 9 7]) -> 29", "(sum [6 5 5 4]) -> 20", "(sum []) -> 0", "(sum [7 9]) -> 16", "(sum [4 0]) -> 4", "(sum []) -> 0", "(sum [7 6 9 6 5]) -> 33", "(sum [9 5 4 8 9]) -> 35", "(sum [1 9 1]) -> 11", "(sum [9 1 2 6]) -> 18"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.042962, "examples": ["(sum []) -> 0", "(sum [6 0]) -> 6", "(sum [4 8 7 6 0]) -> 25", "(sum [7 7 7]) -> 21", "(sum [0 8 3 9]) -> 20", "(sum [1 8]) -> 9", "(sum [7 5 8]) -> 20", "(sum [4 3 5]) -> 12", "(sum []) -> 0", "(sum [8 8 2]) -> 18", "(sum []) -> 0", "(sum [6 1 9 4 0]) -> 20"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.032495, "examples": ["(sum []) -> 0", "(sum [9 8 2 4 7]) -> 30", "(sum [7]) -> 7", "(sum [9 2 2 3 8]) -> 24", "(sum [2 5 5 5 8]) -> 25", "(sum [2 4 0 9 1]) -> 16", "(sum [2 5 3 1]) -> 11", "(sum [9 0 1 5]) -> 15", "(sum [3 6 1 6 9]) -> 25", "(sum [9 6]) -> 15", "(sum [7 3 4 6]) -> 20", "(sum []) -> 0"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.040269, "examples": ["(sum []) -> 0", "(sum [0 1 0 5]) -> 6", "(sum []) -> 0", "(sum [9 0 6 0]) -> 15", "(sum [1 5 4 1 1]) -> 12", "(sum [6]) -> 6", "(sum [5 7 6 6]) -> 24", "(sum [6 0 1 8]) -> 15", "(sum [8]) -> 8", "(sum [5 8]) -> 13", "(sum []) -> 0", "(sum [3]) -> 3"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.051844, "examples": ["(sum []) -> 0", "(sum [4 9 1 8 2]) -> 24", "(sum []) -> 0", "(sum [7 6 3]) -> 16", "(sum [5 5]) -> 10", "(sum [1 6]) -> 7", "(sum [5 8 2 7]) -> 22", "(sum [3 6]) -> 9", "(sum [9 8 4]) -> 21", "(sum []) -> 0", "(sum [7 2]) -> 9", "(sum [8 9]) -> 17"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.037789, "examples": ["(sum []) -> 0", "(sum [9 5]) -> 14", "(sum [9 6 9]) -> 24", "(sum [2 8 7 5]) -> 22", "(sum [9 7 1]) -> 17", "(sum [3 6]) -> 9", "(sum [0 8 9 2]) -> 19", "(sum [8]) -> 8", "(sum [5 0 9 1 8]) -> 23", "(sum [6 6 9 5]) -> 26", "(sum [5]) -> 5", "(sum []) -> 0"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.044052, "examples": ["(sum []) -> 0", "(sum [3 3 8]) -> 14", "(sum [2 0 6]) -> 8", "(sum [4 7 0 2 2]) -> 15", "(sum [1 0 2 4]) -> 7", "(sum [1 0 2 6]) -> 9", "(sum [8 3 1]) -> 12", "(sum []) -> 0", "(sum [2 8 8 2]) -> 20", "(sum [7]) -> 7", "(sum []) -> 0", "(sum []) -> 0"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.032406, "examples": ["(sum []) -> 0", "(sum [5 9]) -> 14", "(sum []) -> 0", "(sum [5 9 7]) -> 21", "(sum []) -> 0", "(sum []) -> 0", "(sum [1 0]) -> 1", "(sum [2]) -> 2", "(sum []) -> 0", "(sum [2 3]) -> 5", "(sum [8 0 4]) -> 12", "(sum [2 8 6]) -> 16"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.032696, "examples": ["(sum []) -> 0", "(sum [8 5 2 5 1]) -> 21", "(sum [8 2 5 1 2]) -> 18", "(sum [8 3 8 3 7]) -> 29", "(sum []) -> 0", "(sum [8 5 4 8]) -> 25", "(sum [6 2 1]) -> 9", "(sum [0 8 0 5]) -> 13", "(sum [5]) -> 5", "(sum [6]) -> 6", "(sum []) -> 0", "(sum [7 6 5 4 1]) -> 23"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.036112, "examples": ["(sum []) -> 0", "(sum [0 1 1 2 7]) -> 11", "(sum [8]) -> 8", "(sum [2 4 6 5]) -> 17", "(sum [8 9 4]) -> 21", "(sum [7 0 1 3]) -> 11", "(sum [6 5 9 1 8]) -> 29", "(sum [9 8 7 7 2]) -> 33", "(sum [8 1 4]) -> 13", "(sum [4]) -> 4", "(sum [4 4 9]) -> 17", "(sum [7 3 9 6]) -> 25"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.030125, "examples": ["(sum []) -> 0", "(sum [0 7 9]) -> 16", "(sum [5]) -> 5", "(sum [2]) -> 2", "(sum [2 4 2]) -> 8", "(sum [4 5 3]) -> 12", "(sum [0 9 9 8 4]) -> 30", "(sum [7 9 5]) -> 21", "(sum [5 2 7]) -> 14", "(sum [7 2 8]) -> 17", "(sum [4]) -> 4", "(sum [9 7]) -> 16"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.044731, "examples": ["(sum []) -> 0", "(sum [4 7 4 9 1]) -> 25", "(sum [1 1 6]) -> 8", "(sum [7 7 6 2 4]) -> 26", "(sum [4 3 6 5]) -> 18", "(sum []) -> 0", "(sum []) -> 0", "(sum [1 0 5]) -> 6", "(sum [3 0]) -> 3", "(sum [3 1 0 2]) -> 6", "(sum [8]) -> 8", "(sum []) -> 0"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.035157, "examples": ["(sum []) -> 0", "(sum [4 4]) -> 8", "(sum [9 5]) -> 14", "(sum [4]) -> 4", "(sum [6 9]) -> 15", "(sum [0 7 3 7]) -> 17", "(sum [5 7 7]) -> 19", "(sum [8 1]) -> 9", "(sum [2 5]) -> 7", "(sum [7 1 3 7 1]) -> 19", "(sum [9 2 0 9]) -> 20", "(sum [7 8 1 2]) -> 18"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.039392, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum []) -> 0", "(sum []) -> 0", "(sum [2]) -> 2", "(sum [7]) -> 7", "(sum [0 9]) -> 9", "(sum [9 7 5 3]) -> 24", "(sum [3 0 4 7 9]) -> 23", "(sum []) -> 0", "(sum [6 3 7]) -> 16", "(sum [0]) -> 0"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.04068, "examples": ["(sum []) -> 0", "(sum [6 2 2 2]) -> 12", "(sum [2 5 2 5 8]) -> 22", "(sum [0 2 9 8]) -> 19", "(sum [2 9 7 7 1]) -> 26", "(sum [7 2 1 2]) -> 12", "(sum [2]) -> 2", "(sum [0 4 2 4 9]) -> 19", "(sum [7 4 8 3 5]) -> 27", "(sum [7 2]) -> 9", "(sum [1]) -> 1", "(sum [3]) -> 3"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.044277, "examples": ["(sum []) -> 0", "(sum [6 0]) -> 6", "(sum [5 1]) -> 6", "(sum [1 1 7 2 8]) -> 19", "(sum [3]) -> 3", "(sum []) -> 0", "(sum [6]) -> 6", "(sum [5 0 7]) -> 12", "(sum []) -> 0", "(sum [8 2]) -> 10", "(sum [5 2]) -> 7", "(sum [3 1 1 7]) -> 12"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.030119, "examples": ["(sum []) -> 0", "(sum [1 6 1 9]) -> 17", "(sum [5]) -> 5", "(sum [1 5 7]) -> 13", "(sum []) -> 0", "(sum [4 7 9 0]) -> 20", "(sum [1]) -> 1", "(sum [4 6 3 3 3]) -> 19", "(sum [6 0 9]) -> 15", "(sum [1 0 4 9 8]) -> 22", "(sum [9 8 4 1]) -> 22", "(sum [7]) -> 7"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.037495, "examples": ["(sum []) -> 0", "(sum [9 3 7 4]) -> 23", "(sum [0 2]) -> 2", "(sum [1 8 7 8 7]) -> 31", "(sum [4]) -> 4", "(sum [4]) -> 4", "(sum [9 4]) -> 13", "(sum [5 8]) -> 13", "(sum [5 7 0 2 4]) -> 18", "(sum [9]) -> 9", "(sum [7 1 5]) -> 13", "(sum [2 1 4 3]) -> 10"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.046091, "examples": ["(sum []) -> 0", "(sum [8]) -> 8", "(sum [7 5 3 0 9]) -> 24", "(sum []) -> 0", "(sum [5 2 9 5 0]) -> 21", "(sum []) -> 0", "(sum [3 3]) -> 6", "(sum [0]) -> 0", "(sum [9 9 5 8 1]) -> 32", "(sum [2 0 6 6 9]) -> 23", "(sum [1 3 1 3 5]) -> 13", "(sum [4 5 9]) -> 18"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.031746, "examples": ["(sum []) -> 0", "(sum [2 8 2 4 8]) -> 24", "(sum []) -> 0", "(sum [1 7 0 2 3]) -> 13", "(sum [6 1 8 9 3]) -> 27", "(sum [7]) -> 7", "(sum [7 8]) -> 15", "(sum []) -> 0", "(sum [2 6 5]) -> 13", "(sum [6]) -> 6", "(sum []) -> 0", "(sum [3]) -> 3"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.030145, "examples": ["(sum []) -> 0", "(sum [6 5]) -> 11", "(sum [7 2 6]) -> 15", "(sum []) -> 0", "(sum [5 8 3]) -> 16", "(sum [4 7 1]) -> 12", "(sum [1 8 3]) -> 12", "(sum [4]) -> 4", "(sum [9]) -> 9", "(sum [5 0 0 2]) -> 7", "(sum [3]) -> 3", "(sum [0 2]) -> 2"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.040369, "examples": ["(sum []) -> 0", "(sum [8 8]) -> 16", "(sum [0 9 7]) -> 16", "(sum [9 9 7]) -> 25", "(sum [5]) -> 5", "(sum [4 1]) -> 5", "(sum [7 4]) -> 11", "(sum [5 8 0 8 8]) -> 29", "(sum [9]) -> 9", "(sum [3]) -> 3", "(sum [7]) -> 7", "(sum [1 3 8 5]) -> 17"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.028999, "examples": ["(sum []) -> 0", "(sum [5]) -> 5", "(sum [1 5]) -> 6", "(sum [6 1 5 5 9]) -> 26", "(sum []) -> 0", "(sum [1 3 6 7 0]) -> 17", "(sum []) -> 0", "(sum [3 8 2]) -> 13", "(sum [6 4 5 5 6]) -> 26", "(sum [6 9 7 2 1]) -> 25", "(sum [3 4 5 7 5]) -> 24", "(sum [9 8]) -> 17"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.029033, "examples": ["(sum []) -> 0", "(sum [3]) -> 3", "(sum [6 0 1 0]) -> 7", "(sum []) -> 0", "(sum [7]) -> 7", "(sum [9 1 2]) -> 12", "(sum []) -> 0", "(sum [4 8 3]) -> 15", "(sum [5 1 2 9 2]) -> 19", "(sum [8 5 5 5 6]) -> 29", "(sum [9 8 8 3]) -> 28", "(sum [3]) -> 3"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.029015, "examples": ["(sum []) -> 0", "(sum [9 7 9]) -> 25", "(sum [5 5 8 8]) -> 26", "(sum []) -> 0", "(sum [6 9 1]) -> 16", "(sum [4 7 3]) -> 14", "(sum [7 3 1 9 7]) -> 27", "(sum [1]) -> 1", "(sum [6 3 3]) -> 12", "(sum [9 1]) -> 10", "(sum [9 9 9 9]) -> 36", "(sum [2]) -> 2"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.029121, "examples": ["(sum []) -> 0", "(sum [4 3 6]) -> 13", "(sum [5 2 2 4]) -> 13", "(sum [3 5 9]) -> 17", "(sum [8 9]) -> 17", "(sum [9 0]) -> 9", "(sum [6 3 9 9 8]) -> 35", "(sum [5]) -> 5", "(sum [1 4 9 7]) -> 21", "(sum [9 5 3 1]) -> 18", "(sum [9 7 9]) -> 25", "(sum [9 4 7]) -> 20"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.029013, "examples": ["(sum []) -> 0", "(sum [4]) -> 4", "(sum [7 8 0 9]) -> 24", "(sum [2 2 8]) -> 12", "(sum [0 8 1 6 8]) -> 23", "(sum [1]) -> 1", "(sum []) -> 0", "(sum [4 8 6]) -> 18", "(sum [9 2 0]) -> 11", "(sum [3 6 2 4 4]) -> 19", "(sum [5 6 5 2]) -> 18", "(sum [5]) -> 5"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.02939, "examples": ["(sum []) -> 0", "(sum []) -> 0", "(sum [5]) -> 5", "(sum [4 5 9 0 8]) -> 26", "(sum [3 8 5 7 9]) -> 32", "(sum []) -> 0", "(sum [9 7 1 7]) -> 24", "(sum [4 6]) -> 10", "(sum [7 0 9 4 3]) -> 23", "(sum [3 7]) -> 10", "(sum [6 4 7 4]) -> 21", "(sum [2 3 9 4 2]) -> 20"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.028648, "examples": ["(sum []) -> 0", "(sum [3]) -> 3", "(sum [0 1 9 8]) -> 18", "(sum [7]) -> 7", "(sum [2 5 6]) -> 13", "(sum [0]) -> 0", "(sum [3]) -> 3", "(sum [3 3 4 0]) -> 10", "(sum [7 8 6 9 8]) -> 38", "(sum [8 2 1 4 6]) -> 21", "(sum [6 3 8 9 8]) -> 34", "(sum [9 3 2 3 2]) -> 19"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
{"time": 0.028475, "examples": ["(sum []) -> 0", "(sum [9 2]) -> 11", "(sum [2 7 0 9 5]) -> 23", "(sum [5 9 0 9 8]) -> 31", "(sum [5 9]) -> 14", "(sum [8]) -> 8", "(sum [8]) -> 8", "(sum [6 8 3 4 1]) -> 22", "(sum [5 7 1]) -> 13", "(sum [0 4]) -> 4", "(sum []) -> 0", "(sum [5 7 4 7 4]) -> 27"], "solution": "(let sum (let a (lambda (b) (foldl b (lambda (d c) (+ d c)) 0)) _) _)", "name": "sum"}
