{"name": "add", "examples": ["(add [] 5) -> []", "(add [8] 9) -> [17]", "(add [9 9 2] 5) -> [14 14 7]", "(add [4 1] 4) -> [8 5]", "(add [] 9) -> []", "(add [5 0 2] 5) -> [10 5 7]", "(add [6] 7) -> [13]", "(add [2 9] 7) -> [9 16]", "(add [7 3 6 6 6] 4) -> [11 7 10 10 10]", "(add [6 8] 4) -> [10 12]", "(add [3 7 1 9 9] 3) -> [6 10 4 12 12]", "(add [4 5 2 8] 1) -> [5 6 3 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031943}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [9] 0) -> [9]", "(add [0 1 8] 9) -> [9 10 17]", "(add [5 3 9] 1) -> [6 4 10]", "(add [7 3 9] 8) -> [15 11 17]", "(add [8 0] 9) -> [17 9]", "(add [1 3] 8) -> [9 11]", "(add [1 2 3 6 0] 1) -> [2 3 4 7 1]", "(add [3] 2) -> [5]", "(add [3 9 6] 6) -> [9 15 12]", "(add [6 6 5 8] 7) -> [13 13 12 15]", "(add [0 2 1 4 2] 4) -> [4 6 5 8 6]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.032782}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [5 4 7 6 3] 4) -> [9 8 11 10 7]", "(add [0 8 6 3 8] 0) -> [0 8 6 3 8]", "(add [] 4) -> []", "(add [0 0 9 0] 0) -> [0 0 9 0]", "(add [4 2] 1) -> [5 3]", "(add [3] 8) -> [11]", "(add [0 2 9 3] 5) -> [5 7 14 8]", "(add [6 6 7] 4) -> [10 10 11]", "(add [7 8] 0) -> [7 8]", "(add [6 2 0] 7) -> [13 9 7]", "(add [0] 6) -> [6]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.034622}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [6 4] 0) -> [6 4]", "(add [7] 1) -> [8]", "(add [5] 9) -> [14]", "(add [] 2) -> []", "(add [] 2) -> []", "(add [6 7 6 4] 1) -> [7 8 7 5]", "(add [9 2] 5) -> [14 7]", "(add [3 1 0] 5) -> [8 6 5]", "(add [9] 8) -> [17]", "(add [2 8 2] 2) -> [4 10 4]", "(add [8 0] 3) -> [11 3]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.036598}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [1 5] 2) -> [3 7]", "(add [5 5] 6) -> [11 11]", "(add [2 4 6 4] 2) -> [4 6 8 6]", "(add [5 1] 6) -> [11 7]", "(add [] 3) -> []", "(add [1 9] 0) -> [1 9]", "(add [] 9) -> []", "(add [3 7 3] 1) -> [4 8 4]", "(add [7 0] 5) -> [12 5]", "(add [8] 2) -> [10]", "(add [2 1 4 2] 7) -> [9 8 11 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.042976}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [1 8 6] 4) -> [5 12 10]", "(add [0 6 4] 9) -> [9 15 13]", "(add [0 7 9] 1) -> [1 8 10]", "(add [2 8 5 7 7] 5) -> [7 13 10 12 12]", "(add [2] 7) -> [9]", "(add [] 3) -> []", "(add [0] 6) -> [6]", "(add [] 4) -> []", "(add [6 5 6] 7) -> [13 12 13]", "(add [5 5] 6) -> [11 11]", "(add [9 9 2 3] 5) -> [14 14 7 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.042869}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [0 9] 5) -> [5 14]", "(add [2 1 1 5] 1) -> [3 2 2 6]", "(add [] 1) -> []", "(add [] 9) -> []", "(add [6 9 7] 8) -> [14 17 15]", "(add [0 8 6 5] 8) -> [8 16 14 13]", "(add [5 0 8 8 2] 6) -> [11 6 14 14 8]", "(add [] 0) -> []", "(add [] 9) -> []", "(add [8 4] 2) -> [10 6]", "(add [0 5] 0) -> [0 5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.052867}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [0 9 0] 5) -> [5 14 5]", "(add [1 6 3 9] 7) -> [8 13 10 16]", "(add [3 5 3 0] 0) -> [3 5 3 0]", "(add [9 7 4] 8) -> [17 15 12]", "(add [8] 8) -> [16]", "(add [] 1) -> []", "(add [4 1 6 7 5] 6) -> [10 7 12 13 11]", "(add [9 9] 3) -> [12 12]", "(add [5] 3) -> [8]", "(add [4] 4) -> [8]", "(add [7 2 5 4 6] 9) -> [16 11 14 13 15]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.035002}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [1] 6) -> [7]", "(add [4 1 0] 9) -> [13 10 9]", "(add [6 1 0 7] 7) -> [13 8 7 14]", "(add [5 6 1 2 6] 2) -> [7 8 3 4 8]", "(add [9 1 7 9 6] 4) -> [13 5 11 13 10]", "(add [3] 6) -> [9]", "(add [6 0 7 2 8] 3) -> [9 3 10 5 11]", "(add [] 8) -> []", "(add [3 3 5 4 7] 4) -> [7 7 9 8 11]", "(add [9 4 4] 7) -> [16 11 11]", "(add [7 9 6] 9) -> [16 18 15]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.034232}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [5 3 0 0] 0) -> [5 3 0 0]", "(add [3 7 9 1] 8) -> [11 15 17 9]", "(add [6 7] 3) -> [9 10]", "(add [4 3] 1) -> [5 4]", "(add [8 6 3] 3) -> [11 9 6]", "(add [3] 5) -> [8]", "(add [5 8 1] 3) -> [8 11 4]", "(add [5 2 6 2 7] 2) -> [7 4 8 4 9]", "(add [7 6 6 7] 5) -> [12 11 11 12]", "(add [] 3) -> []", "(add [8 6 7] 8) -> [16 14 15]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.047143}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [6 2] 0) -> [6 2]", "(add [0 3] 9) -> [9 12]", "(add [9] 0) -> [9]", "(add [2 1] 7) -> [9 8]", "(add [9 6 2] 6) -> [15 12 8]", "(add [3 9 7 1 9] 0) -> [3 9 7 1 9]", "(add [6 3 5 7] 2) -> [8 5 7 9]", "(add [5 5 4] 7) -> [12 12 11]", "(add [1] 3) -> [4]", "(add [5 0] 7) -> [12 7]", "(add [4 6 1 8] 6) -> [10 12 7 14]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.039932}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [4] 7) -> [11]", "(add [5 8 9 9] 0) -> [5 8 9 9]", "(add [7 0 9 3] 3) -> [10 3 12 6]", "(add [] 8) -> []", "(add [] 8) -> []", "(add [2 5 3] 8) -> [10 13 11]", "(add [7 6 4 2 7] 2) -> [9 8 6 4 9]", "(add [9 0 0 9] 3) -> [12 3 3 12]", "(add [0 5 2 7 0] 9) -> [9 14 11 16 9]", "(add [9 8 1] 4) -> [13 12 5]", "(add [3 6 9] 0) -> [3 6 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.053456}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [3 3 5 6] 0) -> [3 3 5 6]", "(add [5 2] 5) -> [10 7]", "(add [9] 1) -> [10]", "(add [7 1 1] 4) -> [11 5 5]", "(add [6] 4) -> [10]", "(add [1 8] 4) -> [5 12]", "(add [1] 6) -> [7]", "(add [] 9) -> []", "(add [0 5 0 4] 4) -> [4 9 4 8]", "(add [2] 1) -> [3]", "(add [2 5] 5) -> [7 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.046099}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [7 8 9 8 8] 2) -> [9 10 11 10 10]", "(add [8] 2) -> [10]", "(add [4] 0) -> [4]", "(add [4 2 3 0 2] 1) -> [5 3 4 1 3]", "(add [0 9] 6) -> [6 15]", "(add [4 7] 9) -> [13 16]", "(add [8 6 7] 1) -> [9 7 8]", "(add [2 9 4 6] 7) -> [9 16 11 13]", "(add [2] 3) -> [5]", "(add [9 9 7] 3) -> [12 12 10]", "(add [9 7] 9) -> [18 16]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.035562}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [0] 4) -> [4]", "(add [] 5) -> []", "(add [9 9] 0) -> [9 9]", "(add [0 6 6 3] 2) -> [2 8 8 5]", "(add [0] 0) -> [0]", "(add [5 0 5 1 6] 2) -> [7 2 7 3 8]", "(add [1 9 0 8] 3) -> [4 12 3 11]", "(add [7] 4) -> [11]", "(add [3] 1) -> [4]", "(add [8 2 2] 6) -> [14 8 8]", "(add [] 3) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.036346}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [8 3 5] 5) -> [13 8 10]", "(add [7 9 8] 0) -> [7 9 8]", "(add [9 6 9 7] 8) -> [17 14 17 15]", "(add [4 6 0 3 2] 1) -> [5 7 1 4 3]", "(add [3] 1) -> [4]", "(add [4] 7) -> [11]", "(add [] 7) -> []", "(add [5 1 2 2 0] 7) -> [12 8 9 9 7]", "(add [9 1 0] 5) -> [14 6 5]", "(add [2 2 2 1 3] 8) -> [10 10 10 9 11]", "(add [3 4 0 5] 8) -> [11 12 8 13]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.039715}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [7 0 2 6 7] 1) -> [8 1 3 7 8]", "(add [6] 3) -> [9]", "(add [9 4 8] 5) -> [14 9 13]", "(add [3 4] 7) -> [10 11]", "(add [3 1 1 6 2] 5) -> [8 6 6 11 7]", "(add [9 8] 9) -> [18 17]", "(add [0 1 3] 3) -> [3 4 6]", "(add [7 0 5 7] 2) -> [9 2 7 9]", "(add [7 6 5] 3) -> [10 9 8]", "(add [7 0] 2) -> [9 2]", "(add [5 2 6 8] 0) -> [5 2 6 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031924}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [0 9] 2) -> [2 11]", "(add [7 0 5 4 8] 5) -> [12 5 10 9 13]", "(add [0] 2) -> [2]", "(add [6 1 0] 8) -> [14 9 8]", "(add [8] 5) -> [13]", "(add [2 6 2] 2) -> [4 8 4]", "(add [5 2] 4) -> [9 6]", "(add [3] 2) -> [5]", "(add [] 3) -> []", "(add [3 4 7 5 6] 9) -> [12 13 16 14 15]", "(add [0 4 9 3] 6) -> [6 10 15 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.034919}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [] 7) -> []", "(add [] 6) -> []", "(add [6 0 3 4 1] 7) -> [13 7 10 11 8]", "(add [0 8 5 4] 5) -> [5 13 10 9]", "(add [7] 4) -> [11]", "(add [3 0 5] 9) -> [12 9 14]", "(add [] 9) -> []", "(add [6] 6) -> [12]", "(add [2 7] 6) -> [8 13]", "(add [7 4 8 2] 6) -> [13 10 14 8]", "(add [] 7) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.05596}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [0 1] 2) -> [2 3]", "(add [0 8 8 4 3] 8) -> [8 16 16 12 11]", "(add [2 6 9 0] 7) -> [9 13 16 7]", "(add [] 7) -> []", "(add [6 6 1 4 3] 1) -> [7 7 2 5 4]", "(add [8 7] 1) -> [9 8]", "(add [3 4 0] 7) -> [10 11 7]", "(add [3 8] 7) -> [10 15]", "(add [5 0 4 9] 2) -> [7 2 6 11]", "(add [8 6 3 0] 1) -> [9 7 4 1]", "(add [] 1) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.052246}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [2] 7) -> [9]", "(add [7 5 2 3 8] 8) -> [15 13 10 11 16]", "(add [] 5) -> []", "(add [3 2 1 0 2] 4) -> [7 6 5 4 6]", "(add [] 4) -> []", "(add [1] 7) -> [8]", "(add [7 5 0 9] 7) -> [14 12 7 16]", "(add [3] 3) -> [6]", "(add [1 4 6 2 6] 0) -> [1 4 6 2 6]", "(add [4] 2) -> [6]", "(add [9 6 2 0] 3) -> [12 9 5 3]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.053618}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [] 7) -> []", "(add [7 0 7 3 8] 6) -> [13 6 13 9 14]", "(add [8 4 9 6 8] 2) -> [10 6 11 8 10]", "(add [5 0] 7) -> [12 7]", "(add [] 5) -> []", "(add [1] 6) -> [7]", "(add [8 3 6] 9) -> [17 12 15]", "(add [] 0) -> []", "(add [] 1) -> []", "(add [9 6 8] 2) -> [11 8 10]", "(add [3 4 7] 5) -> [8 9 12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.050833}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [8 1 0 7] 8) -> [16 9 8 15]", "(add [8 8] 1) -> [9 9]", "(add [0 4 7] 5) -> [5 9 12]", "(add [] 8) -> []", "(add [6 6 7 4 7] 1) -> [7 7 8 5 8]", "(add [9 2] 1) -> [10 3]", "(add [8 7 1] 8) -> [16 15 9]", "(add [5 4] 6) -> [11 10]", "(add [6 8] 2) -> [8 10]", "(add [8 3 0 3 9] 9) -> [17 12 9 12 18]", "(add [8 0 8 5] 6) -> [14 6 14 11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.045762}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [3 6 9 6 7] 4) -> [7 10 13 10 11]", "(add [9] 9) -> [18]", "(add [5 6 1] 1) -> [6 7 2]", "(add [1 5 8 4] 2) -> [3 7 10 6]", "(add [9] 6) -> [15]", "(add [3 8 7] 9) -> [12 17 16]", "(add [1 6 6] 5) -> [6 11 11]", "(add [0 6 7] 5) -> [5 11 12]", "(add [] 1) -> []", "(add [9] 1) -> [10]", "(add [7] 5) -> [12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.033468}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [3 7 9 4 9] 6) -> [9 13 15 10 15]", "(add [7 4 8 4] 0) -> [7 4 8 4]", "(add [1 9 0 3] 8) -> [9 17 8 11]", "(add [] 2) -> []", "(add [2] 4) -> [6]", "(add [9 0] 1) -> [10 1]", "(add [2 7 4] 3) -> [5 10 7]", "(add [] 7) -> []", "(add [1 6 3 0] 2) -> [3 8 5 2]", "(add [7 2 3] 6) -> [13 8 9]", "(add [8 6 8 8] 2) -> [10 8 10 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.040498}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [0 9 8 9 0] 8) -> [8 17 16 17 8]", "(add [1 0 8 1 2] 6) -> [7 6 14 7 8]", "(add [] 0) -> []", "(add [] 2) -> []", "(add [] 2) -> []", "(add [6 4 1 8 9] 6) -> [12 10 7 14 15]", "(add [1 6 0 2 9] 3) -> [4 9 3 5 12]", "(add [8 6 4 3 1] 7) -> [15 13 11 10 8]", "(add [7 2 7 8 8] 2) -> [9 4 9 10 10]", "(add [] 5) -> []", "(add [9] 7) -> [16]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.037516}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [7 5 5] 9) -> [16 14 14]", "(add [4 7] 8) -> [12 15]", "(add [7] 2) -> [9]", "(add [3 4 6] 4) -> [7 8 10]", "(add [0 7] 9) -> [9 16]", "(add [0 2 9 5] 2) -> [2 4 11 7]", "(add [6] 2) -> [8]", "(add [3 8 1] 2) -> [5 10 3]", "(add [3] 8) -> [11]", "(add [6 8] 3) -> [9 11]", "(add [7 8 6] 9) -> [16 17 15]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.035083}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [8 5 0 2 7] 3) -> [11 8 3 5 10]", "(add [2] 6) -> [8]", "(add [3 1 0 4 7] 3) -> [6 4 3 7 10]", "(add [1 5 0 5 8] 1) -> [2 6 1 6 9]", "(add [0] 0) -> [0]", "(add [4] 3) -> [7]", "(add [8 6] 2) -> [10 8]", "(add [7 2 8] 4) -> [11 6 12]", "(add [8 4 2 2] 5) -> [13 9 7 7]", "(add [2 7 1] 8) -> [10 15 9]", "(add [1] 9) -> [10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.05009}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [] 1) -> []", "(add [9 0 7 1 2] 1) -> [10 1 8 2 3]", "(add [5 1 7 9 6] 4) -> [9 5 11 13 10]", "(add [7 1 5 7] 8) -> [15 9 13 15]", "(add [7 3] 7) -> [14 10]", "(add [2 3 5 3 5] 5) -> [7 8 10 8 10]", "(add [] 8) -> []", "(add [1] 1) -> [2]", "(add [5] 3) -> [8]", "(add [7 0 3 3] 4) -> [11 4 7 7]", "(add [9 0 8 9 0] 2) -> [11 2 10 11 2]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.047715}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [9] 6) -> [15]", "(add [4] 6) -> [10]", "(add [0] 9) -> [9]", "(add [] 6) -> []", "(add [5 3 2] 8) -> [13 11 10]", "(add [6] 6) -> [12]", "(add [5 6 6 8 2] 3) -> [8 9 9 11 5]", "(add [7 8] 3) -> [10 11]", "(add [2 6 2 6] 9) -> [11 15 11 15]", "(add [2 0] 6) -> [8 6]", "(add [4 3 1 3] 5) -> [9 8 6 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.050642}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [7 7 7] 5) -> [12 12 12]", "(add [0] 6) -> [6]", "(add [8] 2) -> [10]", "(add [6 9 4 8 2] 3) -> [9 12 7 11 5]", "(add [5 6 7 7] 6) -> [11 12 13 13]", "(add [2] 9) -> [11]", "(add [0 7 3 0] 9) -> [9 16 12 9]", "(add [] 5) -> []", "(add [0] 1) -> [1]", "(add [3 2 5 4 5] 6) -> [9 8 11 10 11]", "(add [] 4) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.050942}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [] 4) -> []", "(add [] 5) -> []", "(add [] 9) -> []", "(add [6 7 1] 5) -> [11 12 6]", "(add [3 4 8 5 9] 3) -> [6 7 11 8 12]", "(add [8] 1) -> [9]", "(add [6] 3) -> [9]", "(add [6] 5) -> [11]", "(add [9 8] 6) -> [15 14]", "(add [8 5 4] 5) -> [13 10 9]", "(add [0 4] 3) -> [3 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.049113}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [7] 4) -> [11]", "(add [2 5 9 0] 0) -> [2 5 9 0]", "(add [9 9 3] 1) -> [10 10 4]", "(add [2 0 4] 0) -> [2 0 4]", "(add [2] 7) -> [9]", "(add [0 2 7] 6) -> [6 8 13]", "(add [2 6 8] 7) -> [9 13 15]", "(add [2 5] 2) -> [4 7]", "(add [8 5] 6) -> [14 11]", "(add [5 4 0 0 1] 9) -> [14 13 9 9 10]", "(add [3 1 9] 6) -> [9 7 15]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.04814}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [3 1 9 3] 0) -> [3 1 9 3]", "(add [9 1 4 0 3] 1) -> [10 2 5 1 4]", "(add [5 3] 1) -> [6 4]", "(add [3 7 3 6] 7) -> [10 14 10 13]", "(add [6 1] 7) -> [13 8]", "(add [3 6 3] 2) -> [5 8 5]", "(add [6] 0) -> [6]", "(add [] 6) -> []", "(add [4] 9) -> [13]", "(add [9 2 7] 8) -> [17 10 15]", "(add [4 9] 4) -> [8 13]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.032012}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [3 1 2 4 8] 2) -> [5 3 4 6 10]", "(add [4 7 9 2 9] 2) -> [6 9 11 4 11]", "(add [6 1 0] 5) -> [11 6 5]", "(add [9] 5) -> [14]", "(add [] 8) -> []", "(add [7] 7) -> [14]", "(add [9 3 7 3] 7) -> [16 10 14 10]", "(add [7 0 2 2 9] 9) -> [16 9 11 11 18]", "(add [0 1 1 4] 5) -> [5 6 6 9]", "(add [2 1 1 1 6] 0) -> [2 1 1 1 6]", "(add [8 1 8 3] 3) -> [11 4 11 6]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.033414}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [2 0 5 1 1] 5) -> [7 5 10 6 6]", "(add [2 0] 3) -> [5 3]", "(add [2 1 5] 1) -> [3 2 6]", "(add [4 7] 3) -> [7 10]", "(add [8 1 5 3] 4) -> [12 5 9 7]", "(add [1 4] 3) -> [4 7]", "(add [] 1) -> []", "(add [8 7 2 7 2] 5) -> [13 12 7 12 7]", "(add [5] 2) -> [7]", "(add [3] 2) -> [5]", "(add [2 6 2] 9) -> [11 15 11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.05611}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [4 1 8 3] 9) -> [13 10 17 12]", "(add [6 6 1] 3) -> [9 9 4]", "(add [4 3 0] 9) -> [13 12 9]", "(add [3 1 4 9] 3) -> [6 4 7 12]", "(add [2 5] 8) -> [10 13]", "(add [0 0] 4) -> [4 4]", "(add [9 7 3 4 5] 9) -> [18 16 12 13 14]", "(add [9 6 4 3] 3) -> [12 9 7 6]", "(add [] 5) -> []", "(add [2] 6) -> [8]", "(add [2 8 4 7] 5) -> [7 13 9 12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.033448}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [] 0) -> []", "(add [] 7) -> []", "(add [5] 2) -> [7]", "(add [] 3) -> []", "(add [5 1] 2) -> [7 3]", "(add [6 3 4 9 9] 3) -> [9 6 7 12 12]", "(add [1 5 3] 9) -> [10 14 12]", "(add [8] 0) -> [8]", "(add [3 2 9] 8) -> [11 10 17]", "(add [8] 8) -> [16]", "(add [9] 5) -> [14]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.044164}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [6 0] 9) -> [15 9]", "(add [2] 8) -> [10]", "(add [0 1 6 9] 0) -> [0 1 6 9]", "(add [0 9 4 4] 5) -> [5 14 9 9]", "(add [0 9 6] 8) -> [8 17 14]", "(add [] 3) -> []", "(add [5 6 4] 9) -> [14 15 13]", "(add [9 2] 8) -> [17 10]", "(add [] 2) -> []", "(add [] 9) -> []", "(add [5 0 8 2] 9) -> [14 9 17 11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.050127}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [9 9 5 4 3] 1) -> [10 10 6 5 4]", "(add [4 8 6 2] 2) -> [6 10 8 4]", "(add [4 9 6 5] 1) -> [5 10 7 6]", "(add [1 7 4 2] 7) -> [8 14 11 9]", "(add [7 8 3 7] 4) -> [11 12 7 11]", "(add [5 2 7 6] 1) -> [6 3 8 7]", "(add [8] 8) -> [16]", "(add [3 8 9 6 8] 9) -> [12 17 18 15 17]", "(add [] 9) -> []", "(add [4 4] 1) -> [5 5]", "(add [] 5) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.04791}
{"name": "add", "examples": ["(add [] 0) -> []", "(add [] 4) -> []", "(add [2 6 1] 3) -> [5 9 4]", "(add [4 1 9] 2) -> [6 3 11]", "(add [2] 4) -> [6]", "(add [7 3] 4) -> [11 7]", "(add [] 2) -> []", "(add [4 2] 7) -> [11 9]", "(add [1 7 7 0] 8) -> [9 15 15 8]", "(add [4 6 7 3] 5) -> [9 11 12 8]", "(add [1 2 3 7] 6) -> [7 8 9 13]", "(add [5 4 5 1] 3) -> [8 7 8 4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.046167}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [0] 8) -> [8]", "(add [] 3) -> []", "(add [9] 3) -> [12]", "(add [1 8 2] 2) -> [3 10 4]", "(add [4 9] 8) -> [12 17]", "(add [9 7] 7) -> [16 14]", "(add [] 1) -> []", "(add [] 9) -> []", "(add [] 8) -> []", "(add [3] 3) -> [6]", "(add [9] 8) -> [17]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.032306}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [3] 0) -> [3]", "(add [] 6) -> []", "(add [6 6 7 6] 1) -> [7 7 8 7]", "(add [7 0 7] 3) -> [10 3 10]", "(add [6 8 4 4 5] 4) -> [10 12 8 8 9]", "(add [] 4) -> []", "(add [3 3 2 6] 3) -> [6 6 5 9]", "(add [0 2 7 2] 2) -> [2 4 9 4]", "(add [0] 3) -> [3]", "(add [6 2 0] 5) -> [11 7 5]", "(add [4 5 6] 3) -> [7 8 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.036408}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [8 8 3 2] 0) -> [8 8 3 2]", "(add [6 3 4] 2) -> [8 5 6]", "(add [9] 3) -> [12]", "(add [] 2) -> []", "(add [2 3] 7) -> [9 10]", "(add [5 6 2] 7) -> [12 13 9]", "(add [3] 5) -> [8]", "(add [4 8] 5) -> [9 13]", "(add [0 9 6] 1) -> [1 10 7]", "(add [6 4 4 5 7] 0) -> [6 4 4 5 7]", "(add [3 4 1 9 9] 8) -> [11 12 9 17 17]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.033031}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [4 6 5 8 2] 4) -> [8 10 9 12 6]", "(add [3 3 6] 4) -> [7 7 10]", "(add [0] 0) -> [0]", "(add [6] 3) -> [9]", "(add [0] 0) -> [0]", "(add [3 5] 7) -> [10 12]", "(add [0 5] 2) -> [2 7]", "(add [6 5 5 9] 3) -> [9 8 8 12]", "(add [] 3) -> []", "(add [9] 6) -> [15]", "(add [5 7 9 9 2] 9) -> [14 16 18 18 11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.058998}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [3] 4) -> [7]", "(add [4 8 5 2] 9) -> [13 17 14 11]", "(add [5 9 2 0] 7) -> [12 16 9 7]", "(add [] 5) -> []", "(add [6 4] 7) -> [13 11]", "(add [0 2 5] 6) -> [6 8 11]", "(add [0] 9) -> [9]", "(add [4 0 1] 2) -> [6 2 3]", "(add [2 2] 0) -> [2 2]", "(add [1 3 8 3 2] 4) -> [5 7 12 7 6]", "(add [0 8 8] 5) -> [5 13 13]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.037107}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [8 6 9] 8) -> [16 14 17]", "(add [] 5) -> []", "(add [4] 6) -> [10]", "(add [7 6 8] 2) -> [9 8 10]", "(add [6 9 8 7 3] 5) -> [11 14 13 12 8]", "(add [8 3] 6) -> [14 9]", "(add [9 2] 6) -> [15 8]", "(add [5 7] 5) -> [10 12]", "(add [2 3 6] 4) -> [6 7 10]", "(add [9 5 3] 8) -> [17 13 11]", "(add [9 5 2 0 9] 1) -> [10 6 3 1 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.042684}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [2 9 7 9] 3) -> [5 12 10 12]", "(add [0 5 5] 2) -> [2 7 7]", "(add [5 9 8 1 1] 0) -> [5 9 8 1 1]", "(add [2 8 7 6 3] 7) -> [9 15 14 13 10]", "(add [] 4) -> []", "(add [1 2 9] 5) -> [6 7 14]", "(add [1 2] 1) -> [2 3]", "(add [] 2) -> []", "(add [1 8 0] 5) -> [6 13 5]", "(add [2 2 7] 2) -> [4 4 9]", "(add [] 6) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.056324}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [1 0 7 7 6] 9) -> [10 9 16 16 15]", "(add [1 2] 6) -> [7 8]", "(add [5 9] 2) -> [7 11]", "(add [6 9 4 5] 8) -> [14 17 12 13]", "(add [7 1] 4) -> [11 5]", "(add [4 6 8] 6) -> [10 12 14]", "(add [4] 3) -> [7]", "(add [4 2] 1) -> [5 3]", "(add [6 4 5 5] 7) -> [13 11 12 12]", "(add [7 9 5] 9) -> [16 18 14]", "(add [] 1) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.032595}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [7] 9) -> [16]", "(add [3 0] 5) -> [8 5]", "(add [] 0) -> []", "(add [] 7) -> []", "(add [5 4 6 7] 6) -> [11 10 12 13]", "(add [] 0) -> []", "(add [7 8 2 1] 3) -> [10 11 5 4]", "(add [8 2 7 1] 9) -> [17 11 16 10]", "(add [] 6) -> []", "(add [7] 9) -> [16]", "(add [] 4) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.030278}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [6 2 4 6] 7) -> [13 9 11 13]", "(add [2] 5) -> [7]", "(add [7 4] 1) -> [8 5]", "(add [4] 2) -> [6]", "(add [] 8) -> []", "(add [9 7 7 2 9] 2) -> [11 9 9 4 11]", "(add [0 1 2 5 9] 0) -> [0 1 2 5 9]", "(add [9 9] 8) -> [17 17]", "(add [7] 7) -> [14]", "(add [] 7) -> []", "(add [] 3) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.037223}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [] 1) -> []", "(add [8 9] 0) -> [8 9]", "(add [] 1) -> []", "(add [8 4 9] 1) -> [9 5 10]", "(add [] 4) -> []", "(add [7 7 1] 9) -> [16 16 10]", "(add [7 1 8 2 3] 6) -> [13 7 14 8 9]", "(add [4] 5) -> [9]", "(add [2 3 7 5] 3) -> [5 6 10 8]", "(add [8 1 6 3 9] 7) -> [15 8 13 10 16]", "(add [7 2] 7) -> [14 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.04438}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [3 9] 7) -> [10 16]", "(add [] 2) -> []", "(add [5 8 9] 2) -> [7 10 11]", "(add [4 7 4 0] 3) -> [7 10 7 3]", "(add [9 5] 9) -> [18 14]", "(add [6 2 6 5 6] 1) -> [7 3 7 6 7]", "(add [6] 2) -> [8]", "(add [4 7 5 0 3] 9) -> [13 16 14 9 12]", "(add [6 4 3] 5) -> [11 9 8]", "(add [7 9 5 2] 4) -> [11 13 9 6]", "(add [] 0) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.054196}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [3 4 3] 5) -> [8 9 8]", "(add [] 8) -> []", "(add [] 9) -> []", "(add [] 4) -> []", "(add [] 1) -> []", "(add [6 1 0 0 8] 9) -> [15 10 9 9 17]", "(add [7 4] 5) -> [12 9]", "(add [0 0 8 6 6] 7) -> [7 7 15 13 13]", "(add [9 4 6 5] 9) -> [18 13 15 14]", "(add [6 1 0 8 0] 0) -> [6 1 0 8 0]", "(add [] 2) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.036388}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [6 8 5 5 8] 3) -> [9 11 8 8 11]", "(add [3 6] 8) -> [11 14]", "(add [0 1 1] 2) -> [2 3 3]", "(add [5] 1) -> [6]", "(add [8 6] 9) -> [17 15]", "(add [2] 5) -> [7]", "(add [5] 3) -> [8]", "(add [1 0] 4) -> [5 4]", "(add [] 6) -> []", "(add [6 0 9] 8) -> [14 8 17]", "(add [2 5] 2) -> [4 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.044311}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [1 0 6] 6) -> [7 6 12]", "(add [2 1 6 0] 7) -> [9 8 13 7]", "(add [5 7 8 7 7] 7) -> [12 14 15 14 14]", "(add [4 8 3 6 0] 4) -> [8 12 7 10 4]", "(add [5 5] 9) -> [14 14]", "(add [] 7) -> []", "(add [] 4) -> []", "(add [6 2 2 7 7] 1) -> [7 3 3 8 8]", "(add [3 2 4 9 1] 1) -> [4 3 5 10 2]", "(add [9 2 7 0 0] 8) -> [17 10 15 8 8]", "(add [] 5) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.045585}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [8 4 3 2] 4) -> [12 8 7 6]", "(add [4] 5) -> [9]", "(add [] 0) -> []", "(add [3 7] 3) -> [6 10]", "(add [8 1 0 3 5] 2) -> [10 3 2 5 7]", "(add [8 0 3 4 1] 8) -> [16 8 11 12 9]", "(add [1 0 0 8] 4) -> [5 4 4 12]", "(add [4 2 9] 7) -> [11 9 16]", "(add [1 4 8] 5) -> [6 9 13]", "(add [3 6 6 7 4] 0) -> [3 6 6 7 4]", "(add [0 3 1] 1) -> [1 4 2]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.043488}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [5 0] 0) -> [5 0]", "(add [7 0 2 8] 0) -> [7 0 2 8]", "(add [] 9) -> []", "(add [7 5 1] 1) -> [8 6 2]", "(add [5 2 8 8] 5) -> [10 7 13 13]", "(add [9 4 0 0 2] 7) -> [16 11 7 7 9]", "(add [4 4 2 2 1] 8) -> [12 12 10 10 9]", "(add [4 2 4 5 5] 8) -> [12 10 12 13 13]", "(add [9 1 5 4] 8) -> [17 9 13 12]", "(add [1 4 6 3 9] 1) -> [2 5 7 4 10]", "(add [1 5] 4) -> [5 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.032452}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [5] 0) -> [5]", "(add [] 1) -> []", "(add [9 9 7 8 9] 2) -> [11 11 9 10 11]", "(add [3 1 8 9] 9) -> [12 10 17 18]", "(add [9 4] 9) -> [18 13]", "(add [9 1 7 1] 5) -> [14 6 12 6]", "(add [] 4) -> []", "(add [7] 2) -> [9]", "(add [1 2 5 1] 8) -> [9 10 13 9]", "(add [3] 1) -> [4]", "(add [0] 5) -> [5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.036966}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [5] 3) -> [8]", "(add [] 0) -> []", "(add [8 7 0 5] 2) -> [10 9 2 7]", "(add [5] 6) -> [11]", "(add [1 1 7 4] 5) -> [6 6 12 9]", "(add [7 5 4] 5) -> [12 10 9]", "(add [1 4] 2) -> [3 6]", "(add [7 1 3 9] 2) -> [9 3 5 11]", "(add [5 9 9] 7) -> [12 16 16]", "(add [7 8 0 3 0] 6) -> [13 14 6 9 6]", "(add [] 0) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.045145}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [7 4 3] 3) -> [10 7 6]", "(add [] 7) -> []", "(add [5 9 5] 2) -> [7 11 7]", "(add [3 0 8 1] 4) -> [7 4 12 5]", "(add [3 8] 0) -> [3 8]", "(add [9] 9) -> [18]", "(add [8 1] 6) -> [14 7]", "(add [9] 7) -> [16]", "(add [] 8) -> []", "(add [3 7 0 8] 0) -> [3 7 0 8]", "(add [8 5 7 0 3] 4) -> [12 9 11 4 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.047319}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [4 8 0 6 2] 2) -> [6 10 2 8 4]", "(add [] 5) -> []", "(add [9 6 9 9] 0) -> [9 6 9 9]", "(add [] 1) -> []", "(add [8 9 9] 3) -> [11 12 12]", "(add [3 8 2] 1) -> [4 9 3]", "(add [] 9) -> []", "(add [5 3 1] 0) -> [5 3 1]", "(add [2] 6) -> [8]", "(add [8 5 5 1 3] 0) -> [8 5 5 1 3]", "(add [0 6 9 8] 5) -> [5 11 14 13]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.055594}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [4 2] 6) -> [10 8]", "(add [5 9] 6) -> [11 15]", "(add [4 4] 5) -> [9 9]", "(add [2 5 8 1 6] 9) -> [11 14 17 10 15]", "(add [8] 1) -> [9]", "(add [0] 8) -> [8]", "(add [7] 7) -> [14]", "(add [1 7 3] 3) -> [4 10 6]", "(add [2 6 1 3 9] 5) -> [7 11 6 8 14]", "(add [2 7 3 1 9] 6) -> [8 13 9 7 15]", "(add [9 0 3 3] 6) -> [15 6 9 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.040194}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [] 7) -> []", "(add [2 1 2 7 4] 7) -> [9 8 9 14 11]", "(add [2 7 0 7] 6) -> [8 13 6 13]", "(add [7 7 5 3] 6) -> [13 13 11 9]", "(add [8 0] 4) -> [12 4]", "(add [6 1] 3) -> [9 4]", "(add [1 0 5] 1) -> [2 1 6]", "(add [] 1) -> []", "(add [7 1 0] 3) -> [10 4 3]", "(add [] 4) -> []", "(add [0 0] 3) -> [3 3]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.048041}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [7 6 9 7] 5) -> [12 11 14 12]", "(add [5 4 5] 2) -> [7 6 7]", "(add [] 1) -> []", "(add [7 9] 1) -> [8 10]", "(add [2 8] 4) -> [6 12]", "(add [4 5 9 5 5] 9) -> [13 14 18 14 14]", "(add [3] 4) -> [7]", "(add [6 4 6 9 4] 6) -> [12 10 12 15 10]", "(add [6] 1) -> [7]", "(add [2 5 8] 1) -> [3 6 9]", "(add [2] 3) -> [5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.032508}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [] 3) -> []", "(add [9] 3) -> [12]", "(add [5 6 9 8 3] 3) -> [8 9 12 11 6]", "(add [6] 0) -> [6]", "(add [0 6 0 6 8] 8) -> [8 14 8 14 16]", "(add [] 9) -> []", "(add [6 3 5 1 8] 9) -> [15 12 14 10 17]", "(add [2 6 5 0] 6) -> [8 12 11 6]", "(add [1 9] 9) -> [10 18]", "(add [] 5) -> []", "(add [9 4 3 4 2] 7) -> [16 11 10 11 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031151}
{"name": "add", "examples": ["(add [] 0) -> []", "(add [9 9] 1) -> [10 10]", "(add [4] 6) -> [10]", "(add [7 8 6 3 7] 8) -> [15 16 14 11 15]", "(add [2 0 5] 9) -> [11 9 14]", "(add [2 4 8 5 3] 6) -> [8 10 14 11 9]", "(add [5 7 0 9] 1) -> [6 8 1 10]", "(add [6 6] 8) -> [14 14]", "(add [1 9 7] 5) -> [6 14 12]", "(add [9 5 5 5 7] 4) -> [13 9 9 9 11]", "(add [6 1 4 0] 2) -> [8 3 6 2]", "(add [2 2] 5) -> [7 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.037089}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [7 8 5] 8) -> [15 16 13]", "(add [8 2] 2) -> [10 4]", "(add [] 6) -> []", "(add [2 5 7] 8) -> [10 13 15]", "(add [] 3) -> []", "(add [] 1) -> []", "(add [2 2] 7) -> [9 9]", "(add [6 4 5 2] 5) -> [11 9 10 7]", "(add [9 9 7 4] 0) -> [9 9 7 4]", "(add [7 7 2] 3) -> [10 10 5]", "(add [3 6 9] 3) -> [6 9 12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031358}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [] 8) -> []", "(add [0 0 8 4] 0) -> [0 0 8 4]", "(add [] 2) -> []", "(add [8 2] 9) -> [17 11]", "(add [0 6 1 9 9] 4) -> [4 10 5 13 13]", "(add [2] 3) -> [5]", "(add [5 1 6 8] 5) -> [10 6 11 13]", "(add [2 8 1 5] 6) -> [8 14 7 11]", "(add [] 6) -> []", "(add [4 7 4 3 7] 7) -> [11 14 11 10 14]", "(add [9 5] 2) -> [11 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.049193}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [0 8] 9) -> [9 17]", "(add [8 0] 4) -> [12 4]", "(add [8 4] 8) -> [16 12]", "(add [3 2 4] 6) -> [9 8 10]", "(add [8 9 5 7] 2) -> [10 11 7 9]", "(add [5 3 4 9 6] 9) -> [14 12 13 18 15]", "(add [] 7) -> []", "(add [8] 5) -> [13]", "(add [9 1 6] 3) -> [12 4 9]", "(add [1 6 5 7] 1) -> [2 7 6 8]", "(add [0 7 6] 0) -> [0 7 6]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031857}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [9 5] 7) -> [16 12]", "(add [5 5 9 8 1] 6) -> [11 11 15 14 7]", "(add [] 1) -> []", "(add [4] 4) -> [8]", "(add [3 7] 8) -> [11 15]", "(add [9 1 6 5 9] 7) -> [16 8 13 12 16]", "(add [2 0 8] 1) -> [3 1 9]", "(add [1 9 3 2] 1) -> [2 10 4 3]", "(add [8 0] 9) -> [17 9]", "(add [7 7] 9) -> [16 16]", "(add [4 4 5 6] 0) -> [4 4 5 6]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.052701}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [6] 0) -> [6]", "(add [5 7 8 1] 9) -> [14 16 17 10]", "(add [4 1 7] 0) -> [4 1 7]", "(add [] 9) -> []", "(add [7] 8) -> [15]", "(add [] 1) -> []", "(add [4 1 7 1] 0) -> [4 1 7 1]", "(add [9 2 4 0] 3) -> [12 5 7 3]", "(add [0 8 9 9 2] 3) -> [3 11 12 12 5]", "(add [] 8) -> []", "(add [4 0 9] 6) -> [10 6 15]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.047953}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [4 8 6 8] 3) -> [7 11 9 11]", "(add [6 9 8 8 0] 7) -> [13 16 15 15 7]", "(add [1 9 1 7 7] 2) -> [3 11 3 9 9]", "(add [9 0 9 2 0] 8) -> [17 8 17 10 8]", "(add [6] 5) -> [11]", "(add [8 1 0 8 3] 4) -> [12 5 4 12 7]", "(add [1] 7) -> [8]", "(add [] 9) -> []", "(add [] 1) -> []", "(add [5] 2) -> [7]", "(add [5 8] 6) -> [11 14]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.038205}
{"name": "add", "examples": ["(add [] 0) -> []", "(add [] 4) -> []", "(add [4] 3) -> [7]", "(add [7 8 9] 7) -> [14 15 16]", "(add [3 2 7 2 5] 1) -> [4 3 8 3 6]", "(add [9 0 0 4] 0) -> [9 0 0 4]", "(add [9] 0) -> [9]", "(add [5 9 6 6] 7) -> [12 16 13 13]", "(add [] 6) -> []", "(add [5 0] 4) -> [9 4]", "(add [7 0 9] 0) -> [7 0 9]", "(add [1] 0) -> [1]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.040742}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [3 0 6 0 2] 0) -> [3 0 6 0 2]", "(add [] 3) -> []", "(add [7 5 8] 4) -> [11 9 12]", "(add [9 9 5 0] 1) -> [10 10 6 1]", "(add [8 6 0 7 4] 9) -> [17 15 9 16 13]", "(add [4] 0) -> [4]", "(add [5] 4) -> [9]", "(add [4 2] 6) -> [10 8]", "(add [8] 6) -> [14]", "(add [] 6) -> []", "(add [] 7) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.054545}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [7] 5) -> [12]", "(add [] 2) -> []", "(add [9] 7) -> [16]", "(add [6 3 3] 5) -> [11 8 8]", "(add [6 5 2 3] 9) -> [15 14 11 12]", "(add [4 2 3 7 9] 4) -> [8 6 7 11 13]", "(add [3] 0) -> [3]", "(add [3 5 6] 0) -> [3 5 6]", "(add [4 8 9 5 9] 3) -> [7 11 12 8 12]", "(add [6 3 5 3] 7) -> [13 10 12 10]", "(add [5 5 4 5] 2) -> [7 7 6 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.0469}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [6 6 0 2] 1) -> [7 7 1 3]", "(add [2 4 4] 8) -> [10 12 12]", "(add [5 0] 2) -> [7 2]", "(add [8 7 7 5] 7) -> [15 14 14 12]", "(add [] 9) -> []", "(add [0 2 7] 2) -> [2 4 9]", "(add [1 2 2] 9) -> [10 11 11]", "(add [6 2 9 7 2] 3) -> [9 5 12 10 5]", "(add [] 3) -> []", "(add [0 9 3 1] 9) -> [9 18 12 10]", "(add [5 0 9 9 0] 7) -> [12 7 16 16 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.032127}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [0 4 0 1] 5) -> [5 9 5 6]", "(add [8 2] 1) -> [9 3]", "(add [6] 0) -> [6]", "(add [0] 3) -> [3]", "(add [] 0) -> []", "(add [6 9] 2) -> [8 11]", "(add [] 1) -> []", "(add [7 1 4 8 5] 3) -> [10 4 7 11 8]", "(add [7] 1) -> [8]", "(add [9 4 3] 0) -> [9 4 3]", "(add [] 9) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.032056}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [0 9 6 5] 6) -> [6 15 12 11]", "(add [9 1] 6) -> [15 7]", "(add [0 6 8 8] 0) -> [0 6 8 8]", "(add [] 9) -> []", "(add [8] 7) -> [15]", "(add [6 9 1 7 9] 1) -> [7 10 2 8 10]", "(add [4] 1) -> [5]", "(add [6 1 0 8 7] 4) -> [10 5 4 12 11]", "(add [] 2) -> []", "(add [5 5 2 1 4] 6) -> [11 11 8 7 10]", "(add [3 9 3 9] 0) -> [3 9 3 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.041432}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [4 8] 4) -> [8 12]", "(add [] 5) -> []", "(add [4 6] 2) -> [6 8]", "(add [7 2] 2) -> [9 4]", "(add [5 1 9 6] 1) -> [6 2 10 7]", "(add [] 7) -> []", "(add [] 9) -> []", "(add [0 7 2 6 7] 4) -> [4 11 6 10 11]", "(add [3 6 3 7] 1) -> [4 7 4 8]", "(add [8 6] 3) -> [11 9]", "(add [3 1 0] 3) -> [6 4 3]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.051599}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [] 1) -> []", "(add [7 7 4 3 3] 0) -> [7 7 4 3 3]", "(add [6 3] 2) -> [8 5]", "(add [] 2) -> []", "(add [5 6 9] 3) -> [8 9 12]", "(add [7 8 9 6] 9) -> [16 17 18 15]", "(add [7 3 4 7 0] 9) -> [16 12 13 16 9]", "(add [2 2 3] 9) -> [11 11 12]", "(add [2 3] 8) -> [10 11]", "(add [2] 8) -> [10]", "(add [9] 5) -> [14]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.038664}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [9 1] 7) -> [16 8]", "(add [1 2 8 0] 9) -> [10 11 17 9]", "(add [5 3] 7) -> [12 10]", "(add [8 9 0 3 2] 0) -> [8 9 0 3 2]", "(add [3 9] 4) -> [7 13]", "(add [3] 4) -> [7]", "(add [8] 3) -> [11]", "(add [9 4] 1) -> [10 5]", "(add [6 0 7 7] 1) -> [7 1 8 8]", "(add [1 6 3] 8) -> [9 14 11]", "(add [0 2 6 2] 2) -> [2 4 8 4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.034901}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [] 1) -> []", "(add [1 8 5 5 1] 3) -> [4 11 8 8 4]", "(add [] 1) -> []", "(add [0] 1) -> [1]", "(add [5 1 9 9] 7) -> [12 8 16 16]", "(add [7 3] 0) -> [7 3]", "(add [2] 9) -> [11]", "(add [1 2 0 0 9] 7) -> [8 9 7 7 16]", "(add [9 6 0 6 8] 4) -> [13 10 4 10 12]", "(add [] 0) -> []", "(add [6 9] 3) -> [9 12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.047337}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [0 7] 3) -> [3 10]", "(add [6 6 7 8] 9) -> [15 15 16 17]", "(add [] 4) -> []", "(add [6 5 2 1] 0) -> [6 5 2 1]", "(add [7 3 4 6 1] 4) -> [11 7 8 10 5]", "(add [9 7 4] 4) -> [13 11 8]", "(add [3] 6) -> [9]", "(add [] 6) -> []", "(add [0 5] 4) -> [4 9]", "(add [] 4) -> []", "(add [4 0 7] 7) -> [11 7 14]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.038995}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [] 4) -> []", "(add [] 4) -> []", "(add [6 1 0] 6) -> [12 7 6]", "(add [6 6 5] 6) -> [12 12 11]", "(add [3 7 3 6 6] 9) -> [12 16 12 15 15]", "(add [1 2 4 4] 7) -> [8 9 11 11]", "(add [9 3 6] 9) -> [18 12 15]", "(add [6] 2) -> [8]", "(add [8 2 0 0] 3) -> [11 5 3 3]", "(add [4] 9) -> [13]", "(add [4 5 4 7 9] 4) -> [8 9 8 11 13]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.038826}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [] 9) -> []", "(add [] 8) -> []", "(add [1] 4) -> [5]", "(add [] 8) -> []", "(add [0 4 5 1 7] 0) -> [0 4 5 1 7]", "(add [] 2) -> []", "(add [7 7 3 0 8] 7) -> [14 14 10 7 15]", "(add [] 3) -> []", "(add [7 4 2 2 6] 6) -> [13 10 8 8 12]", "(add [6 2] 9) -> [15 11]", "(add [7 2] 6) -> [13 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.044559}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [9 7] 4) -> [13 11]", "(add [2 1] 0) -> [2 1]", "(add [7 5 6 5] 8) -> [15 13 14 13]", "(add [9 6 3 2 2] 9) -> [18 15 12 11 11]", "(add [7] 4) -> [11]", "(add [] 6) -> []", "(add [6 4] 3) -> [9 7]", "(add [2 4 2 7 0] 7) -> [9 11 9 14 7]", "(add [2] 2) -> [4]", "(add [2 7 6] 4) -> [6 11 10]", "(add [6 6 7] 3) -> [9 9 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.032467}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [3 3 2 6] 6) -> [9 9 8 12]", "(add [] 9) -> []", "(add [4] 9) -> [13]", "(add [2 1 7 8] 7) -> [9 8 14 15]", "(add [2 5 5 7] 8) -> [10 13 13 15]", "(add [] 6) -> []", "(add [9 3 4 2] 2) -> [11 5 6 4]", "(add [] 4) -> []", "(add [2 3] 2) -> [4 5]", "(add [5 2 4] 4) -> [9 6 8]", "(add [5 8 2 0] 8) -> [13 16 10 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.03343}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [1 0] 6) -> [7 6]", "(add [7 6 5] 8) -> [15 14 13]", "(add [] 8) -> []", "(add [4 9] 9) -> [13 18]", "(add [1] 9) -> [10]", "(add [3] 4) -> [7]", "(add [5 0 9 2] 0) -> [5 0 9 2]", "(add [8 9 5] 7) -> [15 16 12]", "(add [1 7 4] 4) -> [5 11 8]", "(add [4 9] 6) -> [10 15]", "(add [] 9) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.038689}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [1 6 4] 5) -> [6 11 9]", "(add [7] 5) -> [12]", "(add [6 4 0] 4) -> [10 8 4]", "(add [5 0] 7) -> [12 7]", "(add [8] 1) -> [9]", "(add [4 3 6 0 6] 5) -> [9 8 11 5 11]", "(add [] 8) -> []", "(add [8] 0) -> [8]", "(add [7] 0) -> [7]", "(add [0 5 9 5 9] 1) -> [1 6 10 6 10]", "(add [3 1 9 1] 7) -> [10 8 16 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.03715}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [2] 7) -> [9]", "(add [7 9 9 6] 1) -> [8 10 10 7]", "(add [6 3 1 5] 2) -> [8 5 3 7]", "(add [5 7 3 2 3] 5) -> [10 12 8 7 8]", "(add [4 3 4 2] 8) -> [12 11 12 10]", "(add [6 2] 4) -> [10 6]", "(add [] 8) -> []", "(add [1 7 7] 8) -> [9 15 15]", "(add [] 1) -> []", "(add [6 5 7] 3) -> [9 8 10]", "(add [9 9 1 3 8] 3) -> [12 12 4 6 11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.032021}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [] 0) -> []", "(add [] 2) -> []", "(add [5 3 7 4 0] 7) -> [12 10 14 11 7]", "(add [0 3 0] 0) -> [0 3 0]", "(add [0 3] 3) -> [3 6]", "(add [] 5) -> []", "(add [8 4 8 3 1] 4) -> [12 8 12 7 5]", "(add [4 9 4] 2) -> [6 11 6]", "(add [2 6 0 8 7] 7) -> [9 13 7 15 14]", "(add [7 7] 8) -> [15 15]", "(add [] 3) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.043316}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [3 0] 4) -> [7 4]", "(add [8] 0) -> [8]", "(add [] 9) -> []", "(add [5] 1) -> [6]", "(add [9 8] 0) -> [9 8]", "(add [9 6 6 6] 3) -> [12 9 9 9]", "(add [8 0 7 9] 2) -> [10 2 9 11]", "(add [6] 5) -> [11]", "(add [2 1 4 2] 8) -> [10 9 12 10]", "(add [8 0 0 0] 5) -> [13 5 5 5]", "(add [2 2] 2) -> [4 4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.052506}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [] 1) -> []", "(add [2 9 8 3] 8) -> [10 17 16 11]", "(add [8 7 9 2 3] 0) -> [8 7 9 2 3]", "(add [9 0] 9) -> [18 9]", "(add [9 4 2 3 8] 1) -> [10 5 3 4 9]", "(add [1 8] 7) -> [8 15]", "(add [1 5] 3) -> [4 8]", "(add [] 3) -> []", "(add [9 2] 3) -> [12 5]", "(add [] 0) -> []", "(add [7 3 1 6 0] 7) -> [14 10 8 13 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.038803}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [9] 4) -> [13]", "(add [6 3 5] 7) -> [13 10 12]", "(add [2] 9) -> [11]", "(add [9 8 3] 7) -> [16 15 10]", "(add [2] 0) -> [2]", "(add [3 0] 2) -> [5 2]", "(add [7 3 8 0 0] 6) -> [13 9 14 6 6]", "(add [5] 7) -> [12]", "(add [3] 9) -> [12]", "(add [4 3 9 7] 1) -> [5 4 10 8]", "(add [5 0 1 8] 1) -> [6 1 2 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.050669}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [5] 1) -> [6]", "(add [1] 3) -> [4]", "(add [5] 7) -> [12]", "(add [2 5 0 7] 0) -> [2 5 0 7]", "(add [5 1] 3) -> [8 4]", "(add [] 3) -> []", "(add [9 3 8] 8) -> [17 11 16]", "(add [2 2 5 8 5] 3) -> [5 5 8 11 8]", "(add [2] 7) -> [9]", "(add [2] 2) -> [4]", "(add [3 3 3 9 5] 0) -> [3 3 3 9 5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.033126}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [0 6 3 9] 6) -> [6 12 9 15]", "(add [6 1] 0) -> [6 1]", "(add [9] 1) -> [10]", "(add [9] 8) -> [17]", "(add [8 3 1 2] 3) -> [11 6 4 5]", "(add [1 6 5 8 9] 3) -> [4 9 8 11 12]", "(add [7 3 6 6 5] 1) -> [8 4 7 7 6]", "(add [] 9) -> []", "(add [1 2 7 5 1] 4) -> [5 6 11 9 5]", "(add [9] 6) -> [15]", "(add [] 0) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.033464}
{"name": "add", "examples": ["(add [] 0) -> []", "(add [1] 6) -> [7]", "(add [] 6) -> []", "(add [8 4] 1) -> [9 5]", "(add [1 0 2 3] 4) -> [5 4 6 7]", "(add [1 8 5 6 3] 2) -> [3 10 7 8 5]", "(add [9 6 2 2] 4) -> [13 10 6 6]", "(add [3 0 6 3] 3) -> [6 3 9 6]", "(add [6 5 5 0 3] 1) -> [7 6 6 1 4]", "(add [8 6 3 5] 6) -> [14 12 9 11]", "(add [3 3] 8) -> [11 11]", "(add [8] 3) -> [11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.030577}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [1 4 1 3 1] 0) -> [1 4 1 3 1]", "(add [4 3 9 8] 3) -> [7 6 12 11]", "(add [8] 4) -> [12]", "(add [8 8 8 1] 4) -> [12 12 12 5]", "(add [4] 3) -> [7]", "(add [] 3) -> []", "(add [7 6] 0) -> [7 6]", "(add [6 8 8 2] 2) -> [8 10 10 4]", "(add [4] 8) -> [12]", "(add [1 8 6] 2) -> [3 10 8]", "(add [0 1 3] 7) -> [7 8 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.030734}
{"name": "add", "examples": ["(add [] 0) -> []", "(add [4 8] 3) -> [7 11]", "(add [6] 0) -> [6]", "(add [] 8) -> []", "(add [7] 2) -> [9]", "(add [] 4) -> []", "(add [9 8 1 8] 7) -> [16 15 8 15]", "(add [8] 2) -> [10]", "(add [7 2 9 9 9] 9) -> [16 11 18 18 18]", "(add [5 1 7] 0) -> [5 1 7]", "(add [7 8 5 8 0] 3) -> [10 11 8 11 3]", "(add [6 1 3 5] 7) -> [13 8 10 12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.030087}
