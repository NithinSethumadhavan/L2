{"examples": ["(append [] 8) -> [8]", "(append [0] 7) -> [0 7]", "(append [] 3) -> [3]", "(append [] 9) -> [9]", "(append [3] 6) -> [3 6]", "(append [5 3 2 2 1] 7) -> [5 3 2 2 1 7]", "(append [9 1] 0) -> [9 1 0]", "(append [3 9 9] 2) -> [3 9 9 2]", "(append [9 6] 8) -> [9 6 8]", "(append [4 1 8 1 7] 2) -> [4 1 8 1 7 2]", "(append [5] 8) -> [5 8]", "(append [9 4 2] 0) -> [9 4 2 0]"], "time": 0.947685, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 4) -> [4]", "(append [3 1 7 6 7] 3) -> [3 1 7 6 7 3]", "(append [6 2] 1) -> [6 2 1]", "(append [] 2) -> [2]", "(append [2] 5) -> [2 5]", "(append [6] 8) -> [6 8]", "(append [6 5 4 7] 9) -> [6 5 4 7 9]", "(append [] 2) -> [2]", "(append [6 2] 2) -> [6 2 2]", "(append [2] 4) -> [2 4]", "(append [] 8) -> [8]", "(append [2 6 9 6] 5) -> [2 6 9 6 5]"], "time": 1.01876, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 7) -> [7]", "(append [9 7 7 6] 2) -> [9 7 7 6 2]", "(append [4 9 5 2] 6) -> [4 9 5 2 6]", "(append [3 6] 4) -> [3 6 4]", "(append [] 9) -> [9]", "(append [7 7] 4) -> [7 7 4]", "(append [] 4) -> [4]", "(append [] 4) -> [4]", "(append [5 3 9] 6) -> [5 3 9 6]", "(append [9 0 2 3] 9) -> [9 0 2 3 9]", "(append [1] 4) -> [1 4]", "(append [0 9 1] 7) -> [0 9 1 7]"], "time": 0.965674, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 2) -> [2]", "(append [8] 4) -> [8 4]", "(append [7 6 6 0] 6) -> [7 6 6 0 6]", "(append [1 6 6] 1) -> [1 6 6 1]", "(append [4 0] 9) -> [4 0 9]", "(append [0] 3) -> [0 3]", "(append [7 4 7] 7) -> [7 4 7 7]", "(append [] 8) -> [8]", "(append [2] 7) -> [2 7]", "(append [] 2) -> [2]", "(append [4 5 3 7] 4) -> [4 5 3 7 4]", "(append [1 8 1 9] 5) -> [1 8 1 9 5]"], "time": 0.974015, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 3) -> [3]", "(append [3 7 2 5] 8) -> [3 7 2 5 8]", "(append [] 2) -> [2]", "(append [1 5 5 1] 9) -> [1 5 5 1 9]", "(append [6 3 3] 5) -> [6 3 3 5]", "(append [7 3 1 3] 3) -> [7 3 1 3 3]", "(append [6 4 1] 7) -> [6 4 1 7]", "(append [] 6) -> [6]", "(append [0 4 9 5] 0) -> [0 4 9 5 0]", "(append [1] 0) -> [1 0]", "(append [3 9 2 6] 4) -> [3 9 2 6 4]", "(append [] 8) -> [8]"], "time": 1.103352, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 5) -> [5]", "(append [] 2) -> [2]", "(append [9 9] 0) -> [9 9 0]", "(append [0 0 4] 5) -> [0 0 4 5]", "(append [4 7] 7) -> [4 7 7]", "(append [1] 0) -> [1 0]", "(append [5 9 4 6] 3) -> [5 9 4 6 3]", "(append [8 5] 6) -> [8 5 6]", "(append [4 6 9] 9) -> [4 6 9 9]", "(append [5 3 8] 9) -> [5 3 8 9]", "(append [3 6 4 2] 8) -> [3 6 4 2 8]", "(append [6 3] 1) -> [6 3 1]"], "time": 1.056602, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 0) -> [0]", "(append [] 5) -> [5]", "(append [0] 2) -> [0 2]", "(append [8 3] 3) -> [8 3 3]", "(append [9 0 6 4 9] 7) -> [9 0 6 4 9 7]", "(append [] 2) -> [2]", "(append [] 8) -> [8]", "(append [1] 7) -> [1 7]", "(append [] 4) -> [4]", "(append [0 3] 1) -> [0 3 1]", "(append [1 6 5 7] 3) -> [1 6 5 7 3]", "(append [0 0 4 8] 5) -> [0 0 4 8 5]"], "time": 0.995561, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 3) -> [3]", "(append [9 3 6 8 2] 3) -> [9 3 6 8 2 3]", "(append [6 7 8 1 3] 0) -> [6 7 8 1 3 0]", "(append [6 3] 1) -> [6 3 1]", "(append [0 5 6 1] 1) -> [0 5 6 1 1]", "(append [9 2 1] 8) -> [9 2 1 8]", "(append [3 8 0 7 1] 6) -> [3 8 0 7 1 6]", "(append [5 1 7 3 2] 1) -> [5 1 7 3 2 1]", "(append [] 2) -> [2]", "(append [7] 1) -> [7 1]", "(append [5 7 6] 2) -> [5 7 6 2]", "(append [] 2) -> [2]"], "time": 1.081312, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 7) -> [7]", "(append [7 9 2 3 9] 1) -> [7 9 2 3 9 1]", "(append [] 2) -> [2]", "(append [1] 4) -> [1 4]", "(append [2] 3) -> [2 3]", "(append [2] 0) -> [2 0]", "(append [0 4 7] 6) -> [0 4 7 6]", "(append [9 4] 0) -> [9 4 0]", "(append [6 6] 3) -> [6 6 3]", "(append [9 6 5 3 3] 4) -> [9 6 5 3 3 4]", "(append [] 9) -> [9]", "(append [2 0 1 0 7] 7) -> [2 0 1 0 7 7]"], "time": 1.091694, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 1) -> [1]", "(append [1] 1) -> [1 1]", "(append [1 7 4] 4) -> [1 7 4 4]", "(append [7 2 3 0 0] 5) -> [7 2 3 0 0 5]", "(append [5 3 0] 8) -> [5 3 0 8]", "(append [0 8] 8) -> [0 8 8]", "(append [] 5) -> [5]", "(append [0 2] 5) -> [0 2 5]", "(append [8 1 7 9 2] 4) -> [8 1 7 9 2 4]", "(append [3 6 2 7 7] 7) -> [3 6 2 7 7 7]", "(append [5 3 7 2 0] 7) -> [5 3 7 2 0 7]", "(append [8] 4) -> [8 4]"], "time": 1.072552, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 7) -> [7]", "(append [] 9) -> [9]", "(append [6 7 0] 7) -> [6 7 0 7]", "(append [7 0 0] 8) -> [7 0 0 8]", "(append [2 6 3 3 8] 2) -> [2 6 3 3 8 2]", "(append [] 1) -> [1]", "(append [2 7 4 4 5] 1) -> [2 7 4 4 5 1]", "(append [4 2 3 7 6] 3) -> [4 2 3 7 6 3]", "(append [9 7] 1) -> [9 7 1]", "(append [2 8 4 7 4] 6) -> [2 8 4 7 4 6]", "(append [] 6) -> [6]", "(append [] 8) -> [8]"], "time": 0.82894, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 1) -> [1]", "(append [8 8] 2) -> [8 8 2]", "(append [6 1 5] 5) -> [6 1 5 5]", "(append [1 0 5 2 8] 0) -> [1 0 5 2 8 0]", "(append [3 4] 2) -> [3 4 2]", "(append [0 7] 7) -> [0 7 7]", "(append [0 8 7] 5) -> [0 8 7 5]", "(append [7] 5) -> [7 5]", "(append [2 4] 5) -> [2 4 5]", "(append [5 1] 0) -> [5 1 0]", "(append [1] 9) -> [1 9]", "(append [] 0) -> [0]"], "time": 0.762917, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 9) -> [9]", "(append [0 8 0] 0) -> [0 8 0 0]", "(append [3 1 4 7] 2) -> [3 1 4 7 2]", "(append [8 9 0 5] 3) -> [8 9 0 5 3]", "(append [9 7 1 7 8] 0) -> [9 7 1 7 8 0]", "(append [7 2 1 8] 2) -> [7 2 1 8 2]", "(append [1 4 0 6] 9) -> [1 4 0 6 9]", "(append [8 7 4 0 5] 2) -> [8 7 4 0 5 2]", "(append [5 4] 1) -> [5 4 1]", "(append [3] 2) -> [3 2]", "(append [] 4) -> [4]", "(append [6 6 6] 0) -> [6 6 6 0]"], "time": 0.754966, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 4) -> [4]", "(append [1 8 7 2 4] 4) -> [1 8 7 2 4 4]", "(append [6 6 2 4 5] 5) -> [6 6 2 4 5 5]", "(append [0 5 5 6] 7) -> [0 5 5 6 7]", "(append [9 1 6 0] 0) -> [9 1 6 0 0]", "(append [] 0) -> [0]", "(append [] 7) -> [7]", "(append [8 1 2 1 3] 8) -> [8 1 2 1 3 8]", "(append [] 3) -> [3]", "(append [4 4 7] 2) -> [4 4 7 2]", "(append [] 2) -> [2]", "(append [4 0] 7) -> [4 0 7]"], "time": 0.865795, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 1) -> [1]", "(append [6] 2) -> [6 2]", "(append [0 9] 3) -> [0 9 3]", "(append [3 5 0 8] 2) -> [3 5 0 8 2]", "(append [0 8 6 3] 4) -> [0 8 6 3 4]", "(append [] 7) -> [7]", "(append [7 6 2 9 2] 2) -> [7 6 2 9 2 2]", "(append [9 0] 4) -> [9 0 4]", "(append [0 1 4 0] 4) -> [0 1 4 0 4]", "(append [6] 7) -> [6 7]", "(append [] 4) -> [4]", "(append [5 7 2 8] 8) -> [5 7 2 8 8]"], "time": 1.10546, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 6) -> [6]", "(append [0 0 2 8] 9) -> [0 0 2 8 9]", "(append [] 4) -> [4]", "(append [1 1] 1) -> [1 1 1]", "(append [5 2 6] 0) -> [5 2 6 0]", "(append [4 2 1] 5) -> [4 2 1 5]", "(append [7 9 4 0 2] 6) -> [7 9 4 0 2 6]", "(append [9 3 0 8] 2) -> [9 3 0 8 2]", "(append [7] 0) -> [7 0]", "(append [3 3] 9) -> [3 3 9]", "(append [3 2 4 6] 3) -> [3 2 4 6 3]", "(append [0 0 8 9] 2) -> [0 0 8 9 2]"], "time": 1.195294, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 0) -> [0]", "(append [1 6 4] 3) -> [1 6 4 3]", "(append [7 0 8 9 7] 3) -> [7 0 8 9 7 3]", "(append [1] 3) -> [1 3]", "(append [1 2] 6) -> [1 2 6]", "(append [8] 4) -> [8 4]", "(append [8 3 0 6] 4) -> [8 3 0 6 4]", "(append [4 1 6] 0) -> [4 1 6 0]", "(append [] 4) -> [4]", "(append [8 4 1 9] 6) -> [8 4 1 9 6]", "(append [] 0) -> [0]", "(append [] 6) -> [6]"], "time": 1.241825, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 2) -> [2]", "(append [] 8) -> [8]", "(append [] 8) -> [8]", "(append [3 0 9 2] 1) -> [3 0 9 2 1]", "(append [] 6) -> [6]", "(append [] 5) -> [5]", "(append [1 0 5 7] 0) -> [1 0 5 7 0]", "(append [6 8 1 0] 4) -> [6 8 1 0 4]", "(append [0 1] 7) -> [0 1 7]", "(append [7 2 6 5] 4) -> [7 2 6 5 4]", "(append [3 9 9 9] 5) -> [3 9 9 9 5]", "(append [3 9 5 6 6] 8) -> [3 9 5 6 6 8]"], "time": 1.251062, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 1) -> [1]", "(append [4 5 1] 9) -> [4 5 1 9]", "(append [6 2 4 3 4] 5) -> [6 2 4 3 4 5]", "(append [] 2) -> [2]", "(append [2 5 3] 5) -> [2 5 3 5]", "(append [4 0 6 6 5] 0) -> [4 0 6 6 5 0]", "(append [9 5 2] 4) -> [9 5 2 4]", "(append [7 6 6 2 8] 0) -> [7 6 6 2 8 0]", "(append [6 1 0 6] 9) -> [6 1 0 6 9]", "(append [4 1 1 7] 5) -> [4 1 1 7 5]", "(append [9 9 8] 8) -> [9 9 8 8]", "(append [6 2] 2) -> [6 2 2]"], "time": 0.597362, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 8) -> [8]", "(append [5 9 5 1] 8) -> [5 9 5 1 8]", "(append [0 0 8 4] 5) -> [0 0 8 4 5]", "(append [] 6) -> [6]", "(append [] 9) -> [9]", "(append [8 7 6 0] 7) -> [8 7 6 0 7]", "(append [9] 4) -> [9 4]", "(append [7 4 6] 8) -> [7 4 6 8]", "(append [2 5 2 9 9] 1) -> [2 5 2 9 9 1]", "(append [9 3 4] 9) -> [9 3 4 9]", "(append [8 4 4 2] 8) -> [8 4 4 2 8]", "(append [4 8 1 9 3] 1) -> [4 8 1 9 3 1]"], "time": 0.697127, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 2) -> [2]", "(append [5 0 2 2 8] 5) -> [5 0 2 2 8 5]", "(append [8 6 8 8 2] 5) -> [8 6 8 8 2 5]", "(append [4 5 1 1] 6) -> [4 5 1 1 6]", "(append [9 9 2] 1) -> [9 9 2 1]", "(append [0 4] 3) -> [0 4 3]", "(append [] 5) -> [5]", "(append [5 0 5 9 5] 3) -> [5 0 5 9 5 3]", "(append [2] 6) -> [2 6]", "(append [1 6 3] 3) -> [1 6 3 3]", "(append [7] 2) -> [7 2]", "(append [0 6 0] 6) -> [0 6 0 6]"], "time": 0.711694, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 5) -> [5]", "(append [4 1 7] 6) -> [4 1 7 6]", "(append [] 1) -> [1]", "(append [6 6 6 3 1] 3) -> [6 6 6 3 1 3]", "(append [4 9] 2) -> [4 9 2]", "(append [5 9 7 1 0] 2) -> [5 9 7 1 0 2]", "(append [0 3 7 2] 3) -> [0 3 7 2 3]", "(append [6 5 2 1] 2) -> [6 5 2 1 2]", "(append [9 4 3 0] 5) -> [9 4 3 0 5]", "(append [3 2] 8) -> [3 2 8]", "(append [9] 7) -> [9 7]", "(append [0 8 6] 3) -> [0 8 6 3]"], "time": 1.17965, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 6) -> [6]", "(append [2 3 0 2 4] 0) -> [2 3 0 2 4 0]", "(append [] 3) -> [3]", "(append [2 3] 5) -> [2 3 5]", "(append [4 9 4 8] 8) -> [4 9 4 8 8]", "(append [0] 2) -> [0 2]", "(append [8] 6) -> [8 6]", "(append [1] 5) -> [1 5]", "(append [9] 0) -> [9 0]", "(append [6 4 8] 0) -> [6 4 8 0]", "(append [4 0 8 0] 8) -> [4 0 8 0 8]", "(append [9 4] 8) -> [9 4 8]"], "time": 1.227928, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 6) -> [6]", "(append [6 1 7 7] 2) -> [6 1 7 7 2]", "(append [0 9] 5) -> [0 9 5]", "(append [0 3 8] 1) -> [0 3 8 1]", "(append [4] 2) -> [4 2]", "(append [0 3 1 9 4] 9) -> [0 3 1 9 4 9]", "(append [7] 1) -> [7 1]", "(append [] 3) -> [3]", "(append [7 7] 9) -> [7 7 9]", "(append [1 8 7] 0) -> [1 8 7 0]", "(append [] 4) -> [4]", "(append [6 2] 6) -> [6 2 6]"], "time": 0.678144, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 1) -> [1]", "(append [0] 3) -> [0 3]", "(append [7 3] 7) -> [7 3 7]", "(append [9 5] 9) -> [9 5 9]", "(append [8 6 0 9] 4) -> [8 6 0 9 4]", "(append [6] 5) -> [6 5]", "(append [7 7 8] 2) -> [7 7 8 2]", "(append [7 4 8 1] 4) -> [7 4 8 1 4]", "(append [7 0 6 9 6] 8) -> [7 0 6 9 6 8]", "(append [3] 6) -> [3 6]", "(append [5] 7) -> [5 7]", "(append [7] 1) -> [7 1]"], "time": 3.364888, "name": "append", "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [1])) _) _)"}
{"examples": ["(append [] 3) -> [3]", "(append [4 7 3] 9) -> [4 7 3 9]", "(append [6 2 5] 2) -> [6 2 5 2]", "(append [1 4 0 9] 7) -> [1 4 0 9 7]", "(append [] 6) -> [6]", "(append [0 3 2 1] 2) -> [0 3 2 1 2]", "(append [5 4 4] 2) -> [5 4 4 2]", "(append [5] 0) -> [5 0]", "(append [2] 7) -> [2 7]", "(append [0 7] 5) -> [0 7 5]", "(append [2] 3) -> [2 3]", "(append [5 5 8] 7) -> [5 5 8 7]"], "time": 1.229942, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 2) -> [2]", "(append [5 0 7 6 1] 2) -> [5 0 7 6 1 2]", "(append [9 6] 0) -> [9 6 0]", "(append [] 7) -> [7]", "(append [1] 1) -> [1 1]", "(append [9 2 5 8 6] 8) -> [9 2 5 8 6 8]", "(append [5 5 7 4 5] 7) -> [5 5 7 4 5 7]", "(append [5 2 7 1] 5) -> [5 2 7 1 5]", "(append [9 3 2] 0) -> [9 3 2 0]", "(append [] 8) -> [8]", "(append [] 0) -> [0]", "(append [3 1 0] 8) -> [3 1 0 8]"], "time": 1.212754, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 5) -> [5]", "(append [5 6 1 9] 5) -> [5 6 1 9 5]", "(append [3 6 9 4 5] 2) -> [3 6 9 4 5 2]", "(append [5] 8) -> [5 8]", "(append [] 0) -> [0]", "(append [0] 7) -> [0 7]", "(append [0 0 5 0] 4) -> [0 0 5 0 4]", "(append [2] 4) -> [2 4]", "(append [1 6 6 7 5] 9) -> [1 6 6 7 5 9]", "(append [2] 7) -> [2 7]", "(append [9 8 6 3] 8) -> [9 8 6 3 8]", "(append [6 7] 5) -> [6 7 5]"], "time": 0.654155, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 8) -> [8]", "(append [6] 6) -> [6 6]", "(append [8 5 5 1] 7) -> [8 5 5 1 7]", "(append [7 0 9 6 8] 8) -> [7 0 9 6 8 8]", "(append [] 2) -> [2]", "(append [2] 8) -> [2 8]", "(append [1] 7) -> [1 7]", "(append [3 3 3 5] 3) -> [3 3 3 5 3]", "(append [3 8 2] 6) -> [3 8 2 6]", "(append [7] 1) -> [7 1]", "(append [] 1) -> [1]", "(append [6 0 6 2 0] 4) -> [6 0 6 2 0 4]"], "time": 1.112785, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 9) -> [9]", "(append [0 8] 8) -> [0 8 8]", "(append [] 0) -> [0]", "(append [9 4] 3) -> [9 4 3]", "(append [2] 1) -> [2 1]", "(append [9 3 2 2] 2) -> [9 3 2 2 2]", "(append [] 2) -> [2]", "(append [7 2] 5) -> [7 2 5]", "(append [5 4 6 0] 7) -> [5 4 6 0 7]", "(append [6] 2) -> [6 2]", "(append [6] 7) -> [6 7]", "(append [0 0 0 4 2] 8) -> [0 0 0 4 2 8]"], "time": 0.693183, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 3) -> [3]", "(append [9 5 6 6 9] 4) -> [9 5 6 6 9 4]", "(append [7 1 1 3 1] 6) -> [7 1 1 3 1 6]", "(append [5 5] 0) -> [5 5 0]", "(append [8 5 1] 0) -> [8 5 1 0]", "(append [6 3 1 7 9] 6) -> [6 3 1 7 9 6]", "(append [7 6 2 5] 4) -> [7 6 2 5 4]", "(append [3 5] 2) -> [3 5 2]", "(append [2 8 5 8 9] 7) -> [2 8 5 8 9 7]", "(append [] 4) -> [4]", "(append [] 5) -> [5]", "(append [] 0) -> [0]"], "time": 0.701229, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 1) -> [1]", "(append [] 5) -> [5]", "(append [1 4 3 4 3] 7) -> [1 4 3 4 3 7]", "(append [7 6 5 9] 2) -> [7 6 5 9 2]", "(append [3] 0) -> [3 0]", "(append [9] 7) -> [9 7]", "(append [6 2] 7) -> [6 2 7]", "(append [] 2) -> [2]", "(append [7 5 1] 5) -> [7 5 1 5]", "(append [9 0 6] 4) -> [9 0 6 4]", "(append [5 0 4] 1) -> [5 0 4 1]", "(append [] 7) -> [7]"], "time": 0.716733, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 0) -> [0]", "(append [9 7 1 3 7] 3) -> [9 7 1 3 7 3]", "(append [0] 9) -> [0 9]", "(append [] 1) -> [1]", "(append [9 8 6 3 7] 4) -> [9 8 6 3 7 4]", "(append [9 1 5 6] 1) -> [9 1 5 6 1]", "(append [] 3) -> [3]", "(append [4 1] 2) -> [4 1 2]", "(append [4 4 9] 1) -> [4 4 9 1]", "(append [] 7) -> [7]", "(append [2 6 2 1] 6) -> [2 6 2 1 6]", "(append [1 3 8] 9) -> [1 3 8 9]"], "time": 0.738749, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 2) -> [2]", "(append [] 2) -> [2]", "(append [] 2) -> [2]", "(append [2 7 3 4 7] 8) -> [2 7 3 4 7 8]", "(append [5] 6) -> [5 6]", "(append [1 6] 7) -> [1 6 7]", "(append [4 2 9 9] 0) -> [4 2 9 9 0]", "(append [3 5 6] 0) -> [3 5 6 0]", "(append [9 3] 7) -> [9 3 7]", "(append [5 3 9 8] 5) -> [5 3 9 8 5]", "(append [3 3] 3) -> [3 3 3]", "(append [7] 6) -> [7 6]"], "time": 4.620697, "name": "append", "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [2])) _) _)"}
{"examples": ["(append [] 2) -> [2]", "(append [1] 1) -> [1 1]", "(append [5 5 1] 9) -> [5 5 1 9]", "(append [] 7) -> [7]", "(append [] 4) -> [4]", "(append [1] 3) -> [1 3]", "(append [5 1 0 9] 1) -> [5 1 0 9 1]", "(append [3 6] 6) -> [3 6 6]", "(append [6 9] 5) -> [6 9 5]", "(append [] 3) -> [3]", "(append [6 6 7] 2) -> [6 6 7 2]", "(append [2 5] 8) -> [2 5 8]"], "time": 0.640691, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 8) -> [8]", "(append [3 5 9 1] 2) -> [3 5 9 1 2]", "(append [8 2] 6) -> [8 2 6]", "(append [7 9 8] 0) -> [7 9 8 0]", "(append [6 1 6] 6) -> [6 1 6 6]", "(append [5 6] 2) -> [5 6 2]", "(append [3 0] 6) -> [3 0 6]", "(append [2 3 5] 6) -> [2 3 5 6]", "(append [] 4) -> [4]", "(append [8 0 0 2] 1) -> [8 0 0 2 1]", "(append [6 1 2 6] 0) -> [6 1 2 6 0]", "(append [7 3 0] 6) -> [7 3 0 6]"], "time": 0.515631, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 1) -> [1]", "(append [4 3 0 3] 1) -> [4 3 0 3 1]", "(append [5 0 6 9] 7) -> [5 0 6 9 7]", "(append [6] 1) -> [6 1]", "(append [0 8 8 2] 2) -> [0 8 8 2 2]", "(append [9 3 4] 4) -> [9 3 4 4]", "(append [9] 5) -> [9 5]", "(append [2 3 7 8] 2) -> [2 3 7 8 2]", "(append [5 0] 0) -> [5 0 0]", "(append [2 2 8 6] 3) -> [2 2 8 6 3]", "(append [] 4) -> [4]", "(append [0 4 2] 3) -> [0 4 2 3]"], "time": 0.532777, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 9) -> [9]", "(append [8 1 6 4 1] 7) -> [8 1 6 4 1 7]", "(append [1 9 3 7 1] 9) -> [1 9 3 7 1 9]", "(append [] 4) -> [4]", "(append [2] 6) -> [2 6]", "(append [9 6 1 2] 4) -> [9 6 1 2 4]", "(append [7 2 5 8] 4) -> [7 2 5 8 4]", "(append [] 2) -> [2]", "(append [5] 7) -> [5 7]", "(append [] 4) -> [4]", "(append [9 9] 0) -> [9 9 0]", "(append [] 9) -> [9]"], "time": 1.220207, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 2) -> [2]", "(append [2 5] 2) -> [2 5 2]", "(append [] 2) -> [2]", "(append [2 5 1] 8) -> [2 5 1 8]", "(append [5] 4) -> [5 4]", "(append [0 0 1] 4) -> [0 0 1 4]", "(append [2 5 0 2 8] 2) -> [2 5 0 2 8 2]", "(append [9 0 5 6] 0) -> [9 0 5 6 0]", "(append [6 7] 7) -> [6 7 7]", "(append [4] 0) -> [4 0]", "(append [1] 2) -> [1 2]", "(append [6 0 5] 7) -> [6 0 5 7]"], "time": 5.236239, "name": "append", "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [2])) _) _)"}
{"examples": ["(append [] 8) -> [8]", "(append [3 6 6 9 8] 8) -> [3 6 6 9 8 8]", "(append [6 4 9] 9) -> [6 4 9 9]", "(append [] 6) -> [6]", "(append [0 7 9 6] 6) -> [0 7 9 6 6]", "(append [1] 7) -> [1 7]", "(append [1 3 6 0] 7) -> [1 3 6 0 7]", "(append [8] 6) -> [8 6]", "(append [3] 2) -> [3 2]", "(append [7 8 8 2] 1) -> [7 8 8 2 1]", "(append [0] 9) -> [0 9]", "(append [8 9 4 4] 7) -> [8 9 4 4 7]"], "time": 1.166763, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 8) -> [8]", "(append [9 3 0 8 4] 2) -> [9 3 0 8 4 2]", "(append [9 4 6 9] 7) -> [9 4 6 9 7]", "(append [0 2] 0) -> [0 2 0]", "(append [] 2) -> [2]", "(append [4 5 3 0] 0) -> [4 5 3 0 0]", "(append [4 0 3] 8) -> [4 0 3 8]", "(append [4] 8) -> [4 8]", "(append [1 3 4 7 1] 6) -> [1 3 4 7 1 6]", "(append [8 5 2] 5) -> [8 5 2 5]", "(append [3] 8) -> [3 8]", "(append [8 7 5 2 7] 5) -> [8 7 5 2 7 5]"], "time": 0.507328, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 1) -> [1]", "(append [6] 4) -> [6 4]", "(append [6 5 0] 2) -> [6 5 0 2]", "(append [4 6 9 4] 4) -> [4 6 9 4 4]", "(append [0 6] 6) -> [0 6 6]", "(append [1 0] 3) -> [1 0 3]", "(append [2 6 1 7 8] 2) -> [2 6 1 7 8 2]", "(append [8 8] 0) -> [8 8 0]", "(append [1 2 6] 0) -> [1 2 6 0]", "(append [8 3] 3) -> [8 3 3]", "(append [3 5] 7) -> [3 5 7]", "(append [9 4 6] 4) -> [9 4 6 4]"], "time": 5.554622, "name": "append", "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [1])) _) _)"}
{"examples": ["(append [] 0) -> [0]", "(append [] 0) -> [0]", "(append [6 3] 3) -> [6 3 3]", "(append [8] 7) -> [8 7]", "(append [7 8 4 0] 2) -> [7 8 4 0 2]", "(append [5 7] 7) -> [5 7 7]", "(append [8 2 1 1] 8) -> [8 2 1 1 8]", "(append [0 6 0 5 0] 9) -> [0 6 0 5 0 9]", "(append [5 3 8 9 3] 8) -> [5 3 8 9 3 8]", "(append [7 5] 4) -> [7 5 4]", "(append [9] 6) -> [9 6]", "(append [3 8] 1) -> [3 8 1]"], "time": 5.57563, "name": "append", "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [0])) _) _)"}
{"examples": ["(append [] 7) -> [7]", "(append [5 2 3 3 4] 4) -> [5 2 3 3 4 4]", "(append [3 1 9 3] 7) -> [3 1 9 3 7]", "(append [4 2] 3) -> [4 2 3]", "(append [] 7) -> [7]", "(append [] 6) -> [6]", "(append [2 5 0 8] 8) -> [2 5 0 8 8]", "(append [1] 6) -> [1 6]", "(append [] 0) -> [0]", "(append [5 0] 9) -> [5 0 9]", "(append [5 6 6 9 1] 4) -> [5 6 6 9 1 4]", "(append [7 4] 8) -> [7 4 8]"], "time": 1.217867, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 9) -> [9]", "(append [7 2] 3) -> [7 2 3]", "(append [0 7 2 1 1] 6) -> [0 7 2 1 1 6]", "(append [] 8) -> [8]", "(append [3 6] 3) -> [3 6 3]", "(append [4 0] 6) -> [4 0 6]", "(append [7] 8) -> [7 8]", "(append [7 8 0 5 4] 6) -> [7 8 0 5 4 6]", "(append [6] 1) -> [6 1]", "(append [1] 7) -> [1 7]", "(append [5 5 6] 4) -> [5 5 6 4]", "(append [0 4 3] 4) -> [0 4 3 4]"], "time": 0.611539, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 4) -> [4]", "(append [1 7 1] 0) -> [1 7 1 0]", "(append [1 6 5 9 0] 2) -> [1 6 5 9 0 2]", "(append [] 2) -> [2]", "(append [4 7] 8) -> [4 7 8]", "(append [] 2) -> [2]", "(append [8 6 0 1 1] 1) -> [8 6 0 1 1 1]", "(append [9 3 0 2 0] 7) -> [9 3 0 2 0 7]", "(append [2 1 1 0] 9) -> [2 1 1 0 9]", "(append [2 7] 8) -> [2 7 8]", "(append [6 3 4 6] 7) -> [6 3 4 6 7]", "(append [4 8] 3) -> [4 8 3]"], "time": 0.609753, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 7) -> [7]", "(append [] 3) -> [3]", "(append [1 9] 9) -> [1 9 9]", "(append [2] 0) -> [2 0]", "(append [0 7 0 1 2] 3) -> [0 7 0 1 2 3]", "(append [4 8 3] 8) -> [4 8 3 8]", "(append [9] 0) -> [9 0]", "(append [2 3 6 3] 7) -> [2 3 6 3 7]", "(append [9 8 4 3] 5) -> [9 8 4 3 5]", "(append [4] 8) -> [4 8]", "(append [3] 9) -> [3 9]", "(append [5 0 7 6 0] 7) -> [5 0 7 6 0 7]"], "time": 1.031627, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 2) -> [2]", "(append [6 6 3 1] 7) -> [6 6 3 1 7]", "(append [1 6] 7) -> [1 6 7]", "(append [9] 4) -> [9 4]", "(append [9 9 7] 2) -> [9 9 7 2]", "(append [2 1 1 4] 7) -> [2 1 1 4 7]", "(append [7 4] 9) -> [7 4 9]", "(append [9 2] 8) -> [9 2 8]", "(append [0] 1) -> [0 1]", "(append [7 0] 4) -> [7 0 4]", "(append [0 7 5 5 1] 6) -> [0 7 5 5 1 6]", "(append [0] 2) -> [0 2]"], "time": 6.133332, "name": "append", "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [2])) _) _)"}
{"examples": ["(append [] 4) -> [4]", "(append [3 8 9] 9) -> [3 8 9 9]", "(append [2 7 2 6] 9) -> [2 7 2 6 9]", "(append [4 3] 1) -> [4 3 1]", "(append [2 2] 5) -> [2 2 5]", "(append [7 1] 3) -> [7 1 3]", "(append [1 3 5 2 9] 9) -> [1 3 5 2 9 9]", "(append [9 2] 0) -> [9 2 0]", "(append [2 6 4 1] 0) -> [2 6 4 1 0]", "(append [1 5 6 4] 9) -> [1 5 6 4 9]", "(append [3 7 0] 1) -> [3 7 0 1]", "(append [6] 2) -> [6 2]"], "time": 4.925433, "name": "append", "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [4])) _) _)"}
{"examples": ["(append [] 0) -> [0]", "(append [7 1] 4) -> [7 1 4]", "(append [4 7 1] 5) -> [4 7 1 5]", "(append [1 2 1 7] 6) -> [1 2 1 7 6]", "(append [1 5 5 7] 2) -> [1 5 5 7 2]", "(append [6 7 7] 4) -> [6 7 7 4]", "(append [2 6 3 7 9] 5) -> [2 6 3 7 9 5]", "(append [] 1) -> [1]", "(append [2 1 8 8 8] 8) -> [2 1 8 8 8 8]", "(append [2 3] 8) -> [2 3 8]", "(append [7 0 3 5] 2) -> [7 0 3 5 2]", "(append [7] 4) -> [7 4]"], "time": 0.780859, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 7) -> [7]", "(append [9 0 2] 0) -> [9 0 2 0]", "(append [2 8 6 4] 4) -> [2 8 6 4 4]", "(append [7 4 0 3 1] 9) -> [7 4 0 3 1 9]", "(append [] 9) -> [9]", "(append [8] 4) -> [8 4]", "(append [9 1 6] 8) -> [9 1 6 8]", "(append [4 7 1 2 2] 8) -> [4 7 1 2 2 8]", "(append [7] 4) -> [7 4]", "(append [] 0) -> [0]", "(append [2 7 6 9] 7) -> [2 7 6 9 7]", "(append [5 2 2 9] 1) -> [5 2 2 9 1]"], "time": 0.692446, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 2) -> [2]", "(append [0 5 1 1 8] 7) -> [0 5 1 1 8 7]", "(append [4 5 4 3 9] 6) -> [4 5 4 3 9 6]", "(append [6] 3) -> [6 3]", "(append [5 9] 8) -> [5 9 8]", "(append [6 6 0] 4) -> [6 6 0 4]", "(append [5 4] 5) -> [5 4 5]", "(append [7 4 7] 5) -> [7 4 7 5]", "(append [8 2 0] 7) -> [8 2 0 7]", "(append [4 7 9] 7) -> [4 7 9 7]", "(append [4] 1) -> [4 1]", "(append [] 3) -> [3]"], "time": 0.744394, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 3) -> [3]", "(append [2 3] 8) -> [2 3 8]", "(append [] 0) -> [0]", "(append [4 1 4 7 7] 3) -> [4 1 4 7 7 3]", "(append [6] 9) -> [6 9]", "(append [8 2 3] 0) -> [8 2 3 0]", "(append [3] 6) -> [3 6]", "(append [2 1 7] 5) -> [2 1 7 5]", "(append [2 0 2 3] 5) -> [2 0 2 3 5]", "(append [1 7 3 5] 4) -> [1 7 3 5 4]", "(append [2] 5) -> [2 5]", "(append [6 1 2 7 9] 7) -> [6 1 2 7 9 7]"], "time": 0.624902, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 3) -> [3]", "(append [6 0] 3) -> [6 0 3]", "(append [] 9) -> [9]", "(append [7 9 9] 2) -> [7 9 9 2]", "(append [6 7 4 9 3] 1) -> [6 7 4 9 3 1]", "(append [4 0 9 8] 5) -> [4 0 9 8 5]", "(append [1 9 3 5 4] 3) -> [1 9 3 5 4 3]", "(append [] 1) -> [1]", "(append [9 6 6 5 6] 8) -> [9 6 6 5 6 8]", "(append [1 4 4] 5) -> [1 4 4 5]", "(append [8 3] 8) -> [8 3 8]", "(append [7 6 0] 3) -> [7 6 0 3]"], "time": 0.5006, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 1) -> [1]", "(append [3 8] 9) -> [3 8 9]", "(append [8] 0) -> [8 0]", "(append [7 7 7] 4) -> [7 7 7 4]", "(append [4 0] 0) -> [4 0 0]", "(append [3 1 1] 9) -> [3 1 1 9]", "(append [3] 8) -> [3 8]", "(append [] 1) -> [1]", "(append [5 9] 9) -> [5 9 9]", "(append [] 8) -> [8]", "(append [8 7 8 2] 9) -> [8 7 8 2 9]", "(append [8 5 1 3 1] 7) -> [8 5 1 3 1 7]"], "time": 0.947346, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 2) -> [2]", "(append [4] 9) -> [4 9]", "(append [5 5 4 8] 6) -> [5 5 4 8 6]", "(append [3 0 9] 2) -> [3 0 9 2]", "(append [7 7] 3) -> [7 7 3]", "(append [8] 2) -> [8 2]", "(append [4 5 1 6] 8) -> [4 5 1 6 8]", "(append [2 8 4] 8) -> [2 8 4 8]", "(append [0 0 3] 9) -> [0 0 3 9]", "(append [6] 4) -> [6 4]", "(append [] 5) -> [5]", "(append [7 6 7] 5) -> [7 6 7 5]"], "time": 1.036803, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 5) -> [5]", "(append [6 5 2 5] 9) -> [6 5 2 5 9]", "(append [9 1 9] 3) -> [9 1 9 3]", "(append [3 3] 2) -> [3 3 2]", "(append [2 2 1 8 2] 7) -> [2 2 1 8 2 7]", "(append [6 7 4 6 6] 5) -> [6 7 4 6 6 5]", "(append [] 8) -> [8]", "(append [] 5) -> [5]", "(append [7 1] 6) -> [7 1 6]", "(append [5 8 0] 4) -> [5 8 0 4]", "(append [5 5 2 5 9] 7) -> [5 5 2 5 9 7]", "(append [2] 3) -> [2 3]"], "time": 1.085628, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 0) -> [0]", "(append [8] 4) -> [8 4]", "(append [5 2 6] 3) -> [5 2 6 3]", "(append [] 3) -> [3]", "(append [7 3 3 9] 4) -> [7 3 3 9 4]", "(append [] 1) -> [1]", "(append [6] 4) -> [6 4]", "(append [2] 0) -> [2 0]", "(append [4 7] 4) -> [4 7 4]", "(append [8 8] 1) -> [8 8 1]", "(append [1 1 0] 9) -> [1 1 0 9]", "(append [4] 4) -> [4 4]"], "time": 0.682531, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 0) -> [0]", "(append [6 6 4 0] 2) -> [6 6 4 0 2]", "(append [2 3 9] 3) -> [2 3 9 3]", "(append [0] 4) -> [0 4]", "(append [] 3) -> [3]", "(append [9] 2) -> [9 2]", "(append [1 9 0 6] 1) -> [1 9 0 6 1]", "(append [6] 5) -> [6 5]", "(append [1 0 2] 7) -> [1 0 2 7]", "(append [] 3) -> [3]", "(append [5] 8) -> [5 8]", "(append [0] 3) -> [0 3]"], "time": 0.961787, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 4) -> [4]", "(append [1 5 7 0] 7) -> [1 5 7 0 7]", "(append [8 2 8 3 9] 9) -> [8 2 8 3 9 9]", "(append [1] 5) -> [1 5]", "(append [7 2 3 4] 8) -> [7 2 3 4 8]", "(append [3 1] 9) -> [3 1 9]", "(append [4 8 6 6] 7) -> [4 8 6 6 7]", "(append [5 1 0 4 9] 4) -> [5 1 0 4 9 4]", "(append [9] 2) -> [9 2]", "(append [] 1) -> [1]", "(append [5 0 4 8] 3) -> [5 0 4 8 3]", "(append [8] 9) -> [8 9]"], "time": 1.045328, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 6) -> [6]", "(append [] 4) -> [4]", "(append [5 5 4 2 4] 6) -> [5 5 4 2 4 6]", "(append [] 8) -> [8]", "(append [] 6) -> [6]", "(append [2 5 9 8] 2) -> [2 5 9 8 2]", "(append [0 1 8 9 1] 7) -> [0 1 8 9 1 7]", "(append [1 1] 6) -> [1 1 6]", "(append [8 0 8] 7) -> [8 0 8 7]", "(append [] 4) -> [4]", "(append [9 7] 0) -> [9 7 0]", "(append [4] 8) -> [4 8]"], "time": 0.889787, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 0) -> [0]", "(append [] 9) -> [9]", "(append [3 5 3 1 1] 8) -> [3 5 3 1 1 8]", "(append [] 4) -> [4]", "(append [4] 5) -> [4 5]", "(append [8 5 4 0] 8) -> [8 5 4 0 8]", "(append [2 1 3] 3) -> [2 1 3 3]", "(append [2 4 5 5] 8) -> [2 4 5 5 8]", "(append [] 1) -> [1]", "(append [9 2 0] 4) -> [9 2 0 4]", "(append [8 5 5 7] 5) -> [8 5 5 7 5]", "(append [7 9 4 9] 7) -> [7 9 4 9 7]"], "time": 0.783381, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 8) -> [8]", "(append [1] 0) -> [1 0]", "(append [4 9] 7) -> [4 9 7]", "(append [8 7] 5) -> [8 7 5]", "(append [4] 1) -> [4 1]", "(append [0 7] 0) -> [0 7 0]", "(append [5 9] 3) -> [5 9 3]", "(append [5 0 6 3 9] 5) -> [5 0 6 3 9 5]", "(append [0 2 3] 1) -> [0 2 3 1]", "(append [5 7] 1) -> [5 7 1]", "(append [9 9 9 2 7] 0) -> [9 9 9 2 7 0]", "(append [6 6] 2) -> [6 6 2]"], "time": 3.58079, "name": "append", "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [8])) _) _)"}
{"examples": ["(append [] 6) -> [6]", "(append [8 6 4 5 3] 8) -> [8 6 4 5 3 8]", "(append [0 2 1 8 6] 3) -> [0 2 1 8 6 3]", "(append [4] 7) -> [4 7]", "(append [] 4) -> [4]", "(append [6 8 4] 4) -> [6 8 4 4]", "(append [4 8 5 9] 2) -> [4 8 5 9 2]", "(append [8 5 2] 3) -> [8 5 2 3]", "(append [1] 7) -> [1 7]", "(append [4] 1) -> [4 1]", "(append [3 9 7] 6) -> [3 9 7 6]", "(append [7 1 3] 2) -> [7 1 3 2]"], "time": 1.065157, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 6) -> [6]", "(append [] 0) -> [0]", "(append [1] 4) -> [1 4]", "(append [7 6] 2) -> [7 6 2]", "(append [0 1] 3) -> [0 1 3]", "(append [6 6 7 0] 8) -> [6 6 7 0 8]", "(append [] 6) -> [6]", "(append [4 2 9 4 9] 3) -> [4 2 9 4 9 3]", "(append [0 8] 9) -> [0 8 9]", "(append [9 3 5 9 1] 0) -> [9 3 5 9 1 0]", "(append [2 1 8] 4) -> [2 1 8 4]", "(append [4 6] 4) -> [4 6 4]"], "time": 1.121214, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 2) -> [2]", "(append [5 4 9 9] 4) -> [5 4 9 9 4]", "(append [6 4] 2) -> [6 4 2]", "(append [] 0) -> [0]", "(append [6] 9) -> [6 9]", "(append [0 3 4] 2) -> [0 3 4 2]", "(append [1] 1) -> [1 1]", "(append [7 4 7] 0) -> [7 4 7 0]", "(append [9 7 1] 2) -> [9 7 1 2]", "(append [5 2] 0) -> [5 2 0]", "(append [9 3 4 6 8] 8) -> [9 3 4 6 8 8]", "(append [6] 6) -> [6 6]"], "time": 1.130745, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 9) -> [9]", "(append [4 4 9] 2) -> [4 4 9 2]", "(append [5 6 6 7 7] 2) -> [5 6 6 7 7 2]", "(append [7 0 7 7] 1) -> [7 0 7 7 1]", "(append [3 7 2 8] 4) -> [3 7 2 8 4]", "(append [7 8] 3) -> [7 8 3]", "(append [5] 6) -> [5 6]", "(append [5 1 5 0 1] 4) -> [5 1 5 0 1 4]", "(append [0 8] 8) -> [0 8 8]", "(append [7 2 2 3] 6) -> [7 2 2 3 6]", "(append [8 8 7 7 9] 6) -> [8 8 7 7 9 6]", "(append [0] 0) -> [0 0]"], "time": 4.52864, "name": "append", "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [9])) _) _)"}
{"examples": ["(append [] 6) -> [6]", "(append [] 3) -> [3]", "(append [1 8] 1) -> [1 8 1]", "(append [8 1] 2) -> [8 1 2]", "(append [3] 9) -> [3 9]", "(append [5 9 1] 3) -> [5 9 1 3]", "(append [0 8 7 7] 6) -> [0 8 7 7 6]", "(append [4 8 3 4] 8) -> [4 8 3 4 8]", "(append [0 7 1 6] 5) -> [0 7 1 6 5]", "(append [] 8) -> [8]", "(append [7 3 7 4] 0) -> [7 3 7 4 0]", "(append [0 5 9] 3) -> [0 5 9 3]"], "time": 0.707824, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 9) -> [9]", "(append [9] 0) -> [9 0]", "(append [] 0) -> [0]", "(append [1 7 8] 7) -> [1 7 8 7]", "(append [5 8 3] 9) -> [5 8 3 9]", "(append [7 7 7 0 6] 5) -> [7 7 7 0 6 5]", "(append [5 4] 8) -> [5 4 8]", "(append [] 9) -> [9]", "(append [0 2 9 8] 0) -> [0 2 9 8 0]", "(append [6] 2) -> [6 2]", "(append [6 0 0] 5) -> [6 0 0 5]", "(append [6 6] 4) -> [6 6 4]"], "time": 0.715445, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 9) -> [9]", "(append [0 9] 3) -> [0 9 3]", "(append [0 6 0 8] 1) -> [0 6 0 8 1]", "(append [2] 9) -> [2 9]", "(append [0] 2) -> [0 2]", "(append [0 3 9] 1) -> [0 3 9 1]", "(append [7 3 2 5 1] 2) -> [7 3 2 5 1 2]", "(append [5 6 8 5 2] 2) -> [5 6 8 5 2 2]", "(append [5 6] 6) -> [5 6 6]", "(append [] 7) -> [7]", "(append [5 8 1] 5) -> [5 8 1 5]", "(append [1 1 2 6] 1) -> [1 1 2 6 1]"], "time": 0.722507, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 6) -> [6]", "(append [] 2) -> [2]", "(append [6 6 3] 3) -> [6 6 3 3]", "(append [7 2 8] 7) -> [7 2 8 7]", "(append [] 6) -> [6]", "(append [] 9) -> [9]", "(append [4 8 0 4 9] 2) -> [4 8 0 4 9 2]", "(append [1 6 5] 3) -> [1 6 5 3]", "(append [2 1 6 3] 9) -> [2 1 6 3 9]", "(append [1] 7) -> [1 7]", "(append [8 1 8 2] 3) -> [8 1 8 2 3]", "(append [8 3 4 5] 1) -> [8 3 4 5 1]"], "time": 1.038968, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 7) -> [7]", "(append [2 9 0 3] 1) -> [2 9 0 3 1]", "(append [3 7 5] 2) -> [3 7 5 2]", "(append [5 2] 8) -> [5 2 8]", "(append [2 8 8 0 2] 0) -> [2 8 8 0 2 0]", "(append [5 8 9] 8) -> [5 8 9 8]", "(append [3 4 8 1] 1) -> [3 4 8 1 1]", "(append [7 4 7 8 1] 7) -> [7 4 7 8 1 7]", "(append [6 0 3 6 2] 9) -> [6 0 3 6 2 9]", "(append [0 2 0 9] 6) -> [0 2 0 9 6]", "(append [5 2] 9) -> [5 2 9]", "(append [5] 9) -> [5 9]"], "time": 3.963814, "name": "append", "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [7])) _) _)"}
{"examples": ["(append [] 1) -> [1]", "(append [4 3] 9) -> [4 3 9]", "(append [0 7] 6) -> [0 7 6]", "(append [8 1] 0) -> [8 1 0]", "(append [1 4 0 2 9] 1) -> [1 4 0 2 9 1]", "(append [9 5 1 5 4] 2) -> [9 5 1 5 4 2]", "(append [5 1 4 8 3] 3) -> [5 1 4 8 3 3]", "(append [6 8 2] 2) -> [6 8 2 2]", "(append [] 5) -> [5]", "(append [8 2 0 5 9] 3) -> [8 2 0 5 9 3]", "(append [9] 2) -> [9 2]", "(append [1 0 8] 3) -> [1 0 8 3]"], "time": 0.693196, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 6) -> [6]", "(append [1 7] 4) -> [1 7 4]", "(append [0] 3) -> [0 3]", "(append [] 4) -> [4]", "(append [6 3 4 6 3] 0) -> [6 3 4 6 3 0]", "(append [] 9) -> [9]", "(append [3 4] 1) -> [3 4 1]", "(append [4 8 8 3] 6) -> [4 8 8 3 6]", "(append [5 9 9 9 8] 0) -> [5 9 9 9 8 0]", "(append [9 0 4] 8) -> [9 0 4 8]", "(append [2 9 5 4] 6) -> [2 9 5 4 6]", "(append [1] 0) -> [1 0]"], "time": 1.045586, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 4) -> [4]", "(append [7 0 0 0 2] 3) -> [7 0 0 0 2 3]", "(append [] 0) -> [0]", "(append [9 4 0 1 0] 6) -> [9 4 0 1 0 6]", "(append [6] 0) -> [6 0]", "(append [4 3 8] 2) -> [4 3 8 2]", "(append [2 9 9 7] 3) -> [2 9 9 7 3]", "(append [2 9 7] 5) -> [2 9 7 5]", "(append [4] 9) -> [4 9]", "(append [4 4 1] 2) -> [4 4 1 2]", "(append [5 8 4 4 3] 5) -> [5 8 4 4 3 5]", "(append [6 6] 6) -> [6 6 6]"], "time": 1.02977, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 2) -> [2]", "(append [1 9 9 3 4] 9) -> [1 9 9 3 4 9]", "(append [] 3) -> [3]", "(append [4 9] 2) -> [4 9 2]", "(append [7 8 5 2] 9) -> [7 8 5 2 9]", "(append [] 6) -> [6]", "(append [2 9] 0) -> [2 9 0]", "(append [] 3) -> [3]", "(append [3 0 1] 1) -> [3 0 1 1]", "(append [] 0) -> [0]", "(append [6 3 9 0 1] 1) -> [6 3 9 0 1 1]", "(append [1 8 7 2 2] 2) -> [1 8 7 2 2 2]"], "time": 0.814257, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 6) -> [6]", "(append [] 3) -> [3]", "(append [4] 2) -> [4 2]", "(append [1 9 9] 4) -> [1 9 9 4]", "(append [1 3 9 5] 1) -> [1 3 9 5 1]", "(append [0 9 0] 1) -> [0 9 0 1]", "(append [4 0 2 2] 5) -> [4 0 2 2 5]", "(append [2] 9) -> [2 9]", "(append [3 2 1] 3) -> [3 2 1 3]", "(append [9 9 1 8 2] 3) -> [9 9 1 8 2 3]", "(append [3 4] 0) -> [3 4 0]", "(append [] 4) -> [4]"], "time": 0.818916, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 2) -> [2]", "(append [] 4) -> [4]", "(append [3] 2) -> [3 2]", "(append [7 0] 9) -> [7 0 9]", "(append [4 0 5 3 3] 8) -> [4 0 5 3 3 8]", "(append [7] 1) -> [7 1]", "(append [8 1 7 0] 6) -> [8 1 7 0 6]", "(append [5 6 1 1 3] 6) -> [5 6 1 1 3 6]", "(append [5 5 0] 3) -> [5 5 0 3]", "(append [4 5 4 3] 8) -> [4 5 4 3 8]", "(append [4 8 0 2 6] 7) -> [4 8 0 2 6 7]", "(append [7 4 4] 6) -> [7 4 4 6]"], "time": 1.029342, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 6) -> [6]", "(append [8 3] 7) -> [8 3 7]", "(append [9 4 8 0 9] 8) -> [9 4 8 0 9 8]", "(append [] 2) -> [2]", "(append [7 8 7 4 0] 1) -> [7 8 7 4 0 1]", "(append [0 6 3 7] 5) -> [0 6 3 7 5]", "(append [5] 2) -> [5 2]", "(append [1] 6) -> [1 6]", "(append [3] 3) -> [3 3]", "(append [] 2) -> [2]", "(append [1 2 4 6 5] 5) -> [1 2 4 6 5 5]", "(append [] 1) -> [1]"], "time": 0.837744, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 5) -> [5]", "(append [] 8) -> [8]", "(append [1 0] 4) -> [1 0 4]", "(append [1] 9) -> [1 9]", "(append [0 0 7 5 7] 4) -> [0 0 7 5 7 4]", "(append [8] 4) -> [8 4]", "(append [4 8] 9) -> [4 8 9]", "(append [3 3] 7) -> [3 3 7]", "(append [8 5] 4) -> [8 5 4]", "(append [7] 8) -> [7 8]", "(append [3 6 5 0 5] 3) -> [3 6 5 0 5 3]", "(append [] 2) -> [2]"], "time": 0.754459, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 1) -> [1]", "(append [8] 0) -> [8 0]", "(append [4 5 2 5 2] 6) -> [4 5 2 5 2 6]", "(append [6 4 8 1] 3) -> [6 4 8 1 3]", "(append [] 7) -> [7]", "(append [5 4 7 6] 5) -> [5 4 7 6 5]", "(append [5 7] 7) -> [5 7 7]", "(append [9 0 5 2] 5) -> [9 0 5 2 5]", "(append [0 9] 2) -> [0 9 2]", "(append [4] 7) -> [4 7]", "(append [2] 0) -> [2 0]", "(append [4 2 9 3 3] 7) -> [4 2 9 3 3 7]"], "time": 0.995065, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 6) -> [6]", "(append [9 1 1 0] 0) -> [9 1 1 0 0]", "(append [7 0 7 3] 4) -> [7 0 7 3 4]", "(append [8] 2) -> [8 2]", "(append [7 2 3 7 8] 8) -> [7 2 3 7 8 8]", "(append [8 0 5 3 6] 0) -> [8 0 5 3 6 0]", "(append [] 4) -> [4]", "(append [9 2 4 3] 8) -> [9 2 4 3 8]", "(append [2] 4) -> [2 4]", "(append [2 3] 2) -> [2 3 2]", "(append [0 7 8 9 1] 3) -> [0 7 8 9 1 3]", "(append [2 1 6 9 8] 9) -> [2 1 6 9 8 9]"], "time": 0.818634, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 3) -> [3]", "(append [] 9) -> [9]", "(append [5 1 9] 9) -> [5 1 9 9]", "(append [1 9 2 3 8] 2) -> [1 9 2 3 8 2]", "(append [2 0 5] 9) -> [2 0 5 9]", "(append [] 6) -> [6]", "(append [9 4 7 4] 2) -> [9 4 7 4 2]", "(append [1 5 0 4] 3) -> [1 5 0 4 3]", "(append [4 3 2 0 4] 8) -> [4 3 2 0 4 8]", "(append [5 7 3 1] 3) -> [5 7 3 1 3]", "(append [7 0] 5) -> [7 0 5]", "(append [6 2 0 7 8] 4) -> [6 2 0 7 8 4]"], "time": 1.083114, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 5) -> [5]", "(append [7] 1) -> [7 1]", "(append [4 5 2] 1) -> [4 5 2 1]", "(append [9 7 3] 6) -> [9 7 3 6]", "(append [3 4 3 0 6] 8) -> [3 4 3 0 6 8]", "(append [2 8] 4) -> [2 8 4]", "(append [7 8 2 3] 5) -> [7 8 2 3 5]", "(append [1 6 3 9] 2) -> [1 6 3 9 2]", "(append [] 7) -> [7]", "(append [4 9 7] 1) -> [4 9 7 1]", "(append [5 7 4] 3) -> [5 7 4 3]", "(append [8 3 2 9 5] 1) -> [8 3 2 9 5 1]"], "time": 1.018965, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 4) -> [4]", "(append [9 3] 5) -> [9 3 5]", "(append [5 6 4 6 4] 8) -> [5 6 4 6 4 8]", "(append [0 2 3 7] 4) -> [0 2 3 7 4]", "(append [3 7 3 2 1] 5) -> [3 7 3 2 1 5]", "(append [3 4 6] 4) -> [3 4 6 4]", "(append [1 2 8 5] 9) -> [1 2 8 5 9]", "(append [8 2 5] 8) -> [8 2 5 8]", "(append [6] 1) -> [6 1]", "(append [7] 8) -> [7 8]", "(append [8 8 7 4 4] 3) -> [8 8 7 4 4 3]", "(append [9] 2) -> [9 2]"], "time": 5.154388, "name": "append", "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [4])) _) _)"}
{"examples": ["(append [] 6) -> [6]", "(append [8 8] 1) -> [8 8 1]", "(append [] 4) -> [4]", "(append [4 6 7] 8) -> [4 6 7 8]", "(append [1 3 1 4 9] 6) -> [1 3 1 4 9 6]", "(append [4 7 0 0] 8) -> [4 7 0 0 8]", "(append [4 7 9] 5) -> [4 7 9 5]", "(append [6 4] 3) -> [6 4 3]", "(append [2 6 6 1 4] 0) -> [2 6 6 1 4 0]", "(append [4 6 2 3 2] 0) -> [4 6 2 3 2 0]", "(append [8 2] 9) -> [8 2 9]", "(append [4 1 1 8 5] 8) -> [4 1 1 8 5 8]"], "time": 0.810667, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 5) -> [5]", "(append [6] 3) -> [6 3]", "(append [0 2 7] 1) -> [0 2 7 1]", "(append [9] 7) -> [9 7]", "(append [4] 1) -> [4 1]", "(append [7 4 3] 5) -> [7 4 3 5]", "(append [7 7 6 1 7] 6) -> [7 7 6 1 7 6]", "(append [9 5 5] 8) -> [9 5 5 8]", "(append [] 9) -> [9]", "(append [2 8] 1) -> [2 8 1]", "(append [7 3] 1) -> [7 3 1]", "(append [6 6 5 7 1] 7) -> [6 6 5 7 1 7]"], "time": 0.858682, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 0) -> [0]", "(append [8 1] 3) -> [8 1 3]", "(append [7 2 3 3 3] 4) -> [7 2 3 3 3 4]", "(append [2 3] 0) -> [2 3 0]", "(append [7 9 9 2] 6) -> [7 9 9 2 6]", "(append [9 3 9 1] 3) -> [9 3 9 1 3]", "(append [7 8 7 5 1] 4) -> [7 8 7 5 1 4]", "(append [3 1 3 1] 3) -> [3 1 3 1 3]", "(append [] 6) -> [6]", "(append [] 1) -> [1]", "(append [] 3) -> [3]", "(append [2] 3) -> [2 3]"], "time": 0.95333, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 8) -> [8]", "(append [6 3] 7) -> [6 3 7]", "(append [5 5 9 2 6] 1) -> [5 5 9 2 6 1]", "(append [9 4 8 2 1] 1) -> [9 4 8 2 1 1]", "(append [] 5) -> [5]", "(append [4 3] 8) -> [4 3 8]", "(append [0 6 2] 0) -> [0 6 2 0]", "(append [9 4 7 7 9] 4) -> [9 4 7 7 9 4]", "(append [5] 3) -> [5 3]", "(append [1 7] 4) -> [1 7 4]", "(append [] 9) -> [9]", "(append [8 1 3] 3) -> [8 1 3 3]"], "time": 0.931626, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 2) -> [2]", "(append [] 0) -> [0]", "(append [7 8 5 1] 7) -> [7 8 5 1 7]", "(append [1 1 6] 6) -> [1 1 6 6]", "(append [3 4 0 1 4] 2) -> [3 4 0 1 4 2]", "(append [3 9 8 2 0] 2) -> [3 9 8 2 0 2]", "(append [9 6] 6) -> [9 6 6]", "(append [2] 2) -> [2 2]", "(append [1 5 1 5 7] 4) -> [1 5 1 5 7 4]", "(append [3 1 5] 9) -> [3 1 5 9]", "(append [] 8) -> [8]", "(append [5 4 4 6 9] 8) -> [5 4 4 6 9 8]"], "time": 0.904337, "name": "append", "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"examples": ["(append [] 8) -> [8]", "(append [1] 8) -> [1 8]", "(append [4] 8) -> [4 8]", "(append [3] 2) -> [3 2]", "(append [4] 0) -> [4 0]", "(append [3 8] 4) -> [3 8 4]", "(append [6 3 2 8 8] 0) -> [6 3 2 8 8 0]", "(append [] 8) -> [8]", "(append [0 8 8 6 5] 3) -> [0 8 8 6 5 3]", "(append [3 4 0 5 4] 0) -> [3 4 0 5 4 0]", "(append [8 8] 2) -> [8 8 2]", "(append [7 0 8] 6) -> [7 0 8 6]"], "time": 4.012474, "name": "append", "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [8])) _) _)"}
{"examples": ["(append [] 8) -> [8]", "(append [4 5 6 2 2] 0) -> [4 5 6 2 2 0]", "(append [2 2] 8) -> [2 2 8]", "(append [3 6] 5) -> [3 6 5]", "(append [4 8 4 7 7] 8) -> [4 8 4 7 7 8]", "(append [1] 3) -> [1 3]", "(append [2 1 3 1] 1) -> [2 1 3 1 1]", "(append [5 1 7 5] 7) -> [5 1 7 5 7]", "(append [8] 3) -> [8 3]", "(append [2] 4) -> [2 4]", "(append [7 2 0 0 3] 6) -> [7 2 0 0 3 6]", "(append [7 7] 8) -> [7 7 8]"], "time": 4.346696, "name": "append", "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [8])) _) _)"}
{"examples": ["(append [] 1) -> [1]", "(append [2 7] 7) -> [2 7 7]", "(append [9 0 3 6 5] 9) -> [9 0 3 6 5 9]", "(append [7 3] 5) -> [7 3 5]", "(append [2 8 4] 1) -> [2 8 4 1]", "(append [2 9] 8) -> [2 9 8]", "(append [6 9 4] 1) -> [6 9 4 1]", "(append [3 6] 8) -> [3 6 8]", "(append [0 1 1 1] 5) -> [0 1 1 1 5]", "(append [9 8 6] 9) -> [9 8 6 9]", "(append [9 7 9 4] 0) -> [9 7 9 4 0]", "(append [8 7 4 4 1] 3) -> [8 7 4 4 1 3]"], "time": 10.280033, "name": "append", "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [1])) _) _)"}
{"examples": ["(append [] 1) -> [1]", "(append [5 9 5 8] 1) -> [5 9 5 8 1]", "(append [0 1 0 2 1] 3) -> [0 1 0 2 1 3]", "(append [7 7] 1) -> [7 7 1]", "(append [5 6 4 6 3] 2) -> [5 6 4 6 3 2]", "(append [2 3 3 8 1] 7) -> [2 3 3 8 1 7]", "(append [1 9 3 3] 0) -> [1 9 3 3 0]", "(append [2 6 9 2 9] 3) -> [2 6 9 2 9 3]", "(append [4 8 2] 9) -> [4 8 2 9]", "(append [9 4 3] 2) -> [9 4 3 2]", "(append [3] 2) -> [3 2]", "(append [1 0 9 7 3] 1) -> [1 0 9 7 3 1]"], "time": 2.915573, "name": "append", "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [1])) _) _)"}
{"examples": ["(append [] 9) -> [9]", "(append [8 5 2] 9) -> [8 5 2 9]", "(append [8 6 2 8] 2) -> [8 6 2 8 2]", "(append [4 9 0 0] 4) -> [4 9 0 0 4]", "(append [2] 9) -> [2 9]", "(append [7 0 2 1 9] 4) -> [7 0 2 1 9 4]", "(append [2 3 2] 8) -> [2 3 2 8]", "(append [0 9] 4) -> [0 9 4]", "(append [7 3 5] 7) -> [7 3 5 7]", "(append [5 7 2 3] 2) -> [5 7 2 3 2]", "(append [7 4 5 4 2] 7) -> [7 4 5 4 2 7]", "(append [5] 9) -> [5 9]"], "time": 3.235562, "name": "append", "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [9])) _) _)"}
{"examples": ["(append [] 6) -> [6]", "(append [9 2 5] 6) -> [9 2 5 6]", "(append [0 1 9 1 2] 3) -> [0 1 9 1 2 3]", "(append [0 6 0] 4) -> [0 6 0 4]", "(append [7 5 3 8 4] 3) -> [7 5 3 8 4 3]", "(append [0 6] 3) -> [0 6 3]", "(append [3 2 9 8 2] 3) -> [3 2 9 8 2 3]", "(append [2 2 8 9] 4) -> [2 2 8 9 4]", "(append [6 2] 5) -> [6 2 5]", "(append [4] 5) -> [4 5]", "(append [8 2] 6) -> [8 2 6]", "(append [1 6 6] 6) -> [1 6 6 6]"], "time": 2.496671, "name": "append", "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [6])) _) _)"}
{"examples": ["(append [] 9) -> [9]", "(append [7 4 0] 2) -> [7 4 0 2]", "(append [3 6 1] 2) -> [3 6 1 2]", "(append [4] 2) -> [4 2]", "(append [6 2 7 3 3] 8) -> [6 2 7 3 3 8]", "(append [5] 5) -> [5 5]", "(append [0 1] 3) -> [0 1 3]", "(append [6 2 0 2 8] 3) -> [6 2 0 2 8 3]", "(append [5 4] 7) -> [5 4 7]", "(append [2 3 0] 9) -> [2 3 0 9]", "(append [0 4 5 1] 1) -> [0 4 5 1 1]", "(append [3] 0) -> [3 0]"], "time": 2.422425, "name": "append", "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [9])) _) _)"}
{"examples": ["(append [] 3) -> [3]", "(append [5 9 2] 1) -> [5 9 2 1]", "(append [6 3 7 2 1] 8) -> [6 3 7 2 1 8]", "(append [7 6 0 5] 5) -> [7 6 0 5 5]", "(append [] 3) -> [3]", "(append [4] 7) -> [4 7]", "(append [6 1 0 1] 9) -> [6 1 0 1 9]", "(append [3 8 2 9] 0) -> [3 8 2 9 0]", "(append [3 3 4] 9) -> [3 3 4 9]", "(append [] 3) -> [3]", "(append [7 6 5 4 1] 7) -> [7 6 5 4 1 7]", "(append [4 2 9] 8) -> [4 2 9 8]"], "time": 2.569113, "name": "append", "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [3])) _) _)"}
{"examples": ["(append [] 3) -> [3]", "(append [1 6 2 5] 3) -> [1 6 2 5 3]", "(append [9] 6) -> [9 6]", "(append [2 1 2 4] 6) -> [2 1 2 4 6]", "(append [7 6 9 5 2] 3) -> [7 6 9 5 2 3]", "(append [9 2] 2) -> [9 2 2]", "(append [6 7 9 2] 7) -> [6 7 9 2 7]", "(append [5 7 7 9] 9) -> [5 7 7 9 9]", "(append [0] 4) -> [0 4]", "(append [9 3] 5) -> [9 3 5]", "(append [8 7] 8) -> [8 7 8]", "(append [2 1 6 9] 8) -> [2 1 6 9 8]"], "time": 3.012664, "name": "append", "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [3])) _) _)"}
{"examples": ["(append [] 0) -> [0]", "(append [0 5 8 9] 8) -> [0 5 8 9 8]", "(append [2 0 6] 8) -> [2 0 6 8]", "(append [2 7 5 0] 2) -> [2 7 5 0 2]", "(append [7 5 5] 6) -> [7 5 5 6]", "(append [9 4] 5) -> [9 4 5]", "(append [3] 1) -> [3 1]", "(append [6] 6) -> [6 6]", "(append [2 2 3 2] 6) -> [2 2 3 2 6]", "(append [0 1 0] 6) -> [0 1 0 6]", "(append [8] 7) -> [8 7]", "(append [4] 7) -> [4 7]"], "time": 2.658294, "name": "append", "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [0])) _) _)"}
