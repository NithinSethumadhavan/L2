{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {1 {6}}) -> [1 6]", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {3}) -> [3]"], "time": 0.176892}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {9 {3} {2}}) -> [9 3 2]", "(flatten {4 {5}}) -> [4 5]", "(flatten {0 {0} {1}}) -> [0 0 1]", "(flatten {}) -> []"], "time": 0.175302}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {9 {3 {1} {9}} {6 {2}}}) -> [9 3 1 9 6 2]", "(flatten {6}) -> [6]", "(flatten {6 {6}}) -> [6 6]"], "time": 0.1575}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {8 {0 {9 {5} {0}} {0 {2}}}}) -> [8 0 9 5 0 0 2]", "(flatten {0}) -> [0]", "(flatten {}) -> []", "(flatten {8}) -> [8]"], "time": 0.123436}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {2 {1 {7} {8}}}) -> [2 1 7 8]", "(flatten {}) -> []", "(flatten {7 {1 {3}}}) -> [7 1 3]"], "time": 0.138462}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3 {7 {0 {5}} {7}}}) -> [3 7 0 5 7]", "(flatten {4}) -> [4]", "(flatten {5}) -> [5]", "(flatten {0 {6} {4}}) -> [0 6 4]"], "time": 0.163321}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {6 {9 {4}}}) -> [6 9 4]", "(flatten {5}) -> [5]", "(flatten {8 {9}}) -> [8 9]", "(flatten {1 {1 {2} {9}}}) -> [1 1 2 9]"], "time": 0.160399}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {6 {9}}) -> [6 9]", "(flatten {2 {2} {4}}) -> [2 2 4]", "(flatten {0 {9}}) -> [0 9]", "(flatten {1}) -> [1]"], "time": 0.160645}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {9 {2 {3} {9}} {3 {9} {8}}}) -> [9 2 3 9 3 9 8]", "(flatten {}) -> []", "(flatten {8}) -> [8]", "(flatten {4}) -> [4]"], "time": 0.16592}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {6 {7 {3}}}) -> [6 7 3]", "(flatten {9 {6 {1 {8}} {1 {4} {1}}} {9 {5 {4}}}}) -> [9 6 1 8 1 4 1 9 5 4]", "(flatten {4 {8}}) -> [4 8]", "(flatten {2 {4}}) -> [2 4]"], "time": 0.146641}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {1 {2 {4}}}) -> [1 2 4]", "(flatten {6 {8} {1}}) -> [6 8 1]", "(flatten {8 {2 {5 {0} {1}} {1}}}) -> [8 2 5 0 1 1]", "(flatten {5 {4}}) -> [5 4]"], "time": 0.179926}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7 {5} {9}}) -> [7 5 9]", "(flatten {2 {3 {5} {9}} {5 {0} {1}}}) -> [2 3 5 9 5 0 1]", "(flatten {6 {5} {6}}) -> [6 5 6]", "(flatten {1 {0 {7} {8}}}) -> [1 0 7 8]"], "time": 0.121411}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {8 {2 {4} {1}} {3}}) -> [8 2 4 1 3]", "(flatten {}) -> []", "(flatten {5}) -> [5]"], "time": 0.11356}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3 {0 {3}}}) -> [3 0 3]", "(flatten {1 {2 {1 {2} {5}} {2}}}) -> [1 2 1 2 5 2]", "(flatten {}) -> []", "(flatten {}) -> []"], "time": 0.138865}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {9 {4 {9} {7}} {8}}) -> [9 4 9 7 8]", "(flatten {1}) -> [1]", "(flatten {5 {2 {8}} {7 {5 {5} {8}}}}) -> [5 2 8 7 5 5 8]"], "time": 0.158528}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3 {8 {6} {4}}}) -> [3 8 6 4]", "(flatten {5 {3}}) -> [5 3]", "(flatten {}) -> []", "(flatten {7}) -> [7]"], "time": 0.125202}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {1 {9}}) -> [1 9]", "(flatten {}) -> []", "(flatten {2 {5} {0 {4}}}) -> [2 5 0 4]", "(flatten {}) -> []"], "time": 0.119666}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7}) -> [7]", "(flatten {8 {8 {2}}}) -> [8 8 2]", "(flatten {6 {3}}) -> [6 3]", "(flatten {8}) -> [8]"], "time": 0.14179}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7}) -> [7]", "(flatten {8}) -> [8]", "(flatten {4}) -> [4]", "(flatten {}) -> []"], "time": 0.11197}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3}) -> [3]", "(flatten {4}) -> [4]", "(flatten {}) -> []", "(flatten {4 {9} {1}}) -> [4 9 1]"], "time": 0.147709}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {2 {3} {2}}) -> [2 3 2]", "(flatten {7 {1 {0 {0} {0}} {5 {4} {2}}} {6 {6} {0 {5} {7}}}}) -> [7 1 0 0 0 5 4 2 6 6 0 5 7]", "(flatten {0}) -> [0]", "(flatten {2}) -> [2]"], "time": 0.149532}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {3 {0} {9}}) -> [3 0 9]", "(flatten {4}) -> [4]", "(flatten {}) -> []"], "time": 0.147787}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {5 {6} {5}}) -> [5 6 5]", "(flatten {9 {3 {0} {5}} {5}}) -> [9 3 0 5 5]", "(flatten {}) -> []", "(flatten {8 {6}}) -> [8 6]"], "time": 0.150933}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0 {4 {6}} {1 {5}}}) -> [0 4 6 1 5]", "(flatten {2}) -> [2]", "(flatten {4}) -> [4]", "(flatten {3 {6 {8 {7} {1}}} {0 {4 {8} {1}}}}) -> [3 6 8 7 1 0 4 8 1]"], "time": 0.150845}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3 {7} {2}}) -> [3 7 2]", "(flatten {1}) -> [1]", "(flatten {4}) -> [4]", "(flatten {}) -> []"], "time": 0.162259}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {1 {5 {8}} {5 {5}}}) -> [1 5 8 5 5]", "(flatten {5}) -> [5]", "(flatten {6}) -> [6]"], "time": 0.161094}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7 {6}}) -> [7 6]", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []"], "time": 0.136542}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3}) -> [3]", "(flatten {0 {8} {1}}) -> [0 8 1]", "(flatten {8 {5 {3 {6}}} {4 {1}}}) -> [8 5 3 6 4 1]", "(flatten {}) -> []"], "time": 0.150003}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {8 {3 {0 {0} {7}}} {9 {7}}}) -> [8 3 0 0 7 9 7]", "(flatten {0 {4 {0} {5}} {8}}) -> [0 4 0 5 8]", "(flatten {2 {9} {4 {4}}}) -> [2 9 4 4]", "(flatten {}) -> []"], "time": 0.155526}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0 {1}}) -> [0 1]", "(flatten {0 {5 {2} {0}} {0}}) -> [0 5 2 0 0]", "(flatten {0 {2}}) -> [0 2]", "(flatten {4 {1} {9}}) -> [4 1 9]"], "time": 0.142657}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3 {2 {9 {8} {3}} {8}}}) -> [3 2 9 8 3 8]", "(flatten {0 {6} {9}}) -> [0 6 9]", "(flatten {4 {1 {5} {0}}}) -> [4 1 5 0]", "(flatten {6 {9 {8 {1} {9}}}}) -> [6 9 8 1 9]"], "time": 0.156368}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {4}) -> [4]", "(flatten {5}) -> [5]", "(flatten {1 {7 {7 {9} {7}} {8}} {5 {4}}}) -> [1 7 7 9 7 8 5 4]"], "time": 0.152823}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3}) -> [3]", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {8 {2} {5}}) -> [8 2 5]"], "time": 0.136305}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {8}) -> [8]", "(flatten {2}) -> [2]", "(flatten {3 {9 {5}}}) -> [3 9 5]", "(flatten {}) -> []"], "time": 0.098724}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3 {4 {8 {7}}}}) -> [3 4 8 7]", "(flatten {}) -> []", "(flatten {8 {8} {8}}) -> [8 8 8]", "(flatten {4 {7} {4 {6 {3}}}}) -> [4 7 4 6 3]"], "time": 0.118134}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {6}) -> [6]", "(flatten {}) -> []", "(flatten {4 {1} {4}}) -> [4 1 4]", "(flatten {}) -> []"], "time": 0.129318}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7}) -> [7]", "(flatten {0 {3 {1}} {8 {5}}}) -> [0 3 1 8 5]", "(flatten {4}) -> [4]", "(flatten {6}) -> [6]"], "time": 0.115279}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {9 {1} {6 {8} {0}}}) -> [9 1 6 8 0]", "(flatten {0 {3} {8}}) -> [0 3 8]"], "time": 0.141728}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {9 {7}}) -> [9 7]", "(flatten {6 {2 {5} {7}} {4 {2}}}) -> [6 2 5 7 4 2]", "(flatten {}) -> []"], "time": 0.151927}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3 {1 {3 {8}}}}) -> [3 1 3 8]", "(flatten {2 {5}}) -> [2 5]", "(flatten {9 {9 {3 {8}} {4 {9} {9}}} {5}}) -> [9 9 3 8 4 9 9 5]", "(flatten {5}) -> [5]"], "time": 0.110853}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {9 {6 {9}} {8}}) -> [9 6 9 8]", "(flatten {4}) -> [4]", "(flatten {}) -> []"], "time": 0.146156}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {3}) -> [3]", "(flatten {5 {0} {7 {1} {9}}}) -> [5 0 7 1 9]", "(flatten {}) -> []"], "time": 0.144168}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {6}) -> [6]", "(flatten {8}) -> [8]"], "time": 0.135201}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {6}) -> [6]"], "time": 0.133063}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {4}) -> [4]", "(flatten {1 {0} {7 {1} {3}}}) -> [1 0 7 1 3]", "(flatten {0 {8 {3} {1}} {6 {1} {1}}}) -> [0 8 3 1 6 1 1]", "(flatten {}) -> []"], "time": 0.142831}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {5 {2 {3 {4}} {3 {9} {9}}}}) -> [5 2 3 4 3 9 9]", "(flatten {}) -> []", "(flatten {6}) -> [6]"], "time": 0.131864}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {9 {9}}) -> [9 9]", "(flatten {8 {7}}) -> [8 7]", "(flatten {0 {8} {7 {3 {3}}}}) -> [0 8 7 3 3]", "(flatten {9 {6}}) -> [9 6]"], "time": 0.140826}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {4}) -> [4]", "(flatten {6 {8} {2}}) -> [6 8 2]", "(flatten {2 {3 {8 {8} {5}} {6}} {7}}) -> [2 3 8 8 5 6 7]"], "time": 0.136895}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {1 {0 {2}}}) -> [1 0 2]", "(flatten {7 {7}}) -> [7 7]", "(flatten {1 {1 {1 {4}}} {9 {3 {4} {1}} {9 {3} {7}}}}) -> [1 1 1 4 9 3 4 1 9 3 7]"], "time": 0.124457}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {2 {0 {9} {4}}}) -> [2 0 9 4]", "(flatten {0}) -> [0]", "(flatten {4 {9} {5 {7} {5}}}) -> [4 9 5 7 5]"], "time": 0.093395}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {8}) -> [8]", "(flatten {4}) -> [4]", "(flatten {7 {7}}) -> [7 7]"], "time": 0.152637}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {1 {9} {1}}) -> [1 9 1]", "(flatten {3 {3 {5}} {6}}) -> [3 3 5 6]", "(flatten {9 {3}}) -> [9 3]", "(flatten {2 {3 {6 {8} {8}} {5 {2}}} {6 {0}}}) -> [2 3 6 8 8 5 2 6 0]"], "time": 0.132425}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0}) -> [0]", "(flatten {9 {3} {3}}) -> [9 3 3]", "(flatten {8 {2}}) -> [8 2]", "(flatten {2 {6 {1} {3}} {1}}) -> [2 6 1 3 1]"], "time": 0.161246}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {2 {7 {7} {3 {1}}}}) -> [2 7 7 3 1]", "(flatten {}) -> []", "(flatten {0}) -> [0]"], "time": 0.12551}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {9 {2} {2 {0 {5}} {7 {9} {8}}}}) -> [9 2 2 0 5 7 9 8]", "(flatten {}) -> []", "(flatten {3 {9}}) -> [3 9]", "(flatten {7 {7} {7 {4 {7}} {9}}}) -> [7 7 7 4 7 9]"], "time": 0.141095}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0 {5 {6}}}) -> [0 5 6]", "(flatten {3 {5 {5 {5}}} {1 {4}}}) -> [3 5 5 5 1 4]", "(flatten {}) -> []", "(flatten {8 {4}}) -> [8 4]"], "time": 0.120329}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {4 {4} {9}}) -> [4 4 9]", "(flatten {4 {5 {6 {8} {3}}}}) -> [4 5 6 8 3]", "(flatten {8}) -> [8]", "(flatten {6 {1 {5}}}) -> [6 1 5]"], "time": 0.154945}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0 {3 {1 {5} {6}} {7 {1}}}}) -> [0 3 1 5 6 7 1]", "(flatten {5 {4} {4}}) -> [5 4 4]", "(flatten {9 {6} {2}}) -> [9 6 2]", "(flatten {1 {6}}) -> [1 6]"], "time": 0.108363}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {6 {6 {0 {7} {6}} {6 {2}}} {2}}) -> [6 6 0 7 6 6 2 2]", "(flatten {6 {2 {7} {5}} {8 {7}}}) -> [6 2 7 5 8 7]", "(flatten {6 {0} {7}}) -> [6 0 7]", "(flatten {}) -> []"], "time": 0.137202}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {1}) -> [1]", "(flatten {}) -> []", "(flatten {4 {2}}) -> [4 2]", "(flatten {0 {2 {8}}}) -> [0 2 8]"], "time": 0.150374}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {8}) -> [8]", "(flatten {5}) -> [5]", "(flatten {4}) -> [4]", "(flatten {1 {5 {6 {5}} {2}} {6 {9 {0} {6}}}}) -> [1 5 6 5 2 6 9 0 6]"], "time": 0.146989}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {8}) -> [8]", "(flatten {9 {0}}) -> [9 0]", "(flatten {}) -> []"], "time": 0.136386}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {2}) -> [2]", "(flatten {2 {5 {1 {1} {8}}} {9 {9 {8}} {2}}}) -> [2 5 1 1 8 9 9 8 2]", "(flatten {2 {1 {6} {1}}}) -> [2 1 6 1]"], "time": 0.145727}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0 {2} {5}}) -> [0 2 5]", "(flatten {1 {5}}) -> [1 5]", "(flatten {6 {5}}) -> [6 5]", "(flatten {8}) -> [8]"], "time": 0.144831}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7 {1}}) -> [7 1]", "(flatten {5 {1} {2}}) -> [5 1 2]", "(flatten {2 {5 {4}} {0 {3} {7}}}) -> [2 5 4 0 3 7]", "(flatten {9 {2 {3 {6} {3}}} {9 {0 {8}}}}) -> [9 2 3 6 3 9 0 8]"], "time": 0.141083}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {0}) -> [0]", "(flatten {6 {2 {3 {1}}} {9 {2 {5} {9}} {6 {5} {8}}}}) -> [6 2 3 1 9 2 5 9 6 5 8]", "(flatten {9 {1 {1}} {6}}) -> [9 1 1 6]"], "time": 0.132575}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {2}) -> [2]", "(flatten {6 {9}}) -> [6 9]", "(flatten {5 {4 {7} {2}}}) -> [5 4 7 2]"], "time": 0.09531}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3 {9} {9 {2} {2}}}) -> [3 9 9 2 2]", "(flatten {2 {6}}) -> [2 6]", "(flatten {9 {2} {9 {5} {4}}}) -> [9 2 9 5 4]", "(flatten {2 {0}}) -> [2 0]"], "time": 0.124471}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {8 {6} {7 {1} {8 {2}}}}) -> [8 6 7 1 8 2]", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {2}) -> [2]"], "time": 0.127795}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0 {2 {7}}}) -> [0 2 7]", "(flatten {3 {4} {3 {7 {1} {6}} {2 {1} {9}}}}) -> [3 4 3 7 1 6 2 1 9]", "(flatten {}) -> []", "(flatten {6 {8 {8} {9}}}) -> [6 8 8 9]"], "time": 0.137454}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {2 {6} {7}}) -> [2 6 7]", "(flatten {4 {5}}) -> [4 5]", "(flatten {6 {3 {5 {9} {8}}}}) -> [6 3 5 9 8]"], "time": 0.144499}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {1}) -> [1]", "(flatten {3 {3} {9}}) -> [3 3 9]", "(flatten {6}) -> [6]", "(flatten {}) -> []"], "time": 0.099463}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {8 {4}}) -> [8 4]", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {8 {5 {1 {5} {0}} {2 {2}}} {6}}) -> [8 5 1 5 0 2 2 6]"], "time": 0.142505}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0 {6 {0} {5}}}) -> [0 6 0 5]", "(flatten {0}) -> [0]", "(flatten {7 {5}}) -> [7 5]", "(flatten {6}) -> [6]"], "time": 0.139906}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {8 {1}}) -> [8 1]", "(flatten {1 {4 {7}} {2 {7}}}) -> [1 4 7 2 7]"], "time": 0.146691}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0 {1}}) -> [0 1]", "(flatten {0 {7} {0}}) -> [0 7 0]", "(flatten {}) -> []", "(flatten {}) -> []"], "time": 0.141689}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {9}) -> [9]", "(flatten {}) -> []", "(flatten {4}) -> [4]", "(flatten {4 {1} {6}}) -> [4 1 6]"], "time": 0.144089}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7 {2 {8 {7} {1}}} {0}}) -> [7 2 8 7 1 0]", "(flatten {0 {3 {5 {4} {1}}}}) -> [0 3 5 4 1]", "(flatten {2 {0 {7} {1}}}) -> [2 0 7 1]", "(flatten {9 {3}}) -> [9 3]"], "time": 0.13403}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {0 {4} {1}}) -> [0 4 1]", "(flatten {}) -> []", "(flatten {1 {7 {5 {8}}}}) -> [1 7 5 8]", "(flatten {7 {6 {3}}}) -> [7 6 3]"], "time": 0.142665}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {4 {2 {0} {6}}}) -> [4 2 0 6]", "(flatten {4 {1}}) -> [4 1]", "(flatten {3 {4} {4 {4}}}) -> [3 4 4 4]", "(flatten {2 {4} {7}}) -> [2 4 7]"], "time": 0.150345}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {3 {0}}) -> [3 0]", "(flatten {1 {4} {7}}) -> [1 4 7]"], "time": 0.11706}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {7}) -> [7]", "(flatten {9 {7} {2 {9 {0}} {6}}}) -> [9 7 2 9 0 6]", "(flatten {7 {2 {9}}}) -> [7 2 9]", "(flatten {}) -> []"], "time": 0.118244}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {6 {1 {6}} {1 {4} {7}}}) -> [6 1 6 1 4 7]", "(flatten {2}) -> [2]", "(flatten {3 {3 {5} {3}} {7 {0} {2}}}) -> [3 3 5 3 7 0 2]", "(flatten {}) -> []"], "time": 0.143218}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {7 {8} {9}}) -> [7 8 9]", "(flatten {5 {3 {9} {2}}}) -> [5 3 9 2]", "(flatten {}) -> []"], "time": 0.130356}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {8 {6 {5}} {4 {7} {0 {1} {1}}}}) -> [8 6 5 4 7 0 1 1]", "(flatten {6}) -> [6]", "(flatten {4 {0} {5}}) -> [4 0 5]"], "time": 0.13706}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {6 {5}}) -> [6 5]", "(flatten {4 {3} {4}}) -> [4 3 4]", "(flatten {3 {3} {0}}) -> [3 3 0]"], "time": 0.150338}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {1 {8}}) -> [1 8]", "(flatten {4 {7}}) -> [4 7]", "(flatten {}) -> []", "(flatten {}) -> []"], "time": 0.142047}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {6}) -> [6]", "(flatten {2 {3} {4 {7}}}) -> [2 3 4 7]"], "time": 0.12918}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {2}) -> [2]", "(flatten {1 {4 {8 {8} {3}}} {3 {5} {8}}}) -> [1 4 8 8 3 3 5 8]", "(flatten {3 {2 {7} {6}} {8}}) -> [3 2 7 6 8]", "(flatten {5 {2}}) -> [5 2]"], "time": 0.149768}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {1 {9 {9} {7 {1} {0}}}}) -> [1 9 9 7 1 0]", "(flatten {5 {4}}) -> [5 4]", "(flatten {3 {7}}) -> [3 7]"], "time": 0.138833}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {}) -> []", "(flatten {7}) -> [7]", "(flatten {6}) -> [6]"], "time": 0.139018}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {0 {1}}) -> [0 1]", "(flatten {}) -> []", "(flatten {4}) -> [4]"], "time": 0.145109}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {1 {6}}) -> [1 6]", "(flatten {2 {3 {1} {6}}}) -> [2 3 1 6]", "(flatten {3}) -> [3]"], "time": 0.154379}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {1 {1 {0 {2}} {2}} {6}}) -> [1 1 0 2 2 6]", "(flatten {8 {1 {1}}}) -> [8 1 1]", "(flatten {7}) -> [7]", "(flatten {3}) -> [3]"], "time": 0.153364}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {6}) -> [6]", "(flatten {}) -> []", "(flatten {9 {2 {6}}}) -> [9 2 6]"], "time": 0.131189}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {1 {8} {7}}) -> [1 8 7]", "(flatten {0 {8 {1} {9}} {2 {8}}}) -> [0 8 1 9 2 8]", "(flatten {1 {3 {6} {5}}}) -> [1 3 6 5]", "(flatten {1 {4} {3}}) -> [1 4 3]"], "time": 0.139899}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {5}) -> [5]", "(flatten {8 {4 {4 {9} {8}} {8}}}) -> [8 4 4 9 8 8]", "(flatten {}) -> []", "(flatten {4}) -> [4]"], "time": 0.078437}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {3 {2}}) -> [3 2]", "(flatten {2 {0 {7 {6} {5}}} {2 {3 {8}}}}) -> [2 0 7 6 5 2 3 8]", "(flatten {}) -> []", "(flatten {8}) -> [8]"], "time": 0.079164}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {5 {5 {1 {9} {4}}} {6 {3 {9}}}}) -> [5 5 1 9 4 6 3 9]", "(flatten {7 {5 {0}} {2 {6} {5}}}) -> [7 5 0 2 6 5]", "(flatten {}) -> []"], "time": 0.08297}
{"name": "flatten", "solution": "(let flatten (let a (lambda (b) (foldt b (lambda (d c) (cons c (join d))) [])) _) _)", "examples": ["(flatten {}) -> []", "(flatten {}) -> []", "(flatten {0}) -> [0]", "(flatten {2 {6 {0}}}) -> [2 6 0]", "(flatten {4 {9} {5 {2}}}) -> [4 9 5 2]"], "time": 0.079207}
