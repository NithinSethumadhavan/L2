{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.317647, "examples": ["(multlast [5]) -> [5]", "(multlast [2 6 7]) -> [7 7 7]", "(multlast [1 4 8 9]) -> [9 9 9 9]", "(multlast [0 7 7 4]) -> [4 4 4 4]", "(multlast [0 6 0 2]) -> [2 2 2 2]", "(multlast [4 2 5 0 4]) -> [4 4 4 4 4]", "(multlast [7]) -> [7]", "(multlast [2 6 2 4]) -> [4 4 4 4]", "(multlast [2]) -> [2]", "(multlast [3]) -> [3]", "(multlast [6 8 3 0 2]) -> [2 2 2 2 2]", "(multlast [3 8 5]) -> [5 5 5]", "(multlast [1 4 7]) -> [7 7 7]", "(multlast [0 9 4 6 5]) -> [5 5 5 5 5]", "(multlast [5 7 7 5 4]) -> [4 4 4 4 4]", "(multlast []) -> []", "(multlast [8 7 5]) -> [5 5 5]", "(multlast [6 7 2 0]) -> [0 0 0 0]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.300126, "examples": ["(multlast [2 0 0]) -> [0 0 0]", "(multlast [8 4]) -> [4 4]", "(multlast [4 7 5 0]) -> [0 0 0 0]", "(multlast [5 0 9 0 6]) -> [6 6 6 6 6]", "(multlast [1]) -> [1]", "(multlast []) -> []", "(multlast [6 1 7]) -> [7 7 7]", "(multlast [2 4 0 2]) -> [2 2 2 2]", "(multlast [5]) -> [5]", "(multlast [5 0 8 0]) -> [0 0 0 0]", "(multlast [5 5 1 1 4]) -> [4 4 4 4 4]", "(multlast [7 5 8 8]) -> [8 8 8 8]", "(multlast [0 4]) -> [4 4]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [4]) -> [4]", "(multlast [6 7]) -> [7 7]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.320292, "examples": ["(multlast [7]) -> [7]", "(multlast [0]) -> [0]", "(multlast []) -> []", "(multlast [0 7 7 4 5]) -> [5 5 5 5 5]", "(multlast [2 9 8]) -> [8 8 8]", "(multlast [6]) -> [6]", "(multlast [6 0 7 0]) -> [0 0 0 0]", "(multlast [8 3 0 4]) -> [4 4 4 4]", "(multlast []) -> []", "(multlast [7 1]) -> [1 1]", "(multlast [2 8 6]) -> [6 6 6]", "(multlast [7]) -> [7]", "(multlast [2 1 2 7]) -> [7 7 7 7]", "(multlast [6 3 9 3 5]) -> [5 5 5 5 5]", "(multlast []) -> []", "(multlast [9]) -> [9]", "(multlast [9]) -> [9]", "(multlast [8 1 4 3]) -> [3 3 3 3]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.328238, "examples": ["(multlast []) -> []", "(multlast [4 0 1 1 0]) -> [0 0 0 0 0]", "(multlast [8 8]) -> [8 8]", "(multlast [6 2 7 0 5]) -> [5 5 5 5 5]", "(multlast [5 5]) -> [5 5]", "(multlast [3 7 1]) -> [1 1 1]", "(multlast [4 8]) -> [8 8]", "(multlast [5 9]) -> [9 9]", "(multlast [1 5 3 8]) -> [8 8 8 8]", "(multlast [4]) -> [4]", "(multlast [3 2 8 7 7]) -> [7 7 7 7 7]", "(multlast []) -> []", "(multlast [8]) -> [8]", "(multlast [5 3 6 3]) -> [3 3 3 3]", "(multlast [5 8]) -> [8 8]", "(multlast [8 8]) -> [8 8]", "(multlast [3 9 3 4]) -> [4 4 4 4]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.3135, "examples": ["(multlast [2]) -> [2]", "(multlast [3 3]) -> [3 3]", "(multlast [1 8 7 1 3]) -> [3 3 3 3 3]", "(multlast [6 9 8 6 9]) -> [9 9 9 9 9]", "(multlast [2]) -> [2]", "(multlast [5 2 2]) -> [2 2 2]", "(multlast [6 6 4]) -> [4 4 4]", "(multlast [7 6 4]) -> [4 4 4]", "(multlast [1 1 2]) -> [2 2 2]", "(multlast [1 5]) -> [5 5]", "(multlast [3 8]) -> [8 8]", "(multlast [1 4]) -> [4 4]", "(multlast [6 1]) -> [1 1]", "(multlast [6 8 4 5]) -> [5 5 5 5]", "(multlast []) -> []", "(multlast [1]) -> [1]", "(multlast [0 4 7]) -> [7 7 7]", "(multlast [1]) -> [1]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.312002, "examples": ["(multlast [3]) -> [3]", "(multlast [6 5 4]) -> [4 4 4]", "(multlast [2 8]) -> [8 8]", "(multlast [4 2 2]) -> [2 2 2]", "(multlast [4 8 3]) -> [3 3 3]", "(multlast [5 5]) -> [5 5]", "(multlast [7 3]) -> [3 3]", "(multlast [9 7 9]) -> [9 9 9]", "(multlast [4 3]) -> [3 3]", "(multlast []) -> []", "(multlast [8 2]) -> [2 2]", "(multlast [6]) -> [6]", "(multlast [6 3 8 8 7]) -> [7 7 7 7 7]", "(multlast [0 1 4 4]) -> [4 4 4 4]", "(multlast [5 0]) -> [0 0]", "(multlast [3 1 2 7 3]) -> [3 3 3 3 3]", "(multlast [4 8]) -> [8 8]", "(multlast [6 0 2]) -> [2 2 2]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.333272, "examples": ["(multlast [1]) -> [1]", "(multlast [2 5]) -> [5 5]", "(multlast []) -> []", "(multlast [0 9 2]) -> [2 2 2]", "(multlast [2 4 7 1 3]) -> [3 3 3 3 3]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [1 9 9 7]) -> [7 7 7 7]", "(multlast [8]) -> [8]", "(multlast [0 7]) -> [7 7]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [7 3 2 9 4]) -> [4 4 4 4 4]", "(multlast [0 9]) -> [9 9]", "(multlast [9]) -> [9]", "(multlast [0 3 6 3]) -> [3 3 3 3]", "(multlast [8 6 0]) -> [0 0 0]", "(multlast [6 4 2 9]) -> [9 9 9 9]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.342737, "examples": ["(multlast []) -> []", "(multlast [5 0 2 0 1]) -> [1 1 1 1 1]", "(multlast [7 2]) -> [2 2]", "(multlast [0]) -> [0]", "(multlast [4 7]) -> [7 7]", "(multlast [2 2]) -> [2 2]", "(multlast [2 5]) -> [5 5]", "(multlast [8 9 1 2]) -> [2 2 2 2]", "(multlast [9]) -> [9]", "(multlast [0]) -> [0]", "(multlast [7 3 2]) -> [2 2 2]", "(multlast [6 4 4 2 8]) -> [8 8 8 8 8]", "(multlast [3 6 5 4 5]) -> [5 5 5 5 5]", "(multlast [7 9 5 1]) -> [1 1 1 1]", "(multlast [7 2 3 6]) -> [6 6 6 6]", "(multlast [2 8 0 7]) -> [7 7 7 7]", "(multlast [4 9 2 1 8]) -> [8 8 8 8 8]", "(multlast [1 6 7]) -> [7 7 7]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.354937, "examples": ["(multlast [1 0 6]) -> [6 6 6]", "(multlast []) -> []", "(multlast [1 4]) -> [4 4]", "(multlast [4 9 1 0]) -> [0 0 0 0]", "(multlast [8]) -> [8]", "(multlast [1]) -> [1]", "(multlast []) -> []", "(multlast [1 1 1 0]) -> [0 0 0 0]", "(multlast [0 2]) -> [2 2]", "(multlast [5 9]) -> [9 9]", "(multlast [8 5]) -> [5 5]", "(multlast [7 4 6 4 9]) -> [9 9 9 9 9]", "(multlast [5 7 6]) -> [6 6 6]", "(multlast [7 8 4 6 3]) -> [3 3 3 3 3]", "(multlast [3 1 5 0 7]) -> [7 7 7 7 7]", "(multlast [8]) -> [8]", "(multlast [9]) -> [9]", "(multlast [2]) -> [2]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.305384, "examples": ["(multlast [2 2]) -> [2 2]", "(multlast []) -> []", "(multlast [9 7]) -> [7 7]", "(multlast [6]) -> [6]", "(multlast [6]) -> [6]", "(multlast [0 1 3 3]) -> [3 3 3 3]", "(multlast [8 1 8]) -> [8 8 8]", "(multlast [2 0]) -> [0 0]", "(multlast [4 6 8]) -> [8 8 8]", "(multlast [4 3 0 1]) -> [1 1 1 1]", "(multlast [5 0]) -> [0 0]", "(multlast [9 8 3]) -> [3 3 3]", "(multlast [8 4]) -> [4 4]", "(multlast [6 4 2]) -> [2 2 2]", "(multlast [1 8 0 7]) -> [7 7 7 7]", "(multlast [2]) -> [2]", "(multlast [0]) -> [0]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.335406, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [1 3 2 1]) -> [1 1 1 1]", "(multlast [9 6 5]) -> [5 5 5]", "(multlast [6 8 7 8 8]) -> [8 8 8 8 8]", "(multlast []) -> []", "(multlast [5 3 1 4]) -> [4 4 4 4]", "(multlast []) -> []", "(multlast [0 7]) -> [7 7]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [6 2 6 3]) -> [3 3 3 3]", "(multlast [8]) -> [8]", "(multlast [4 5 5 9 0]) -> [0 0 0 0 0]", "(multlast []) -> []", "(multlast [6]) -> [6]", "(multlast [4]) -> [4]", "(multlast [3 6 7]) -> [7 7 7]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.344808, "examples": ["(multlast [0 8 7 8]) -> [8 8 8 8]", "(multlast [5 7 9]) -> [9 9 9]", "(multlast [5 6 2 6 3]) -> [3 3 3 3 3]", "(multlast [8 9 5]) -> [5 5 5]", "(multlast [0 8 0]) -> [0 0 0]", "(multlast [2 3]) -> [3 3]", "(multlast [0]) -> [0]", "(multlast [7 0 0 5 2]) -> [2 2 2 2 2]", "(multlast [0 5 4 6]) -> [6 6 6 6]", "(multlast [6 0 5]) -> [5 5 5]", "(multlast [0 3 9 2]) -> [2 2 2 2]", "(multlast [6 5 6 7 8]) -> [8 8 8 8 8]", "(multlast [8 1]) -> [1 1]", "(multlast []) -> []", "(multlast [1 1 9 2]) -> [2 2 2 2]", "(multlast [9 1 2 9]) -> [9 9 9 9]", "(multlast [5 2]) -> [2 2]", "(multlast [2 1 4]) -> [4 4 4]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.3669, "examples": ["(multlast [1]) -> [1]", "(multlast [5]) -> [5]", "(multlast [3]) -> [3]", "(multlast []) -> []", "(multlast [7 3 5]) -> [5 5 5]", "(multlast [0 0 3]) -> [3 3 3]", "(multlast [0 4 6]) -> [6 6 6]", "(multlast [4 1]) -> [1 1]", "(multlast [9]) -> [9]", "(multlast []) -> []", "(multlast [6 0]) -> [0 0]", "(multlast [2]) -> [2]", "(multlast [4 1 0 7 7]) -> [7 7 7 7 7]", "(multlast []) -> []", "(multlast [6 8 4 5 2]) -> [2 2 2 2 2]", "(multlast []) -> []", "(multlast [4 4 3 3]) -> [3 3 3 3]", "(multlast [0 1 8 6 2]) -> [2 2 2 2 2]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.382394, "examples": ["(multlast [0 1]) -> [1 1]", "(multlast [7]) -> [7]", "(multlast [8]) -> [8]", "(multlast []) -> []", "(multlast [4 1]) -> [1 1]", "(multlast [8 4]) -> [4 4]", "(multlast [5 3 5 9 8]) -> [8 8 8 8 8]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [9 2 3]) -> [3 3 3]", "(multlast [0 4]) -> [4 4]", "(multlast []) -> []", "(multlast [3 8 8]) -> [8 8 8]", "(multlast [0 8]) -> [8 8]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [1]) -> [1]", "(multlast [1 9 0 6]) -> [6 6 6 6]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.394224, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [0 7 3 9]) -> [9 9 9 9]", "(multlast [8]) -> [8]", "(multlast []) -> []", "(multlast [7 3 5 7 8]) -> [8 8 8 8 8]", "(multlast [0 8 3 1 9]) -> [9 9 9 9 9]", "(multlast [8 4 7 3 1]) -> [1 1 1 1 1]", "(multlast [2 4]) -> [4 4]", "(multlast [5 2]) -> [2 2]", "(multlast [9 4 9]) -> [9 9 9]", "(multlast [0 5]) -> [5 5]", "(multlast [9 4 2]) -> [2 2 2]", "(multlast [6 9 4]) -> [4 4 4]", "(multlast []) -> []", "(multlast [6 4 2]) -> [2 2 2]", "(multlast [0]) -> [0]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.412043, "examples": ["(multlast []) -> []", "(multlast [2 8 1 0]) -> [0 0 0 0]", "(multlast [9 2]) -> [2 2]", "(multlast []) -> []", "(multlast [0 0 3 9 1]) -> [1 1 1 1 1]", "(multlast [4 1 8 7]) -> [7 7 7 7]", "(multlast []) -> []", "(multlast [0 3]) -> [3 3]", "(multlast [9 4 9 4 7]) -> [7 7 7 7 7]", "(multlast [8]) -> [8]", "(multlast [6 6 2]) -> [2 2 2]", "(multlast [4 2 7]) -> [7 7 7]", "(multlast [3 2 2 1 0]) -> [0 0 0 0 0]", "(multlast [9 9 0 4]) -> [4 4 4 4]", "(multlast [4 9]) -> [9 9]", "(multlast []) -> []", "(multlast [3 5]) -> [5 5]", "(multlast [3 0 7 5 4]) -> [4 4 4 4 4]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.287287, "examples": ["(multlast [2 9 3 3]) -> [3 3 3 3]", "(multlast [2 2 2 9 2]) -> [2 2 2 2 2]", "(multlast [1 9 1]) -> [1 1 1]", "(multlast [1]) -> [1]", "(multlast [5 8 0 2 1]) -> [1 1 1 1 1]", "(multlast [7 5]) -> [5 5]", "(multlast [7 5 7 8]) -> [8 8 8 8]", "(multlast [3 2 5 5]) -> [5 5 5 5]", "(multlast [4 5 2 0]) -> [0 0 0 0]", "(multlast []) -> []", "(multlast [5]) -> [5]", "(multlast [3 4 2 4 3]) -> [3 3 3 3 3]", "(multlast [8 2 0 5]) -> [5 5 5 5]", "(multlast [9]) -> [9]", "(multlast [3 4 7 2]) -> [2 2 2 2]", "(multlast [1]) -> [1]", "(multlast [8 9 1 8]) -> [8 8 8 8]", "(multlast [9 2 5 8]) -> [8 8 8 8]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.298118, "examples": ["(multlast []) -> []", "(multlast [7 6 7 6]) -> [6 6 6 6]", "(multlast [9 2 9 9]) -> [9 9 9 9]", "(multlast [8 3 7 1 4]) -> [4 4 4 4 4]", "(multlast [7 6 8 5]) -> [5 5 5 5]", "(multlast [7 6 0 2 8]) -> [8 8 8 8 8]", "(multlast [1 1 1 5]) -> [5 5 5 5]", "(multlast [2 0]) -> [0 0]", "(multlast [2 0 1 5]) -> [5 5 5 5]", "(multlast [9]) -> [9]", "(multlast [2 6 8 2]) -> [2 2 2 2]", "(multlast [1 3 7]) -> [7 7 7]", "(multlast [0 9]) -> [9 9]", "(multlast [6 6 2]) -> [2 2 2]", "(multlast [6 4 4 8 5]) -> [5 5 5 5 5]", "(multlast [8]) -> [8]", "(multlast [7 8 3 9]) -> [9 9 9 9]", "(multlast [5 9]) -> [9 9]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.310453, "examples": ["(multlast [7]) -> [7]", "(multlast [8]) -> [8]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [2 0 7]) -> [7 7 7]", "(multlast [2]) -> [2]", "(multlast [2 6]) -> [6 6]", "(multlast [9 8]) -> [8 8]", "(multlast []) -> []", "(multlast [0]) -> [0]", "(multlast [8 9 3]) -> [3 3 3]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [5 5 2 4 0]) -> [0 0 0 0 0]", "(multlast []) -> []", "(multlast [1 3 7 8]) -> [8 8 8 8]", "(multlast [2 6 6 1]) -> [1 1 1 1]", "(multlast [2 7]) -> [7 7]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.341387, "examples": ["(multlast [6 6 4 2 8]) -> [8 8 8 8 8]", "(multlast [4 8]) -> [8 8]", "(multlast []) -> []", "(multlast [0 2 9]) -> [9 9 9]", "(multlast [3 6 6]) -> [6 6 6]", "(multlast [5]) -> [5]", "(multlast [0 3 2 3 9]) -> [9 9 9 9 9]", "(multlast [3 6 8]) -> [8 8 8]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [7 0 5 1 1]) -> [1 1 1 1 1]", "(multlast [8 7]) -> [7 7]", "(multlast [8]) -> [8]", "(multlast [7 9 6 3 5]) -> [5 5 5 5 5]", "(multlast [1 8]) -> [8 8]", "(multlast []) -> []", "(multlast [7 3 1 7]) -> [7 7 7 7]", "(multlast [5 3]) -> [3 3]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.292266, "examples": ["(multlast [0 6 4 6]) -> [6 6 6 6]", "(multlast []) -> []", "(multlast [7 9 8 2 2]) -> [2 2 2 2 2]", "(multlast [3 5 5 0]) -> [0 0 0 0]", "(multlast [2 1]) -> [1 1]", "(multlast [2 3]) -> [3 3]", "(multlast [6 3 4 0 1]) -> [1 1 1 1 1]", "(multlast [3 2 3 2 5]) -> [5 5 5 5 5]", "(multlast []) -> []", "(multlast [4]) -> [4]", "(multlast []) -> []", "(multlast [8 4 2]) -> [2 2 2]", "(multlast [4 5]) -> [5 5]", "(multlast [0 7 5 9]) -> [9 9 9 9]", "(multlast [7 3 7]) -> [7 7 7]", "(multlast []) -> []", "(multlast [7]) -> [7]", "(multlast [4]) -> [4]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.328148, "examples": ["(multlast [3 3 9]) -> [9 9 9]", "(multlast []) -> []", "(multlast [1 9 7]) -> [7 7 7]", "(multlast [0 7 5 7]) -> [7 7 7 7]", "(multlast []) -> []", "(multlast [9 1]) -> [1 1]", "(multlast [6 2 7 3]) -> [3 3 3 3]", "(multlast []) -> []", "(multlast [1 9]) -> [9 9]", "(multlast [6 6]) -> [6 6]", "(multlast [9 3 9 5 7]) -> [7 7 7 7 7]", "(multlast []) -> []", "(multlast [3 4 8]) -> [8 8 8]", "(multlast [2 3]) -> [3 3]", "(multlast [9 3 2]) -> [2 2 2]", "(multlast []) -> []", "(multlast [7 3]) -> [3 3]", "(multlast [7]) -> [7]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.319337, "examples": ["(multlast [3]) -> [3]", "(multlast [9]) -> [9]", "(multlast [2]) -> [2]", "(multlast [5 5 9 7]) -> [7 7 7 7]", "(multlast [3 3 2 0]) -> [0 0 0 0]", "(multlast [8]) -> [8]", "(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast [3 4 0 4]) -> [4 4 4 4]", "(multlast [1 6 5]) -> [5 5 5]", "(multlast [3 6 0 9 2]) -> [2 2 2 2 2]", "(multlast [0]) -> [0]", "(multlast [5 0]) -> [0 0]", "(multlast [5]) -> [5]", "(multlast []) -> []", "(multlast [5 8 8 0 0]) -> [0 0 0 0 0]", "(multlast [9]) -> [9]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.323494, "examples": ["(multlast []) -> []", "(multlast [0 8]) -> [8 8]", "(multlast [6 4 3 6]) -> [6 6 6 6]", "(multlast [5 8 8]) -> [8 8 8]", "(multlast [0]) -> [0]", "(multlast [1]) -> [1]", "(multlast [5 5 9]) -> [9 9 9]", "(multlast []) -> []", "(multlast [0 3 3 7 2]) -> [2 2 2 2 2]", "(multlast [6]) -> [6]", "(multlast [3]) -> [3]", "(multlast [6 2 8]) -> [8 8 8]", "(multlast [5]) -> [5]", "(multlast [5 2 9 7]) -> [7 7 7 7]", "(multlast [0 1 2]) -> [2 2 2]", "(multlast [5]) -> [5]", "(multlast [6 5 4 2 6]) -> [6 6 6 6 6]", "(multlast [9 7 2 3]) -> [3 3 3 3]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.331546, "examples": ["(multlast [4 2 1 2 6]) -> [6 6 6 6 6]", "(multlast [9 7 4]) -> [4 4 4]", "(multlast [9 0 1 5 2]) -> [2 2 2 2 2]", "(multlast [2 2 9 5]) -> [5 5 5 5]", "(multlast []) -> []", "(multlast [7 3 8 2 6]) -> [6 6 6 6 6]", "(multlast [4 3]) -> [3 3]", "(multlast [9 1 1 0]) -> [0 0 0 0]", "(multlast [0 5 8 1 5]) -> [5 5 5 5 5]", "(multlast [3 2]) -> [2 2]", "(multlast [3 4 9 9 1]) -> [1 1 1 1 1]", "(multlast []) -> []", "(multlast [5 6]) -> [6 6]", "(multlast [0 1 4]) -> [4 4 4]", "(multlast []) -> []", "(multlast [4 0 7]) -> [7 7 7]", "(multlast [1 4]) -> [4 4]", "(multlast [3 5 4 2]) -> [2 2 2 2]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.331013, "examples": ["(multlast [6 5 3 0 5]) -> [5 5 5 5 5]", "(multlast [0 7 7 4 0]) -> [0 0 0 0 0]", "(multlast [2 5]) -> [5 5]", "(multlast [8]) -> [8]", "(multlast [5 0 9 4]) -> [4 4 4 4]", "(multlast [5]) -> [5]", "(multlast []) -> []", "(multlast [5 5]) -> [5 5]", "(multlast [2 9 3 3]) -> [3 3 3 3]", "(multlast [1 4]) -> [4 4]", "(multlast [0]) -> [0]", "(multlast [5 0 4]) -> [4 4 4]", "(multlast [8 9]) -> [9 9]", "(multlast [3 5 5 0]) -> [0 0 0 0]", "(multlast [5 6 0 4 9]) -> [9 9 9 9 9]", "(multlast [1 8]) -> [8 8]", "(multlast [8]) -> [8]", "(multlast [8 8]) -> [8 8]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.306664, "examples": ["(multlast [0 8]) -> [8 8]", "(multlast [5 6 3]) -> [3 3 3]", "(multlast [1 7 5 6]) -> [6 6 6 6]", "(multlast [6 3 4]) -> [4 4 4]", "(multlast [1 4 3 3 1]) -> [1 1 1 1 1]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [1 2 1]) -> [1 1 1]", "(multlast [4 8 0 9 1]) -> [1 1 1 1 1]", "(multlast [0]) -> [0]", "(multlast [0 2 0 5]) -> [5 5 5 5]", "(multlast [9]) -> [9]", "(multlast [2 3 8 8 7]) -> [7 7 7 7 7]", "(multlast [0 6]) -> [6 6]", "(multlast [6 1 1]) -> [1 1 1]", "(multlast [1 4 8]) -> [8 8 8]", "(multlast [8]) -> [8]", "(multlast [6 7 7]) -> [7 7 7]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.350559, "examples": ["(multlast [0 9 6]) -> [6 6 6]", "(multlast [7 6]) -> [6 6]", "(multlast [1 7 0 3]) -> [3 3 3 3]", "(multlast [7]) -> [7]", "(multlast [1 9 0]) -> [0 0 0]", "(multlast []) -> []", "(multlast [9 4 9]) -> [9 9 9]", "(multlast [9]) -> [9]", "(multlast [4 5 8 0]) -> [0 0 0 0]", "(multlast [8 2]) -> [2 2]", "(multlast [2 0 7 8]) -> [8 8 8 8]", "(multlast [2 0]) -> [0 0]", "(multlast [9]) -> [9]", "(multlast [4 3 6]) -> [6 6 6]", "(multlast [8 3 9 5]) -> [5 5 5 5]", "(multlast [8]) -> [8]", "(multlast [4]) -> [4]", "(multlast [1 3 9 0]) -> [0 0 0 0]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.289123, "examples": ["(multlast [4 6]) -> [6 6]", "(multlast [0 7 3]) -> [3 3 3]", "(multlast [7]) -> [7]", "(multlast [2 1 3 4 8]) -> [8 8 8 8 8]", "(multlast [9 2 6 1 7]) -> [7 7 7 7 7]", "(multlast [6 8 0 5]) -> [5 5 5 5]", "(multlast [7]) -> [7]", "(multlast [9]) -> [9]", "(multlast [3 8 1 2]) -> [2 2 2 2]", "(multlast []) -> []", "(multlast [9 2]) -> [2 2]", "(multlast [2 9 6]) -> [6 6 6]", "(multlast []) -> []", "(multlast [6 9 5 3 6]) -> [6 6 6 6 6]", "(multlast [0 0 9 4 2]) -> [2 2 2 2 2]", "(multlast [1 4 9 6]) -> [6 6 6 6]", "(multlast [3 0 1 0 7]) -> [7 7 7 7 7]", "(multlast [2]) -> [2]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.263491, "examples": ["(multlast [0]) -> [0]", "(multlast [9 2 9 3 5]) -> [5 5 5 5 5]", "(multlast []) -> []", "(multlast [5 2 6]) -> [6 6 6]", "(multlast [8 9 7 2 2]) -> [2 2 2 2 2]", "(multlast [1 3 7 6 3]) -> [3 3 3 3 3]", "(multlast [9]) -> [9]", "(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast [6]) -> [6]", "(multlast [1 7]) -> [7 7]", "(multlast []) -> []", "(multlast [9 2 4 2 6]) -> [6 6 6 6 6]", "(multlast [8 4 6]) -> [6 6 6]", "(multlast []) -> []", "(multlast [5 0 9]) -> [9 9 9]", "(multlast [3 2 0]) -> [0 0 0]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.278726, "examples": ["(multlast [3 3 2]) -> [2 2 2]", "(multlast [6]) -> [6]", "(multlast [1 0 5 9 4]) -> [4 4 4 4 4]", "(multlast []) -> []", "(multlast [3 5]) -> [5 5]", "(multlast [3]) -> [3]", "(multlast [2 9 9 2]) -> [2 2 2 2]", "(multlast [6 3 7 5]) -> [5 5 5 5]", "(multlast [2 4 5 3]) -> [3 3 3 3]", "(multlast [6 7 5 2 2]) -> [2 2 2 2 2]", "(multlast [2 6 5 0]) -> [0 0 0 0]", "(multlast [6 3]) -> [3 3]", "(multlast [0 9 3 2 7]) -> [7 7 7 7 7]", "(multlast [8 5 7 1]) -> [1 1 1 1]", "(multlast [0 6 8]) -> [8 8 8]", "(multlast [0]) -> [0]", "(multlast [0 8 9 3]) -> [3 3 3 3]", "(multlast [0]) -> [0]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.253396, "examples": ["(multlast [5]) -> [5]", "(multlast [2]) -> [2]", "(multlast [0 0 5]) -> [5 5 5]", "(multlast [5 9 7 4 8]) -> [8 8 8 8 8]", "(multlast [1 1 6]) -> [6 6 6]", "(multlast [3 4 6 5 8]) -> [8 8 8 8 8]", "(multlast [7]) -> [7]", "(multlast [7 3 7 5]) -> [5 5 5 5]", "(multlast [0 4 1 2 8]) -> [8 8 8 8 8]", "(multlast []) -> []", "(multlast [5 8 6 7 8]) -> [8 8 8 8 8]", "(multlast []) -> []", "(multlast [9 4 1]) -> [1 1 1]", "(multlast [0]) -> [0]", "(multlast [1 3 4]) -> [4 4 4]", "(multlast [1 4 3 2]) -> [2 2 2 2]", "(multlast []) -> []", "(multlast [9 6]) -> [6 6]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.258682, "examples": ["(multlast [5]) -> [5]", "(multlast [8 9]) -> [9 9]", "(multlast [8 0 3]) -> [3 3 3]", "(multlast []) -> []", "(multlast [0 4 1 2 8]) -> [8 8 8 8 8]", "(multlast []) -> []", "(multlast [3 0 1]) -> [1 1 1]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [5]) -> [5]", "(multlast [0 2 5 8 9]) -> [9 9 9 9 9]", "(multlast [0 2 5 8 8]) -> [8 8 8 8 8]", "(multlast [2 1]) -> [1 1]", "(multlast [6 6 8 6 6]) -> [6 6 6 6 6]", "(multlast [1 9]) -> [9 9]", "(multlast [4]) -> [4]", "(multlast [5 3 6]) -> [6 6 6]", "(multlast [9 7 6 5 1]) -> [1 1 1 1 1]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.287101, "examples": ["(multlast [8 8 8 0]) -> [0 0 0 0]", "(multlast []) -> []", "(multlast [5 5 0 0]) -> [0 0 0 0]", "(multlast [3 1 1]) -> [1 1 1]", "(multlast [2 8 0 2 9]) -> [9 9 9 9 9]", "(multlast [3 7 9 8]) -> [8 8 8 8]", "(multlast []) -> []", "(multlast [3]) -> [3]", "(multlast [4 4 6 6 2]) -> [2 2 2 2 2]", "(multlast []) -> []", "(multlast [0 9 3 5]) -> [5 5 5 5]", "(multlast [1 0]) -> [0 0]", "(multlast []) -> []", "(multlast [0]) -> [0]", "(multlast []) -> []", "(multlast [6 2 8]) -> [8 8 8]", "(multlast [0 0 2 7 8]) -> [8 8 8 8 8]", "(multlast [2]) -> [2]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.248622, "examples": ["(multlast [5 3 7 0 5]) -> [5 5 5 5 5]", "(multlast [6 0 7 2]) -> [2 2 2 2]", "(multlast []) -> []", "(multlast [4 0 9 8 5]) -> [5 5 5 5 5]", "(multlast [9 6]) -> [6 6]", "(multlast [8 1 4 6]) -> [6 6 6 6]", "(multlast [6 7 7]) -> [7 7 7]", "(multlast [0 4]) -> [4 4]", "(multlast [0 6]) -> [6 6]", "(multlast []) -> []", "(multlast [4]) -> [4]", "(multlast [2 6 4 6 4]) -> [4 4 4 4 4]", "(multlast [9]) -> [9]", "(multlast [4 8]) -> [8 8]", "(multlast []) -> []", "(multlast [4]) -> [4]", "(multlast [5 7]) -> [7 7]", "(multlast [4 5]) -> [5 5]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.277562, "examples": ["(multlast [5 7]) -> [7 7]", "(multlast [9 1]) -> [1 1]", "(multlast [8 0 9]) -> [9 9 9]", "(multlast [3]) -> [3]", "(multlast [9 1 4 1]) -> [1 1 1 1]", "(multlast [0 0 9]) -> [9 9 9]", "(multlast [0 8]) -> [8 8]", "(multlast [5]) -> [5]", "(multlast [4 5]) -> [5 5]", "(multlast [8 1 1 0]) -> [0 0 0 0]", "(multlast [6 0 4 7 7]) -> [7 7 7 7 7]", "(multlast [3 8]) -> [8 8]", "(multlast [3 9 7]) -> [7 7 7]", "(multlast [3]) -> [3]", "(multlast [3]) -> [3]", "(multlast [8 2 4 1 0]) -> [0 0 0 0 0]", "(multlast []) -> []", "(multlast [2]) -> [2]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.298707, "examples": ["(multlast [0 4 2 6 2]) -> [2 2 2 2 2]", "(multlast []) -> []", "(multlast [9 3 1]) -> [1 1 1]", "(multlast [9 6 7 4 5]) -> [5 5 5 5 5]", "(multlast [7 3 5]) -> [5 5 5]", "(multlast [8 2 1 2 0]) -> [0 0 0 0 0]", "(multlast [0 4 8 1]) -> [1 1 1 1]", "(multlast [6]) -> [6]", "(multlast [5 9]) -> [9 9]", "(multlast [1 6 5]) -> [5 5 5]", "(multlast [9 4]) -> [4 4]", "(multlast [6 3 6 7 8]) -> [8 8 8 8 8]", "(multlast [3 7]) -> [7 7]", "(multlast [1]) -> [1]", "(multlast [3 6 3]) -> [3 3 3]", "(multlast [1 7 8]) -> [8 8 8]", "(multlast [0 9 0]) -> [0 0 0]", "(multlast [4]) -> [4]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.295619, "examples": ["(multlast [5 4 3 0]) -> [0 0 0 0]", "(multlast [5 9 1 0 0]) -> [0 0 0 0 0]", "(multlast [3 1 3]) -> [3 3 3]", "(multlast [7]) -> [7]", "(multlast []) -> []", "(multlast [9 1 1 6 8]) -> [8 8 8 8 8]", "(multlast [5 2 8 0]) -> [0 0 0 0]", "(multlast [2 1 7 2 5]) -> [5 5 5 5 5]", "(multlast [0 4 0]) -> [0 0 0]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [2 1]) -> [1 1]", "(multlast [5 9 9 4 3]) -> [3 3 3 3 3]", "(multlast []) -> []", "(multlast [4 2 8 5]) -> [5 5 5 5]", "(multlast [6 0 2]) -> [2 2 2]", "(multlast [0]) -> [0]", "(multlast [4 4]) -> [4 4]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.291678, "examples": ["(multlast [7 9 7 3]) -> [3 3 3 3]", "(multlast [6 7 3]) -> [3 3 3]", "(multlast [2 1 8]) -> [8 8 8]", "(multlast [0 1 1 0]) -> [0 0 0 0]", "(multlast [7 4 9 9]) -> [9 9 9 9]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [2 7]) -> [7 7]", "(multlast [8]) -> [8]", "(multlast [0 7 9]) -> [9 9 9]", "(multlast [3 8]) -> [8 8]", "(multlast [9 1]) -> [1 1]", "(multlast [4 5]) -> [5 5]", "(multlast [5 6 7]) -> [7 7 7]", "(multlast [1 4 6 4 0]) -> [0 0 0 0 0]", "(multlast [6]) -> [6]", "(multlast [0]) -> [0]", "(multlast [6 5 2 7]) -> [7 7 7 7]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.345698, "examples": ["(multlast [1 2]) -> [2 2]", "(multlast [4 3]) -> [3 3]", "(multlast [1 7 4 1 6]) -> [6 6 6 6 6]", "(multlast [8 9 1 0]) -> [0 0 0 0]", "(multlast [6 2 9 0]) -> [0 0 0 0]", "(multlast [4 9 2 6 1]) -> [1 1 1 1 1]", "(multlast [2 6 4 9]) -> [9 9 9 9]", "(multlast [0 9]) -> [9 9]", "(multlast [2 4 6]) -> [6 6 6]", "(multlast [2 6]) -> [6 6]", "(multlast [1 2]) -> [2 2]", "(multlast [1 6 9 3]) -> [3 3 3 3]", "(multlast [1 7 2 4]) -> [4 4 4 4]", "(multlast [6]) -> [6]", "(multlast [6 4 2 0 1]) -> [1 1 1 1 1]", "(multlast []) -> []", "(multlast [8]) -> [8]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.30458, "examples": ["(multlast [5 5 2 8]) -> [8 8 8 8]", "(multlast [1 8 5]) -> [5 5 5]", "(multlast []) -> []", "(multlast [3 9]) -> [9 9]", "(multlast [4 8]) -> [8 8]", "(multlast [1 4 0 3 2]) -> [2 2 2 2 2]", "(multlast [1 8 2 2]) -> [2 2 2 2]", "(multlast [9 2 6]) -> [6 6 6]", "(multlast []) -> []", "(multlast [5 4 7 3]) -> [3 3 3 3]", "(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast [4 5 1 2]) -> [2 2 2 2]", "(multlast [6 2 9]) -> [9 9 9]", "(multlast [9 0]) -> [0 0]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.303157, "examples": ["(multlast [9 8 2 3]) -> [3 3 3 3]", "(multlast []) -> []", "(multlast [9 5 6 6]) -> [6 6 6 6]", "(multlast []) -> []", "(multlast [7 8 2 0]) -> [0 0 0 0]", "(multlast [9 6 9]) -> [9 9 9]", "(multlast [5]) -> [5]", "(multlast [8]) -> [8]", "(multlast [3 3 4]) -> [4 4 4]", "(multlast [7 5 8 5 3]) -> [3 3 3 3 3]", "(multlast [0 8]) -> [8 8]", "(multlast []) -> []", "(multlast [4 5 0 0 9]) -> [9 9 9 9 9]", "(multlast []) -> []", "(multlast [0]) -> [0]", "(multlast [6]) -> [6]", "(multlast [9 9 2 2 8]) -> [8 8 8 8 8]", "(multlast [5 1 2 9 0]) -> [0 0 0 0 0]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.295811, "examples": ["(multlast []) -> []", "(multlast [1 8]) -> [8 8]", "(multlast [7 5]) -> [5 5]", "(multlast [9 5]) -> [5 5]", "(multlast [1 5 4 0]) -> [0 0 0 0]", "(multlast [5 9 8]) -> [8 8 8]", "(multlast [3 6 6]) -> [6 6 6]", "(multlast [5 3 3]) -> [3 3 3]", "(multlast [6 2]) -> [2 2]", "(multlast [8 6 3]) -> [3 3 3]", "(multlast []) -> []", "(multlast [0]) -> [0]", "(multlast [9 3]) -> [3 3]", "(multlast [3 7]) -> [7 7]", "(multlast [2 6 4 2]) -> [2 2 2 2]", "(multlast [6 3 2]) -> [2 2 2]", "(multlast [9 6 9 1]) -> [1 1 1 1]", "(multlast [4 3 6]) -> [6 6 6]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.312614, "examples": ["(multlast [3 7 3 6]) -> [6 6 6 6]", "(multlast []) -> []", "(multlast [4 5 0 4 6]) -> [6 6 6 6 6]", "(multlast [4 1 2]) -> [2 2 2]", "(multlast [3 2]) -> [2 2]", "(multlast [3 7 7 6 7]) -> [7 7 7 7 7]", "(multlast [6]) -> [6]", "(multlast [2 7 8 9 7]) -> [7 7 7 7 7]", "(multlast [4 8]) -> [8 8]", "(multlast [1 8 7]) -> [7 7 7]", "(multlast [9 3 3]) -> [3 3 3]", "(multlast [4 9 6 8]) -> [8 8 8 8]", "(multlast [6]) -> [6]", "(multlast [5 5 0 0]) -> [0 0 0 0]", "(multlast [4]) -> [4]", "(multlast [6 5]) -> [5 5]", "(multlast [3 5 9 8 1]) -> [1 1 1 1 1]", "(multlast [2 0 6]) -> [6 6 6]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) b)) _) _)", "name": "multlast", "time": 0.865853, "examples": ["(multlast [5 3 2]) -> [2 2 2]", "(multlast [9 8 1 4]) -> [4 4 4 4]", "(multlast [2 7]) -> [7 7]", "(multlast [6 8]) -> [8 8]", "(multlast [0 3 7]) -> [7 7 7]", "(multlast [2 2 0]) -> [0 0 0]", "(multlast [4 3]) -> [3 3]", "(multlast [3 6 4 4 6]) -> [6 6 6 6 6]", "(multlast [5 7]) -> [7 7]", "(multlast [5 6 6 8 0]) -> [0 0 0 0 0]", "(multlast [5 2 9]) -> [9 9 9]", "(multlast [0 6 4 4 6]) -> [6 6 6 6 6]", "(multlast [2 1 3 9]) -> [9 9 9 9]", "(multlast [6 6 9 9 8]) -> [8 8 8 8 8]", "(multlast [7 9 8 4]) -> [4 4 4 4]", "(multlast [2 0 7]) -> [7 7 7]", "(multlast [5 0 7]) -> [7 7 7]", "(multlast [2 3]) -> [3 3]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.267654, "examples": ["(multlast [7 7 3 8]) -> [8 8 8 8]", "(multlast [1]) -> [1]", "(multlast [5]) -> [5]", "(multlast []) -> []", "(multlast [2 3 1 3 3]) -> [3 3 3 3 3]", "(multlast [5]) -> [5]", "(multlast [0 8 5 4 4]) -> [4 4 4 4 4]", "(multlast [2 6 7 1 3]) -> [3 3 3 3 3]", "(multlast [1 6 4]) -> [4 4 4]", "(multlast [5]) -> [5]", "(multlast [7 6 6 5]) -> [5 5 5 5]", "(multlast [6 1 3 2 2]) -> [2 2 2 2 2]", "(multlast [6 0]) -> [0 0]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [5]) -> [5]", "(multlast [8 9 8]) -> [8 8 8]", "(multlast [6 7 1 3]) -> [3 3 3 3]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.2578, "examples": ["(multlast [8 5 4 3 1]) -> [1 1 1 1 1]", "(multlast [9 2 8 8]) -> [8 8 8 8]", "(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast [8 6 9]) -> [9 9 9]", "(multlast [3 8]) -> [8 8]", "(multlast [8]) -> [8]", "(multlast [7 0 4 3]) -> [3 3 3 3]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [5 6 0 6 2]) -> [2 2 2 2 2]", "(multlast []) -> []", "(multlast [0]) -> [0]", "(multlast [4 4 6]) -> [6 6 6]", "(multlast [8 6]) -> [6 6]", "(multlast [1 3 9 8 2]) -> [2 2 2 2 2]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.291168, "examples": ["(multlast [5 6]) -> [6 6]", "(multlast [6 3 9]) -> [9 9 9]", "(multlast [8]) -> [8]", "(multlast []) -> []", "(multlast [8 7 1 6 0]) -> [0 0 0 0 0]", "(multlast [8 1 7]) -> [7 7 7]", "(multlast [2 5 7]) -> [7 7 7]", "(multlast [0 3 5 3 1]) -> [1 1 1 1 1]", "(multlast [8 2 2 2 1]) -> [1 1 1 1 1]", "(multlast [5]) -> [5]", "(multlast [6]) -> [6]", "(multlast [4 8]) -> [8 8]", "(multlast [3 1 9 0]) -> [0 0 0 0]", "(multlast [8 6 0 8]) -> [8 8 8 8]", "(multlast [2]) -> [2]", "(multlast [3 8]) -> [8 8]", "(multlast [1 0 8 2]) -> [2 2 2 2]", "(multlast [8 7 4]) -> [4 4 4]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.277138, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [4 8 3 2 6]) -> [6 6 6 6 6]", "(multlast [2]) -> [2]", "(multlast [2 7 5 0]) -> [0 0 0 0]", "(multlast [9 5 6 6 6]) -> [6 6 6 6 6]", "(multlast [1 6 6 4]) -> [4 4 4 4]", "(multlast [2 6 4 3]) -> [3 3 3 3]", "(multlast [7 0 1 6]) -> [6 6 6 6]", "(multlast [0]) -> [0]", "(multlast [8 6]) -> [6 6]", "(multlast [7 7]) -> [7 7]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [5 2 2 9]) -> [9 9 9 9]", "(multlast [5 2 1]) -> [1 1 1]", "(multlast [3 6 1]) -> [1 1 1]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.25405, "examples": ["(multlast [4 7 7 8 2]) -> [2 2 2 2 2]", "(multlast [9]) -> [9]", "(multlast [9]) -> [9]", "(multlast [9 3]) -> [3 3]", "(multlast [9 5 8 5 1]) -> [1 1 1 1 1]", "(multlast [6]) -> [6]", "(multlast [9 3 0 7]) -> [7 7 7 7]", "(multlast [9 1 1 7]) -> [7 7 7 7]", "(multlast []) -> []", "(multlast [4 7 9 5]) -> [5 5 5 5]", "(multlast [7]) -> [7]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [1 8 1 6 9]) -> [9 9 9 9 9]", "(multlast [4 2 1 0]) -> [0 0 0 0]", "(multlast [6 9 1 0 3]) -> [3 3 3 3 3]", "(multlast [6 8]) -> [8 8]", "(multlast [3 4 1 1]) -> [1 1 1 1]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.260478, "examples": ["(multlast [3 6 0]) -> [0 0 0]", "(multlast [8 5]) -> [5 5]", "(multlast [0 1 9 3 0]) -> [0 0 0 0 0]", "(multlast []) -> []", "(multlast [6]) -> [6]", "(multlast [5 9]) -> [9 9]", "(multlast [9 1 3 7]) -> [7 7 7 7]", "(multlast [7 1 4 6]) -> [6 6 6 6]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [5 0 5]) -> [5 5 5]", "(multlast [7 3 6]) -> [6 6 6]", "(multlast []) -> []", "(multlast [0 4 5 5]) -> [5 5 5 5]", "(multlast [8 9 3 6 1]) -> [1 1 1 1 1]", "(multlast [0 2]) -> [2 2]", "(multlast [0 3]) -> [3 3]", "(multlast [3 3 5 1 5]) -> [5 5 5 5 5]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.274662, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast [5 0]) -> [0 0]", "(multlast []) -> []", "(multlast [0]) -> [0]", "(multlast [5 8 8 0]) -> [0 0 0 0]", "(multlast [9 2 6 7 1]) -> [1 1 1 1 1]", "(multlast [5 6 7 6]) -> [6 6 6 6]", "(multlast [9]) -> [9]", "(multlast [8 6 0 6]) -> [6 6 6 6]", "(multlast []) -> []", "(multlast [3 7 9]) -> [9 9 9]", "(multlast [9]) -> [9]", "(multlast [4 4 3]) -> [3 3 3]", "(multlast [9 8 6 5]) -> [5 5 5 5]", "(multlast [1 1 9 5]) -> [5 5 5 5]", "(multlast [8 4 2 0]) -> [0 0 0 0]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.334569, "examples": ["(multlast []) -> []", "(multlast [2]) -> [2]", "(multlast [4]) -> [4]", "(multlast [7 6]) -> [6 6]", "(multlast [9]) -> [9]", "(multlast [5 7 5]) -> [5 5 5]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [2 9 9]) -> [9 9 9]", "(multlast [2]) -> [2]", "(multlast [6 7 0 9 8]) -> [8 8 8 8 8]", "(multlast [6 0]) -> [0 0]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [7 3 2]) -> [2 2 2]", "(multlast [3 3 3]) -> [3 3 3]", "(multlast [5 1 6 6 9]) -> [9 9 9 9 9]", "(multlast [4 5 8]) -> [8 8 8]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.340202, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [5 6 0 8 5]) -> [5 5 5 5 5]", "(multlast [7 4 2 1 9]) -> [9 9 9 9 9]", "(multlast [2 2 8]) -> [8 8 8]", "(multlast [0]) -> [0]", "(multlast [0 9]) -> [9 9]", "(multlast []) -> []", "(multlast [5 2 1]) -> [1 1 1]", "(multlast [0 1 7 1]) -> [1 1 1 1]", "(multlast [2 6 2]) -> [2 2 2]", "(multlast [5 5 1 2]) -> [2 2 2 2]", "(multlast [2 2 7]) -> [7 7 7]", "(multlast [6 5]) -> [5 5]", "(multlast [4 6]) -> [6 6]", "(multlast [2 4 1]) -> [1 1 1]", "(multlast [1 9 7 1 3]) -> [3 3 3 3 3]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.352426, "examples": ["(multlast []) -> []", "(multlast [6 5 5 8]) -> [8 8 8 8]", "(multlast []) -> []", "(multlast [2 4]) -> [4 4]", "(multlast [1 9 6]) -> [6 6 6]", "(multlast [8 8 4 6 0]) -> [0 0 0 0 0]", "(multlast [9]) -> [9]", "(multlast [2 3]) -> [3 3]", "(multlast [3]) -> [3]", "(multlast [5 8 2 5]) -> [5 5 5 5]", "(multlast [0 6 4 1 1]) -> [1 1 1 1 1]", "(multlast [8]) -> [8]", "(multlast []) -> []", "(multlast [6]) -> [6]", "(multlast [8 5]) -> [5 5]", "(multlast [7]) -> [7]", "(multlast []) -> []", "(multlast [9 3]) -> [3 3]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.298458, "examples": ["(multlast []) -> []", "(multlast [5 3 3 5 2]) -> [2 2 2 2 2]", "(multlast [5 7]) -> [7 7]", "(multlast [7]) -> [7]", "(multlast []) -> []", "(multlast [6 5 3 9 8]) -> [8 8 8 8 8]", "(multlast [7 0 1 0 4]) -> [4 4 4 4 4]", "(multlast [4 3 7]) -> [7 7 7]", "(multlast [5]) -> [5]", "(multlast [3 2]) -> [2 2]", "(multlast [4]) -> [4]", "(multlast [9 2 6]) -> [6 6 6]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [0 1]) -> [1 1]", "(multlast [9]) -> [9]", "(multlast [9]) -> [9]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.230309, "examples": ["(multlast [6 6]) -> [6 6]", "(multlast []) -> []", "(multlast [8]) -> [8]", "(multlast [2 4 4]) -> [4 4 4]", "(multlast [1 5 6 4]) -> [4 4 4 4]", "(multlast [5 8 0 9 1]) -> [1 1 1 1 1]", "(multlast [6]) -> [6]", "(multlast [5 6 0 2]) -> [2 2 2 2]", "(multlast []) -> []", "(multlast [8 4 1]) -> [1 1 1]", "(multlast [8 9 2]) -> [2 2 2]", "(multlast [7 6 7]) -> [7 7 7]", "(multlast [1 3]) -> [3 3]", "(multlast []) -> []", "(multlast [2]) -> [2]", "(multlast [8 3 0 6 1]) -> [1 1 1 1 1]", "(multlast [8 1 1 2]) -> [2 2 2 2]", "(multlast [4 5 9]) -> [9 9 9]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.334698, "examples": ["(multlast [2 1 1 7]) -> [7 7 7 7]", "(multlast [7 7 6 8 6]) -> [6 6 6 6 6]", "(multlast [5 4]) -> [4 4]", "(multlast [5]) -> [5]", "(multlast []) -> []", "(multlast [0 2]) -> [2 2]", "(multlast [0 7 8 2]) -> [2 2 2 2]", "(multlast [6]) -> [6]", "(multlast [2 9 7 7]) -> [7 7 7 7]", "(multlast [5 6]) -> [6 6]", "(multlast [4 0 0 5 4]) -> [4 4 4 4 4]", "(multlast [5 4 1 7]) -> [7 7 7 7]", "(multlast []) -> []", "(multlast [0]) -> [0]", "(multlast [4 7 8 7]) -> [7 7 7 7]", "(multlast [7 2 0 5 3]) -> [3 3 3 3 3]", "(multlast [0 0 9]) -> [9 9 9]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.357392, "examples": ["(multlast [1 6 4 4 8]) -> [8 8 8 8 8]", "(multlast [3 3 4 6]) -> [6 6 6 6]", "(multlast [4 9]) -> [9 9]", "(multlast []) -> []", "(multlast [4 0]) -> [0 0]", "(multlast [6 9 3]) -> [3 3 3]", "(multlast [7 2 7 0 3]) -> [3 3 3 3 3]", "(multlast [7 8]) -> [8 8]", "(multlast [7 0 1 4]) -> [4 4 4 4]", "(multlast [7]) -> [7]", "(multlast []) -> []", "(multlast [6 1 1]) -> [1 1 1]", "(multlast [9 1 0]) -> [0 0 0]", "(multlast [5 5 6 5]) -> [5 5 5 5]", "(multlast [4 0 2]) -> [2 2 2]", "(multlast [0 3]) -> [3 3]", "(multlast [0 3]) -> [3 3]", "(multlast [6]) -> [6]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.386122, "examples": ["(multlast [0 6 1]) -> [1 1 1]", "(multlast []) -> []", "(multlast [9 3]) -> [3 3]", "(multlast [7 6 3 3 2]) -> [2 2 2 2 2]", "(multlast [6 5 4 8]) -> [8 8 8 8]", "(multlast [3 8 7]) -> [7 7 7]", "(multlast [8 1]) -> [1 1]", "(multlast []) -> []", "(multlast [3 2 7 3]) -> [3 3 3 3]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [6]) -> [6]", "(multlast [8 0 5 4 6]) -> [6 6 6 6 6]", "(multlast [8 1 8]) -> [8 8 8]", "(multlast [9 1 4]) -> [4 4 4]", "(multlast [4]) -> [4]", "(multlast [9 0]) -> [0 0]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.220145, "examples": ["(multlast []) -> []", "(multlast [9 0 9]) -> [9 9 9]", "(multlast [6 3]) -> [3 3]", "(multlast [0 6]) -> [6 6]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [9]) -> [9]", "(multlast []) -> []", "(multlast [7 7 6 1]) -> [1 1 1 1]", "(multlast [0]) -> [0]", "(multlast [0 1 6 2]) -> [2 2 2 2]", "(multlast [7 9 6 2]) -> [2 2 2 2]", "(multlast [6 0 8]) -> [8 8 8]", "(multlast [4 4]) -> [4 4]", "(multlast []) -> []", "(multlast [2 1 6 2 5]) -> [5 5 5 5 5]", "(multlast [5]) -> [5]", "(multlast [8 6 2 4]) -> [4 4 4 4]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.237231, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [1 6 6 5]) -> [5 5 5 5]", "(multlast [0 7 5]) -> [5 5 5]", "(multlast [9 5 7 7 2]) -> [2 2 2 2 2]", "(multlast [0 8 3]) -> [3 3 3]", "(multlast [2 7 2 9]) -> [9 9 9 9]", "(multlast [0 3]) -> [3 3]", "(multlast []) -> []", "(multlast [7 8 5 5 8]) -> [8 8 8 8 8]", "(multlast [5 4 8]) -> [8 8 8]", "(multlast [8 1]) -> [1 1]", "(multlast [2 9]) -> [9 9]", "(multlast []) -> []", "(multlast [1]) -> [1]", "(multlast [5 8]) -> [8 8]", "(multlast [3 3]) -> [3 3]", "(multlast [1 1 8 1]) -> [1 1 1 1]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.249773, "examples": ["(multlast [5 8 3]) -> [3 3 3]", "(multlast [3 3 8 0]) -> [0 0 0 0]", "(multlast [4 8 0 6 3]) -> [3 3 3 3 3]", "(multlast [2 9 7]) -> [7 7 7]", "(multlast [1 4 0]) -> [0 0 0]", "(multlast [1 0 6 5]) -> [5 5 5 5]", "(multlast []) -> []", "(multlast [8 0 5 5 2]) -> [2 2 2 2 2]", "(multlast [7 2 0 2]) -> [2 2 2 2]", "(multlast [5 6 5 0]) -> [0 0 0 0]", "(multlast [8 0 2 6 8]) -> [8 8 8 8 8]", "(multlast [1 3 4]) -> [4 4 4]", "(multlast [5 4 5]) -> [5 5 5]", "(multlast [2 0 0]) -> [0 0 0]", "(multlast [0 0]) -> [0 0]", "(multlast [2 0]) -> [0 0]", "(multlast [9 9 8 2 5]) -> [5 5 5 5 5]", "(multlast [9 4 9 6]) -> [6 6 6 6]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.234714, "examples": ["(multlast []) -> []", "(multlast [6]) -> [6]", "(multlast [8]) -> [8]", "(multlast []) -> []", "(multlast [3 9 3 2]) -> [2 2 2 2]", "(multlast []) -> []", "(multlast [7 7 4 8]) -> [8 8 8 8]", "(multlast [1 7 0 4]) -> [4 4 4 4]", "(multlast [7 8 4 3 6]) -> [6 6 6 6 6]", "(multlast [0 7 5]) -> [5 5 5]", "(multlast [0 0 8]) -> [8 8 8]", "(multlast [2 2]) -> [2 2]", "(multlast [9 5 4 5 5]) -> [5 5 5 5 5]", "(multlast [7 6 8]) -> [8 8 8]", "(multlast [6 6 6 2 2]) -> [2 2 2 2 2]", "(multlast []) -> []", "(multlast [8 9 0 3 2]) -> [2 2 2 2 2]", "(multlast [4 6 2 1 1]) -> [1 1 1 1 1]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.236951, "examples": ["(multlast [9 5 9 3 4]) -> [4 4 4 4 4]", "(multlast [0 2 3]) -> [3 3 3]", "(multlast [2 9 8]) -> [8 8 8]", "(multlast [0 8]) -> [8 8]", "(multlast [8 7 3 6 9]) -> [9 9 9 9 9]", "(multlast [5 1]) -> [1 1]", "(multlast []) -> []", "(multlast [9 2 4]) -> [4 4 4]", "(multlast []) -> []", "(multlast [1 5 8 5]) -> [5 5 5 5]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [2 3 3]) -> [3 3 3]", "(multlast [3 9 1 1 9]) -> [9 9 9 9 9]", "(multlast [1 0 3]) -> [3 3 3]", "(multlast [3 2 8 6]) -> [6 6 6 6]", "(multlast [3 7 0 4]) -> [4 4 4 4]", "(multlast [4 8 5 9]) -> [9 9 9 9]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.302308, "examples": ["(multlast [3]) -> [3]", "(multlast [1 4 7 2 5]) -> [5 5 5 5 5]", "(multlast [6 6 0 4 1]) -> [1 1 1 1 1]", "(multlast [2 6]) -> [6 6]", "(multlast [4 0 5]) -> [5 5 5]", "(multlast []) -> []", "(multlast [9]) -> [9]", "(multlast [4 2 8 0 2]) -> [2 2 2 2 2]", "(multlast [0]) -> [0]", "(multlast [1 2]) -> [2 2]", "(multlast [9 5]) -> [5 5]", "(multlast [7 8 4]) -> [4 4 4]", "(multlast [3 4 3]) -> [3 3 3]", "(multlast []) -> []", "(multlast [5 8 3 2]) -> [2 2 2 2]", "(multlast [9 2 6 0 1]) -> [1 1 1 1 1]", "(multlast [3 4 2 4 9]) -> [9 9 9 9 9]", "(multlast [4 2]) -> [2 2]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.279666, "examples": ["(multlast [9]) -> [9]", "(multlast [0 5 2 1 1]) -> [1 1 1 1 1]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [0 9 2 1]) -> [1 1 1 1]", "(multlast []) -> []", "(multlast [2 7 1]) -> [1 1 1]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [9]) -> [9]", "(multlast [4]) -> [4]", "(multlast [2 4 8]) -> [8 8 8]", "(multlast [0 2 3 2]) -> [2 2 2 2]", "(multlast [5 3 0]) -> [0 0 0]", "(multlast [1 9 0]) -> [0 0 0]", "(multlast [5 9 2 7]) -> [7 7 7 7]", "(multlast [3 8]) -> [8 8]", "(multlast [2 9 3 7]) -> [7 7 7 7]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.317126, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [5 0 4 1 7]) -> [7 7 7 7 7]", "(multlast [0 2 8 6 7]) -> [7 7 7 7 7]", "(multlast [3]) -> [3]", "(multlast [2 1]) -> [1 1]", "(multlast []) -> []", "(multlast [4 6]) -> [6 6]", "(multlast [2 0]) -> [0 0]", "(multlast [8]) -> [8]", "(multlast [1 6 1]) -> [1 1 1]", "(multlast [1 1]) -> [1 1]", "(multlast [0 0]) -> [0 0]", "(multlast [1 4]) -> [4 4]", "(multlast [4 0 7 6]) -> [6 6 6 6]", "(multlast []) -> []", "(multlast [2 8 2]) -> [2 2 2]", "(multlast [8 3 8 8]) -> [8 8 8 8]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.289721, "examples": ["(multlast [9 1 3]) -> [3 3 3]", "(multlast [7 0 4]) -> [4 4 4]", "(multlast [5 8 0 8 3]) -> [3 3 3 3 3]", "(multlast [9 4]) -> [4 4]", "(multlast [1 0 0 2 3]) -> [3 3 3 3 3]", "(multlast [4]) -> [4]", "(multlast [1 7]) -> [7 7]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [9 3 0]) -> [0 0 0]", "(multlast [0 0 7 0 5]) -> [5 5 5 5 5]", "(multlast [2 1 6 2 1]) -> [1 1 1 1 1]", "(multlast [3 5 9 7 3]) -> [3 3 3 3 3]", "(multlast []) -> []", "(multlast [4 6 7 3 5]) -> [5 5 5 5 5]", "(multlast [1 7 2]) -> [2 2 2]", "(multlast []) -> []", "(multlast [9]) -> [9]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.264682, "examples": ["(multlast [9 4 1 0]) -> [0 0 0 0]", "(multlast [4 6 3 5 0]) -> [0 0 0 0 0]", "(multlast [4 9]) -> [9 9]", "(multlast [2]) -> [2]", "(multlast []) -> []", "(multlast [0 8]) -> [8 8]", "(multlast [8 1 2 5]) -> [5 5 5 5]", "(multlast [2 4 0 0 9]) -> [9 9 9 9 9]", "(multlast []) -> []", "(multlast [8 5 0 0]) -> [0 0 0 0]", "(multlast [0]) -> [0]", "(multlast []) -> []", "(multlast [8 0 6 7 0]) -> [0 0 0 0 0]", "(multlast [8 4]) -> [4 4]", "(multlast [6 4 8 4 8]) -> [8 8 8 8 8]", "(multlast [7 3]) -> [3 3]", "(multlast [3 9]) -> [9 9]", "(multlast [7 5 7 4]) -> [4 4 4 4]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.255261, "examples": ["(multlast [2 3 2 3 1]) -> [1 1 1 1 1]", "(multlast [3 0 5 1]) -> [1 1 1 1]", "(multlast [3 0 4 7 8]) -> [8 8 8 8 8]", "(multlast [6 7]) -> [7 7]", "(multlast []) -> []", "(multlast [5]) -> [5]", "(multlast [2 0]) -> [0 0]", "(multlast [9 1 6]) -> [6 6 6]", "(multlast [0 7 1]) -> [1 1 1]", "(multlast []) -> []", "(multlast [7 1]) -> [1 1]", "(multlast []) -> []", "(multlast [9 3 9]) -> [9 9 9]", "(multlast [0 8]) -> [8 8]", "(multlast [5 5 5]) -> [5 5 5]", "(multlast [1 1 9 8 1]) -> [1 1 1 1 1]", "(multlast [5 2 4 7]) -> [7 7 7 7]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.277153, "examples": ["(multlast []) -> []", "(multlast [2 9 9]) -> [9 9 9]", "(multlast [5 5]) -> [5 5]", "(multlast []) -> []", "(multlast [9 7 6 2]) -> [2 2 2 2]", "(multlast [1 0 5]) -> [5 5 5]", "(multlast [4 7 0 0 9]) -> [9 9 9 9 9]", "(multlast [8 5 8 5 5]) -> [5 5 5 5 5]", "(multlast []) -> []", "(multlast [7 0 0 9]) -> [9 9 9 9]", "(multlast []) -> []", "(multlast [2 2 9 5]) -> [5 5 5 5]", "(multlast []) -> []", "(multlast [5 4 3 7 8]) -> [8 8 8 8 8]", "(multlast [7 5 7 2]) -> [2 2 2 2]", "(multlast [0]) -> [0]", "(multlast [6 6 7 8 6]) -> [6 6 6 6 6]", "(multlast [4 6]) -> [6 6]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.303803, "examples": ["(multlast []) -> []", "(multlast [9 8 0]) -> [0 0 0]", "(multlast [9]) -> [9]", "(multlast [3 3]) -> [3 3]", "(multlast [2 8]) -> [8 8]", "(multlast [0 3]) -> [3 3]", "(multlast [7 7 9 4]) -> [4 4 4 4]", "(multlast []) -> []", "(multlast [0 8]) -> [8 8]", "(multlast [0]) -> [0]", "(multlast []) -> []", "(multlast [5 0 3 9]) -> [9 9 9 9]", "(multlast [7 7 1]) -> [1 1 1]", "(multlast []) -> []", "(multlast [9 2]) -> [2 2]", "(multlast [3 1 1 9]) -> [9 9 9 9]", "(multlast [1 8]) -> [8 8]", "(multlast [4 7 9 3 7]) -> [7 7 7 7 7]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.277798, "examples": ["(multlast []) -> []", "(multlast [1]) -> [1]", "(multlast [5 2 0]) -> [0 0 0]", "(multlast [6 3 5]) -> [5 5 5]", "(multlast [4]) -> [4]", "(multlast [9]) -> [9]", "(multlast [2 9 4]) -> [4 4 4]", "(multlast [2 1 8]) -> [8 8 8]", "(multlast [7 6 7 8]) -> [8 8 8 8]", "(multlast [8 1 1]) -> [1 1 1]", "(multlast [6]) -> [6]", "(multlast [9]) -> [9]", "(multlast [6 9 9 9]) -> [9 9 9 9]", "(multlast []) -> []", "(multlast [1 4 6 4]) -> [4 4 4 4]", "(multlast [9 5 5 0 4]) -> [4 4 4 4 4]", "(multlast [0 9 4 7 8]) -> [8 8 8 8 8]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.229441, "examples": ["(multlast [0]) -> [0]", "(multlast [0]) -> [0]", "(multlast [4 9]) -> [9 9]", "(multlast [3 1 3 4 0]) -> [0 0 0 0 0]", "(multlast [6]) -> [6]", "(multlast [5 4]) -> [4 4]", "(multlast [2]) -> [2]", "(multlast []) -> []", "(multlast [6 0 0]) -> [0 0 0]", "(multlast [7]) -> [7]", "(multlast [0 1 1 6 6]) -> [6 6 6 6 6]", "(multlast [5 5 5 8 2]) -> [2 2 2 2 2]", "(multlast [8 3 8 8 5]) -> [5 5 5 5 5]", "(multlast [2 5 2 5 4]) -> [4 4 4 4 4]", "(multlast [8]) -> [8]", "(multlast [9 5 6 8]) -> [8 8 8 8]", "(multlast [8 0 8]) -> [8 8 8]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) b)) _) _)", "name": "multlast", "time": 0.824863, "examples": ["(multlast [1 7]) -> [7 7]", "(multlast [0 9 4]) -> [4 4 4]", "(multlast [9]) -> [9]", "(multlast [0 1 3 8 5]) -> [5 5 5 5 5]", "(multlast [8 2 1]) -> [1 1 1]", "(multlast [6 6 0]) -> [0 0 0]", "(multlast [3 8 7 0 9]) -> [9 9 9 9 9]", "(multlast [1]) -> [1]", "(multlast [9 2 0 3]) -> [3 3 3 3]", "(multlast [1 1 9]) -> [9 9 9]", "(multlast [3]) -> [3]", "(multlast [3 4 0 2 1]) -> [1 1 1 1 1]", "(multlast [1 8 7 2 0]) -> [0 0 0 0 0]", "(multlast [7 1 1 1]) -> [1 1 1 1]", "(multlast [4 6 6 0 6]) -> [6 6 6 6 6]", "(multlast [5 9 3 0]) -> [0 0 0 0]", "(multlast [7 7 2 7 1]) -> [1 1 1 1 1]", "(multlast [3 7 8 4 3]) -> [3 3 3 3 3]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.242011, "examples": ["(multlast [6]) -> [6]", "(multlast [8 4 2 8 1]) -> [1 1 1 1 1]", "(multlast [8 7 7 6]) -> [6 6 6 6]", "(multlast [6 2 4 9]) -> [9 9 9 9]", "(multlast [6 8 6]) -> [6 6 6]", "(multlast []) -> []", "(multlast [0 2]) -> [2 2]", "(multlast []) -> []", "(multlast [6]) -> [6]", "(multlast [3 4 9 4 3]) -> [3 3 3 3 3]", "(multlast []) -> []", "(multlast [0 1]) -> [1 1]", "(multlast [9 6 1]) -> [1 1 1]", "(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast [7 4 3]) -> [3 3 3]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.248201, "examples": ["(multlast [6]) -> [6]", "(multlast [6]) -> [6]", "(multlast []) -> []", "(multlast [5 6 8 1 3]) -> [3 3 3 3 3]", "(multlast [4 3]) -> [3 3]", "(multlast [1 6 1 0]) -> [0 0 0 0]", "(multlast [5 4 6 4]) -> [4 4 4 4]", "(multlast [9 8 2 0]) -> [0 0 0 0]", "(multlast [0 5 9 5]) -> [5 5 5 5]", "(multlast [4 2 1 1 2]) -> [2 2 2 2 2]", "(multlast [0 7 9 0]) -> [0 0 0 0]", "(multlast [5 7]) -> [7 7]", "(multlast [7 6]) -> [6 6]", "(multlast [7 1 9 2 3]) -> [3 3 3 3 3]", "(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast [4 3 1 4 0]) -> [0 0 0 0 0]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.218294, "examples": ["(multlast [8 5]) -> [5 5]", "(multlast [9 8 1 4 0]) -> [0 0 0 0 0]", "(multlast [3 2 3]) -> [3 3 3]", "(multlast [2]) -> [2]", "(multlast [4 5 1]) -> [1 1 1]", "(multlast [7 0 7 0]) -> [0 0 0 0]", "(multlast []) -> []", "(multlast [4 2 1]) -> [1 1 1]", "(multlast [9 0 8]) -> [8 8 8]", "(multlast [6 2 5]) -> [5 5 5]", "(multlast [1]) -> [1]", "(multlast []) -> []", "(multlast [9 5 8 9 1]) -> [1 1 1 1 1]", "(multlast []) -> []", "(multlast [7]) -> [7]", "(multlast [4]) -> [4]", "(multlast [7]) -> [7]", "(multlast [5 6 0 7 6]) -> [6 6 6 6 6]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.205536, "examples": ["(multlast []) -> []", "(multlast [3 3 1]) -> [1 1 1]", "(multlast [3 4 1 2 1]) -> [1 1 1 1 1]", "(multlast [4 4 6 2 0]) -> [0 0 0 0 0]", "(multlast [3 9 2 6 5]) -> [5 5 5 5 5]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [5 9 1 9 6]) -> [6 6 6 6 6]", "(multlast [8 2 1 2]) -> [2 2 2 2]", "(multlast [2 1 1 6 9]) -> [9 9 9 9 9]", "(multlast [6]) -> [6]", "(multlast []) -> []", "(multlast [6 9 2 1 7]) -> [7 7 7 7 7]", "(multlast [3]) -> [3]", "(multlast [9 3]) -> [3 3]", "(multlast [9 7 9 2 4]) -> [4 4 4 4 4]", "(multlast []) -> []", "(multlast [3 8 9]) -> [9 9 9]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.193966, "examples": ["(multlast [9]) -> [9]", "(multlast []) -> []", "(multlast [7 4 7]) -> [7 7 7]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [7 4 5 1]) -> [1 1 1 1]", "(multlast []) -> []", "(multlast [2]) -> [2]", "(multlast [3 4 0 6 8]) -> [8 8 8 8 8]", "(multlast [0 7 1 2]) -> [2 2 2 2]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [3 2 5 2]) -> [2 2 2 2]", "(multlast [2 1]) -> [1 1]", "(multlast [6 4 7 0 8]) -> [8 8 8 8 8]", "(multlast [2 0 7 7 0]) -> [0 0 0 0 0]", "(multlast []) -> []", "(multlast [7 6]) -> [6 6]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.262629, "examples": ["(multlast []) -> []", "(multlast [9 1 4 1]) -> [1 1 1 1]", "(multlast [8 2 4 0]) -> [0 0 0 0]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [9 5 2]) -> [2 2 2]", "(multlast [5 8 7 5 1]) -> [1 1 1 1 1]", "(multlast [7 5 9 4 3]) -> [3 3 3 3 3]", "(multlast [9 2 7 0 4]) -> [4 4 4 4 4]", "(multlast [3 9 1 6 9]) -> [9 9 9 9 9]", "(multlast [7 6 1]) -> [1 1 1]", "(multlast [5 5 9 8]) -> [8 8 8 8]", "(multlast [2 7 9 1]) -> [1 1 1 1]", "(multlast [1 5 7]) -> [7 7 7]", "(multlast [8 4 3]) -> [3 3 3]", "(multlast [2 3 8 3 5]) -> [5 5 5 5 5]", "(multlast [2 2]) -> [2 2]", "(multlast [4 1]) -> [1 1]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.257463, "examples": ["(multlast [5 4 6 3 2]) -> [2 2 2 2 2]", "(multlast [2 4 9 1]) -> [1 1 1 1]", "(multlast [0 1 4 7 9]) -> [9 9 9 9 9]", "(multlast []) -> []", "(multlast [8 1]) -> [1 1]", "(multlast []) -> []", "(multlast [0 6 6]) -> [6 6 6]", "(multlast [6 7 9 4]) -> [4 4 4 4]", "(multlast [4 2 9]) -> [9 9 9]", "(multlast [9 1 7 7]) -> [7 7 7 7]", "(multlast []) -> []", "(multlast [8 5 4]) -> [4 4 4]", "(multlast [3]) -> [3]", "(multlast [1 4 9 0]) -> [0 0 0 0]", "(multlast [3 7 0]) -> [0 0 0]", "(multlast [6]) -> [6]", "(multlast [7 3 3]) -> [3 3 3]", "(multlast [0]) -> [0]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.237815, "examples": ["(multlast [9]) -> [9]", "(multlast [2]) -> [2]", "(multlast [9 9 9 4 6]) -> [6 6 6 6 6]", "(multlast [2 6 5 8 3]) -> [3 3 3 3 3]", "(multlast [4 5]) -> [5 5]", "(multlast [7 8]) -> [8 8]", "(multlast [6 3 4]) -> [4 4 4]", "(multlast [0]) -> [0]", "(multlast [1]) -> [1]", "(multlast [1 3 5]) -> [5 5 5]", "(multlast [8 3]) -> [3 3]", "(multlast [1 3 7]) -> [7 7 7]", "(multlast [4]) -> [4]", "(multlast [1 9 4 1]) -> [1 1 1 1]", "(multlast [7 3]) -> [3 3]", "(multlast [3 1]) -> [1 1]", "(multlast []) -> []", "(multlast [3 6]) -> [6 6]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.255304, "examples": ["(multlast [1 6]) -> [6 6]", "(multlast [1 7 6]) -> [6 6 6]", "(multlast [7 4]) -> [4 4]", "(multlast [4 0 8 6 6]) -> [6 6 6 6 6]", "(multlast []) -> []", "(multlast [4]) -> [4]", "(multlast []) -> []", "(multlast [1 1]) -> [1 1]", "(multlast [3 1 3 6 9]) -> [9 9 9 9 9]", "(multlast [1]) -> [1]", "(multlast [7 5 9 0 2]) -> [2 2 2 2 2]", "(multlast [7 8 5]) -> [5 5 5]", "(multlast [8 9 4 2 5]) -> [5 5 5 5 5]", "(multlast [2 9]) -> [9 9]", "(multlast []) -> []", "(multlast [2 8]) -> [8 8]", "(multlast [2 4 5 4]) -> [4 4 4 4]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.215088, "examples": ["(multlast [3 4 0 8 2]) -> [2 2 2 2 2]", "(multlast [0 8 4 1 2]) -> [2 2 2 2 2]", "(multlast [6 1 9 8 8]) -> [8 8 8 8 8]", "(multlast [4 0]) -> [0 0]", "(multlast [8 4]) -> [4 4]", "(multlast [8 8 8]) -> [8 8 8]", "(multlast [0 2 1]) -> [1 1 1]", "(multlast [8 1]) -> [1 1]", "(multlast [0]) -> [0]", "(multlast [4 0]) -> [0 0]", "(multlast [8 7 4 0]) -> [0 0 0 0]", "(multlast [3]) -> [3]", "(multlast []) -> []", "(multlast [5 8 0 7 1]) -> [1 1 1 1 1]", "(multlast [1 3 0 8]) -> [8 8 8 8]", "(multlast [2 2]) -> [2 2]", "(multlast [1 6 6]) -> [6 6 6]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.285869, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [3 9]) -> [9 9]", "(multlast [0 4 1]) -> [1 1 1]", "(multlast [0 7 4 1]) -> [1 1 1 1]", "(multlast []) -> []", "(multlast [5 8 5]) -> [5 5 5]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [0 2 1 4 2]) -> [2 2 2 2 2]", "(multlast [6 5 3 1]) -> [1 1 1 1]", "(multlast [4 1 8 4]) -> [4 4 4 4]", "(multlast [8 2 6 3 7]) -> [7 7 7 7 7]", "(multlast []) -> []", "(multlast [3 4 3]) -> [3 3 3]", "(multlast []) -> []", "(multlast [4 1]) -> [1 1]", "(multlast [3 3]) -> [3 3]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.225947, "examples": ["(multlast [2 2 1]) -> [1 1 1]", "(multlast [5 8]) -> [8 8]", "(multlast [4]) -> [4]", "(multlast [8]) -> [8]", "(multlast []) -> []", "(multlast [2 8 3 8 5]) -> [5 5 5 5 5]", "(multlast []) -> []", "(multlast [8 6 3]) -> [3 3 3]", "(multlast []) -> []", "(multlast [8 2]) -> [2 2]", "(multlast [8 9 8 8 7]) -> [7 7 7 7 7]", "(multlast [7 1 4 6 4]) -> [4 4 4 4 4]", "(multlast [7 2 9 5 1]) -> [1 1 1 1 1]", "(multlast [1 5 8]) -> [8 8 8]", "(multlast [1 2]) -> [2 2]", "(multlast [9]) -> [9]", "(multlast []) -> []", "(multlast [6]) -> [6]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.253031, "examples": ["(multlast []) -> []", "(multlast [6 7 4 0 6]) -> [6 6 6 6 6]", "(multlast [0 0 1]) -> [1 1 1]", "(multlast [8]) -> [8]", "(multlast [4]) -> [4]", "(multlast [6 7 6 8 2]) -> [2 2 2 2 2]", "(multlast [7 1]) -> [1 1]", "(multlast [8 7 5]) -> [5 5 5]", "(multlast [1 4 2 5]) -> [5 5 5 5]", "(multlast [2 6 4 9]) -> [9 9 9 9]", "(multlast [7 8 2 3 4]) -> [4 4 4 4 4]", "(multlast [8]) -> [8]", "(multlast [2 0 1]) -> [1 1 1]", "(multlast [8 7 7 3]) -> [3 3 3 3]", "(multlast [3 2 6]) -> [6 6 6]", "(multlast []) -> []", "(multlast [5 9]) -> [9 9]", "(multlast [7 1 6]) -> [6 6 6]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.232743, "examples": ["(multlast []) -> []", "(multlast [7]) -> [7]", "(multlast [8 8 0]) -> [0 0 0]", "(multlast []) -> []", "(multlast [7 8 7 0]) -> [0 0 0 0]", "(multlast [6 1 0 3]) -> [3 3 3 3]", "(multlast [9 2 4]) -> [4 4 4]", "(multlast [9 6 9 3]) -> [3 3 3 3]", "(multlast [6 6 9]) -> [9 9 9]", "(multlast [7 8 6 1 6]) -> [6 6 6 6 6]", "(multlast [1 8]) -> [8 8]", "(multlast [6 7 9 1]) -> [1 1 1 1]", "(multlast [2 2 4]) -> [4 4 4]", "(multlast [5 3 8 7 2]) -> [2 2 2 2 2]", "(multlast []) -> []", "(multlast [1 3 4 7]) -> [7 7 7 7]", "(multlast [5]) -> [5]", "(multlast [7 4 0]) -> [0 0 0]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.176727, "examples": ["(multlast [7]) -> [7]", "(multlast [9 6 3 2 7]) -> [7 7 7 7 7]", "(multlast [2 6 7 0 5]) -> [5 5 5 5 5]", "(multlast [2]) -> [2]", "(multlast [8 0 9 2]) -> [2 2 2 2]", "(multlast [8]) -> [8]", "(multlast [6 6 1 5 1]) -> [1 1 1 1 1]", "(multlast [6 4 9 0]) -> [0 0 0 0]", "(multlast [6]) -> [6]", "(multlast []) -> []", "(multlast [5 9 4 4]) -> [4 4 4 4]", "(multlast []) -> []", "(multlast [2 1]) -> [1 1]", "(multlast [1 2]) -> [2 2]", "(multlast [3]) -> [3]", "(multlast [2 1 3 7 2]) -> [2 2 2 2 2]", "(multlast []) -> []", "(multlast [0]) -> [0]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.156382, "examples": ["(multlast [7 7 4]) -> [4 4 4]", "(multlast [6]) -> [6]", "(multlast [1 3 1 6]) -> [6 6 6 6]", "(multlast [6 2 0 8 8]) -> [8 8 8 8 8]", "(multlast [5 7 4 4 9]) -> [9 9 9 9 9]", "(multlast [6 0]) -> [0 0]", "(multlast [7 5 5 0]) -> [0 0 0 0]", "(multlast [4 1 1]) -> [1 1 1]", "(multlast [4 7]) -> [7 7]", "(multlast [4]) -> [4]", "(multlast [8 2 0 5]) -> [5 5 5 5]", "(multlast [2 2 0]) -> [0 0 0]", "(multlast [4 8 5 5]) -> [5 5 5 5]", "(multlast [4 6]) -> [6 6]", "(multlast [7]) -> [7]", "(multlast [5 7 3 8]) -> [8 8 8 8]", "(multlast [3 3 5 0 8]) -> [8 8 8 8 8]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.1446, "examples": ["(multlast []) -> []", "(multlast [1 0]) -> [0 0]", "(multlast [1 3]) -> [3 3]", "(multlast []) -> []", "(multlast [4 8 4]) -> [4 4 4]", "(multlast [1]) -> [1]", "(multlast [1 9 0]) -> [0 0 0]", "(multlast []) -> []", "(multlast [4 3 1]) -> [1 1 1]", "(multlast [7 3]) -> [3 3]", "(multlast []) -> []", "(multlast [0 4 7 5 9]) -> [9 9 9 9 9]", "(multlast [8]) -> [8]", "(multlast [2 9 4 7 6]) -> [6 6 6 6 6]", "(multlast [8 1]) -> [1 1]", "(multlast []) -> []", "(multlast [5 9 7]) -> [7 7 7]", "(multlast [2]) -> [2]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.161386, "examples": ["(multlast []) -> []", "(multlast [5 5 6 4]) -> [4 4 4 4]", "(multlast [4]) -> [4]", "(multlast [9 2 1 6 1]) -> [1 1 1 1 1]", "(multlast [8 7]) -> [7 7]", "(multlast []) -> []", "(multlast [3 1 4 1 7]) -> [7 7 7 7 7]", "(multlast [2]) -> [2]", "(multlast [2]) -> [2]", "(multlast [2 1]) -> [1 1]", "(multlast []) -> []", "(multlast [8]) -> [8]", "(multlast [9 5 8 8]) -> [8 8 8 8]", "(multlast [5 7 0 4]) -> [4 4 4 4]", "(multlast [7 4 4 1]) -> [1 1 1 1]", "(multlast [2 2]) -> [2 2]", "(multlast [2]) -> [2]", "(multlast [4 2 6 6]) -> [6 6 6 6]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.162237, "examples": ["(multlast []) -> []", "(multlast [8 2]) -> [2 2]", "(multlast [5 5 2]) -> [2 2 2]", "(multlast []) -> []", "(multlast [9 1 1]) -> [1 1 1]", "(multlast [1 9 6]) -> [6 6 6]", "(multlast [6 1 0 8 0]) -> [0 0 0 0 0]", "(multlast [8]) -> [8]", "(multlast [7 0]) -> [0 0]", "(multlast [2]) -> [2]", "(multlast []) -> []", "(multlast [4]) -> [4]", "(multlast []) -> []", "(multlast [9 1]) -> [1 1]", "(multlast [8 6 4 9 7]) -> [7 7 7 7 7]", "(multlast []) -> []", "(multlast [7]) -> [7]", "(multlast [3 8 1 2]) -> [2 2 2 2]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.141109, "examples": ["(multlast [3 9 4 1 2]) -> [2 2 2 2 2]", "(multlast [8 2]) -> [2 2]", "(multlast [6]) -> [6]", "(multlast [7 1]) -> [1 1]", "(multlast [0 2 1 8]) -> [8 8 8 8]", "(multlast [4]) -> [4]", "(multlast [4 5]) -> [5 5]", "(multlast [9 0 8 5]) -> [5 5 5 5]", "(multlast [4 5 3 3 5]) -> [5 5 5 5 5]", "(multlast [6 3 1 2 1]) -> [1 1 1 1 1]", "(multlast [8 0]) -> [0 0]", "(multlast [6 5]) -> [5 5]", "(multlast [9 4]) -> [4 4]", "(multlast [0]) -> [0]", "(multlast [7]) -> [7]", "(multlast [6 6 2]) -> [2 2 2]", "(multlast []) -> []", "(multlast [1 5 7 4 5]) -> [5 5 5 5 5]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.153151, "examples": ["(multlast [9 1]) -> [1 1]", "(multlast [0]) -> [0]", "(multlast []) -> []", "(multlast [0]) -> [0]", "(multlast [2]) -> [2]", "(multlast [7 0]) -> [0 0]", "(multlast [2 2]) -> [2 2]", "(multlast [5 1]) -> [1 1]", "(multlast [7 6]) -> [6 6]", "(multlast []) -> []", "(multlast [3 0 6 7 2]) -> [2 2 2 2 2]", "(multlast [8]) -> [8]", "(multlast [2 5 3 0 7]) -> [7 7 7 7 7]", "(multlast []) -> []", "(multlast [3 1 0]) -> [0 0 0]", "(multlast [4]) -> [4]", "(multlast []) -> []", "(multlast [1 0 1]) -> [1 1 1]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.142292, "examples": ["(multlast [4 4 1]) -> [1 1 1]", "(multlast [9 8 1]) -> [1 1 1]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [9]) -> [9]", "(multlast []) -> []", "(multlast [9 0 6]) -> [6 6 6]", "(multlast [1 5]) -> [5 5]", "(multlast [5]) -> [5]", "(multlast [5 1 4 8 7]) -> [7 7 7 7 7]", "(multlast [2]) -> [2]", "(multlast [4 8 7]) -> [7 7 7]", "(multlast [5 7]) -> [7 7]", "(multlast [5 9 1]) -> [1 1 1]", "(multlast [2 4]) -> [4 4]", "(multlast [2 1 5]) -> [5 5 5]", "(multlast [2 4 1 5]) -> [5 5 5 5]", "(multlast []) -> []"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)", "name": "multlast", "time": 0.170982, "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [1 1]) -> [1 1]", "(multlast []) -> []", "(multlast [6 0 5 7]) -> [7 7 7 7]", "(multlast [1 0 5 9 7]) -> [7 7 7 7 7]", "(multlast [1]) -> [1]", "(multlast [1 5 0 4 0]) -> [0 0 0 0 0]", "(multlast [5 1]) -> [1 1]", "(multlast [7]) -> [7]", "(multlast [1 2]) -> [2 2]", "(multlast [9 5 2 0 8]) -> [8 8 8 8 8]", "(multlast [5 2 0]) -> [0 0 0]", "(multlast [5 1 6 0 4]) -> [4 4 4 4 4]", "(multlast [8 4 4 4 4]) -> [4 4 4 4 4]", "(multlast [8]) -> [8]", "(multlast [4 5 7 6 5]) -> [5 5 5 5 5]", "(multlast [9 1 0 2 8]) -> [8 8 8 8 8]"]}
{"solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) b)) _) _)", "name": "multlast", "time": 0.423033, "examples": ["(multlast [2]) -> [2]", "(multlast [6 6 0]) -> [0 0 0]", "(multlast [2 4 7]) -> [7 7 7]", "(multlast [5 6 3 3]) -> [3 3 3 3]", "(multlast [4 0]) -> [0 0]", "(multlast [2 0]) -> [0 0]", "(multlast [9 9 7 0]) -> [0 0 0 0]", "(multlast [9 8 5]) -> [5 5 5]", "(multlast [4 3 3]) -> [3 3 3]", "(multlast [4 1 3 0 0]) -> [0 0 0 0 0]", "(multlast [5 9 6]) -> [6 6 6]", "(multlast [3 3 0 5]) -> [5 5 5 5]", "(multlast [9 5 6]) -> [6 6 6]", "(multlast [6]) -> [6]", "(multlast [0 4 9 7 0]) -> [0 0 0 0 0]", "(multlast [7 1 0 6]) -> [6 6 6 6]", "(multlast [7 3]) -> [3 3]", "(multlast [4 2 9]) -> [9 9 9]"]}
