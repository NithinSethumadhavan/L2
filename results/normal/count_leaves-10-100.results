{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {5}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {1}) -> 1", "(count_leaves {6}) -> 1", "(count_leaves {1 {3}}) -> 1", "(count_leaves {3 {0}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {1}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) 1) 0)) _) _)", "time": 0.041694}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {5 {0}}) -> 1", "(count_leaves {4}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {9 {7}}) -> 1", "(count_leaves {0}) -> 1", "(count_leaves {0 {2} {1}}) -> 2", "(count_leaves {4 {3} {9}}) -> 2", "(count_leaves {0}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.66784}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8 {7} {7 {8 {8}}}}) -> 2", "(count_leaves {5}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {4 {2}}) -> 1", "(count_leaves {4}) -> 1", "(count_leaves {8}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.664108}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {2}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {8 {4} {5}}) -> 2", "(count_leaves {9 {2} {5}}) -> 2", "(count_leaves {7 {6 {0} {2}}}) -> 2", "(count_leaves {1}) -> 1", "(count_leaves {8}) -> 1", "(count_leaves {3 {0 {7} {3}}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.684621}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {1 {8 {0} {1}} {8 {9} {2}}}) -> 4", "(count_leaves {}) -> 0", "(count_leaves {1 {2 {6 {4}} {5 {7}}}}) -> 2", "(count_leaves {0 {3}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {3 {3} {0}}) -> 2", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.6868}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {9 {7} {4}}) -> 2", "(count_leaves {4 {6}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {4 {9 {5}}}) -> 1", "(count_leaves {6 {5} {1}}) -> 2", "(count_leaves {0}) -> 1", "(count_leaves {6 {3 {6} {9}}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.677895}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {3 {6}}) -> 1", "(count_leaves {5 {6 {9}}}) -> 1", "(count_leaves {7}) -> 1", "(count_leaves {6 {6} {0}}) -> 2", "(count_leaves {2 {2} {2 {1 {7}}}}) -> 2", "(count_leaves {2 {6}}) -> 1", "(count_leaves {0 {7} {5}}) -> 2", "(count_leaves {6}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.674169}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {0 {3 {1 {2} {1}}} {1}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {5 {1 {8} {4}} {4}}) -> 3", "(count_leaves {5 {1}}) -> 1", "(count_leaves {8 {1} {6}}) -> 2", "(count_leaves {4 {9}}) -> 1", "(count_leaves {0}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.700843}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {5}) -> 1", "(count_leaves {8 {5}}) -> 1", "(count_leaves {5 {5}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {8}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {8}) -> 1", "(count_leaves {8 {4 {5} {4}} {9 {6} {7}}}) -> 4"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.859396}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8}) -> 1", "(count_leaves {6 {4} {1}}) -> 2", "(count_leaves {6}) -> 1", "(count_leaves {2}) -> 1", "(count_leaves {6}) -> 1", "(count_leaves {2 {4} {2}}) -> 2", "(count_leaves {7}) -> 1", "(count_leaves {1 {6 {3 {3} {0}}}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.868359}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8}) -> 1", "(count_leaves {1}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {3}) -> 1", "(count_leaves {7 {6}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {0}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) 1) 0)) _) _)", "time": 0.031159}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {9 {2} {4}}) -> 2", "(count_leaves {9}) -> 1", "(count_leaves {7}) -> 1", "(count_leaves {7}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {9}) -> 1", "(count_leaves {5 {3} {5}}) -> 2", "(count_leaves {9}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.888075}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {0}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {1 {3}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {9 {8}}) -> 1", "(count_leaves {5 {5 {8} {5 {4} {3}}}}) -> 3", "(count_leaves {9 {9}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.884942}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {5 {2}}) -> 1", "(count_leaves {1 {0} {8 {6} {6}}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {0 {2} {6 {5} {6}}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {2 {1 {5} {1}}}) -> 2", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.863939}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {7 {3}}) -> 1", "(count_leaves {7}) -> 1", "(count_leaves {6}) -> 1", "(count_leaves {2 {3 {0 {3} {4}} {4}} {3 {0 {3}} {4 {7} {5}}}}) -> 6", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.907031}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {9 {5 {8} {2}} {5 {2} {4}}}) -> 4", "(count_leaves {9 {1} {8}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {9 {3}}) -> 1", "(count_leaves {9 {9 {2}} {8 {8}}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.908155}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {9 {9 {9} {0}}}) -> 2", "(count_leaves {6 {2} {2}}) -> 2", "(count_leaves {5}) -> 1", "(count_leaves {7 {6}}) -> 1", "(count_leaves {8}) -> 1", "(count_leaves {0 {4} {6}}) -> 2", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.934223}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {9}) -> 1", "(count_leaves {0 {9 {5 {9}} {3}}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {6 {7 {6 {1}}} {8}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {9 {8 {0}} {9 {0}}}) -> 2", "(count_leaves {6}) -> 1", "(count_leaves {9}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.742001}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {8 {7}}) -> 1", "(count_leaves {6}) -> 1", "(count_leaves {9}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {5}) -> 1", "(count_leaves {5}) -> 1", "(count_leaves {5}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) 1) 0)) _) _)", "time": 0.054934}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {3 {1 {6 {8} {7}} {5 {9} {7}}} {1 {3 {4}}}}) -> 5", "(count_leaves {7 {1 {7} {0}}}) -> 2", "(count_leaves {6}) -> 1", "(count_leaves {9}) -> 1", "(count_leaves {6 {1}}) -> 1", "(count_leaves {4 {8 {8}} {6}}) -> 2", "(count_leaves {4}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.597021}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {4}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {4}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {1 {2 {1} {9}} {2 {9}}}) -> 3", "(count_leaves {9 {3} {4 {6 {0}}}}) -> 2", "(count_leaves {9 {4} {1}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.550038}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {2}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {6 {4}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {3 {6 {7} {8 {3}}} {6 {3 {0}} {3 {0} {9}}}}) -> 5", "(count_leaves {7}) -> 1", "(count_leaves {8 {1} {4 {1 {0}}}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.597279}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {1 {8 {9 {1}}}}) -> 1", "(count_leaves {6 {8}}) -> 1", "(count_leaves {4}) -> 1", "(count_leaves {0 {2}}) -> 1", "(count_leaves {4 {8}}) -> 1", "(count_leaves {7 {5} {1 {9} {0}}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {8}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.603152}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8}) -> 1", "(count_leaves {1}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {2 {1 {5}}}) -> 1", "(count_leaves {2}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {9 {5 {7}}}) -> 1", "(count_leaves {7 {7} {5}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.535171}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {2}) -> 1", "(count_leaves {7 {7 {2} {5}}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {8 {4} {4 {5}}}) -> 2", "(count_leaves {6}) -> 1", "(count_leaves {2 {9 {7} {6 {5} {6}}} {0 {7 {0}}}}) -> 4", "(count_leaves {8 {2} {5}}) -> 2", "(count_leaves {9}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.485009}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {3 {4 {2}}}) -> 1", "(count_leaves {0 {9}}) -> 1", "(count_leaves {7}) -> 1", "(count_leaves {0 {5 {1} {0}} {1 {9}}}) -> 3", "(count_leaves {9 {2 {0} {7}}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {7 {9 {7}} {5}}) -> 2", "(count_leaves {0}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.724182}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {3 {8 {6 {8} {6}} {6 {1} {6}}} {6}}) -> 5", "(count_leaves {6 {1 {6}}}) -> 1", "(count_leaves {1 {7} {0 {6} {6}}}) -> 3", "(count_leaves {0}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.822427}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {6 {5}}) -> 1", "(count_leaves {6}) -> 1", "(count_leaves {0 {7} {8}}) -> 2", "(count_leaves {4 {3} {8}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {8}) -> 1", "(count_leaves {2 {4}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.859062}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {5 {2}}) -> 1", "(count_leaves {2 {9 {3}}}) -> 1", "(count_leaves {3}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {4 {2} {0 {0}}}) -> 2", "(count_leaves {4}) -> 1", "(count_leaves {4}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.88543}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {5 {1 {0}}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {8 {2 {5 {5} {6}}} {5 {7 {5} {3}} {7 {3}}}}) -> 5", "(count_leaves {8}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {9}) -> 1", "(count_leaves {5}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.490673}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {4}) -> 1", "(count_leaves {6 {2 {5 {1}}} {6 {4 {4}} {3}}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {5}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {7 {8}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.995719}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {7 {3 {1} {5}} {4 {5}}}) -> 3", "(count_leaves {7}) -> 1", "(count_leaves {9}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {1 {1 {5}} {9 {2}}}) -> 2", "(count_leaves {2}) -> 1", "(count_leaves {8 {6 {1}} {4}}) -> 2", "(count_leaves {3 {3} {2}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.477893}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {6 {9} {8}}) -> 2", "(count_leaves {8 {1 {0 {3}} {7 {5} {9}}} {1 {9} {1}}}) -> 5", "(count_leaves {4 {4} {1}}) -> 2", "(count_leaves {3}) -> 1", "(count_leaves {6}) -> 1", "(count_leaves {1}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.931138}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {1 {9}}) -> 1", "(count_leaves {5}) -> 1", "(count_leaves {3 {8}}) -> 1", "(count_leaves {9 {7 {3}} {1}}) -> 2", "(count_leaves {3 {6 {5}}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {6 {0}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.476918}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {7 {7 {6} {0 {2}}}}) -> 2", "(count_leaves {2}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {8 {0 {5}} {7 {9} {5}}}) -> 3", "(count_leaves {4 {7}}) -> 1", "(count_leaves {4}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 1.003241}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8 {4 {6} {2 {5} {8}}}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {7 {6}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {6 {3 {8}}}) -> 1", "(count_leaves {5}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.956575}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {6 {7} {8}}) -> 2", "(count_leaves {1 {6} {0}}) -> 2", "(count_leaves {8 {7}}) -> 1", "(count_leaves {2}) -> 1", "(count_leaves {6 {3 {9} {0 {6} {4}}}}) -> 3"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.99388}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {6 {5}}) -> 1", "(count_leaves {0}) -> 1", "(count_leaves {7 {9 {2 {6} {2}} {8 {8}}}}) -> 3", "(count_leaves {7}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {0 {8} {3}}) -> 2", "(count_leaves {7 {6} {1}}) -> 2", "(count_leaves {9 {4}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.493841}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {1 {9} {2 {0 {6}} {1 {3}}}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {0 {2 {2} {5}}}) -> 2", "(count_leaves {4 {2 {1} {4 {1}}}}) -> 2", "(count_leaves {5 {9 {8 {3} {8}}}}) -> 2", "(count_leaves {2 {3 {6} {6 {0} {1}}} {2 {0 {2}} {2}}}) -> 5"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.897828}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {1 {3 {5}}}) -> 1", "(count_leaves {3 {4}}) -> 1", "(count_leaves {8 {6}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {4}) -> 1", "(count_leaves {3 {2 {7} {6}} {1}}) -> 3", "(count_leaves {8 {3} {3}}) -> 2", "(count_leaves {9 {4} {9}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.707522}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {0}) -> 1", "(count_leaves {1}) -> 1", "(count_leaves {7}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {1 {0 {3 {4}}}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {3 {5}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) 1) 0)) _) _)", "time": 0.043193}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {9 {8} {1}}) -> 2", "(count_leaves {3 {3} {8 {7} {1}}}) -> 3", "(count_leaves {2 {1 {9} {2}}}) -> 2", "(count_leaves {8 {7} {3}}) -> 2", "(count_leaves {9 {6 {1 {8}}}}) -> 1", "(count_leaves {6}) -> 1", "(count_leaves {3}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.569119}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {8}) -> 1", "(count_leaves {9}) -> 1", "(count_leaves {7}) -> 1", "(count_leaves {9}) -> 1", "(count_leaves {0 {6} {2 {4}}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.730042}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {8}) -> 1", "(count_leaves {4 {7 {3 {1} {4}}} {6 {9} {3 {5} {1}}}}) -> 5", "(count_leaves {8}) -> 1", "(count_leaves {2}) -> 1", "(count_leaves {4}) -> 1", "(count_leaves {9 {3 {9} {1}} {5}}) -> 3", "(count_leaves {9}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.616469}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {1}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {2 {3 {4}} {8 {8}}}) -> 2", "(count_leaves {0 {8} {7}}) -> 2", "(count_leaves {5}) -> 1", "(count_leaves {6 {6}}) -> 1", "(count_leaves {1 {2} {7 {2}}}) -> 2", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.549794}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {5}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {0 {4}}) -> 1", "(count_leaves {9 {8} {6 {0} {4}}}) -> 3", "(count_leaves {9 {7 {0 {2}}}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {3 {5 {8} {3}}}) -> 2", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.456111}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {1}) -> 1", "(count_leaves {8 {3}}) -> 1", "(count_leaves {4 {7}}) -> 1", "(count_leaves {7}) -> 1", "(count_leaves {5}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {5 {9} {9}}) -> 2", "(count_leaves {3 {2}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.481059}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {5}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {4 {6} {6}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {1 {5} {6}}) -> 2", "(count_leaves {1 {3 {1}}}) -> 1", "(count_leaves {0 {8} {2 {7} {5}}}) -> 3", "(count_leaves {3}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.445994}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {1}) -> 1", "(count_leaves {2 {0 {7 {9}} {1 {7}}} {2 {6 {2} {4}}}}) -> 4", "(count_leaves {6 {2 {7} {3}} {2 {5} {2}}}) -> 4", "(count_leaves {7 {1 {5}} {7}}) -> 2", "(count_leaves {5}) -> 1", "(count_leaves {4}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.435966}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {0 {8} {2}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {2 {1}}) -> 1", "(count_leaves {6 {4}}) -> 1", "(count_leaves {7 {2}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {9}) -> 1", "(count_leaves {8 {0 {2} {3}}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.922239}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {0 {2 {9} {3}}}) -> 2", "(count_leaves {5 {2}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {3 {3 {0} {6 {0}}}}) -> 2", "(count_leaves {1 {2}}) -> 1", "(count_leaves {5 {2} {9}}) -> 2", "(count_leaves {8 {5} {0}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.883166}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {3}) -> 1", "(count_leaves {6 {1} {1}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {6}) -> 1", "(count_leaves {6 {2} {0 {6}}}) -> 2", "(count_leaves {0 {2} {0 {8 {7}}}}) -> 2", "(count_leaves {1}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.860224}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8 {5 {4 {0} {9}}} {0 {2 {4} {6}}}}) -> 4", "(count_leaves {9 {6}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {9 {9 {2} {7}} {3 {1}}}) -> 3", "(count_leaves {0 {6 {7} {0}} {8 {5}}}) -> 3", "(count_leaves {1 {0} {4}}) -> 2", "(count_leaves {0}) -> 1", "(count_leaves {6 {8}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.894069}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {6 {0} {3 {1} {3}}}) -> 3", "(count_leaves {9 {4 {6 {6}}} {3 {7 {6} {7}}}}) -> 3", "(count_leaves {6 {3 {0} {1}} {2 {4} {5}}}) -> 4", "(count_leaves {8 {3} {0}}) -> 2", "(count_leaves {2}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {0 {4 {2} {4}} {1 {3} {9}}}) -> 4", "(count_leaves {6}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.95094}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {8 {0 {8} {6 {2} {1}}}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {9}) -> 1", "(count_leaves {8 {7 {5}}}) -> 1", "(count_leaves {7 {7 {0}} {3}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.949827}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {7}) -> 1", "(count_leaves {2}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {5 {8 {1}} {1 {5}}}) -> 2", "(count_leaves {2 {7 {5 {8}} {9 {9}}} {5}}) -> 3", "(count_leaves {7 {7 {4} {6}}}) -> 2", "(count_leaves {7 {1} {8}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.43732}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {6}) -> 1", "(count_leaves {8}) -> 1", "(count_leaves {5 {6} {3}}) -> 2", "(count_leaves {0}) -> 1", "(count_leaves {1}) -> 1", "(count_leaves {9}) -> 1", "(count_leaves {5 {6 {0 {5}} {0 {0}}} {3 {4 {4} {0}}}}) -> 4", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.684737}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8 {7}}) -> 1", "(count_leaves {8 {1} {3}}) -> 2", "(count_leaves {2 {2}}) -> 1", "(count_leaves {1 {7 {4}} {2 {9} {3}}}) -> 3", "(count_leaves {9 {0 {7}} {7 {3} {4}}}) -> 3", "(count_leaves {9}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {0 {4} {7}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.617007}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {1 {1 {5} {9}} {6 {9} {3}}}) -> 4", "(count_leaves {8 {5} {6 {4}}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {8 {7 {2} {9 {3} {6}}} {0 {7 {2}} {1}}}) -> 5", "(count_leaves {9}) -> 1", "(count_leaves {0 {2}}) -> 1", "(count_leaves {4}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.544317}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {6 {8 {7}}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {9}) -> 1", "(count_leaves {5 {6 {0 {1}} {5}} {0 {2} {8 {8} {7}}}}) -> 5", "(count_leaves {0 {5 {0}} {9 {8 {3}}}}) -> 2", "(count_leaves {1 {7 {3} {9}}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {7 {4}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.782265}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {2 {9}}) -> 1", "(count_leaves {1}) -> 1", "(count_leaves {7 {6 {6}} {0}}) -> 2", "(count_leaves {2 {0 {6 {6} {8}} {1 {3} {1}}}}) -> 4", "(count_leaves {}) -> 0", "(count_leaves {9 {9}}) -> 1", "(count_leaves {9}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.539408}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {2 {3 {9}}}) -> 1", "(count_leaves {5}) -> 1", "(count_leaves {5}) -> 1", "(count_leaves {2 {6 {3} {7}} {7 {9 {2} {6}}}}) -> 4", "(count_leaves {3}) -> 1", "(count_leaves {0 {3 {0} {1 {6} {3}}} {4}}) -> 4", "(count_leaves {2 {7}}) -> 1", "(count_leaves {4 {2 {1}} {9}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.721961}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {6 {8 {8}} {7 {7} {4}}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {4 {3 {5} {7}}}) -> 2", "(count_leaves {8 {8} {6 {7} {4}}}) -> 3", "(count_leaves {8}) -> 1", "(count_leaves {1}) -> 1", "(count_leaves {4}) -> 1", "(count_leaves {4 {9}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.670531}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {0 {1 {5}}}) -> 1", "(count_leaves {1}) -> 1", "(count_leaves {3 {7 {3} {6}} {0 {7}}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {1}) -> 1", "(count_leaves {2 {8 {9} {1}} {5}}) -> 3", "(count_leaves {9 {6 {6} {3}} {6 {3} {3}}}) -> 4", "(count_leaves {3 {9 {7} {2}} {5}}) -> 3"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.492486}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {3 {4 {4 {5}}} {4}}) -> 2", "(count_leaves {0 {3} {2}}) -> 2", "(count_leaves {1}) -> 1", "(count_leaves {6 {4 {1 {3} {3}}}}) -> 2", "(count_leaves {9 {6} {2}}) -> 2", "(count_leaves {1 {9 {9 {5} {9}} {4 {7}}} {7 {4 {7} {1}}}}) -> 5", "(count_leaves {}) -> 0", "(count_leaves {3 {6 {3 {8} {6}} {7}} {4}}) -> 4"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.764713}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {0}) -> 1", "(count_leaves {6 {4 {8}} {0}}) -> 2", "(count_leaves {8}) -> 1", "(count_leaves {4 {9}}) -> 1", "(count_leaves {1}) -> 1", "(count_leaves {6 {9} {2}}) -> 2", "(count_leaves {8}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.764705}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {5 {1 {3 {6}}}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {3 {9 {8} {1}} {7 {4}}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {9 {0}}) -> 1", "(count_leaves {9 {8}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {8 {2}}) -> 1"], "time": "timeout"}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {2 {1}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {9 {0 {5} {0}}}) -> 2", "(count_leaves {7 {1 {7}}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {5}) -> 1", "(count_leaves {4 {7} {0}}) -> 2", "(count_leaves {0}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.5389}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8 {4} {7}}) -> 2", "(count_leaves {3 {3 {5} {3}} {6 {8} {0}}}) -> 4", "(count_leaves {1 {4}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {8}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {2 {7}}) -> 1", "(count_leaves {4 {8} {3}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.520698}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {6 {4} {6}}) -> 2", "(count_leaves {6 {3 {3} {8}}}) -> 2", "(count_leaves {5}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {9}) -> 1", "(count_leaves {0}) -> 1", "(count_leaves {5 {9} {4}}) -> 2", "(count_leaves {3}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.557722}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {9 {1 {0} {2}} {5 {6}}}) -> 3", "(count_leaves {7}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {8}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {6}) -> 1", "(count_leaves {8}) -> 1", "(count_leaves {3 {4} {4}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.85798}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {1 {5 {1 {7} {2}} {9 {1} {0}}}}) -> 4", "(count_leaves {9 {9 {9 {2}} {4}} {5}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {0 {3}}) -> 1", "(count_leaves {8 {7 {9}}}) -> 1", "(count_leaves {5 {1} {5}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {9}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.863596}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {1 {7 {2}}}) -> 1", "(count_leaves {6}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {1}) -> 1", "(count_leaves {8 {1} {7}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.80387}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {5 {5}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {1 {4 {0}}}) -> 1", "(count_leaves {6 {5} {4}}) -> 2", "(count_leaves {8 {3 {1 {7}}}}) -> 1", "(count_leaves {5 {0} {9}}) -> 2", "(count_leaves {3}) -> 1", "(count_leaves {7}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.871485}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {9}) -> 1", "(count_leaves {4 {8 {6}} {7 {7} {2}}}) -> 3", "(count_leaves {5 {9} {2 {3}}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {6 {3} {4}}) -> 2", "(count_leaves {8}) -> 1", "(count_leaves {8}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.532626}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {6}) -> 1", "(count_leaves {5 {3}}) -> 1", "(count_leaves {6 {1} {2 {9 {5}} {2}}}) -> 3", "(count_leaves {8 {3 {0 {3} {8}} {1 {7}}}}) -> 3", "(count_leaves {0 {0 {6 {1}} {6 {2} {9}}}}) -> 3"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.818477}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {5 {5 {8} {1}} {2 {8}}}) -> 3", "(count_leaves {1}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {3 {9} {6}}) -> 2", "(count_leaves {7}) -> 1", "(count_leaves {1}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.88622}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {6 {4} {3}}) -> 2", "(count_leaves {3}) -> 1", "(count_leaves {2}) -> 1", "(count_leaves {3 {7} {8 {6}}}) -> 2", "(count_leaves {9 {7 {5 {7}} {0 {7}}} {7 {7 {1} {3}} {5}}}) -> 5", "(count_leaves {}) -> 0", "(count_leaves {9 {6}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.761791}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {3 {0} {1}}) -> 2", "(count_leaves {5 {2 {9} {5}} {1}}) -> 3", "(count_leaves {5 {9}}) -> 1", "(count_leaves {8 {7 {9} {7}} {8 {2} {0}}}) -> 4", "(count_leaves {9}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {2 {8 {9} {4}} {0}}) -> 3", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.468855}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {4 {2 {9 {9}}} {6 {9}}}) -> 2", "(count_leaves {6 {1 {5}}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {4}) -> 1", "(count_leaves {7}) -> 1", "(count_leaves {6}) -> 1", "(count_leaves {0 {8} {4}}) -> 2", "(count_leaves {7 {6} {1}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.541546}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8}) -> 1", "(count_leaves {5}) -> 1", "(count_leaves {2}) -> 1", "(count_leaves {3 {6} {3 {0}}}) -> 2", "(count_leaves {8 {6 {1} {8}} {3}}) -> 3", "(count_leaves {5 {0 {2}} {0 {7 {7} {3}} {2}}}) -> 4", "(count_leaves {2}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.553309}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {9 {4} {3}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {6}) -> 1", "(count_leaves {2}) -> 1", "(count_leaves {9}) -> 1", "(count_leaves {5 {3} {2}}) -> 2", "(count_leaves {0}) -> 1", "(count_leaves {2 {1} {8}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.531892}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {4 {3} {1}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {9 {9} {1 {4}}}) -> 2", "(count_leaves {3}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {6}) -> 1", "(count_leaves {3}) -> 1", "(count_leaves {9 {8 {6} {2}}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.519529}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {4}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {1}) -> 1", "(count_leaves {7 {4 {2} {1}} {7 {6} {7}}}) -> 4", "(count_leaves {5 {6 {0}}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {9 {4} {6}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.726338}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {9 {9}}) -> 1", "(count_leaves {3}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {6 {5 {2} {8}} {3 {8} {4}}}) -> 4", "(count_leaves {}) -> 0", "(count_leaves {7}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.697053}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {4 {0}}) -> 1", "(count_leaves {3 {4}}) -> 1", "(count_leaves {9}) -> 1", "(count_leaves {2}) -> 1", "(count_leaves {9 {5 {7 {7} {7}} {9}} {0}}) -> 4", "(count_leaves {9 {1} {8}}) -> 2", "(count_leaves {6}) -> 1", "(count_leaves {3 {3} {3}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.661077}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {6}) -> 1", "(count_leaves {7 {2} {6}}) -> 2", "(count_leaves {5 {6} {3 {2}}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {3}) -> 1", "(count_leaves {6}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {0 {8}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.645082}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {7 {8} {5}}) -> 2", "(count_leaves {7 {2} {6}}) -> 2", "(count_leaves {4}) -> 1", "(count_leaves {5 {9} {3 {9 {3} {1}} {1 {0} {4}}}}) -> 5", "(count_leaves {6 {8}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {6}) -> 1", "(count_leaves {8 {0 {8} {7}}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.5695}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {2}) -> 1", "(count_leaves {6 {4}}) -> 1", "(count_leaves {2 {4}}) -> 1", "(count_leaves {1 {7} {4}}) -> 2", "(count_leaves {1 {6 {7} {2 {3}}}}) -> 2", "(count_leaves {4 {9 {4}} {8 {5 {2}} {9 {0}}}}) -> 3", "(count_leaves {8 {9 {6 {3} {2}} {7 {0} {6}}}}) -> 4", "(count_leaves {5 {6} {4}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.650538}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {6}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {2}) -> 1", "(count_leaves {5 {8}}) -> 1", "(count_leaves {3 {1}}) -> 1", "(count_leaves {2 {9}}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) 1) 0)) _) _)", "time": 0.027782}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {3 {3 {1}} {0 {1}}}) -> 2", "(count_leaves {0 {7} {2}}) -> 2", "(count_leaves {1 {7}}) -> 1", "(count_leaves {0 {4}}) -> 1", "(count_leaves {5 {6}}) -> 1", "(count_leaves {8 {5} {0}}) -> 2", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.613753}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {1 {9}}) -> 1", "(count_leaves {6 {6 {1 {5} {1}}}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {1 {1} {6}}) -> 2", "(count_leaves {6 {7} {7}}) -> 2", "(count_leaves {0}) -> 1", "(count_leaves {1}) -> 1", "(count_leaves {3 {5 {7} {1}} {3 {7}}}) -> 3"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.641431}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {3}) -> 1", "(count_leaves {0}) -> 1", "(count_leaves {7 {0 {1}} {1 {5} {4}}}) -> 3", "(count_leaves {6 {0} {9 {6 {1} {7}} {1 {7}}}}) -> 4", "(count_leaves {6 {1 {4} {9 {9}}}}) -> 2", "(count_leaves {6 {5}}) -> 1", "(count_leaves {3 {7 {2 {1}}} {5}}) -> 2", "(count_leaves {7 {0} {2}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.502956}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {9 {5 {6 {3} {6}}} {7 {8 {2}} {2 {2} {1}}}}) -> 5", "(count_leaves {}) -> 0", "(count_leaves {0}) -> 1", "(count_leaves {3}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {7 {1} {5}}) -> 2", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.560107}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {0 {9 {9} {4}} {0 {1}}}) -> 3", "(count_leaves {9}) -> 1", "(count_leaves {7}) -> 1", "(count_leaves {8}) -> 1", "(count_leaves {7}) -> 1", "(count_leaves {3 {3}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.45427}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {0 {4} {8}}) -> 2", "(count_leaves {4 {7}}) -> 1", "(count_leaves {1 {3} {3}}) -> 2", "(count_leaves {4}) -> 1", "(count_leaves {7}) -> 1", "(count_leaves {3}) -> 1", "(count_leaves {4 {3}}) -> 1", "(count_leaves {3 {8 {0}}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.326637}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {6 {0}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {0 {4 {6} {4}} {4 {8}}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {7 {0 {8 {8}}}}) -> 1", "(count_leaves {0}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.481266}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {0}) -> 1", "(count_leaves {2 {0 {0 {9}}} {7}}) -> 2", "(count_leaves {0 {4} {1 {9} {4}}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {2 {3} {0}}) -> 2", "(count_leaves {8}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {1 {0}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.288491}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {5 {0} {9}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {6}) -> 1", "(count_leaves {4}) -> 1", "(count_leaves {9 {5 {1}}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {8 {5}}) -> 1", "(count_leaves {3 {4} {0}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.335604}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {5 {7}}) -> 1", "(count_leaves {3 {2}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {4 {0}}) -> 1", "(count_leaves {2 {5 {6} {3}} {1 {7} {4}}}) -> 4", "(count_leaves {}) -> 0", "(count_leaves {6 {6 {0 {9}}}}) -> 1", "(count_leaves {3 {9} {1}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.28625}
