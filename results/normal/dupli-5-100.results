{"examples": ["(dupli []) -> []", "(dupli [0 3 1 4]) -> [0 0 3 3 1 1 4 4]", "(dupli [4 4 2]) -> [4 4 4 4 2 2]", "(dupli [7 7 0 2]) -> [7 7 7 7 0 0 2 2]"], "time": 0.211566, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [5 1 7]) -> [5 5 1 1 7 7]", "(dupli [5 8 9]) -> [5 5 8 8 9 9]"], "time": 0.204865, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1]) -> [1 1]", "(dupli [6 6 4 2]) -> [6 6 6 6 4 4 2 2]", "(dupli [3]) -> [3 3]"], "time": 0.236283, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8]) -> [8 8]", "(dupli [4 4 0 8 2]) -> [4 4 4 4 0 0 8 8 2 2]", "(dupli [1]) -> [1 1]"], "time": 0.200191, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [9]) -> [9 9]", "(dupli [2 4 8 8]) -> [2 2 4 4 8 8 8 8]"], "time": 0.203998, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7]) -> [7 7]", "(dupli [9]) -> [9 9]", "(dupli [1 1 0]) -> [1 1 1 1 0 0]"], "time": 0.185176, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [0 4 6 5]) -> [0 0 4 4 6 6 5 5]", "(dupli [5 0 5]) -> [5 5 0 0 5 5]"], "time": 0.225235, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [0]) -> [0 0]", "(dupli [7 3 8]) -> [7 7 3 3 8 8]"], "time": 0.213699, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5 4]) -> [5 5 4 4]", "(dupli [8 5 5]) -> [8 8 5 5 5 5]", "(dupli [5 8]) -> [5 5 8 8]"], "time": 0.222466, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 7 5 7 6]) -> [6 6 7 7 5 5 7 7 6 6]", "(dupli [6 9 6 9 9]) -> [6 6 9 9 6 6 9 9 9 9]", "(dupli [0 5]) -> [0 0 5 5]"], "time": 0.204895, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1 2]) -> [1 1 2 2]", "(dupli []) -> []", "(dupli [9 6 5]) -> [9 9 6 6 5 5]"], "time": 0.190737, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 9]) -> [9 9 9 9]", "(dupli [8 2 1]) -> [8 8 2 2 1 1]", "(dupli [4 1 2]) -> [4 4 1 1 2 2]"], "time": 0.182503, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli []) -> []", "(dupli [4 0 9 9 1]) -> [4 4 0 0 9 9 9 9 1 1]"], "time": 0.208825, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 7]) -> [3 3 7 7]", "(dupli [3 8 6 9]) -> [3 3 8 8 6 6 9 9]", "(dupli [9]) -> [9 9]"], "time": 0.197258, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2]) -> [2 2]", "(dupli [7 1 8 3 0]) -> [7 7 1 1 8 8 3 3 0 0]", "(dupli [3 9 0 7 0]) -> [3 3 9 9 0 0 7 7 0 0]"], "time": 0.191927, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 2 2 8 2]) -> [3 3 2 2 2 2 8 8 2 2]", "(dupli [3 5 3]) -> [3 3 5 5 3 3]", "(dupli [4 6]) -> [4 4 6 6]"], "time": 0.19371, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 5 1 3 5]) -> [4 4 5 5 1 1 3 3 5 5]", "(dupli [8 9 7 3]) -> [8 8 9 9 7 7 3 3]", "(dupli [3 9 0 9 1]) -> [3 3 9 9 0 0 9 9 1 1]"], "time": 0.207819, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 7]) -> [0 0 7 7]", "(dupli []) -> []", "(dupli []) -> []"], "time": 0.201296, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0]) -> [0 0]", "(dupli []) -> []", "(dupli [5 7 9 9]) -> [5 5 7 7 9 9 9 9]"], "time": 0.188779, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 1 0 6]) -> [9 9 1 1 0 0 6 6]", "(dupli [5 2 7 4]) -> [5 5 2 2 7 7 4 4]", "(dupli [4]) -> [4 4]"], "time": 0.202274, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 3 3]) -> [9 9 3 3 3 3]", "(dupli [3]) -> [3 3]", "(dupli [1 0 9 7 1]) -> [1 1 0 0 9 9 7 7 1 1]"], "time": 0.220523, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 7 0]) -> [6 6 7 7 0 0]", "(dupli [8 5 3 7 8]) -> [8 8 5 5 3 3 7 7 8 8]", "(dupli [4 5 8 9]) -> [4 4 5 5 8 8 9 9]"], "time": 0.200274, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 2 5 6 8]) -> [2 2 2 2 5 5 6 6 8 8]", "(dupli []) -> []", "(dupli [8 5 1]) -> [8 8 5 5 1 1]"], "time": 0.219338, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1 5]) -> [1 1 5 5]", "(dupli []) -> []", "(dupli [8 6]) -> [8 8 6 6]"], "time": 0.182546, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 8]) -> [0 0 8 8]", "(dupli [8 0 6 6]) -> [8 8 0 0 6 6 6 6]", "(dupli []) -> []"], "time": 0.20075, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5]) -> [5 5]", "(dupli [2 1 2]) -> [2 2 1 1 2 2]", "(dupli [2]) -> [2 2]"], "time": 0.173665, "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 0 3 0]) -> [8 8 0 0 3 3 0 0]", "(dupli [1]) -> [1 1]", "(dupli []) -> []"], "time": 0.23559, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1 2 8 5 3]) -> [1 1 2 2 8 8 5 5 3 3]", "(dupli [1 7 6 4 3]) -> [1 1 7 7 6 6 4 4 3 3]", "(dupli [8 7 8 7 8]) -> [8 8 7 7 8 8 7 7 8 8]"], "time": 0.193285, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5 4]) -> [5 5 4 4]", "(dupli [2]) -> [2 2]", "(dupli [6 5]) -> [6 6 5 5]"], "time": 0.203457, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8]) -> [8 8]", "(dupli [7]) -> [7 7]", "(dupli [4 1 0]) -> [4 4 1 1 0 0]"], "time": 0.201854, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1 4 6 2 2]) -> [1 1 4 4 6 6 2 2 2 2]", "(dupli [1 0 9]) -> [1 1 0 0 9 9]", "(dupli [9 6 6 8]) -> [9 9 6 6 6 6 8 8]"], "time": 0.177326, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 2 1 5]) -> [3 3 2 2 1 1 5 5]", "(dupli [5 7]) -> [5 5 7 7]", "(dupli [8 4 0 0 5]) -> [8 8 4 4 0 0 0 0 5 5]"], "time": 0.178489, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 8 1 0]) -> [2 2 8 8 1 1 0 0]", "(dupli [2]) -> [2 2]", "(dupli [8 7 4 8]) -> [8 8 7 7 4 4 8 8]"], "time": 0.1573, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 8 2]) -> [8 8 8 8 2 2]", "(dupli [0 8 5 3 3]) -> [0 0 8 8 5 5 3 3 3 3]", "(dupli []) -> []"], "time": 0.233066, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1 7 8]) -> [1 1 7 7 8 8]", "(dupli []) -> []", "(dupli [3]) -> [3 3]"], "time": 0.166033, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9]) -> [9 9]", "(dupli [4 0 9 9 0]) -> [4 4 0 0 9 9 9 9 0 0]", "(dupli [2]) -> [2 2]"], "time": 0.19672, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 3 5]) -> [3 3 3 3 5 5]", "(dupli [8 0 5 9]) -> [8 8 0 0 5 5 9 9]", "(dupli []) -> []"], "time": 0.202213, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7]) -> [7 7]", "(dupli [1 9 6 6]) -> [1 1 9 9 6 6 6 6]", "(dupli [8 6 8 1 9]) -> [8 8 6 6 8 8 1 1 9 9]"], "time": 0.23127, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 3 3]) -> [9 9 3 3 3 3]", "(dupli [6 8 3]) -> [6 6 8 8 3 3]", "(dupli [7 4 9]) -> [7 7 4 4 9 9]"], "time": 0.219454, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2]) -> [2 2]", "(dupli [9]) -> [9 9]", "(dupli [0 9 8 3]) -> [0 0 9 9 8 8 3 3]"], "time": 0.188162, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 7 1]) -> [4 4 7 7 1 1]", "(dupli []) -> []", "(dupli [9 8 7 1]) -> [9 9 8 8 7 7 1 1]"], "time": 0.217698, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 8]) -> [9 9 8 8]", "(dupli [4 1 7]) -> [4 4 1 1 7 7]", "(dupli [5 8 2 8 8]) -> [5 5 8 8 2 2 8 8 8 8]"], "time": 0.203893, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1]) -> [1 1]", "(dupli [2]) -> [2 2]", "(dupli [2 4 1 3]) -> [2 2 4 4 1 1 3 3]"], "time": 0.218727, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1]) -> [1 1]", "(dupli [1 2]) -> [1 1 2 2]", "(dupli [8 3 8]) -> [8 8 3 3 8 8]"], "time": 0.193006, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1]) -> [1 1]", "(dupli [8 3 1]) -> [8 8 3 3 1 1]", "(dupli [8 3 4 7]) -> [8 8 3 3 4 4 7 7]"], "time": 0.203556, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5]) -> [5 5]", "(dupli [8 1]) -> [8 8 1 1]", "(dupli [0 3 0]) -> [0 0 3 3 0 0]"], "time": 0.202614, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 3]) -> [0 0 3 3]", "(dupli [9]) -> [9 9]", "(dupli [3]) -> [3 3]"], "time": 0.20165, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5 5 0 2]) -> [5 5 5 5 0 0 2 2]", "(dupli [9 6]) -> [9 9 6 6]", "(dupli [8 5 7 6]) -> [8 8 5 5 7 7 6 6]"], "time": 0.214621, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 4 7 6 6]) -> [3 3 4 4 7 7 6 6 6 6]", "(dupli [2 4]) -> [2 2 4 4]", "(dupli [3 0]) -> [3 3 0 0]"], "time": 0.179495, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 6]) -> [0 0 6 6]", "(dupli [9 9 7]) -> [9 9 9 9 7 7]", "(dupli []) -> []"], "time": 0.193705, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 3 1 9]) -> [0 0 3 3 1 1 9 9]", "(dupli []) -> []", "(dupli [6 6]) -> [6 6 6 6]"], "time": 0.26241, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [3 6]) -> [3 3 6 6]", "(dupli [9 1 7 6]) -> [9 9 1 1 7 7 6 6]"], "time": 0.173213, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1 2 9 1]) -> [1 1 2 2 9 9 1 1]", "(dupli [2]) -> [2 2]", "(dupli [3 9 6 4 2]) -> [3 3 9 9 6 6 4 4 2 2]"], "time": 0.215277, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 8 6]) -> [0 0 8 8 6 6]", "(dupli [2 8 7 9]) -> [2 2 8 8 7 7 9 9]", "(dupli [6 8 2 7 2]) -> [6 6 8 8 2 2 7 7 2 2]"], "time": 0.216429, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [1 5 9]) -> [1 1 5 5 9 9]", "(dupli [0 4]) -> [0 0 4 4]"], "time": 0.242198, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 4 6 4]) -> [2 2 4 4 6 6 4 4]", "(dupli [7]) -> [7 7]", "(dupli [8]) -> [8 8]"], "time": 0.250585, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 6 2 0 5]) -> [2 2 6 6 2 2 0 0 5 5]", "(dupli [6 4]) -> [6 6 4 4]", "(dupli [4 6]) -> [4 4 6 6]"], "time": 0.216595, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 1 4]) -> [0 0 1 1 4 4]", "(dupli [7 2]) -> [7 7 2 2]", "(dupli []) -> []"], "time": 0.238092, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 3]) -> [3 3 3 3]", "(dupli [0 1 0]) -> [0 0 1 1 0 0]", "(dupli [4 9]) -> [4 4 9 9]"], "time": 0.250686, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 8 5 9 5]) -> [2 2 8 8 5 5 9 9 5 5]", "(dupli [4 2 4 7 0]) -> [4 4 2 2 4 4 7 7 0 0]", "(dupli [4 4 1]) -> [4 4 4 4 1 1]"], "time": 0.206883, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 6 6 6 4]) -> [0 0 6 6 6 6 6 6 4 4]", "(dupli [4]) -> [4 4]", "(dupli [5 4 8 1 9]) -> [5 5 4 4 8 8 1 1 9 9]"], "time": 0.227899, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 9 5]) -> [8 8 9 9 5 5]", "(dupli [8]) -> [8 8]", "(dupli []) -> []"], "time": 0.184092, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1 6 9]) -> [1 1 6 6 9 9]", "(dupli [3 3 0 7 2]) -> [3 3 3 3 0 0 7 7 2 2]", "(dupli [1 2 0]) -> [1 1 2 2 0 0]"], "time": 0.22802, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 8 7 5 4]) -> [3 3 8 8 7 7 5 5 4 4]", "(dupli [5 8 3]) -> [5 5 8 8 3 3]", "(dupli [9 1 6 7]) -> [9 9 1 1 6 6 7 7]"], "time": 0.23818, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [7 3 9 3]) -> [7 7 3 3 9 9 3 3]", "(dupli [0]) -> [0 0]"], "time": 0.173481, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6]) -> [6 6]", "(dupli [9]) -> [9 9]", "(dupli [8 4 7 8 0]) -> [8 8 4 4 7 7 8 8 0 0]"], "time": 0.234347, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6]) -> [6 6]", "(dupli [5 1 7]) -> [5 5 1 1 7 7]", "(dupli []) -> []"], "time": 0.183308, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1 3]) -> [1 1 3 3]", "(dupli [8 9 8]) -> [8 8 9 9 8 8]", "(dupli [1 0 0 5]) -> [1 1 0 0 0 0 5 5]"], "time": 0.17859, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 3 8 5 3]) -> [2 2 3 3 8 8 5 5 3 3]", "(dupli [8 0]) -> [8 8 0 0]", "(dupli [5 1 1 4]) -> [5 5 1 1 1 1 4 4]"], "time": 0.219797, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4]) -> [4 4]", "(dupli [0 8 8 1 1]) -> [0 0 8 8 8 8 1 1 1 1]", "(dupli [4]) -> [4 4]"], "time": 0.234108, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 5]) -> [4 4 5 5]", "(dupli [8 8 3]) -> [8 8 8 8 3 3]", "(dupli [3 0]) -> [3 3 0 0]"], "time": 0.164146, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6]) -> [6 6]", "(dupli [9]) -> [9 9]", "(dupli [9 5 9 0]) -> [9 9 5 5 9 9 0 0]"], "time": 0.227825, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 7 7]) -> [9 9 7 7 7 7]", "(dupli [5 8 0]) -> [5 5 8 8 0 0]", "(dupli [9 7 8 6]) -> [9 9 7 7 8 8 6 6]"], "time": 0.246331, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 3 1]) -> [6 6 3 3 1 1]", "(dupli [0 4 5 8]) -> [0 0 4 4 5 5 8 8]", "(dupli [3]) -> [3 3]"], "time": 0.210749, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4]) -> [4 4]", "(dupli [2 2 2 0]) -> [2 2 2 2 2 2 0 0]", "(dupli [4 3 5 5 6]) -> [4 4 3 3 5 5 5 5 6 6]"], "time": 0.183664, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [7 3 8]) -> [7 7 3 3 8 8]", "(dupli []) -> []"], "time": 0.204108, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4]) -> [4 4]", "(dupli [0 3]) -> [0 0 3 3]", "(dupli [1 9 1 3]) -> [1 1 9 9 1 1 3 3]"], "time": 0.216671, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 8 1]) -> [9 9 8 8 1 1]", "(dupli [0 6 6]) -> [0 0 6 6 6 6]", "(dupli [7 3 6 3 3]) -> [7 7 3 3 6 6 3 3 3 3]"], "time": 0.226776, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 4 8]) -> [7 7 4 4 8 8]", "(dupli [6 5 8]) -> [6 6 5 5 8 8]", "(dupli []) -> []"], "time": 0.26501, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1 8 5 4 6]) -> [1 1 8 8 5 5 4 4 6 6]", "(dupli [5 2 8 8 1]) -> [5 5 2 2 8 8 8 8 1 1]", "(dupli [3]) -> [3 3]"], "time": 0.193715, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 0]) -> [3 3 0 0]", "(dupli [5 9]) -> [5 5 9 9]", "(dupli [6 9]) -> [6 6 9 9]"], "time": 0.136232, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1 7 2]) -> [1 1 7 7 2 2]", "(dupli [2 3 5 2]) -> [2 2 3 3 5 5 2 2]", "(dupli []) -> []"], "time": 0.201683, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli []) -> []", "(dupli [1 0 4]) -> [1 1 0 0 4 4]"], "time": 0.197304, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 7 0 8 6]) -> [8 8 7 7 0 0 8 8 6 6]", "(dupli [7 2 8]) -> [7 7 2 2 8 8]", "(dupli [0]) -> [0 0]"], "time": 0.18319, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 3 5 8]) -> [8 8 3 3 5 5 8 8]", "(dupli [4]) -> [4 4]", "(dupli [3 9 4 0]) -> [3 3 9 9 4 4 0 0]"], "time": 0.201255, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8]) -> [8 8]", "(dupli [0 2 9 4]) -> [0 0 2 2 9 9 4 4]", "(dupli [2 6]) -> [2 2 6 6]"], "time": 0.206339, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2]) -> [2 2]", "(dupli [2 4 7 1]) -> [2 2 4 4 7 7 1 1]", "(dupli [4 0 4 1]) -> [4 4 0 0 4 4 1 1]"], "time": 0.200969, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6]) -> [6 6]", "(dupli [6 5 4 7]) -> [6 6 5 5 4 4 7 7]", "(dupli [4 1 6]) -> [4 4 1 1 6 6]"], "time": 0.165844, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6]) -> [6 6]", "(dupli [8 3 6 4]) -> [8 8 3 3 6 6 4 4]", "(dupli [8 0 2]) -> [8 8 0 0 2 2]"], "time": 0.182664, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4]) -> [4 4]", "(dupli [4 5]) -> [4 4 5 5]", "(dupli [5 9]) -> [5 5 9 9]"], "time": 0.165382, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3]) -> [3 3]", "(dupli [3 8 5 8]) -> [3 3 8 8 5 5 8 8]", "(dupli [0 9]) -> [0 0 9 9]"], "time": 0.187994, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli []) -> []", "(dupli [9 3 7 2 8]) -> [9 9 3 3 7 7 2 2 8 8]"], "time": 0.229271, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 9]) -> [0 0 9 9]", "(dupli [5 8 4 4]) -> [5 5 8 8 4 4 4 4]", "(dupli [2 4]) -> [2 2 4 4]"], "time": 0.226053, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [7 2 7]) -> [7 7 2 2 7 7]", "(dupli [2 0 3]) -> [2 2 0 0 3 3]"], "time": 0.222496, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 4 3]) -> [7 7 4 4 3 3]", "(dupli []) -> []", "(dupli [6 3 2 9]) -> [6 6 3 3 2 2 9 9]"], "time": 0.196695, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5 4 6 2]) -> [5 5 4 4 6 6 2 2]", "(dupli []) -> []", "(dupli [6 8 5 5]) -> [6 6 8 8 5 5 5 5]"], "time": 0.19938, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 4 9 8 7]) -> [2 2 4 4 9 9 8 8 7 7]", "(dupli [9 7 7 1]) -> [9 9 7 7 7 7 1 1]", "(dupli [9 5 9 8 9]) -> [9 9 5 5 9 9 8 8 9 9]"], "time": 0.105292, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [3 9 3]) -> [3 3 9 9 3 3]", "(dupli [1 0 5]) -> [1 1 0 0 5 5]"], "time": 0.099024, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 4 4 3 1]) -> [8 8 4 4 4 4 3 3 1 1]", "(dupli []) -> []", "(dupli []) -> []"], "time": 0.10595, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 6 3 4]) -> [4 4 6 6 3 3 4 4]", "(dupli [8 5]) -> [8 8 5 5]", "(dupli [8 2]) -> [8 8 2 2]"], "time": 0.108864, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
