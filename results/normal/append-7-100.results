{"name": "append", "time": 0.939132, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [0] 0) -> [0 0]", "(append [1 8] 4) -> [1 8 4]", "(append [9 9] 9) -> [9 9 9]", "(append [4 5 2 7 1] 8) -> [4 5 2 7 1 8]", "(append [8 6] 9) -> [8 6 9]", "(append [9 8 7 6 7] 8) -> [9 8 7 6 7 8]", "(append [4 8 8 1] 3) -> [4 8 8 1 3]"]}
{"name": "append", "time": 0.971921, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [5 4] 4) -> [5 4 4]", "(append [] 1) -> [1]", "(append [2 6] 4) -> [2 6 4]", "(append [7 2 8] 2) -> [7 2 8 2]", "(append [4 2 3 1 6] 9) -> [4 2 3 1 6 9]", "(append [] 2) -> [2]", "(append [5 2 6] 2) -> [5 2 6 2]"]}
{"name": "append", "time": 0.997385, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [4 9 0 1] 5) -> [4 9 0 1 5]", "(append [6 4 5] 9) -> [6 4 5 9]", "(append [] 8) -> [8]", "(append [] 5) -> [5]", "(append [] 5) -> [5]", "(append [] 1) -> [1]", "(append [4 3 0 3] 7) -> [4 3 0 3 7]"]}
{"name": "append", "time": 1.155796, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [] 5) -> [5]", "(append [7 5 5 5] 5) -> [7 5 5 5 5]", "(append [0 4 5 3] 0) -> [0 4 5 3 0]", "(append [6 5 5] 5) -> [6 5 5 5]", "(append [3 5] 4) -> [3 5 4]", "(append [0 1 3 5 1] 7) -> [0 1 3 5 1 7]", "(append [] 3) -> [3]"]}
{"name": "append", "time": 1.027726, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [9 5 6 0] 5) -> [9 5 6 0 5]", "(append [8 1 0] 3) -> [8 1 0 3]", "(append [7 4 2] 1) -> [7 4 2 1]", "(append [3 2 0 6 2] 7) -> [3 2 0 6 2 7]", "(append [2 5 0 3] 4) -> [2 5 0 3 4]", "(append [2 9 3 9 9] 0) -> [2 9 3 9 9 0]", "(append [8 1 3 3 8] 4) -> [8 1 3 3 8 4]"]}
{"name": "append", "time": 1.170554, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [5 1 1 5 2] 5) -> [5 1 1 5 2 5]", "(append [5 7 0 2 6] 5) -> [5 7 0 2 6 5]", "(append [2 8 7] 6) -> [2 8 7 6]", "(append [] 1) -> [1]", "(append [0 0 2 1] 1) -> [0 0 2 1 1]", "(append [9 4 9 5 0] 8) -> [9 4 9 5 0 8]", "(append [] 9) -> [9]"]}
{"name": "append", "time": 1.183607, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [0 9 1] 1) -> [0 9 1 1]", "(append [3 8 5 9] 1) -> [3 8 5 9 1]", "(append [7 0] 7) -> [7 0 7]", "(append [3] 4) -> [3 4]", "(append [5 7 2 7 9] 4) -> [5 7 2 7 9 4]", "(append [5] 0) -> [5 0]", "(append [6 6 8 9 2] 0) -> [6 6 8 9 2 0]"]}
{"name": "append", "time": 1.105053, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [] 3) -> [3]", "(append [7 5 6 2 5] 0) -> [7 5 6 2 5 0]", "(append [3] 6) -> [3 6]", "(append [0] 2) -> [0 2]", "(append [5 2 2] 7) -> [5 2 2 7]", "(append [] 7) -> [7]", "(append [0 7 4 3] 2) -> [0 7 4 3 2]"]}
{"name": "append", "time": 1.155183, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [5 2 3 1 7] 8) -> [5 2 3 1 7 8]", "(append [5] 6) -> [5 6]", "(append [1 7 7 6] 7) -> [1 7 7 6 7]", "(append [5] 0) -> [5 0]", "(append [1 8 7 4] 0) -> [1 8 7 4 0]", "(append [5] 8) -> [5 8]", "(append [3 4 4 4] 6) -> [3 4 4 4 6]"]}
{"name": "append", "time": 0.93874, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [7 5 2 6 8] 9) -> [7 5 2 6 8 9]", "(append [6 1 9 8] 8) -> [6 1 9 8 8]", "(append [] 5) -> [5]", "(append [9] 2) -> [9 2]", "(append [7 3 9 5] 8) -> [7 3 9 5 8]", "(append [] 1) -> [1]", "(append [3 5 9 7 5] 0) -> [3 5 9 7 5 0]"]}
{"name": "append", "time": 0.858361, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [7] 0) -> [7 0]", "(append [9] 9) -> [9 9]", "(append [5] 7) -> [5 7]", "(append [4 8 5 8 6] 9) -> [4 8 5 8 6 9]", "(append [4 2 7 4] 3) -> [4 2 7 4 3]", "(append [1 9 8] 9) -> [1 9 8 9]", "(append [9 1 2 1] 6) -> [9 1 2 1 6]"]}
{"name": "append", "time": 1.054372, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [1 9 0 6 2] 5) -> [1 9 0 6 2 5]", "(append [7 7 8 7 9] 6) -> [7 7 8 7 9 6]", "(append [2 6 6 4 4] 6) -> [2 6 6 4 4 6]", "(append [2 9 7 0] 1) -> [2 9 7 0 1]", "(append [5] 2) -> [5 2]", "(append [3 5] 0) -> [3 5 0]", "(append [3 1 9 4] 2) -> [3 1 9 4 2]"]}
{"name": "append", "time": 0.864551, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [5 1 5] 8) -> [5 1 5 8]", "(append [] 2) -> [2]", "(append [] 1) -> [1]", "(append [4 5 7 8] 6) -> [4 5 7 8 6]", "(append [7 2 8 6] 6) -> [7 2 8 6 6]", "(append [4 1 3] 3) -> [4 1 3 3]", "(append [] 4) -> [4]"]}
{"name": "append", "time": 1.116443, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [8] 7) -> [8 7]", "(append [] 4) -> [4]", "(append [0] 8) -> [0 8]", "(append [5 5] 0) -> [5 5 0]", "(append [] 1) -> [1]", "(append [8 8 7] 4) -> [8 8 7 4]", "(append [4 3 8 8 8] 6) -> [4 3 8 8 8 6]"]}
{"name": "append", "time": 1.064094, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [5 3 8] 0) -> [5 3 8 0]", "(append [6 8] 0) -> [6 8 0]", "(append [7 4 4 2 0] 1) -> [7 4 4 2 0 1]", "(append [8 1 9 2 7] 1) -> [8 1 9 2 7 1]", "(append [2 2] 0) -> [2 2 0]", "(append [9 3 2 9] 0) -> [9 3 2 9 0]", "(append [8] 3) -> [8 3]"]}
{"name": "append", "time": 0.935227, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [5 0 7 0] 8) -> [5 0 7 0 8]", "(append [5 0] 9) -> [5 0 9]", "(append [7] 7) -> [7 7]", "(append [1 3] 4) -> [1 3 4]", "(append [8 6 1 2 8] 3) -> [8 6 1 2 8 3]", "(append [1 6 6 2] 8) -> [1 6 6 2 8]", "(append [5] 8) -> [5 8]"]}
{"name": "append", "time": 0.912141, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [6 9 6] 0) -> [6 9 6 0]", "(append [0 6 8 4 9] 9) -> [0 6 8 4 9 9]", "(append [7 5 9 0] 9) -> [7 5 9 0 9]", "(append [0 6 9] 0) -> [0 6 9 0]", "(append [3 0 8] 4) -> [3 0 8 4]", "(append [1 7 3 2] 4) -> [1 7 3 2 4]", "(append [9 0] 3) -> [9 0 3]"]}
{"name": "append", "time": 0.893881, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [2 5 1 8] 4) -> [2 5 1 8 4]", "(append [8 1 3 3] 1) -> [8 1 3 3 1]", "(append [2 2] 4) -> [2 2 4]", "(append [] 4) -> [4]", "(append [] 9) -> [9]", "(append [4 9 7 0] 4) -> [4 9 7 0 4]", "(append [2 6 1] 3) -> [2 6 1 3]"]}
{"name": "append", "time": 0.945348, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [3] 7) -> [3 7]", "(append [0] 8) -> [0 8]", "(append [2] 6) -> [2 6]", "(append [9 4] 0) -> [9 4 0]", "(append [2] 3) -> [2 3]", "(append [2 1 1 9] 4) -> [2 1 1 9 4]", "(append [9 4 6 4] 3) -> [9 4 6 4 3]"]}
{"name": "append", "time": 0.850498, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [9 0 6 5] 9) -> [9 0 6 5 9]", "(append [7] 1) -> [7 1]", "(append [0 1] 1) -> [0 1 1]", "(append [7 6 7] 8) -> [7 6 7 8]", "(append [8 2 5 8] 4) -> [8 2 5 8 4]", "(append [8 0 2 0 8] 0) -> [8 0 2 0 8 0]", "(append [3 6 4] 4) -> [3 6 4 4]"]}
{"name": "append", "time": 1.106327, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [] 4) -> [4]", "(append [5 0] 0) -> [5 0 0]", "(append [] 3) -> [3]", "(append [7] 4) -> [7 4]", "(append [9 7 4] 0) -> [9 7 4 0]", "(append [] 0) -> [0]", "(append [9 8 7 0] 1) -> [9 8 7 0 1]"]}
{"name": "append", "time": 0.744509, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [] 7) -> [7]", "(append [2 4 8 2] 0) -> [2 4 8 2 0]", "(append [] 7) -> [7]", "(append [] 9) -> [9]", "(append [3] 0) -> [3 0]", "(append [] 5) -> [5]", "(append [9 6] 9) -> [9 6 9]"]}
{"name": "append", "time": 4.2722, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [5])) _) _)", "examples": ["(append [1 9] 2) -> [1 9 2]", "(append [1] 4) -> [1 4]", "(append [] 5) -> [5]", "(append [5 5] 8) -> [5 5 8]", "(append [3 0] 5) -> [3 0 5]", "(append [9 9 7] 1) -> [9 9 7 1]", "(append [4] 7) -> [4 7]"]}
{"name": "append", "time": 0.800067, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [] 6) -> [6]", "(append [7 1 1 3] 6) -> [7 1 1 3 6]", "(append [2 5 1] 2) -> [2 5 1 2]", "(append [6 7 7 5] 9) -> [6 7 7 5 9]", "(append [1 3] 2) -> [1 3 2]", "(append [] 7) -> [7]", "(append [4 4 0] 5) -> [4 4 0 5]"]}
{"name": "append", "time": 4.241745, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [8])) _) _)", "examples": ["(append [] 8) -> [8]", "(append [0] 6) -> [0 6]", "(append [2 3 8 2] 6) -> [2 3 8 2 6]", "(append [9 4 4 1] 1) -> [9 4 4 1 1]", "(append [2 3] 3) -> [2 3 3]", "(append [4 0 2] 1) -> [4 0 2 1]", "(append [7 9 4 7 6] 0) -> [7 9 4 7 6 0]"]}
{"name": "append", "time": 0.709923, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [4 6 6 8] 3) -> [4 6 6 8 3]", "(append [6 2] 0) -> [6 2 0]", "(append [5 0 3 9 1] 5) -> [5 0 3 9 1 5]", "(append [4 8 2 1 3] 7) -> [4 8 2 1 3 7]", "(append [2 3 4] 7) -> [2 3 4 7]", "(append [5 3 0 5 8] 9) -> [5 3 0 5 8 9]", "(append [5 3 4 3 7] 6) -> [5 3 4 3 7 6]"]}
{"name": "append", "time": 4.512061, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [7])) _) _)", "examples": ["(append [8 4 0 1 2] 7) -> [8 4 0 1 2 7]", "(append [0 8 8] 7) -> [0 8 8 7]", "(append [0 6 3 4 8] 1) -> [0 6 3 4 8 1]", "(append [] 7) -> [7]", "(append [0 9 5] 1) -> [0 9 5 1]", "(append [7 9 3 2 1] 8) -> [7 9 3 2 1 8]", "(append [7] 7) -> [7 7]"]}
{"name": "append", "time": 1.134277, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [6 7 5] 7) -> [6 7 5 7]", "(append [7 3 9 2] 0) -> [7 3 9 2 0]", "(append [4 8 4] 1) -> [4 8 4 1]", "(append [4 2 6 6] 7) -> [4 2 6 6 7]", "(append [9 7 4 4] 7) -> [9 7 4 4 7]", "(append [1 7 6] 6) -> [1 7 6 6]", "(append [1 2] 9) -> [1 2 9]"]}
{"name": "append", "time": 2.510593, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [0])) _) _)", "examples": ["(append [1] 0) -> [1 0]", "(append [] 0) -> [0]", "(append [4 4 2 4 8] 2) -> [4 4 2 4 8 2]", "(append [2 0 7 0] 4) -> [2 0 7 0 4]", "(append [0 9 1 9] 3) -> [0 9 1 9 3]", "(append [6 6] 6) -> [6 6 6]", "(append [3 8 0] 8) -> [3 8 0 8]"]}
{"name": "append", "time": 5.946916, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [0])) _) _)", "examples": ["(append [] 0) -> [0]", "(append [8 6 0 2] 6) -> [8 6 0 2 6]", "(append [7 0 3 2 1] 0) -> [7 0 3 2 1 0]", "(append [5 4 1 3] 8) -> [5 4 1 3 8]", "(append [6 7 3 3 8] 7) -> [6 7 3 3 8 7]", "(append [5] 7) -> [5 7]", "(append [3 7 4 8] 4) -> [3 7 4 8 4]"]}
{"name": "append", "time": 1.581885, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [7 1] 6) -> [7 1 6]", "(append [9 5] 5) -> [9 5 5]", "(append [6 2 2 1] 6) -> [6 2 2 1 6]", "(append [1 4 0] 9) -> [1 4 0 9]", "(append [2 0] 5) -> [2 0 5]", "(append [2 4 7 8] 7) -> [2 4 7 8 7]", "(append [4 2 5 7] 5) -> [4 2 5 7 5]"]}
{"name": "append", "time": 1.490427, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [0 5 0] 6) -> [0 5 0 6]", "(append [6 6 8 7] 8) -> [6 6 8 7 8]", "(append [4 1 9 3] 0) -> [4 1 9 3 0]", "(append [0 8 5] 7) -> [0 8 5 7]", "(append [4 8] 6) -> [4 8 6]", "(append [5] 7) -> [5 7]", "(append [7 2 3 7] 0) -> [7 2 3 7 0]"]}
{"name": "append", "time": 1.395363, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [7 9] 5) -> [7 9 5]", "(append [7 9 8 1] 8) -> [7 9 8 1 8]", "(append [7 4 6 4] 1) -> [7 4 6 4 1]", "(append [6 7] 3) -> [6 7 3]", "(append [3 1] 8) -> [3 1 8]", "(append [9 2 5 5 9] 1) -> [9 2 5 5 9 1]", "(append [3 3 8 3] 4) -> [3 3 8 3 4]"]}
{"name": "append", "time": 6.653255, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [4])) _) _)", "examples": ["(append [1 2 9 2 8] 9) -> [1 2 9 2 8 9]", "(append [] 4) -> [4]", "(append [0 7] 4) -> [0 7 4]", "(append [4 7] 8) -> [4 7 8]", "(append [2] 3) -> [2 3]", "(append [4 6 4 1] 0) -> [4 6 4 1 0]", "(append [3 7 0 5] 0) -> [3 7 0 5 0]"]}
{"name": "append", "time": 1.22854, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [6 2 5] 6) -> [6 2 5 6]", "(append [] 8) -> [8]", "(append [4] 9) -> [4 9]", "(append [7] 7) -> [7 7]", "(append [] 3) -> [3]", "(append [4] 8) -> [4 8]", "(append [2 2] 3) -> [2 2 3]"]}
{"name": "append", "time": 1.259295, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [2 2 4 8 2] 6) -> [2 2 4 8 2 6]", "(append [8 6 6 7] 1) -> [8 6 6 7 1]", "(append [0 8 1 7 2] 6) -> [0 8 1 7 2 6]", "(append [1 9 5 9 2] 9) -> [1 9 5 9 2 9]", "(append [4 8] 5) -> [4 8 5]", "(append [0 6 7] 6) -> [0 6 7 6]", "(append [1 3 3 6] 8) -> [1 3 3 6 8]"]}
{"name": "append", "time": 0.689171, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [8 3 4 8 5] 2) -> [8 3 4 8 5 2]", "(append [3 6 0 7] 8) -> [3 6 0 7 8]", "(append [5 2 0 1] 4) -> [5 2 0 1 4]", "(append [1 4] 1) -> [1 4 1]", "(append [0 1 7 1] 3) -> [0 1 7 1 3]", "(append [1] 3) -> [1 3]", "(append [5 6 4] 7) -> [5 6 4 7]"]}
{"name": "append", "time": 0.738346, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [] 2) -> [2]", "(append [3 8] 7) -> [3 8 7]", "(append [9] 9) -> [9 9]", "(append [] 4) -> [4]", "(append [2 6 1 6 7] 9) -> [2 6 1 6 7 9]", "(append [] 0) -> [0]", "(append [5 7] 3) -> [5 7 3]"]}
{"name": "append", "time": 0.841962, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [9 1] 5) -> [9 1 5]", "(append [1 3 2 7 3] 6) -> [1 3 2 7 3 6]", "(append [9 5 7] 0) -> [9 5 7 0]", "(append [4 2 1] 4) -> [4 2 1 4]", "(append [] 1) -> [1]", "(append [5 0 5] 3) -> [5 0 5 3]", "(append [] 9) -> [9]"]}
{"name": "append", "time": 0.629634, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [7 6 9 0] 8) -> [7 6 9 0 8]", "(append [] 3) -> [3]", "(append [3 3 0 1] 9) -> [3 3 0 1 9]", "(append [3 0 7] 8) -> [3 0 7 8]", "(append [] 9) -> [9]", "(append [4 3 6 8] 6) -> [4 3 6 8 6]", "(append [2 4 8 0] 7) -> [2 4 8 0 7]"]}
{"name": "append", "time": 3.233292, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [0])) _) _)", "examples": ["(append [4 5 9] 4) -> [4 5 9 4]", "(append [8 0 9 1 8] 5) -> [8 0 9 1 8 5]", "(append [1] 4) -> [1 4]", "(append [5 1 3 2] 9) -> [5 1 3 2 9]", "(append [] 0) -> [0]", "(append [8 1 3] 7) -> [8 1 3 7]", "(append [2 0 6] 2) -> [2 0 6 2]"]}
{"name": "append", "time": 5.38059, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [4])) _) _)", "examples": ["(append [4] 1) -> [4 1]", "(append [5 2 1] 8) -> [5 2 1 8]", "(append [0 1 0 8 1] 6) -> [0 1 0 8 1 6]", "(append [] 4) -> [4]", "(append [7 6] 1) -> [7 6 1]", "(append [7 9 3] 3) -> [7 9 3 3]", "(append [9 2 6 2] 7) -> [9 2 6 2 7]"]}
{"name": "append", "time": 1.374701, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [0 3] 9) -> [0 3 9]", "(append [4] 6) -> [4 6]", "(append [3 7] 5) -> [3 7 5]", "(append [4] 8) -> [4 8]", "(append [7 1 4 6 0] 4) -> [7 1 4 6 0 4]", "(append [2] 9) -> [2 9]", "(append [0 9] 2) -> [0 9 2]"]}
{"name": "append", "time": 8.536462, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [0])) _) _)", "examples": ["(append [3 2 0 9] 3) -> [3 2 0 9 3]", "(append [9 9 6 8] 8) -> [9 9 6 8 8]", "(append [1 2] 3) -> [1 2 3]", "(append [1 5 9 9 3] 5) -> [1 5 9 9 3 5]", "(append [4 4 6] 6) -> [4 4 6 6]", "(append [3 6 4 0] 4) -> [3 6 4 0 4]", "(append [] 0) -> [0]"]}
{"name": "append", "time": 6.238945, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [8])) _) _)", "examples": ["(append [2 2 5 3] 2) -> [2 2 5 3 2]", "(append [1 3] 8) -> [1 3 8]", "(append [9] 8) -> [9 8]", "(append [8 8 2] 0) -> [8 8 2 0]", "(append [6 2] 6) -> [6 2 6]", "(append [] 8) -> [8]", "(append [6 9] 7) -> [6 9 7]"]}
{"name": "append", "time": 5.681385, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [7])) _) _)", "examples": ["(append [8 0 6] 6) -> [8 0 6 6]", "(append [] 7) -> [7]", "(append [3] 9) -> [3 9]", "(append [1 2] 5) -> [1 2 5]", "(append [8] 1) -> [8 1]", "(append [6 7] 6) -> [6 7 6]", "(append [9 9 1 7 7] 3) -> [9 9 1 7 7 3]"]}
{"name": "append", "time": 0.623105, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [7 0 0 5 4] 2) -> [7 0 0 5 4 2]", "(append [5 3 2] 5) -> [5 3 2 5]", "(append [2 0 1] 3) -> [2 0 1 3]", "(append [4 5 4] 4) -> [4 5 4 4]", "(append [8 4] 4) -> [8 4 4]", "(append [7 8 1] 3) -> [7 8 1 3]", "(append [0 3] 1) -> [0 3 1]"]}
{"name": "append", "time": 10.281291, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [2])) _) _)", "examples": ["(append [0 4] 6) -> [0 4 6]", "(append [] 2) -> [2]", "(append [3 9 4 8] 5) -> [3 9 4 8 5]", "(append [6 7] 1) -> [6 7 1]", "(append [6 3 2 7] 6) -> [6 3 2 7 6]", "(append [6 0 4 5] 4) -> [6 0 4 5 4]", "(append [9 8 2] 3) -> [9 8 2 3]"]}
{"name": "append", "time": 1.162771, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [] 9) -> [9]", "(append [4 0 3 7] 7) -> [4 0 3 7 7]", "(append [2] 0) -> [2 0]", "(append [] 2) -> [2]", "(append [] 0) -> [0]", "(append [4] 2) -> [4 2]", "(append [0 5 6 3 6] 1) -> [0 5 6 3 6 1]"]}
{"name": "append", "time": 0.590046, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [0 8 9 8] 1) -> [0 8 9 8 1]", "(append [3] 1) -> [3 1]", "(append [] 0) -> [0]", "(append [5 9 2] 0) -> [5 9 2 0]", "(append [] 6) -> [6]", "(append [3] 9) -> [3 9]", "(append [6] 5) -> [6 5]"]}
{"name": "append", "time": 0.592865, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [7 4] 4) -> [7 4 4]", "(append [4 6] 6) -> [4 6 6]", "(append [0 5 9 6 3] 8) -> [0 5 9 6 3 8]", "(append [2 2 3] 3) -> [2 2 3 3]", "(append [] 2) -> [2]", "(append [] 3) -> [3]", "(append [1 9 7 6 6] 1) -> [1 9 7 6 6 1]"]}
{"name": "append", "time": 4.746225, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [7])) _) _)", "examples": ["(append [5 3 3 8] 4) -> [5 3 3 8 4]", "(append [1 4 8] 7) -> [1 4 8 7]", "(append [1] 0) -> [1 0]", "(append [2 1 2 8] 2) -> [2 1 2 8 2]", "(append [] 7) -> [7]", "(append [5 5 0 9] 5) -> [5 5 0 9 5]", "(append [7 3] 7) -> [7 3 7]"]}
{"name": "append", "time": 0.734359, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [4 7 8 3] 6) -> [4 7 8 3 6]", "(append [6 0] 1) -> [6 0 1]", "(append [9 5 0 2] 8) -> [9 5 0 2 8]", "(append [4 9 4 6 6] 8) -> [4 9 4 6 6 8]", "(append [] 7) -> [7]", "(append [8 6] 1) -> [8 6 1]", "(append [] 4) -> [4]"]}
{"name": "append", "time": 1.278631, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [1 0 5 1 6] 9) -> [1 0 5 1 6 9]", "(append [7 4 1] 4) -> [7 4 1 4]", "(append [7 6] 0) -> [7 6 0]", "(append [0 0 3 7 9] 4) -> [0 0 3 7 9 4]", "(append [1 6] 7) -> [1 6 7]", "(append [4] 9) -> [4 9]", "(append [2 9 1 1] 9) -> [2 9 1 1 9]"]}
{"name": "append", "time": 1.497083, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [2] 6) -> [2 6]", "(append [5 4 6 3 0] 0) -> [5 4 6 3 0 0]", "(append [5 6 5] 7) -> [5 6 5 7]", "(append [8] 1) -> [8 1]", "(append [9 1 6] 1) -> [9 1 6 1]", "(append [9] 6) -> [9 6]", "(append [2] 0) -> [2 0]"]}
{"name": "append", "time": 1.40649, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [6 4 5] 8) -> [6 4 5 8]", "(append [6 4 7 4 9] 9) -> [6 4 7 4 9 9]", "(append [4 8 3 6 6] 2) -> [4 8 3 6 6 2]", "(append [8 1 8 9] 0) -> [8 1 8 9 0]", "(append [2 6 3 8 3] 3) -> [2 6 3 8 3 3]", "(append [] 8) -> [8]", "(append [] 1) -> [1]"]}
{"name": "append", "time": 1.297241, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [4] 1) -> [4 1]", "(append [] 4) -> [4]", "(append [] 8) -> [8]", "(append [1 8] 7) -> [1 8 7]", "(append [4 5 2 5] 0) -> [4 5 2 5 0]", "(append [4 0 5 7] 3) -> [4 0 5 7 3]", "(append [] 9) -> [9]"]}
{"name": "append", "time": 2.481474, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [8])) _) _)", "examples": ["(append [4] 3) -> [4 3]", "(append [] 8) -> [8]", "(append [8] 0) -> [8 0]", "(append [9 5] 0) -> [9 5 0]", "(append [1 0 1 8] 8) -> [1 0 1 8 8]", "(append [9 0 2] 2) -> [9 0 2 2]", "(append [4] 8) -> [4 8]"]}
{"name": "append", "time": 1.092932, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [3] 4) -> [3 4]", "(append [5 9] 3) -> [5 9 3]", "(append [7 8] 7) -> [7 8 7]", "(append [3] 9) -> [3 9]", "(append [1 9 5 7 1] 0) -> [1 9 5 7 1 0]", "(append [6] 7) -> [6 7]", "(append [7] 0) -> [7 0]"]}
{"name": "append", "time": 12.364083, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [7])) _) _)", "examples": ["(append [8 5] 5) -> [8 5 5]", "(append [] 7) -> [7]", "(append [1 8 9 7] 2) -> [1 8 9 7 2]", "(append [7 6 7 6] 8) -> [7 6 7 6 8]", "(append [5 5 5 6 6] 8) -> [5 5 5 6 6 8]", "(append [6 3 5] 0) -> [6 3 5 0]", "(append [3 1 6 7 7] 5) -> [3 1 6 7 7 5]"]}
{"name": "append", "time": 3.095131, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [0])) _) _)", "examples": ["(append [9 6 2] 7) -> [9 6 2 7]", "(append [2 3] 7) -> [2 3 7]", "(append [5] 0) -> [5 0]", "(append [9] 3) -> [9 3]", "(append [] 0) -> [0]", "(append [2 9 7 6 4] 4) -> [2 9 7 6 4 4]", "(append [1 4 4] 2) -> [1 4 4 2]"]}
{"name": "append", "time": 14.292156, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [0])) _) _)", "examples": ["(append [5 9 5 3] 7) -> [5 9 5 3 7]", "(append [1 6 9 1 9] 6) -> [1 6 9 1 9 6]", "(append [3 1] 4) -> [3 1 4]", "(append [5 5 2 8] 7) -> [5 5 2 8 7]", "(append [1 9 9 8] 8) -> [1 9 9 8 8]", "(append [] 0) -> [0]", "(append [6 9] 8) -> [6 9 8]"]}
{"name": "append", "time": 0.869827, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [1] 8) -> [1 8]", "(append [] 3) -> [3]", "(append [7 9 8] 0) -> [7 9 8 0]", "(append [0 5 8] 4) -> [0 5 8 4]", "(append [] 9) -> [9]", "(append [] 0) -> [0]", "(append [7 6 1] 2) -> [7 6 1 2]"]}
{"name": "append", "time": 10.048075, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [9])) _) _)", "examples": ["(append [5 9 0 2] 4) -> [5 9 0 2 4]", "(append [4 3] 9) -> [4 3 9]", "(append [7 3 5 2 1] 3) -> [7 3 5 2 1 3]", "(append [2 3] 3) -> [2 3 3]", "(append [0 9] 1) -> [0 9 1]", "(append [] 9) -> [9]", "(append [5 9] 3) -> [5 9 3]"]}
{"name": "append", "time": 0.838122, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [7 1 4] 4) -> [7 1 4 4]", "(append [5 1 2 5] 2) -> [5 1 2 5 2]", "(append [4 9 7 0 1] 1) -> [4 9 7 0 1 1]", "(append [5 0] 1) -> [5 0 1]", "(append [8 3 1] 3) -> [8 3 1 3]", "(append [] 8) -> [8]", "(append [] 7) -> [7]"]}
{"name": "append", "time": 7.370264, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [2])) _) _)", "examples": ["(append [1 2] 1) -> [1 2 1]", "(append [0 8 1 7 2] 2) -> [0 8 1 7 2 2]", "(append [3 4 8 6 3] 0) -> [3 4 8 6 3 0]", "(append [8 0 1 6] 6) -> [8 0 1 6 6]", "(append [] 2) -> [2]", "(append [5 4 2 8 7] 7) -> [5 4 2 8 7 7]", "(append [0 4 7 0] 8) -> [0 4 7 0 8]"]}
{"name": "append", "time": 4.273217, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [1])) _) _)", "examples": ["(append [9 3 1 2 1] 3) -> [9 3 1 2 1 3]", "(append [5 6 1 4] 2) -> [5 6 1 4 2]", "(append [8 3 9 4] 2) -> [8 3 9 4 2]", "(append [4] 1) -> [4 1]", "(append [8 1] 8) -> [8 1 8]", "(append [] 1) -> [1]", "(append [9 1] 8) -> [9 1 8]"]}
{"name": "append", "time": 0.829516, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [9 7 7] 0) -> [9 7 7 0]", "(append [2 3] 1) -> [2 3 1]", "(append [2 9] 6) -> [2 9 6]", "(append [5 5 5 4 8] 5) -> [5 5 5 4 8 5]", "(append [] 5) -> [5]", "(append [] 1) -> [1]", "(append [1 5 7] 5) -> [1 5 7 5]"]}
{"name": "append", "time": 1.000933, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [6 7] 0) -> [6 7 0]", "(append [4 1 2 1] 4) -> [4 1 2 1 4]", "(append [] 3) -> [3]", "(append [] 8) -> [8]", "(append [9 7 5 0 2] 5) -> [9 7 5 0 2 5]", "(append [3 4] 6) -> [3 4 6]", "(append [] 7) -> [7]"]}
{"name": "append", "time": 5.230609, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [6])) _) _)", "examples": ["(append [7 0 2 7] 9) -> [7 0 2 7 9]", "(append [4 2 0 5] 9) -> [4 2 0 5 9]", "(append [3 7 4 8] 8) -> [3 7 4 8 8]", "(append [8] 4) -> [8 4]", "(append [] 6) -> [6]", "(append [6 6 5 5 3] 5) -> [6 6 5 5 3 5]", "(append [8 9] 1) -> [8 9 1]"]}
{"name": "append", "time": 0.896711, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [2 4 2] 0) -> [2 4 2 0]", "(append [] 0) -> [0]", "(append [7 6 9 6 3] 6) -> [7 6 9 6 3 6]", "(append [] 7) -> [7]", "(append [7] 9) -> [7 9]", "(append [0 2] 7) -> [0 2 7]", "(append [9 2 8 5] 4) -> [9 2 8 5 4]"]}
{"name": "append", "time": 14.669538, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [1])) _) _)", "examples": ["(append [3 3 2 5] 2) -> [3 3 2 5 2]", "(append [9 9 0] 1) -> [9 9 0 1]", "(append [] 1) -> [1]", "(append [9 3 6 1 0] 5) -> [9 3 6 1 0 5]", "(append [1 3 4 3 2] 4) -> [1 3 4 3 2 4]", "(append [9 3 6] 6) -> [9 3 6 6]", "(append [0 3 2 0 5] 3) -> [0 3 2 0 5 3]"]}
{"name": "append", "time": 4.444868, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [0])) _) _)", "examples": ["(append [4] 0) -> [4 0]", "(append [1 0 4] 0) -> [1 0 4 0]", "(append [4 0 0 0 6] 0) -> [4 0 0 0 6 0]", "(append [8] 3) -> [8 3]", "(append [7 2 7 0] 2) -> [7 2 7 0 2]", "(append [] 0) -> [0]", "(append [2 1 1 6 9] 0) -> [2 1 1 6 9 0]"]}
{"name": "append", "time": 0.732576, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [8 0 8 3] 7) -> [8 0 8 3 7]", "(append [2 4] 8) -> [2 4 8]", "(append [4] 7) -> [4 7]", "(append [6 2 0] 2) -> [6 2 0 2]", "(append [4 9 3 4 9] 6) -> [4 9 3 4 9 6]", "(append [3] 0) -> [3 0]", "(append [6 8 4 4] 1) -> [6 8 4 4 1]"]}
{"name": "append", "time": 0.635148, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [] 7) -> [7]", "(append [4 9] 1) -> [4 9 1]", "(append [0] 6) -> [0 6]", "(append [] 0) -> [0]", "(append [3] 9) -> [3 9]", "(append [4 6 8 8 3] 1) -> [4 6 8 8 3 1]", "(append [9 2 6] 2) -> [9 2 6 2]"]}
{"name": "append", "time": 1.093713, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [] 8) -> [8]", "(append [2] 4) -> [2 4]", "(append [5 2 4 0 7] 7) -> [5 2 4 0 7 7]", "(append [3 8 1] 4) -> [3 8 1 4]", "(append [1 2] 7) -> [1 2 7]", "(append [7] 9) -> [7 9]", "(append [] 1) -> [1]"]}
{"name": "append", "time": 1.160608, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [] 2) -> [2]", "(append [5 7 9] 0) -> [5 7 9 0]", "(append [1] 7) -> [1 7]", "(append [8 6] 8) -> [8 6 8]", "(append [5] 7) -> [5 7]", "(append [] 9) -> [9]", "(append [2] 5) -> [2 5]"]}
{"name": "append", "time": 0.781386, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [5 6] 0) -> [5 6 0]", "(append [8 3 3] 6) -> [8 3 3 6]", "(append [7 5 0 0] 9) -> [7 5 0 0 9]", "(append [7 4] 4) -> [7 4 4]", "(append [4 8 0] 4) -> [4 8 0 4]", "(append [1 5 9] 2) -> [1 5 9 2]", "(append [9 7 9 6 0] 8) -> [9 7 9 6 0 8]"]}
{"name": "append", "time": 1.181899, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [0 9 5] 3) -> [0 9 5 3]", "(append [0] 5) -> [0 5]", "(append [2 1 7 8 3] 3) -> [2 1 7 8 3 3]", "(append [8] 4) -> [8 4]", "(append [4 5] 6) -> [4 5 6]", "(append [7 7 3 5 5] 3) -> [7 7 3 5 5 3]", "(append [2 7 8] 8) -> [2 7 8 8]"]}
{"name": "append", "time": 1.054932, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [] 8) -> [8]", "(append [6] 3) -> [6 3]", "(append [] 5) -> [5]", "(append [9 1 7] 4) -> [9 1 7 4]", "(append [9 4 8 0 9] 3) -> [9 4 8 0 9 3]", "(append [3 1 0 8] 2) -> [3 1 0 8 2]", "(append [7 9 9 6] 5) -> [7 9 9 6 5]"]}
{"name": "append", "time": 4.908587, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [2])) _) _)", "examples": ["(append [7 9 2 8 2] 0) -> [7 9 2 8 2 0]", "(append [8 5 8 5 8] 8) -> [8 5 8 5 8 8]", "(append [6] 2) -> [6 2]", "(append [5 2 7] 2) -> [5 2 7 2]", "(append [] 2) -> [2]", "(append [0 0 2 9] 9) -> [0 0 2 9 9]", "(append [1 6 9 4 1] 2) -> [1 6 9 4 1 2]"]}
{"name": "append", "time": 13.288328, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [3])) _) _)", "examples": ["(append [1 9 9 4 3] 4) -> [1 9 9 4 3 4]", "(append [] 3) -> [3]", "(append [2 4 5 1 3] 3) -> [2 4 5 1 3 3]", "(append [9 4 5 0 9] 1) -> [9 4 5 0 9 1]", "(append [3 8 2] 1) -> [3 8 2 1]", "(append [5 6 4 5] 8) -> [5 6 4 5 8]", "(append [6 4 8] 1) -> [6 4 8 1]"]}
{"name": "append", "time": 4.300555, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [9])) _) _)", "examples": ["(append [0 6] 2) -> [0 6 2]", "(append [3 4 5] 3) -> [3 4 5 3]", "(append [9 4 3] 4) -> [9 4 3 4]", "(append [1] 5) -> [1 5]", "(append [8 3 2 2 7] 0) -> [8 3 2 2 7 0]", "(append [7 1 6 3] 9) -> [7 1 6 3 9]", "(append [] 9) -> [9]"]}
{"name": "append", "time": 0.911991, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [8 0 8 7 6] 6) -> [8 0 8 7 6 6]", "(append [] 6) -> [6]", "(append [5 9] 9) -> [5 9 9]", "(append [7 6] 4) -> [7 6 4]", "(append [5 0 4 5] 2) -> [5 0 4 5 2]", "(append [7] 9) -> [7 9]", "(append [] 4) -> [4]"]}
{"name": "append", "time": 12.140193, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [1])) _) _)", "examples": ["(append [3 9 2] 4) -> [3 9 2 4]", "(append [0 1 2] 2) -> [0 1 2 2]", "(append [7 7 9] 4) -> [7 7 9 4]", "(append [0 5 8] 9) -> [0 5 8 9]", "(append [6 2 1] 8) -> [6 2 1 8]", "(append [] 1) -> [1]", "(append [1 5 3 4] 0) -> [1 5 3 4 0]"]}
{"name": "append", "time": 5.136643, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [2])) _) _)", "examples": ["(append [5 3 7 3 0] 1) -> [5 3 7 3 0 1]", "(append [3] 5) -> [3 5]", "(append [7 2] 3) -> [7 2 3]", "(append [9 6 7 1 3] 5) -> [9 6 7 1 3 5]", "(append [7] 8) -> [7 8]", "(append [7 2 0 5 4] 3) -> [7 2 0 5 4 3]", "(append [] 2) -> [2]"]}
{"name": "append", "time": 0.893108, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [5] 6) -> [5 6]", "(append [9 1] 9) -> [9 1 9]", "(append [] 0) -> [0]", "(append [0 1 0 5] 0) -> [0 1 0 5 0]", "(append [] 2) -> [2]", "(append [] 2) -> [2]", "(append [0] 4) -> [0 4]"]}
{"name": "append", "time": 0.465976, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [4 8 7 4 3] 0) -> [4 8 7 4 3 0]", "(append [3] 1) -> [3 1]", "(append [] 2) -> [2]", "(append [5 0 9 9 4] 7) -> [5 0 9 9 4 7]", "(append [1] 6) -> [1 6]", "(append [8] 1) -> [8 1]", "(append [] 9) -> [9]"]}
{"name": "append", "time": 8.499917, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [7])) _) _)", "examples": ["(append [5 4 6] 1) -> [5 4 6 1]", "(append [] 7) -> [7]", "(append [4 7 3] 1) -> [4 7 3 1]", "(append [9 0 5] 0) -> [9 0 5 0]", "(append [6 8] 5) -> [6 8 5]", "(append [8 8 8 7] 1) -> [8 8 8 7 1]", "(append [8 4 6 3 6] 4) -> [8 4 6 3 6 4]"]}
{"name": "append", "time": 3.040107, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [7])) _) _)", "examples": ["(append [6] 0) -> [6 0]", "(append [1 1 1 8 0] 9) -> [1 1 1 8 0 9]", "(append [4 8 0 2 5] 8) -> [4 8 0 2 5 8]", "(append [] 7) -> [7]", "(append [1 8 4 5] 4) -> [1 8 4 5 4]", "(append [7 5 9] 1) -> [7 5 9 1]", "(append [9 4 9] 9) -> [9 4 9 9]"]}
{"name": "append", "time": 4.329384, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [0])) _) _)", "examples": ["(append [6] 2) -> [6 2]", "(append [3 0] 3) -> [3 0 3]", "(append [5 1 8] 9) -> [5 1 8 9]", "(append [] 0) -> [0]", "(append [0] 6) -> [0 6]", "(append [1 6 8] 4) -> [1 6 8 4]", "(append [] 0) -> [0]"]}
{"name": "append", "time": 4.064383, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [5])) _) _)", "examples": ["(append [9 2 2] 4) -> [9 2 2 4]", "(append [6 0 0] 5) -> [6 0 0 5]", "(append [1 3 0 7 8] 3) -> [1 3 0 7 8 3]", "(append [] 5) -> [5]", "(append [2] 9) -> [2 9]", "(append [3 4 1 8] 9) -> [3 4 1 8 9]", "(append [4] 1) -> [4 1]"]}
{"name": "append", "time": 2.875771, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [1])) _) _)", "examples": ["(append [5 8] 4) -> [5 8 4]", "(append [] 1) -> [1]", "(append [5 5 3 4] 2) -> [5 5 3 4 2]", "(append [0] 7) -> [0 7]", "(append [1 5 9] 7) -> [1 5 9 7]", "(append [3 7] 1) -> [3 7 1]", "(append [7 6 6 8] 8) -> [7 6 6 8 8]"]}
{"name": "append", "time": 2.240737, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [0])) _) _)", "examples": ["(append [4] 8) -> [4 8]", "(append [7 5 7] 1) -> [7 5 7 1]", "(append [5] 8) -> [5 8]", "(append [8 5 0] 0) -> [8 5 0 0]", "(append [0 1 4 2 5] 2) -> [0 1 4 2 5 2]", "(append [4 8] 3) -> [4 8 3]", "(append [] 0) -> [0]"]}
{"name": "append", "time": 3.334664, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [9])) _) _)", "examples": ["(append [2 2 7] 6) -> [2 2 7 6]", "(append [] 9) -> [9]", "(append [2 9 9] 9) -> [2 9 9 9]", "(append [0 4 8 7 7] 1) -> [0 4 8 7 7 1]", "(append [1 7 9 9 6] 8) -> [1 7 9 9 6 8]", "(append [1 0 7 6] 6) -> [1 0 7 6 6]", "(append [9] 2) -> [9 2]"]}
{"name": "append", "time": 5.095053, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [3])) _) _)", "examples": ["(append [7 8 7 0] 1) -> [7 8 7 0 1]", "(append [9] 7) -> [9 7]", "(append [4 9 6 3 0] 1) -> [4 9 6 3 0 1]", "(append [] 3) -> [3]", "(append [7 1 6 1] 2) -> [7 1 6 1 2]", "(append [6 6 3 3 3] 8) -> [6 6 3 3 3 8]", "(append [1 2 1 3 0] 5) -> [1 2 1 3 0 5]"]}
{"name": "append", "time": 10.125657, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [6])) _) _)", "examples": ["(append [] 6) -> [6]", "(append [6 0 5] 0) -> [6 0 5 0]", "(append [1 5] 8) -> [1 5 8]", "(append [2 0 3 9] 4) -> [2 0 3 9 4]", "(append [7 7] 4) -> [7 7 4]", "(append [4 4 8 3 0] 1) -> [4 4 8 3 0 1]", "(append [6 6 6] 8) -> [6 6 6 8]"]}
{"name": "append", "time": 9.396021, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [3])) _) _)", "examples": ["(append [] 3) -> [3]", "(append [5 0 2 6 8] 0) -> [5 0 2 6 8 0]", "(append [5 6 7 5 3] 1) -> [5 6 7 5 3 1]", "(append [1 6 9 8 8] 9) -> [1 6 9 8 8 9]", "(append [4 9 8 2] 1) -> [4 9 8 2 1]", "(append [8 0 6] 1) -> [8 0 6 1]", "(append [2 8 3 3 6] 5) -> [2 8 3 3 6 5]"]}
{"name": "append", "time": 8.048362, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [9])) _) _)", "examples": ["(append [1 1 4 9] 5) -> [1 1 4 9 5]", "(append [8 5 2] 2) -> [8 5 2 2]", "(append [5 3 8] 1) -> [5 3 8 1]", "(append [5 7] 6) -> [5 7 6]", "(append [9 9] 1) -> [9 9 1]", "(append [2 0 2 0] 8) -> [2 0 2 0 8]", "(append [] 9) -> [9]"]}
{"name": "append", "time": 7.215353, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [4])) _) _)", "examples": ["(append [] 4) -> [4]", "(append [8 1 0 7 8] 4) -> [8 1 0 7 8 4]", "(append [4 1 5 3] 4) -> [4 1 5 3 4]", "(append [5 1 8 4] 7) -> [5 1 8 4 7]", "(append [3 7 1] 5) -> [3 7 1 5]", "(append [2 1 3 5 0] 2) -> [2 1 3 5 0 2]", "(append [6 7 1 7] 1) -> [6 7 1 7 1]"]}
