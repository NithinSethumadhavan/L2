{"time": 0.207294, "name": "append", "examples": ["(append [] 6) -> [6]", "(append [2] 3) -> [2 3]", "(append [2] 7) -> [2 7]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (cons d (cons b []))) [6])) _) _)"}
{"time": 1.014116, "name": "append", "examples": ["(append [] 3) -> [3]", "(append [] 2) -> [2]", "(append [2 5 5 4 9] 8) -> [2 5 5 4 9 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.03722, "name": "append", "examples": ["(append [5] 2) -> [5 2]", "(append [5 1 3] 1) -> [5 1 3 1]", "(append [3 9 9 3 0] 5) -> [3 9 9 3 0 5]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.042168, "name": "append", "examples": ["(append [2 6 5 4] 2) -> [2 6 5 4 2]", "(append [1 0] 4) -> [1 0 4]", "(append [2] 1) -> [2 1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.058285, "name": "append", "examples": ["(append [0 5] 9) -> [0 5 9]", "(append [6 6] 0) -> [6 6 0]", "(append [1 1 0] 1) -> [1 1 0 1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.090343, "name": "append", "examples": ["(append [4 5 1 9 0] 6) -> [4 5 1 9 0 6]", "(append [0] 1) -> [0 1]", "(append [1 1 4 8] 3) -> [1 1 4 8 3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.04659, "name": "append", "examples": ["(append [1 7] 1) -> [1 7 1]", "(append [7] 4) -> [7 4]", "(append [9 5 1] 9) -> [9 5 1 9]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.076205, "name": "append", "examples": ["(append [0 7] 8) -> [0 7 8]", "(append [9 2 4 9 1] 4) -> [9 2 4 9 1 4]", "(append [0 3 0 5] 1) -> [0 3 0 5 1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.169752, "name": "append", "examples": ["(append [0 4] 1) -> [0 4 1]", "(append [8 3 9 7 5] 0) -> [8 3 9 7 5 0]", "(append [2 6 8 8] 4) -> [2 6 8 8 4]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.118119, "name": "append", "examples": ["(append [4 5 8 0] 9) -> [4 5 8 0 9]", "(append [3 2 3 5 9] 1) -> [3 2 3 5 9 1]", "(append [7] 6) -> [7 6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.041422, "name": "append", "examples": ["(append [3 9 9 3 8] 8) -> [3 9 9 3 8 8]", "(append [7 5] 8) -> [7 5 8]", "(append [6 7 1 3] 7) -> [6 7 1 3 7]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.509259, "name": "append", "examples": ["(append [9 8 9] 7) -> [9 8 9 7]", "(append [3 2 2 3] 4) -> [3 2 2 3 4]", "(append [0] 1) -> [0 1]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.525224, "name": "append", "examples": ["(append [6] 3) -> [6 3]", "(append [1 0 1] 8) -> [1 0 1 8]", "(append [0] 0) -> [0 0]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.78036, "name": "append", "examples": ["(append [0 9 4 4] 8) -> [0 9 4 4 8]", "(append [0 0] 5) -> [0 0 5]", "(append [5 1 2] 1) -> [5 1 2 1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.771801, "name": "append", "examples": ["(append [7 4 9 1 7] 4) -> [7 4 9 1 7 4]", "(append [9 3] 9) -> [9 3 9]", "(append [4 2 6 8] 3) -> [4 2 6 8 3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.2296, "name": "append", "examples": ["(append [9] 9) -> [9 9]", "(append [3] 9) -> [3 9]", "(append [] 0) -> [0]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (cons d (cons b []))) [0])) _) _)"}
{"time": 1.168876, "name": "append", "examples": ["(append [5 2 2 8] 7) -> [5 2 2 8 7]", "(append [7] 5) -> [7 5]", "(append [7] 1) -> [7 1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.149979, "name": "append", "examples": ["(append [9 8 8 3] 2) -> [9 8 8 3 2]", "(append [4 8 2 3 5] 9) -> [4 8 2 3 5 9]", "(append [7] 7) -> [7 7]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.717876, "name": "append", "examples": ["(append [7 7 7 1] 2) -> [7 7 7 1 2]", "(append [6 5] 4) -> [6 5 4]", "(append [6 6] 8) -> [6 6 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.046859, "name": "append", "examples": ["(append [4 6] 1) -> [4 6 1]", "(append [] 1) -> [1]", "(append [] 1) -> [1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) [1])) _) _)"}
{"time": 1.249604, "name": "append", "examples": ["(append [1 1 8 0 3] 4) -> [1 1 8 0 3 4]", "(append [8] 6) -> [8 6]", "(append [8 5 3 8 4] 4) -> [8 5 3 8 4 4]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.178805, "name": "append", "examples": ["(append [3] 1) -> [3 1]", "(append [9] 3) -> [9 3]", "(append [5] 7) -> [5 7]"], "solution": "(let append (let a (lambda (c b) (cons (car c) (cons b []))) _) _)"}
{"time": 0.721048, "name": "append", "examples": ["(append [2 8] 7) -> [2 8 7]", "(append [0 9 7 4] 9) -> [0 9 7 4 9]", "(append [3 7] 2) -> [3 7 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.258889, "name": "append", "examples": ["(append [7 8 1 3 6] 8) -> [7 8 1 3 6 8]", "(append [7 3 0 8] 5) -> [7 3 0 8 5]", "(append [8 5 9 8] 6) -> [8 5 9 8 6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.402912, "name": "append", "examples": ["(append [5 7] 4) -> [5 7 4]", "(append [5 5 1] 3) -> [5 5 1 3]", "(append [0 3 1 7 1] 3) -> [0 3 1 7 1 3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 6.299234, "name": "append", "examples": ["(append [4 0 3 1 3] 9) -> [4 0 3 1 3 9]", "(append [9] 1) -> [9 1]", "(append [] 7) -> [7]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [7])) _) _)"}
{"time": 0.855439, "name": "append", "examples": ["(append [6 8 1] 3) -> [6 8 1 3]", "(append [2 2] 2) -> [2 2 2]", "(append [8 3 5 3] 0) -> [8 3 5 3 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.566047, "name": "append", "examples": ["(append [] 0) -> [0]", "(append [2 6 0] 1) -> [2 6 0 1]", "(append [] 1) -> [1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.528459, "name": "append", "examples": ["(append [2 9 7 1] 7) -> [2 9 7 1 7]", "(append [7 5] 3) -> [7 5 3]", "(append [8 9 4] 7) -> [8 9 4 7]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.360754, "name": "append", "examples": ["(append [0 7 6 4 7] 9) -> [0 7 6 4 7 9]", "(append [0 6] 1) -> [0 6 1]", "(append [0 3 4 2 0] 5) -> [0 3 4 2 0 5]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.555276, "name": "append", "examples": ["(append [] 8) -> [8]", "(append [] 6) -> [6]", "(append [2 9 4] 6) -> [2 9 4 6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 9.722686, "name": "append", "examples": ["(append [8 7 6 0] 4) -> [8 7 6 0 4]", "(append [7 0 4 3] 8) -> [7 0 4 3 8]", "(append [] 5) -> [5]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [5])) _) _)"}
{"time": 1.505322, "name": "append", "examples": ["(append [5 4] 9) -> [5 4 9]", "(append [3 1 9] 2) -> [3 1 9 2]", "(append [1 9 8 6 6] 2) -> [1 9 8 6 6 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.502004, "name": "append", "examples": ["(append [7] 6) -> [7 6]", "(append [0] 8) -> [0 8]", "(append [9 0 7 5 5] 6) -> [9 0 7 5 5 6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 10.396461, "name": "append", "examples": ["(append [] 3) -> [3]", "(append [5 9 4 3] 6) -> [5 9 4 3 6]", "(append [2 6] 3) -> [2 6 3]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [3])) _) _)"}
{"time": 9.505263, "name": "append", "examples": ["(append [0 4 5 8 4] 7) -> [0 4 5 8 4 7]", "(append [2] 0) -> [2 0]", "(append [] 6) -> [6]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [6])) _) _)"}
{"time": 10.945626, "name": "append", "examples": ["(append [2 6] 0) -> [2 6 0]", "(append [] 9) -> [9]", "(append [] 9) -> [9]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [9])) _) _)"}
{"time": 0.570284, "name": "append", "examples": ["(append [6 0 4] 8) -> [6 0 4 8]", "(append [0] 6) -> [0 6]", "(append [4 2] 3) -> [4 2 3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.316026, "name": "append", "examples": ["(append [4] 7) -> [4 7]", "(append [9 5 5] 4) -> [9 5 5 4]", "(append [7] 2) -> [7 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.555117, "name": "append", "examples": ["(append [0] 1) -> [0 1]", "(append [1 2 1 7] 6) -> [1 2 1 7 6]", "(append [4 3 2 8] 4) -> [4 3 2 8 4]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.585171, "name": "append", "examples": ["(append [4 0] 5) -> [4 0 5]", "(append [5 0 2] 8) -> [5 0 2 8]", "(append [4 0 2 2] 3) -> [4 0 2 2 3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.369264, "name": "append", "examples": ["(append [1 9 2 2] 1) -> [1 9 2 2 1]", "(append [1 3] 3) -> [1 3 3]", "(append [0] 1) -> [0 1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.681157, "name": "append", "examples": ["(append [8 4] 8) -> [8 4 8]", "(append [5 2] 2) -> [5 2 2]", "(append [1 9 5 9] 7) -> [1 9 5 9 7]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.231385, "name": "append", "examples": ["(append [7 3 0] 4) -> [7 3 0 4]", "(append [4 6 6] 1) -> [4 6 6 1]", "(append [0 7 2 6] 8) -> [0 7 2 6 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.316506, "name": "append", "examples": ["(append [1 0 7] 7) -> [1 0 7 7]", "(append [6] 7) -> [6 7]", "(append [5 6 2 0] 1) -> [5 6 2 0 1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.624534, "name": "append", "examples": ["(append [6 1] 8) -> [6 1 8]", "(append [8 9 5] 9) -> [8 9 5 9]", "(append [7] 8) -> [7 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 11.430894, "name": "append", "examples": ["(append [] 2) -> [2]", "(append [0 8 6 3 5] 2) -> [0 8 6 3 5 2]", "(append [3 5 4 1] 4) -> [3 5 4 1 4]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [2])) _) _)"}
{"time": 9.547105, "name": "append", "examples": ["(append [] 0) -> [0]", "(append [2 1] 6) -> [2 1 6]", "(append [7 2] 2) -> [7 2 2]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [0])) _) _)"}
{"time": 0.541434, "name": "append", "examples": ["(append [3 6] 6) -> [3 6 6]", "(append [2 9 4] 2) -> [2 9 4 2]", "(append [9 8 5] 4) -> [9 8 5 4]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 11.21571, "name": "append", "examples": ["(append [] 0) -> [0]", "(append [6 3] 9) -> [6 3 9]", "(append [4 8 6] 5) -> [4 8 6 5]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [0])) _) _)"}
{"time": 1.470826, "name": "append", "examples": ["(append [2 0] 0) -> [2 0 0]", "(append [7 5 0 0] 1) -> [7 5 0 0 1]", "(append [8 3 2] 0) -> [8 3 2 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.664587, "name": "append", "examples": ["(append [3 3] 0) -> [3 3 0]", "(append [1] 7) -> [1 7]", "(append [4 3 5] 8) -> [4 3 5 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.832675, "name": "append", "examples": ["(append [6 0 6 6 1] 8) -> [6 0 6 6 1 8]", "(append [7 6 4 6] 3) -> [7 6 4 6 3]", "(append [1] 6) -> [1 6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 14.933479, "name": "append", "examples": ["(append [2 6 3 7 1] 4) -> [2 6 3 7 1 4]", "(append [] 4) -> [4]", "(append [1 7 0] 5) -> [1 7 0 5]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [4])) _) _)"}
{"time": 16.346096, "name": "append", "examples": ["(append [] 5) -> [5]", "(append [9 1] 5) -> [9 1 5]", "(append [1 3 1 6] 6) -> [1 3 1 6 6]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [5])) _) _)"}
{"time": 0.600332, "name": "append", "examples": ["(append [5 0 0 4 9] 6) -> [5 0 0 4 9 6]", "(append [2 6 1] 3) -> [2 6 1 3]", "(append [2 0 1 2] 1) -> [2 0 1 2 1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.542578, "name": "append", "examples": ["(append [8 3] 1) -> [8 3 1]", "(append [] 8) -> [8]", "(append [] 2) -> [2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.501004, "name": "append", "examples": ["(append [1] 2) -> [1 2]", "(append [0 1] 3) -> [0 1 3]", "(append [3 0 9 6] 1) -> [3 0 9 6 1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 17.674135, "name": "append", "examples": ["(append [] 0) -> [0]", "(append [0 5 4] 2) -> [0 5 4 2]", "(append [0 0 2 3 3] 3) -> [0 0 2 3 3 3]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [0])) _) _)"}
{"time": 1.363875, "name": "append", "examples": ["(append [5 4 3] 0) -> [5 4 3 0]", "(append [2 3 5 5] 0) -> [2 3 5 5 0]", "(append [8 9 3 0] 8) -> [8 9 3 0 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 15.644687, "name": "append", "examples": ["(append [0 9] 1) -> [0 9 1]", "(append [5 0 3] 5) -> [5 0 3 5]", "(append [] 9) -> [9]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [9])) _) _)"}
{"time": 0.672693, "name": "append", "examples": ["(append [1 0 3 5 4] 9) -> [1 0 3 5 4 9]", "(append [6 4 2 9 5] 7) -> [6 4 2 9 5 7]", "(append [5 4 9] 1) -> [5 4 9 1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.151135, "name": "append", "examples": ["(append [7] 9) -> [7 9]", "(append [9] 7) -> [9 7]", "(append [1] 8) -> [1 8]"], "solution": "(let append (let a (lambda (c b) (cons (car c) (cons b []))) _) _)"}
{"time": 0.804868, "name": "append", "examples": ["(append [8 9 7] 3) -> [8 9 7 3]", "(append [5 0] 5) -> [5 0 5]", "(append [9 0 1 5 6] 7) -> [9 0 1 5 6 7]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.208959, "name": "append", "examples": ["(append [9 1 1 2 6] 0) -> [9 1 1 2 6 0]", "(append [8 2] 3) -> [8 2 3]", "(append [2 7 2 8] 5) -> [2 7 2 8 5]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 16.941604, "name": "append", "examples": ["(append [] 2) -> [2]", "(append [3 6 6] 1) -> [3 6 6 1]", "(append [3 4 2] 5) -> [3 4 2 5]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [2])) _) _)"}
{"time": 1.227193, "name": "append", "examples": ["(append [7] 2) -> [7 2]", "(append [8 1 2 9 3] 4) -> [8 1 2 9 3 4]", "(append [8] 5) -> [8 5]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.645167, "name": "append", "examples": ["(append [3] 7) -> [3 7]", "(append [5] 5) -> [5 5]", "(append [2 9 3 0] 4) -> [2 9 3 0 4]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.795657, "name": "append", "examples": ["(append [] 0) -> [0]", "(append [] 9) -> [9]", "(append [6 1 1 2 3] 2) -> [6 1 1 2 3 2]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 17.038638, "name": "append", "examples": ["(append [0 7 5 9] 5) -> [0 7 5 9 5]", "(append [1 5 0] 8) -> [1 5 0 8]", "(append [] 8) -> [8]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [8])) _) _)"}
{"time": 0.778544, "name": "append", "examples": ["(append [3 8 6 2] 0) -> [3 8 6 2 0]", "(append [9 2 8 0] 2) -> [9 2 8 0 2]", "(append [4 4 2 5] 4) -> [4 4 2 5 4]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 18.180306, "name": "append", "examples": ["(append [6 3 5 3 0] 3) -> [6 3 5 3 0 3]", "(append [] 7) -> [7]", "(append [7 5] 9) -> [7 5 9]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [7])) _) _)"}
{"time": 0.707458, "name": "append", "examples": ["(append [7 1] 9) -> [7 1 9]", "(append [0 7 1] 8) -> [0 7 1 8]", "(append [1] 5) -> [1 5]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.484244, "name": "append", "examples": ["(append [6] 3) -> [6 3]", "(append [] 2) -> [2]", "(append [] 0) -> [0]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.233267, "name": "append", "examples": ["(append [0 4 0] 0) -> [0 4 0 0]", "(append [5 3 9 2 0] 3) -> [5 3 9 2 0 3]", "(append [6 5] 1) -> [6 5 1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.008564, "name": "append", "examples": ["(append [] 9) -> [9]", "(append [] 2) -> [2]", "(append [] 2) -> [2]"], "solution": "(let append (let a (lambda (c b) (cons b [])) _) _)"}
{"time": 1.223123, "name": "append", "examples": ["(append [] 7) -> [7]", "(append [] 8) -> [8]", "(append [5 1 3 2 6] 6) -> [5 1 3 2 6 6]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 0.852698, "name": "append", "examples": ["(append [4 2 2 1 8] 1) -> [4 2 2 1 8 1]", "(append [3 1 0 5] 1) -> [3 1 0 5 1]", "(append [0 5] 0) -> [0 5 0]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 10.522527, "name": "append", "examples": ["(append [] 5) -> [5]", "(append [9 6] 0) -> [9 6 0]", "(append [2 8 0] 0) -> [2 8 0 0]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [5])) _) _)"}
{"time": 1.237321, "name": "append", "examples": ["(append [7 1] 2) -> [7 1 2]", "(append [9 3 9 2] 3) -> [9 3 9 2 3]", "(append [9] 4) -> [9 4]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.35284, "name": "append", "examples": ["(append [0 6 6] 8) -> [0 6 6 8]", "(append [8 5 5 5 5] 1) -> [8 5 5 5 5 1]", "(append [0 4 5 8 2] 8) -> [0 4 5 8 2 8]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 9.514108, "name": "append", "examples": ["(append [3 9 6] 2) -> [3 9 6 2]", "(append [] 7) -> [7]", "(append [2 6 6 4] 7) -> [2 6 6 4 7]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [7])) _) _)"}
{"time": 12.364214, "name": "append", "examples": ["(append [5 4 7 8 6] 6) -> [5 4 7 8 6 6]", "(append [] 6) -> [6]", "(append [9 7 4 6 2] 3) -> [9 7 4 6 2 3]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [6])) _) _)"}
{"time": 1.346131, "name": "append", "examples": ["(append [3 7 1] 3) -> [3 7 1 3]", "(append [2 4 1 7 3] 3) -> [2 4 1 7 3 3]", "(append [8 6 2 2 9] 1) -> [8 6 2 2 9 1]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.450877, "name": "append", "examples": ["(append [0 1 2 6 1] 4) -> [0 1 2 6 1 4]", "(append [9] 4) -> [9 4]", "(append [0 2 4 3] 5) -> [0 2 4 3 5]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 3.637089, "name": "append", "examples": ["(append [0 6] 2) -> [0 6 2]", "(append [1] 0) -> [1 0]", "(append [] 6) -> [6]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [6])) _) _)"}
{"time": 1.314027, "name": "append", "examples": ["(append [3 8 8 5] 4) -> [3 8 8 5 4]", "(append [9 3 4 5 1] 7) -> [9 3 4 5 1 7]", "(append [9 4 0] 5) -> [9 4 0 5]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.240111, "name": "append", "examples": ["(append [9 2 8] 9) -> [9 2 8 9]", "(append [3 9] 0) -> [3 9 0]", "(append [2 0] 3) -> [2 0 3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 1.20246, "name": "append", "examples": ["(append [4 7 8 3 3] 6) -> [4 7 8 3 3 6]", "(append [1] 8) -> [1 8]", "(append [5 2 6 9] 3) -> [5 2 6 9 3]"], "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)"}
{"time": 10.062092, "name": "append", "examples": ["(append [] 8) -> [8]", "(append [2 5 8] 0) -> [2 5 8 0]", "(append [8 3 5] 4) -> [8 3 5 4]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [8])) _) _)"}
{"time": 3.339731, "name": "append", "examples": ["(append [] 9) -> [9]", "(append [3 1] 8) -> [3 1 8]", "(append [7] 0) -> [7 0]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [9])) _) _)"}
{"time": 14.169229, "name": "append", "examples": ["(append [7 1 9 3 3] 1) -> [7 1 9 3 3 1]", "(append [3 9 4 7] 6) -> [3 9 4 7 6]", "(append [] 0) -> [0]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [0])) _) _)"}
{"time": 12.87895, "name": "append", "examples": ["(append [] 6) -> [6]", "(append [] 6) -> [6]", "(append [5 9] 0) -> [5 9 0]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [6])) _) _)"}
{"time": 13.386737, "name": "append", "examples": ["(append [3 4 7 5] 4) -> [3 4 7 5 4]", "(append [3 4] 8) -> [3 4 8]", "(append [] 7) -> [7]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [7])) _) _)"}
{"time": 4.82188, "name": "append", "examples": ["(append [5 8 1] 8) -> [5 8 1 8]", "(append [] 8) -> [8]", "(append [1] 6) -> [1 6]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [8])) _) _)"}
{"time": 14.391695, "name": "append", "examples": ["(append [] 7) -> [7]", "(append [0 1 1 0] 7) -> [0 1 1 0 7]", "(append [2 8 2 2] 1) -> [2 8 2 2 1]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [7])) _) _)"}
{"time": 8.549204, "name": "append", "examples": ["(append [5 5 4 0] 4) -> [5 5 4 0 4]", "(append [] 1) -> [1]", "(append [0 6 3] 6) -> [0 6 3 6]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [1])) _) _)"}
{"time": 9.968272, "name": "append", "examples": ["(append [] 8) -> [8]", "(append [4 1 8 6] 4) -> [4 1 8 6 4]", "(append [1 4 8 9] 9) -> [1 4 8 9 9]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [8])) _) _)"}
{"time": 8.832467, "name": "append", "examples": ["(append [] 0) -> [0]", "(append [1 7 2] 5) -> [1 7 2 5]", "(append [2 0 3 8 5] 5) -> [2 0 3 8 5 5]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [0])) _) _)"}
{"time": 5.652991, "name": "append", "examples": ["(append [6 4] 2) -> [6 4 2]", "(append [] 3) -> [3]", "(append [2 4 4] 3) -> [2 4 4 3]"], "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [3])) _) _)"}
