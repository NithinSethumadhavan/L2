{"examples": ["(sums []) -> []", "(sums [[5 9 2] [9 6] [2 2 6 5]]) -> [16 15 15]", "(sums [[3 6 3] [3 0] []]) -> [12 3 0]", "(sums [[1 9 2 0] [3 0 8] [9 1 9]]) -> [12 11 19]", "(sums []) -> []", "(sums [[4 4 3 1] [] [8] [7 2]]) -> [12 0 8 9]", "(sums [[3 9 2 8 8] [4 5 4 3]]) -> [30 16]", "(sums []) -> []", "(sums [[2 7 7 6]]) -> [22]", "(sums [[] [2 1]]) -> [0 3]", "(sums [[7 8 5] [8 9] [7]]) -> [20 17 7]", "(sums [[0 2 1] [] [8 8 4] [0 8 6]]) -> [3 0 20 14]"], "time": 0.402907, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 7] []]) -> [13 0]", "(sums []) -> []", "(sums [[9 0 6] [6 4 9] [2 5 4 0]]) -> [15 19 11]", "(sums [[3 9]]) -> [12]", "(sums [[7 9 5] [2 5 4] [3 2 5 8] [8 0]]) -> [21 11 18 8]", "(sums []) -> []", "(sums [[2 9 7 6] [6 2 4]]) -> [24 12]", "(sums [[1 5 9 7] [2 0 7] [] [1 5]]) -> [22 9 0 6]", "(sums [[2 6 9 3 1] [] [0 0 3 2 7]]) -> [21 0 12]", "(sums []) -> []", "(sums [[7 5 0 4 0] [6 2] [5 4 0 5 9] [1 9 4 1]]) -> [16 8 23 15]"], "time": 0.414336, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 3] [4] [8 0 4 1]]) -> [11 4 13]", "(sums [[] [2 4 5 7] [1 0] [8 1 7] [1 7 4]]) -> [0 18 1 16 12]", "(sums [[5 3 7 2]]) -> [17]", "(sums [[2 0] [] [8 0 8 4] [9 9 7 5] [7 4]]) -> [2 0 20 30 11]", "(sums []) -> []", "(sums [[4 5 2] [9] [6 9 5 9]]) -> [11 9 29]", "(sums [[1]]) -> [1]", "(sums [[1 3 8 8 2] [1 8 7 5] [6 1 7] [9 7 7 4 3] [4 6 5 0 2]]) -> [22 21 14 30 17]", "(sums [[1] [8 3 2 7] [8 7] [8 5 3 4]]) -> [1 20 15 20]", "(sums []) -> []", "(sums [[7 3 3 2] [9] [] [7 3 9 9 0] [1 7 7 1]]) -> [15 9 0 28 16]"], "time": 0.442077, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 4] [6]]) -> [8 6]", "(sums [[9] [5]]) -> [9 5]", "(sums [[6 3 1] [8 3 1 2 9] [2 3 7 3 5] [6]]) -> [10 23 20 6]", "(sums [[1 4 1] [9 2 1] [6 5 9] []]) -> [6 12 20 0]", "(sums [[4 2] [2 7 2 8 0] [5 3] [8 4 3 0 0] []]) -> [6 19 8 15 0]", "(sums [[0 7 8 9 6] [5 9 8 8]]) -> [30 30]", "(sums []) -> []", "(sums [[3 5] [8 8 5 3 9] [] [5 9 3 3] [6 0 0 4 0]]) -> [8 33 0 20 10]", "(sums [[6 3 8 9 1] [3 4 4 3 6] [1 7 4 9]]) -> [27 20 21]", "(sums [[7 9 6 1 6] [9 3 8] [4 9]]) -> [29 20 13]", "(sums [[2 7 1 0] [8 9]]) -> [10 17]"], "time": 0.437123, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[3 2 3] [1 1 8 9] [0 0] [7 8 5 6]]) -> [8 19 0 26]", "(sums [[0 4 9 3] [7 0 5 5] [5]]) -> [16 17 5]", "(sums [[] [9] [6 6 7]]) -> [0 9 19]", "(sums []) -> []", "(sums [[9 3 9] [9 5 2 3] [1 5 9] [7 8 0 1] [4 4 3 5]]) -> [21 19 15 16 16]", "(sums [[4 8] [2 2 1 1] []]) -> [12 6 0]", "(sums [[] [1]]) -> [0 1]", "(sums [[]]) -> [0]", "(sums [[] [9]]) -> [0 9]", "(sums [[8] [1 1 8] [1 0 7 5 1]]) -> [8 10 14]", "(sums [[5] [4] [4 2 3 2 1]]) -> [5 4 12]"], "time": 0.426659, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0 0 8 1] [6] [2 8 7] []]) -> [9 6 17 0]", "(sums [[2 9 7] [3 9] [8 8 1] [0 4 3] [5 9 1 1]]) -> [18 12 17 7 16]", "(sums [[4] [] [6 9]]) -> [4 0 15]", "(sums [[8 6] [4 0]]) -> [14 4]", "(sums [[3 3 7] [0 4 7 3 3] [3 5 0 1 8] [5 4 6 8] [7 1 1]]) -> [13 17 17 23 9]", "(sums [[2 0 3 9 5] [8]]) -> [19 8]", "(sums []) -> []", "(sums [[4 0]]) -> [4]", "(sums [[4 6] [] [] [6 7] [2 3 7]]) -> [10 0 0 13 12]", "(sums [[]]) -> [0]", "(sums [[4 1 6] [9 4 3]]) -> [11 16]"], "time": 0.435592, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 5] [4] [7 5 2 8 2] [2] [6 9 5]]) -> [11 4 24 2 20]", "(sums [[] [] [8 2 2 4 6] [2 0 2]]) -> [0 0 22 4]", "(sums [[1 8 5] [4 9] []]) -> [14 13 0]", "(sums [[1] [2 3 5 7 9]]) -> [1 26]", "(sums [[] [5 7] [] []]) -> [0 12 0 0]", "(sums [[] []]) -> [0 0]", "(sums [[2 0 0 4] [9 7] [6] [0 9 7 3 1]]) -> [6 16 6 20]", "(sums [[1] [0 9 3 3 0] [1 9]]) -> [1 15 10]", "(sums [[3 5 6] [3 3 8] [1 2 4] [7 2 6]]) -> [14 14 7 15]", "(sums []) -> []", "(sums [[] [] []]) -> [0 0 0]"], "time": 0.441408, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[5 8 5 0]]) -> [18]", "(sums [[8 8 8 8] [3] [] [] [4 4 8 6 4]]) -> [32 3 0 0 26]", "(sums [[] [] [1 2 4] [5 2 3 1 5] [3 8 9]]) -> [0 0 7 16 20]", "(sums [[0] [1 4]]) -> [0 5]", "(sums [[7 5 4]]) -> [16]", "(sums [[]]) -> [0]", "(sums [[2 8 1 4 9] [3 5 6 4] [0 3 4] [5 2 7]]) -> [24 18 7 14]", "(sums []) -> []", "(sums [[2] [5 6] [2 3 2 2]]) -> [2 11 9]", "(sums [[5 8 1] [2 4] [0 5 0 6 8]]) -> [14 6 19]", "(sums [[3] [6] [8]]) -> [3 6 8]"], "time": 0.571493, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2]]) -> [2]", "(sums [[] [7 4 5 9 2]]) -> [0 27]", "(sums [[7 3 1]]) -> [11]", "(sums []) -> []", "(sums [[] [1 3 4 2 2]]) -> [0 12]", "(sums []) -> []", "(sums [[] [7 1 1] []]) -> [0 9 0]", "(sums [[] [1 5 2] [0 0 8 9 6] [4] [2]]) -> [0 8 23 4 2]", "(sums [[] [7 5 3 7] [7 6 1 2 0] [6 8 4 6] [1 8 2 2]]) -> [0 22 16 24 13]", "(sums [[4 5 2 3]]) -> [14]", "(sums [[9 7 8]]) -> [24]"], "time": 0.607769, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 5 1 1 2] [] [8 1 7 7 3]]) -> [13 0 26]", "(sums [[3 4 1 3]]) -> [11]", "(sums [[3 5 3] [2] []]) -> [11 2 0]", "(sums [[1 0 6 8 8]]) -> [23]", "(sums []) -> []", "(sums [[3 4]]) -> [7]", "(sums [[4 7 7]]) -> [18]", "(sums [[0 4 5 1] [7 8]]) -> [10 15]", "(sums [[5 5] [6 7 2 1 2] [2]]) -> [10 18 2]", "(sums [[] [2 5 9 0] [7 4 9 9]]) -> [0 16 29]", "(sums [[2]]) -> [2]"], "time": 0.569235, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 3] [] [7] []]) -> [12 0 7 0]", "(sums [[1 0 1 0] [6]]) -> [2 6]", "(sums [[] [3] [1 8] [9 9 7]]) -> [0 3 9 25]", "(sums []) -> []", "(sums [[5 1 0]]) -> [6]", "(sums [[9 0 6] [4 0 7 7 8] [] [9 4 3 3] [0 3 1]]) -> [15 26 0 19 4]", "(sums [[]]) -> [0]", "(sums [[] [7 8 1 1] [9 3 2 7] [4]]) -> [0 17 21 4]", "(sums [[3 6 9 6 6] [3 1 1 8] [3 0 3 0 2] [] [1 0 5 7]]) -> [30 13 8 0 13]", "(sums [[] [] [4 2 3] [4 0 6 7 7]]) -> [0 0 9 24]", "(sums [[1 1] [3 8 2 3 6] [4 6 1] [3 4]]) -> [2 22 11 7]"], "time": 0.612226, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 2 0] [9 7]]) -> [9 16]", "(sums [[] [9 4 4] [1 4] [2 1 2 1 8]]) -> [0 17 5 14]", "(sums [[3 6 0 3 0]]) -> [12]", "(sums [[2 1 0 2 4]]) -> [9]", "(sums [[7 2 4 7 9] [7 1 5 3] [] [1]]) -> [29 16 0 1]", "(sums [[0 8] [0] [4 3]]) -> [8 0 7]", "(sums [[2 1 5 5 1] [5 9] [] [] [2 9 0 5]]) -> [14 14 0 0 16]", "(sums [[6] [] [2 8 9 6 6] [0]]) -> [6 0 31 0]", "(sums []) -> []", "(sums []) -> []", "(sums []) -> []"], "time": 0.619593, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4] [8 8 6 2 9] [1 3 2] [0]]) -> [4 33 6 0]", "(sums [[1 3 2] [0 0]]) -> [6 0]", "(sums [[8]]) -> [8]", "(sums [[0 3 5]]) -> [8]", "(sums [[3 1] [2] [6 1 6 8 9] [5 5 3 4]]) -> [4 2 30 17]", "(sums [[2] [6 2 6] [2 9 7 5 2] [9] [7 1]]) -> [2 14 25 9 8]", "(sums []) -> []", "(sums [[9 3] [] [3 5 0 8 2] [5 7 3]]) -> [12 0 18 15]", "(sums [[2 5 8 3 0] [3 4] [8 7 7 0 6] [6 0]]) -> [18 7 28 6]", "(sums []) -> []", "(sums [[7] [2 2 0 7]]) -> [7 11]"], "time": 0.62487, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [] [] [2] []]) -> [0 0 0 2 0]", "(sums [[1 5 7 2] [3 6 1] [] [3 4]]) -> [15 10 0 7]", "(sums [[3 8 5] [4 9 8] [6 9 0 2 2] [6]]) -> [16 21 19 6]", "(sums []) -> []", "(sums []) -> []", "(sums [[1 2 3 3] [5] [8 4] [2 9 4 1] [0 8]]) -> [9 5 12 16 8]", "(sums [[8 5 8 9 6] [] [4 1 8]]) -> [36 0 13]", "(sums [[4 4 3 5] [8 8] [5 9 6 8] [7 1 1]]) -> [16 16 28 9]", "(sums [[6 6 9] []]) -> [21 0]", "(sums [[6 2] [9 9] [8] []]) -> [8 18 8 0]", "(sums [[1 4 9 2] [9 7 2 3] [5]]) -> [16 21 5]"], "time": 0.588186, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 4 8]]) -> [19]", "(sums [[9]]) -> [9]", "(sums [[] [0 6 8 8 2] [7 3 6 7 4]]) -> [0 24 27]", "(sums [[5 2 2 0 6] [1 5] [6 3 9 1 0]]) -> [15 6 19]", "(sums [[] [] [0 9 9]]) -> [0 0 18]", "(sums [[1 2 8 8] [8] [1] [0 7 5 5] []]) -> [19 8 1 17 0]", "(sums [[6 4 3 2] [0 2 8] [9 5 9 2 2] [8 2 0 5] [3 9 3 3]]) -> [15 10 27 15 18]", "(sums [[2] [7 9 1 4 8] [1] [1 7 6 7 3]]) -> [2 29 1 24]", "(sums [[9 2 3] [6 8 3 9 6] [] [1]]) -> [14 32 0 1]", "(sums [[6 4] [8 9 2 3 4]]) -> [10 26]", "(sums [[1 2 7 7 9] [5 6] [6 7]]) -> [26 11 13]"], "time": 0.632726, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 7 4 0] [5 1 8 0]]) -> [15 14]", "(sums [[0 3 3 7 3] [8 9 0 0]]) -> [16 17]", "(sums [[7 8 0 2 2] [5] [1 1 5] [9 8 5]]) -> [19 5 7 22]", "(sums [[9]]) -> [9]", "(sums [[6 7 1 1 1] [6] [3 6]]) -> [16 6 9]", "(sums [[3 0] [3 0] [8] [3 0 6] [3 0 5]]) -> [3 3 8 9 8]", "(sums []) -> []", "(sums [[5 8]]) -> [13]", "(sums [[6] [4 0 9] [0] [2] [9 0 8]]) -> [6 13 0 2 17]", "(sums []) -> []", "(sums [[1] [7 6 0] [0 0] [2 5 0 2] [0 3]]) -> [1 13 0 9 3]"], "time": 1.036932, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[]]) -> [0]", "(sums [[5] [7 6] [5 5 6 2 4] [1 0 0 8] [6 2 6 0]]) -> [5 13 22 9 14]", "(sums []) -> []", "(sums [[4 6 3] [8 2] [3 7 9] [7] [3 2]]) -> [13 10 19 7 5]", "(sums []) -> []", "(sums [[4 1 3 5 3]]) -> [16]", "(sums []) -> []", "(sums []) -> []", "(sums [[] [0 1] [7] [] []]) -> [0 1 7 0 0]", "(sums [[] [2 7]]) -> [0 9]", "(sums [[] [7 9 5 2 3] [7 8] [1 3] [2 6 0 9 3]]) -> [0 26 15 4 20]"], "time": 0.429062, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 3] [7 0 9] [] [2 0]]) -> [12 16 0 2]", "(sums [[7 0 9 6 0] [9 6 1] [3 7 4] [4 1]]) -> [22 16 14 5]", "(sums [[9] [3 5 2 7 8]]) -> [9 25]", "(sums []) -> []", "(sums [[6 2 1 3] [] [4 3] [3 7 4]]) -> [12 0 7 14]", "(sums [[5 7 6 3 9] [] [9 9 2 9]]) -> [30 0 29]", "(sums [[2 8]]) -> [10]", "(sums [[] [6 5 8 9 7]]) -> [0 35]", "(sums [[0 6 8 9] [8 7 6 2] [4 4 9 4] []]) -> [23 23 21 0]", "(sums [[9 0] [2 6 5 1]]) -> [9 14]", "(sums [[7 8 4] [1 4 1 7 9] [2 1] [] []]) -> [19 22 3 0 0]"], "time": 0.453232, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1] [8 0 3 9] [2] [3] []]) -> [1 20 2 3 0]", "(sums [[0] []]) -> [0 0]", "(sums [[6 4 1 0] [6 7 0 5 8] [] [0 5]]) -> [11 26 0 5]", "(sums [[5 3 7] []]) -> [15 0]", "(sums []) -> []", "(sums [[7 2 8 0] []]) -> [17 0]", "(sums [[8 8 6 6 5]]) -> [33]", "(sums []) -> []", "(sums [[3] [] [] [7 3 6 9 0] []]) -> [3 0 0 25 0]", "(sums [[4 2 3 3 8] [1] [2 3] [3]]) -> [20 1 5 3]", "(sums [[6 6 7 4] [5] [4 1 5 8] [7 2]]) -> [23 5 18 9]"], "time": 0.475108, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [1 5 8]]) -> [0 14]", "(sums [[8 7] [] []]) -> [15 0 0]", "(sums [[2 9 5] [9 0 2] [] [0 7 0 5 4]]) -> [16 11 0 16]", "(sums [[]]) -> [0]", "(sums [[7 2]]) -> [9]", "(sums [[8 1 2 4] [0 6 7 9] [0 6] []]) -> [15 22 6 0]", "(sums [[] [9 2 8 0]]) -> [0 19]", "(sums [[8 8] []]) -> [16 0]", "(sums [[1 4 5 3]]) -> [13]", "(sums [[5 7 1 0] [6 0 9 0 0]]) -> [13 15]", "(sums [[1 5 8]]) -> [14]"], "time": 0.474926, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1 2 5 8 0]]) -> [16]", "(sums [[] [9]]) -> [0 9]", "(sums [[] [8 3] [5 7 7 6 2]]) -> [0 11 27]", "(sums [[4 8 6 6] [] [0 6 4]]) -> [24 0 10]", "(sums [[9 5 2 3] [5 1 4 6 6] [6] [4 4]]) -> [19 22 6 8]", "(sums []) -> []", "(sums [[7 1 4]]) -> [12]", "(sums []) -> []", "(sums [[7] [6] [] [6 8]]) -> [7 6 0 14]", "(sums [[] [4]]) -> [0 4]", "(sums []) -> []"], "time": 0.484617, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 7 3 8 5] []]) -> [31 0]", "(sums [[] [9 9 0 0] [4 7 9] [9 3 7 1] [6]]) -> [0 18 20 20 6]", "(sums [[1] [7 2 3 2] [1 2 1 5 9]]) -> [1 14 18]", "(sums [[4 4] [7 1] [] [7 6] [3 4 9]]) -> [8 8 0 13 16]", "(sums [[5] [8 6 7 6 0] [7 7 5]]) -> [5 27 19]", "(sums [[7 7 2 1]]) -> [17]", "(sums [[2 4 0 9 0] [9] [] [5 9 1]]) -> [15 9 0 15]", "(sums [[7] [9] [8 5 6]]) -> [7 9 19]", "(sums [[3 3 5 2 7] [3 1 3 4] [7 0] [5 5] [9]]) -> [20 11 7 10 9]", "(sums [[5 3 8 4 2] [4 7 5 7 1] [4 5 9] [4 0 5 8 3] [1 0 1 9]]) -> [22 24 18 20 11]", "(sums [[5 4 2 9 4] [6 0 7 5]]) -> [24 18]"], "time": 0.499004, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2 9 8 8] [5 4 9 5 0] [] [5 0 9]]) -> [27 23 0 14]", "(sums [[0 7 5 6] [8 0 1 7] [6 2 8] [3 9 5 6]]) -> [18 16 16 23]", "(sums [[] [9 4 0] [5 4 7] [0 3] [4 8 1]]) -> [0 13 16 3 13]", "(sums []) -> []", "(sums []) -> []", "(sums [[9 8 2 7 8] [9] [5]]) -> [34 9 5]", "(sums [[4] [2 9] [5 1 5 7 7] [0]]) -> [4 11 25 0]", "(sums [[8 3 9] [6 6 2 5 2]]) -> [20 21]", "(sums [[8]]) -> [8]", "(sums [[] [5 7 6 6]]) -> [0 24]", "(sums []) -> []"], "time": 0.435775, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0] [7]]) -> [0 7]", "(sums [[]]) -> [0]", "(sums []) -> []", "(sums [[9 7 4 3] [8 6 0 7] [0 3 0]]) -> [23 21 3]", "(sums [[7 4 4 2] [0 7 2] [8 1 6 5] [3 5 1 1] [5 6 7 9 1]]) -> [17 9 20 10 28]", "(sums [[5] [6 9 5] [8] [5 3 7 7 7]]) -> [5 20 8 29]", "(sums [[5 2 1 4 4] [] [8] [7 8 3 5]]) -> [16 0 8 23]", "(sums [[3 2 3 6] [7]]) -> [14 7]", "(sums [[7 0 2 7 8] [] [5 4 9]]) -> [24 0 18]", "(sums [[6 5 4 4] [] [9 6 7 9 5] [] []]) -> [19 0 36 0 0]", "(sums [[] [9 1 6] [1 6] []]) -> [0 16 7 0]"], "time": 0.437051, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 4 2 9] [5 8 6 4] [7 8 1 3 7] [] []]) -> [22 23 26 0 0]", "(sums [[] [6 2 2 8] [7 8 0 6 9] [0 6 3 3 9] []]) -> [0 18 30 21 0]", "(sums [[2 3 6] [3 3] [8 9]]) -> [11 6 17]", "(sums [[1 6 9] [0 5 6] [5] [2] [4 0 8 7 4]]) -> [16 11 5 2 23]", "(sums [[8 1 4] [8 4 1] []]) -> [13 13 0]", "(sums [[3 4 7]]) -> [14]", "(sums []) -> []", "(sums [[] [5 1]]) -> [0 6]", "(sums [[7 8 7 6] [7 9 9 9] [4 6 5 1 7] [3]]) -> [28 34 23 3]", "(sums [[8 9 2] [] [7] [] [8 3]]) -> [19 0 7 0 11]", "(sums [[1 9 6 3] [1 6 5] [6 3 4 8 3] [6 8]]) -> [19 12 24 14]"], "time": 0.517946, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums []) -> []", "(sums [[4]]) -> [4]", "(sums [[9 3 2 8]]) -> [22]", "(sums [[3 1 6 8 7] [4 2 0 3] [4 7 1 3] [1]]) -> [25 9 15 1]", "(sums [[4 5] [3 4] [] [9 7] [0 1 2]]) -> [9 7 0 16 3]", "(sums [[3] [5 5 1 6]]) -> [3 17]", "(sums [[7 6 9] [0 3 1 9 2] []]) -> [22 15 0]", "(sums [[2 1]]) -> [3]", "(sums [[9]]) -> [9]", "(sums [[7 9] [8 1] [3 3] [2 4 4 3 3]]) -> [16 9 6 16]"], "time": 0.486036, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [8 0 9] [9 0 8 5] [9 7 4 8]]) -> [0 17 22 28]", "(sums [[0 2 2 4]]) -> [8]", "(sums [[6 0 8 9 2] [1 1 7 7 2]]) -> [25 18]", "(sums [[0 3 5 6 6]]) -> [20]", "(sums [[1 6 4] [3] [] [8 9 1 5 6]]) -> [11 3 0 29]", "(sums [[4 8] [6]]) -> [12 6]", "(sums [[] [9 5 7 9]]) -> [0 30]", "(sums [[5 8 6] [0 5 9 4]]) -> [19 18]", "(sums [[7] [9] [9 1 5 9 8] []]) -> [7 9 32 0]", "(sums [[] [5 0 8]]) -> [0 13]", "(sums [[6] [9] [5] [3 9 6 3]]) -> [6 9 5 21]"], "time": 0.514494, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[5]]) -> [5]", "(sums [[0 5 5 7] [9 4 3 0 2]]) -> [17 18]", "(sums []) -> []", "(sums [[4 7 5 1 2] [4 2 0]]) -> [19 6]", "(sums [[3 8 8] [] [6]]) -> [19 0 6]", "(sums []) -> []", "(sums [[8 3 4] [] [6] [9]]) -> [15 0 6 9]", "(sums [[4 2 5]]) -> [11]", "(sums [[1 5 6] [4 2 1 2] [4 2] [9 0 1] [2 2]]) -> [12 9 6 10 4]", "(sums [[5 3 8] []]) -> [16 0]", "(sums [[4 0 4 9 8]]) -> [25]"], "time": 0.43295, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 6]]) -> [15]", "(sums []) -> []", "(sums [[5 0 4]]) -> [9]", "(sums [[0] [6 6 3 9] [8] [5] [9 1]]) -> [0 24 8 5 10]", "(sums [[9 6 0 3] [5 3 0 8]]) -> [18 16]", "(sums [[5 5 6 9 3] [3]]) -> [28 3]", "(sums [[8 8] [5 2 8 2 9] [9 0 9 0]]) -> [16 26 18]", "(sums [[8 4 5] [7 4 0] [] [0 7 1 5] [8 6]]) -> [17 11 0 13 14]", "(sums [[5 5]]) -> [10]", "(sums [[5 2 7 3] [0 9 8 0 5] []]) -> [17 22 0]", "(sums [[1 2] [4 0 7]]) -> [3 11]"], "time": 0.516912, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [1 6 1 5 8] [7]]) -> [0 21 7]", "(sums [[1 2 8 4] [0 8 7] [3 1 4] [0 0]]) -> [15 15 8 0]", "(sums [[1]]) -> [1]", "(sums [[3 5 9 3] [1] [5 0 2 3 8]]) -> [20 1 18]", "(sums [[1 3 8 8] [6 7 0 1] [1 8] [] [2]]) -> [20 14 9 0 2]", "(sums [[3] [8 1 3 2 4] [7 8 5 6] []]) -> [3 18 26 0]", "(sums []) -> []", "(sums [[8 1 1]]) -> [10]", "(sums [[6]]) -> [6]", "(sums []) -> []", "(sums [[] [5 2] [] [3]]) -> [0 7 0 3]"], "time": 0.53435, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[0 5 5 1 6] [6 7]]) -> [17 13]", "(sums [[7 5 7]]) -> [19]", "(sums [[7 6 8]]) -> [21]", "(sums []) -> []", "(sums []) -> []", "(sums [[] [8 9] []]) -> [0 17 0]", "(sums [[6 7 9 3] [4] [5 8] [5 0 8]]) -> [25 4 13 13]", "(sums [[3 6 8 9] [3 8 1] [8 4] [0]]) -> [26 12 12 0]", "(sums [[3 4 8] [4 4 9 9] [0 9] [0 2] [9 0 1]]) -> [15 26 9 2 10]", "(sums [[] [2 8 8] [] [5 2 3 6]]) -> [0 18 0 16]"], "time": 0.491819, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1 3 2] [3 0] [9 4] [0] []]) -> [6 3 13 0 0]", "(sums [[0 1 1] [5] [] [5 3 6]]) -> [2 5 0 14]", "(sums [[3 9 4]]) -> [16]", "(sums [[4 6 6]]) -> [16]", "(sums [[] [8 5] [7]]) -> [0 13 7]", "(sums [[5 9] [5 1]]) -> [14 6]", "(sums [[1 3 9 6] [0] []]) -> [19 0 0]", "(sums []) -> []", "(sums [[9 3] [9 0 9 7]]) -> [12 25]", "(sums [[8 4 8] [5 8 3 4 3]]) -> [20 23]", "(sums [[0 0 4 8] [3 8 3 5] [] []]) -> [12 19 0 0]"], "time": 0.400609, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [0 1 3 2] [4]]) -> [0 6 4]", "(sums []) -> []", "(sums [[9] [1 2 3 6] [6 4 5 6 4]]) -> [9 12 25]", "(sums [[7 9] [7]]) -> [16 7]", "(sums [[0 5] [1 2 5 0] [7 3 0 9]]) -> [5 8 19]", "(sums [[1] [8]]) -> [1 8]", "(sums [[1]]) -> [1]", "(sums [[1 7] [6 0] [4 7 2 0 8]]) -> [8 6 21]", "(sums [[7 8 7 5] [8] [2 7 2]]) -> [27 8 11]", "(sums [[] [2 2 6 2 0] [] [7 2 0 0 9] [4]]) -> [0 12 0 18 4]", "(sums [[3] [] [] [9 7 0 8]]) -> [3 0 0 24]"], "time": 0.414272, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2 1] [6 4 5 4] [1 5 9 9 6] [1 0 1 9 4] [8 7 3 8]]) -> [3 19 30 15 26]", "(sums [[4 9 3 9]]) -> [25]", "(sums []) -> []", "(sums [[6 1 2]]) -> [9]", "(sums [[] [6]]) -> [0 6]", "(sums [[2 8 4 1] [1 8 0 0 0]]) -> [15 9]", "(sums []) -> []", "(sums [[4 5 4] [3 8 0 5]]) -> [13 16]", "(sums [[6 0 9 5] [9] [0 2]]) -> [20 9 2]", "(sums [[9 4 2 2 5] [2 9 1 4] [4 1] [0 1]]) -> [22 16 5 1]", "(sums []) -> []"], "time": 0.480414, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums []) -> []", "(sums [[8 3 9]]) -> [20]", "(sums [[9 0] [3 2] [5 9 5]]) -> [9 5 19]", "(sums [[] [1 3] [6 5 8 5]]) -> [0 4 24]", "(sums [[4 2 8 3 7] [6 0 2 8]]) -> [24 16]", "(sums [[8 7 1 5] [0 1] [4] [1 1 4 0 4] [9]]) -> [21 1 4 10 9]", "(sums []) -> []", "(sums []) -> []", "(sums [[5 3 8] [5 0] [8]]) -> [16 5 8]", "(sums [[1 6] [0 5 8 9]]) -> [7 22]"], "time": 0.460394, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 8 2] [0] [5 6 2 4 0]]) -> [17 0 17]", "(sums [[1 9]]) -> [10]", "(sums [[9 3 0 5] [4 4]]) -> [17 8]", "(sums []) -> []", "(sums [[1 3] [9 2 4 6 6] [] [6 0 4 3 8] [2 2 5 4]]) -> [4 27 0 21 13]", "(sums [[] [7 2 1] [2 4 3 2 1] [6 9 4 3]]) -> [0 10 12 22]", "(sums [[] [] [0 6 2 6 0] []]) -> [0 0 14 0]", "(sums [[2 1 4 5 6] [6 4 1 7] [2 8]]) -> [18 18 10]", "(sums []) -> []", "(sums [[0 5 8 6] [8] [7 2 7]]) -> [19 8 16]", "(sums [[] [6 0 6 7]]) -> [0 19]"], "time": 0.411415, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [] [6 1 9]]) -> [0 0 16]", "(sums []) -> []", "(sums []) -> []", "(sums [[] [1 8 9] []]) -> [0 18 0]", "(sums [[3 2 5] [] [7 8 0 2] [3 8 1]]) -> [10 0 17 12]", "(sums []) -> []", "(sums [[] [3 9] [8]]) -> [0 12 8]", "(sums [[3 0 7 7 6] [0] [7 7] [2 3]]) -> [23 0 14 5]", "(sums [[9 2 0 9] [] [] [7 5 0 0]]) -> [20 0 0 12]", "(sums [[4 5 5]]) -> [14]", "(sums [[8 4 0 0 0] []]) -> [12 0]"], "time": 0.420378, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0 6] []]) -> [6 0]", "(sums [[8 4]]) -> [12]", "(sums []) -> []", "(sums [[0] [9 9 7] [2]]) -> [0 25 2]", "(sums [[5 0 2] [0 0 4 3 1] [9 0 4] [] [6]]) -> [7 8 13 0 6]", "(sums [[0 5 3 1 2]]) -> [11]", "(sums [[7] [1 5 2 1 6] [5 4 2] [7 6]]) -> [7 15 11 13]", "(sums [[4 0 6] [] [6 2 9 6 7]]) -> [10 0 30]", "(sums [[1 3] []]) -> [4 0]", "(sums []) -> []", "(sums [[3 6 9 2]]) -> [20]"], "time": 0.481054, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0 2] [5]]) -> [2 5]", "(sums [[4] [6]]) -> [4 6]", "(sums [[] [4 1 2 3]]) -> [0 10]", "(sums [[1 3 4] [3 2 2] [9]]) -> [8 7 9]", "(sums [[8] [1] [2 9]]) -> [8 1 11]", "(sums [[9 6 0 1 8] []]) -> [24 0]", "(sums [[2 4 9 0 2] [9 6 4 6 4] [6 5 5] [4 5 3 2 0]]) -> [17 29 16 14]", "(sums [[3] [1 0 5 5 2] [9 3 2 4 0] [5]]) -> [3 13 18 5]", "(sums [[7] [3 0] []]) -> [7 3 0]", "(sums [[1 2]]) -> [3]", "(sums [[6 6 3 1 3] [3 0] [7 7 5 2 2] [5] [5 3 4]]) -> [19 3 23 5 12]"], "time": 0.414342, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 9 0 1] [] [2 5 4] [] []]) -> [16 0 11 0 0]", "(sums [[1] [1 6] [] [8 0] [3 4]]) -> [1 7 0 8 7]", "(sums [[] [5 7] [8 6] [9 9 4 8] [6]]) -> [0 12 14 30 6]", "(sums [[5 4 8 9]]) -> [26]", "(sums [[0 1]]) -> [1]", "(sums [[9 6] [4 2] [6 5 2]]) -> [15 6 13]", "(sums [[]]) -> [0]", "(sums [[2 7] [1 3] [4]]) -> [9 4 4]", "(sums [[6 0 3 2] []]) -> [11 0]", "(sums [[2 0] []]) -> [2 0]", "(sums [[1 7] [6 7]]) -> [8 13]"], "time": 0.477558, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [4 2 4 8 6]]) -> [0 24]", "(sums [[1 3 3 2] [] [9] [8 0 7] [7 3 6]]) -> [9 0 9 15 16]", "(sums [[3 1 2] [] [7 5] [2 3 2] [1 5 5 4]]) -> [6 0 12 7 15]", "(sums [[1 4 2 3] [8] [6 9 7 7] [5 7 4 6 3] [0 4 7 1]]) -> [10 8 29 25 12]", "(sums [[1 2 3 5] [8 0 0] [7 0 9 4] [8 9 9 3 5] [9 0 9 3]]) -> [11 8 20 34 21]", "(sums [[2 3] [0 5 4 8 6]]) -> [5 23]", "(sums []) -> []", "(sums [[] [7] [8 8 1] [4 1] [4 8 1 5]]) -> [0 7 17 5 18]", "(sums [[] [9] [5 9]]) -> [0 9 14]", "(sums [[4 1 7 6] [2 9 2] [9] [0 0 3 4 4]]) -> [18 13 9 11]", "(sums [[7 7 3 6] [1]]) -> [23 1]"], "time": 0.5438, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[1] [3] [9 1 3]]) -> [1 3 13]", "(sums [[8] [4 7 0 4 1] [3 2 5 4 9] [1]]) -> [8 16 23 1]", "(sums [[0] [0] [6 0] [8 3 4]]) -> [0 0 6 15]", "(sums [[4 6 1]]) -> [11]", "(sums [[7 1 2] [5 5 1] [4 9 5]]) -> [10 11 18]", "(sums [[3 9 9] [] [0 1 6 2] [9]]) -> [21 0 9 9]", "(sums [[7 9 2 3 6] [6 8 0 9 4] [7 6 9]]) -> [27 27 22]", "(sums [[2 4 0 5 7] [3 8 8] [7 0 5 9] [7 6 9 8]]) -> [18 19 21 30]", "(sums [[0 5 6] [7 0 7] [] [6 4 7 1]]) -> [11 14 0 18]", "(sums [[9 0 6 3 2]]) -> [20]"], "time": 0.433779, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 9 6 5] [8 7 2]]) -> [27 17]", "(sums [[] [2 3 3 6 1] [5 5 8 6]]) -> [0 15 24]", "(sums [[7 3 7] [4 6] [1 2 2] [0] [1 9]]) -> [17 10 5 0 10]", "(sums []) -> []", "(sums [[8] [9 7 5] [5] [3] []]) -> [8 21 5 3 0]", "(sums [[6 6 0] [] [] [7 6] [1 5 3]]) -> [12 0 0 13 9]", "(sums [[7 4 9 5 9] [2 4 2 8] [1]]) -> [34 16 1]", "(sums [[7] [3 9 7] [3 5] []]) -> [7 19 8 0]", "(sums [[7]]) -> [7]", "(sums [[0 9 8] [] [] [5 9 1]]) -> [17 0 0 15]", "(sums [[7] [7 9 5 6]]) -> [7 27]"], "time": 0.402268, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[6 3 4 5 1] [0 2]]) -> [19 2]", "(sums [[6 0 6] [8 7 2 9 9] [0 5]]) -> [12 35 5]", "(sums [[6 7 8 5]]) -> [26]", "(sums [[] [0 6 3 1] [5] [0]]) -> [0 10 5 0]", "(sums [[2 6 2]]) -> [10]", "(sums []) -> []", "(sums [[7] [0] [9 0 3 0] [8 4 7 3] [4]]) -> [7 0 12 22 4]", "(sums [[3 9 9 8 3]]) -> [32]", "(sums [[1 0 8] [9 7 3]]) -> [9 19]", "(sums [[7 5 6 3 8] [1 8] [8 2 1 9]]) -> [29 9 20]"], "time": 0.489184, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [8] [6] [9 2 1 9]]) -> [0 8 6 21]", "(sums [[0 7 0 1] [1 4 5 4 3] [] [7] []]) -> [8 17 0 7 0]", "(sums [[0 1] [7 7 6 0] [6 3]]) -> [1 20 9]", "(sums [[] [] [7 9]]) -> [0 0 16]", "(sums [[4 7] [0 8 2 4 0]]) -> [11 14]", "(sums [[]]) -> [0]", "(sums [[] [6 1 4 5] [] [8] [8 5 5 4 0]]) -> [0 16 0 8 22]", "(sums [[6 4 1 7] [7] [5] []]) -> [18 7 5 0]", "(sums [[5 3] [] [0 5 2 8] [0] [5 5 8 4 8]]) -> [8 0 15 0 30]", "(sums []) -> []", "(sums [[] [3 4 7 0]]) -> [0 14]"], "time": 0.450534, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 2 0] [8 4 3 6 2] [3 8 7]]) -> [6 23 18]", "(sums [[7 0 6 4 3] [4 4 5 7 8] [6 7 7 0] [6 0 5]]) -> [20 28 20 11]", "(sums [[8 8 2 3 9]]) -> [30]", "(sums [[7 3 1 0] [] [] [0 1]]) -> [11 0 0 1]", "(sums [[6 5 6 8 0]]) -> [25]", "(sums [[3 9] [] [0 9 7 8 3]]) -> [12 0 27]", "(sums [[3 1 8 4]]) -> [16]", "(sums [[2 1 0] [1 1 1 4 8]]) -> [3 15]", "(sums [[1] [4 7 5 1 8]]) -> [1 25]", "(sums []) -> []", "(sums [[6 1 1 7 6] [] [9 1 8 0] [3 3 7 3 7] [5 6]]) -> [21 0 18 23 11]"], "time": 0.455073, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[4 1] [2 8 9]]) -> [5 19]", "(sums [[0] [3 5 5] [3 9 4 4 3] [5 0 6 6] [4 0 1]]) -> [0 13 23 17 5]", "(sums [[7 8 4 5] [9 9 4] [5] [] []]) -> [24 22 5 0 0]", "(sums [[] [1] [7 5 6] [7 6 4 2 3] [8]]) -> [0 1 18 22 8]", "(sums [[1 9 2]]) -> [12]", "(sums [[6 8] [3 7 2 2 4] [0 3 9 0 8]]) -> [14 18 20]", "(sums [[9 8] [1 8 2] [2 9 3 2] [9]]) -> [17 11 16 9]", "(sums [[1 6 3] [7]]) -> [10 7]", "(sums [[8 9 3] [7 8 5]]) -> [20 20]", "(sums [[3] [5 9 8] []]) -> [3 22 0]"], "time": 0.32333, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 5 4 6] [3 0 2]]) -> [23 5]", "(sums [[2] [2 4 4 7 9] [1 6 8 8 9] [8 5 1 5]]) -> [2 26 32 19]", "(sums [[5 7] [3 1 1 4] [5 3] [3 2]]) -> [12 9 8 5]", "(sums [[3 3 4] [2 2]]) -> [10 4]", "(sums [[6 6 7 8 1] [0 6]]) -> [28 6]", "(sums [[9 3 0 4] [1 2] [1 0 6]]) -> [16 3 7]", "(sums []) -> []", "(sums [[7]]) -> [7]", "(sums []) -> []", "(sums []) -> []", "(sums [[0 2 9 1 5] [3] [9 0 8 0] [6 9 5 1] [6 0 5 1]]) -> [17 3 17 21 12]"], "time": 0.867771, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[] [9]]) -> [0 9]", "(sums []) -> []", "(sums [[4 7 2 5]]) -> [18]", "(sums [[4 4] [5 2] [0 3 8 1] [9]]) -> [8 7 12 9]", "(sums []) -> []", "(sums [[] [6 8 7 2] [1 0]]) -> [0 23 1]", "(sums [[0 5 1 3 2]]) -> [11]", "(sums [[1 4 8] [2 0 1] [6] []]) -> [13 3 6 0]", "(sums [[6]]) -> [6]", "(sums [[3 2] [] [2 1 5 1]]) -> [5 0 9]"], "time": 0.392052, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8] [1 5 6] [7 0] [0 5 6 3] [9 3 2 8 3]]) -> [8 12 7 14 25]", "(sums [[6 8 0 2] []]) -> [16 0]", "(sums [[1 2 6 9] [1 7 2 7] [1] [3 4]]) -> [18 17 1 7]", "(sums []) -> []", "(sums [[6 9 3 1] [8 2 5 4] [0 8 6 8] [9]]) -> [19 19 22 9]", "(sums [[3 2]]) -> [5]", "(sums [[5 8 2] [2 2 0 3] [4 9 4] [] [2 0 5]]) -> [15 7 17 0 7]", "(sums [[6 4 5 0] [] [6 1 6 3] [6 6 7 4]]) -> [15 0 16 23]", "(sums [[5 6] [0 0 1 7] [1 4 6 7 9]]) -> [11 8 27]", "(sums [[3 7 2 4]]) -> [16]", "(sums [[3 6 4 2] [4 3 0]]) -> [15 7]"], "time": 0.387991, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1 3 2 8 9]]) -> [23]", "(sums []) -> []", "(sums []) -> []", "(sums [[0 9] [8 4] [1 6 4 6] [0]]) -> [9 12 17 0]", "(sums [[] []]) -> [0 0]", "(sums [[1 5 1] [] [2 1 6 5] [3 4] [0 0 4 0]]) -> [7 0 14 7 4]", "(sums [[5 6] [3 4 4] [8 6 7 8 2] [7 0 9] [8 2 8 1 2]]) -> [11 11 31 16 21]", "(sums [[2] [7]]) -> [2 7]", "(sums [[] [1 7 2 2]]) -> [0 12]", "(sums [[1 4 7 8 0] [4 1 2] [7 8 8 7 8] [6 1 5 8] [3 6 7 3]]) -> [20 7 38 20 19]", "(sums [[5 9]]) -> [14]"], "time": 0.359571, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1 3 2 8] [6 7 0 2] [7 3 3 1 0] [3 5 0 3] [4 4 9]]) -> [14 15 14 11 17]", "(sums [[6 5 2] [8 1 6 6] [] [6 5 4 0 0] [1 0 9 8]]) -> [13 21 0 15 18]", "(sums [[] [1] [5 6 1 7]]) -> [0 1 19]", "(sums []) -> []", "(sums [[6 2 2 6] [4 0] [7 8]]) -> [16 4 15]", "(sums []) -> []", "(sums [[2 1 0] [5 2]]) -> [3 7]", "(sums [[] [2 5] [2 9 9 2 2] [5 9 6 8 7] [4 0 6 1]]) -> [0 7 24 35 11]", "(sums [[1 3 5] [3 4] [9 5 2 7 7] [7 2 9]]) -> [9 7 30 18]", "(sums [[2 5]]) -> [7]", "(sums [[]]) -> [0]"], "time": 0.371226, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0] [] [5 1] [] [1]]) -> [0 0 6 0 1]", "(sums [[3]]) -> [3]", "(sums [[5 7] [9 4]]) -> [12 13]", "(sums [[0 1 6]]) -> [7]", "(sums []) -> []", "(sums [[2 6 5 8 8]]) -> [29]", "(sums []) -> []", "(sums [[] [9 1 1]]) -> [0 11]", "(sums [[0 3 0] [6 6 5 4] [] [7 8 7 7]]) -> [3 21 0 29]", "(sums [[0] [2 4 5 6] [4 6] [7 0]]) -> [0 17 10 7]", "(sums [[6 3 3 4 7] [5] [4] [8] []]) -> [23 5 4 8 0]"], "time": 0.605773, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[2 0 8 0 7] [8 4 7 8 4] [3 1] [6 3 4 8 1]]) -> [17 31 4 22]", "(sums [[3 5 8 3] [7 1]]) -> [19 8]", "(sums []) -> []", "(sums [[5 2] [9 7 2]]) -> [7 18]", "(sums []) -> []", "(sums [[5 8] [1 0 2 1 8]]) -> [13 12]", "(sums [[1 1 0 3 9]]) -> [14]", "(sums [[7 6] [7 1 8 0 1] [4] [6 1 4]]) -> [13 17 4 11]", "(sums []) -> []", "(sums [[] [7]]) -> [0 7]"], "time": 0.576778, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1 5 2 9] [0 1] [] [1]]) -> [17 1 0 1]", "(sums [[3 7] [1 3] [2 9 2 7] []]) -> [10 4 20 0]", "(sums [[2 9] [4 0 4 0] [5 3 4 3 1] [4 5 4 4 3]]) -> [11 8 16 20]", "(sums [[3 6 6] [] [9] [3]]) -> [15 0 9 3]", "(sums []) -> []", "(sums [[8 9] [9 0 9] [4 8 3 2 3] [0 4 8 2] [6]]) -> [17 18 20 14 6]", "(sums [[5 8 2 9 6] [7 1 6] [7]]) -> [30 14 7]", "(sums [[1 5 2 5]]) -> [13]", "(sums [[9] [5 4 6 5 9] [9 2] [2 1 8]]) -> [9 29 11 11]", "(sums [[2 5 1] [] [] [7] [3 2 6]]) -> [8 0 0 7 11]", "(sums []) -> []"], "time": 0.5059, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 7 8 3 1]]) -> [23]", "(sums []) -> []", "(sums [[5 2 4 2] [2 4 8] [5 2 7 6 0] [6 3 7 3]]) -> [13 14 20 19]", "(sums []) -> []", "(sums [[2 5]]) -> [7]", "(sums [[] [1] [9 9] [] []]) -> [0 1 18 0 0]", "(sums []) -> []", "(sums [[9 7 7] [8 7 1 5]]) -> [23 21]", "(sums [[] [7 7 0 1] [8 0 6] [9 9 0 0 1]]) -> [0 15 14 19]", "(sums [[7] [9] [6]]) -> [7 9 6]", "(sums []) -> []"], "time": 0.562676, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[9 0 5] [8]]) -> [14 8]", "(sums [[3 3 9 5] []]) -> [20 0]", "(sums [[] [2 8 4 2 0] [3 8 9]]) -> [0 16 20]", "(sums [[6 2]]) -> [8]", "(sums [[] [0 0 3 7 2] [6 6 0 0 8]]) -> [0 12 20]", "(sums [[3 3 8 3] [6 1] [0 1]]) -> [17 7 1]", "(sums [[8] [] [8 7 4] [7 3 8]]) -> [8 0 19 18]", "(sums [[7] [4 9 5 0]]) -> [7 18]", "(sums []) -> []", "(sums [[4 4]]) -> [8]"], "time": 0.569959, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6]]) -> [6]", "(sums [[3 3 0] [1] [] [] [5 6 8 4 2]]) -> [6 1 0 0 25]", "(sums [[5] []]) -> [5 0]", "(sums []) -> []", "(sums [[]]) -> [0]", "(sums [[1 1 4] [2 5 3 7 7]]) -> [6 24]", "(sums [[4 6 9] [9 2 1 7 8] []]) -> [19 27 0]", "(sums []) -> []", "(sums []) -> []", "(sums [[6] [7 7 3 9 1]]) -> [6 27]", "(sums [[] [6 4]]) -> [0 10]"], "time": 0.540524, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[3] [9 2 3 3] [6 4 1 7] [5 4 0]]) -> [3 17 18 9]", "(sums []) -> []", "(sums [[] [8] [4 8 6] [4 1 2 9]]) -> [0 8 18 16]", "(sums [[2] []]) -> [2 0]", "(sums [[1 6 5]]) -> [12]", "(sums []) -> []", "(sums [[] [0 4 3 8 2]]) -> [0 17]", "(sums [[1]]) -> [1]", "(sums [[] [0]]) -> [0 0]", "(sums [[6 9 0 0 5] [6 2]]) -> [20 8]", "(sums [[3 8] [2 5]]) -> [11 7]"], "time": 0.562347, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums []) -> []", "(sums []) -> []", "(sums [[] [0 9] [0]]) -> [0 9 0]", "(sums [[1 0] [0 8] [] [2 6 8 6 6] [6 8 8 0 1]]) -> [1 8 0 28 23]", "(sums [[4] [0 2 5 2] [2 4 4 9 2]]) -> [4 9 21]", "(sums [[8] []]) -> [8 0]", "(sums [[] [5 6 8] [7] [7 9 3 3 0] [7]]) -> [0 19 7 22 7]", "(sums [[0 7 7]]) -> [14]", "(sums [[2 5 0 9 6] [0 7] [2 3 0 5] [5 5]]) -> [22 7 10 10]", "(sums [[4]]) -> [4]"], "time": 0.343168, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1 0 3 6]]) -> [10]", "(sums [[6 8 8 5] [4] [0 3 2 1 5]]) -> [27 4 11]", "(sums []) -> []", "(sums [[4 0 4 9] [4] [6 8 2]]) -> [17 4 16]", "(sums [[] [9 1] [7 8 4 1 0]]) -> [0 10 20]", "(sums [[3 9 4 9 7] []]) -> [32 0]", "(sums [[2 3 4] [0 6] [3 6 0 0] [1 6 8 1 9]]) -> [9 6 9 25]", "(sums [[9 5 3] [8] [6 0 5] [0 0 0 4]]) -> [17 8 11 4]", "(sums [[1 5 8] [] [6 4]]) -> [14 0 10]", "(sums [[] [5 9 5 7] []]) -> [0 26 0]", "(sums [[4 6 1 7]]) -> [18]"], "time": 0.501132, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[2 4 3 0 9] [3 8 6 0] [0]]) -> [18 17 0]", "(sums [[8] [9] [8 1]]) -> [8 9 9]", "(sums [[5 8 2 7] [] [3 3 9 8 6]]) -> [22 0 29]", "(sums [[9 1 4] [4 7] [8 7] [5 2 6]]) -> [14 11 15 13]", "(sums [[5] [2 6 0 3 5]]) -> [5 16]", "(sums []) -> []", "(sums []) -> []", "(sums [[5 9 7 9] [9 2] [0 5 1] [4 8 3 1 3] [2]]) -> [30 11 6 19 2]", "(sums [[3 7] [9]]) -> [10 9]", "(sums [[0 2 3] [] [] [8 6 6]]) -> [5 0 0 20]"], "time": 0.349808, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[5 6 8 5 8]]) -> [32]", "(sums [[4 6 0 8] [6] [7 9] [3 9 2] [2]]) -> [18 6 16 14 2]", "(sums [[3 1 6] [8 3 4]]) -> [10 15]", "(sums [[9 6 6] [3 9 3 4] [2 8 3] [6 5 5 6 3] [4]]) -> [21 19 13 25 4]", "(sums [[2] [4 8 3 5] [7 4] [6]]) -> [2 20 11 6]", "(sums [[] [0 8 8 0 8] [5]]) -> [0 24 5]", "(sums [[3 9] [5 8 4 7] [4 5 9] [5 9]]) -> [12 24 18 14]", "(sums [[6 0 8 6] [] [] [7]]) -> [20 0 0 7]", "(sums [[8 6 4 0]]) -> [18]", "(sums [[9 6 9 5] [5 3] [] [4 8 6 3 8]]) -> [29 8 0 29]", "(sums []) -> []"], "time": 0.378739, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 3 7] [3 0 9]]) -> [14 12]", "(sums [[] [] [4]]) -> [0 0 4]", "(sums [[3 4 4 1 6] [8] [5 0 8 7 3] [7 6] [1 1 4 1 3]]) -> [18 8 23 13 10]", "(sums [[9 4 3] [2] [7 7 6 1] [0 4 0 1 2]]) -> [16 2 21 7]", "(sums [[3 2] [] [8 7 9 2 2] [9 8 7 2]]) -> [5 0 28 26]", "(sums [[0 9 6 6] [] [4 1 2]]) -> [21 0 7]", "(sums [[1 8 2 6] [1 6 5 9 0] []]) -> [17 21 0]", "(sums []) -> []", "(sums []) -> []", "(sums [[9 3 2 0] [6 0 3] [6 9 1 6 4] [3] [2 1 9 1 7]]) -> [14 9 26 3 20]", "(sums []) -> []"], "time": 0.421534, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[8] [4 6 0] [] [6]]) -> [8 10 0 6]", "(sums [[6 2]]) -> [8]", "(sums [[8 7]]) -> [15]", "(sums []) -> []", "(sums [[9 3]]) -> [12]", "(sums [[2 8 4 6] [] [0 7 7] [9 9 6 0 8] []]) -> [20 0 14 32 0]", "(sums [[3]]) -> [3]", "(sums [[9 2 2] [5 0 4 5 7]]) -> [13 21]", "(sums [[6]]) -> [6]", "(sums [[]]) -> [0]"], "time": 0.465385, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1 5 6 7] [8 0 0 0 1]]) -> [19 9]", "(sums [[0 4] [6] []]) -> [4 6 0]", "(sums [[5 4] [1 9]]) -> [9 10]", "(sums [[6 9] [9] [5 3] [9 7 7] [8 6]]) -> [15 9 8 23 14]", "(sums [[0 1 7] []]) -> [8 0]", "(sums [[] [8 4]]) -> [0 12]", "(sums [[9 0 7] [] [9 5] [0 2 6 7]]) -> [16 0 14 15]", "(sums [[9 2] [7 3 2]]) -> [11 12]", "(sums [[6 9 4 6 1] [2 5 4] [0 7 2]]) -> [26 11 9]", "(sums [[] [9] [2 1 3 5 4]]) -> [0 9 15]", "(sums []) -> []"], "time": 0.48422, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [] [5 4 1 5]]) -> [0 0 15]", "(sums [[9 3 8 4] []]) -> [24 0]", "(sums [[8 0 5] [7 6 8 8] [0 9 8 3 5] []]) -> [13 29 25 0]", "(sums []) -> []", "(sums [[5 2 5]]) -> [12]", "(sums [[1 4 6 4]]) -> [15]", "(sums [[7 6 8] [9 9 2 6] [2 3 1] []]) -> [21 26 6 0]", "(sums []) -> []", "(sums [[] [6 8 8 1 0]]) -> [0 23]", "(sums [[] [0 7 2 3]]) -> [0 12]", "(sums [[8 5 1 1] [9 8 2 3]]) -> [15 22]"], "time": 0.430763, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[3 9 1] [] [2 5 2] [9 5] [0 2]]) -> [13 0 9 14 2]", "(sums [[3 4 5 2] [9 4 0 7] [9] [1 5 3 4 6] [1 2 8 9 5]]) -> [14 20 9 19 25]", "(sums [[8] [5 5 4 8] [6 5 8 3] [3 6 0]]) -> [8 22 22 9]", "(sums [[6 9 0]]) -> [15]", "(sums [[] [] [7] [5 2 8 3]]) -> [0 0 7 18]", "(sums [[]]) -> [0]", "(sums [[5 8 7 7] [] [5 8] [5]]) -> [27 0 13 5]", "(sums [[] [7 1] [3 0]]) -> [0 8 3]", "(sums [[0 0 2 4] [3]]) -> [6 3]", "(sums [[0 2 4 9] [1 9 8 1 6] [1 4 4 2 3] [8 6 3] [5 2 7 8]]) -> [15 25 14 17 22]", "(sums [[] [1 0 8]]) -> [0 9]"], "time": 0.315866, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[]]) -> [0]", "(sums [[9] [1 4] [1 9 3 5]]) -> [9 5 18]", "(sums [[3 5] [7 3 7 7] []]) -> [8 24 0]", "(sums []) -> []", "(sums [[0] [1 7]]) -> [0 8]", "(sums []) -> []", "(sums [[2] [0 7 0 0]]) -> [2 7]", "(sums []) -> []", "(sums [[5] [3 9] []]) -> [5 12 0]", "(sums []) -> []", "(sums [[3 8]]) -> [11]"], "time": 0.320997, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [1 2 7 7]]) -> [0 17]", "(sums [[2]]) -> [2]", "(sums []) -> []", "(sums [[2 0 0 0]]) -> [2]", "(sums [[]]) -> [0]", "(sums [[8 3 4 5] [4 0 3 9 1] [5 0 5 1] [5 1 2 7 1] []]) -> [20 17 11 16 0]", "(sums []) -> []", "(sums [[0 1 3 6 5] [] [4 9 2] []]) -> [15 0 15 0]", "(sums []) -> []", "(sums []) -> []", "(sums [[9 8 8 1 6] [] [0] [8]]) -> [32 0 0 8]"], "time": 0.494663, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[6 1 2] [] [] []]) -> [9 0 0 0]", "(sums [[] [9 4 9 0] [1 9 4] [0 0 5 2 6]]) -> [0 22 14 13]", "(sums []) -> []", "(sums [[2 9 2] [] [6 2 4] [2 9 0 4 8] []]) -> [13 0 12 23 0]", "(sums []) -> []", "(sums []) -> []", "(sums [[2 2 1] [4 5 5 0] [9 7 4 9] [5 0] [3 1 1 2]]) -> [5 14 29 5 7]", "(sums [[9 8 2 0 1] [0 6 9] [6] [0 6]]) -> [20 15 6 6]", "(sums [[1 4 0 7] [3 8]]) -> [12 11]", "(sums [[0 7 9 4] [2 1 8] [2] [5 7 8 8] [3]]) -> [20 11 2 28 3]"], "time": 0.370578, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [3 1] [] [8 5 0]]) -> [0 4 0 13]", "(sums [[9 1 7 4] [4]]) -> [21 4]", "(sums [[8 4 4 9] [5 7 3] [5 7 9] [2 8]]) -> [25 15 21 10]", "(sums [[7 9]]) -> [16]", "(sums [[] [3 3] [3 3 0 0]]) -> [0 6 6]", "(sums [[6] [0 3] [4 8 4 1] [] [7 3]]) -> [6 3 17 0 10]", "(sums [[2 9] [6 8 5 9] [1] [6]]) -> [11 28 1 6]", "(sums [[0 0 4 6 6] [4]]) -> [16 4]", "(sums [[6 6] [4 2 5]]) -> [12 11]", "(sums [[0 5 7 8 6]]) -> [26]", "(sums [[6 3 1]]) -> [10]"], "time": 0.377971, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[5 4] [5 2 1 7] [6] [0]]) -> [9 15 6 0]", "(sums [[] [5] [6 0 6]]) -> [0 5 12]", "(sums [[6 0 4 5 8]]) -> [23]", "(sums [[] [5 1]]) -> [0 6]", "(sums [[2] [2 3] [0 9 2 4]]) -> [2 5 15]", "(sums [[2 1 1] [1 9 3 7 4]]) -> [4 24]", "(sums [[2 2 0 5 3] [5 9 4]]) -> [12 18]", "(sums [[]]) -> [0]", "(sums [[8 5 4 1 8] [7 0 0 3] [6 5] [3 2 0 2]]) -> [26 10 11 7]", "(sums [[8] [6] [2 1 9] [4 3]]) -> [8 6 12 7]", "(sums [[]]) -> [0]"], "time": 0.465144, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7] [8 6] [6] [7 2 7]]) -> [7 14 6 16]", "(sums [[6] [0 1] [6 2 2 8] [5] []]) -> [6 1 18 5 0]", "(sums [[9 6 0] [3 4 2] [3 1] [3 5]]) -> [15 9 4 8]", "(sums [[6 2] [1] [7 2 0 0 6] [4 3 7 8 7] [1 1 6 5]]) -> [8 1 15 29 13]", "(sums [[7 2 3 7 8] [4 9 5] [2 7 4] [3 5 9] [3 4]]) -> [27 18 13 17 7]", "(sums [[5 1] [5 8 5] [5 9 4 0 2]]) -> [6 18 20]", "(sums [[4] [3 2 8] [2 3 0 1] [8 7]]) -> [4 13 6 15]", "(sums [[8] []]) -> [8 0]", "(sums [[1 5 2] [0 2 4] [] [5 2 6 6] [0 5 6 3]]) -> [8 6 0 19 14]", "(sums []) -> []", "(sums [[6] [2]]) -> [6 2]"], "time": 0.428203, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0 7 3 1 1]]) -> [12]", "(sums [[0 2 1 8] [2 7 7 9] [7] [8 2]]) -> [11 25 7 10]", "(sums [[]]) -> [0]", "(sums [[6 1 3 0] [0 1 2 8 0] [] [1 9 1 7]]) -> [10 11 0 18]", "(sums []) -> []", "(sums [[] [7 3 5]]) -> [0 15]", "(sums [[7 0]]) -> [7]", "(sums [[1 8 6 1 7] [5 6] [2] [1 4 6 6 0] [0 7 7 0 0]]) -> [23 11 2 17 14]", "(sums [[0 5 8 8 4] [1 9 9 1 5] [4 6 8 1 4]]) -> [25 25 23]", "(sums []) -> []", "(sums [[3 5 1 5 2]]) -> [16]"], "time": 0.327861, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[] [3 9] [0 0 9 9]]) -> [0 12 18]", "(sums [[3 5 2] [] []]) -> [10 0 0]", "(sums []) -> []", "(sums [[4 6 1 7 8] [1 5 0] [8 5 6] [3 3]]) -> [26 6 19 6]", "(sums [[3 7 0 7 2] [9 6] [4 9] [4 5 5 2 5] []]) -> [19 15 13 21 0]", "(sums []) -> []", "(sums [[6 7 4] [3]]) -> [17 3]", "(sums [[] [6 5 5]]) -> [0 16]", "(sums [[8 3] [4 4 2 0] [3 8 2] [6] [4 3 7 5 1]]) -> [11 10 13 6 20]", "(sums []) -> []"], "time": 0.530685, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[]]) -> [0]", "(sums [[1 0] [8 1 7 7]]) -> [1 23]", "(sums [[6] [] [9 9 4 7] [5 1 8 0] [9 9 2 7 8]]) -> [6 0 29 14 35]", "(sums [[7 4 3 3] [2 1] [2 8] [2] [3 5 8 5]]) -> [17 3 10 2 21]", "(sums [[] [8] [4] [5 8]]) -> [0 8 4 13]", "(sums []) -> []", "(sums []) -> []", "(sums [[3] [9 2 1 0 3] [3 7] [] []]) -> [3 15 10 0 0]", "(sums [[5 2 4 2] [8] [7 1]]) -> [13 8 8]", "(sums [[2 3 3 3] [9 0 2 9] [0]]) -> [11 20 0]", "(sums [[] []]) -> [0 0]"], "time": 0.406163, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [1 2]]) -> [0 3]", "(sums [[] [3 6 4 7 8] [0 6] [5 1] [2 1 6 2 7]]) -> [0 28 6 6 18]", "(sums []) -> []", "(sums []) -> []", "(sums [[2 0 9] [] []]) -> [11 0 0]", "(sums [[2 8] [5 8 1 6 6] [4 2 1]]) -> [10 26 7]", "(sums [[9 3 4 9]]) -> [25]", "(sums [[0 6 0]]) -> [6]", "(sums [[3 6 8]]) -> [17]", "(sums [[7 0 7 8 0]]) -> [22]", "(sums [[4 9 3 5] [7 6 4 6] [7 3 8] [2 5 5 6]]) -> [21 23 18 18]"], "time": 0.490673, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6]]) -> [6]", "(sums [[] [5 0] [6 2 8 4]]) -> [0 5 20]", "(sums [[1 7 7 4 2] [0 0 0 8] [] [6 8]]) -> [21 8 0 14]", "(sums [[4] [4 7 1] [9 7 7 4] [6 8 4 1 9]]) -> [4 12 27 28]", "(sums [[6 3 1] [3 3] [5 2 6 5 7] [7 1]]) -> [10 6 25 8]", "(sums [[0] [6 5 0 1] []]) -> [0 12 0]", "(sums [[8 9 4 4 0] [5 9] [3 7 1] [1] [7 4 7 0]]) -> [25 14 11 1 18]", "(sums []) -> []", "(sums [[0] [9 2 8 3] [1 9 0 7 9] [5 6 5] [9 5 6 3]]) -> [0 22 26 16 23]", "(sums [[7 9] [2 6]]) -> [16 8]", "(sums [[9 8] []]) -> [17 0]"], "time": 0.344898, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[1 2 5 7 8] [2 9 2 7 7] []]) -> [23 27 0]", "(sums []) -> []", "(sums [[2 7 1]]) -> [10]", "(sums [[] [] [0 8] [1 2]]) -> [0 0 8 3]", "(sums [[] [3 2 9 1] [3 7]]) -> [0 15 10]", "(sums [[9 7 6 6] [] [6 4 4] [4]]) -> [28 0 14 4]", "(sums [[2 1 3 2] [] [8 0] [8 7 5 1 9] [3 6 8 2]]) -> [8 0 8 30 19]", "(sums [[8 3 4] [9 3 5 1] [2 1 4]]) -> [15 18 7]", "(sums [[6 0] [7 9 1] [5]]) -> [6 17 5]", "(sums [[] [5] [2 1 8] [0 5] []]) -> [0 5 11 5 0]"], "time": 0.458325, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 5 4 6 6] [6 5] [0 1] [2] [6 8 9 1 5]]) -> [28 11 1 2 29]", "(sums [[2] [8 2 9]]) -> [2 19]", "(sums [[4 6]]) -> [10]", "(sums [[3 4 8]]) -> [15]", "(sums [[2 7 6] []]) -> [15 0]", "(sums [[2 1 5]]) -> [8]", "(sums [[8 4] [6 0] [6 3 2 4 1]]) -> [12 6 16]", "(sums [[5 8] [7] [0 2 7]]) -> [13 7 9]", "(sums [[2 9 1 4 7] [8 7 7] [9 6 7] [8 8 4 9 6] [3 0 5 8 3]]) -> [23 22 22 35 19]", "(sums [[5 7] [8] [9 2 7] [5 3 6]]) -> [12 8 18 14]", "(sums [[9 6 9 7]]) -> [31]"], "time": 0.401866, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2 1 9 0] [7 5 9] [0 6] [7 1 5 0] [4 2]]) -> [12 21 6 13 6]", "(sums [[4 6 2 6 2] [5] [0 5 2 8 2] [1 0 5] [8 6 1]]) -> [20 5 17 6 15]", "(sums [[4 2] [6 0 9 2 5] [2] [] []]) -> [6 22 2 0 0]", "(sums [[] [1 9] [1 3 2 3]]) -> [0 10 9]", "(sums [[] [] [3] [8 7 4 3 5] [0 3]]) -> [0 0 3 27 3]", "(sums [[2 1] [5 8 0] [] [0 1] [7 7]]) -> [3 13 0 1 14]", "(sums [[]]) -> [0]", "(sums [[] [8] [1 6 1 3 3] [7 8 1 9 5]]) -> [0 8 14 30]", "(sums [[6 3 7 1] [2 6 7 6 1] [] [2 9 8] [2 9 2 9 3]]) -> [17 22 0 19 25]", "(sums [[3 9 7] [0 6 3 0 8] []]) -> [19 17 0]", "(sums []) -> []"], "time": 0.33027, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[]]) -> [0]", "(sums [[3 0] [9 9] [3 0 8 2]]) -> [3 18 13]", "(sums [[7 3 3]]) -> [13]", "(sums [[0 6 1] [0 2 3] []]) -> [7 5 0]", "(sums [[7 5 0 2 0]]) -> [14]", "(sums [[1 9 5]]) -> [15]", "(sums [[2 0 0 4] [5 1 5]]) -> [6 11]", "(sums [[1 6] [3 4 0 2]]) -> [7 9]", "(sums [[2 9 1 7] [] [9 4] [1 8 1]]) -> [19 0 13 10]", "(sums [[] [] [6] [9] [1 0 5]]) -> [0 0 6 9 6]", "(sums [[7 7 7] [6 6 1 2 7] [9 2 1 6] [1 5 3]]) -> [21 22 18 9]"], "time": 0.369511, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 0 3]]) -> [10]", "(sums [[6 2 2 1 3]]) -> [14]", "(sums [[6 7 7]]) -> [20]", "(sums [[5 9 4] [3] [7 9] []]) -> [18 3 16 0]", "(sums []) -> []", "(sums [[2 6 4 3] [8 0 3 5] [1 8 8 5] []]) -> [15 16 22 0]", "(sums [[1 8 6 7 5] [3 9] [1]]) -> [27 12 1]", "(sums [[] [8 3 5 0 4] []]) -> [0 20 0]", "(sums [[]]) -> [0]", "(sums [[1 6] [9 6 4] [1 1 8 8] [6 5 2]]) -> [7 19 18 13]", "(sums [[7] [5]]) -> [7 5]"], "time": 0.434479, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2 8 1 6] [2 1 7 6 7] [8 6 3 1] [4 6 3 1 7]]) -> [17 23 18 21]", "(sums [[4 1 0 1 4] [2 4 9 4 9] [0 1 6 6 8] [8 8 6 0 3] [1]]) -> [10 28 21 25 1]", "(sums [[8]]) -> [8]", "(sums [[4 6 5] [3] [6 6]]) -> [15 3 12]", "(sums [[]]) -> [0]", "(sums [[] [7] [9 2 1 0 6]]) -> [0 7 18]", "(sums []) -> []", "(sums [[] [1 0 7] [4 1 1 3 9] [3 9 0 2 8]]) -> [0 8 18 22]", "(sums [[1] [] [2 1 9] [6 2]]) -> [1 0 12 8]", "(sums []) -> []", "(sums []) -> []"], "time": 0.392572, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 8 7 2] [5 3 2]]) -> [21 10]", "(sums [[0] [7 9 2 0 7] [6]]) -> [0 25 6]", "(sums [[0 7]]) -> [7]", "(sums [[7 1 9 8 6] [2] [7 5 7]]) -> [31 2 19]", "(sums [[9 7 6] [5 6] [1] [3] [4]]) -> [22 11 1 3 4]", "(sums [[7 2 2 4] [9]]) -> [15 9]", "(sums [[8 9] [3] [0 8] [9 0 8 4 1] [6 9]]) -> [17 3 8 22 15]", "(sums [[7 1] [9 6] [1 7 6 7 1] [6 7]]) -> [8 15 22 13]", "(sums [[9 1 3]]) -> [13]", "(sums []) -> []", "(sums [[3] []]) -> [3 0]"], "time": 0.486339, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[0 0] [8 6 2 2 8] [3 3] []]) -> [0 26 6 0]", "(sums [[2 1 3 4 2] [7 8 4 0 2]]) -> [12 21]", "(sums [[7 8 0] [0 7 0 0 1] [4 3 8]]) -> [15 8 15]", "(sums [[9 9] [9 2 8 1 6] [9 7 9] [1 9 0 7 1]]) -> [18 26 25 18]", "(sums [[5 8 6 6 3]]) -> [28]", "(sums [[5 2 4 3]]) -> [14]", "(sums [[3 8 6 9 0] [1 1 6 4 4] [5] [5 0 1 8 2] [7 8 1 5 1]]) -> [26 16 5 16 22]", "(sums [[4 6 6 5] [0 7 8 5 2] [2 0 5 2] [9 5 6 3 1]]) -> [21 22 9 24]", "(sums [[8 9 4 7] [3 2 7 8 3] [7 4]]) -> [28 23 11]", "(sums [[8 7 0 9] [9 1 4 5] []]) -> [24 19 0]"], "time": 0.515571, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[7 5 7] [9 0 7] [7 1 1] [8 3 1 7 2] []]) -> [19 16 9 21 0]", "(sums [[9] [8 8 1 9 6] [8 7 2 6 9]]) -> [9 32 32]", "(sums []) -> []", "(sums [[4 5 9] [7 3 0] [7 1 4] [0 0 8]]) -> [18 10 12 8]", "(sums [[7] [] [1] [4 6 5] [8 0]]) -> [7 0 1 15 8]", "(sums [[] []]) -> [0 0]", "(sums []) -> []", "(sums []) -> []", "(sums [[] [3] [9 1 4] [5 3 3 3]]) -> [0 3 14 14]", "(sums [[1 5 2]]) -> [8]"], "time": 0.356589, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 6 7 5] [6]]) -> [27 6]", "(sums [[9]]) -> [9]", "(sums [[4 3 7 5] [2 1 4] [0 6] [7 5 8 5 9] [3 7 9]]) -> [19 7 6 34 19]", "(sums [[9 6 7 9 7] [4 4 8 3 8]]) -> [38 27]", "(sums [[6 7 5] [0 6 3] [9 8 8 8] [0 4 3] [7 6 3 2]]) -> [18 9 33 7 18]", "(sums [[3 2 5] [5] [] [2 6 7 8 3] [9 3]]) -> [10 5 0 26 12]", "(sums [[9 8 5 3]]) -> [25]", "(sums [[0 2 0 4 2] [6 5 5 7 0] [6 8 9] [3 1] []]) -> [8 23 23 4 0]", "(sums []) -> []", "(sums [[2 1] [0 0 0 7] [6 1 3 4 1] [2 1 0 1] [0 2 1]]) -> [3 7 15 4 3]", "(sums [[] [2] [8 3] [3 2 2 2] [2 5 2 1 2]]) -> [0 2 11 9 12]"], "time": 0.334632, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 9 7 0]]) -> [22]", "(sums [[6] [0 6 1] [2 0 9] [0 7 2 3]]) -> [6 7 11 12]", "(sums []) -> []", "(sums []) -> []", "(sums [[2 4 3 9 9] [7 0] [3 7 0 4] [7 6 9] [0 9 9 9 5]]) -> [27 7 14 22 32]", "(sums [[8 8 2] [3 2 1]]) -> [18 6]", "(sums [[3 0 6] [8 5 4] [8 1 9 9 8]]) -> [9 17 35]", "(sums [[1 5 3] [2 4 6 8 1]]) -> [9 21]", "(sums [[5 9 8 1] [1] [4 7 8 6] [0 8 3]]) -> [23 1 25 11]", "(sums []) -> []", "(sums []) -> []"], "time": 0.624889, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [2 2 5] [0 8 2 3]]) -> [0 9 13]", "(sums []) -> []", "(sums [[0 1 2 4] []]) -> [7 0]", "(sums [[7 0 5 6] [6 4]]) -> [18 10]", "(sums [[] [9 1 0] [8 5] [0 0 5 3] [3 1 8 9]]) -> [0 10 13 8 21]", "(sums [[1 5] [8] [2 3 2] [4 2 3 0]]) -> [6 8 7 9]", "(sums []) -> []", "(sums [[5 1 0 4 0]]) -> [10]", "(sums [[] [3 3]]) -> [0 6]", "(sums []) -> []", "(sums [[9 9] [3] [3 6 6 2 8] [7 8 5 9 9]]) -> [18 3 25 38]"], "time": 0.278069, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4] [5 9] [7] [2] [8 5]]) -> [4 14 7 2 13]", "(sums [[8] [2 5 7 9]]) -> [8 23]", "(sums []) -> []", "(sums [[9] [3 0 4 2 4] [] [2 3 4 0 8]]) -> [9 13 0 17]", "(sums [[0 1 5 1 4] [4 2 0 9 7] [5 6 8 3]]) -> [11 22 22]", "(sums [[4]]) -> [4]", "(sums [[] [4 4] [4 8 7 9] [] [5 3]]) -> [0 8 28 0 8]", "(sums [[1 3] [5 0 5 0] [7 4]]) -> [4 10 11]", "(sums [[7 5 4 3] []]) -> [19 0]", "(sums [[0 7 1 8] [1 3 7] [6] [8 2 6]]) -> [16 11 6 16]", "(sums [[3 0 1] [5 2 1 8 4] [3 3] [7 1 8 3 9] [8]]) -> [4 20 6 28 8]"], "time": 0.539805, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7] [6 1] [8 1 1 4] [3 0 8 0 0] [0 2 1]]) -> [7 7 14 11 3]", "(sums [[5 5 6 0 8] [7 2 8 6 4] [5] [] []]) -> [24 27 5 0 0]", "(sums [[2 0 5 2]]) -> [9]", "(sums []) -> []", "(sums [[] []]) -> [0 0]", "(sums []) -> []", "(sums [[8 6] []]) -> [14 0]", "(sums [[1 4 2] [3 3] [0] [3 1] [9]]) -> [7 6 0 4 9]", "(sums []) -> []", "(sums []) -> []", "(sums [[0] [5 8 7 5] [8] [9 0 1 2] [3 8 9 9]]) -> [0 25 8 12 29]"], "time": 0.545927, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 3 6 8] []]) -> [21 0]", "(sums [[5 2 4] [6 0] [7 3 2] [8]]) -> [11 6 12 8]", "(sums [[0 6 5 6] [7 1] [0 2 9 1] [8 5 0 5]]) -> [17 8 12 18]", "(sums [[1] [9 1 3] [5 8 6]]) -> [1 13 19]", "(sums [[4 4 7 5]]) -> [20]", "(sums [[0 5]]) -> [5]", "(sums [[] [0 3 8 0] [3 5 7 8] [8 0] [1 0]]) -> [0 11 23 8 1]", "(sums [[0 6 3 7 0]]) -> [16]", "(sums []) -> []", "(sums [[4]]) -> [4]", "(sums [[]]) -> [0]"], "time": 0.535746, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[1 4 4 3 5] [6] []]) -> [17 6 0]", "(sums [[] [9 7 5] [7] [] [8 4 9 2]]) -> [0 21 7 0 23]", "(sums [[6 4]]) -> [10]", "(sums [[4 0] [0 0 8 8 0] [5 4 8] []]) -> [4 16 17 0]", "(sums [[3 1 9 4] [2 8]]) -> [17 10]", "(sums [[3]]) -> [3]", "(sums [[2 9] []]) -> [11 0]", "(sums [[8 1] [7] [5 5 5 8 7] [4 7] [1]]) -> [9 7 30 11 1]", "(sums [[0 0 1] [0 6 4 9] [8 2 3 5 6]]) -> [1 19 24]", "(sums [[3 3 6 2] [0 1 1 8 8] [2 5 8]]) -> [14 18 15]"], "time": 0.246928, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[2 6 2] [8]]) -> [10 8]", "(sums [[8 4] [0 7 6 3 8] []]) -> [12 24 0]", "(sums []) -> []", "(sums [[2 6 9] [7 5 8 2 7] [6 7 4 4]]) -> [17 29 21]", "(sums [[0]]) -> [0]", "(sums [[3 8 2 8] [1 0 1] [4 4]]) -> [21 2 8]", "(sums [[9 8] [2 0] []]) -> [17 2 0]", "(sums [[7 8 7] [1 4 4 6] [1 6 8 8]]) -> [22 15 23]", "(sums [[6 9 3]]) -> [18]", "(sums [[4 6 8 1 4] [6 1 9 3 8] [7 1 1 2 1] [8 9 0 3]]) -> [23 27 12 20]"], "time": 0.507521, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2 3 2 9 7] [1 6 3] [5 7] [9] [1]]) -> [23 10 12 9 1]", "(sums []) -> []", "(sums []) -> []", "(sums [[1 3] [] [7 5 0 3 8] [0]]) -> [4 0 23 0]", "(sums [[9 5 1 3]]) -> [18]", "(sums [[6 0 5 4] [9 6] [8 1 2 8] [6]]) -> [15 15 19 6]", "(sums [[5 7 8] [] [] [9]]) -> [20 0 0 9]", "(sums [[7 6 7 4 9] [2 1 5]]) -> [33 8]", "(sums [[1 6 3 0]]) -> [10]", "(sums [[] [0 5] [9 9 1 6]]) -> [0 5 25]", "(sums [[9 7 3 1]]) -> [20]"], "time": 0.554109, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[3]]) -> [3]", "(sums [[5 5 5 8] [4 7 7 0 6] []]) -> [23 24 0]", "(sums []) -> []", "(sums [[] [] [2 1 3 8]]) -> [0 0 14]", "(sums [[]]) -> [0]", "(sums [[8 8 5 4] [6 5 1 2] [4] [5 7 8 7]]) -> [25 14 4 27]", "(sums []) -> []", "(sums [[7 5 8 5] [5 3] [7 3 0] [] [7 4]]) -> [25 8 10 0 11]", "(sums [[1] [5 9 3 0] [4 8 9]]) -> [1 17 21]", "(sums [[9 2 4 3 9] [6 3] [] [3 2]]) -> [27 9 0 5]"], "time": 0.338176, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[2 7 9 1] [4 2 4 6 4] [8] [3 1]]) -> [19 20 8 4]", "(sums [[0] [] [5 0 6 2] [0 7 0 3 2]]) -> [0 0 13 12]", "(sums [[4]]) -> [4]", "(sums [[7 6 6 3] [0] [7 6]]) -> [22 0 13]", "(sums [[3]]) -> [3]", "(sums []) -> []", "(sums [[5]]) -> [5]", "(sums [[6 7] [] [0 7 9]]) -> [13 0 16]", "(sums [[]]) -> [0]", "(sums [[] [9 8 6] [2] [7 1]]) -> [0 23 2 8]"], "time": 0.312827, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[4 8 9 4] [7 2 4 3 2] []]) -> [25 18 0]", "(sums []) -> []", "(sums [[8 0 6 1] [9] [7] [3 1 3 2 5]]) -> [15 9 7 14]", "(sums [[7 4 7] [6 2 1] [] [0]]) -> [18 9 0 0]", "(sums [[4 1 2 3 8] [] [2 9] [4 3]]) -> [18 0 11 7]", "(sums [[6 7 1 3 0]]) -> [17]", "(sums [[3 6 1] [] [4] [8]]) -> [10 0 4 8]", "(sums [[7] []]) -> [7 0]", "(sums [[6] [] [4 4 4 9] [2 2] [4 1 2]]) -> [6 0 21 4 7]", "(sums []) -> []"], "time": 0.315988, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
