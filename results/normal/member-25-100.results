{"name": "member", "examples": ["(member [] 4) -> #f", "(member [4 5 5 3] 5) -> #t", "(member [5] 1) -> #f", "(member [1 5 6] 0) -> #f", "(member [4 8 7 9 9] 2) -> #f", "(member [6] 0) -> #f", "(member [] 1) -> #f", "(member [6 7] 2) -> #f", "(member [1 2] 7) -> #f", "(member [8 7] 3) -> #f", "(member [9] 5) -> #f", "(member [2 5 8 1 7] 3) -> #f", "(member [0 6 2 0] 3) -> #f", "(member [8] 4) -> #f", "(member [5 3 4 6 6] 0) -> #f", "(member [] 6) -> #f", "(member [7 4] 1) -> #f", "(member [] 1) -> #f", "(member [9 5 1] 3) -> #f", "(member [9 9 9 2 9] 3) -> #f", "(member [] 4) -> #f", "(member [9 1] 6) -> #f", "(member [0 7 4 5] 6) -> #f", "(member [] 3) -> #f"], "time": 1.227092, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 2) -> #f", "(member [6 9 7 7 2] 2) -> #t", "(member [3] 7) -> #f", "(member [4 6 4 4] 2) -> #f", "(member [] 7) -> #f", "(member [4 6 4 4] 2) -> #f", "(member [1 3 1 7] 7) -> #t", "(member [6 5 1 2 4] 5) -> #t", "(member [] 4) -> #f", "(member [] 9) -> #f", "(member [9 3 6 6] 0) -> #f", "(member [7] 9) -> #f", "(member [7 7] 9) -> #f", "(member [5 5] 3) -> #f", "(member [] 2) -> #f", "(member [9 9 9] 1) -> #f", "(member [3 3 1 3] 4) -> #f", "(member [] 1) -> #f", "(member [1 8 5 7 0] 0) -> #t", "(member [] 0) -> #f", "(member [9 2] 1) -> #f", "(member [6] 5) -> #f", "(member [9 2 3 0] 3) -> #t", "(member [5 3 8] 3) -> #t"], "time": 1.282119, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (= e (!= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 5) -> #f", "(member [0 9 2] 2) -> #t", "(member [3 4 5 2 1] 6) -> #f", "(member [5 9] 5) -> #t", "(member [4] 2) -> #f", "(member [4 2] 2) -> #t", "(member [7 9] 8) -> #f", "(member [3 4 8 8 1] 8) -> #t", "(member [4 5] 0) -> #f", "(member [4] 9) -> #f", "(member [] 5) -> #f", "(member [9 6 1 4 9] 2) -> #f", "(member [7 1 5] 0) -> #f", "(member [3] 8) -> #f", "(member [1 6 3] 4) -> #f", "(member [8 1 3 6 6] 6) -> #t", "(member [5] 0) -> #f", "(member [3 3 6 3] 2) -> #f", "(member [] 8) -> #f", "(member [7 5] 0) -> #f", "(member [1 0] 7) -> #f", "(member [6 4] 3) -> #f", "(member [8 8 4 1 5] 4) -> #t", "(member [] 6) -> #f"], "time": 1.264007, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 0) -> #f", "(member [4 8 4] 5) -> #f", "(member [5 1 9 3] 4) -> #f", "(member [0 9 4 0] 9) -> #t", "(member [3 5 6] 1) -> #f", "(member [9] 3) -> #f", "(member [8 5 5 9] 2) -> #f", "(member [4] 1) -> #f", "(member [2 3 7] 8) -> #f", "(member [0] 0) -> #t", "(member [5 5 0 1] 7) -> #f", "(member [7 9] 8) -> #f", "(member [8 4] 3) -> #f", "(member [7 1 2] 0) -> #f", "(member [7 3 2 6] 1) -> #f", "(member [3 6] 8) -> #f", "(member [1] 4) -> #f", "(member [3 9 1 5] 2) -> #f", "(member [1 6 3] 6) -> #t", "(member [8 4 1 9 8] 6) -> #f", "(member [0] 4) -> #f", "(member [4 8 8 5 2] 5) -> #t", "(member [6 8 5 2 6] 9) -> #f", "(member [] 7) -> #f"], "time": 1.344326, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (= e (!= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 5) -> #f", "(member [5 3 7 9] 3) -> #t", "(member [5 3 3 9 3] 7) -> #f", "(member [] 2) -> #f", "(member [4 3 5] 3) -> #t", "(member [4 9 5 2 3] 5) -> #t", "(member [4 0 9] 8) -> #f", "(member [7 9 5 4 2] 6) -> #f", "(member [3 7 3] 5) -> #f", "(member [6 3] 5) -> #f", "(member [7 3 9] 1) -> #f", "(member [6 4 9 1] 2) -> #f", "(member [3 2 7 6] 9) -> #f", "(member [1 0] 1) -> #t", "(member [1 8 7 0] 2) -> #f", "(member [9 1 3 8 9] 4) -> #f", "(member [9] 4) -> #f", "(member [5] 4) -> #f", "(member [7] 0) -> #f", "(member [1 3] 1) -> #t", "(member [8 5 0 4 9] 1) -> #f", "(member [2] 4) -> #f", "(member [3 8 6 9 4] 8) -> #t", "(member [3 7 6 2 8] 2) -> #t"], "time": 1.275161, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (= e (!= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 8) -> #f", "(member [] 6) -> #f", "(member [2 8 6 9] 2) -> #t", "(member [5] 7) -> #f", "(member [] 9) -> #f", "(member [3] 0) -> #f", "(member [0 4 0] 7) -> #f", "(member [] 9) -> #f", "(member [7 1] 9) -> #f", "(member [7 8 1] 4) -> #f", "(member [7 1 4 6] 4) -> #t", "(member [] 5) -> #f", "(member [0 5 4] 2) -> #f", "(member [0 1] 7) -> #f", "(member [6] 8) -> #f", "(member [] 8) -> #f", "(member [3 3 3 3] 9) -> #f", "(member [3] 0) -> #f", "(member [0 0] 0) -> #t", "(member [1] 1) -> #t", "(member [9 5 9] 7) -> #f", "(member [5 9 4 8] 9) -> #t", "(member [9 5 9 4] 8) -> #f", "(member [2 7 3 0 7] 1) -> #f"], "time": 1.300376, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 4) -> #f", "(member [9 8 7 1 2] 8) -> #t", "(member [7 1 9 3 9] 0) -> #f", "(member [5 8 4 0] 7) -> #f", "(member [2] 0) -> #f", "(member [1 9 7] 9) -> #t", "(member [4 4] 0) -> #f", "(member [8] 1) -> #f", "(member [] 3) -> #f", "(member [6 7 8 4 8] 4) -> #t", "(member [9 9 9 9 4] 5) -> #f", "(member [5 7] 6) -> #f", "(member [1 0 7] 5) -> #f", "(member [7] 1) -> #f", "(member [0 2] 2) -> #t", "(member [3 0 5] 1) -> #f", "(member [8 7] 2) -> #f", "(member [1 9 4] 8) -> #f", "(member [7 7 7 6] 4) -> #f", "(member [2 7 6 1] 4) -> #f", "(member [4 3 8 6 6] 7) -> #f", "(member [] 0) -> #f", "(member [1] 3) -> #f", "(member [5 6 8 7 0] 3) -> #f"], "time": 1.33643, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (= e (!= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 4) -> #f", "(member [0 5] 3) -> #f", "(member [9 4 2] 8) -> #f", "(member [3 8 2 9] 3) -> #t", "(member [] 4) -> #f", "(member [6 0 8 5 7] 3) -> #f", "(member [9 9 2] 8) -> #f", "(member [] 6) -> #f", "(member [] 4) -> #f", "(member [6 1 6] 1) -> #t", "(member [2 1 2] 6) -> #f", "(member [7 9 6 3] 1) -> #f", "(member [9] 0) -> #f", "(member [6 6 4 7 7] 8) -> #f", "(member [3 0 0] 4) -> #f", "(member [0 3] 8) -> #f", "(member [7 9 4] 3) -> #f", "(member [0 3 4 4] 4) -> #t", "(member [6 9 6] 3) -> #f", "(member [1 1 8] 9) -> #f", "(member [9] 9) -> #t", "(member [1 5 8] 0) -> #f", "(member [3 6 9 4] 4) -> #t", "(member [0] 4) -> #f"], "time": 1.378125, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 8) -> #f", "(member [5 1 0] 2) -> #f", "(member [1 5 4 8] 0) -> #f", "(member [4 0 2 8 3] 2) -> #t", "(member [] 5) -> #f", "(member [0 4 4 7] 0) -> #t", "(member [0 9] 4) -> #f", "(member [] 9) -> #f", "(member [4 1 3 6] 1) -> #t", "(member [9 1 1 5] 0) -> #f", "(member [9 0 2 1] 6) -> #f", "(member [2 4 7 5 0] 7) -> #t", "(member [] 1) -> #f", "(member [1 1 0] 6) -> #f", "(member [] 2) -> #f", "(member [9 5 4] 0) -> #f", "(member [4 2] 2) -> #t", "(member [3 5] 3) -> #t", "(member [3 0 3 4] 1) -> #f", "(member [9 2 4] 2) -> #t", "(member [] 6) -> #f", "(member [6 1 8 3] 9) -> #f", "(member [0 6 1 3] 1) -> #t", "(member [] 1) -> #f"], "time": 1.240251, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (= e (!= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 6) -> #f", "(member [] 0) -> #f", "(member [6 7] 5) -> #f", "(member [7 1 5] 7) -> #t", "(member [] 1) -> #f", "(member [6 9 3] 5) -> #f", "(member [1 2 3] 5) -> #f", "(member [4 9 6 5 6] 8) -> #f", "(member [9 1 0 6] 5) -> #f", "(member [5] 2) -> #f", "(member [7 9 9 3 4] 6) -> #f", "(member [1] 2) -> #f", "(member [2 1 1] 1) -> #t", "(member [3 4 4 7] 0) -> #f", "(member [] 0) -> #f", "(member [9 1] 8) -> #f", "(member [1 0] 9) -> #f", "(member [8] 4) -> #f", "(member [8 6] 8) -> #t", "(member [3 4 2 9] 8) -> #f", "(member [1 8 1 2 4] 2) -> #t", "(member [3 2 3] 0) -> #f", "(member [] 2) -> #f", "(member [5] 0) -> #f"], "time": 1.351102, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 4) -> #f", "(member [9 1] 4) -> #f", "(member [3 6 8 4] 2) -> #f", "(member [0 4 7 7 3] 4) -> #t", "(member [4 4] 4) -> #t", "(member [8 1 3 3] 6) -> #f", "(member [6] 6) -> #t", "(member [8 3 4] 1) -> #f", "(member [4 9 5 0] 2) -> #f", "(member [0 6] 0) -> #t", "(member [2 7 3 2] 2) -> #t", "(member [9] 8) -> #f", "(member [0] 1) -> #f", "(member [9] 1) -> #f", "(member [2 9 0 6] 4) -> #f", "(member [6 4 7 3] 2) -> #f", "(member [3 1 6] 8) -> #f", "(member [7 9 3 5 5] 9) -> #t", "(member [8 8 8] 2) -> #f", "(member [7] 1) -> #f", "(member [9] 9) -> #t", "(member [1 1] 0) -> #f", "(member [3 5 2 4 5] 5) -> #t", "(member [3] 3) -> #t"], "time": 1.345151, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 5) -> #f", "(member [8 4 0] 6) -> #f", "(member [] 3) -> #f", "(member [9 8] 1) -> #f", "(member [2 5] 3) -> #f", "(member [] 4) -> #f", "(member [2] 7) -> #f", "(member [2 1] 6) -> #f", "(member [3 6 7 7] 6) -> #t", "(member [5 0 6 3] 1) -> #f", "(member [6] 0) -> #f", "(member [] 1) -> #f", "(member [8 0] 2) -> #f", "(member [] 8) -> #f", "(member [0 3 5 1 4] 7) -> #f", "(member [3 1 1] 4) -> #f", "(member [] 1) -> #f", "(member [5] 1) -> #f", "(member [4 5 8 8] 1) -> #f", "(member [] 7) -> #f", "(member [5 0 7 4] 9) -> #f", "(member [7 8] 8) -> #t", "(member [2] 5) -> #f", "(member [9 4 5 5 4] 4) -> #t"], "time": 1.380331, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 5) -> #f", "(member [0 1 4] 7) -> #f", "(member [4] 7) -> #f", "(member [8 7 0] 2) -> #f", "(member [3 0 3] 2) -> #f", "(member [9 0 4 7 4] 1) -> #f", "(member [] 3) -> #f", "(member [] 8) -> #f", "(member [] 9) -> #f", "(member [7 3 3 6 2] 0) -> #f", "(member [2 2 2 5 0] 5) -> #t", "(member [] 0) -> #f", "(member [3 4 4 6] 7) -> #f", "(member [] 4) -> #f", "(member [] 3) -> #f", "(member [2 4 4] 5) -> #f", "(member [0 8 4 4 0] 6) -> #f", "(member [] 0) -> #f", "(member [8 1 1 1 9] 1) -> #t", "(member [8 4 0] 2) -> #f", "(member [3 8 9 1] 1) -> #t", "(member [4] 9) -> #f", "(member [7 3] 3) -> #t", "(member [6 3 8] 5) -> #f"], "time": 1.412075, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (= e (!= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 1) -> #f", "(member [] 9) -> #f", "(member [3 5 5 1 9] 6) -> #f", "(member [] 6) -> #f", "(member [2 3] 4) -> #f", "(member [1] 7) -> #f", "(member [2 1 5 6] 1) -> #t", "(member [0 7 5 3 0] 4) -> #f", "(member [] 7) -> #f", "(member [] 6) -> #f", "(member [8 6 2] 8) -> #t", "(member [7 4 6 3] 9) -> #f", "(member [5 7] 2) -> #f", "(member [6 6 1] 6) -> #t", "(member [] 3) -> #f", "(member [0 5] 0) -> #t", "(member [] 3) -> #f", "(member [1 8 9 5 8] 1) -> #t", "(member [] 3) -> #f", "(member [7 1 7] 0) -> #f", "(member [2 3 4 4] 6) -> #f", "(member [] 9) -> #f", "(member [2 2] 7) -> #f", "(member [6 1 1 3] 8) -> #f"], "time": 1.402665, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 7) -> #f", "(member [0 8] 3) -> #f", "(member [7 2 0] 6) -> #f", "(member [] 1) -> #f", "(member [1 5] 7) -> #f", "(member [] 4) -> #f", "(member [0 9 6] 5) -> #f", "(member [5 3] 1) -> #f", "(member [0 8] 1) -> #f", "(member [6] 5) -> #f", "(member [] 7) -> #f", "(member [6 7 2 0] 5) -> #f", "(member [5 2 5] 2) -> #t", "(member [9] 8) -> #f", "(member [] 9) -> #f", "(member [] 6) -> #f", "(member [2 3 5 9] 6) -> #f", "(member [] 6) -> #f", "(member [0] 8) -> #f", "(member [0 7 8] 8) -> #t", "(member [8] 0) -> #f", "(member [3 4 2 9 5] 3) -> #t", "(member [1] 5) -> #f", "(member [4] 9) -> #f"], "time": 1.454683, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (= e (!= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 8) -> #f", "(member [7 3 4 8] 1) -> #f", "(member [3 4 7 7 8] 5) -> #f", "(member [7] 9) -> #f", "(member [7 6 1] 3) -> #f", "(member [3 3] 1) -> #f", "(member [9 5 6 6] 8) -> #f", "(member [9] 3) -> #f", "(member [] 8) -> #f", "(member [0 8 7] 1) -> #f", "(member [3 0 9 5 0] 4) -> #f", "(member [0 6] 1) -> #f", "(member [9 1] 0) -> #f", "(member [6 5] 7) -> #f", "(member [] 8) -> #f", "(member [0] 4) -> #f", "(member [6 1 8 3] 1) -> #t", "(member [0 8 2 6] 2) -> #t", "(member [8 4 1 8] 3) -> #f", "(member [4 8] 9) -> #f", "(member [0 1] 3) -> #f", "(member [] 2) -> #f", "(member [0 2] 9) -> #f", "(member [7 5] 7) -> #t"], "time": 1.604751, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (= e (!= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 8) -> #f", "(member [6] 6) -> #t", "(member [] 8) -> #f", "(member [3 4] 1) -> #f", "(member [7 2 5 6] 8) -> #f", "(member [0 0 1 1] 5) -> #f", "(member [2 9 2] 4) -> #f", "(member [0 2 8 4 4] 8) -> #t", "(member [8 0 6 4] 5) -> #f", "(member [9] 6) -> #f", "(member [6 1 3 6] 8) -> #f", "(member [8 3 6 3 7] 2) -> #f", "(member [5 9 2 9] 4) -> #f", "(member [4 8 3 4 6] 6) -> #t", "(member [] 5) -> #f", "(member [] 8) -> #f", "(member [] 6) -> #f", "(member [] 4) -> #f", "(member [7 6 1 6 7] 6) -> #t", "(member [6] 3) -> #f", "(member [7 9 1 6 2] 6) -> #t", "(member [] 6) -> #f", "(member [2 2 7 7] 9) -> #f", "(member [] 1) -> #f"], "time": 0.97129, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 8) -> #f", "(member [] 7) -> #f", "(member [4] 4) -> #t", "(member [4 3 9 1] 2) -> #f", "(member [1] 5) -> #f", "(member [6 7 0 3 3] 9) -> #f", "(member [3 7 5 5] 8) -> #f", "(member [5] 5) -> #t", "(member [9 3 8 8 4] 2) -> #f", "(member [1 5 0 1] 6) -> #f", "(member [3] 8) -> #f", "(member [1 8 9 2] 4) -> #f", "(member [0 9 5 4] 9) -> #t", "(member [0 2 6] 7) -> #f", "(member [] 1) -> #f", "(member [0 9] 3) -> #f", "(member [1] 2) -> #f", "(member [2 8 8 4] 4) -> #t", "(member [4 0] 8) -> #f", "(member [] 4) -> #f", "(member [4 4 2 2 9] 6) -> #f", "(member [7 6 8] 1) -> #f", "(member [] 1) -> #f", "(member [6 8] 4) -> #f"], "time": 1.044876, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (= e (!= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 5) -> #f", "(member [8] 3) -> #f", "(member [3] 6) -> #f", "(member [6 1 5 8] 0) -> #f", "(member [4 6 6] 8) -> #f", "(member [9 7 4] 3) -> #f", "(member [5 9 7 5 3] 2) -> #f", "(member [5 5 5 6] 7) -> #f", "(member [6 0 4] 0) -> #t", "(member [4] 1) -> #f", "(member [8 6 6 0 5] 7) -> #f", "(member [6 8] 1) -> #f", "(member [4 0 8] 6) -> #f", "(member [7 1 6] 2) -> #f", "(member [3 7 1 6] 1) -> #t", "(member [4 8 1 5] 7) -> #f", "(member [1 0 0 6 1] 8) -> #f", "(member [4 4] 4) -> #t", "(member [0 3 2] 0) -> #t", "(member [7 5 1 4] 8) -> #f", "(member [1] 3) -> #f", "(member [7 6 8] 4) -> #f", "(member [7] 9) -> #f", "(member [4] 0) -> #f"], "time": 1.125412, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 4) -> #f", "(member [3 2 7 2] 8) -> #f", "(member [1 9 9 1 1] 5) -> #f", "(member [6 9 1] 3) -> #f", "(member [2 1] 3) -> #f", "(member [5 8] 8) -> #t", "(member [0 7 1 1] 1) -> #t", "(member [8] 2) -> #f", "(member [6 5 4 4 2] 0) -> #f", "(member [6 5 5 3 7] 5) -> #t", "(member [9 6] 3) -> #f", "(member [] 6) -> #f", "(member [9 0] 7) -> #f", "(member [7 5 3] 9) -> #f", "(member [7 7 8] 3) -> #f", "(member [5 2 1] 7) -> #f", "(member [3 0] 8) -> #f", "(member [5] 2) -> #f", "(member [7] 2) -> #f", "(member [5] 2) -> #f", "(member [] 8) -> #f", "(member [8 8] 1) -> #f", "(member [4 1] 4) -> #t", "(member [6 2 5 8 6] 7) -> #f"], "time": 1.072053, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 5) -> #f", "(member [7] 8) -> #f", "(member [8 7 0] 5) -> #f", "(member [6] 6) -> #t", "(member [0 6 4] 1) -> #f", "(member [5 3 9 7] 8) -> #f", "(member [2 5 2 9] 7) -> #f", "(member [1 1 2] 7) -> #f", "(member [] 9) -> #f", "(member [3 7] 2) -> #f", "(member [7 6] 5) -> #f", "(member [6 8 1 8] 3) -> #f", "(member [5 5 8] 5) -> #t", "(member [7 9 2] 2) -> #t", "(member [1 0 3] 7) -> #f", "(member [9 0 6 4 9] 7) -> #f", "(member [] 0) -> #f", "(member [7 0 8] 0) -> #t", "(member [1 4 5] 5) -> #t", "(member [4 8 6 1 2] 3) -> #f", "(member [0 2] 1) -> #f", "(member [0 2 8] 7) -> #f", "(member [1 6 9 0] 7) -> #f", "(member [8 6] 7) -> #f"], "time": 1.116842, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 8) -> #f", "(member [8 0 8 6] 2) -> #f", "(member [2 3 9 9] 0) -> #f", "(member [1 4 1] 5) -> #f", "(member [] 0) -> #f", "(member [1 1 8] 3) -> #f", "(member [7 4] 3) -> #f", "(member [2 9] 7) -> #f", "(member [8] 3) -> #f", "(member [0] 1) -> #f", "(member [8 5 4 8] 6) -> #f", "(member [1 8 3 7 1] 8) -> #t", "(member [9 3 0 5 4] 5) -> #t", "(member [2 2 4 7] 5) -> #f", "(member [9 5] 7) -> #f", "(member [3 5 3 1] 9) -> #f", "(member [1 6] 0) -> #f", "(member [8] 4) -> #f", "(member [8 9 4 6] 4) -> #t", "(member [7 4] 7) -> #t", "(member [2 5 4 5 8] 7) -> #f", "(member [0 1 2 3] 4) -> #f", "(member [] 2) -> #f", "(member [7 3 9 2] 2) -> #t"], "time": 1.208635, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (= e (!= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 4) -> #f", "(member [5] 0) -> #f", "(member [4 5 4 1 9] 0) -> #f", "(member [9 7] 1) -> #f", "(member [5 1 8 5] 4) -> #f", "(member [3 9 9 0] 5) -> #f", "(member [6 9 9 3] 7) -> #f", "(member [7 9 2] 4) -> #f", "(member [0] 2) -> #f", "(member [6 3] 5) -> #f", "(member [5 1 7 3 3] 0) -> #f", "(member [5 8 5] 1) -> #f", "(member [8 4] 3) -> #f", "(member [] 4) -> #f", "(member [9 5 4 6] 7) -> #f", "(member [7 9 6 6 7] 5) -> #f", "(member [9 2 6 3] 0) -> #f", "(member [7] 9) -> #f", "(member [6 5] 9) -> #f", "(member [1 1 3 3 2] 7) -> #f", "(member [1] 9) -> #f", "(member [5] 2) -> #f", "(member [4 7 6 6] 3) -> #f", "(member [3 7 2 0 3] 4) -> #f"], "time": 0.001247, "solution": "(let member (let a (lambda (c b) #f) _) _)"}
{"name": "member", "examples": ["(member [] 1) -> #f", "(member [] 5) -> #f", "(member [0 4 9 6 2] 4) -> #t", "(member [4 9] 7) -> #f", "(member [2] 9) -> #f", "(member [0 4 8] 4) -> #t", "(member [8 7] 0) -> #f", "(member [0] 2) -> #f", "(member [6 0 9] 6) -> #t", "(member [1 6 1 2 3] 4) -> #f", "(member [] 1) -> #f", "(member [9 9] 4) -> #f", "(member [5] 9) -> #f", "(member [5 1 7 6] 2) -> #f", "(member [5 1 2 7] 1) -> #t", "(member [7 7] 7) -> #t", "(member [] 2) -> #f", "(member [4 9 6 3] 1) -> #f", "(member [5 1] 4) -> #f", "(member [9] 9) -> #t", "(member [5 3 7 9 3] 9) -> #t", "(member [7 2 3 8 0] 9) -> #f", "(member [2 5] 9) -> #f", "(member [] 5) -> #f"], "time": 1.248747, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 7) -> #f", "(member [0 8 3] 6) -> #f", "(member [8 2 9 2] 4) -> #f", "(member [1 0] 4) -> #f", "(member [2 8 3 7 3] 1) -> #f", "(member [4 9] 3) -> #f", "(member [] 0) -> #f", "(member [0] 9) -> #f", "(member [7 7] 8) -> #f", "(member [8] 9) -> #f", "(member [5 5 3 1 4] 9) -> #f", "(member [4 5 6 0 5] 1) -> #f", "(member [7] 6) -> #f", "(member [7 0 2] 3) -> #f", "(member [3 3 0 9 8] 4) -> #f", "(member [8 3 2 7] 2) -> #t", "(member [9 2 3 6 5] 3) -> #t", "(member [] 6) -> #f", "(member [4 3 6] 6) -> #t", "(member [1 7 8 1 9] 6) -> #f", "(member [] 7) -> #f", "(member [3] 5) -> #f", "(member [8 7 8 4 1] 5) -> #f", "(member [9] 8) -> #f"], "time": 1.165652, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (= e (!= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 3) -> #f", "(member [2 0 0 9] 3) -> #f", "(member [6 9 6 4 6] 0) -> #f", "(member [6 5 4 8 2] 2) -> #t", "(member [8 8 0 2 1] 9) -> #f", "(member [5] 9) -> #f", "(member [5] 2) -> #f", "(member [0 9 4 1 8] 8) -> #t", "(member [] 8) -> #f", "(member [] 0) -> #f", "(member [8 7 1 2] 4) -> #f", "(member [4 7] 8) -> #f", "(member [2 1 6 8] 6) -> #t", "(member [8 5 7 1] 4) -> #f", "(member [] 6) -> #f", "(member [] 0) -> #f", "(member [0 7] 8) -> #f", "(member [1 0 6] 7) -> #f", "(member [6 7 3 5 8] 9) -> #f", "(member [] 3) -> #f", "(member [0] 7) -> #f", "(member [3 7 5] 2) -> #f", "(member [0 0] 1) -> #f", "(member [2 6] 7) -> #f"], "time": 1.281356, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (= e (!= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 4) -> #f", "(member [] 0) -> #f", "(member [8 5 7 6] 0) -> #f", "(member [8] 8) -> #t", "(member [0 5 8] 0) -> #t", "(member [3 1 6 7] 4) -> #f", "(member [6 6 6] 3) -> #f", "(member [9 9 2 7] 4) -> #f", "(member [6 4] 5) -> #f", "(member [3] 8) -> #f", "(member [0 4 2 6 1] 7) -> #f", "(member [8 3 9 7 9] 9) -> #t", "(member [3 0 0 1] 2) -> #f", "(member [2 1 8] 4) -> #f", "(member [8] 9) -> #f", "(member [2] 3) -> #f", "(member [8 6 6] 2) -> #f", "(member [3 8 5 7 9] 3) -> #t", "(member [9 4 2 8 8] 9) -> #t", "(member [0 3 3 6 8] 1) -> #f", "(member [7 4 3 4 1] 2) -> #f", "(member [6 8 4] 4) -> #t", "(member [2 7 4] 7) -> #t", "(member [0 3 5 7] 8) -> #f"], "time": 1.238239, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 3) -> #f", "(member [8 3 3 4] 2) -> #f", "(member [9 0] 4) -> #f", "(member [1 3 1] 4) -> #f", "(member [3 6] 8) -> #f", "(member [0 6] 0) -> #t", "(member [8 1 9 1 9] 2) -> #f", "(member [0 4] 8) -> #f", "(member [9] 7) -> #f", "(member [] 9) -> #f", "(member [5 6 9 7] 6) -> #t", "(member [] 4) -> #f", "(member [7] 1) -> #f", "(member [] 7) -> #f", "(member [9 3 1] 3) -> #t", "(member [] 8) -> #f", "(member [4 1 8] 9) -> #f", "(member [] 3) -> #f", "(member [5 8] 3) -> #f", "(member [3 4 5] 7) -> #f", "(member [7 0] 5) -> #f", "(member [7] 9) -> #f", "(member [2] 1) -> #f", "(member [5 1] 1) -> #t"], "time": 1.279465, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (= e (!= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 4) -> #f", "(member [] 7) -> #f", "(member [3] 1) -> #f", "(member [5 6 6] 5) -> #t", "(member [4] 6) -> #f", "(member [9 0 2] 8) -> #f", "(member [1 4 6 8] 2) -> #f", "(member [3] 3) -> #t", "(member [5 1] 9) -> #f", "(member [0 4 5 5] 7) -> #f", "(member [2 8 1 3 3] 8) -> #t", "(member [0 1] 0) -> #t", "(member [3 4] 7) -> #f", "(member [] 9) -> #f", "(member [3 4 0 8] 6) -> #f", "(member [6 6 7 3 2] 4) -> #f", "(member [4 3] 9) -> #f", "(member [0 1 0 2 3] 3) -> #t", "(member [0 9 0 0] 0) -> #t", "(member [5 0] 9) -> #f", "(member [] 8) -> #f", "(member [] 3) -> #f", "(member [3 9 5] 4) -> #f", "(member [8 8 5 3 9] 5) -> #t"], "time": 0.857828, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (= e (!= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 3) -> #f", "(member [] 0) -> #f", "(member [5 5] 1) -> #f", "(member [] 2) -> #f", "(member [] 5) -> #f", "(member [2] 4) -> #f", "(member [8 0 5] 8) -> #t", "(member [8 6 3] 2) -> #f", "(member [8 0 2 6 8] 5) -> #f", "(member [4] 7) -> #f", "(member [3 6 0 5 8] 8) -> #t", "(member [1 6 5 9 3] 4) -> #f", "(member [4] 5) -> #f", "(member [6] 4) -> #f", "(member [2 0 3] 4) -> #f", "(member [5 8 5 1] 7) -> #f", "(member [] 8) -> #f", "(member [4 9 5 0] 8) -> #f", "(member [4 6 4 6 5] 0) -> #f", "(member [2 1 1] 8) -> #f", "(member [4] 6) -> #f", "(member [1 9 5 1] 3) -> #f", "(member [7 9 0 3 4] 5) -> #f", "(member [5 4 1 6] 5) -> #t"], "time": 1.259478, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (= e (!= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 5) -> #f", "(member [1 4 6 8 5] 7) -> #f", "(member [8 2 4 2 9] 5) -> #f", "(member [] 6) -> #f", "(member [0 1 9 4 2] 6) -> #f", "(member [2 2 5 6 7] 7) -> #t", "(member [] 3) -> #f", "(member [5] 5) -> #t", "(member [0 9 4 3 6] 5) -> #f", "(member [9 7] 5) -> #f", "(member [3 6 5] 0) -> #f", "(member [1 8] 3) -> #f", "(member [5 9 9] 6) -> #f", "(member [2 9 1 4] 7) -> #f", "(member [8] 1) -> #f", "(member [] 0) -> #f", "(member [7] 3) -> #f", "(member [] 5) -> #f", "(member [7 0] 7) -> #t", "(member [1 2 5 5 5] 4) -> #f", "(member [1] 3) -> #f", "(member [9 7 7 6 1] 6) -> #t", "(member [3 8 5 6] 8) -> #t", "(member [4 8 3] 6) -> #f"], "time": 1.311719, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (= e (!= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 4) -> #f", "(member [8 4 1] 1) -> #t", "(member [6 2 2 5] 2) -> #t", "(member [2] 3) -> #f", "(member [4 9 1] 9) -> #t", "(member [] 3) -> #f", "(member [7 0] 4) -> #f", "(member [1 2] 1) -> #t", "(member [8 4 5] 8) -> #t", "(member [4 3 9 8] 4) -> #t", "(member [0 9 4 0 3] 4) -> #t", "(member [1 1 8 3 0] 6) -> #f", "(member [1 3 9] 5) -> #f", "(member [5 9 3] 4) -> #f", "(member [9 6 1 4 3] 5) -> #f", "(member [4 0 3] 5) -> #f", "(member [5 5] 9) -> #f", "(member [] 8) -> #f", "(member [9] 2) -> #f", "(member [4 2 9] 4) -> #t", "(member [2 6 1 9 6] 3) -> #f", "(member [8 3 3 7] 7) -> #t", "(member [7 8 4 6 4] 7) -> #t", "(member [5] 8) -> #f"], "time": 1.171034, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)"}
