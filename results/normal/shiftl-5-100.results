{"name": "shiftl", "time": 0.785639, "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [3 7 4]) -> [7 4 3]", "(shiftl [6 4]) -> [4 6]", "(shiftl [0 1 3]) -> [1 3 0]", "(shiftl [4]) -> [4]"]}
{"name": "shiftl", "time": 1.243054, "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [0]) -> [0]", "(shiftl [3 6 8]) -> [6 8 3]", "(shiftl [4 1 1]) -> [1 1 4]", "(shiftl [7 3]) -> [3 7]"]}
{"name": "shiftl", "time": 3.357461, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7]) -> [7]", "(shiftl [5 7]) -> [7 5]", "(shiftl [9 7]) -> [7 9]", "(shiftl [3 4 0 6]) -> [4 0 6 3]"]}
{"name": "shiftl", "time": 3.28932, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3]) -> [3]", "(shiftl [4 5 1 4]) -> [5 1 4 4]", "(shiftl [4 4 8]) -> [4 8 4]", "(shiftl [5]) -> [5]"]}
{"name": "shiftl", "time": 3.174455, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 0]) -> [0 1]", "(shiftl [6 6]) -> [6 6]", "(shiftl [6 6 5 2 3]) -> [6 5 2 3 6]", "(shiftl [6 3 6 5 9]) -> [3 6 5 9 6]"]}
{"name": "shiftl", "time": 3.596396, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 3 5 0 3]) -> [3 5 0 3 2]", "(shiftl [1 5 9 4 8]) -> [5 9 4 8 1]", "(shiftl [8 0 2 5]) -> [0 2 5 8]", "(shiftl [7 8 5]) -> [8 5 7]"]}
{"name": "shiftl", "time": 3.251135, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 8 5]) -> [8 5 8]", "(shiftl [9 5 9]) -> [5 9 9]", "(shiftl [9 5 7]) -> [5 7 9]", "(shiftl [9 0 9 5 5]) -> [0 9 5 5 9]"]}
{"name": "shiftl", "time": 3.51554, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 0]) -> [0 1]", "(shiftl [0 9]) -> [9 0]", "(shiftl [3 9]) -> [9 3]", "(shiftl [0 0 9 6 3]) -> [0 9 6 3 0]"]}
{"name": "shiftl", "time": 2.322599, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 2]) -> [2 5]", "(shiftl [9 0 7 2]) -> [0 7 2 9]", "(shiftl [1]) -> [1]", "(shiftl [9 7 5]) -> [7 5 9]"]}
{"name": "shiftl", "time": 3.804108, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0 1 9 4]) -> [1 9 4 0]", "(shiftl [7]) -> [7]", "(shiftl [7 4 8 3]) -> [4 8 3 7]", "(shiftl [4 7 5 6]) -> [7 5 6 4]"]}
{"name": "shiftl", "time": 2.164701, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0]) -> [0]", "(shiftl [1]) -> [1]", "(shiftl [1 4]) -> [4 1]", "(shiftl [6 6 4 3]) -> [6 4 3 6]"]}
{"name": "shiftl", "time": 3.918375, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 9 7 3 8]) -> [9 7 3 8 3]", "(shiftl [1]) -> [1]", "(shiftl [8 6]) -> [6 8]", "(shiftl [1 3]) -> [3 1]"]}
{"name": "shiftl", "time": 3.961497, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9]) -> [9]", "(shiftl [9 6 8 3 4]) -> [6 8 3 4 9]", "(shiftl [7 6]) -> [6 7]", "(shiftl [9 7 0 2 3]) -> [7 0 2 3 9]"]}
{"name": "shiftl", "time": 3.884571, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 0 3 5]) -> [0 3 5 3]", "(shiftl [9 0 1]) -> [0 1 9]", "(shiftl [6 4]) -> [4 6]", "(shiftl [2 4 0]) -> [4 0 2]"]}
{"name": "shiftl", "time": 4.09388, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [4 5 9 0 6]) -> [5 9 0 6 4]", "(shiftl [2 3]) -> [3 2]", "(shiftl [9 6]) -> [6 9]", "(shiftl [7]) -> [7]"]}
{"name": "shiftl", "time": 4.235734, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0 6 1 8 9]) -> [6 1 8 9 0]", "(shiftl [5 3 7 9]) -> [3 7 9 5]", "(shiftl [6 9 8 8]) -> [9 8 8 6]", "(shiftl [7 6 9 2]) -> [6 9 2 7]"]}
{"name": "shiftl", "time": 0.337287, "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [4 4 3]) -> [4 3 4]", "(shiftl [3 9]) -> [9 3]", "(shiftl [3 0]) -> [0 3]", "(shiftl [9]) -> [9]"]}
{"name": "shiftl", "time": 4.292993, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 2 7]) -> [2 7 5]", "(shiftl [7 9 1]) -> [9 1 7]", "(shiftl [4 2 9 3 0]) -> [2 9 3 0 4]", "(shiftl [7 3 7 1]) -> [3 7 1 7]"]}
{"name": "shiftl", "time": 4.443104, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [4 0 8]) -> [0 8 4]", "(shiftl [5]) -> [5]", "(shiftl [7 9]) -> [9 7]", "(shiftl [0 6 8 4]) -> [6 8 4 0]"]}
{"name": "shiftl", "time": 1.569866, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6 5]) -> [5 6]", "(shiftl [7 6 8 1]) -> [6 8 1 7]", "(shiftl [8 0 0 7]) -> [0 0 7 8]", "(shiftl [4 1 9 2]) -> [1 9 2 4]"]}
{"name": "shiftl", "time": 1.72523, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 3 4 0 6]) -> [3 4 0 6 2]", "(shiftl [7 1 2 3 2]) -> [1 2 3 2 7]", "(shiftl [3]) -> [3]", "(shiftl [4 0 4]) -> [0 4 4]"]}
{"name": "shiftl", "time": 2.046509, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 8 0 3 0]) -> [8 0 3 0 7]", "(shiftl [0]) -> [0]", "(shiftl [7]) -> [7]", "(shiftl [1]) -> [1]"]}
{"name": "shiftl", "time": 1.79183, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6]) -> [6]", "(shiftl [1 7 4]) -> [7 4 1]", "(shiftl [7 0 4 6]) -> [0 4 6 7]", "(shiftl [4 3 8 5 0]) -> [3 8 5 0 4]"]}
{"name": "shiftl", "time": 2.378878, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2]) -> [2]", "(shiftl [9 6 7 8]) -> [6 7 8 9]", "(shiftl [0 5]) -> [5 0]", "(shiftl [5 4 0]) -> [4 0 5]"]}
{"name": "shiftl", "time": 2.617629, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 8 7 5 6]) -> [8 7 5 6 1]", "(shiftl [1 3 7 3]) -> [3 7 3 1]", "(shiftl [3 5 1 8 2]) -> [5 1 8 2 3]", "(shiftl [5 3 3 3]) -> [3 3 3 5]"]}
{"name": "shiftl", "time": 0.001884, "solution": "(let shiftl (let a (lambda (b) (reverse b)) _) _)", "examples": ["(shiftl [3 5]) -> [5 3]", "(shiftl [5 9]) -> [9 5]", "(shiftl [3 5]) -> [5 3]", "(shiftl [7 5]) -> [5 7]"]}
{"name": "shiftl", "time": 2.45707, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 1 3 9]) -> [1 3 9 2]", "(shiftl [0]) -> [0]", "(shiftl [7 1]) -> [1 7]", "(shiftl [8 1 7 9 2]) -> [1 7 9 2 8]"]}
{"name": "shiftl", "time": 2.317115, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6]) -> [6]", "(shiftl [1]) -> [1]", "(shiftl [1 8 9 0 3]) -> [8 9 0 3 1]", "(shiftl [5 1 9 7 2]) -> [1 9 7 2 5]"]}
{"name": "shiftl", "time": 2.946454, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3]) -> [3]", "(shiftl [7 3 7]) -> [3 7 7]", "(shiftl [7]) -> [7]", "(shiftl [5 0 0 9]) -> [0 0 9 5]"]}
{"name": "shiftl", "time": 2.133281, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6 7 1]) -> [7 1 6]", "(shiftl [2 1 3]) -> [1 3 2]", "(shiftl [9 5]) -> [5 9]", "(shiftl [7 8 2 6 7]) -> [8 2 6 7 7]"]}
{"name": "shiftl", "time": 3.358244, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 6 6 8 6]) -> [6 6 8 6 1]", "(shiftl [5 0 9 3]) -> [0 9 3 5]", "(shiftl [0 1 7 0]) -> [1 7 0 0]", "(shiftl [0 4]) -> [4 0]"]}
{"name": "shiftl", "time": 2.247649, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 5 6 4]) -> [5 6 4 7]", "(shiftl [3 3 8 6 2]) -> [3 8 6 2 3]", "(shiftl [9 4 5]) -> [4 5 9]", "(shiftl [0 5]) -> [5 0]"]}
{"name": "shiftl", "time": 2.732479, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 7 4 4 7]) -> [7 4 4 7 8]", "(shiftl [1]) -> [1]", "(shiftl [9 4]) -> [4 9]", "(shiftl [2 9 1]) -> [9 1 2]"]}
{"name": "shiftl", "time": 3.161303, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 5]) -> [5 5]", "(shiftl [6 8 3 5]) -> [8 3 5 6]", "(shiftl [0 7 3 5 4]) -> [7 3 5 4 0]", "(shiftl [1 3 8]) -> [3 8 1]"]}
{"name": "shiftl", "time": 3.385064, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0 9 4 6 9]) -> [9 4 6 9 0]", "(shiftl [0 8 1 4]) -> [8 1 4 0]", "(shiftl [6 7]) -> [7 6]", "(shiftl [2 4]) -> [4 2]"]}
{"name": "shiftl", "time": 2.925036, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0 1 0 8 1]) -> [1 0 8 1 0]", "(shiftl [7 1 1 9 6]) -> [1 1 9 6 7]", "(shiftl [5]) -> [5]", "(shiftl [6 3 9]) -> [3 9 6]"]}
{"name": "shiftl", "time": 0.524336, "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [9 8]) -> [8 9]", "(shiftl [1 0 2]) -> [0 2 1]", "(shiftl [7 7]) -> [7 7]", "(shiftl [7 9 3]) -> [9 3 7]"]}
{"name": "shiftl", "time": 2.692533, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 2 9 2 3]) -> [2 9 2 3 2]", "(shiftl [0]) -> [0]", "(shiftl [4 3]) -> [3 4]", "(shiftl [5 2]) -> [2 5]"]}
{"name": "shiftl", "time": 1.939825, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [4]) -> [4]", "(shiftl [1]) -> [1]", "(shiftl [0 2]) -> [2 0]", "(shiftl [9 1 5 9 8]) -> [1 5 9 8 9]"]}
{"name": "shiftl", "time": 2.172419, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 6 5 2]) -> [6 5 2 5]", "(shiftl [5 4 7 9 2]) -> [4 7 9 2 5]", "(shiftl [0 7 8 1]) -> [7 8 1 0]", "(shiftl [6 7 3 2]) -> [7 3 2 6]"]}
{"name": "shiftl", "time": 1.919711, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0 1]) -> [1 0]", "(shiftl [5 5 1 0]) -> [5 1 0 5]", "(shiftl [9 5 0 0]) -> [5 0 0 9]", "(shiftl [2 6 1 7 6]) -> [6 1 7 6 2]"]}
{"name": "shiftl", "time": 2.146395, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 5]) -> [5 8]", "(shiftl [2 4 9 9 8]) -> [4 9 9 8 2]", "(shiftl [3]) -> [3]", "(shiftl [4 4 9 6 2]) -> [4 9 6 2 4]"]}
{"name": "shiftl", "time": 1.87854, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 8 5]) -> [8 5 7]", "(shiftl [6 9 8 1 7]) -> [9 8 1 7 6]", "(shiftl [0 4]) -> [4 0]", "(shiftl [8 4 1]) -> [4 1 8]"]}
{"name": "shiftl", "time": 1.879979, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0]) -> [0]", "(shiftl [8]) -> [8]", "(shiftl [9 0 4 4 5]) -> [0 4 4 5 9]", "(shiftl [1 5 4 6]) -> [5 4 6 1]"]}
{"name": "shiftl", "time": 2.299204, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 9]) -> [9 2]", "(shiftl [7 5 1 9 2]) -> [5 1 9 2 7]", "(shiftl [3]) -> [3]", "(shiftl [9 2 4 8]) -> [2 4 8 9]"]}
{"name": "shiftl", "time": 0.000908, "solution": "(let shiftl (let a (lambda (b) (reverse b)) _) _)", "examples": ["(shiftl [4 8]) -> [8 4]", "(shiftl [9 3]) -> [3 9]", "(shiftl [4 6]) -> [6 4]", "(shiftl [5]) -> [5]"]}
{"name": "shiftl", "time": 1.951179, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [0 6 2 0 6]) -> [6 2 0 6 0]", "(shiftl [5 9]) -> [9 5]", "(shiftl [2]) -> [2]", "(shiftl [2 9 8 2]) -> [9 8 2 2]"]}
{"name": "shiftl", "time": 0.000979, "solution": "(let shiftl (let a (lambda (b) (reverse b)) _) _)", "examples": ["(shiftl [0 6]) -> [6 0]", "(shiftl [1 0 9 9 0]) -> [0 9 9 0 1]", "(shiftl [5 5]) -> [5 5]", "(shiftl [4 2]) -> [2 4]"]}
{"name": "shiftl", "time": 0.318784, "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [5]) -> [5]", "(shiftl [3 5 0]) -> [5 0 3]", "(shiftl [6 8 3]) -> [8 3 6]", "(shiftl [9 6 1]) -> [6 1 9]"]}
{"name": "shiftl", "time": 0.001514, "solution": "(let shiftl (let a (lambda (b) (reverse b)) _) _)", "examples": ["(shiftl [6 5]) -> [5 6]", "(shiftl [2 1]) -> [1 2]", "(shiftl [2]) -> [2]", "(shiftl [8 0]) -> [0 8]"]}
{"name": "shiftl", "time": 1.543034, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8]) -> [8]", "(shiftl [9 6 7 2]) -> [6 7 2 9]", "(shiftl [6 9 5 7]) -> [9 5 7 6]", "(shiftl [8 6]) -> [6 8]"]}
{"name": "shiftl", "time": 0.316927, "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [5 2 4]) -> [2 4 5]", "(shiftl [5 3]) -> [3 5]", "(shiftl [3 8 3]) -> [8 3 3]", "(shiftl [1]) -> [1]"]}
{"name": "shiftl", "time": 2.708207, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 6 3]) -> [6 3 3]", "(shiftl [7 0 1 6]) -> [0 1 6 7]", "(shiftl [9 0 7 4 9]) -> [0 7 4 9 9]", "(shiftl [8]) -> [8]"]}
{"name": "shiftl", "time": 2.640377, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [4 8 9 2 9]) -> [8 9 2 9 4]", "(shiftl [6 6 0]) -> [6 0 6]", "(shiftl [5]) -> [5]", "(shiftl [4 7 0]) -> [7 0 4]"]}
{"name": "shiftl", "time": 2.8785, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 5 2 8]) -> [5 2 8 2]", "(shiftl [2 3 5 4]) -> [3 5 4 2]", "(shiftl [9 2 2]) -> [2 2 9]", "(shiftl [8 8 2]) -> [8 2 8]"]}
{"name": "shiftl", "time": 0.001029, "solution": "(let shiftl (let a (lambda (b) (reverse b)) _) _)", "examples": ["(shiftl [4 4]) -> [4 4]", "(shiftl [6]) -> [6]", "(shiftl [6 4]) -> [4 6]", "(shiftl [6]) -> [6]"]}
{"name": "shiftl", "time": 2.783082, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 5 6]) -> [5 6 9]", "(shiftl [5 7 4 0]) -> [7 4 0 5]", "(shiftl [2 5 3 1]) -> [5 3 1 2]", "(shiftl [6 4 8 6]) -> [4 8 6 6]"]}
{"name": "shiftl", "time": 2.510577, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8]) -> [8]", "(shiftl [4 2 7 8]) -> [2 7 8 4]", "(shiftl [3]) -> [3]", "(shiftl [6 6 6]) -> [6 6 6]"]}
{"name": "shiftl", "time": 0.772749, "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [6 0 1]) -> [0 1 6]", "(shiftl [1 3]) -> [3 1]", "(shiftl [2 8 7]) -> [8 7 2]", "(shiftl [3 4 5]) -> [4 5 3]"]}
{"name": "shiftl", "time": 1.283922, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 9]) -> [9 9]", "(shiftl [9 2 8 9 5]) -> [2 8 9 5 9]", "(shiftl [2]) -> [2]", "(shiftl [3 0]) -> [0 3]"]}
{"name": "shiftl", "time": 0.334619, "solution": "(let shiftl (let a (lambda (b) (foldr b (lambda (d c) (reverse (cons c d))) [])) _) _)", "examples": ["(shiftl [4]) -> [4]", "(shiftl [4 9]) -> [9 4]", "(shiftl [9 2 9]) -> [2 9 9]", "(shiftl [9 3]) -> [3 9]"]}
{"name": "shiftl", "time": 3.179134, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [6 9 1 0 7]) -> [9 1 0 7 6]", "(shiftl [1 3 6]) -> [3 6 1]", "(shiftl [0 9 9 2]) -> [9 9 2 0]", "(shiftl [5]) -> [5]"]}
{"name": "shiftl", "time": 2.727008, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 5 8 1 4]) -> [5 8 1 4 3]", "(shiftl [4 8 7 1 1]) -> [8 7 1 1 4]", "(shiftl [3 5 3 4 8]) -> [5 3 4 8 3]", "(shiftl [2 4 4]) -> [4 4 2]"]}
{"name": "shiftl", "time": 2.630126, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [1 9 3]) -> [9 3 1]", "(shiftl [1 5 4 8]) -> [5 4 8 1]", "(shiftl [5 0 3]) -> [0 3 5]", "(shiftl [9 6 7 1 4]) -> [6 7 1 4 9]"]}
{"name": "shiftl", "time": 1.538097, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [9 1 9]) -> [1 9 9]", "(shiftl [7]) -> [7]", "(shiftl [8 7 2 3]) -> [7 2 3 8]", "(shiftl [2]) -> [2]"]}
{"name": "shiftl", "time": 2.661185, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [7 6]) -> [6 7]", "(shiftl [2]) -> [2]", "(shiftl [3 9 7 5 5]) -> [9 7 5 5 3]", "(shiftl [6]) -> [6]"]}
{"name": "shiftl", "time": 3.545299, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [4 4 4 1]) -> [4 4 1 4]", "(shiftl [5 2 6]) -> [2 6 5]", "(shiftl [0 5 8 3 9]) -> [5 8 3 9 0]", "(shiftl [9]) -> [9]"]}
{"name": "shiftl", "time": 2.834507, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 1 0 5 0]) -> [1 0 5 0 3]", "(shiftl [9 5 1 7 0]) -> [5 1 7 0 9]", "(shiftl [3 6]) -> [6 3]", "(shiftl [0 9 4]) -> [9 4 0]"]}
{"name": "shiftl", "time": 3.506229, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 3 7]) -> [3 7 3]", "(shiftl [8 8 6 0]) -> [8 6 0 8]", "(shiftl [6 5 1 6]) -> [5 1 6 6]", "(shiftl [4 3 8 5 6]) -> [3 8 5 6 4]"]}
{"name": "shiftl", "time": 0.000921, "solution": "(let shiftl (let a (lambda (b) (reverse b)) _) _)", "examples": ["(shiftl [2 8 8]) -> [8 8 2]", "(shiftl [7 6]) -> [6 7]", "(shiftl [3]) -> [3]", "(shiftl [9 2]) -> [2 9]"]}
{"name": "shiftl", "time": 1.334168, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [3 4 3 4]) -> [4 3 4 3]", "(shiftl [4 9 4 3]) -> [9 4 3 4]", "(shiftl [6 7 8 4]) -> [7 8 4 6]", "(shiftl [0 3 4 3]) -> [3 4 3 0]"]}
{"name": "shiftl", "time": 3.702762, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [2 5]) -> [5 2]", "(shiftl [2 6 1 5]) -> [6 1 5 2]", "(shiftl [2 9 7]) -> [9 7 2]", "(shiftl [5 2 1]) -> [2 1 5]"]}
{"name": "shiftl", "time": 2.850793, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [8 2 4 1]) -> [2 4 1 8]", "(shiftl [4 4]) -> [4 4]", "(shiftl [1 7 8 6]) -> [7 8 6 1]", "(shiftl [4 7]) -> [7 4]"]}
{"name": "shiftl", "time": 2.733453, "solution": "(let shiftl (let a (lambda (b) (cdr (reverse (cons (car b) (reverse b))))) _) _)", "examples": ["(shiftl [5 7]) -> [7 5]", "(shiftl [8]) -> [8]", "(shiftl [3 0 9 1 7]) -> [0 9 1 7 3]", "(shiftl [5 6]) -> [6 5]"]}
