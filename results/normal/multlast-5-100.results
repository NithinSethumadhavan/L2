{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []"], "time": 0.000703, "solution": "(let multlast (let a (lambda (b) []) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [2]) -> [2]", "(multlast []) -> []"], "time": 0.000525, "solution": "(let multlast (let a (lambda (b) b) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [9 0 7]) -> [7 7 7]", "(multlast [5 5 9]) -> [9 9 9]", "(multlast [9 9 2]) -> [2 2 2]"], "time": 0.127329, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr (cdr b)))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [1 1 1 3 6]) -> [6 6 6 6 6]", "(multlast [4 5]) -> [5 5]", "(multlast [7 0 8 5]) -> [5 5 5 5]"], "time": 0.269288, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 2 9 7 9]) -> [9 9 9 9 9]", "(multlast [7 7 4]) -> [4 4 4]", "(multlast []) -> []"], "time": 0.091141, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr (cdr b)))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast [9 2 0 7 4]) -> [4 4 4 4 4]"], "time": 0.312377, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [6 6 1 3]) -> [3 3 3 3]", "(multlast [3]) -> [3]", "(multlast [2]) -> [2]"], "time": 0.284577, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [7]) -> [7]", "(multlast [0 5]) -> [5 5]", "(multlast [8 4 3 3]) -> [3 3 3 3]"], "time": 0.289757, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [9]) -> [9]", "(multlast [1 7 2 5 2]) -> [2 2 2 2 2]"], "time": 0.336456, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 3 6 8]) -> [8 8 8 8]", "(multlast [4 1]) -> [1 1]", "(multlast [0 2 8 4 0]) -> [0 0 0 0 0]"], "time": 0.327223, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [6 7]) -> [7 7]", "(multlast [3 4 6 1 2]) -> [2 2 2 2 2]", "(multlast [0 5 7 6 0]) -> [0 0 0 0 0]"], "time": 0.311308, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [5 0 5 1]) -> [1 1 1 1]", "(multlast [9 3 6]) -> [6 6 6]", "(multlast [6 0 0]) -> [0 0 0]"], "time": 0.331823, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3]) -> [3]", "(multlast [1 7 4 7 3]) -> [3 3 3 3 3]", "(multlast [9 4]) -> [4 4]"], "time": 0.324285, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [1 9 6]) -> [6 6 6]", "(multlast [2 4 8 6]) -> [6 6 6 6]"], "time": 0.331917, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [7 3 3 8 3]) -> [3 3 3 3 3]", "(multlast [4 9 3 4]) -> [4 4 4 4]"], "time": 0.366948, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [9 1 2 6 8]) -> [8 8 8 8 8]", "(multlast [5 6]) -> [6 6]", "(multlast []) -> []"], "time": 0.372359, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8]) -> [8]", "(multlast [0 3 8]) -> [8 8 8]", "(multlast [2 8]) -> [8 8]"], "time": 0.272141, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [7 9]) -> [9 9]", "(multlast []) -> []", "(multlast []) -> []"], "time": 0.043768, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr b))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2 2 8]) -> [8 8 8]", "(multlast [7 5]) -> [5 5]", "(multlast []) -> []"], "time": 0.25531, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8 3 4]) -> [4 4 4]", "(multlast [4]) -> [4]", "(multlast [5]) -> [5]"], "time": 0.261426, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 2 5 2]) -> [2 2 2 2]", "(multlast [6 4 6 1]) -> [1 1 1 1]", "(multlast [2 3]) -> [3 3]"], "time": 0.244797, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [5 6 1 3]) -> [3 3 3 3]", "(multlast []) -> []", "(multlast [9 3 1 1 9]) -> [9 9 9 9 9]"], "time": 0.275733, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [5 2 4]) -> [4 4 4]", "(multlast [3 7 8 1]) -> [1 1 1 1]", "(multlast [5 9 4]) -> [4 4 4]"], "time": 0.299052, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [6]) -> [6]", "(multlast [6 0 1]) -> [1 1 1]", "(multlast [0 2 1 6]) -> [6 6 6 6]"], "time": 0.274746, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [9]) -> [9]", "(multlast [4 0]) -> [0 0]", "(multlast [6 6]) -> [6 6]"], "time": 0.106009, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [5 0 5]) -> [5 5 5]", "(multlast [4 8 2 0 3]) -> [3 3 3 3 3]", "(multlast [3 1 8]) -> [8 8 8]"], "time": 0.279701, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [1 1]) -> [1 1]", "(multlast [4 4]) -> [4 4]", "(multlast []) -> []"], "time": 0.000453, "solution": "(let multlast (let a (lambda (b) b) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 8]) -> [8 8]", "(multlast [1 8 2 0]) -> [0 0 0 0]", "(multlast [2 0 0]) -> [0 0 0]"], "time": 0.284091, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 5 3 7 1]) -> [1 1 1 1 1]", "(multlast [7]) -> [7]", "(multlast [7 3 7 0 5]) -> [5 5 5 5 5]"], "time": 0.296685, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3]) -> [3]", "(multlast []) -> []", "(multlast [2 7 0]) -> [0 0 0]"], "time": 0.274602, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [4 6 6]) -> [6 6 6]", "(multlast [1 7 2 4 1]) -> [1 1 1 1 1]", "(multlast [9 8 4]) -> [4 4 4]"], "time": 0.276181, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [0 3]) -> [3 3]", "(multlast [0 4]) -> [4 4]"], "time": 0.035876, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr b))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [6 7 8 0 9]) -> [9 9 9 9 9]", "(multlast [6 1 5 9 1]) -> [1 1 1 1 1]", "(multlast [8 5 1 4]) -> [4 4 4 4]"], "time": 0.278228, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2 0 9]) -> [9 9 9]", "(multlast [1]) -> [1]", "(multlast [1 9 7 2 0]) -> [0 0 0 0 0]"], "time": 0.224074, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 9 1 2]) -> [2 2 2 2]", "(multlast [2 0 9 3 6]) -> [6 6 6 6 6]", "(multlast [5 8]) -> [8 8]"], "time": 0.23922, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8]) -> [8]", "(multlast [6]) -> [6]", "(multlast [5 7 1 6 5]) -> [5 5 5 5 5]"], "time": 0.021673, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8]) -> [8]", "(multlast []) -> []", "(multlast [3 1 9 8 9]) -> [9 9 9 9 9]"], "time": 0.225718, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [6 2 4]) -> [4 4 4]", "(multlast [8 3 0 7 9]) -> [9 9 9 9 9]", "(multlast [8]) -> [8]"], "time": 0.242756, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0 2 7 9 6]) -> [6 6 6 6 6]", "(multlast [9]) -> [9]", "(multlast [4 1 4]) -> [4 4 4]"], "time": 0.242642, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8 5 4 4]) -> [4 4 4 4]", "(multlast [9 1 7]) -> [7 7 7]", "(multlast [5 7 0]) -> [0 0 0]"], "time": 0.093495, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr (cdr b)))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0]) -> [0]", "(multlast [1 6 7]) -> [7 7 7]", "(multlast []) -> []"], "time": 0.273731, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [4 0 1 6 3]) -> [3 3 3 3 3]", "(multlast []) -> []", "(multlast [4 6 5 1 3]) -> [3 3 3 3 3]"], "time": 0.111669, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (- (car b) 1)))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [1 3 3 3 0]) -> [0 0 0 0 0]", "(multlast [6 4]) -> [4 4]", "(multlast []) -> []"], "time": 0.299748, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2 3]) -> [3 3]", "(multlast []) -> []", "(multlast [1]) -> [1]"], "time": 0.105908, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [5 5 8 0 0]) -> [0 0 0 0 0]", "(multlast [6 0 1 2]) -> [2 2 2 2]", "(multlast [6]) -> [6]"], "time": 0.293751, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [7 4 3 6]) -> [6 6 6 6]", "(multlast []) -> []", "(multlast [8 1 4 8 4]) -> [4 4 4 4 4]"], "time": 0.281066, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [9]) -> [9]", "(multlast [8 0 3]) -> [3 3 3]", "(multlast [7 6 4]) -> [4 4 4]"], "time": 0.292624, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3]) -> [3]", "(multlast [6 9]) -> [9 9]", "(multlast [0 5 3]) -> [3 3 3]"], "time": 0.232632, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [1 0]) -> [0 0]", "(multlast []) -> []", "(multlast [0 0 2]) -> [2 2 2]"], "time": 0.295839, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [6 7 7 8 3]) -> [3 3 3 3 3]", "(multlast [6 1 8 6 3]) -> [3 3 3 3 3]", "(multlast [9]) -> [9]"], "time": 0.289605, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8 6]) -> [6 6]", "(multlast [9 7 9 2 3]) -> [3 3 3 3 3]", "(multlast [1]) -> [1]"], "time": 0.213834, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [9 4]) -> [4 4]", "(multlast []) -> []", "(multlast [3 5 2 2 0]) -> [0 0 0 0 0]"], "time": 0.263517, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [4]) -> [4]", "(multlast []) -> []", "(multlast []) -> []"], "time": 0.000438, "solution": "(let multlast (let a (lambda (b) b) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast [4 7]) -> [7 7]"], "time": 0.031166, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr b))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast [9 1 3 5]) -> [5 5 5 5]"], "time": 0.206021, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr (cdr (cdr b))))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2 3 0]) -> [0 0 0]", "(multlast [5 1]) -> [1 1]", "(multlast []) -> []"], "time": 0.161743, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (/ 1 (car (cdr b)))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [7]) -> [7]", "(multlast []) -> []", "(multlast [7 6 0 4 2]) -> [2 2 2 2 2]"], "time": 0.220428, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 2]) -> [2 2]", "(multlast [6 4 8 8 4]) -> [4 4 4 4 4]", "(multlast []) -> []"], "time": 0.046616, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr b))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0 9 6 7]) -> [7 7 7 7]", "(multlast [3 4 7]) -> [7 7 7]", "(multlast [2 0 9 6]) -> [6 6 6 6]"], "time": 0.248479, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [9 3 6]) -> [6 6 6]", "(multlast [6 4 3 6]) -> [6 6 6 6]", "(multlast [7 4 7]) -> [7 7 7]"], "time": 0.23408, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2]) -> [2]", "(multlast []) -> []", "(multlast [6 5]) -> [5 5]"], "time": 0.11838, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [9 7 9 7 3]) -> [3 3 3 3 3]", "(multlast [4 1 2 1]) -> [1 1 1 1]"], "time": 0.275021, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2 4 2]) -> [2 2 2]", "(multlast []) -> []", "(multlast [9 9 3 7]) -> [7 7 7 7]"], "time": 0.255769, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2]) -> [2]", "(multlast [1 3 4 9]) -> [9 9 9 9]", "(multlast [7 0]) -> [0 0]"], "time": 0.245793, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0 3 1 1]) -> [1 1 1 1]", "(multlast [5]) -> [5]", "(multlast []) -> []"], "time": 0.237651, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8]) -> [8]", "(multlast [6 9]) -> [9 9]", "(multlast [0]) -> [0]"], "time": 0.087936, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8 7 6]) -> [6 6 6]", "(multlast []) -> []", "(multlast []) -> []"], "time": 0.126122, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr (cdr b)))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 1 9 7]) -> [7 7 7 7]", "(multlast [4 3 7 2 4]) -> [4 4 4 4 4]", "(multlast [9]) -> [9]"], "time": 0.24922, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [9 1 8]) -> [8 8 8]", "(multlast [5 0 2]) -> [2 2 2]", "(multlast [9 4 7 1 4]) -> [4 4 4 4 4]"], "time": 0.194847, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2 1]) -> [1 1]", "(multlast [1 7 3 5]) -> [5 5 5 5]", "(multlast [6 6 3 5]) -> [5 5 5 5]"], "time": 0.238263, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [8 3]) -> [3 3]", "(multlast [2 8 6 3]) -> [3 3 3 3]"], "time": 0.189659, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (+ 1 (+ 1 1))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2 7 3 3 9]) -> [9 9 9 9 9]", "(multlast [5]) -> [5]", "(multlast [8 2 6 7 1]) -> [1 1 1 1 1]"], "time": 0.293876, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [7 5 9]) -> [9 9 9]", "(multlast [9 2]) -> [2 2]", "(multlast [7 4 9 6 5]) -> [5 5 5 5 5]"], "time": 0.265747, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8 4 2 1 8]) -> [8 8 8 8 8]", "(multlast [9 8 4 9 9]) -> [9 9 9 9 9]", "(multlast [3 7 3 0 5]) -> [5 5 5 5 5]"], "time": 0.24249, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [4 3 6 1]) -> [1 1 1 1]", "(multlast [4 9 3]) -> [3 3 3]", "(multlast [9 2 3 3 4]) -> [4 4 4 4 4]"], "time": 0.252457, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2]) -> [2]", "(multlast [9 5 4 7]) -> [7 7 7 7]", "(multlast [3 0 6]) -> [6 6 6]"], "time": 0.273075, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [4 0 1]) -> [1 1 1]", "(multlast [6 9 3 7 1]) -> [1 1 1 1 1]", "(multlast [5 5]) -> [5 5]"], "time": 0.277393, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [5 5]) -> [5 5]", "(multlast [9 4 5 6]) -> [6 6 6 6]"], "time": 0.270199, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0 0]) -> [0 0]", "(multlast [5 6 1]) -> [1 1 1]", "(multlast []) -> []"], "time": 0.223013, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (% 1 (+ 1 c))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [7 8 6 9]) -> [9 9 9 9]", "(multlast []) -> []", "(multlast [5 2]) -> [2 2]"], "time": 0.295562, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [1 8 9 4 9]) -> [9 9 9 9 9]", "(multlast []) -> []", "(multlast [3 6 6 4]) -> [4 4 4 4]"], "time": 0.265063, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8 5 2 7 8]) -> [8 8 8 8 8]", "(multlast [6]) -> [6]", "(multlast [9 8 2 1]) -> [1 1 1 1]"], "time": 0.306926, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0 1 6 7]) -> [7 7 7 7]", "(multlast [9 0 6]) -> [6 6 6]", "(multlast [6 0 3]) -> [3 3 3]"], "time": 0.277847, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [5 9]) -> [9 9]", "(multlast []) -> []", "(multlast [6 9]) -> [9 9]"], "time": 0.035695, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr b))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 3 2]) -> [2 2 2]", "(multlast [0 1 7 1 8]) -> [8 8 8 8 8]", "(multlast [3 0 1]) -> [1 1 1]"], "time": 0.24675, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [5 0]) -> [0 0]", "(multlast [6 3 3]) -> [3 3 3]"], "time": 0.029622, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr b))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2 3 9]) -> [9 9 9]", "(multlast [5 0 2]) -> [2 2 2]", "(multlast [3 5 7]) -> [7 7 7]"], "time": 0.068856, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr (cdr b)))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [7]) -> [7]", "(multlast [6 1]) -> [1 1]"], "time": 0.06563, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [4]) -> [4]", "(multlast [6 8 0]) -> [0 0 0]", "(multlast [4 1 2 1 7]) -> [7 7 7 7 7]"], "time": 0.234129, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [1 7 3 3]) -> [3 3 3 3]", "(multlast [6 0 1 6 0]) -> [0 0 0 0 0]", "(multlast [3 8 0]) -> [0 0 0]"], "time": 0.231975, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
