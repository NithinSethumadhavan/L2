{"name": "length", "examples": ["(length []) -> 0", "(length [4 8]) -> 2", "(length [0 6 9 8 8]) -> 5", "(length [1]) -> 1", "(length [4 1 1 4 9]) -> 5", "(length [4 9 9 7 0]) -> 5"], "time": 0.032963, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [2 6 7 4]) -> 4", "(length [7 4 0 3]) -> 4", "(length [2 2]) -> 2", "(length [3 1 2 4]) -> 4", "(length [7 1 1]) -> 3"], "time": 0.033035, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8]) -> 1", "(length [3 4 0 4 8]) -> 5", "(length []) -> 0", "(length [1 6]) -> 2", "(length [1 2 9 9 5]) -> 5"], "time": 0.033597, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 2]) -> 2", "(length [3]) -> 1", "(length [8 6 4 9 8]) -> 5", "(length [3 1 1 4 0]) -> 5", "(length [4 4]) -> 2"], "time": 0.034274, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1]) -> 1", "(length [0]) -> 1", "(length []) -> 0", "(length [7 2 2 2 7]) -> 5", "(length [8 4 7]) -> 3"], "time": 0.044668, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8]) -> 1", "(length [8 5 1 3]) -> 4", "(length [5]) -> 1", "(length [6 1 4]) -> 3", "(length [1 8 7 2 7]) -> 5"], "time": 0.034186, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 3 4 9]) -> 4", "(length [3 1 0 9]) -> 4", "(length [2 8]) -> 2", "(length [0 9 7 1]) -> 4", "(length [7 5 0 3]) -> 4"], "time": 0.052978, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 0 8 0]) -> 4", "(length [2 6 1 7 1]) -> 5", "(length [4 9 2]) -> 3", "(length [6 2 2]) -> 3", "(length [9 6 1 3]) -> 4"], "time": 0.050838, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [2]) -> 1", "(length [9]) -> 1", "(length [5 1 4 5]) -> 4", "(length [9 9]) -> 2"], "time": 0.052306, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9]) -> 1", "(length [4 8]) -> 2", "(length []) -> 0", "(length [5 4 1 0 9]) -> 5", "(length [1 9 8 7]) -> 4"], "time": 0.051433, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 2 7 0]) -> 4", "(length [0 3 2 4]) -> 4", "(length [1 3 8 1 3]) -> 5", "(length []) -> 0", "(length [9 8 0]) -> 3"], "time": 0.032565, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [2 0 4 3]) -> 4", "(length [6]) -> 1", "(length [1 8 2]) -> 3", "(length [1 5 7]) -> 3"], "time": 0.047938, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [5 0 2]) -> 3", "(length [6 3]) -> 2", "(length [9 8]) -> 2", "(length [6 9]) -> 2"], "time": 0.034612, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8]) -> 1", "(length [2 7 8]) -> 3", "(length [4]) -> 1", "(length [3 2 0 7]) -> 4", "(length [0 6 5 2]) -> 4"], "time": 0.043305, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8 6 1 2]) -> 4", "(length [8 1]) -> 2", "(length [8 4 0]) -> 3", "(length [9 2 7 9 9]) -> 5", "(length [4 8 1 2]) -> 4"], "time": 0.043557, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 8 4]) -> 3", "(length [1 3]) -> 2", "(length [3]) -> 1", "(length [0 6 0 9 8]) -> 5", "(length []) -> 0"], "time": 0.035745, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 9 1 8 0]) -> 5", "(length [7 5]) -> 2", "(length []) -> 0", "(length [4]) -> 1", "(length [1 6]) -> 2"], "time": 0.046745, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 9]) -> 2", "(length [1 3]) -> 2", "(length []) -> 0", "(length [6]) -> 1", "(length []) -> 0"], "time": 0.047137, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 7 3 8 1]) -> 5", "(length []) -> 0", "(length [2 5]) -> 2", "(length [0 9 9 2 8]) -> 5", "(length [5 3]) -> 2"], "time": 0.034667, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 1 3 1 5]) -> 5", "(length [4]) -> 1", "(length []) -> 0", "(length [5 9 7 4 4]) -> 5", "(length [2]) -> 1"], "time": 0.040687, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1 8 1 7]) -> 4", "(length []) -> 0", "(length [4 5]) -> 2", "(length [5 3 6 2]) -> 4", "(length [6 5 5]) -> 3"], "time": 0.031413, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1 5 0]) -> 3", "(length [4 8 6 6 3]) -> 5", "(length [9 3 0]) -> 3", "(length [1 9 9 0 4]) -> 5", "(length [9 8]) -> 2"], "time": 0.044352, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 3 2]) -> 3", "(length [7 9]) -> 2", "(length [3 9 7 3 0]) -> 5", "(length [6 0 6]) -> 3", "(length []) -> 0"], "time": 0.031266, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [2 7 5 3 6]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [1 4 0 6]) -> 4"], "time": 0.035092, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6 1]) -> 2", "(length [6 4 6]) -> 3", "(length [0 9]) -> 2", "(length [1]) -> 1", "(length [1]) -> 1"], "time": 0.034346, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [8 8]) -> 2", "(length [4]) -> 1", "(length [3 0 7 4]) -> 4"], "time": 0.044788, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [1]) -> 1", "(length [6 1 5 2]) -> 4", "(length [5]) -> 1"], "time": 0.039917, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7 3]) -> 2", "(length [8 3 4 2 8]) -> 5", "(length [6 3 7]) -> 3", "(length [3 9]) -> 2", "(length [0 7 7]) -> 3"], "time": 0.038007, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1 9 1 3]) -> 4", "(length [2 7]) -> 2", "(length [6 6]) -> 2", "(length [6 7]) -> 2", "(length [4 4 8 9 0]) -> 5"], "time": 0.031214, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6 2 0 2]) -> 4", "(length [1]) -> 1", "(length [7 3 0]) -> 3", "(length [0 4 6 3 5]) -> 5", "(length []) -> 0"], "time": 0.052217, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [5 4 4 9]) -> 4", "(length [1 4 1]) -> 3", "(length [4 8 0 3 5]) -> 5", "(length [2]) -> 1"], "time": 0.04348, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 9 0]) -> 3", "(length []) -> 0", "(length [7 8 4]) -> 3", "(length []) -> 0", "(length [8]) -> 1"], "time": 0.030715, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [9 3 5 8 1]) -> 5", "(length [8 0 6]) -> 3"], "time": 0.029159, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 2]) -> 2", "(length []) -> 0", "(length [0 2 9 2 5]) -> 5", "(length [3 7 9 1]) -> 4", "(length []) -> 0"], "time": 0.035442, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 5 8]) -> 3", "(length [4 4 5 7 4]) -> 5", "(length [1 6 8 1]) -> 4", "(length [6 1]) -> 2", "(length [1 3 3 6]) -> 4"], "time": 0.037988, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [2 4 5 3]) -> 4", "(length [4 4 0]) -> 3", "(length [3 3 5 1 1]) -> 5", "(length [4]) -> 1", "(length [6]) -> 1"], "time": 0.046112, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [9 1 9 3]) -> 4", "(length [9 8]) -> 2", "(length [9 1 2]) -> 3"], "time": 0.03283, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 6]) -> 2", "(length [5 4 4 4 9]) -> 5", "(length [2 8 4]) -> 3", "(length []) -> 0", "(length [1]) -> 1"], "time": 0.031178, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 9]) -> 2", "(length [0]) -> 1", "(length [2 0 0 7 7]) -> 5", "(length [3 1]) -> 2", "(length [6 2 1 3]) -> 4"], "time": 0.045348, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 3 0 1]) -> 4", "(length [2 5 0]) -> 3", "(length [8 1]) -> 2", "(length [6 8 8]) -> 3", "(length [7 1 2 8 1]) -> 5"], "time": 0.048626, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7]) -> 1", "(length [3 3]) -> 2", "(length [4 0 5]) -> 3", "(length [7 8 5]) -> 3", "(length [3]) -> 1"], "time": 0.040618, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0]) -> 1", "(length [8]) -> 1", "(length [9 9 2]) -> 3", "(length [8 0 8]) -> 3", "(length [4 1]) -> 2"], "time": 0.045773, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1 5 9 5]) -> 4", "(length [7 6 5]) -> 3", "(length [0 2 8]) -> 3", "(length [5 2]) -> 2", "(length [0 0 5]) -> 3"], "time": 0.031581, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6 5]) -> 2", "(length [3 6]) -> 2", "(length [9 4 6]) -> 3", "(length [7 3]) -> 2", "(length [2]) -> 1"], "time": 0.031267, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [4]) -> 1", "(length [6 4]) -> 2", "(length []) -> 0", "(length [7 6]) -> 2"], "time": 0.047565, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [5 7]) -> 2", "(length [0 7 8 5 3]) -> 5", "(length [4]) -> 1", "(length [1 8 1 6 0]) -> 5"], "time": 0.030906, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1 2 5]) -> 3", "(length []) -> 0", "(length [0 5 9]) -> 3", "(length [4 9 4]) -> 3", "(length [5 1]) -> 2"], "time": 0.034931, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6]) -> 1", "(length [8 4]) -> 2", "(length [6 5 8]) -> 3", "(length [0 8]) -> 2", "(length [2]) -> 1"], "time": 0.038127, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [7]) -> 1", "(length [4 8 8 4 0]) -> 5", "(length [5 8]) -> 2", "(length [3 2 5 4 5]) -> 5"], "time": 0.029724, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 4 7]) -> 3", "(length []) -> 0", "(length [1 7 7 0]) -> 4", "(length [2 2 6 8 4]) -> 5", "(length [2 4 4 4 3]) -> 5"], "time": 0.034529, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6 2 2 8]) -> 4", "(length [4 2]) -> 2", "(length [6 0 6]) -> 3", "(length [3 2 5 3 8]) -> 5", "(length [5]) -> 1"], "time": 0.048878, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [2]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [1 2 0 8 0]) -> 5", "(length [9 8 6]) -> 3"], "time": 0.034929, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 7 0]) -> 3", "(length [2 9]) -> 2", "(length [8 6 7 9]) -> 4", "(length [5 5 8 1 2]) -> 5", "(length [8 8 1 7]) -> 4"], "time": 0.034646, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7 2 9 1 4]) -> 5", "(length [2]) -> 1", "(length [0 7 0 7]) -> 4", "(length [0 1 6 8 0]) -> 5", "(length [4 9 1 7]) -> 4"], "time": 0.031108, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5]) -> 1", "(length [2 5 4]) -> 3", "(length [8]) -> 1", "(length [0 1 0]) -> 3", "(length [5 2 8 5]) -> 4"], "time": 0.038922, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 4 2]) -> 3", "(length []) -> 0", "(length [0]) -> 1", "(length []) -> 0", "(length [2 2 6 0]) -> 4"], "time": 0.036947, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8 7 4 0 1]) -> 5", "(length [2 6 5]) -> 3", "(length [3 0 7 2 0]) -> 5", "(length [0 1 5 4 2]) -> 5", "(length [4 3 8]) -> 3"], "time": 0.044768, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8 8 1]) -> 3", "(length []) -> 0", "(length [8 0 8 0 2]) -> 5", "(length [7 2 0]) -> 3", "(length [7 9 1 1 4]) -> 5"], "time": 0.031641, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 7 3 7 5]) -> 5", "(length [0]) -> 1", "(length [9 8 7]) -> 3", "(length [2 9 4]) -> 3", "(length [0 3]) -> 2"], "time": 0.044455, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 4 3 4]) -> 4", "(length [5 4 6 4]) -> 4", "(length [1 2 6]) -> 3", "(length [4 5 1 0 2]) -> 5", "(length [1 4 2 0 0]) -> 5"], "time": 0.048054, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7]) -> 1", "(length [8 3 4]) -> 3", "(length [6 4 6]) -> 3", "(length [0]) -> 1", "(length [3 1 9 1 6]) -> 5"], "time": 0.034976, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7 0]) -> 2", "(length [1]) -> 1", "(length [8 0 7]) -> 3", "(length [1 4]) -> 2", "(length []) -> 0"], "time": 0.033049, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [2 3 9]) -> 3", "(length [2]) -> 1", "(length []) -> 0", "(length [3 7 2]) -> 3", "(length [8 0 1 4 7]) -> 5"], "time": 0.048785, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 0 0 6]) -> 4", "(length []) -> 0", "(length [3]) -> 1", "(length []) -> 0", "(length [1]) -> 1"], "time": 0.045471, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6 8 3 3]) -> 4", "(length [9 6 2]) -> 3", "(length [8]) -> 1", "(length [5 8 7]) -> 3", "(length [8 5 7 5]) -> 4"], "time": 0.050862, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 1 1 9 8]) -> 5", "(length [6 6 9]) -> 3", "(length [5 2 9 6 8]) -> 5", "(length []) -> 0", "(length [3]) -> 1"], "time": 0.029862, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 9 4 7]) -> 4", "(length [4 0]) -> 2", "(length [4 2 2 2 3]) -> 5", "(length [6 7]) -> 2", "(length []) -> 0"], "time": 0.034962, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 0 0 2 7]) -> 5", "(length [0]) -> 1", "(length [7 4 1]) -> 3", "(length [2 1 6 9 0]) -> 5", "(length [9 5 3]) -> 3"], "time": 0.029912, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7]) -> 1", "(length [4 4 0 9 2]) -> 5", "(length [3 8 3]) -> 3", "(length [6 5]) -> 2", "(length [2 7]) -> 2"], "time": 0.03734, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 9 2 5 9]) -> 5", "(length []) -> 0", "(length [0 3 1 9 7]) -> 5", "(length [7 7 2 9]) -> 4", "(length []) -> 0"], "time": 0.044535, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7]) -> 1", "(length [1 4 0 3 2]) -> 5", "(length [2]) -> 1", "(length [8 4 2 2 3]) -> 5", "(length [1 1]) -> 2"], "time": 0.033534, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [5 0 4]) -> 3", "(length [8 9]) -> 2"], "time": 0.036165, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8 6]) -> 2", "(length [4 8]) -> 2", "(length [9 2 8]) -> 3", "(length [5]) -> 1", "(length [4 5 4 6 5]) -> 5"], "time": 0.046624, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [2 1]) -> 2", "(length [1]) -> 1", "(length [9 8 6 0]) -> 4", "(length [5 3]) -> 2", "(length [7 3]) -> 2"], "time": 0.034488, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 4 3 4 1]) -> 5", "(length [0]) -> 1", "(length [3 8]) -> 2", "(length [9 4]) -> 2", "(length []) -> 0"], "time": 0.038554, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4]) -> 1", "(length [3 8]) -> 2", "(length [9 2]) -> 2", "(length []) -> 0", "(length [7]) -> 1"], "time": 0.041194, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7 4 7]) -> 3", "(length [2 8]) -> 2", "(length [0 2 0 9 3]) -> 5", "(length []) -> 0", "(length []) -> 0"], "time": 0.038783, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 9 0 1 0]) -> 5", "(length [6]) -> 1", "(length [0 1 5 2]) -> 4", "(length [8 1 8]) -> 3", "(length []) -> 0"], "time": 0.035767, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [3]) -> 1", "(length [1 1 6 7 6]) -> 5", "(length []) -> 0", "(length [2 8 5]) -> 3"], "time": 0.038121, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 7 6 9]) -> 4", "(length [0 4]) -> 2", "(length [4 7]) -> 2", "(length [4 9]) -> 2", "(length [8 5 9 3]) -> 4"], "time": 0.04402, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6 0 1 8 0]) -> 5", "(length [5 7 8 8 2]) -> 5", "(length [7 4]) -> 2", "(length []) -> 0", "(length [3 7 1 4 8]) -> 5"], "time": 0.02997, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 1]) -> 2", "(length []) -> 0", "(length [5 9 6 0]) -> 4", "(length [0]) -> 1", "(length [8]) -> 1"], "time": 0.034751, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 3 4 6 4]) -> 5", "(length [0]) -> 1", "(length [8 1 2]) -> 3", "(length [1 6 3 1]) -> 4", "(length [6 9 0 6]) -> 4"], "time": 0.054002, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8 5]) -> 2", "(length [8]) -> 1", "(length [0 3]) -> 2", "(length [8 4]) -> 2", "(length [9 4 2 1]) -> 4"], "time": 0.032767, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 7]) -> 2", "(length [8 5 5 9]) -> 4", "(length [1]) -> 1", "(length [9 4 9 4]) -> 4", "(length [1 4]) -> 2"], "time": 0.04415, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 0 6]) -> 3", "(length [8]) -> 1", "(length [1]) -> 1", "(length [8 8 5]) -> 3", "(length [7 2 6]) -> 3"], "time": 0.048865, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [2 5 4]) -> 3", "(length [6 0 1]) -> 3", "(length [7 5 1]) -> 3", "(length [6]) -> 1", "(length [4]) -> 1"], "time": 0.038694, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 7]) -> 2", "(length [4 0 4 9 8]) -> 5", "(length [7 6 2 3 3]) -> 5", "(length [8 6 7 1]) -> 4", "(length [6 6 8 4 3]) -> 5"], "time": 0.031281, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 5 2 4 9]) -> 5", "(length [5 4 9 0 4]) -> 5", "(length [7 1 9]) -> 3", "(length [3 1 3 6]) -> 4", "(length [0 4 7 9 4]) -> 5"], "time": 0.040312, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 1 7 0]) -> 4", "(length [4 9 5 0]) -> 4", "(length [8 1 4]) -> 3", "(length [1 0 0]) -> 3", "(length [1 2 4 2 9]) -> 5"], "time": 0.030586, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 2 3 8 3]) -> 5", "(length [6 0 3]) -> 3", "(length [2 0 4 8 5]) -> 5", "(length []) -> 0", "(length [2 0 9 9 1]) -> 5"], "time": 0.032359, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8 6 6 1]) -> 4", "(length [9 1 5]) -> 3", "(length [8 4 6 0]) -> 4", "(length [8 8]) -> 2", "(length []) -> 0"], "time": 0.038295, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 4]) -> 2", "(length [8 2 8]) -> 3", "(length [7 3 4 1 1]) -> 5", "(length []) -> 0", "(length [9 7 9 1 3]) -> 5"], "time": 0.032049, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6 1 4 4]) -> 4", "(length [3 2 4 1]) -> 4", "(length [4]) -> 1", "(length [3 4 8 3 9]) -> 5", "(length [6]) -> 1"], "time": 0.047176, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1 6 9 9 5]) -> 5", "(length [6]) -> 1", "(length [4 4 2]) -> 3", "(length [7 1 3 6 8]) -> 5", "(length []) -> 0"], "time": 0.029146, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [8]) -> 1", "(length [4 7 0 9]) -> 4", "(length [2 8 9 8 7]) -> 5"], "time": 0.035078, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 0 4 4]) -> 4", "(length [9]) -> 1", "(length [7 4 6]) -> 3", "(length [6 2]) -> 2", "(length [0 7 6 9 3]) -> 5"], "time": 0.029329, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 5 5 0 1]) -> 5", "(length [4]) -> 1", "(length [0 5 6 8 1]) -> 5", "(length [4 0 1 6 8]) -> 5", "(length []) -> 0"], "time": 0.032705, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [4 0]) -> 2", "(length [3 5 1 6 1]) -> 5", "(length [1 2 6 6]) -> 4"], "time": 0.02969, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 2 4]) -> 3", "(length [1 1]) -> 2", "(length [1]) -> 1", "(length []) -> 0", "(length [9]) -> 1"], "time": 0.028655, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
