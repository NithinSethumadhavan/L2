{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 5 2 3]) -> 5", "(max [3]) -> 3", "(max [9]) -> 9", "(max [1 5 2 4]) -> 5", "(max [9 6 2]) -> 9", "(max [9 8 3]) -> 9", "(max [1]) -> 1", "(max [7 4 6 3 8]) -> 8", "(max [3 0 5 9 7]) -> 9", "(max [1 8 2]) -> 8", "(max [6]) -> 6", "(max [5 7]) -> 7", "(max [8 9 2 5 3]) -> 9", "(max [1 9]) -> 9", "(max [2 9 9 4 3]) -> 9", "(max [2 7 0]) -> 7", "(max [8 9 6 2]) -> 9", "(max [3 7 8 8]) -> 8", "(max [2 6 2]) -> 6", "(max [1 2 5 1]) -> 5", "(max [4 1 4 8]) -> 8", "(max [8 5 5 2]) -> 8", "(max [6]) -> 6", "(max [6]) -> 6"], "time": 5.464719}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 7]) -> 7", "(max [5]) -> 5", "(max [1 9 8 9 3]) -> 9", "(max [5 8 4]) -> 8", "(max [2 3 4 5]) -> 5", "(max [9 1 3 2 3]) -> 9", "(max [4 1 2 2 8]) -> 8", "(max [5 7 3 0]) -> 7", "(max [0 7 4 5 0]) -> 7", "(max [0 1 2]) -> 2", "(max [7 0]) -> 7", "(max [6 8 3]) -> 8", "(max [5 3 2 5]) -> 5", "(max [1 1 2]) -> 2", "(max [9 8 0 7 8]) -> 9", "(max [2 3]) -> 3", "(max [6 9]) -> 9", "(max [4 8 0 6]) -> 8", "(max [0 7 1]) -> 7", "(max [7 6 5 6]) -> 7", "(max [2 0]) -> 2", "(max [4 4]) -> 4", "(max [9 1]) -> 9", "(max [8 2 4 3 4]) -> 8"], "time": 5.870606}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 0 8 6 8]) -> 9", "(max [8]) -> 8", "(max [0 2 7]) -> 7", "(max [9 5]) -> 9", "(max [2 9 8 3]) -> 9", "(max [6 2]) -> 6", "(max [4 1]) -> 4", "(max [1 0 7]) -> 7", "(max [8]) -> 8", "(max [5 8 5 4]) -> 8", "(max [0 6 2 1 9]) -> 9", "(max [4 7]) -> 7", "(max [0 1 8]) -> 8", "(max [5 9 9 7 3]) -> 9", "(max [8]) -> 8", "(max [1 3]) -> 3", "(max [9 5 6 1 0]) -> 9", "(max [8]) -> 8", "(max [4 5 0 9 7]) -> 9", "(max [7 7 2 0 7]) -> 7", "(max [0 0 4]) -> 4", "(max [2]) -> 2", "(max [2 3 7 5]) -> 7", "(max [2]) -> 2"], "time": 6.163375}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2]) -> 2", "(max [4]) -> 4", "(max [6 3 1 3]) -> 6", "(max [5 9 6 6 7]) -> 9", "(max [7 0 8 6]) -> 8", "(max [1]) -> 1", "(max [0 0 2 2]) -> 2", "(max [4 2 5]) -> 5", "(max [5]) -> 5", "(max [2 2 0]) -> 2", "(max [4]) -> 4", "(max [8 2 3 8 3]) -> 8", "(max [7 0 0 0]) -> 7", "(max [8 5]) -> 8", "(max [2 0 9 9 6]) -> 9", "(max [9 5]) -> 9", "(max [1 9 6 6 5]) -> 9", "(max [7 3 1 0]) -> 7", "(max [5 5 3 1 2]) -> 5", "(max [1 4 8 9 5]) -> 9", "(max [0 3 2 1]) -> 3", "(max [6]) -> 6", "(max [1 5 4]) -> 5", "(max [1 1 0 6]) -> 6"], "time": 6.50971}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 0 9 3 5]) -> 9", "(max [7 8 0 1]) -> 8", "(max [7 9]) -> 9", "(max [7 3 8 6]) -> 8", "(max [8 4]) -> 8", "(max [3 0 1]) -> 3", "(max [6 1 6 2 0]) -> 6", "(max [5 0 6 2]) -> 6", "(max [2 4 0]) -> 4", "(max [1 4 7]) -> 7", "(max [9 8 3]) -> 9", "(max [9 6 3]) -> 9", "(max [6 1 6]) -> 6", "(max [1]) -> 1", "(max [2]) -> 2", "(max [1 7]) -> 7", "(max [4 8 4 7 3]) -> 8", "(max [3 1 5]) -> 5", "(max [4 1 5 9]) -> 9", "(max [9 9 8 9 9]) -> 9", "(max [7 2 2 5]) -> 7", "(max [8]) -> 8", "(max [4 5 8 7 3]) -> 8", "(max [7 3 6]) -> 7"], "time": 6.783675}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1]) -> 1", "(max [7]) -> 7", "(max [6]) -> 6", "(max [8 5 2 2 0]) -> 8", "(max [6]) -> 6", "(max [8 9]) -> 9", "(max [7]) -> 7", "(max [9 7 4 2]) -> 9", "(max [9 5]) -> 9", "(max [7 6]) -> 7", "(max [4 4 5]) -> 5", "(max [1 6]) -> 6", "(max [6]) -> 6", "(max [2 2 7 1]) -> 7", "(max [0 1 2]) -> 2", "(max [3 9 2]) -> 9", "(max [8 5 6]) -> 8", "(max [5 2]) -> 5", "(max [4 8 1 0]) -> 8", "(max [2 9]) -> 9", "(max [3 6 3]) -> 6", "(max [0 5 4 0]) -> 5", "(max [1 3]) -> 3", "(max [8 9 4 1 7]) -> 9"], "time": 8.111566}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 5 4 6 2]) -> 6", "(max [0]) -> 0", "(max [0 9 3 2]) -> 9", "(max [4 7]) -> 7", "(max [0 0 7 3 8]) -> 8", "(max [8 4]) -> 8", "(max [9 3 4]) -> 9", "(max [8 0 5 5 0]) -> 8", "(max [0 8 0 5 2]) -> 8", "(max [1 9 5 8 4]) -> 9", "(max [8 5 9 5 3]) -> 9", "(max [4 5 6]) -> 6", "(max [1 6]) -> 6", "(max [7 5 1 5 3]) -> 7", "(max [5 3 9 1 2]) -> 9", "(max [1 8 3 0]) -> 8", "(max [9 0]) -> 9", "(max [6]) -> 6", "(max [0 6 9 5]) -> 9", "(max [5 2 9 6]) -> 9", "(max [8 4 0]) -> 8", "(max [5 2 0 4]) -> 5", "(max [3 4 9 0 7]) -> 9", "(max [3 8]) -> 8"], "time": 8.129416}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0]) -> 0", "(max [2]) -> 2", "(max [0 8]) -> 8", "(max [5]) -> 5", "(max [6]) -> 6", "(max [6 1 4 3]) -> 6", "(max [9 5]) -> 9", "(max [1 5 1]) -> 5", "(max [5 4 4 8]) -> 8", "(max [3 9 1 1 4]) -> 9", "(max [5 5]) -> 5", "(max [9 1 3 6 5]) -> 9", "(max [2 4]) -> 4", "(max [1 8 9 8 8]) -> 9", "(max [8 4 3]) -> 8", "(max [5 2 4]) -> 5", "(max [6]) -> 6", "(max [4]) -> 4", "(max [9 1]) -> 9", "(max [8 1 5 4]) -> 8", "(max [3 2]) -> 3", "(max [3 3 6]) -> 6", "(max [4 5 2 3]) -> 5", "(max [1 3 1 1]) -> 3"], "time": 8.594263}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3]) -> 3", "(max [4 0]) -> 4", "(max [7]) -> 7", "(max [3 5]) -> 5", "(max [3 6 1 8 1]) -> 8", "(max [9]) -> 9", "(max [8 2 2]) -> 8", "(max [8]) -> 8", "(max [9 0 7 2]) -> 9", "(max [5]) -> 5", "(max [0 6 2 2 0]) -> 6", "(max [2 0 0 1]) -> 2", "(max [9 7 6 0]) -> 9", "(max [9 0]) -> 9", "(max [1 8]) -> 8", "(max [8 9]) -> 9", "(max [7 1 8 0 1]) -> 8", "(max [1 8 6 0 4]) -> 8", "(max [0 3]) -> 3", "(max [3 0]) -> 3", "(max [3]) -> 3", "(max [1 2 2 0]) -> 2", "(max [2 7 1 7]) -> 7", "(max [0 1 6]) -> 6"], "time": 9.816872}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 9 8 5]) -> 9", "(max [8 0 7]) -> 8", "(max [7 0 3]) -> 7", "(max [7]) -> 7", "(max [3 5 1]) -> 5", "(max [2 9]) -> 9", "(max [3 2 9]) -> 9", "(max [2 7]) -> 7", "(max [7 8 9 8]) -> 9", "(max [0 3 8 5]) -> 8", "(max [3]) -> 3", "(max [5 1 0 2 5]) -> 5", "(max [7 8]) -> 8", "(max [1]) -> 1", "(max [8 5 6 8]) -> 8", "(max [4 2 8 3]) -> 8", "(max [8 1 2]) -> 8", "(max [7 6 9]) -> 9", "(max [3 4 3 6 5]) -> 6", "(max [3 4 1 5 6]) -> 6", "(max [8 2 9 7]) -> 9", "(max [2 7 7]) -> 7", "(max [3]) -> 3", "(max [0 7 0 2 1]) -> 7"], "time": 10.812777}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 3]) -> 4", "(max [6 3 4 3 7]) -> 7", "(max [3]) -> 3", "(max [0]) -> 0", "(max [8 7 7]) -> 8", "(max [7]) -> 7", "(max [5 1 5 0 4]) -> 5", "(max [1 0 3]) -> 3", "(max [7 7 3]) -> 7", "(max [7 1 7]) -> 7", "(max [1 0]) -> 1", "(max [8 1 0 8]) -> 8", "(max [7 2 2 2 1]) -> 7", "(max [4]) -> 4", "(max [9 9 4 1 1]) -> 9", "(max [2]) -> 2", "(max [5 8 9 5 6]) -> 9", "(max [9 5 8 7 7]) -> 9", "(max [6]) -> 6", "(max [0 5 0 5]) -> 5", "(max [2 8 4]) -> 8", "(max [9 1 6 9]) -> 9", "(max [0 5 2 8]) -> 8", "(max [3]) -> 3"], "time": 10.772087}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 8 5 6]) -> 8", "(max [9 9]) -> 9", "(max [4]) -> 4", "(max [2 0 2]) -> 2", "(max [9 4]) -> 9", "(max [2 8]) -> 8", "(max [9]) -> 9", "(max [6 8 5]) -> 8", "(max [7 2 0 9]) -> 9", "(max [9 8]) -> 9", "(max [1]) -> 1", "(max [3 3 3]) -> 3", "(max [5 1 7]) -> 7", "(max [5 5]) -> 5", "(max [8 8 3]) -> 8", "(max [1]) -> 1", "(max [0 8 2 9]) -> 9", "(max [9 9 1]) -> 9", "(max [4 0]) -> 4", "(max [0]) -> 0", "(max [6 3 7 5 7]) -> 7", "(max [4 0 5 9 9]) -> 9", "(max [1 7]) -> 7", "(max [5 1 8 6]) -> 8"], "time": 10.993277}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 7 4 5]) -> 7", "(max [0 3 9 2]) -> 9", "(max [7 0]) -> 7", "(max [0]) -> 0", "(max [3 5 5]) -> 5", "(max [7 9 2 9 9]) -> 9", "(max [8 1 4 4 5]) -> 8", "(max [2 8 1 6 4]) -> 8", "(max [7 5]) -> 7", "(max [7 6 6 3]) -> 7", "(max [8 5]) -> 8", "(max [4]) -> 4", "(max [1 7 3 5 8]) -> 8", "(max [7 5]) -> 7", "(max [1]) -> 1", "(max [9 7 8 6]) -> 9", "(max [6 1 5]) -> 6", "(max [4 3 2 7]) -> 7", "(max [9 6 5 4 8]) -> 9", "(max [3 9]) -> 9", "(max [4]) -> 4", "(max [8 4 0 2]) -> 8", "(max [9 9]) -> 9", "(max [6 0 2 3 2]) -> 6"], "time": 11.333228}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6]) -> 6", "(max [9 8]) -> 9", "(max [6]) -> 6", "(max [5 3 8]) -> 8", "(max [6 6 5 3 2]) -> 6", "(max [2]) -> 2", "(max [6 9 2 9 3]) -> 9", "(max [1 6 3 6 7]) -> 7", "(max [9 8 3 2]) -> 9", "(max [8 4]) -> 8", "(max [3 5]) -> 5", "(max [9 0 7]) -> 9", "(max [7 6]) -> 7", "(max [4 0 5 2 4]) -> 5", "(max [1 3 4 7]) -> 7", "(max [3 1 5 4 2]) -> 5", "(max [6 7 7]) -> 7", "(max [7 5 8 2 4]) -> 8", "(max [5 7 0]) -> 7", "(max [1 3 7]) -> 7", "(max [0 2 2 8 2]) -> 8", "(max [1 5]) -> 5", "(max [7 1 4]) -> 7", "(max [6 2 7 5 9]) -> 9"], "time": 11.292374}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 4 6]) -> 9", "(max [0 2 9 8]) -> 9", "(max [9 3 5 7]) -> 9", "(max [7]) -> 7", "(max [7 3]) -> 7", "(max [7 4 6]) -> 7", "(max [4 4 3 4 2]) -> 4", "(max [4 9 5 2 7]) -> 9", "(max [7]) -> 7", "(max [1 7 8 9]) -> 9", "(max [5 4]) -> 5", "(max [6]) -> 6", "(max [4 4 2 0 0]) -> 4", "(max [0 9 7]) -> 9", "(max [4 3 0 1 6]) -> 6", "(max [6]) -> 6", "(max [1 0]) -> 1", "(max [6 4 7]) -> 7", "(max [2 0 9 5 6]) -> 9", "(max [3]) -> 3", "(max [6 1 6 4]) -> 6", "(max [5]) -> 5", "(max [8]) -> 8", "(max [1 6 6 0]) -> 6"], "time": 11.630566}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 2 0 2]) -> 4", "(max [7]) -> 7", "(max [8 5 9 0 1]) -> 9", "(max [6 0 1]) -> 6", "(max [9 7]) -> 9", "(max [7 7 3 7]) -> 7", "(max [1 7 6 1 2]) -> 7", "(max [2 6 1 9 2]) -> 9", "(max [9 9 1 7]) -> 9", "(max [1 8 4 2 5]) -> 8", "(max [7 3]) -> 7", "(max [3]) -> 3", "(max [5 0 8]) -> 8", "(max [5 2 6 6 8]) -> 8", "(max [0 1 8 9]) -> 9", "(max [3]) -> 3", "(max [1 0 3]) -> 3", "(max [2 0 6 0]) -> 6", "(max [3 6 9 6]) -> 9", "(max [2 7 9 3]) -> 9", "(max [1 5 2 2 5]) -> 5", "(max [5 3 4 6 5]) -> 6", "(max [0 0 3]) -> 3", "(max [0 2]) -> 2"], "time": 11.703609}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 8 0 1]) -> 8", "(max [8 1 8 3 8]) -> 8", "(max [6 2]) -> 6", "(max [4 3]) -> 4", "(max [1 1 4 4]) -> 4", "(max [3 2]) -> 3", "(max [3 2 7]) -> 7", "(max [9]) -> 9", "(max [6 0]) -> 6", "(max [4 1 3 8]) -> 8", "(max [9 7]) -> 9", "(max [4]) -> 4", "(max [5 1 0 8 2]) -> 8", "(max [8 8 7 5]) -> 8", "(max [4 0 9 8 0]) -> 9", "(max [2 2 7 5]) -> 7", "(max [0 1 3 2 5]) -> 5", "(max [1]) -> 1", "(max [1 8 2]) -> 8", "(max [0 0]) -> 0", "(max [2 0 8 8 3]) -> 8", "(max [4 5 1 6]) -> 6", "(max [7 6 1 5 3]) -> 7", "(max [2 9]) -> 9"], "time": 5.160583}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 3 0 8 8]) -> 8", "(max [3 1 0 0 8]) -> 8", "(max [8 7 4]) -> 8", "(max [6]) -> 6", "(max [2 1 4 4]) -> 4", "(max [1 7 7 0 4]) -> 7", "(max [8 3 6 3]) -> 8", "(max [9]) -> 9", "(max [7 6 7 8]) -> 8", "(max [7 4 6 3]) -> 7", "(max [7 3]) -> 7", "(max [5 3 2 7]) -> 7", "(max [9 3 9]) -> 9", "(max [0 1 6 6]) -> 6", "(max [8 4 2 0]) -> 8", "(max [1 2 9 5 5]) -> 9", "(max [0 5]) -> 5", "(max [5 9 2]) -> 9", "(max [9 1 5]) -> 9", "(max [4 5 7 1]) -> 7", "(max [4 7]) -> 7", "(max [4 4]) -> 4", "(max [1]) -> 1", "(max [2 0 8 5 1]) -> 8"], "time": 8.988802}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 6 9]) -> 9", "(max [3]) -> 3", "(max [2]) -> 2", "(max [6 0 5 7 8]) -> 8", "(max [8 0 6 2]) -> 8", "(max [2 2]) -> 2", "(max [7 8 2 8 4]) -> 8", "(max [6 1]) -> 6", "(max [6 8]) -> 8", "(max [4 3 2]) -> 4", "(max [6 7 0 7 5]) -> 7", "(max [6 9]) -> 9", "(max [2 5 3]) -> 5", "(max [3 1 0]) -> 3", "(max [1 3 5 4]) -> 5", "(max [1 0]) -> 1", "(max [6 2 5 8]) -> 8", "(max [6 7 2 6]) -> 7", "(max [7 4 2]) -> 7", "(max [9 7]) -> 9", "(max [3 8 8]) -> 8", "(max [6 8 5 6 4]) -> 8", "(max [8 3 4]) -> 8", "(max [5 0]) -> 5"], "time": 6.722258}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 4 7]) -> 7", "(max [1 1 7 8]) -> 8", "(max [7 3]) -> 7", "(max [1 5 8]) -> 8", "(max [4 6]) -> 6", "(max [2 8 1 3 8]) -> 8", "(max [8 0 0 4 8]) -> 8", "(max [1]) -> 1", "(max [1 3]) -> 3", "(max [3]) -> 3", "(max [4 8]) -> 8", "(max [3 3]) -> 3", "(max [9 4 3]) -> 9", "(max [6 9 9]) -> 9", "(max [4 4 5]) -> 5", "(max [6 2 4 6 3]) -> 6", "(max [3 4 8 1 1]) -> 8", "(max [7 6 8 0 9]) -> 9", "(max [9 9]) -> 9", "(max [7 8]) -> 8", "(max [7 2 7]) -> 7", "(max [1]) -> 1", "(max [5 4 4 6 8]) -> 8", "(max [5 5 9 6]) -> 9"], "time": 9.567281}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 5 2 8]) -> 8", "(max [9 7 2 7 0]) -> 9", "(max [7 9 7 7 4]) -> 9", "(max [7 3 4 6]) -> 7", "(max [3 5 8 3 8]) -> 8", "(max [3 0]) -> 3", "(max [1]) -> 1", "(max [5 6]) -> 6", "(max [3]) -> 3", "(max [9 4]) -> 9", "(max [3 2 0]) -> 3", "(max [6]) -> 6", "(max [0 9 3 1]) -> 9", "(max [3 6 5 4 3]) -> 6", "(max [2 2]) -> 2", "(max [9 4 9 5]) -> 9", "(max [2 1 8 6 2]) -> 8", "(max [8 9 1]) -> 9", "(max [2 7 2]) -> 7", "(max [8 1 7 4]) -> 8", "(max [6 1 0]) -> 6", "(max [3 7 8]) -> 8", "(max [2 7 1 8 9]) -> 9", "(max [7]) -> 7"], "time": 9.957874}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 1]) -> 1", "(max [6]) -> 6", "(max [9 4 8]) -> 9", "(max [1 9 0 1]) -> 9", "(max [9]) -> 9", "(max [1 3]) -> 3", "(max [0 8]) -> 8", "(max [9 2 4]) -> 9", "(max [8 2 8 5]) -> 8", "(max [3 7 1 9]) -> 9", "(max [1 2 0 6]) -> 6", "(max [3 0]) -> 3", "(max [8 5 6 5 9]) -> 9", "(max [6]) -> 6", "(max [8 9 9 6 3]) -> 9", "(max [5 7]) -> 7", "(max [9]) -> 9", "(max [0 3 9]) -> 9", "(max [2 7 1 8 3]) -> 8", "(max [1 9 9]) -> 9", "(max [4 5 0]) -> 5", "(max [0 9 1 1 8]) -> 9", "(max [1 3]) -> 3", "(max [6 1 0]) -> 6"], "time": 6.239035}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 4]) -> 4", "(max [6 7]) -> 7", "(max [3 6 2]) -> 6", "(max [9 6 9]) -> 9", "(max [9 0 3 6]) -> 9", "(max [6 7 4]) -> 7", "(max [5 7 8]) -> 8", "(max [8 9 4 1 4]) -> 9", "(max [4]) -> 4", "(max [2 2 1 0]) -> 2", "(max [5]) -> 5", "(max [4 4 5 2]) -> 5", "(max [2 2 1]) -> 2", "(max [8]) -> 8", "(max [1 0]) -> 1", "(max [1 1 9]) -> 9", "(max [0]) -> 0", "(max [6 9 4 5 1]) -> 9", "(max [9 6 8 2]) -> 9", "(max [0 3 9 0 1]) -> 9", "(max [6 8]) -> 8", "(max [7 6 3 3]) -> 7", "(max [1 5 2 7 6]) -> 7", "(max [1 8 8]) -> 8"], "time": 9.670655}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 3 4]) -> 4", "(max [6 9 0 9 9]) -> 9", "(max [1 3 9]) -> 9", "(max [3]) -> 3", "(max [0 4 2 7 3]) -> 7", "(max [7 6 2]) -> 7", "(max [3 7 5]) -> 7", "(max [7]) -> 7", "(max [0 3 1]) -> 3", "(max [2]) -> 2", "(max [2 2 4 6]) -> 6", "(max [9]) -> 9", "(max [1 7 8 0]) -> 8", "(max [0 9 9 2]) -> 9", "(max [5]) -> 5", "(max [8 5]) -> 8", "(max [9]) -> 9", "(max [8]) -> 8", "(max [0 8 4 9 0]) -> 9", "(max [2 9 3 8]) -> 9", "(max [1 7 2 8]) -> 8", "(max [4]) -> 4", "(max [2 0]) -> 2", "(max [0 0 5]) -> 5"], "time": 8.306676}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 7 6]) -> 7", "(max [5 6 6]) -> 6", "(max [6 1 4]) -> 6", "(max [5 3 1 1 0]) -> 5", "(max [9]) -> 9", "(max [5]) -> 5", "(max [9 0 7 9]) -> 9", "(max [5 5 8 5]) -> 8", "(max [0 9 7 5 2]) -> 9", "(max [4 3 2 0 0]) -> 4", "(max [4 1 3 9]) -> 9", "(max [6 2 2]) -> 6", "(max [2 4 8 5 2]) -> 8", "(max [0 7 0 2]) -> 7", "(max [2]) -> 2", "(max [5 7 2]) -> 7", "(max [3 6 8]) -> 8", "(max [7 9 5 8 6]) -> 9", "(max [4 9 6]) -> 9", "(max [7 1 9 1]) -> 9", "(max [4 0 7 4 5]) -> 7", "(max [5 6 1 7 6]) -> 7", "(max [1 2 0]) -> 2", "(max [5 5 6 2 7]) -> 7"], "time": 7.232266}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 9]) -> 9", "(max [0 1 7 5 1]) -> 7", "(max [4]) -> 4", "(max [3 5]) -> 5", "(max [5 7]) -> 7", "(max [6 0 0]) -> 6", "(max [7 0 1 9]) -> 9", "(max [7 9]) -> 9", "(max [9 0]) -> 9", "(max [4]) -> 4", "(max [4 1 7 1 1]) -> 7", "(max [2 6 3 9]) -> 9", "(max [1 5 5]) -> 5", "(max [2]) -> 2", "(max [3 8 3 3]) -> 8", "(max [4 2 8 1]) -> 8", "(max [7 4 3]) -> 7", "(max [2 8 3 2 6]) -> 8", "(max [0 4]) -> 4", "(max [7]) -> 7", "(max [1]) -> 1", "(max [6 2 3]) -> 6", "(max [3 4 0 3 7]) -> 7", "(max [0 5 5 0]) -> 5"], "time": 6.356635}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2]) -> 2", "(max [2 3]) -> 3", "(max [7 4 5]) -> 7", "(max [5 0 5]) -> 5", "(max [9]) -> 9", "(max [3 4 3 7]) -> 7", "(max [4 3 3 8 8]) -> 8", "(max [7 1]) -> 7", "(max [1 4 4]) -> 4", "(max [7 2]) -> 7", "(max [6]) -> 6", "(max [0]) -> 0", "(max [1 7 4 5 3]) -> 7", "(max [2]) -> 2", "(max [2 2 4]) -> 4", "(max [4 1 7 6 0]) -> 7", "(max [8 9 8]) -> 9", "(max [3 6 4 7 7]) -> 7", "(max [3 2]) -> 3", "(max [6 9 1]) -> 9", "(max [2]) -> 2", "(max [2]) -> 2", "(max [3 4 3 0]) -> 4", "(max [8]) -> 8"], "time": 10.216211}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8]) -> 8", "(max [8 1 0]) -> 8", "(max [3]) -> 3", "(max [0 6 7 5 5]) -> 7", "(max [6 6 7]) -> 7", "(max [8 9 9]) -> 9", "(max [0 8]) -> 8", "(max [2 0]) -> 2", "(max [3 0]) -> 3", "(max [0 9 3]) -> 9", "(max [5 1]) -> 5", "(max [3]) -> 3", "(max [0 2]) -> 2", "(max [8 3 6 6]) -> 8", "(max [7 4 6]) -> 7", "(max [5 5 7]) -> 7", "(max [4]) -> 4", "(max [1 1 3 0 4]) -> 4", "(max [1]) -> 1", "(max [0 8 4 9]) -> 9", "(max [8 7]) -> 8", "(max [0 8 0 1]) -> 8", "(max [3 5 2 8 5]) -> 8", "(max [6]) -> 6"], "time": 7.413119}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 8 6]) -> 8", "(max [3 2 1 5 8]) -> 8", "(max [9 4 9]) -> 9", "(max [7 2 6 0 8]) -> 8", "(max [4 6 8 3 2]) -> 8", "(max [3 9]) -> 9", "(max [8 9]) -> 9", "(max [1 3]) -> 3", "(max [1 4 5 3 5]) -> 5", "(max [3]) -> 3", "(max [5 7 8 1]) -> 8", "(max [6]) -> 6", "(max [4 8 3]) -> 8", "(max [8 7 0 5]) -> 8", "(max [4 7 4 6]) -> 7", "(max [8]) -> 8", "(max [5]) -> 5", "(max [1 9]) -> 9", "(max [0 8]) -> 8", "(max [8 7 7 6 6]) -> 8", "(max [8 6]) -> 8", "(max [3 8 9 6]) -> 9", "(max [7 1]) -> 7", "(max [8 1 9 3]) -> 9"], "time": 7.522928}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 0 6]) -> 6", "(max [7 8 0]) -> 8", "(max [2 5 9 6]) -> 9", "(max [0 0 0 4 7]) -> 7", "(max [1]) -> 1", "(max [8 4 7]) -> 8", "(max [0 4 5 7]) -> 7", "(max [9 9 2]) -> 9", "(max [3 4 3 9 9]) -> 9", "(max [2]) -> 2", "(max [5]) -> 5", "(max [7 5 9 7]) -> 9", "(max [0 4 2 8]) -> 8", "(max [3 2 0]) -> 3", "(max [6 8 3 4]) -> 8", "(max [0 5]) -> 5", "(max [5 4]) -> 5", "(max [3 6]) -> 6", "(max [5 3 4 7]) -> 7", "(max [6]) -> 6", "(max [5 0 6 3]) -> 6", "(max [5 5 9]) -> 9", "(max [9 3 6]) -> 9", "(max [7 8 7 0]) -> 8"], "time": 8.988905}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 4 8]) -> 8", "(max [4 4 5]) -> 5", "(max [2 4]) -> 4", "(max [0 9 2 2]) -> 9", "(max [9 0 3]) -> 9", "(max [0]) -> 0", "(max [0 9 8 9 5]) -> 9", "(max [4 3]) -> 4", "(max [7 5 6 6 0]) -> 7", "(max [6 2]) -> 6", "(max [6 6 0 7 9]) -> 9", "(max [0 7 2]) -> 7", "(max [4 4 8 2 6]) -> 8", "(max [0 5 0 2 6]) -> 6", "(max [5]) -> 5", "(max [0 7]) -> 7", "(max [3 4 2 5 7]) -> 7", "(max [4 5 8 5]) -> 8", "(max [6 0 0 6]) -> 6", "(max [1]) -> 1", "(max [8]) -> 8", "(max [5]) -> 5", "(max [8 3 1]) -> 8", "(max [8]) -> 8"], "time": 9.470496}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 6]) -> 7", "(max [8 2 2 3 1]) -> 8", "(max [3 2 7 3]) -> 7", "(max [4]) -> 4", "(max [4]) -> 4", "(max [8 8]) -> 8", "(max [8 9 1]) -> 9", "(max [5]) -> 5", "(max [7 5 0 2]) -> 7", "(max [1 2]) -> 2", "(max [3 7 3 2 3]) -> 7", "(max [4 8 5 2 8]) -> 8", "(max [4 8 7 3 9]) -> 9", "(max [5 5 2 5]) -> 5", "(max [8 0 3 2 0]) -> 8", "(max [3 0 3]) -> 3", "(max [2 4 6 3]) -> 6", "(max [9 4 7 0]) -> 9", "(max [3 4 3 3 2]) -> 4", "(max [8 3]) -> 8", "(max [7 6]) -> 7", "(max [1 5 8]) -> 8", "(max [8 7 6]) -> 8", "(max [5]) -> 5"], "time": 9.005784}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6]) -> 6", "(max [9 3 5 2 3]) -> 9", "(max [9 0]) -> 9", "(max [8]) -> 8", "(max [8 5 0 2]) -> 8", "(max [9 2 7]) -> 9", "(max [8 0 3 4]) -> 8", "(max [8 1]) -> 8", "(max [9 1 8]) -> 9", "(max [7 9 4]) -> 9", "(max [6]) -> 6", "(max [2 4 9]) -> 9", "(max [7 9 1 6]) -> 9", "(max [0]) -> 0", "(max [3 8 3 3 9]) -> 9", "(max [1 2 4 2 1]) -> 4", "(max [7]) -> 7", "(max [0 8]) -> 8", "(max [3 3 6 9 3]) -> 9", "(max [5 0 2 3 6]) -> 6", "(max [1 4 2]) -> 4", "(max [9 0]) -> 9", "(max [0 9]) -> 9", "(max [6 5 9 6 1]) -> 9"], "time": 9.1715}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 5 8]) -> 9", "(max [0 2 5 2 9]) -> 9", "(max [2 1]) -> 2", "(max [4 4 9 3]) -> 9", "(max [2 6 8 7 9]) -> 9", "(max [1 8 9 9]) -> 9", "(max [6]) -> 6", "(max [5 3 3 3]) -> 5", "(max [3 6]) -> 6", "(max [7 9 0 1 6]) -> 9", "(max [8 2]) -> 8", "(max [0 7 6 7 1]) -> 7", "(max [4 4 5 1]) -> 5", "(max [3 9]) -> 9", "(max [6 8]) -> 8", "(max [2]) -> 2", "(max [1 0]) -> 1", "(max [0]) -> 0", "(max [7 8 2 7 9]) -> 9", "(max [6]) -> 6", "(max [5]) -> 5", "(max [9 2 7 1]) -> 9", "(max [5 1]) -> 5", "(max [6 2 7]) -> 7"], "time": 7.8587}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 7 9 0]) -> 9", "(max [5 1 5 5 1]) -> 5", "(max [9]) -> 9", "(max [1 4]) -> 4", "(max [4 6 2 8 2]) -> 8", "(max [5]) -> 5", "(max [0 7 6]) -> 7", "(max [5 8 7 9 4]) -> 9", "(max [9 0]) -> 9", "(max [8 9 7]) -> 9", "(max [2 2]) -> 2", "(max [8 6 3]) -> 8", "(max [7 1 2 6 6]) -> 7", "(max [5 7 4 7 6]) -> 7", "(max [3 6 2 8 9]) -> 9", "(max [9 9 3 9 7]) -> 9", "(max [6 0 0]) -> 6", "(max [4 5 3 5]) -> 5", "(max [3 3]) -> 3", "(max [0 5]) -> 5", "(max [8]) -> 8", "(max [6 6]) -> 6", "(max [0]) -> 0", "(max [2 1 7 6 5]) -> 7"], "time": 7.212596}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 0 6]) -> 6", "(max [9 3 4 6 8]) -> 9", "(max [8 0 0 2]) -> 8", "(max [1 2 8]) -> 8", "(max [2 1 8]) -> 8", "(max [2 9]) -> 9", "(max [8]) -> 8", "(max [0 1 9]) -> 9", "(max [0 0 6 8 7]) -> 8", "(max [7 9 0]) -> 9", "(max [4 2 3]) -> 4", "(max [8 8 6]) -> 8", "(max [7]) -> 7", "(max [6 9 2 6]) -> 9", "(max [7]) -> 7", "(max [8]) -> 8", "(max [1 0 7 1 9]) -> 9", "(max [0 0 2 5]) -> 5", "(max [1 0]) -> 1", "(max [7 0 9 9 0]) -> 9", "(max [3]) -> 3", "(max [2 9]) -> 9", "(max [9 0 2 5 1]) -> 9", "(max [4 3 5 4]) -> 5"], "time": 7.17472}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9]) -> 9", "(max [0 7 1]) -> 7", "(max [6 4 3 4 4]) -> 6", "(max [2 2 5 4 6]) -> 6", "(max [1 9 6 2 9]) -> 9", "(max [1 6 7 4 8]) -> 8", "(max [8]) -> 8", "(max [5 2 0 7 6]) -> 7", "(max [4 7 2 4]) -> 7", "(max [3]) -> 3", "(max [0 8 4 5 1]) -> 8", "(max [9 9 8]) -> 9", "(max [9 0]) -> 9", "(max [3 8 1]) -> 8", "(max [8 8 9 1]) -> 9", "(max [6]) -> 6", "(max [9 8]) -> 9", "(max [0 5 6 6 2]) -> 6", "(max [9]) -> 9", "(max [5 4 1]) -> 5", "(max [5 5 3]) -> 5", "(max [4 8 7]) -> 8", "(max [3]) -> 3", "(max [1 5]) -> 5"], "time": 8.714719}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 0 8]) -> 8", "(max [3 9 1]) -> 9", "(max [8 8 1 3]) -> 8", "(max [9 5]) -> 9", "(max [1 8 5]) -> 8", "(max [7 3 6 1]) -> 7", "(max [0 5 1]) -> 5", "(max [7 4 9 9 8]) -> 9", "(max [2 4 5]) -> 5", "(max [7]) -> 7", "(max [8]) -> 8", "(max [1 5 6 1 6]) -> 6", "(max [5 3 9 3]) -> 9", "(max [7 0]) -> 7", "(max [8 5]) -> 8", "(max [4 5 5 0]) -> 5", "(max [6]) -> 6", "(max [9 5]) -> 9", "(max [3]) -> 3", "(max [8 8 8 1 7]) -> 8", "(max [1 7 9 5]) -> 9", "(max [3 9 2]) -> 9", "(max [0]) -> 0", "(max [7 2 2]) -> 7"], "time": 8.520757}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 7 0 0]) -> 7", "(max [8 9 4 9 6]) -> 9", "(max [1 4 6]) -> 6", "(max [5 0]) -> 5", "(max [6 6 4 0]) -> 6", "(max [9 4 6]) -> 9", "(max [1]) -> 1", "(max [0 3]) -> 3", "(max [2 8 2 1 5]) -> 8", "(max [5 6 1 1]) -> 6", "(max [4 9 7 9 6]) -> 9", "(max [3 0 4 9]) -> 9", "(max [6 8 6 4 3]) -> 8", "(max [8 9 5]) -> 9", "(max [9]) -> 9", "(max [7 8 1 8]) -> 8", "(max [4 8 0]) -> 8", "(max [8 6 8 5 0]) -> 8", "(max [3]) -> 3", "(max [3 1 7 8 6]) -> 8", "(max [2 9 0 3 7]) -> 9", "(max [3 0]) -> 3", "(max [8 5 4]) -> 8", "(max [9 4 8 4 4]) -> 9"], "time": 8.852202}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 3 7 5 1]) -> 7", "(max [7 0]) -> 7", "(max [0 4]) -> 4", "(max [6 4]) -> 6", "(max [2 6 9 5]) -> 9", "(max [3 8 8 2]) -> 8", "(max [8]) -> 8", "(max [8 2]) -> 8", "(max [1 7 6]) -> 7", "(max [8 1 5]) -> 8", "(max [6 4 3]) -> 6", "(max [6 5]) -> 6", "(max [0 1 0 3 9]) -> 9", "(max [9 3]) -> 9", "(max [1 4 2]) -> 4", "(max [0 3]) -> 3", "(max [1]) -> 1", "(max [4 1 7 2 5]) -> 7", "(max [5 2 5 3]) -> 5", "(max [8]) -> 8", "(max [5 9]) -> 9", "(max [7 4 6]) -> 7", "(max [3 7 9]) -> 9", "(max [2 8 6 1]) -> 8"], "time": 8.798361}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 9]) -> 9", "(max [7 0]) -> 7", "(max [2 5]) -> 5", "(max [6 9 7]) -> 9", "(max [7]) -> 7", "(max [4 2 6]) -> 6", "(max [3 8 6 2]) -> 8", "(max [0 2 0]) -> 2", "(max [9 5 3 0]) -> 9", "(max [7 1 5 0 7]) -> 7", "(max [8 2]) -> 8", "(max [5 6 4 1]) -> 6", "(max [5 0]) -> 5", "(max [8]) -> 8", "(max [1]) -> 1", "(max [8 2 8 2 9]) -> 9", "(max [2 1 5 7]) -> 7", "(max [6 1 2 2]) -> 6", "(max [4]) -> 4", "(max [6]) -> 6", "(max [4 4 7]) -> 7", "(max [8]) -> 8", "(max [8 1 3 6]) -> 8", "(max [3 5 0 4 5]) -> 5"], "time": 7.991358}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6]) -> 6", "(max [8 5 8 4]) -> 8", "(max [5 6 2]) -> 6", "(max [2 2]) -> 2", "(max [7 3 1 0]) -> 7", "(max [5]) -> 5", "(max [5 9]) -> 9", "(max [6 4 0 6 4]) -> 6", "(max [2]) -> 2", "(max [8 0]) -> 8", "(max [2]) -> 2", "(max [2]) -> 2", "(max [0 4 9 1]) -> 9", "(max [0 8 4 4]) -> 8", "(max [7 2]) -> 7", "(max [3 7 0]) -> 7", "(max [8 2 9 7]) -> 9", "(max [7]) -> 7", "(max [7 8 7 0 6]) -> 8", "(max [8 9 1 3]) -> 9", "(max [6]) -> 6", "(max [3 6 7 1]) -> 7", "(max [1 4]) -> 4", "(max [9 5 0]) -> 9"], "time": 7.916318}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 3 6]) -> 6", "(max [3 8 9]) -> 9", "(max [3 7]) -> 7", "(max [2 4 8 8 9]) -> 9", "(max [0 1 1]) -> 1", "(max [8 5]) -> 8", "(max [4 7 5]) -> 7", "(max [3 4 3]) -> 4", "(max [3]) -> 3", "(max [0 5 2]) -> 5", "(max [1 2 9]) -> 9", "(max [3 1 5 4 1]) -> 5", "(max [5 0]) -> 5", "(max [4]) -> 4", "(max [5 8 3]) -> 8", "(max [3 9 0]) -> 9", "(max [8]) -> 8", "(max [6 4 1]) -> 6", "(max [5 4 6 3 7]) -> 7", "(max [5 8 4 5 9]) -> 9", "(max [5]) -> 5", "(max [0 4 8 7]) -> 8", "(max [8 6 0]) -> 8", "(max [9 9 9]) -> 9"], "time": 8.012133}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4]) -> 4", "(max [3 9]) -> 9", "(max [9 9 5]) -> 9", "(max [0 6]) -> 6", "(max [0 5 9 4 9]) -> 9", "(max [9]) -> 9", "(max [3]) -> 3", "(max [2]) -> 2", "(max [0 1 0 0]) -> 1", "(max [9 9 1 9]) -> 9", "(max [5 4 0 1 2]) -> 5", "(max [1 6 7 2]) -> 7", "(max [6]) -> 6", "(max [4 6]) -> 6", "(max [1 1]) -> 1", "(max [3 7]) -> 7", "(max [2 5 4 5]) -> 5", "(max [7 6 9 3]) -> 9", "(max [5 9]) -> 9", "(max [5 5 6]) -> 6", "(max [8 3]) -> 8", "(max [2 3 0]) -> 3", "(max [9 5 2 6 7]) -> 9", "(max [1 1 6 9]) -> 9"], "time": 8.002719}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 8 8 6]) -> 8", "(max [7]) -> 7", "(max [6 3 8 6 9]) -> 9", "(max [3 3]) -> 3", "(max [8 1 4 6 7]) -> 8", "(max [5 5 5]) -> 5", "(max [9 9]) -> 9", "(max [4 4 2]) -> 4", "(max [7 6 0 0 6]) -> 7", "(max [8 2]) -> 8", "(max [5 2 0 6 3]) -> 6", "(max [8 5 3 2]) -> 8", "(max [9]) -> 9", "(max [3 5 3 9 5]) -> 9", "(max [3 1 0 3]) -> 3", "(max [7]) -> 7", "(max [1]) -> 1", "(max [1 3]) -> 3", "(max [7 2]) -> 7", "(max [9 6 8]) -> 9", "(max [4 4 3 7 5]) -> 7", "(max [1 7 8 9]) -> 9", "(max [7 8 6 9]) -> 9", "(max [6 4 1]) -> 6"], "time": 8.446747}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 7]) -> 7", "(max [1 7 1]) -> 7", "(max [7 0 1 4]) -> 7", "(max [2]) -> 2", "(max [2 4 8 8 0]) -> 8", "(max [7]) -> 7", "(max [4 2]) -> 4", "(max [0 4]) -> 4", "(max [2 4]) -> 4", "(max [3 9]) -> 9", "(max [8 6]) -> 8", "(max [8 7 6]) -> 8", "(max [2 2]) -> 2", "(max [1 6]) -> 6", "(max [1 2 1 1 4]) -> 4", "(max [6 9 3 5]) -> 9", "(max [3 3 3]) -> 3", "(max [1 7 2 6 7]) -> 7", "(max [3]) -> 3", "(max [4 7 4 1 0]) -> 7", "(max [4]) -> 4", "(max [2 7 3]) -> 7", "(max [9 6 2]) -> 9", "(max [9 8]) -> 9"], "time": 7.664693}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 3]) -> 7", "(max [7 9 4 6 0]) -> 9", "(max [0 1 2 4]) -> 4", "(max [0 5]) -> 5", "(max [7]) -> 7", "(max [1 4 0 9]) -> 9", "(max [2]) -> 2", "(max [5]) -> 5", "(max [2 7 5 2]) -> 7", "(max [8 7 7]) -> 8", "(max [7 6]) -> 7", "(max [4 8 0 2]) -> 8", "(max [9 0]) -> 9", "(max [1 6 9 2]) -> 9", "(max [7 4 3 2 2]) -> 7", "(max [8]) -> 8", "(max [1]) -> 1", "(max [7 2 8 7]) -> 8", "(max [5]) -> 5", "(max [9 4 2]) -> 9", "(max [7]) -> 7", "(max [7 8 0 1 0]) -> 8", "(max [1 3 8 4]) -> 8", "(max [8 2 5 1 7]) -> 8"], "time": 8.373494}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 5 0 7 9]) -> 9", "(max [2 0 2 2]) -> 2", "(max [3]) -> 3", "(max [5 4]) -> 5", "(max [6 8]) -> 8", "(max [3]) -> 3", "(max [5]) -> 5", "(max [8 9]) -> 9", "(max [2]) -> 2", "(max [9]) -> 9", "(max [9 8 8 8 4]) -> 9", "(max [5 2 1 0 4]) -> 5", "(max [7 0 6]) -> 7", "(max [4 6 3 6 6]) -> 6", "(max [9 2 0]) -> 9", "(max [2 3 9 5]) -> 9", "(max [7 1 3]) -> 7", "(max [8 4 8]) -> 8", "(max [3 8 6 0]) -> 8", "(max [4 2 6 6]) -> 6", "(max [2 6 1]) -> 6", "(max [4 5 7 9]) -> 9", "(max [7 3]) -> 7", "(max [7]) -> 7"], "time": 8.428799}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 8]) -> 8", "(max [1]) -> 1", "(max [0 2 7 0]) -> 7", "(max [2]) -> 2", "(max [9 9 5]) -> 9", "(max [3 0 4]) -> 4", "(max [5 6 2 5]) -> 6", "(max [9 2]) -> 9", "(max [5]) -> 5", "(max [2 8 4 9 5]) -> 9", "(max [4]) -> 4", "(max [6 4 7]) -> 7", "(max [4 0]) -> 4", "(max [3 8]) -> 8", "(max [9 7 2 9]) -> 9", "(max [9]) -> 9", "(max [7 2 7 2 2]) -> 7", "(max [4 2]) -> 4", "(max [4 1 3 6 5]) -> 6", "(max [5]) -> 5", "(max [6 5 9]) -> 9", "(max [1 2 4 7]) -> 7", "(max [9 2 5]) -> 9", "(max [1 9]) -> 9"], "time": 9.04378}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 8 7]) -> 8", "(max [4 1 0 9 8]) -> 9", "(max [8 6 4 0 4]) -> 8", "(max [7 5 2 6 5]) -> 7", "(max [2 9 6]) -> 9", "(max [4 1]) -> 4", "(max [8]) -> 8", "(max [8]) -> 8", "(max [9 3 2 3]) -> 9", "(max [7 4 7 8]) -> 8", "(max [6 1 1 0 2]) -> 6", "(max [3 4 7]) -> 7", "(max [8 2]) -> 8", "(max [3]) -> 3", "(max [8 1]) -> 8", "(max [2 7 4]) -> 7", "(max [9]) -> 9", "(max [1 1 9]) -> 9", "(max [5 6]) -> 6", "(max [7 1 1]) -> 7", "(max [4 1]) -> 4", "(max [1 0 0]) -> 1", "(max [9]) -> 9", "(max [5 5]) -> 5"], "time": 8.551301}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9]) -> 9", "(max [3 0 2 2 5]) -> 5", "(max [5]) -> 5", "(max [6 5]) -> 6", "(max [7 9]) -> 9", "(max [1 5 0 6]) -> 6", "(max [5 6 0]) -> 6", "(max [0 1 2 6 6]) -> 6", "(max [9 5 6 1 6]) -> 9", "(max [6 1]) -> 6", "(max [2 8 6 3]) -> 8", "(max [9 4]) -> 9", "(max [3]) -> 3", "(max [2 6 0 3 1]) -> 6", "(max [3 7 8]) -> 8", "(max [8 8]) -> 8", "(max [1 5]) -> 5", "(max [3 2 0]) -> 3", "(max [7]) -> 7", "(max [3 7 5 2]) -> 7", "(max [7 3 4]) -> 7", "(max [0 4 4 2]) -> 4", "(max [1 7 9]) -> 9", "(max [6 4 0 8]) -> 8"], "time": 8.232564}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 5 1 8 8]) -> 8", "(max [1 7 8]) -> 8", "(max [2 2 7]) -> 7", "(max [5 2 4 7]) -> 7", "(max [5 6 3]) -> 6", "(max [1 7 2 3]) -> 7", "(max [1 0 7 8 3]) -> 8", "(max [7 6 6]) -> 7", "(max [4]) -> 4", "(max [1 6]) -> 6", "(max [3 1 0]) -> 3", "(max [7 7 4 8]) -> 8", "(max [6 2 3 9 4]) -> 9", "(max [5 1 3 1]) -> 5", "(max [7 4 3 3 0]) -> 7", "(max [9 0 1]) -> 9", "(max [0 5 9 8]) -> 9", "(max [5 4]) -> 5", "(max [6 7 0]) -> 7", "(max [6]) -> 6", "(max [8]) -> 8", "(max [3 2 5 6]) -> 6", "(max [7 5 6]) -> 7", "(max [0 8 1 7]) -> 8"], "time": 8.171013}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 7 3]) -> 7", "(max [3 6]) -> 6", "(max [5 7 4 7 2]) -> 7", "(max [1]) -> 1", "(max [7 3 2 4]) -> 7", "(max [9 5 6]) -> 9", "(max [2 1]) -> 2", "(max [0 3 0 0]) -> 3", "(max [5 9 9 3]) -> 9", "(max [8 9]) -> 9", "(max [5 9]) -> 9", "(max [3]) -> 3", "(max [7]) -> 7", "(max [0]) -> 0", "(max [0 0 4 3]) -> 4", "(max [6]) -> 6", "(max [9 9 9 1 7]) -> 9", "(max [2]) -> 2", "(max [5 1 1 2]) -> 5", "(max [0 3 0 6 4]) -> 6", "(max [7 1 0 6 4]) -> 7", "(max [7]) -> 7", "(max [4 6 4]) -> 6", "(max [0 9]) -> 9"], "time": 7.024804}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 5 9 7]) -> 9", "(max [7 2]) -> 7", "(max [9 0]) -> 9", "(max [0 9 9]) -> 9", "(max [3 9 8 2]) -> 9", "(max [3]) -> 3", "(max [4 5 0 6 2]) -> 6", "(max [2 0 9]) -> 9", "(max [4 6 9]) -> 9", "(max [0 5 3]) -> 5", "(max [7 1 0 5]) -> 7", "(max [4 0 9 9]) -> 9", "(max [1 4 3 9 7]) -> 9", "(max [9 6 7 2]) -> 9", "(max [3 1 0 5 5]) -> 5", "(max [7 5]) -> 7", "(max [0 4 8 5]) -> 8", "(max [8]) -> 8", "(max [0 4 1]) -> 4", "(max [3 0 4 9 3]) -> 9", "(max [8 4 6 1 7]) -> 8", "(max [8 1 8 3]) -> 8", "(max [6 1 8 9 3]) -> 9", "(max [5 4]) -> 5"], "time": 6.862815}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6]) -> 6", "(max [4 0 5 8 3]) -> 8", "(max [3 5 4 3]) -> 5", "(max [5]) -> 5", "(max [9 6 9]) -> 9", "(max [4 5 4 0 9]) -> 9", "(max [5 7 9 2 8]) -> 9", "(max [6 6 2 0]) -> 6", "(max [0 5 1]) -> 5", "(max [1 1 1 4]) -> 4", "(max [0 3 9 7]) -> 9", "(max [0 1 3 8 7]) -> 8", "(max [7 6 9]) -> 9", "(max [3 3 8 3 0]) -> 8", "(max [7 7 1 3]) -> 7", "(max [1 0 5 8 8]) -> 8", "(max [4 2 3]) -> 4", "(max [1 1]) -> 1", "(max [8 8 7 5]) -> 8", "(max [0 7 8 9 3]) -> 9", "(max [6]) -> 6", "(max [2 5 8]) -> 8", "(max [2 1 8 8]) -> 8", "(max [1 8]) -> 8"], "time": 6.488879}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 3 0 7 5]) -> 7", "(max [9]) -> 9", "(max [0 2 0 4 5]) -> 5", "(max [8 7 4 7]) -> 8", "(max [3]) -> 3", "(max [0 0 6]) -> 6", "(max [6 3 3 8]) -> 8", "(max [6 4 9 8 1]) -> 9", "(max [7]) -> 7", "(max [5 4 7 8]) -> 8", "(max [5 0 1 2 7]) -> 7", "(max [5 4]) -> 5", "(max [6 0 5 0]) -> 6", "(max [4]) -> 4", "(max [2 5]) -> 5", "(max [0 0 0 5 5]) -> 5", "(max [2 7 6 7 7]) -> 7", "(max [5 9]) -> 9", "(max [0 5 8 3 4]) -> 8", "(max [6 2 4 2]) -> 6", "(max [6 6 2 0]) -> 6", "(max [6 7 3]) -> 7", "(max [9 3 7 6]) -> 9", "(max [1 5 2 7 8]) -> 8"], "time": 8.722509}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 7 7 5]) -> 7", "(max [3 0 5]) -> 5", "(max [7 0]) -> 7", "(max [0 8 2 6 7]) -> 8", "(max [4 4]) -> 4", "(max [1 0]) -> 1", "(max [2 2 6 9 5]) -> 9", "(max [5 8 1]) -> 8", "(max [1 7]) -> 7", "(max [4 5]) -> 5", "(max [1 7 9 3]) -> 9", "(max [3 5 7]) -> 7", "(max [3 2 6]) -> 6", "(max [9 9]) -> 9", "(max [0 6]) -> 6", "(max [9 8]) -> 9", "(max [9 3 6]) -> 9", "(max [0 1]) -> 1", "(max [5 5 4]) -> 5", "(max [3 6]) -> 6", "(max [9 8 7 5 2]) -> 9", "(max [4 4 7 0]) -> 7", "(max [4 7 1 7 6]) -> 7", "(max [8 2 7 0 8]) -> 8"], "time": 9.251119}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 9 8 5 1]) -> 9", "(max [5]) -> 5", "(max [5 6 5 0]) -> 6", "(max [4 9 1]) -> 9", "(max [9 6 4]) -> 9", "(max [3 8 7 0 1]) -> 8", "(max [9 8 2 8 8]) -> 9", "(max [0 9 5 4 0]) -> 9", "(max [3 0 1]) -> 3", "(max [3]) -> 3", "(max [8 5 5]) -> 8", "(max [1 3 2 2 3]) -> 3", "(max [3 4 5 5 6]) -> 6", "(max [7]) -> 7", "(max [5 9 9 9 4]) -> 9", "(max [6]) -> 6", "(max [1 6 5 7]) -> 7", "(max [0 0 5 1]) -> 5", "(max [4 0 4 8]) -> 8", "(max [8 2]) -> 8", "(max [8 8]) -> 8", "(max [2 0 7]) -> 7", "(max [0 4 2 5 2]) -> 5", "(max [4 1]) -> 4"], "time": 7.623389}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 8 6 2 9]) -> 9", "(max [4 9]) -> 9", "(max [7 7 4 3]) -> 7", "(max [6 0 5]) -> 6", "(max [7 9]) -> 9", "(max [7 0 8 8 6]) -> 8", "(max [3 8]) -> 8", "(max [3 1]) -> 3", "(max [2 8 6]) -> 8", "(max [0 5 9]) -> 9", "(max [2 2 3]) -> 3", "(max [6 3]) -> 6", "(max [7]) -> 7", "(max [8 2]) -> 8", "(max [2 5 8 9]) -> 9", "(max [6 6 9 5 4]) -> 9", "(max [7 4 1 0 9]) -> 9", "(max [9 4 5]) -> 9", "(max [8 7 6 5]) -> 8", "(max [7]) -> 7", "(max [8 2 2 6]) -> 8", "(max [5 9 5 0]) -> 9", "(max [3 2]) -> 3", "(max [6]) -> 6"], "time": 9.282599}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 6]) -> 7", "(max [4 9 5]) -> 9", "(max [5 7 8 9]) -> 9", "(max [7]) -> 7", "(max [6 7 3 1]) -> 7", "(max [2 3 5 6]) -> 6", "(max [1]) -> 1", "(max [2 8 4 6 3]) -> 8", "(max [9 0 9 8 5]) -> 9", "(max [0]) -> 0", "(max [2 8]) -> 8", "(max [1]) -> 1", "(max [9 8 4]) -> 9", "(max [7 2 1 9 5]) -> 9", "(max [0 0]) -> 0", "(max [1 9]) -> 9", "(max [5 5 0 2 3]) -> 5", "(max [1]) -> 1", "(max [6 4]) -> 6", "(max [4 2]) -> 4", "(max [2 9 9 8]) -> 9", "(max [9]) -> 9", "(max [6 9 6 2 6]) -> 9", "(max [4]) -> 4"], "time": 8.993986}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 5 2 2]) -> 5", "(max [5]) -> 5", "(max [7 6]) -> 7", "(max [9]) -> 9", "(max [9 5]) -> 9", "(max [1 0 8 4]) -> 8", "(max [6]) -> 6", "(max [3 3 8 9]) -> 9", "(max [4 5]) -> 5", "(max [2 8 8 4]) -> 8", "(max [9 9]) -> 9", "(max [0]) -> 0", "(max [3 2]) -> 3", "(max [1 5 6 8]) -> 8", "(max [8 5 4 8 7]) -> 8", "(max [6]) -> 6", "(max [7 2 5 7]) -> 7", "(max [3 0]) -> 3", "(max [5 4]) -> 5", "(max [0 8]) -> 8", "(max [0 8 9]) -> 9", "(max [5 6]) -> 6", "(max [1 9]) -> 9", "(max [1 9 4 9 0]) -> 9"], "time": 8.067876}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 2]) -> 2", "(max [0 7]) -> 7", "(max [3]) -> 3", "(max [3]) -> 3", "(max [0]) -> 0", "(max [1 4 7 8 5]) -> 8", "(max [4 5]) -> 5", "(max [5 9]) -> 9", "(max [3]) -> 3", "(max [9 2 3]) -> 9", "(max [2]) -> 2", "(max [1 1]) -> 1", "(max [3 5]) -> 5", "(max [2]) -> 2", "(max [5]) -> 5", "(max [5 4 6]) -> 6", "(max [6 2 8 3]) -> 8", "(max [7 0 6 5 0]) -> 7", "(max [5 6 1]) -> 6", "(max [3]) -> 3", "(max [9 5]) -> 9", "(max [5 6 2]) -> 6", "(max [5 7 2]) -> 7", "(max [7 9 8 5]) -> 9"], "time": 8.508458}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 3 4 1 4]) -> 4", "(max [7 4 2 9]) -> 9", "(max [0 4 8 8 2]) -> 8", "(max [1 2]) -> 2", "(max [5 6]) -> 6", "(max [9 7 7 3 8]) -> 9", "(max [7]) -> 7", "(max [2 9 8]) -> 9", "(max [5 6 6 5]) -> 6", "(max [1 2 6 4]) -> 6", "(max [9 6 8 6 7]) -> 9", "(max [8 0]) -> 8", "(max [7 5 3 8 2]) -> 8", "(max [5]) -> 5", "(max [5 9 7 6]) -> 9", "(max [8]) -> 8", "(max [4 4 5 1]) -> 5", "(max [4 9 1]) -> 9", "(max [8]) -> 8", "(max [3 8]) -> 8", "(max [4]) -> 4", "(max [9 5]) -> 9", "(max [5 8 4 0 9]) -> 9", "(max [2 4]) -> 4"], "time": 8.677788}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 6 9 7]) -> 9", "(max [9]) -> 9", "(max [4 9 4 6 4]) -> 9", "(max [1 8]) -> 8", "(max [4]) -> 4", "(max [1]) -> 1", "(max [5]) -> 5", "(max [4]) -> 4", "(max [9 8 6]) -> 9", "(max [9 0 3 9 5]) -> 9", "(max [2]) -> 2", "(max [2 1 6]) -> 6", "(max [6]) -> 6", "(max [6 3]) -> 6", "(max [9 3 3 6 2]) -> 9", "(max [6 9 4 1 0]) -> 9", "(max [6 4 2]) -> 6", "(max [2 0]) -> 2", "(max [2]) -> 2", "(max [0 0]) -> 0", "(max [9 4]) -> 9", "(max [6 3 3 5 7]) -> 7", "(max [7 0 0 5 2]) -> 7", "(max [9 5 8]) -> 9"], "time": 9.888773}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 2]) -> 3", "(max [0 4 5]) -> 5", "(max [3 2]) -> 3", "(max [1 5 7 7 4]) -> 7", "(max [5 1]) -> 5", "(max [7 9 8 9]) -> 9", "(max [2 7 2]) -> 7", "(max [1 4]) -> 4", "(max [0 1 8]) -> 8", "(max [7 1 7 5]) -> 7", "(max [0 2 8 4]) -> 8", "(max [8 5 1 5 3]) -> 8", "(max [2 8 7]) -> 8", "(max [3 4]) -> 4", "(max [5 3]) -> 5", "(max [9 4 5]) -> 9", "(max [2 8 2 6 3]) -> 8", "(max [3 1 8 8]) -> 8", "(max [7 6]) -> 7", "(max [0 5 3 6]) -> 6", "(max [9 4 0 7]) -> 9", "(max [1]) -> 1", "(max [1 2]) -> 2", "(max [5]) -> 5"], "time": 6.091691}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 0 5 6]) -> 6", "(max [3 9 1 4 7]) -> 9", "(max [4 0 2]) -> 4", "(max [8 0 6 4]) -> 8", "(max [3 9 4 5]) -> 9", "(max [9 7 1]) -> 9", "(max [7]) -> 7", "(max [8 0 7]) -> 8", "(max [8 3 2 8]) -> 8", "(max [2 8 3 5]) -> 8", "(max [1 2 0 5 3]) -> 5", "(max [6 8 9 1]) -> 9", "(max [6]) -> 6", "(max [3 5 4 0]) -> 5", "(max [6 8 8]) -> 8", "(max [1 2 7 5]) -> 7", "(max [2 7 6 7 9]) -> 9", "(max [6 8 1]) -> 8", "(max [7]) -> 7", "(max [1 1]) -> 1", "(max [7 1 2]) -> 7", "(max [4 6 4 6 9]) -> 9", "(max [3 1]) -> 3", "(max [2 0 1 2 0]) -> 2"], "time": 8.716911}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9]) -> 9", "(max [6 2 8 3]) -> 8", "(max [0]) -> 0", "(max [2 2]) -> 2", "(max [9 6 7 0]) -> 9", "(max [7 6]) -> 7", "(max [4 0 9]) -> 9", "(max [4 9 6 2]) -> 9", "(max [1]) -> 1", "(max [4 3]) -> 4", "(max [1 4 7 6 3]) -> 7", "(max [9 0 2 3]) -> 9", "(max [8 2 7 1 1]) -> 8", "(max [7 0 7 3 6]) -> 7", "(max [2 5 7 9]) -> 9", "(max [5 3 4 0 1]) -> 5", "(max [5]) -> 5", "(max [5]) -> 5", "(max [0]) -> 0", "(max [8 0]) -> 8", "(max [4 2 5]) -> 5", "(max [6 1 5 4 0]) -> 6", "(max [2 1]) -> 2", "(max [2 2 1 5]) -> 5"], "time": 6.41052}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0]) -> 0", "(max [9 6 0 7]) -> 9", "(max [6]) -> 6", "(max [9 7 8 4 8]) -> 9", "(max [5 2 2 9 9]) -> 9", "(max [1 3 6]) -> 6", "(max [7 7]) -> 7", "(max [5 1 2]) -> 5", "(max [8]) -> 8", "(max [2 0 8 1]) -> 8", "(max [7 8]) -> 8", "(max [1 9 8 6 8]) -> 9", "(max [2]) -> 2", "(max [2 2 8 2]) -> 8", "(max [5 0 5 6 0]) -> 6", "(max [1 3]) -> 3", "(max [8 1]) -> 8", "(max [0 7 3 6]) -> 7", "(max [7 8 1]) -> 8", "(max [3 5]) -> 5", "(max [8 1 6]) -> 8", "(max [7 4 0 7]) -> 7", "(max [8]) -> 8", "(max [9 1]) -> 9"], "time": 7.635687}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 4]) -> 4", "(max [4]) -> 4", "(max [1]) -> 1", "(max [7 4]) -> 7", "(max [2 0 3]) -> 3", "(max [4 7 4]) -> 7", "(max [6 7 1 1]) -> 7", "(max [4 1]) -> 4", "(max [4]) -> 4", "(max [3]) -> 3", "(max [5 6 1 6]) -> 6", "(max [0]) -> 0", "(max [4]) -> 4", "(max [0 6]) -> 6", "(max [1 3]) -> 3", "(max [0 1 7 7 2]) -> 7", "(max [7 3]) -> 7", "(max [3 7]) -> 7", "(max [9 7 5 3]) -> 9", "(max [6 0 1 1]) -> 6", "(max [6]) -> 6", "(max [1]) -> 1", "(max [9 2 6 3 0]) -> 9", "(max [1]) -> 1"], "time": 6.993023}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 5 0 4]) -> 5", "(max [6 5 8 8 6]) -> 8", "(max [3 2 4 0]) -> 4", "(max [1]) -> 1", "(max [1 7 9 8 0]) -> 9", "(max [8]) -> 8", "(max [9 8 8]) -> 9", "(max [9 0]) -> 9", "(max [9 8 5 0 3]) -> 9", "(max [7]) -> 7", "(max [3 4]) -> 4", "(max [9 3]) -> 9", "(max [6 4 0 6]) -> 6", "(max [2 5 4 5]) -> 5", "(max [7]) -> 7", "(max [0 6 7 6]) -> 7", "(max [8 7 9]) -> 9", "(max [0 7 4 2 8]) -> 8", "(max [4 8]) -> 8", "(max [3 4 5]) -> 5", "(max [7 3 7]) -> 7", "(max [3]) -> 3", "(max [3 5 2 0]) -> 5", "(max [4 4 0]) -> 4"], "time": 9.006461}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 6 0]) -> 7", "(max [1 6 8 9 1]) -> 9", "(max [2 4]) -> 4", "(max [0 7 9 8]) -> 9", "(max [4 7 2 0 0]) -> 7", "(max [9 8 5 3 0]) -> 9", "(max [3 2 8 8]) -> 8", "(max [9 9]) -> 9", "(max [5 1 9 6]) -> 9", "(max [6 7 1]) -> 7", "(max [8 8 5 3 8]) -> 8", "(max [0 9]) -> 9", "(max [3 7 4 0 7]) -> 7", "(max [2]) -> 2", "(max [2]) -> 2", "(max [6 7 2]) -> 7", "(max [2 5 8]) -> 8", "(max [4]) -> 4", "(max [3 6 1 1 6]) -> 6", "(max [1 3 8 1 3]) -> 8", "(max [0 2 7 9 3]) -> 9", "(max [8 2 6]) -> 8", "(max [6 8 4 5]) -> 8", "(max [0 4 0 6 8]) -> 8"], "time": 10.179665}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 6 1]) -> 9", "(max [1 2]) -> 2", "(max [3 7 3]) -> 7", "(max [7]) -> 7", "(max [0 1 3]) -> 3", "(max [9 7 4]) -> 9", "(max [8 9 1 3 0]) -> 9", "(max [7 6]) -> 7", "(max [1]) -> 1", "(max [1 9 4]) -> 9", "(max [6 1 5 4]) -> 6", "(max [4 1 2 1]) -> 4", "(max [7 7 9]) -> 9", "(max [2 2]) -> 2", "(max [2]) -> 2", "(max [0 4 5 0]) -> 5", "(max [1 9 0]) -> 9", "(max [4 6 8 2]) -> 8", "(max [6]) -> 6", "(max [5 3 6 6 4]) -> 6", "(max [8 0 1 7]) -> 8", "(max [4 8 1]) -> 8", "(max [7 5]) -> 7", "(max [4 4 2 5]) -> 5"], "time": 9.432562}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 1 2 7]) -> 7", "(max [8 1 1 2]) -> 8", "(max [0 5]) -> 5", "(max [8 6]) -> 8", "(max [1]) -> 1", "(max [8 9 3 7 4]) -> 9", "(max [6 6 9 5 2]) -> 9", "(max [8 0 5 2 6]) -> 8", "(max [3 5]) -> 5", "(max [8 4]) -> 8", "(max [1 7 9 3]) -> 9", "(max [8 1]) -> 8", "(max [2]) -> 2", "(max [6 3]) -> 6", "(max [2 7 3 7 9]) -> 9", "(max [0 4]) -> 4", "(max [0 5 9 3 7]) -> 9", "(max [3 3]) -> 3", "(max [8 5 7]) -> 8", "(max [6 5 9 0]) -> 9", "(max [7 3 0 7]) -> 7", "(max [2]) -> 2", "(max [2 1]) -> 2", "(max [2 6 9 8 8]) -> 9"], "time": 9.092257}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 2 8 6 0]) -> 8", "(max [0]) -> 0", "(max [3]) -> 3", "(max [5 6 9 7]) -> 9", "(max [0 2 5]) -> 5", "(max [2]) -> 2", "(max [9 3]) -> 9", "(max [2 1 3 6 3]) -> 6", "(max [0 4 7 7 4]) -> 7", "(max [3 7 1 3 5]) -> 7", "(max [4 6]) -> 6", "(max [3 8 3 1 2]) -> 8", "(max [8 6 0 1 9]) -> 9", "(max [5 5 5 8]) -> 8", "(max [4 5]) -> 5", "(max [0 1 2]) -> 2", "(max [1 5 9 4 6]) -> 9", "(max [4 0 5]) -> 5", "(max [8 4 5 0]) -> 8", "(max [7 5 9 9]) -> 9", "(max [4 9 5]) -> 9", "(max [9 0]) -> 9", "(max [9 7 4]) -> 9", "(max [8 6 3 1 6]) -> 8"], "time": 9.550482}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 4 1]) -> 9", "(max [2]) -> 2", "(max [2]) -> 2", "(max [2]) -> 2", "(max [2]) -> 2", "(max [9 3 5 4]) -> 9", "(max [2 0 9 9]) -> 9", "(max [9 7]) -> 9", "(max [1 3 4 0 2]) -> 4", "(max [1 6 3]) -> 6", "(max [2 6]) -> 6", "(max [0 5]) -> 5", "(max [8 7 7 5]) -> 8", "(max [7 7]) -> 7", "(max [8 1 1]) -> 8", "(max [2]) -> 2", "(max [1]) -> 1", "(max [6 6 9 0]) -> 9", "(max [2]) -> 2", "(max [9 2 9 3]) -> 9", "(max [6 9 5]) -> 9", "(max [1 8 2 7 6]) -> 8", "(max [6 6 1 4]) -> 6", "(max [7 9 2 1 9]) -> 9"], "time": 7.964462}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 2 7 8 9]) -> 9", "(max [3 6]) -> 6", "(max [4 5 6 2 5]) -> 6", "(max [7]) -> 7", "(max [1 5 3 1]) -> 5", "(max [6]) -> 6", "(max [4 6 5 9 9]) -> 9", "(max [3 6 0]) -> 6", "(max [9]) -> 9", "(max [4 3 7 9 2]) -> 9", "(max [7]) -> 7", "(max [0 8 7 9]) -> 9", "(max [4 8 9 8]) -> 9", "(max [3]) -> 3", "(max [4 0 3 6 9]) -> 9", "(max [7 3 6 0 4]) -> 7", "(max [6 9 9 0 8]) -> 9", "(max [7 8]) -> 8", "(max [8 4 8 3 5]) -> 8", "(max [8 5 9 5]) -> 9", "(max [1 3 8 9]) -> 9", "(max [2 5 0 9]) -> 9", "(max [0]) -> 0", "(max [6 8 1 8]) -> 8"], "time": 8.702332}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 7 8 6]) -> 8", "(max [6 9 1 8]) -> 9", "(max [2 8 7 1]) -> 8", "(max [9 0 8 1]) -> 9", "(max [9 7]) -> 9", "(max [3 8 0 4 1]) -> 8", "(max [9 1 9]) -> 9", "(max [7 6]) -> 7", "(max [7 4]) -> 7", "(max [9 2]) -> 9", "(max [7 2 3 4 6]) -> 7", "(max [3]) -> 3", "(max [6 4]) -> 6", "(max [0 9]) -> 9", "(max [1 8 8]) -> 8", "(max [4 1 6 4]) -> 6", "(max [8 2]) -> 8", "(max [7 8 8]) -> 8", "(max [0 9 6 6]) -> 9", "(max [0 0]) -> 0", "(max [9 6 0 3 2]) -> 9", "(max [2 0 3]) -> 3", "(max [7]) -> 7", "(max [9 0 9 5]) -> 9"], "time": 6.953722}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 2]) -> 8", "(max [5 9]) -> 9", "(max [9 3 2]) -> 9", "(max [1 6]) -> 6", "(max [7 9]) -> 9", "(max [2 6]) -> 6", "(max [9 2]) -> 9", "(max [6 4 5 5 7]) -> 7", "(max [4 2 5 6 3]) -> 6", "(max [5 9]) -> 9", "(max [0]) -> 0", "(max [3]) -> 3", "(max [8 5 4 2]) -> 8", "(max [2 6]) -> 6", "(max [8 4]) -> 8", "(max [9 7 2 8]) -> 9", "(max [9 8 2 6 0]) -> 9", "(max [0]) -> 0", "(max [2 5]) -> 5", "(max [0 4]) -> 4", "(max [1 9 9 2 9]) -> 9", "(max [8 3 0 2]) -> 8", "(max [2]) -> 2", "(max [9 5 9 2]) -> 9"], "time": 8.066997}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 9 8 3 2]) -> 9", "(max [7 5 6 7 5]) -> 7", "(max [7 3]) -> 7", "(max [8 3 3]) -> 8", "(max [8 9 2 6]) -> 9", "(max [6 4 6 9 0]) -> 9", "(max [2 2 2 4 7]) -> 7", "(max [9 9 8 9]) -> 9", "(max [0 8]) -> 8", "(max [4]) -> 4", "(max [2 2 6 4 7]) -> 7", "(max [5 5 4 8 6]) -> 8", "(max [7 4 6 1]) -> 7", "(max [6 6 8 3]) -> 8", "(max [2]) -> 2", "(max [1 2 9 4 9]) -> 9", "(max [9 9]) -> 9", "(max [7 4 9 3]) -> 9", "(max [4 5]) -> 5", "(max [3 0 0]) -> 3", "(max [4 9 7 0 1]) -> 9", "(max [6 5]) -> 6", "(max [2 8]) -> 8", "(max [0 8 5 7 8]) -> 8"], "time": 9.464173}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 8 7 1]) -> 8", "(max [2]) -> 2", "(max [7]) -> 7", "(max [6]) -> 6", "(max [1]) -> 1", "(max [0]) -> 0", "(max [2]) -> 2", "(max [4 5]) -> 5", "(max [1 8 4 7]) -> 8", "(max [4 7 0 0 0]) -> 7", "(max [4 5 3]) -> 5", "(max [4 6 9 9]) -> 9", "(max [6 5]) -> 6", "(max [4 7]) -> 7", "(max [4 2]) -> 4", "(max [0 0 7]) -> 7", "(max [0 6]) -> 6", "(max [6 2 9 8]) -> 9", "(max [4 9 8]) -> 9", "(max [8 4 0 0]) -> 8", "(max [4 3 6]) -> 6", "(max [9]) -> 9", "(max [5 0]) -> 5", "(max [6 3]) -> 6"], "time": 9.723934}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 4]) -> 4", "(max [3]) -> 3", "(max [7 6 2 9]) -> 9", "(max [1 4]) -> 4", "(max [9 5 8 4]) -> 9", "(max [0 7 0 6]) -> 7", "(max [4 3]) -> 4", "(max [3 5 3 9]) -> 9", "(max [9 9 1 0]) -> 9", "(max [1 4]) -> 4", "(max [5 7 9 9]) -> 9", "(max [2 5 8]) -> 8", "(max [0 3 3 7 2]) -> 7", "(max [8 9 1 4]) -> 9", "(max [0 9 3]) -> 9", "(max [3 7 3 3]) -> 7", "(max [8 6]) -> 8", "(max [0 3 1]) -> 3", "(max [7 4 3 4 0]) -> 7", "(max [3]) -> 3", "(max [4 7 8]) -> 8", "(max [9 3 9]) -> 9", "(max [9 5]) -> 9", "(max [8 8]) -> 8"], "time": 9.078341}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 2 1 7 7]) -> 7", "(max [5 4 4 0]) -> 5", "(max [9 7 7 4]) -> 9", "(max [1]) -> 1", "(max [8 2 4]) -> 8", "(max [5 7 0 2]) -> 7", "(max [6 5]) -> 6", "(max [9 9 1 5]) -> 9", "(max [6 0 7]) -> 7", "(max [3]) -> 3", "(max [2 3 3 1 2]) -> 3", "(max [6 4]) -> 6", "(max [4 5]) -> 5", "(max [6]) -> 6", "(max [2 7 2]) -> 7", "(max [7]) -> 7", "(max [9 3 7 9 7]) -> 9", "(max [8 9 2 4 4]) -> 9", "(max [4 1 5]) -> 5", "(max [3 0 8 8 0]) -> 8", "(max [4 4 5]) -> 5", "(max [3 0 2 9]) -> 9", "(max [4 1 9 8 5]) -> 9", "(max [3 4 5 3 5]) -> 5"], "time": 9.026943}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0]) -> 0", "(max [1 6 5 3]) -> 6", "(max [2 2]) -> 2", "(max [0 1 7 2]) -> 7", "(max [8 4 7 8]) -> 8", "(max [2 9 2]) -> 9", "(max [7 7]) -> 7", "(max [7 4]) -> 7", "(max [6 1]) -> 6", "(max [5 8 1 3]) -> 8", "(max [2]) -> 2", "(max [3 6]) -> 6", "(max [0 2 3 1]) -> 3", "(max [1 7 7]) -> 7", "(max [8]) -> 8", "(max [3 6 3 6]) -> 6", "(max [7 0 9 0]) -> 9", "(max [8 8]) -> 8", "(max [0]) -> 0", "(max [2 6]) -> 6", "(max [5]) -> 5", "(max [2 5 0]) -> 5", "(max [1 0 2]) -> 2", "(max [0 6 4 4]) -> 6"], "time": 7.582076}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 9]) -> 9", "(max [8 4 1 6]) -> 8", "(max [6 7]) -> 7", "(max [2 9 7]) -> 9", "(max [4]) -> 4", "(max [7 7 6]) -> 7", "(max [1 5 6 3 5]) -> 6", "(max [2]) -> 2", "(max [9 5 2]) -> 9", "(max [0]) -> 0", "(max [7 8 9 5]) -> 9", "(max [9 7 3 9 2]) -> 9", "(max [5 5]) -> 5", "(max [1 2 2]) -> 2", "(max [2]) -> 2", "(max [5]) -> 5", "(max [2 1 7]) -> 7", "(max [0 5 4]) -> 5", "(max [0 8 2 2]) -> 8", "(max [2]) -> 2", "(max [6 9 9]) -> 9", "(max [4 2 8 6 4]) -> 8", "(max [6 1]) -> 6", "(max [6 8 9 9 6]) -> 9"], "time": 8.138595}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 6 1 6 4]) -> 7", "(max [3 6 3 1 2]) -> 6", "(max [3 3 9 3 2]) -> 9", "(max [3]) -> 3", "(max [8 7 9 2]) -> 9", "(max [3 8 1 3 9]) -> 9", "(max [3 3 5]) -> 5", "(max [4 7 3]) -> 7", "(max [1 4]) -> 4", "(max [5 4 1 0]) -> 5", "(max [0 0 4]) -> 4", "(max [7 8 4]) -> 8", "(max [5]) -> 5", "(max [8 3]) -> 8", "(max [3 4 4]) -> 4", "(max [1]) -> 1", "(max [8 1 1 7]) -> 8", "(max [5 7 0]) -> 7", "(max [5 3 7 9 2]) -> 9", "(max [5]) -> 5", "(max [6]) -> 6", "(max [4 0 1 3 0]) -> 4", "(max [0 4 3]) -> 4", "(max [8 7 9]) -> 9"], "time": 9.337336}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1]) -> 1", "(max [2]) -> 2", "(max [7 3 6 5 5]) -> 7", "(max [4 2 1]) -> 4", "(max [8]) -> 8", "(max [2 4 3 1]) -> 4", "(max [7 8 4]) -> 8", "(max [2 8 9]) -> 9", "(max [9]) -> 9", "(max [9 5]) -> 9", "(max [3 3 4 4 4]) -> 4", "(max [6 2 4 3]) -> 6", "(max [7 1 8]) -> 8", "(max [0 7]) -> 7", "(max [3 6 9 0 4]) -> 9", "(max [7]) -> 7", "(max [6]) -> 6", "(max [2 2 1 4]) -> 4", "(max [4 1 5]) -> 5", "(max [2]) -> 2", "(max [9 9]) -> 9", "(max [8 8]) -> 8", "(max [9 3 6]) -> 9", "(max [9 3 5]) -> 9"], "time": 7.30617}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 9 1 3 6]) -> 9", "(max [6 5 2]) -> 6", "(max [5 6 9 3]) -> 9", "(max [3 8]) -> 8", "(max [1 7 0]) -> 7", "(max [9 7 2]) -> 9", "(max [8 5 1 8 9]) -> 9", "(max [0 9 5 3 9]) -> 9", "(max [5 4 5]) -> 5", "(max [0 7]) -> 7", "(max [7]) -> 7", "(max [9 5]) -> 9", "(max [3 7 3 0 2]) -> 7", "(max [1 6 0]) -> 6", "(max [5 9 3 7]) -> 9", "(max [1]) -> 1", "(max [7]) -> 7", "(max [9 1 5 4 3]) -> 9", "(max [3 2 8 2 8]) -> 8", "(max [4 4 4]) -> 4", "(max [9 3 3]) -> 9", "(max [7 5 5]) -> 7", "(max [0 3 9 5 0]) -> 9", "(max [2 1]) -> 2"], "time": 8.021043}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3]) -> 3", "(max [1]) -> 1", "(max [1 8 7 6]) -> 8", "(max [4]) -> 4", "(max [0 2 4 7 3]) -> 7", "(max [1 5 3 9 3]) -> 9", "(max [6 7 6 6 7]) -> 7", "(max [8 8 7 6 4]) -> 8", "(max [5 7 3]) -> 7", "(max [4]) -> 4", "(max [1]) -> 1", "(max [0 3 2 5 2]) -> 5", "(max [1 0 3 8]) -> 8", "(max [2 5]) -> 5", "(max [7]) -> 7", "(max [4 9 1 4]) -> 9", "(max [6 6 3 3]) -> 6", "(max [4 9 4]) -> 9", "(max [0 2 5 9 1]) -> 9", "(max [2 0]) -> 2", "(max [4]) -> 4", "(max [5 3]) -> 5", "(max [9]) -> 9", "(max [0 1 3]) -> 3"], "time": 7.42103}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7]) -> 7", "(max [7]) -> 7", "(max [5]) -> 5", "(max [0 4 2 1 2]) -> 4", "(max [9 5]) -> 9", "(max [0 6]) -> 6", "(max [4 5]) -> 5", "(max [2 1]) -> 2", "(max [1 0 6 2]) -> 6", "(max [5 3 3 4 5]) -> 5", "(max [7 5 0 5]) -> 7", "(max [9 4 6 7]) -> 9", "(max [2 7 6 5 1]) -> 7", "(max [4 4]) -> 4", "(max [2 8 7]) -> 8", "(max [2]) -> 2", "(max [7 3 5]) -> 7", "(max [7 3 3 3 7]) -> 7", "(max [6 1]) -> 6", "(max [6 6 9 6]) -> 9", "(max [9 4 4 3]) -> 9", "(max [4 9 7 0]) -> 9", "(max [9 8 4 1]) -> 9", "(max [4 2 9 1 1]) -> 9"], "time": 7.052347}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2]) -> 2", "(max [0 1]) -> 1", "(max [4 4]) -> 4", "(max [8 3 5 5]) -> 8", "(max [9]) -> 9", "(max [7 0 3]) -> 7", "(max [4 4 5]) -> 5", "(max [1 7]) -> 7", "(max [6 4]) -> 6", "(max [6]) -> 6", "(max [0 5 4 7]) -> 7", "(max [3]) -> 3", "(max [2]) -> 2", "(max [8 7 9 6]) -> 9", "(max [6]) -> 6", "(max [9 4 2 3 0]) -> 9", "(max [1 0 5 0]) -> 5", "(max [1 8]) -> 8", "(max [4]) -> 4", "(max [5 5 6 5]) -> 6", "(max [5 7]) -> 7", "(max [7 3 0 4]) -> 7", "(max [6]) -> 6", "(max [4 2 4]) -> 4"], "time": 6.039762}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 4 6]) -> 6", "(max [6 2 8]) -> 8", "(max [4 5 3]) -> 5", "(max [7 3 1 1 4]) -> 7", "(max [4 8]) -> 8", "(max [6]) -> 6", "(max [4 9 9]) -> 9", "(max [9 9 1 6 1]) -> 9", "(max [7]) -> 7", "(max [1 5 6 8]) -> 8", "(max [1 4 0 3]) -> 4", "(max [2]) -> 2", "(max [8 2 8 3]) -> 8", "(max [4 4]) -> 4", "(max [7 2 0 5]) -> 7", "(max [6 9 1 5]) -> 9", "(max [3 7 1]) -> 7", "(max [9 6 7]) -> 9", "(max [2 0 2 6 3]) -> 6", "(max [3 1 9 7]) -> 9", "(max [8]) -> 8", "(max [6 9 2]) -> 9", "(max [4 3 0 8]) -> 8", "(max [0 2 8 1]) -> 8"], "time": 8.157687}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 3 5 6 6]) -> 6", "(max [0]) -> 0", "(max [4 5]) -> 5", "(max [4 6 0 5]) -> 6", "(max [8 5]) -> 8", "(max [7 4]) -> 7", "(max [7]) -> 7", "(max [4 8 5 7 4]) -> 8", "(max [5 4]) -> 5", "(max [9 1 9 4 7]) -> 9", "(max [2 5 4 7]) -> 7", "(max [7 1 3 2]) -> 7", "(max [7 3 8 7 4]) -> 8", "(max [9 4 2]) -> 9", "(max [7 6 9 9]) -> 9", "(max [9 7]) -> 9", "(max [4 6]) -> 6", "(max [4 8 8]) -> 8", "(max [4 7 0]) -> 7", "(max [8 3]) -> 8", "(max [3]) -> 3", "(max [2 0 5 0]) -> 5", "(max [4 2]) -> 4", "(max [4 6 6 2 7]) -> 7"], "time": 6.271812}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 8 0 4 0]) -> 8", "(max [2 7]) -> 7", "(max [8]) -> 8", "(max [6]) -> 6", "(max [2 0]) -> 2", "(max [0 7 6 9 7]) -> 9", "(max [7 3]) -> 7", "(max [2 8 7 6 7]) -> 8", "(max [1 6]) -> 6", "(max [5]) -> 5", "(max [0 5 7 9 1]) -> 9", "(max [5]) -> 5", "(max [7 4 9 2]) -> 9", "(max [4 5]) -> 5", "(max [5 0]) -> 5", "(max [7]) -> 7", "(max [9]) -> 9", "(max [6 0 8 2 0]) -> 8", "(max [8 9 7 0 7]) -> 9", "(max [9 4 5]) -> 9", "(max [9 6]) -> 9", "(max [2 3 6 1]) -> 6", "(max [3 1 6 6]) -> 6", "(max [9 2 7 2 8]) -> 9"], "time": 7.139076}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 2 7 3 6]) -> 7", "(max [4 6 6]) -> 6", "(max [3 3]) -> 3", "(max [9 1 3 0]) -> 9", "(max [6 6 0 0 1]) -> 6", "(max [7 4 5 3]) -> 7", "(max [8]) -> 8", "(max [9 0 4 9]) -> 9", "(max [0 1]) -> 1", "(max [4 5 3 0 7]) -> 7", "(max [1 0 2 5 2]) -> 5", "(max [6 9 0 3 4]) -> 9", "(max [7 3]) -> 7", "(max [0 8 2 0 9]) -> 9", "(max [6 7 5]) -> 7", "(max [9 1 6 9]) -> 9", "(max [3 6 6 0 6]) -> 6", "(max [8 8 1 4 9]) -> 9", "(max [8 6]) -> 8", "(max [2 4 2 9]) -> 9", "(max [8 5 4]) -> 8", "(max [0 5 8 0]) -> 8", "(max [5 3 6 1]) -> 6", "(max [8 1 4]) -> 8"], "time": 6.812193}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 8 1 8 7]) -> 8", "(max [0 7]) -> 7", "(max [7 7 9]) -> 9", "(max [2 2 8 8 2]) -> 8", "(max [8 5 4]) -> 8", "(max [4 2]) -> 4", "(max [7]) -> 7", "(max [1]) -> 1", "(max [3 4 8 8]) -> 8", "(max [5 5]) -> 5", "(max [2 9]) -> 9", "(max [9 2]) -> 9", "(max [4 4 0]) -> 4", "(max [2]) -> 2", "(max [6 6 9 6]) -> 9", "(max [0 2 5 3 8]) -> 8", "(max [7 0]) -> 7", "(max [7]) -> 7", "(max [8 2 6 0]) -> 8", "(max [7 3 2 5]) -> 7", "(max [2 7 9 2]) -> 9", "(max [0]) -> 0", "(max [4 2 5 2]) -> 5", "(max [2 9 5 8]) -> 9"], "time": 3.939416}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1]) -> 1", "(max [0 9 9 0 2]) -> 9", "(max [7 0 8]) -> 8", "(max [3 3]) -> 3", "(max [5 2 1 2]) -> 5", "(max [1 2 2 5 1]) -> 5", "(max [1 4 8 7 2]) -> 8", "(max [7]) -> 7", "(max [5]) -> 5", "(max [3 5 0 2 5]) -> 5", "(max [3 8]) -> 8", "(max [4 0]) -> 4", "(max [6 9]) -> 9", "(max [1 5 4]) -> 5", "(max [6 0 7 5]) -> 7", "(max [2 9 6 7]) -> 9", "(max [0 5 2]) -> 5", "(max [7]) -> 7", "(max [1 1 7 7 2]) -> 7", "(max [4 8 5 8]) -> 8", "(max [4]) -> 4", "(max [7 8 6 2 0]) -> 8", "(max [9]) -> 9", "(max [7 8]) -> 8"], "time": 5.651692}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 2 1 8]) -> 8", "(max [4 4 2 3 6]) -> 6", "(max [3]) -> 3", "(max [5 8 7 2]) -> 8", "(max [8 3]) -> 8", "(max [2 2]) -> 2", "(max [3 7 3]) -> 7", "(max [1 1 8 5]) -> 8", "(max [5 1 1]) -> 5", "(max [8]) -> 8", "(max [4 6]) -> 6", "(max [9 3 5 8]) -> 9", "(max [2 9 6 5]) -> 9", "(max [3 8 0]) -> 8", "(max [0]) -> 0", "(max [3 8]) -> 8", "(max [9 2]) -> 9", "(max [9]) -> 9", "(max [4]) -> 4", "(max [7 9 3 9]) -> 9", "(max [4 1]) -> 4", "(max [6 4]) -> 6", "(max [1 0 1]) -> 1", "(max [2 7]) -> 7"], "time": 4.844121}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5]) -> 5", "(max [8]) -> 8", "(max [9]) -> 9", "(max [1 2]) -> 2", "(max [3 4 0 1]) -> 4", "(max [6 1 3]) -> 6", "(max [8]) -> 8", "(max [5 5]) -> 5", "(max [0 7 1]) -> 7", "(max [0]) -> 0", "(max [6 4 3 1 8]) -> 8", "(max [7 7 8]) -> 8", "(max [4 0 9 3 4]) -> 9", "(max [7]) -> 7", "(max [9 4 1]) -> 9", "(max [7 7]) -> 7", "(max [4]) -> 4", "(max [0 0 6]) -> 6", "(max [9 8]) -> 9", "(max [2 5 6 1 6]) -> 6", "(max [3 8]) -> 8", "(max [9 7]) -> 9", "(max [5 9 4]) -> 9", "(max [2 2 1 2 4]) -> 4"], "time": 4.964018}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 9 6 9]) -> 9", "(max [7 2 5]) -> 7", "(max [0 6 5]) -> 6", "(max [3 8 2 3 3]) -> 8", "(max [4 7 1 9]) -> 9", "(max [3 1 7 3 1]) -> 7", "(max [1 5]) -> 5", "(max [5]) -> 5", "(max [3 3 1 8]) -> 8", "(max [9 3 0 4]) -> 9", "(max [4]) -> 4", "(max [2 8 1 6 9]) -> 9", "(max [3 6 5 1]) -> 6", "(max [0 4]) -> 4", "(max [5 3 0]) -> 5", "(max [4 9]) -> 9", "(max [3 2 4]) -> 4", "(max [1 7 6 8]) -> 8", "(max [8 3 8 6 3]) -> 8", "(max [0]) -> 0", "(max [6]) -> 6", "(max [5 8 0 0]) -> 8", "(max [5]) -> 5", "(max [7 4 1]) -> 7"], "time": 5.329747}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0]) -> 0", "(max [0]) -> 0", "(max [2 0 0 9 6]) -> 9", "(max [2]) -> 2", "(max [8 2 4 9]) -> 9", "(max [1 8]) -> 8", "(max [5 6 4 7]) -> 7", "(max [0 4 1 2 6]) -> 6", "(max [2]) -> 2", "(max [7]) -> 7", "(max [3 3 8 4]) -> 8", "(max [1 5 6 2]) -> 6", "(max [7 0]) -> 7", "(max [1 8 7 5]) -> 8", "(max [0 5 4]) -> 5", "(max [1 1 7 3 8]) -> 8", "(max [0 0 0 0 2]) -> 2", "(max [3 9 9 5 7]) -> 9", "(max [1 0 3 6]) -> 6", "(max [7 2 5]) -> 7", "(max [9]) -> 9", "(max [5]) -> 5", "(max [7 3 7]) -> 7", "(max [2 7 4 2]) -> 7"], "time": 5.288621}
