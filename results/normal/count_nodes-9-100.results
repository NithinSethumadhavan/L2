{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {7 {9 {2 {8} {5}}}}) -> 5", "(count_nodes {7 {8}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {9 {6}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {3 {7}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.15613, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {6 {5}}) -> 2", "(count_nodes {3 {7 {5} {1}} {4 {0} {6}}}) -> 7", "(count_nodes {2 {1 {6} {9}} {8 {4} {0}}}) -> 7", "(count_nodes {}) -> 0", "(count_nodes {4 {1 {2}} {9 {2} {8}}}) -> 6", "(count_nodes {8 {8 {3 {3}} {1 {3}}}}) -> 6"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.139462, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {5}) -> 1", "(count_nodes {7 {5} {9 {0}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {2 {3 {8 {3} {6}} {7 {0} {2}}} {5}}) -> 9", "(count_nodes {7 {6 {4}}}) -> 3", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.202971, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {4}}) -> 2", "(count_nodes {6 {3 {2} {2}} {0 {4}}}) -> 6", "(count_nodes {8 {3 {2 {4} {6}} {7 {0}}}}) -> 7", "(count_nodes {8}) -> 1", "(count_nodes {0}) -> 1", "(count_nodes {2 {0}}) -> 2", "(count_nodes {1 {3 {3 {0}} {6}}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.173174, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {5 {4 {5 {4}}} {2 {1 {8}} {8 {6}}}}) -> 9", "(count_nodes {2}) -> 1", "(count_nodes {5 {4}}) -> 2", "(count_nodes {4}) -> 1", "(count_nodes {0 {4}}) -> 2", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.174529, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {9} {3}}) -> 3", "(count_nodes {9 {5}}) -> 2", "(count_nodes {8 {2 {8}} {6}}) -> 4", "(count_nodes {5}) -> 1", "(count_nodes {9 {2} {6 {0} {3}}}) -> 5", "(count_nodes {3 {1} {0}}) -> 3", "(count_nodes {1}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.105157, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {4 {0} {2 {9 {4}}}}) -> 5", "(count_nodes {6 {1 {6 {7}} {0 {9} {5}}}}) -> 7", "(count_nodes {8 {6}}) -> 2", "(count_nodes {4 {8 {2}}}) -> 3", "(count_nodes {7 {9 {0}} {2}}) -> 4", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.208324, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {8}}) -> 2", "(count_nodes {8 {3 {4}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 e)) 1)) 0)) _) _)", "time": 1.108429, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {4}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {3}) -> 1", "(count_nodes {1 {9 {9}} {9 {2}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {4 {9 {4 {1}} {2}}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.245213, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {7 {6} {4}} {6}}) -> 5", "(count_nodes {0}) -> 1", "(count_nodes {2 {0}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {7 {3 {6}} {1 {7} {4}}}) -> 6", "(count_nodes {9 {5} {8}}) -> 3", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.256667, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8 {5}}) -> 2", "(count_nodes {4 {6} {4 {6 {3} {2}}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {3 {9}}) -> 2", "(count_nodes {7}) -> 1", "(count_nodes {7 {5}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.216411, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8 {7 {8} {6 {0} {4}}} {0 {2}}}) -> 8", "(count_nodes {0 {9 {2} {7}} {1 {8} {0}}}) -> 7", "(count_nodes {8 {4}}) -> 2", "(count_nodes {1 {7 {0}} {3}}) -> 4", "(count_nodes {7 {4}}) -> 2", "(count_nodes {7 {7}}) -> 2", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.252357, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {3 {9 {3} {7}}} {8 {5}}}) -> 7", "(count_nodes {8 {5} {9}}) -> 3", "(count_nodes {6 {3 {8 {5} {0}} {1 {2}}}}) -> 7", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.251051, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {4 {9}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {0 {4} {2}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 1.27274, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {9 {8} {1}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {7 {2} {0}}) -> 3", "(count_nodes {7}) -> 1", "(count_nodes {1 {5 {0}} {3}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.295522, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2 {1 {7} {0}}}) -> 4", "(count_nodes {0 {1 {0}}}) -> 3", "(count_nodes {3}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.275928, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {7 {9 {2}} {8}}) -> 4", "(count_nodes {0}) -> 1", "(count_nodes {0 {5} {7}}) -> 3", "(count_nodes {4 {6} {5 {9}}}) -> 4", "(count_nodes {8 {8} {5}}) -> 3", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.894035, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {2 {4}}}) -> 3", "(count_nodes {1 {2}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {2 {5} {0}}) -> 3", "(count_nodes {8 {1 {2 {9}} {1}} {8}}) -> 6", "(count_nodes {3 {9 {3}}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.027981, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {2} {4}}) -> 3", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {9 {3} {0}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {5 {6 {8} {2}} {9 {9}}}) -> 6", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.051767, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {2}) -> 1", "(count_nodes {9 {7}}) -> 2", "(count_nodes {1 {4} {4 {2} {0}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {9 {4} {7}}) -> 3", "(count_nodes {2}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.975881, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {9}}) -> 2", "(count_nodes {6}) -> 1", "(count_nodes {2 {3}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {7 {6}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {1 {5 {9} {5 {7}}} {7 {7 {0} {1}}}}) -> 9"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.077535, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6 {1} {4}}) -> 3", "(count_nodes {1}) -> 1", "(count_nodes {0 {7 {3 {9} {8}} {2 {1} {4}}} {8}}) -> 9", "(count_nodes {0 {5 {2 {4}}}}) -> 4", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.05213, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2 {3} {9}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {4 {4} {0}}) -> 3", "(count_nodes {5 {8} {1 {0} {9}}}) -> 5", "(count_nodes {1 {9}}) -> 2", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.077151, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2 {2} {3}}) -> 3", "(count_nodes {7 {1} {0}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {3 {8} {2}}) -> 3", "(count_nodes {9 {2 {6} {6}} {7}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.013511, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {3 {7 {0} {4}}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {0 {9 {0}} {0 {7}}}) -> 5", "(count_nodes {9 {3 {5 {1} {2}}} {6 {9 {8} {3}}}}) -> 9", "(count_nodes {0 {0}}) -> 2", "(count_nodes {4 {5 {4 {5}}}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.160579, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {4 {3} {6 {8} {1 {2}}}}) -> 6", "(count_nodes {0 {2} {6 {9 {3}} {8 {5} {8}}}}) -> 8", "(count_nodes {5 {7 {2}}}) -> 3", "(count_nodes {3 {9} {1 {3} {2 {9} {0}}}}) -> 7"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.190726, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {4} {9 {4}}}) -> 4", "(count_nodes {9 {0 {7} {3}}}) -> 4", "(count_nodes {8}) -> 1", "(count_nodes {4}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {6 {8 {2} {0}}}) -> 4", "(count_nodes {6 {9}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.10362, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {6 {8 {4}}} {5}}) -> 5", "(count_nodes {1 {9}}) -> 2", "(count_nodes {4}) -> 1", "(count_nodes {8 {5} {9}}) -> 3", "(count_nodes {7 {3 {4}}}) -> 3", "(count_nodes {7}) -> 1", "(count_nodes {4 {7} {7}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.198816, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {3 {6}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {5}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 1)) 1)) 0)) _) _)", "time": 1.131943, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {3 {7}}}) -> 3", "(count_nodes {1}) -> 1", "(count_nodes {7}) -> 1", "(count_nodes {7 {1 {7}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 e)) 1)) 0)) _) _)", "time": 1.216006, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2 {2 {3}}}) -> 3", "(count_nodes {1}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {3}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ c 1)) 1)) 0)) _) _)", "time": 1.050784, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {2} {9 {1 {6} {8}}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {2 {7 {6}} {6}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {9 {4 {2} {7}}}) -> 4", "(count_nodes {6}) -> 1", "(count_nodes {4 {2 {5}}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.199775, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {8 {8}}) -> 2", "(count_nodes {2}) -> 1", "(count_nodes {4 {8 {5 {0}}}}) -> 4", "(count_nodes {3 {0 {6} {5}}}) -> 4", "(count_nodes {6 {7 {1 {5}}}}) -> 4", "(count_nodes {5 {7} {6}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.960485, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {9 {4 {4}} {4}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {7 {6} {9}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {7 {2 {6 {7} {4}} {6 {1}}} {1 {2 {7} {1}}}}) -> 11"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.972234, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {7}}) -> 2", "(count_nodes {2 {9 {5 {3}}} {8 {9 {6} {4}}}}) -> 8", "(count_nodes {}) -> 0", "(count_nodes {7 {2 {4}}}) -> 3", "(count_nodes {5 {8} {2}}) -> 3", "(count_nodes {7}) -> 1", "(count_nodes {1 {8} {5 {2 {1}}}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.969117, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {1 {4}}) -> 2", "(count_nodes {2 {7} {4}}) -> 3", "(count_nodes {5 {8}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {6 {6}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 0.889966, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {5 {5} {6 {4 {3} {1}}}}) -> 6", "(count_nodes {7 {6 {0}}}) -> 3", "(count_nodes {8 {3 {7 {1}} {0 {2}}} {3}}) -> 7", "(count_nodes {2 {7 {8 {8} {4}}}}) -> 5", "(count_nodes {6}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.991297, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {6 {0} {9}}}) -> 4", "(count_nodes {5}) -> 1", "(count_nodes {5 {7} {4}}) -> 3", "(count_nodes {4 {5 {9 {2}}} {7 {0} {7 {4}}}}) -> 8", "(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {4 {0 {5}} {2}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.930823, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {4 {5} {2}}) -> 3", "(count_nodes {9}) -> 1", "(count_nodes {4 {1}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {6 {5} {5}}) -> 3", "(count_nodes {0 {2} {1 {9}}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.969487, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {7}}) -> 2", "(count_nodes {3}) -> 1", "(count_nodes {9}) -> 1", "(count_nodes {5 {2} {3}}) -> 3", "(count_nodes {8 {2 {1 {4}}}}) -> 4", "(count_nodes {8 {9 {7} {6}}}) -> 4", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.040353, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {7 {4}} {3}}) -> 4", "(count_nodes {7 {3}}) -> 2", "(count_nodes {2}) -> 1", "(count_nodes {4 {2 {6 {2} {8}} {0 {7} {1}}}}) -> 8", "(count_nodes {9}) -> 1", "(count_nodes {7 {6} {0}}) -> 3", "(count_nodes {6 {3 {0 {4} {3}}}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.015109, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {2} {3}}) -> 3", "(count_nodes {8}) -> 1", "(count_nodes {5}) -> 1", "(count_nodes {0 {9 {8 {9} {7}} {1 {9} {4}}}}) -> 8", "(count_nodes {9}) -> 1", "(count_nodes {6 {8}}) -> 2", "(count_nodes {4}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.11675, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {6} {2}}) -> 3", "(count_nodes {8 {2 {5} {1}} {1 {9}}}) -> 6", "(count_nodes {8}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {3 {7}}) -> 2", "(count_nodes {9 {2 {7}} {1}}) -> 4", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.143692, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {7 {3}}) -> 2", "(count_nodes {4}) -> 1", "(count_nodes {9 {5 {5 {8} {5}} {3}}}) -> 6", "(count_nodes {8}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.225685, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {8 {3 {7} {5}}}) -> 4", "(count_nodes {1 {7} {0}}) -> 3", "(count_nodes {4 {1} {7 {7} {7}}}) -> 5", "(count_nodes {4 {5} {6}}) -> 3", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.153732, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {2 {1 {8}}}) -> 3", "(count_nodes {7}) -> 1", "(count_nodes {8}) -> 1", "(count_nodes {4}) -> 1", "(count_nodes {3 {1}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 e)) 1)) 0)) _) _)", "time": 1.148813, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {7 {6} {8}}) -> 3", "(count_nodes {7}) -> 1", "(count_nodes {7 {0} {4}}) -> 3", "(count_nodes {1 {6 {6} {0}} {1 {6}}}) -> 6", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.010861, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {4 {6 {4} {4}} {7 {7}}} {5 {7 {3} {8}}}}) -> 11", "(count_nodes {}) -> 0", "(count_nodes {8 {5}}) -> 2", "(count_nodes {9 {7} {6}}) -> 3", "(count_nodes {3 {7} {7 {5 {5}} {8 {9} {0}}}}) -> 8", "(count_nodes {9 {7} {7}}) -> 3", "(count_nodes {7 {6}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.323919, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {1 {0}}) -> 2", "(count_nodes {6}) -> 1", "(count_nodes {0 {7} {2}}) -> 3", "(count_nodes {3}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 0.814934, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {7 {8}}) -> 2", "(count_nodes {9 {5}}) -> 2", "(count_nodes {7 {0}}) -> 2", "(count_nodes {5 {9} {5 {4 {3}}}}) -> 5", "(count_nodes {8 {9 {5} {6}}}) -> 4", "(count_nodes {6}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.781204, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {8}) -> 1", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {7 {0} {7}}) -> 3", "(count_nodes {5 {3}}) -> 2", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 0.858975, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {0} {3}}) -> 3", "(count_nodes {7 {6}}) -> 2", "(count_nodes {8 {4 {8}}}) -> 3", "(count_nodes {4 {7}}) -> 2", "(count_nodes {4 {4 {1}}}) -> 3", "(count_nodes {4 {9}}) -> 2", "(count_nodes {0 {5 {9 {0} {5}} {8 {7} {9}}}}) -> 8"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.911174, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {5 {0}}}) -> 3", "(count_nodes {3 {5 {7} {8}} {5 {7} {5}}}) -> 7", "(count_nodes {0 {3 {6}} {1 {0} {6}}}) -> 6", "(count_nodes {7 {8}}) -> 2", "(count_nodes {6 {2 {7 {4}} {4 {5}}} {7 {0 {2} {2}} {6 {1} {7}}}}) -> 13", "(count_nodes {4 {2 {6 {8} {0}} {1 {1} {0}}} {2 {9 {0}}}}) -> 11", "(count_nodes {7 {1 {8} {2 {9}}}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.847077, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {9} {3}}) -> 3", "(count_nodes {7 {5 {7 {0} {3}}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {8 {4 {0} {9}} {5 {3} {8}}}) -> 7"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.070814, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {5 {3} {5 {3} {0}}}}) -> 6", "(count_nodes {3}) -> 1", "(count_nodes {1 {2 {4}}}) -> 3", "(count_nodes {5 {7 {7}}}) -> 3", "(count_nodes {2 {7 {7}} {8 {7 {1} {1}}}}) -> 7", "(count_nodes {}) -> 0", "(count_nodes {8 {1}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.107264, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {6} {5 {3 {4} {6}}}}) -> 6", "(count_nodes {5 {2 {6}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {4 {0 {9 {5}}}}) -> 4", "(count_nodes {4}) -> 1", "(count_nodes {8 {1 {5 {4}}} {6 {1} {0 {9} {1}}}}) -> 9", "(count_nodes {6}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.047728, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {1 {5}}) -> 2", "(count_nodes {4}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {8 {0} {3 {2}}}) -> 4", "(count_nodes {3 {0}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f f)) 1)) 0)) _) _)", "time": 0.892043, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {1 {5} {7}}) -> 3", "(count_nodes {0 {0} {4}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3 {3}}) -> 2", "(count_nodes {2 {9}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 0.933338, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {7 {3 {8 {2}} {7 {9}}} {0}}) -> 7", "(count_nodes {0 {6 {2}}}) -> 3", "(count_nodes {1 {4 {8}} {9 {7}}}) -> 5", "(count_nodes {2 {0}}) -> 2", "(count_nodes {4 {6}}) -> 2", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.950124, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {1 {5 {0}} {5 {5} {1}}}}) -> 7", "(count_nodes {5}) -> 1", "(count_nodes {8 {6 {2 {6}}} {7 {6} {2 {2} {2}}}}) -> 9", "(count_nodes {4 {8 {1} {7 {3}}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {4 {4 {4 {2} {9}}} {0}}) -> 6", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.15424, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {2 {8} {4}}) -> 3", "(count_nodes {2 {6 {6 {5} {9}} {1 {2} {1}}} {4 {7 {1}} {1 {9} {6}}}}) -> 14", "(count_nodes {8 {8 {6} {1}}}) -> 4", "(count_nodes {3 {7}}) -> 2", "(count_nodes {7 {4}}) -> 2", "(count_nodes {7}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.978012, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {9} {6}}) -> 3", "(count_nodes {3 {5} {5}}) -> 3", "(count_nodes {4}) -> 1", "(count_nodes {8 {9 {0 {1}}} {0}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {9}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.964487, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {1 {2}}}) -> 3", "(count_nodes {9 {2} {7}}) -> 3", "(count_nodes {5}) -> 1", "(count_nodes {8 {6 {0}}}) -> 3", "(count_nodes {8 {2} {6 {3} {0}}}) -> 5", "(count_nodes {4 {8 {8} {2}}}) -> 4", "(count_nodes {0 {3 {2} {5 {6}}} {9}}) -> 6"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.984446, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {0}) -> 1", "(count_nodes {1}) -> 1", "(count_nodes {9}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) 1) 0)) _) _)", "time": 0.014611, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {9}}) -> 2", "(count_nodes {8 {8 {8}} {2 {8}}}) -> 5", "(count_nodes {0 {0} {2}}) -> 3", "(count_nodes {1}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {9 {8}}) -> 2", "(count_nodes {5}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.98297, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {1} {3 {0} {1}}}) -> 5", "(count_nodes {4 {7 {0}} {7 {8}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {6 {4} {6}}) -> 3", "(count_nodes {7}) -> 1", "(count_nodes {9 {4}}) -> 2", "(count_nodes {1 {6} {5}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.739495, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {7 {1 {3 {9}}} {4}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {6 {2}}) -> 2", "(count_nodes {5 {6} {7}}) -> 3", "(count_nodes {9}) -> 1", "(count_nodes {9 {0} {0}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.130052, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {8} {1}}) -> 3", "(count_nodes {7 {5 {5} {3}}}) -> 4", "(count_nodes {7 {8 {7} {9}} {7 {1}}}) -> 6", "(count_nodes {7 {3}}) -> 2", "(count_nodes {1 {5 {2 {9} {6}} {4}}}) -> 6", "(count_nodes {1}) -> 1", "(count_nodes {2 {4 {2 {4} {3}} {2}} {1}}) -> 7"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.729123, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {7 {4} {0}} {8}}) -> 5", "(count_nodes {5 {4}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {7 {5} {9}}) -> 3", "(count_nodes {9 {3} {0}}) -> 3", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.807875, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {9}}) -> 2", "(count_nodes {6 {6} {7}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {7 {2}}) -> 2", "(count_nodes {3 {5}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 0.730953, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {9 {3 {6 {7} {1}} {5 {7} {6}}} {6}}) -> 9", "(count_nodes {3 {4 {3 {7} {1}}} {9}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {4 {1 {8 {3} {9}} {0 {2} {8}}}}) -> 8", "(count_nodes {0 {7 {6 {5}}}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.922445, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {4}) -> 1", "(count_nodes {0}) -> 1", "(count_nodes {1 {0} {8}}) -> 3", "(count_nodes {4}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {1 {9}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ c f)) 1)) 0)) _) _)", "time": 1.204525, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {5 {2} {3}} {3 {4} {1}}}) -> 7", "(count_nodes {9 {8}}) -> 2", "(count_nodes {4 {2}}) -> 2", "(count_nodes {0 {9}}) -> 2", "(count_nodes {0}) -> 1", "(count_nodes {6 {4 {0} {7}}}) -> 4", "(count_nodes {9}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.835076, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {8} {9}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {4 {0 {2 {0}}} {8 {0 {3} {8}} {1}}}) -> 9", "(count_nodes {6}) -> 1", "(count_nodes {1 {4 {4} {4}}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.273958, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1 {6 {6 {9} {5}} {4}} {3 {1 {7} {6}}}}) -> 10", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {2 {5} {1}}) -> 3", "(count_nodes {9 {6} {6}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.785127, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {9}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {9 {2} {0 {7}}}) -> 4", "(count_nodes {3 {3} {8}}) -> 3", "(count_nodes {0}) -> 1", "(count_nodes {9}) -> 1", "(count_nodes {8 {4}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.48295, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {4 {2 {0}}}) -> 3", "(count_nodes {9 {1}}) -> 2", "(count_nodes {6 {1}}) -> 2", "(count_nodes {8 {6}}) -> 2", "(count_nodes {1 {1 {5}}}) -> 3", "(count_nodes {8 {5 {4} {6}} {7}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.708674, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {8 {0} {4}}}) -> 4", "(count_nodes {4}) -> 1", "(count_nodes {8 {6 {0}}}) -> 3", "(count_nodes {8}) -> 1", "(count_nodes {3}) -> 1", "(count_nodes {4 {8} {3}}) -> 3", "(count_nodes {5}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.501684, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {7 {9 {7} {8}}}) -> 4", "(count_nodes {3 {8}}) -> 2", "(count_nodes {5 {0 {6} {5}}}) -> 4", "(count_nodes {0 {2 {1} {6}}}) -> 4", "(count_nodes {5}) -> 1", "(count_nodes {0 {3}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.583117, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {1 {1} {0 {4}}} {2 {3 {0} {3}} {4 {1} {7}}}}) -> 12", "(count_nodes {}) -> 0", "(count_nodes {9 {2 {6} {0}}}) -> 4", "(count_nodes {4 {6 {2} {2 {5} {1}}} {1 {7 {8}} {4 {0}}}}) -> 11", "(count_nodes {}) -> 0", "(count_nodes {3 {0 {5 {2}}} {9 {4 {8} {2}} {7 {9} {4}}}}) -> 11", "(count_nodes {8}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.780831, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {4 {0 {2} {7}} {3 {6} {4}}}) -> 7", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {7 {6} {3 {8}}}) -> 4", "(count_nodes {4 {9} {1 {9}}}) -> 4", "(count_nodes {9 {5 {2}} {3 {0}}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.791326, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {8 {6} {3 {0 {5} {7}}}}) -> 6", "(count_nodes {7 {4 {6}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {1 {8} {4}}) -> 3", "(count_nodes {8 {9 {1}} {5}}) -> 4", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.763754, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {2 {2} {7 {9}}}}) -> 5", "(count_nodes {8 {3}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {1 {1} {0 {7 {6} {8}}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.483848, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {3 {8} {1}}}) -> 4", "(count_nodes {1 {6} {8}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3 {1 {0} {2}}}) -> 4", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.73776, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {0 {5}}) -> 2", "(count_nodes {6 {3} {6}}) -> 3", "(count_nodes {1}) -> 1", "(count_nodes {5 {5}}) -> 2", "(count_nodes {2 {6 {0}}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.664762, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {4 {7} {8}}) -> 3", "(count_nodes {6 {5 {8}} {4 {2 {9}} {2}}}) -> 7", "(count_nodes {9 {0}}) -> 2", "(count_nodes {8}) -> 1", "(count_nodes {5 {4} {5}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.713554, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {1}) -> 1", "(count_nodes {5 {6 {3 {4} {3}} {2}} {6 {9 {3} {6}} {8 {6} {5}}}}) -> 13", "(count_nodes {}) -> 0", "(count_nodes {4 {7 {1 {7}}} {7 {4} {8}}}) -> 7", "(count_nodes {5 {8}}) -> 2", "(count_nodes {7 {2}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.227313, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {4 {3 {7} {5}} {1}}) -> 5", "(count_nodes {4 {4 {7}} {0 {7}}}) -> 5", "(count_nodes {6 {2 {0}}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.720803, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {9 {3}} {1 {1} {5}}}) -> 6", "(count_nodes {4}) -> 1", "(count_nodes {9 {4}}) -> 2", "(count_nodes {5 {1 {4}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {2 {5} {9}}) -> 3", "(count_nodes {1}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.306887, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {9 {9 {3} {3}}}) -> 4", "(count_nodes {1}) -> 1", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.546507, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {6 {8} {5 {9 {3}} {3 {7}}}}) -> 7"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ c 1)) 1)) 0)) _) _)", "time": 0.639319, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {5 {1 {8}}} {0 {5 {6}} {4 {4} {5}}}}) -> 10", "(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {9 {7}}) -> 2", "(count_nodes {4}) -> 1", "(count_nodes {5 {5 {8 {4}} {9}}}) -> 5", "(count_nodes {5 {8 {4} {2}}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.269531, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {3} {7}}) -> 3", "(count_nodes {8 {6} {0 {3} {0}}}) -> 5", "(count_nodes {8}) -> 1", "(count_nodes {0}) -> 1", "(count_nodes {3 {6}}) -> 2", "(count_nodes {1}) -> 1", "(count_nodes {5}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.601555, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {6} {1}}) -> 3", "(count_nodes {9}) -> 1", "(count_nodes {5 {8}}) -> 2", "(count_nodes {3 {8 {3} {6}} {4}}) -> 5", "(count_nodes {6 {4 {9 {1} {7}}} {1 {5 {5} {7}}}}) -> 9", "(count_nodes {1}) -> 1", "(count_nodes {8 {6}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.498673, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8 {4 {1 {6}}}}) -> 4", "(count_nodes {5 {0 {2} {5 {2}}} {8}}) -> 6", "(count_nodes {0 {8 {0}} {2}}) -> 4", "(count_nodes {7 {3} {7}}) -> 3", "(count_nodes {3 {3} {3}}) -> 3", "(count_nodes {9 {0 {8} {3}} {3 {2}}}) -> 6", "(count_nodes {6}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.721629, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2 {2 {8 {1} {8}}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {0 {8}}) -> 2", "(count_nodes {0 {4}}) -> 2", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.82412, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {1 {4 {2}}} {4}}) -> 5", "(count_nodes {4 {2} {1 {4} {7}}}) -> 5", "(count_nodes {6}) -> 1", "(count_nodes {2}) -> 1", "(count_nodes {3 {0} {0}}) -> 3", "(count_nodes {5}) -> 1", "(count_nodes {4 {0}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.829443, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {2 {3 {8 {0}}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1 {9} {7 {2} {7 {1}}}}) -> 6", "(count_nodes {0}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.653187, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {7 {6 {3} {8}}} {9 {4}}}) -> 7", "(count_nodes {5 {9} {9}}) -> 3", "(count_nodes {6}) -> 1", "(count_nodes {6 {7}}) -> 2", "(count_nodes {8 {7} {6}}) -> 3", "(count_nodes {9 {1}}) -> 2", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.728575, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {7 {8 {0}} {2 {0} {2}}} {2 {8 {4}} {4 {4} {8}}}}) -> 13", "(count_nodes {4 {3 {0 {5} {0}}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {4 {9} {9}}) -> 3", "(count_nodes {9}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.814471, "name": "count_nodes"}
