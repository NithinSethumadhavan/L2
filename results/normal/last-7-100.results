{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8 9 8]) -> 8", "(last [4 4 7 1 9]) -> 9", "(last [7 4 8]) -> 8", "(last [2 6 6 6 7]) -> 7", "(last [3 9 1 2]) -> 2", "(last [9 5]) -> 5"], "time": 0.027558}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 6 6]) -> 6", "(last [3]) -> 3", "(last [9 7 2]) -> 2", "(last [9 9 4 4]) -> 4", "(last [3 6 8]) -> 8", "(last [5 9 8 7 0]) -> 0"], "time": 0.0281}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7]) -> 7", "(last [8]) -> 8", "(last [9 5 4 6]) -> 6", "(last [4 9 5]) -> 5", "(last [3 2]) -> 2", "(last [3 4]) -> 4"], "time": 0.028667}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0 9]) -> 9", "(last [6 4 6 1]) -> 1", "(last [9 6]) -> 6", "(last [1 2 6 0]) -> 0", "(last [9 2 2 7 2]) -> 2", "(last [9]) -> 9"], "time": 0.034242}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9 0]) -> 0", "(last [9 1]) -> 1", "(last [2]) -> 2", "(last [1 0 2]) -> 2", "(last [4 2 1 3]) -> 3", "(last [3 2 2 2 5]) -> 5"], "time": 0.026857}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1 8]) -> 8", "(last [2]) -> 2", "(last [3 7 0 2]) -> 2", "(last [9 3 4 2 8]) -> 8", "(last [1 3 8 1]) -> 1", "(last [7 7]) -> 7"], "time": 0.029439}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9 0 6 0]) -> 0", "(last [0]) -> 0", "(last [4 1 0 5]) -> 5", "(last [7]) -> 7", "(last [6 2]) -> 2", "(last [7 7 0]) -> 0"], "time": 0.036816}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [6]) -> 6", "(last [3 5 4 5]) -> 5", "(last [7 1 7 5]) -> 5", "(last [8 9 0]) -> 0", "(last [8 2 9 6]) -> 6", "(last [1 1]) -> 1"], "time": 0.031605}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2]) -> 2", "(last [1 2 2 9]) -> 9", "(last [0 7 6 5 1]) -> 1", "(last [5]) -> 5", "(last [0 4 3]) -> 3", "(last [4 2]) -> 2"], "time": 0.041804}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0 6 5 1 9]) -> 9", "(last [7 5 1 7]) -> 7", "(last [6 0 0 2]) -> 2", "(last [9]) -> 9", "(last [8 1 8 4]) -> 4", "(last [0 3 1 3]) -> 3"], "time": 0.038727}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [3]) -> 3", "(last [3 4 8 1]) -> 1", "(last [1 9 1]) -> 1", "(last [8 9 1 2]) -> 2", "(last [4 0 3]) -> 3", "(last [7 1 0]) -> 0"], "time": 0.034952}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0 1 1 2]) -> 2", "(last [4 4 0]) -> 0", "(last [0 0]) -> 0", "(last [0]) -> 0", "(last [7 1 1 4 4]) -> 4", "(last [8]) -> 8"], "time": 0.035997}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9 4]) -> 4", "(last [0]) -> 0", "(last [6]) -> 6", "(last [8]) -> 8", "(last [0 7 5 6]) -> 6", "(last [3 9 3]) -> 3"], "time": 0.024667}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8 1 8]) -> 8", "(last [6 0 2]) -> 2", "(last [7 6 1]) -> 1", "(last [5]) -> 5", "(last [8]) -> 8", "(last [8 8 7]) -> 7"], "time": 0.029248}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2 8 2 4]) -> 4", "(last [3 3 5 4 2]) -> 2", "(last [3 9 8]) -> 8", "(last [2 7 2]) -> 2", "(last [9 2 3 9 1]) -> 1", "(last [8 2 9]) -> 9"], "time": 0.040915}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0 5 1]) -> 1", "(last [2 7 5 9]) -> 9", "(last [1 6 8]) -> 8", "(last [1]) -> 1", "(last [6 6 3 9 4]) -> 4", "(last [1 9 9]) -> 9"], "time": 0.033452}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [3 8 7 9 7]) -> 7", "(last [0 6]) -> 6", "(last [7 3 8]) -> 8", "(last [3 1 6 8 1]) -> 1", "(last [2]) -> 2", "(last [5 6 5]) -> 5"], "time": 0.025509}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [3 1 8]) -> 8", "(last [5 3 4 4 5]) -> 5", "(last [5]) -> 5", "(last [0 1 6 3 0]) -> 0", "(last [1 5]) -> 5", "(last [6 1 6 0]) -> 0"], "time": 0.024982}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 9 9]) -> 9", "(last [2 8 6]) -> 6", "(last [8]) -> 8", "(last [5 8 3]) -> 3", "(last [4]) -> 4", "(last [5 1 9]) -> 9"], "time": 0.042225}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0 0 9 1]) -> 1", "(last [0]) -> 0", "(last [7 0 6 7]) -> 7", "(last [3 2 4 7]) -> 7", "(last [0 4]) -> 4", "(last [1 0 4 9]) -> 9"], "time": 0.026964}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5]) -> 5", "(last [2 1 8 2]) -> 2", "(last [3]) -> 3", "(last [3 6]) -> 6", "(last [2 9]) -> 9", "(last [5 6 2]) -> 2"], "time": 0.026616}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1 0 9 2 1]) -> 1", "(last [0 5]) -> 5", "(last [3 5 3 4]) -> 4", "(last [7]) -> 7", "(last [7 8 8 4]) -> 4", "(last [0 3]) -> 3"], "time": 0.026218}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8 3]) -> 3", "(last [2 3 7 8 0]) -> 0", "(last [9 4 5 2 2]) -> 2", "(last [0 9]) -> 9", "(last [4 6 4]) -> 4", "(last [7 9 8]) -> 8"], "time": 0.038619}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8 4 4 5]) -> 5", "(last [9]) -> 9", "(last [3 6]) -> 6", "(last [3]) -> 3", "(last [9 4]) -> 4", "(last [4]) -> 4"], "time": 0.036754}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9]) -> 9", "(last [0 9 3]) -> 3", "(last [0 4 2 0]) -> 0", "(last [5 9]) -> 9", "(last [5 6 8 6 6]) -> 6", "(last [7 7 0 4]) -> 4"], "time": 0.035186}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2]) -> 2", "(last [3 3 6 5 4]) -> 4", "(last [6 4 1 6]) -> 6", "(last [2]) -> 2", "(last [8 0 5 6]) -> 6", "(last [8 6 0 2 3]) -> 3"], "time": 0.026983}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [6]) -> 6", "(last [5 3 0 6]) -> 6", "(last [8 7 7 3]) -> 3", "(last [6 5 3 8]) -> 8", "(last [6 2 9 3]) -> 3", "(last [5 0]) -> 0"], "time": 0.025985}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8 5 7 8 5]) -> 5", "(last [5]) -> 5", "(last [3 5]) -> 5", "(last [0 4 5 3 4]) -> 4", "(last [7 4]) -> 4", "(last [7 0 2 7]) -> 7"], "time": 0.039873}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7 0 8 3]) -> 3", "(last [4 4 1 0 7]) -> 7", "(last [3]) -> 3", "(last [7 5 2]) -> 2", "(last [6 1 7]) -> 7", "(last [0]) -> 0"], "time": 0.040274}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0]) -> 0", "(last [1 2 4 3]) -> 3", "(last [7 3 1 8 1]) -> 1", "(last [6]) -> 6", "(last [8 6 6]) -> 6", "(last [9 8 6 3 4]) -> 4"], "time": 0.033637}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 7 1]) -> 1", "(last [4 8]) -> 8", "(last [7]) -> 7", "(last [0 4 3 3 0]) -> 0", "(last [6 3 9]) -> 9", "(last [3 9]) -> 9"], "time": 0.025071}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 7 1]) -> 1", "(last [8]) -> 8", "(last [9 2]) -> 2", "(last [2 4 2 5 8]) -> 8", "(last [0 7 9]) -> 9", "(last [2]) -> 2"], "time": 0.040664}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 9 3 2 3]) -> 3", "(last [2 3 7 6 7]) -> 7", "(last [6 2]) -> 2", "(last [4 4 0]) -> 0", "(last [1 6]) -> 6", "(last [8 9 4 4]) -> 4"], "time": 0.026141}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9 7]) -> 7", "(last [3 2 6 5 0]) -> 0", "(last [3 9 0 6 3]) -> 3", "(last [9 5 5]) -> 5", "(last [6 4 9 6 6]) -> 6", "(last [1 5]) -> 5"], "time": 0.024652}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9 2 8 4]) -> 4", "(last [3 6 7 5 3]) -> 3", "(last [4 4 5 7]) -> 7", "(last [3]) -> 3", "(last [9 5 9 2 0]) -> 0", "(last [0 8 2]) -> 2"], "time": 0.040454}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9]) -> 9", "(last [6 6]) -> 6", "(last [7 3 8 3 4]) -> 4", "(last [1 5 5 2 1]) -> 1", "(last [6 7]) -> 7", "(last [3 5 2]) -> 2"], "time": 0.027695}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0 9 6 2 0]) -> 0", "(last [5 3]) -> 3", "(last [0]) -> 0", "(last [2 6]) -> 6", "(last [8 8]) -> 8", "(last [9 6 8 9 7]) -> 7"], "time": 0.028729}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1 4]) -> 4", "(last [9 2]) -> 2", "(last [3]) -> 3", "(last [5 5]) -> 5", "(last [0]) -> 0", "(last [2 6]) -> 6"], "time": 0.036137}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [4]) -> 4", "(last [2 7 9]) -> 9", "(last [2]) -> 2", "(last [9]) -> 9", "(last [9]) -> 9", "(last [2 7 2 2 2]) -> 2"], "time": 0.044013}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2 3 9 7 2]) -> 2", "(last [2 9 7 2 5]) -> 5", "(last [8 1 9 5]) -> 5", "(last [2 4 5 8 7]) -> 7", "(last [6 2 0 8 2]) -> 2", "(last [9 4 1 7 8]) -> 8"], "time": 0.031321}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7]) -> 7", "(last [0]) -> 0", "(last [0]) -> 0", "(last [1 8 5 9 6]) -> 6", "(last [3 7 5 4]) -> 4", "(last [0 1 5 1 8]) -> 8"], "time": 0.045596}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 2]) -> 2", "(last [6]) -> 6", "(last [6 1 7 8 9]) -> 9", "(last [5 3 6]) -> 6", "(last [1 3]) -> 3", "(last [7 6 9 0 4]) -> 4"], "time": 0.044255}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2 6 5 4 2]) -> 2", "(last [7 4]) -> 4", "(last [3 2]) -> 2", "(last [1]) -> 1", "(last [4 1 3]) -> 3", "(last [9]) -> 9"], "time": 0.046278}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2 1 0 2 6]) -> 6", "(last [4 3 9 8]) -> 8", "(last [6]) -> 6", "(last [5 2 2 1 4]) -> 4", "(last [1 0 9 5 0]) -> 0", "(last [3]) -> 3"], "time": 0.030207}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2 7]) -> 7", "(last [9 5 4 3]) -> 3", "(last [5 3 4]) -> 4", "(last [9 7 6 4]) -> 4", "(last [8 1]) -> 1", "(last [5]) -> 5"], "time": 0.038461}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9 8 1]) -> 1", "(last [2 5]) -> 5", "(last [9 2 3]) -> 3", "(last [1]) -> 1", "(last [4 5 6 6 5]) -> 5", "(last [5 8]) -> 8"], "time": 0.024293}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7]) -> 7", "(last [0]) -> 0", "(last [5]) -> 5", "(last [5 1 7 9]) -> 9", "(last [3]) -> 3", "(last [3 8 6]) -> 6"], "time": 0.025057}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2 9 0 6]) -> 6", "(last [3]) -> 3", "(last [0 3 4]) -> 4", "(last [1 8 2 9]) -> 9", "(last [7]) -> 7", "(last [7 8 3 3]) -> 3"], "time": 0.042963}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [3 7 9]) -> 9", "(last [6 8]) -> 8", "(last [5]) -> 5", "(last [7 8 7 0 5]) -> 5", "(last [7]) -> 7", "(last [6 4 2 6]) -> 6"], "time": 0.039711}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 9 7 7 2]) -> 2", "(last [6 0 1 0]) -> 0", "(last [8 7 3]) -> 3", "(last [4 0 3 0]) -> 0", "(last [0 5 5]) -> 5", "(last [5]) -> 5"], "time": 0.04151}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [6]) -> 6", "(last [4]) -> 4", "(last [5 4]) -> 4", "(last [5 4]) -> 4", "(last [5 3 2 3 9]) -> 9", "(last [8 7]) -> 7"], "time": 0.02456}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 7 6]) -> 6", "(last [1 5 3 0]) -> 0", "(last [2]) -> 2", "(last [9]) -> 9", "(last [7 9]) -> 9", "(last [4 1]) -> 1"], "time": 0.030923}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9 6 3 9 7]) -> 7", "(last [2 9 7]) -> 7", "(last [3 5 4]) -> 4", "(last [7 2 9 1 9]) -> 9", "(last [7 3 4]) -> 4", "(last [7 8 5]) -> 5"], "time": 0.024873}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0]) -> 0", "(last [2 0]) -> 0", "(last [2 6]) -> 6", "(last [7]) -> 7", "(last [6 4 7]) -> 7", "(last [2 8 8 2]) -> 2"], "time": 0.024543}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 9 5 2 8]) -> 8", "(last [1 2 5 9]) -> 9", "(last [0 4]) -> 4", "(last [7 2]) -> 2", "(last [8 5 7 2]) -> 2", "(last [2]) -> 2"], "time": 0.025025}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [6 2]) -> 2", "(last [8 2 3 4 7]) -> 7", "(last [5]) -> 5", "(last [0 0 3 0]) -> 0", "(last [2]) -> 2", "(last [5 5 8 7]) -> 7"], "time": 0.032139}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1 2 7]) -> 7", "(last [1]) -> 1", "(last [7 3 7 5]) -> 5", "(last [6 6 4 6]) -> 6", "(last [8 2 1]) -> 1", "(last [8 0]) -> 0"], "time": 0.025186}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1]) -> 1", "(last [7 8 5 2 8]) -> 8", "(last [1 5 6 5 4]) -> 4", "(last [0 2 5]) -> 5", "(last [6 2 8 0]) -> 0", "(last [6 4 6 1]) -> 1"], "time": 0.035107}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [3 3]) -> 3", "(last [4 4 6 9]) -> 9", "(last [5 2 0 8]) -> 8", "(last [4 9 0]) -> 0", "(last [8 8 7 3]) -> 3", "(last [3 4 3 6 2]) -> 2"], "time": 0.038101}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [4 9 4 8 3]) -> 3", "(last [1 4 4 0]) -> 0", "(last [9 1 3 3 5]) -> 5", "(last [2 6]) -> 6", "(last [3 5 2 2]) -> 2", "(last [1 9 0 1]) -> 1"], "time": 0.045834}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 6 0]) -> 0", "(last [0 7]) -> 7", "(last [1 3 4]) -> 4", "(last [2 3 2 9]) -> 9", "(last [8 2 2 9]) -> 9", "(last [0 2 3 7]) -> 7"], "time": 0.041903}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0 6 9 7 3]) -> 3", "(last [7 1 1]) -> 1", "(last [3 5 4]) -> 4", "(last [8 3 9 1]) -> 1", "(last [5 6 8 0 5]) -> 5", "(last [1 7 5 8 3]) -> 3"], "time": 0.02616}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1 6 7]) -> 7", "(last [7]) -> 7", "(last [7]) -> 7", "(last [3 6 7]) -> 7", "(last [5 7 6]) -> 6", "(last [7 1]) -> 1"], "time": 0.032938}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 9 8]) -> 8", "(last [6 2]) -> 2", "(last [9 2 1 9 3]) -> 3", "(last [5 4]) -> 4", "(last [0 2 5 6]) -> 6", "(last [2 9 9 2]) -> 2"], "time": 0.027475}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7 6 1 8]) -> 8", "(last [3]) -> 3", "(last [6 0]) -> 0", "(last [6 1 2]) -> 2", "(last [1 7 3 7 0]) -> 0", "(last [9 8 3 7]) -> 7"], "time": 0.038949}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 5 7 3]) -> 3", "(last [1 1]) -> 1", "(last [3 6 4 6 2]) -> 2", "(last [3 2 5]) -> 5", "(last [4 8]) -> 8", "(last [0]) -> 0"], "time": 0.02519}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [6 2 7 1 2]) -> 2", "(last [1]) -> 1", "(last [3 8 4 7 7]) -> 7", "(last [1 1 9 7 9]) -> 9", "(last [6]) -> 6", "(last [0 2 2 3 3]) -> 3"], "time": 0.024487}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0]) -> 0", "(last [9 7 4 7]) -> 7", "(last [2 2]) -> 2", "(last [2]) -> 2", "(last [6 5 2]) -> 2", "(last [9]) -> 9"], "time": 0.041254}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2]) -> 2", "(last [1]) -> 1", "(last [9 0 3]) -> 3", "(last [3 9 2]) -> 2", "(last [8 1 5 1 2]) -> 2", "(last [7 4 0 3]) -> 3"], "time": 0.041193}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8 4 9 1 6]) -> 6", "(last [5 1 6]) -> 6", "(last [4 8 3]) -> 3", "(last [0 6 5]) -> 5", "(last [2 0]) -> 0", "(last [1 2 0]) -> 0"], "time": 0.024664}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1 9 8 8]) -> 8", "(last [7 2]) -> 2", "(last [1 6 7 9]) -> 9", "(last [4]) -> 4", "(last [4 1 9 5 8]) -> 8", "(last [9 0 2 0]) -> 0"], "time": 0.029058}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [0 6 6 2 8]) -> 8", "(last [3 0 2 8 5]) -> 5", "(last [0]) -> 0", "(last [4 3 3 2]) -> 2", "(last [4 1 8 1]) -> 1", "(last [2 3]) -> 3"], "time": 0.034579}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [4]) -> 4", "(last [2 5 9 3]) -> 3", "(last [2 4]) -> 4", "(last [9 6]) -> 6", "(last [8 7]) -> 7", "(last [4 4 9 7]) -> 7"], "time": 0.042567}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [3]) -> 3", "(last [5]) -> 5", "(last [5 3 9]) -> 9", "(last [8 5 1 4 7]) -> 7", "(last [8 2]) -> 2", "(last [9 3 3 7 4]) -> 4"], "time": 0.026131}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7 0 3]) -> 3", "(last [2 2]) -> 2", "(last [6 9 3 8 0]) -> 0", "(last [4 9 0 7]) -> 7", "(last [7 5 4 0 7]) -> 7", "(last [8 2 0]) -> 0"], "time": 0.030426}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [4 6 2 9]) -> 9", "(last [4 4 9 4]) -> 4", "(last [7 4 9 5 5]) -> 5", "(last [9]) -> 9", "(last [9 8]) -> 8", "(last [3 5]) -> 5"], "time": 0.034523}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 7 8]) -> 8", "(last [1 4 8 7 7]) -> 7", "(last [3 9 9]) -> 9", "(last [7 2 3 9 3]) -> 3", "(last [6 9 7]) -> 7", "(last [3]) -> 3"], "time": 0.025465}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2]) -> 2", "(last [8 4]) -> 4", "(last [3 4 3 3]) -> 3", "(last [1 6]) -> 6", "(last [0 0]) -> 0", "(last [5 1 6 4]) -> 4"], "time": 0.03864}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7 0 7 1 2]) -> 2", "(last [4 0 1 7 4]) -> 4", "(last [5 8 5]) -> 5", "(last [2]) -> 2", "(last [5 2 3 2]) -> 2", "(last [8]) -> 8"], "time": 0.027588}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [3 6]) -> 6", "(last [4 5 1 3]) -> 3", "(last [9 2 3 2 1]) -> 1", "(last [1 5 8 0]) -> 0", "(last [1]) -> 1", "(last [3 1 3 1 0]) -> 0"], "time": 0.035509}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1 8]) -> 8", "(last [2]) -> 2", "(last [4]) -> 4", "(last [5 9 2 5]) -> 5", "(last [0 8 2]) -> 2", "(last [7 0 6 0 2]) -> 2"], "time": 0.031513}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5]) -> 5", "(last [6]) -> 6", "(last [1]) -> 1", "(last [5 5 4]) -> 4", "(last [8 0 0]) -> 0", "(last [5 4 8]) -> 8"], "time": 0.028349}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 8 8 9]) -> 9", "(last [2]) -> 2", "(last [4 8]) -> 8", "(last [0]) -> 0", "(last [1 5 8]) -> 8", "(last [0 5]) -> 5"], "time": 0.037295}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1]) -> 1", "(last [7 9 2]) -> 2", "(last [7]) -> 7", "(last [5]) -> 5", "(last [6 0 8]) -> 8", "(last [4 8 6 7]) -> 7"], "time": 0.025272}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8 3 2 0 3]) -> 3", "(last [9 9 5 4 4]) -> 4", "(last [8 9 5 7]) -> 7", "(last [2 8 2 5]) -> 5", "(last [0 8]) -> 8", "(last [2 4 7 3 7]) -> 7"], "time": 0.025625}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [6 5 5 8 3]) -> 3", "(last [5]) -> 5", "(last [3 9 8 4 7]) -> 7", "(last [3 6 9 5 6]) -> 6", "(last [2 0 7 9 4]) -> 4", "(last [3 6]) -> 6"], "time": 0.042133}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8 0 0]) -> 0", "(last [1]) -> 1", "(last [9 1 5]) -> 5", "(last [4 9]) -> 9", "(last [7 4]) -> 4", "(last [9 2 8 3]) -> 3"], "time": 0.024932}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9 4 1 4]) -> 4", "(last [1]) -> 1", "(last [2]) -> 2", "(last [3 9]) -> 9", "(last [3 7 4 1]) -> 1", "(last [7 2 8]) -> 8"], "time": 0.026642}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9 7 6]) -> 6", "(last [5 7]) -> 7", "(last [1]) -> 1", "(last [0]) -> 0", "(last [0 6 6 2 8]) -> 8", "(last [4 1 0 5]) -> 5"], "time": 0.024867}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2]) -> 2", "(last [1 7 0 7 5]) -> 5", "(last [7]) -> 7", "(last [5 8 1]) -> 1", "(last [3 8]) -> 8", "(last [5]) -> 5"], "time": 0.02746}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [7 4 9 3 3]) -> 3", "(last [5]) -> 5", "(last [3 1 6]) -> 6", "(last [8 3 3]) -> 3", "(last [5 6 0]) -> 0", "(last [7 0 8 6 1]) -> 1"], "time": 0.027803}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [1 7]) -> 7", "(last [2 1 9 3 2]) -> 2", "(last [2 1 4 4]) -> 4", "(last [4 9 6]) -> 6", "(last [8 2 5 3 6]) -> 6", "(last [9 3 9 5]) -> 5"], "time": 0.037167}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [9 2 4]) -> 4", "(last [4]) -> 4", "(last [1 1 7]) -> 7", "(last [1 2 9 9]) -> 9", "(last [5 4 3 2 2]) -> 2", "(last [3 8 9]) -> 9"], "time": 0.031264}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [5 0 5]) -> 5", "(last [4 1 8 9]) -> 9", "(last [7 6 4 3 8]) -> 8", "(last [2 8]) -> 8", "(last [4 3 0]) -> 0", "(last [1]) -> 1"], "time": 0.041232}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [8]) -> 8", "(last [9 3 9]) -> 9", "(last [2 9 0 2 5]) -> 5", "(last [2 2]) -> 2", "(last [6]) -> 6", "(last [5 0]) -> 0"], "time": 0.039598}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [4]) -> 4", "(last [1 6]) -> 6", "(last [5 2 4]) -> 4", "(last [5 5]) -> 5", "(last [1 3]) -> 3", "(last [9 6 9]) -> 9"], "time": 0.027427}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [6 3]) -> 3", "(last [8 2]) -> 2", "(last [2]) -> 2", "(last [2 3 8 0]) -> 0", "(last [5]) -> 5", "(last [1 8 3 2 6]) -> 6"], "time": 0.029329}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [6]) -> 6", "(last [0 2 3]) -> 3", "(last [8]) -> 8", "(last [5 8]) -> 8", "(last [2 2]) -> 2", "(last [2 3 2 5]) -> 5"], "time": 0.024026}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [4 6]) -> 6", "(last [8 8]) -> 8", "(last [1]) -> 1", "(last [9 6]) -> 6", "(last [7 0 3 3]) -> 3", "(last [1 5 2 1]) -> 1"], "time": 0.023935}
{"name": "last", "solution": "(let last (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(last [2 2 6]) -> 6", "(last [8 1 0 6 9]) -> 9", "(last [3 6 7]) -> 7", "(last [6 8 4 0 7]) -> 7", "(last [4 8 4 7 4]) -> 4", "(last [8 0 8 7]) -> 7"], "time": 0.025338}
