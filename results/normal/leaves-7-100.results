{"time": 0.10632, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (cons c [])) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {7}) -> [7]", "(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.67347, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (cons (value (car (children b))) [])) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5 {5}}) -> [5]", "(leaves {3 {7}}) -> [7]", "(leaves {}) -> []", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.951718, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6 {8} {1}}) -> [8 1]", "(leaves {2 {3 {6}}}) -> [6]", "(leaves {4 {8 {2 {3} {0}}} {5 {4 {5} {8}}}}) -> [3 0 5 8]", "(leaves {}) -> []", "(leaves {1}) -> [1]"], "name": "leaves"}
{"time": 0.911721, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {0 {1}}) -> [1]", "(leaves {9 {1 {2} {7}} {9}}) -> [2 7 9]"], "name": "leaves"}
{"time": 0.928952, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {1 {0 {8}} {5 {8} {6}}}) -> [8 8 6]", "(leaves {1 {2} {0 {8 {7}}}}) -> [2 7]", "(leaves {5 {3 {5}} {2 {7}}}) -> [5 7]", "(leaves {3 {3 {6} {1}}}) -> [6 1]"], "name": "leaves"}
{"time": 0.957124, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {3 {8 {0}} {7 {1}}}) -> [0 1]", "(leaves {3}) -> [3]", "(leaves {4}) -> [4]", "(leaves {1}) -> [1]"], "name": "leaves"}
{"time": 0.991077, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {4} {1}}) -> [4 1]", "(leaves {}) -> []", "(leaves {8 {8 {0 {9}} {9 {1} {5}}}}) -> [9 1 5]", "(leaves {6 {9} {4 {8 {2} {1}} {1 {8} {1}}}}) -> [9 2 1 8 1]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.988874, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {4}) -> [4]", "(leaves {8 {8 {2 {6} {7}} {5}}}) -> [6 7 5]", "(leaves {8}) -> [8]", "(leaves {5 {3} {9}}) -> [3 9]"], "name": "leaves"}
{"time": 0.999404, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {7 {6} {7}}) -> [6 7]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {3 {5} {7}}) -> [5 7]"], "name": "leaves"}
{"time": 1.011026, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {6 {1 {5}}}) -> [5]", "(leaves {6 {8} {8 {1}}}) -> [8 1]", "(leaves {4 {1 {2} {3}}}) -> [2 3]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 1.023969, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0 {9} {7}}) -> [9 7]", "(leaves {3 {4} {4}}) -> [4 4]", "(leaves {6 {9} {4}}) -> [9 4]", "(leaves {3 {9 {8}} {6}}) -> [8 6]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 1.012888, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5 {0}}) -> [0]", "(leaves {2 {6} {7 {5} {0}}}) -> [6 5 0]", "(leaves {}) -> []", "(leaves {0 {6}}) -> [6]", "(leaves {9}) -> [9]"], "name": "leaves"}
{"time": 1.00539, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {6 {1} {7}}) -> [1 7]", "(leaves {2 {9 {0 {0} {6}} {1}}}) -> [0 6 1]", "(leaves {8 {5}}) -> [5]", "(leaves {4}) -> [4]"], "name": "leaves"}
{"time": 0.977812, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0 {3 {5}} {1 {4}}}) -> [5 4]", "(leaves {2 {9} {9}}) -> [9 9]", "(leaves {}) -> []", "(leaves {9 {4 {1 {2} {8}} {8 {4}}}}) -> [2 8 4]", "(leaves {9 {5 {5} {8}} {6 {7}}}) -> [5 8 7]"], "name": "leaves"}
{"time": 1.044966, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0 {2 {1 {6} {1}} {7 {9}}}}) -> [6 1 9]", "(leaves {0 {4 {1 {0} {2}} {6}} {9}}) -> [0 2 6 9]", "(leaves {0}) -> [0]", "(leaves {2}) -> [2]", "(leaves {4}) -> [4]"], "name": "leaves"}
{"time": 1.055005, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8 {2 {3} {4}}}) -> [3 4]", "(leaves {}) -> []", "(leaves {5 {5}}) -> [5]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.898064, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {6 {5 {3} {9}} {3}}}) -> [3 9 3]", "(leaves {9 {9 {8}} {2}}) -> [8 2]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5 {5} {8}}) -> [5 8]"], "name": "leaves"}
{"time": 0.782099, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {7 {7} {5}}) -> [7 5]", "(leaves {3 {1} {8 {9 {0}}}}) -> [1 0]", "(leaves {3 {2 {9 {4} {4}} {4}}}) -> [4 4 4]", "(leaves {8 {2} {0 {3}}}) -> [2 3]", "(leaves {9}) -> [9]"], "name": "leaves"}
{"time": 0.665516, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6 {8}}) -> [8]", "(leaves {8 {9}}) -> [9]", "(leaves {1}) -> [1]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.982505, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {2 {1 {2}}} {7}}) -> [2 7]", "(leaves {9 {3} {4 {4} {0}}}) -> [3 4 0]", "(leaves {0 {9}}) -> [9]", "(leaves {1}) -> [1]", "(leaves {6}) -> [6]"], "name": "leaves"}
{"time": 0.830529, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9 {6} {5}}) -> [6 5]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1 {6}}) -> [6]", "(leaves {9}) -> [9]"], "name": "leaves"}
{"time": 0.67404, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2 {1 {6}}}) -> [6]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {0}) -> [0]"], "name": "leaves"}
{"time": 0.812121, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {4 {6 {4} {6}}}) -> [4 6]", "(leaves {}) -> []", "(leaves {8}) -> [8]"], "name": "leaves"}
{"time": 0.852225, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {7} {9 {8}}}) -> [7 8]", "(leaves {5 {7 {4} {7}}}) -> [4 7]", "(leaves {1 {4 {4 {9} {4}} {7}}}) -> [9 4 7]", "(leaves {1}) -> [1]", "(leaves {2 {2} {5}}) -> [2 5]"], "name": "leaves"}
{"time": 0.904372, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {4 {1 {1 {5} {0}}} {7 {2 {6}} {0 {2}}}}) -> [5 0 6 2]", "(leaves {1 {4} {9}}) -> [4 9]", "(leaves {0}) -> [0]", "(leaves {5}) -> [5]"], "name": "leaves"}
{"time": 0.753793, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {8}) -> [8]", "(leaves {0 {3}}) -> [3]", "(leaves {}) -> []", "(leaves {7 {4 {4} {6 {0} {0}}}}) -> [4 0 0]"], "name": "leaves"}
{"time": 0.888909, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7 {3} {3}}) -> [3 3]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3}) -> [3]"], "name": "leaves"}
{"time": 0.912104, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5 {2 {9 {5}}} {2 {7}}}) -> [5 7]", "(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {6 {8 {1 {5}}} {0}}) -> [5 0]", "(leaves {3 {3 {3} {6}}}) -> [3 6]"], "name": "leaves"}
{"time": 0.896591, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {7 {7 {9} {0}}}) -> [9 0]", "(leaves {6 {5} {8}}) -> [5 8]", "(leaves {}) -> []", "(leaves {0 {5 {7}}}) -> [7]", "(leaves {5}) -> [5]"], "name": "leaves"}
{"time": 0.918976, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {0 {9}}) -> [9]", "(leaves {8 {7} {2}}) -> [7 2]", "(leaves {7}) -> [7]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.931936, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2 {8 {6} {3 {7}}} {3 {9 {5} {4}}}}) -> [6 7 5 4]", "(leaves {7}) -> [7]", "(leaves {}) -> []", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.892309, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0 {8 {3} {9}} {7 {4}}}) -> [3 9 4]", "(leaves {1}) -> [1]", "(leaves {9 {3} {8}}) -> [3 8]", "(leaves {4 {4 {7}}}) -> [7]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.651993, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {1 {2 {9 {6} {3}}} {6 {9 {1} {9}}}}) -> [6 3 1 9]", "(leaves {2}) -> [2]", "(leaves {0 {9} {6 {0} {3}}}) -> [9 0 3]", "(leaves {4 {2} {4 {6 {7}} {2 {0} {8}}}}) -> [2 7 0 8]"], "name": "leaves"}
{"time": 0.479882, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {3 {5}}) -> [5]", "(leaves {8}) -> [8]", "(leaves {}) -> []", "(leaves {8 {1}}) -> [1]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.536907, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {7 {0}}) -> [0]", "(leaves {}) -> []", "(leaves {7 {0 {5}}}) -> [5]", "(leaves {}) -> []", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.647202, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4 {7} {1}}) -> [7 1]", "(leaves {}) -> []", "(leaves {5 {7 {1}}}) -> [1]", "(leaves {9 {2} {5}}) -> [2 5]"], "name": "leaves"}
{"time": 0.600635, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {4}) -> [4]", "(leaves {3}) -> [3]", "(leaves {5 {9}}) -> [9]"], "name": "leaves"}
{"time": 0.471722, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5 {8}}) -> [8]", "(leaves {8}) -> [8]", "(leaves {8 {9}}) -> [9]"], "name": "leaves"}
{"time": 0.654616, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5 {5}}) -> [5]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5 {4}}) -> [4]", "(leaves {9 {1 {0} {5}} {1}}) -> [0 5 1]"], "name": "leaves"}
{"time": 0.597654, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3 {8 {5}}}) -> [5]", "(leaves {1}) -> [1]", "(leaves {7}) -> [7]"], "name": "leaves"}
{"time": 0.811355, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {9}) -> [9]", "(leaves {6 {2 {1}} {8 {8}}}) -> [1 8]", "(leaves {9 {3 {5}} {7 {4} {4}}}) -> [5 4 4]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.795174, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {1 {1 {1 {3} {0}} {9 {6} {8}}} {8 {6 {1} {2}}}}) -> [3 0 6 8 1 2]", "(leaves {1 {6} {2}}) -> [6 2]", "(leaves {6 {6}}) -> [6]", "(leaves {4}) -> [4]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.657645, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {4 {0 {2 {2}}} {4}}) -> [2 4]", "(leaves {9}) -> [9]", "(leaves {}) -> []", "(leaves {6 {4} {8 {5} {4}}}) -> [4 5 4]"], "name": "leaves"}
{"time": 0.809195, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2 {5} {9}}) -> [5 9]", "(leaves {}) -> []", "(leaves {8 {7 {8 {9} {6}} {3}} {4 {4} {2 {8} {2}}}}) -> [9 6 3 4 8 2]", "(leaves {6 {7 {4}}}) -> [4]", "(leaves {9}) -> [9]"], "name": "leaves"}
{"time": 0.90748, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4 {3 {8} {5}}}) -> [8 5]", "(leaves {3 {9 {7 {0}} {1 {7}}}}) -> [0 7]", "(leaves {}) -> []", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.93112, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7 {9 {3}} {2}}) -> [3 2]", "(leaves {7}) -> [7]", "(leaves {7 {9}}) -> [9]", "(leaves {3 {7}}) -> [7]"], "name": "leaves"}
{"time": 0.889619, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9 {4} {7}}) -> [4 7]", "(leaves {3 {4}}) -> [4]", "(leaves {7 {0} {6 {9} {5}}}) -> [0 9 5]", "(leaves {4}) -> [4]", "(leaves {2}) -> [2]"], "name": "leaves"}
{"time": 0.852674, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6 {4 {5}}}) -> [5]", "(leaves {2}) -> [2]", "(leaves {}) -> []", "(leaves {3 {8} {4}}) -> [8 4]", "(leaves {3 {6}}) -> [6]"], "name": "leaves"}
{"time": 0.813046, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {3 {9}} {5 {8}}}) -> [9 8]", "(leaves {8 {0}}) -> [0]", "(leaves {7}) -> [7]", "(leaves {5 {9} {3 {8}}}) -> [9 8]", "(leaves {0 {5 {6} {6}} {7 {4} {7}}}) -> [6 6 4 7]"], "name": "leaves"}
{"time": 0.672622, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0 {8 {3} {1 {8}}}}) -> [3 8]", "(leaves {8 {2 {5 {5}}} {5}}) -> [5 5]", "(leaves {6 {3 {0 {4} {6}} {9 {0}}} {4 {9 {5} {8}}}}) -> [4 6 0 5 8]", "(leaves {6 {1} {6}}) -> [1 6]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.663375, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3 {7} {1}}) -> [7 1]", "(leaves {8 {4}}) -> [4]", "(leaves {0 {9} {1 {7 {1} {2}}}}) -> [9 1 2]", "(leaves {3 {0 {5 {9} {8}}}}) -> [9 8]"], "name": "leaves"}
{"time": 0.898646, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2 {3 {3 {7}}} {4 {8 {7} {3}}}}) -> [7 7 3]", "(leaves {4}) -> [4]", "(leaves {1}) -> [1]", "(leaves {}) -> []", "(leaves {2 {7 {0}}}) -> [0]"], "name": "leaves"}
{"time": 0.860992, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {8} {5}}) -> [8 5]", "(leaves {4}) -> [4]", "(leaves {}) -> []", "(leaves {6 {2 {1 {7} {0}}}}) -> [7 0]", "(leaves {2 {5} {0}}) -> [5 0]"], "name": "leaves"}
{"time": 0.578107, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {7 {7 {2}} {2 {9} {4}}}) -> [2 9 4]", "(leaves {9 {3}}) -> [3]", "(leaves {5 {8 {3} {1}} {4 {5}}}) -> [3 1 5]", "(leaves {3 {9} {4 {9} {1}}}) -> [9 9 1]"], "name": "leaves"}
{"time": 0.540539, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {9}) -> [9]", "(leaves {8}) -> [8]", "(leaves {5 {8 {8 {4} {1}}} {7}}) -> [4 1 7]", "(leaves {9 {2}}) -> [2]"], "name": "leaves"}
{"time": 0.925805, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8 {5} {0}}) -> [5 0]", "(leaves {}) -> []", "(leaves {5 {3}}) -> [3]", "(leaves {5 {5}}) -> [5]"], "name": "leaves"}
{"time": 0.849752, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3 {5}}) -> [5]", "(leaves {5 {1}}) -> [1]", "(leaves {6}) -> [6]", "(leaves {9 {4 {2} {2}}}) -> [2 2]"], "name": "leaves"}
{"time": 0.906717, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {}) -> []", "(leaves {9 {9 {0 {7} {3}}}}) -> [7 3]", "(leaves {6 {1} {8 {2} {1}}}) -> [1 2 1]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.654744, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (cons (value (car (children b))) [])) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {0 {1}}) -> [1]", "(leaves {3 {2}}) -> [2]"], "name": "leaves"}
{"time": 0.573168, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {4 {4}}) -> [4]", "(leaves {2 {9} {8}}) -> [9 8]", "(leaves {5}) -> [5]", "(leaves {8}) -> [8]"], "name": "leaves"}
{"time": 0.878798, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0 {3 {9}} {3 {4}}}) -> [9 4]", "(leaves {9 {6 {9}}}) -> [9]", "(leaves {6}) -> [6]", "(leaves {}) -> []", "(leaves {5 {9 {2 {6} {9}}} {9}}) -> [6 9 9]"], "name": "leaves"}
{"time": 0.716827, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2 {8 {0} {1}} {2}}) -> [0 1 2]", "(leaves {0 {3} {3}}) -> [3 3]", "(leaves {2 {0} {1}}) -> [0 1]", "(leaves {}) -> []", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.827657, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6 {7}}) -> [7]", "(leaves {}) -> []", "(leaves {4 {7 {7} {6}}}) -> [7 6]", "(leaves {3 {2 {5 {4} {2}} {4 {5}}} {7 {5 {9} {1}} {5}}}) -> [4 2 5 9 1 5]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 1.042423, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7 {1 {5} {9}} {6 {3} {0}}}) -> [5 9 3 0]", "(leaves {8 {9} {1}}) -> [9 1]", "(leaves {2 {1 {2} {5}} {8}}) -> [2 5 8]"], "name": "leaves"}
{"time": 0.746276, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {1 {2 {0}} {5}}) -> [0 5]", "(leaves {2}) -> [2]", "(leaves {8 {3 {5 {1} {7}} {1 {3} {4}}} {3 {5 {9}}}}) -> [1 7 3 4 9]", "(leaves {}) -> []", "(leaves {1 {7 {6}} {4}}) -> [6 4]"], "name": "leaves"}
{"time": 0.535305, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {9 {6 {0}}}}) -> [0]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1 {9}}) -> [9]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.76874, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {1 {9} {5 {3 {7}} {7}}}) -> [9 7 7]", "(leaves {8 {9} {9}}) -> [9 9]", "(leaves {1 {2}}) -> [2]", "(leaves {4 {9}}) -> [9]", "(leaves {1 {9 {2} {9 {9} {6}}} {0}}) -> [2 9 6 0]"], "name": "leaves"}
{"time": 0.674145, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {2 {2 {1}} {6 {6 {2} {3}}}}) -> [1 2 3]", "(leaves {}) -> []", "(leaves {5 {7} {7 {1}}}) -> [7 1]", "(leaves {0}) -> [0]"], "name": "leaves"}
{"time": 0.760286, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6 {2} {3}}) -> [2 3]", "(leaves {8 {8 {3 {3} {0}} {2}} {3 {2 {9}} {2 {5}}}}) -> [3 0 2 9 5]", "(leaves {6}) -> [6]", "(leaves {1 {7 {3} {5}} {4 {6}}}) -> [3 5 6]"], "name": "leaves"}
{"time": 0.711731, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {7 {2}}) -> [2]", "(leaves {9}) -> [9]", "(leaves {}) -> []", "(leaves {3 {4} {1}}) -> [4 1]"], "name": "leaves"}
{"time": 0.6977, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {5 {9} {0}}) -> [9 0]"], "name": "leaves"}
{"time": 0.791898, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2 {8 {0}} {5 {0} {2}}}) -> [0 0 2]", "(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.839939, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9 {0 {5} {9}}}) -> [5 9]", "(leaves {1 {7}}) -> [7]", "(leaves {4 {6} {3}}) -> [6 3]", "(leaves {}) -> []", "(leaves {1 {9} {3}}) -> [9 3]"], "name": "leaves"}
{"time": 0.933353, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9 {0 {0 {1} {7}}} {4}}) -> [1 7 4]", "(leaves {}) -> []", "(leaves {3 {1 {1}}}) -> [1]", "(leaves {6 {8}}) -> [8]", "(leaves {7 {5 {1 {3}}} {3}}) -> [3 3]"], "name": "leaves"}
{"time": 0.755431, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9 {3 {2}} {8}}) -> [2 8]", "(leaves {}) -> []", "(leaves {7 {3}}) -> [3]", "(leaves {9}) -> [9]", "(leaves {5 {4 {1} {0 {9} {4}}}}) -> [1 9 4]"], "name": "leaves"}
{"time": 1.086804, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {1 {5 {7 {6} {1}} {2 {4}}}}) -> [6 1 4]", "(leaves {1 {5}}) -> [5]", "(leaves {2 {8 {2 {5} {4}}}}) -> [5 4]", "(leaves {7 {3 {8} {8}} {4}}) -> [8 8 4]", "(leaves {9 {7}}) -> [7]"], "name": "leaves"}
{"time": 0.735518, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {0 {6}}) -> [6]", "(leaves {4 {6 {0 {9}}}}) -> [9]", "(leaves {3}) -> [3]", "(leaves {2}) -> [2]"], "name": "leaves"}
{"time": 0.491849, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2 {2 {8}} {4 {3}}}) -> [8 3]", "(leaves {9}) -> [9]", "(leaves {4}) -> [4]", "(leaves {7 {2} {2 {5} {2}}}) -> [2 5 2]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.466497, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {9}) -> [9]", "(leaves {}) -> []", "(leaves {9 {8} {7}}) -> [8 7]", "(leaves {8 {0}}) -> [0]"], "name": "leaves"}
{"time": 0.930318, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {7 {9}}) -> [9]", "(leaves {7}) -> [7]", "(leaves {0}) -> [0]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.515086, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0 {8} {9}}) -> [8 9]", "(leaves {9 {8}}) -> [8]", "(leaves {3}) -> [3]", "(leaves {8 {4 {6} {1 {0} {4}}}}) -> [6 0 4]", "(leaves {1 {1}}) -> [1]"], "name": "leaves"}
{"time": 1.260312, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9 {2 {2} {1}} {0 {3} {0}}}) -> [2 1 3 0]", "(leaves {5 {0 {9} {6}}}) -> [9 6]", "(leaves {}) -> []", "(leaves {2 {1} {4 {1}}}) -> [1 1]", "(leaves {3 {0 {0} {8}}}) -> [0 8]"], "name": "leaves"}
{"time": 1.303911, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7 {3 {7} {5 {1} {9}}}}) -> [7 1 9]", "(leaves {9 {5}}) -> [5]", "(leaves {3 {5 {3} {8}}}) -> [3 8]", "(leaves {5}) -> [5]"], "name": "leaves"}
{"time": 1.20846, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {6 {3}}) -> [3]", "(leaves {}) -> []", "(leaves {6 {4 {5}}}) -> [5]", "(leaves {9 {6 {1 {3} {7}}} {2 {5 {6} {4}}}}) -> [3 7 6 4]"], "name": "leaves"}
{"time": 0.480136, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {3 {9}}) -> [9]", "(leaves {4 {2}}) -> [2]", "(leaves {4 {7 {0} {1 {5} {9}}} {5 {0}}}) -> [0 5 9 0]", "(leaves {0}) -> [0]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 1.226861, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {4 {7 {6} {8}} {1}}) -> [6 8 1]", "(leaves {0 {7 {8 {1}} {7 {6}}} {7}}) -> [1 6 7]", "(leaves {1 {3 {7}} {3}}) -> [7 3]", "(leaves {7 {3}}) -> [3]", "(leaves {4}) -> [4]"], "name": "leaves"}
{"time": 0.522975, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2 {5} {7 {1} {1}}}) -> [5 1 1]", "(leaves {7 {3} {6 {8 {8} {7}}}}) -> [3 8 7]", "(leaves {9 {5}}) -> [5]", "(leaves {3 {0}}) -> [0]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.50504, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5 {0} {3 {6 {2}} {2}}}) -> [0 2 2]", "(leaves {}) -> []", "(leaves {1 {0}}) -> [0]", "(leaves {6 {1}}) -> [1]", "(leaves {2 {3} {5}}) -> [3 5]"], "name": "leaves"}
{"time": 0.90606, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {0}}) -> [0]", "(leaves {0}) -> [0]", "(leaves {3}) -> [3]", "(leaves {6 {1}}) -> [1]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 1.221275, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {4 {6 {1}} {2}}) -> [1 2]", "(leaves {6 {4}}) -> [4]", "(leaves {9 {7 {9 {9} {8}}} {1}}) -> [9 8 1]", "(leaves {7 {3} {8 {7 {9}}}}) -> [3 9]", "(leaves {8}) -> [8]"], "name": "leaves"}
{"time": 1.086225, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6 {0}}) -> [0]", "(leaves {8 {6} {0}}) -> [6 0]", "(leaves {6}) -> [6]", "(leaves {5}) -> [5]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 1.334023, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {4 {5 {5 {4} {9}} {8 {2}}} {6}}) -> [4 9 2 6]", "(leaves {2 {7 {3}} {5 {8} {4}}}) -> [3 8 4]", "(leaves {1 {7}}) -> [7]", "(leaves {}) -> []", "(leaves {9 {0 {4}}}) -> [4]"], "name": "leaves"}
{"time": 1.152246, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5 {0} {4}}) -> [0 4]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8 {4 {0} {6}} {8}}) -> [0 6 8]"], "name": "leaves"}
{"time": 1.061828, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2 {4 {6} {9}}}) -> [6 9]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7 {7} {4}}) -> [7 4]", "(leaves {0 {9}}) -> [9]"], "name": "leaves"}
{"time": 0.324858, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0 {0}}) -> [0]", "(leaves {2 {1} {6}}) -> [1 6]", "(leaves {6 {0 {0} {6}} {0 {6} {4}}}) -> [0 6 6 4]", "(leaves {3 {1}}) -> [1]", "(leaves {6 {3}}) -> [3]"], "name": "leaves"}
