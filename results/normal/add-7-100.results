{"name": "add", "examples": ["(add [] 8) -> []", "(add [1 0 5 4] 9) -> [10 9 14 13]", "(add [] 8) -> []", "(add [8 8 0 7 2] 2) -> [10 10 2 9 4]", "(add [1 3 1 6] 1) -> [2 4 2 7]", "(add [9 5 3] 2) -> [11 7 5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.032508}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [] 1) -> []", "(add [4 6 7] 8) -> [12 14 15]", "(add [3 1 3] 5) -> [8 6 8]", "(add [7 5 6] 7) -> [14 12 13]", "(add [3 2 6 3] 9) -> [12 11 15 12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.034559}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [] 5) -> []", "(add [9 3 8 3 6] 2) -> [11 5 10 5 8]", "(add [7 8 2] 7) -> [14 15 9]", "(add [7] 4) -> [11]", "(add [] 5) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.039184}
{"name": "add", "examples": ["(add [] 0) -> []", "(add [1 9] 5) -> [6 14]", "(add [7 3 6 6 6] 0) -> [7 3 6 6 6]", "(add [1 3 0 4] 0) -> [1 3 0 4]", "(add [5 6 0 2 5] 1) -> [6 7 1 3 6]", "(add [7 5] 1) -> [8 6]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.040552}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [] 2) -> []", "(add [2] 4) -> [6]", "(add [3 9] 2) -> [5 11]", "(add [2 6 3 9 5] 5) -> [7 11 8 14 10]", "(add [1 5 4 8 9] 5) -> [6 10 9 13 14]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.04661}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [5 7 5 6] 9) -> [14 16 14 15]", "(add [7 7 4 0 4] 7) -> [14 14 11 7 11]", "(add [5 1 1 3 9] 7) -> [12 8 8 10 16]", "(add [5] 0) -> [5]", "(add [9 6] 9) -> [18 15]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.045532}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [3 6 2 9 4] 8) -> [11 14 10 17 12]", "(add [2 8 9] 4) -> [6 12 13]", "(add [0 7] 7) -> [7 14]", "(add [] 6) -> []", "(add [] 8) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.045304}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [9 9 1 0 5] 8) -> [17 17 9 8 13]", "(add [0 0 7] 0) -> [0 0 7]", "(add [1 3 6 8 4] 0) -> [1 3 6 8 4]", "(add [5 0] 6) -> [11 6]", "(add [2 4 8 8] 6) -> [8 10 14 14]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.035946}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [6] 9) -> [15]", "(add [3] 1) -> [4]", "(add [1 3 2] 1) -> [2 4 3]", "(add [1 0 0] 1) -> [2 1 1]", "(add [] 8) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.033487}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [1 3] 5) -> [6 8]", "(add [2 9 4] 5) -> [7 14 9]", "(add [8 0 8] 8) -> [16 8 16]", "(add [8 0 6 3] 7) -> [15 7 13 10]", "(add [2 8 1] 3) -> [5 11 4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.042258}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [5 5 0 6] 2) -> [7 7 2 8]", "(add [5 8 2 6 8] 3) -> [8 11 5 9 11]", "(add [] 8) -> []", "(add [1 6] 8) -> [9 14]", "(add [8 1] 7) -> [15 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.046926}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [] 6) -> []", "(add [4 0 1 8] 8) -> [12 8 9 16]", "(add [5] 6) -> [11]", "(add [] 6) -> []", "(add [] 1) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.049095}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [1 7] 1) -> [2 8]", "(add [7 4 7 7] 9) -> [16 13 16 16]", "(add [5 1] 6) -> [11 7]", "(add [5 7] 6) -> [11 13]", "(add [] 2) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.052746}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [4 6] 7) -> [11 13]", "(add [0 1] 4) -> [4 5]", "(add [7] 0) -> [7]", "(add [9 2 5] 7) -> [16 9 12]", "(add [3] 9) -> [12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.036799}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [3] 9) -> [12]", "(add [1 1 0 3] 2) -> [3 3 2 5]", "(add [9] 4) -> [13]", "(add [5 2 4 1] 6) -> [11 8 10 7]", "(add [] 3) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031484}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [6 8] 1) -> [7 9]", "(add [1 9 2 5 3] 0) -> [1 9 2 5 3]", "(add [5 9] 1) -> [6 10]", "(add [1 8] 1) -> [2 9]", "(add [2 6 2] 0) -> [2 6 2]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.045925}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [1 0 6 4 6] 0) -> [1 0 6 4 6]", "(add [] 7) -> []", "(add [] 5) -> []", "(add [] 6) -> []", "(add [] 2) -> []"], "solution": "(let add (let a (lambda (c b) c) _) _)", "time": 0.000629}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [8 7] 8) -> [16 15]", "(add [4 3 2 6 1] 2) -> [6 5 4 8 3]", "(add [9 9 4 7 2] 9) -> [18 18 13 16 11]", "(add [4 8 5 6] 1) -> [5 9 6 7]", "(add [4] 3) -> [7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.030672}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [8 7] 1) -> [9 8]", "(add [3] 9) -> [12]", "(add [] 6) -> []", "(add [] 1) -> []", "(add [3] 6) -> [9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.038357}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [7 5] 0) -> [7 5]", "(add [9] 8) -> [17]", "(add [1 5] 2) -> [3 7]", "(add [7 9 6 5 2] 6) -> [13 15 12 11 8]", "(add [1] 4) -> [5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.035827}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [3 1 3 6] 0) -> [3 1 3 6]", "(add [2 3 5] 8) -> [10 11 13]", "(add [9 6 9 3 6] 9) -> [18 15 18 12 15]", "(add [1 0 9] 5) -> [6 5 14]", "(add [6] 1) -> [7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.037745}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [6 8] 3) -> [9 11]", "(add [8 4 4 3] 3) -> [11 7 7 6]", "(add [6 8] 1) -> [7 9]", "(add [9] 5) -> [14]", "(add [4 4] 5) -> [9 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.033743}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [0] 7) -> [7]", "(add [6 5 5] 6) -> [12 11 11]", "(add [2 8] 4) -> [6 12]", "(add [4 5 9 7] 6) -> [10 11 15 13]", "(add [1] 6) -> [7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.033728}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [] 8) -> []", "(add [8 2] 8) -> [16 10]", "(add [4 6 3] 1) -> [5 7 4]", "(add [9 4] 4) -> [13 8]", "(add [7 7 7] 9) -> [16 16 16]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.038126}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [0 5] 6) -> [6 11]", "(add [2 7 4 8 0] 5) -> [7 12 9 13 5]", "(add [1 8 7 9] 5) -> [6 13 12 14]", "(add [9 4] 0) -> [9 4]", "(add [0 6 9 9 2] 8) -> [8 14 17 17 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.03824}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [1] 1) -> [2]", "(add [9] 0) -> [9]", "(add [1 0 2 6] 0) -> [1 0 2 6]", "(add [0 5 2] 0) -> [0 5 2]", "(add [2 7] 2) -> [4 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.045732}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [] 0) -> []", "(add [] 7) -> []", "(add [3 0] 9) -> [12 9]", "(add [] 8) -> []", "(add [1 1 8 2] 2) -> [3 3 10 4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.052633}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [] 0) -> []", "(add [8] 4) -> [12]", "(add [3 9 5 0] 1) -> [4 10 6 1]", "(add [3 8] 5) -> [8 13]", "(add [0] 6) -> [6]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.037233}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [6 9 0 0 5] 2) -> [8 11 2 2 7]", "(add [6 4] 4) -> [10 8]", "(add [3 4 1 0 7] 3) -> [6 7 4 3 10]", "(add [] 7) -> []", "(add [5 1 8 1 4] 0) -> [5 1 8 1 4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.039608}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [3 8 0] 9) -> [12 17 9]", "(add [4 0 7] 5) -> [9 5 12]", "(add [8 6 9 2 6] 4) -> [12 10 13 6 10]", "(add [7 0] 6) -> [13 6]", "(add [2] 8) -> [10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.032284}
{"name": "add", "examples": ["(add [] 0) -> []", "(add [3 8] 0) -> [3 8]", "(add [0 5 1 9 0] 2) -> [2 7 3 11 2]", "(add [] 2) -> []", "(add [5] 6) -> [11]", "(add [3 2 7] 6) -> [9 8 13]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031274}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [7] 4) -> [11]", "(add [0 6] 3) -> [3 9]", "(add [0 6 0 6] 5) -> [5 11 5 11]", "(add [] 4) -> []", "(add [2 4] 4) -> [6 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.044454}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [0 9 8 3] 8) -> [8 17 16 11]", "(add [] 1) -> []", "(add [7 9 8 0 7] 4) -> [11 13 12 4 11]", "(add [3 1 9 4 2] 7) -> [10 8 16 11 9]", "(add [2 4] 0) -> [2 4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.033839}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [2 5 7] 7) -> [9 12 14]", "(add [2 8] 8) -> [10 16]", "(add [] 1) -> []", "(add [0 7] 7) -> [7 14]", "(add [] 4) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.041763}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [] 1) -> []", "(add [6 9 6] 5) -> [11 14 11]", "(add [6] 6) -> [12]", "(add [4] 3) -> [7]", "(add [3 4 5 3 4] 7) -> [10 11 12 10 11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031435}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [3 7] 5) -> [8 12]", "(add [1 2] 5) -> [6 7]", "(add [0] 1) -> [1]", "(add [6 7] 8) -> [14 15]", "(add [3 0] 2) -> [5 2]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.034704}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [8 1 2 8] 9) -> [17 10 11 17]", "(add [5 5 0] 3) -> [8 8 3]", "(add [0 7 1 5 3] 9) -> [9 16 10 14 12]", "(add [3 8 8] 8) -> [11 16 16]", "(add [7 2] 9) -> [16 11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.033493}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [2 4 6] 0) -> [2 4 6]", "(add [2] 9) -> [11]", "(add [] 5) -> []", "(add [] 6) -> []", "(add [4 0 5 6 8] 9) -> [13 9 14 15 17]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.049195}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [3 9 6 8 1] 1) -> [4 10 7 9 2]", "(add [5 0 4] 8) -> [13 8 12]", "(add [1 6 4 2 2] 7) -> [8 13 11 9 9]", "(add [7 8 3] 2) -> [9 10 5]", "(add [6 4 9 4] 6) -> [12 10 15 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.035771}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [8 9 2 5] 3) -> [11 12 5 8]", "(add [6 7] 3) -> [9 10]", "(add [8 4 2 3] 4) -> [12 8 6 7]", "(add [0 9 1] 8) -> [8 17 9]", "(add [] 2) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.038452}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [5 8 9 7] 2) -> [7 10 11 9]", "(add [] 4) -> []", "(add [6 7 4 4 5] 7) -> [13 14 11 11 12]", "(add [4 5 2] 4) -> [8 9 6]", "(add [6 0 3] 5) -> [11 5 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.034266}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [] 6) -> []", "(add [6] 9) -> [15]", "(add [3 4] 3) -> [6 7]", "(add [2 4 9 0 3] 5) -> [7 9 14 5 8]", "(add [] 1) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.050718}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [3 1] 4) -> [7 5]", "(add [3 1 3 8 1] 9) -> [12 10 12 17 10]", "(add [4 0 0 2 5] 2) -> [6 2 2 4 7]", "(add [6 9] 5) -> [11 14]", "(add [8] 7) -> [15]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.049248}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [2 3 7 6 6] 7) -> [9 10 14 13 13]", "(add [8 1] 3) -> [11 4]", "(add [5 2 8 5] 9) -> [14 11 17 14]", "(add [6 0] 7) -> [13 7]", "(add [3] 9) -> [12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.046329}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [] 3) -> []", "(add [2 9 1] 5) -> [7 14 6]", "(add [] 3) -> []", "(add [6 6 0 2] 3) -> [9 9 3 5]", "(add [8 8 0] 1) -> [9 9 1]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.037212}
{"name": "add", "examples": ["(add [] 0) -> []", "(add [] 5) -> []", "(add [9] 2) -> [11]", "(add [] 7) -> []", "(add [7 6 6 7] 1) -> [8 7 7 8]", "(add [] 0) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.049326}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [5 3 7] 6) -> [11 9 13]", "(add [] 2) -> []", "(add [] 8) -> []", "(add [3 2] 0) -> [3 2]", "(add [2 4 5] 8) -> [10 12 13]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.051679}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [0 6 3] 1) -> [1 7 4]", "(add [2 1 6 2 4] 3) -> [5 4 9 5 7]", "(add [4 9 9 5] 2) -> [6 11 11 7]", "(add [5 9 0 1 5] 3) -> [8 12 3 4 8]", "(add [7 3] 4) -> [11 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.049966}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [7] 3) -> [10]", "(add [2 0] 3) -> [5 3]", "(add [1 5 2 4] 1) -> [2 6 3 5]", "(add [3 3] 1) -> [4 4]", "(add [0 5 7 2 7] 9) -> [9 14 16 11 16]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.030099}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [6 0] 4) -> [10 4]", "(add [9 7 5 4] 3) -> [12 10 8 7]", "(add [8] 0) -> [8]", "(add [5] 8) -> [13]", "(add [7 3] 5) -> [12 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.030737}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [9 7] 3) -> [12 10]", "(add [3 4] 1) -> [4 5]", "(add [4 7 6 4 6] 6) -> [10 13 12 10 12]", "(add [] 3) -> []", "(add [] 8) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.052409}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [1 6 2] 7) -> [8 13 9]", "(add [7] 2) -> [9]", "(add [5 4 4 2] 2) -> [7 6 6 4]", "(add [] 8) -> []", "(add [9 0 5] 2) -> [11 2 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031238}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [9 0 1 0] 8) -> [17 8 9 8]", "(add [] 6) -> []", "(add [] 4) -> []", "(add [] 7) -> []", "(add [1 6 7] 9) -> [10 15 16]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031606}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [5] 1) -> [6]", "(add [4] 2) -> [6]", "(add [0 9 7 6 9] 0) -> [0 9 7 6 9]", "(add [8 4 7 7] 6) -> [14 10 13 13]", "(add [8 0] 0) -> [8 0]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.033556}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [8 1 3] 9) -> [17 10 12]", "(add [3 5 2 7] 9) -> [12 14 11 16]", "(add [7 9] 4) -> [11 13]", "(add [] 8) -> []", "(add [6 2 2] 2) -> [8 4 4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.051996}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [1 5 0] 1) -> [2 6 1]", "(add [5] 3) -> [8]", "(add [9 9 8] 6) -> [15 15 14]", "(add [1] 6) -> [7]", "(add [1 1 6 2 3] 4) -> [5 5 10 6 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.045238}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [6] 8) -> [14]", "(add [4 0 2 0] 6) -> [10 6 8 6]", "(add [3] 0) -> [3]", "(add [3 6 0 8] 9) -> [12 15 9 17]", "(add [0 4] 8) -> [8 12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.033641}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [5 4 0 8] 3) -> [8 7 3 11]", "(add [] 8) -> []", "(add [9 5 8 6] 6) -> [15 11 14 12]", "(add [2 8 2 3] 0) -> [2 8 2 3]", "(add [] 6) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.040692}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [5 3] 1) -> [6 4]", "(add [7] 9) -> [16]", "(add [4 3 0] 0) -> [4 3 0]", "(add [7 5 9] 5) -> [12 10 14]", "(add [] 7) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.033788}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [5 1 1 8 5] 8) -> [13 9 9 16 13]", "(add [6 0] 6) -> [12 6]", "(add [1 6] 6) -> [7 12]", "(add [5 8 8 9] 8) -> [13 16 16 17]", "(add [7 8 6] 0) -> [7 8 6]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031444}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [] 6) -> []", "(add [] 4) -> []", "(add [8] 3) -> [11]", "(add [7 0 0] 5) -> [12 5 5]", "(add [] 8) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.046916}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [2 5 2] 4) -> [6 9 6]", "(add [] 3) -> []", "(add [] 9) -> []", "(add [4 4] 1) -> [5 5]", "(add [0 0 4 8 5] 0) -> [0 0 4 8 5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.048044}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [8 0 7 5 7] 1) -> [9 1 8 6 8]", "(add [6 3] 7) -> [13 10]", "(add [5 5 6 9] 9) -> [14 14 15 18]", "(add [5] 1) -> [6]", "(add [] 4) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.034438}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [2] 6) -> [8]", "(add [6 6 8] 5) -> [11 11 13]", "(add [5 8 4 0 9] 8) -> [13 16 12 8 17]", "(add [8 8 8 4] 0) -> [8 8 8 4]", "(add [2 6 8] 8) -> [10 14 16]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.042984}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [7 6 9] 4) -> [11 10 13]", "(add [1 5 5 1] 0) -> [1 5 5 1]", "(add [3 2 2 7 5] 8) -> [11 10 10 15 13]", "(add [3 4 6 1 3] 0) -> [3 4 6 1 3]", "(add [8] 0) -> [8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.046335}
{"name": "add", "examples": ["(add [] 0) -> []", "(add [3] 5) -> [8]", "(add [6 0] 8) -> [14 8]", "(add [] 4) -> []", "(add [1] 2) -> [3]", "(add [3 2] 4) -> [7 6]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.030945}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [0 9] 9) -> [9 18]", "(add [1] 3) -> [4]", "(add [5 9 8] 6) -> [11 15 14]", "(add [1 6 0 9 6] 9) -> [10 15 9 18 15]", "(add [2] 3) -> [5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.030025}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [6] 3) -> [9]", "(add [8 6] 6) -> [14 12]", "(add [] 3) -> []", "(add [2 4 1] 8) -> [10 12 9]", "(add [6 1 9 8 6] 3) -> [9 4 12 11 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.049033}
{"name": "add", "examples": ["(add [] 0) -> []", "(add [2 3] 7) -> [9 10]", "(add [5 9 9 3] 7) -> [12 16 16 10]", "(add [5] 8) -> [13]", "(add [4 7 9] 9) -> [13 16 18]", "(add [9 0] 8) -> [17 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.051717}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [6 2 9] 8) -> [14 10 17]", "(add [0 4 1] 9) -> [9 13 10]", "(add [9] 5) -> [14]", "(add [7 4] 8) -> [15 12]", "(add [7 0] 9) -> [16 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031678}
{"name": "add", "examples": ["(add [] 0) -> []", "(add [2 6 8 1 9] 4) -> [6 10 12 5 13]", "(add [5 9 4] 2) -> [7 11 6]", "(add [9 9] 4) -> [13 13]", "(add [9] 1) -> [10]", "(add [0] 0) -> [0]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.051499}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [9] 3) -> [12]", "(add [3 7 8 0 0] 8) -> [11 15 16 8 8]", "(add [7 9] 0) -> [7 9]", "(add [] 9) -> []", "(add [9 4 1 9] 9) -> [18 13 10 18]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.049346}
{"name": "add", "examples": ["(add [] 0) -> []", "(add [9 5 6] 2) -> [11 7 8]", "(add [2 8 3] 7) -> [9 15 10]", "(add [] 3) -> []", "(add [7] 3) -> [10]", "(add [6 3 5 8] 7) -> [13 10 12 15]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.034018}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [2 2] 8) -> [10 10]", "(add [6 8 5] 0) -> [6 8 5]", "(add [] 9) -> []", "(add [3 0] 9) -> [12 9]", "(add [3 3 7 4] 6) -> [9 9 13 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.048188}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [1] 4) -> [5]", "(add [4 0 4] 5) -> [9 5 9]", "(add [] 2) -> []", "(add [2 0 6 0 9] 9) -> [11 9 15 9 18]", "(add [0 3] 4) -> [4 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.041705}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [4 7 0 9 2] 7) -> [11 14 7 16 9]", "(add [5 8 6] 2) -> [7 10 8]", "(add [8 3 7 7 1] 9) -> [17 12 16 16 10]", "(add [5 0 0 4] 4) -> [9 4 4 8]", "(add [0 3 4 3] 8) -> [8 11 12 11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.038841}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [5] 0) -> [5]", "(add [8] 1) -> [9]", "(add [0 8] 9) -> [9 17]", "(add [] 0) -> []", "(add [1 8 9 6 6] 4) -> [5 12 13 10 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.032291}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [] 8) -> []", "(add [4] 4) -> [8]", "(add [0 4] 4) -> [4 8]", "(add [4] 2) -> [6]", "(add [6 6] 5) -> [11 11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031628}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [2 1 0 5] 0) -> [2 1 0 5]", "(add [4 4 5 7 7] 8) -> [12 12 13 15 15]", "(add [7 5] 4) -> [11 9]", "(add [6] 1) -> [7]", "(add [6] 6) -> [12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031607}
{"name": "add", "examples": ["(add [] 0) -> []", "(add [] 0) -> []", "(add [] 2) -> []", "(add [8 9] 8) -> [16 17]", "(add [] 8) -> []", "(add [0] 8) -> [8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.053102}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [2 4] 5) -> [7 9]", "(add [5] 2) -> [7]", "(add [6] 3) -> [9]", "(add [] 8) -> []", "(add [8] 3) -> [11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.048743}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [] 7) -> []", "(add [0 5 3 2] 3) -> [3 8 6 5]", "(add [0 8 2] 9) -> [9 17 11]", "(add [] 8) -> []", "(add [8 9] 8) -> [16 17]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.051694}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [9 2 3 4 6] 8) -> [17 10 11 12 14]", "(add [2] 6) -> [8]", "(add [1] 2) -> [3]", "(add [1 4 7 7] 1) -> [2 5 8 8]", "(add [] 0) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031626}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [6 5 1 2] 1) -> [7 6 2 3]", "(add [7 2 6] 7) -> [14 9 13]", "(add [5 6 7] 0) -> [5 6 7]", "(add [] 1) -> []", "(add [1 7 1 5 4] 9) -> [10 16 10 14 13]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.040707}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [1 1 6 9] 7) -> [8 8 13 16]", "(add [3 6 8 9 6] 4) -> [7 10 12 13 10]", "(add [] 5) -> []", "(add [6] 9) -> [15]", "(add [4 1 6 0] 1) -> [5 2 7 1]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.039567}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [6 8 6 2 2] 6) -> [12 14 12 8 8]", "(add [3 3 9] 6) -> [9 9 15]", "(add [] 2) -> []", "(add [8 3 8] 5) -> [13 8 13]", "(add [0 9] 3) -> [3 12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.050972}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [1 7 0 0 7] 0) -> [1 7 0 0 7]", "(add [3 7 5 5 1] 6) -> [9 13 11 11 7]", "(add [0 9] 7) -> [7 16]", "(add [7 9 3 5 4] 4) -> [11 13 7 9 8]", "(add [4 1 3] 4) -> [8 5 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.032059}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [5 0 5 8 2] 9) -> [14 9 14 17 11]", "(add [2 0 9] 2) -> [4 2 11]", "(add [0 2] 0) -> [0 2]", "(add [9] 9) -> [18]", "(add [8 4 4 2] 5) -> [13 9 9 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.032023}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [6 1 7 5 7] 8) -> [14 9 15 13 15]", "(add [1 4 0] 4) -> [5 8 4]", "(add [0 2 5 7 6] 4) -> [4 6 9 11 10]", "(add [2] 4) -> [6]", "(add [7 8 6 1] 1) -> [8 9 7 2]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.040651}
{"name": "add", "examples": ["(add [] 0) -> []", "(add [1 9 6] 3) -> [4 12 9]", "(add [4] 3) -> [7]", "(add [] 2) -> []", "(add [1] 4) -> [5]", "(add [2] 7) -> [9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.033138}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [8 9 5 7] 1) -> [9 10 6 8]", "(add [5 3] 0) -> [5 3]", "(add [0 7 4 0 4] 1) -> [1 8 5 1 5]", "(add [9 7] 9) -> [18 16]", "(add [] 9) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.032849}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [8 8 6 9 5] 4) -> [12 12 10 13 9]", "(add [] 6) -> []", "(add [5 8 5 4 3] 9) -> [14 17 14 13 12]", "(add [4 5] 6) -> [10 11]", "(add [7] 9) -> [16]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.04495}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [] 0) -> []", "(add [5 0] 1) -> [6 1]", "(add [7 9 1] 2) -> [9 11 3]", "(add [0 5 7 4 5] 6) -> [6 11 13 10 11]", "(add [9 7 0 2 8] 3) -> [12 10 3 5 11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031928}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [3] 5) -> [8]", "(add [9 1 1] 3) -> [12 4 4]", "(add [2 0] 9) -> [11 9]", "(add [5 3 7 9] 0) -> [5 3 7 9]", "(add [9 6 7 6 5] 0) -> [9 6 7 6 5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.054322}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [] 0) -> []", "(add [1 3 8 8] 7) -> [8 10 15 15]", "(add [6 8 4 0] 6) -> [12 14 10 6]", "(add [2 1 6] 3) -> [5 4 9]", "(add [] 0) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.039801}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [8 5] 9) -> [17 14]", "(add [1 4 1 8 7] 3) -> [4 7 4 11 10]", "(add [2] 1) -> [3]", "(add [3 0 7 8] 3) -> [6 3 10 11]", "(add [9] 2) -> [11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.030575}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [8 1 5] 6) -> [14 7 11]", "(add [4 0 3] 7) -> [11 7 10]", "(add [8 8 4] 1) -> [9 9 5]", "(add [] 5) -> []", "(add [1 3 3] 7) -> [8 10 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.030335}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [5 7 0 1] 7) -> [12 14 7 8]", "(add [5 9 0] 4) -> [9 13 4]", "(add [5 0 9 5] 9) -> [14 9 18 14]", "(add [3 9 9 0] 1) -> [4 10 10 1]", "(add [0 8] 5) -> [5 13]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.03016}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [7 7 6 0] 4) -> [11 11 10 4]", "(add [1 9 8 4] 0) -> [1 9 8 4]", "(add [5] 6) -> [11]", "(add [7 9 9 2 4] 3) -> [10 12 12 5 7]", "(add [6 1 8] 1) -> [7 2 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.030296}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [7 9 2] 2) -> [9 11 4]", "(add [4 5 1 9 1] 2) -> [6 7 3 11 3]", "(add [9 2] 0) -> [9 2]", "(add [3 7 1 8] 2) -> [5 9 3 10]", "(add [3 3 8 5] 0) -> [3 3 8 5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.03041}
