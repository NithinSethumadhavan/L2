{"name": "member", "examples": ["(member [] 9) -> #f", "(member [5] 0) -> #f", "(member [4] 3) -> #f", "(member [6 2 0 3 4] 8) -> #f", "(member [9 1 2 6] 6) -> #t", "(member [5 3] 8) -> #f", "(member [0 3 2 1 7] 7) -> #t", "(member [4 4 1] 4) -> #t", "(member [4 2 2] 4) -> #t", "(member [4 7 9 0] 5) -> #f", "(member [8 7 9 2] 8) -> #t", "(member [3 1 4 2] 3) -> #t", "(member [3 8 9 6] 0) -> #f", "(member [3 5 4 2 0] 2) -> #t", "(member [6] 4) -> #f", "(member [7 8 9] 7) -> #t", "(member [] 5) -> #f", "(member [8 7] 8) -> #t", "(member [9 4] 8) -> #f", "(member [4 2 3 6 7] 9) -> #f", "(member [2] 5) -> #f", "(member [3 0 0 9] 7) -> #f", "(member [0 5] 4) -> #f", "(member [1 5 4 7 2] 4) -> #t", "(member [5 8] 0) -> #f", "(member [8 3 9 1 1] 1) -> #t", "(member [1 8 6] 2) -> #f", "(member [] 9) -> #f", "(member [9] 4) -> #f", "(member [2 5 6 6 4] 8) -> #f", "(member [0 3 5] 2) -> #f", "(member [7] 8) -> #f", "(member [5 5] 9) -> #f", "(member [5 2 5 3 0] 6) -> #f", "(member [8 7 1 2] 2) -> #t", "(member [] 4) -> #f", "(member [5 7 1 7 4] 9) -> #f", "(member [4] 4) -> #t", "(member [2] 4) -> #f", "(member [] 3) -> #f", "(member [5 6 3 2] 0) -> #f", "(member [9 7 4 6] 9) -> #t"], "time": 1.364022, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 2) -> #f", "(member [6 7 5 8 8] 8) -> #t", "(member [6 5 2 7] 8) -> #f", "(member [0 4 8 7 2] 4) -> #t", "(member [5 0 4 8 5] 1) -> #f", "(member [6 4] 0) -> #f", "(member [5] 4) -> #f", "(member [2 4 3 6] 3) -> #t", "(member [5 7] 1) -> #f", "(member [] 3) -> #f", "(member [4 3 0 8 1] 1) -> #t", "(member [5 4 2 0 4] 8) -> #f", "(member [7 8 3] 4) -> #f", "(member [6 4] 2) -> #f", "(member [2] 0) -> #f", "(member [8 7] 4) -> #f", "(member [6 1 7] 5) -> #f", "(member [6 2] 6) -> #t", "(member [6 4 6 0] 0) -> #t", "(member [] 3) -> #f", "(member [0 5 1 2] 0) -> #t", "(member [3 3 0 5 9] 2) -> #f", "(member [9 6 6 1] 6) -> #t", "(member [2 1] 6) -> #f", "(member [9 6] 7) -> #f", "(member [] 4) -> #f", "(member [6 4 6 9 1] 2) -> #f", "(member [7 2] 7) -> #t", "(member [] 1) -> #f", "(member [4 9] 4) -> #t", "(member [9 3 6 6 7] 4) -> #f", "(member [2 5 2] 7) -> #f", "(member [] 1) -> #f", "(member [2 6] 8) -> #f", "(member [1 9 7] 9) -> #t", "(member [1 8] 6) -> #f", "(member [6] 1) -> #f", "(member [7] 6) -> #f", "(member [9 8 2] 6) -> #f", "(member [2 2 7 5] 2) -> #t", "(member [1] 9) -> #f", "(member [5 4 8 7 7] 8) -> #t"], "time": 1.383511, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 0) -> #f", "(member [2 0] 2) -> #t", "(member [8 1 6 5] 3) -> #f", "(member [0 9] 7) -> #f", "(member [4 8 1 6 8] 9) -> #f", "(member [8 5] 6) -> #f", "(member [0 4 8] 5) -> #f", "(member [7 6 6 8 4] 0) -> #f", "(member [0 2 2 5] 9) -> #f", "(member [4 5 6] 0) -> #f", "(member [9 1 9] 8) -> #f", "(member [0 9 5 5 7] 6) -> #f", "(member [] 3) -> #f", "(member [6 8 1] 9) -> #f", "(member [4 7 2 0] 5) -> #f", "(member [9 9] 0) -> #f", "(member [3 1 4 4 5] 2) -> #f", "(member [8 1 5] 9) -> #f", "(member [2 1 0 8] 8) -> #t", "(member [6 1] 4) -> #f", "(member [8 5 1 8 9] 6) -> #f", "(member [5 2 8 6] 9) -> #f", "(member [] 9) -> #f", "(member [3] 0) -> #f", "(member [9 3 3 1] 0) -> #f", "(member [] 8) -> #f", "(member [9 9 5 7] 1) -> #f", "(member [8 8] 9) -> #f", "(member [7] 4) -> #f", "(member [7 7 1 8 1] 8) -> #t", "(member [] 4) -> #f", "(member [8] 4) -> #f", "(member [9] 3) -> #f", "(member [3] 1) -> #f", "(member [6] 8) -> #f", "(member [2 3 6 0] 4) -> #f", "(member [2 6 2 1 9] 5) -> #f", "(member [3 3 9] 7) -> #f", "(member [8 3 6] 9) -> #f", "(member [1 1 0] 8) -> #f", "(member [9] 3) -> #f", "(member [9] 9) -> #t"], "time": 1.262766, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (= e (!= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 1) -> #f", "(member [8 2 1] 5) -> #f", "(member [1] 0) -> #f", "(member [5] 7) -> #f", "(member [6 8 5 6 7] 5) -> #t", "(member [2 7] 1) -> #f", "(member [2 9 6 5 9] 6) -> #t", "(member [7 1 4 6 2] 5) -> #f", "(member [8 1 3 9] 8) -> #t", "(member [3 2 0 2] 1) -> #f", "(member [0 0 2 8 0] 5) -> #f", "(member [] 7) -> #f", "(member [] 9) -> #f", "(member [7 0 7 7 4] 3) -> #f", "(member [8 8 7 2 7] 6) -> #f", "(member [] 2) -> #f", "(member [1 8 1 9 2] 0) -> #f", "(member [8 4 0] 0) -> #t", "(member [] 2) -> #f", "(member [3 8 6 6] 7) -> #f", "(member [6] 8) -> #f", "(member [2 4 4 0] 4) -> #t", "(member [3 1] 7) -> #f", "(member [3 0 9 8 2] 3) -> #t", "(member [] 6) -> #f", "(member [2 5 7 5 8] 0) -> #f", "(member [2 7 1 3] 5) -> #f", "(member [4 7 9 9 7] 5) -> #f", "(member [9 5] 5) -> #t", "(member [] 8) -> #f", "(member [8 3] 5) -> #f", "(member [0 7] 1) -> #f", "(member [9 3 6 0 6] 1) -> #f", "(member [0 1 8 4 2] 9) -> #f", "(member [8 5] 0) -> #f", "(member [] 2) -> #f", "(member [3] 7) -> #f", "(member [2 0 9] 4) -> #f", "(member [4 9] 8) -> #f", "(member [5] 8) -> #f", "(member [6 5 3] 9) -> #f", "(member [9 1 5] 6) -> #f"], "time": 1.334564, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 9) -> #f", "(member [8 0] 5) -> #f", "(member [2 5 6 8] 9) -> #f", "(member [7 1 8 5] 6) -> #f", "(member [2 3 1 1 5] 8) -> #f", "(member [1 3 8 3] 7) -> #f", "(member [2 7] 6) -> #f", "(member [0 9 9] 7) -> #f", "(member [0] 0) -> #t", "(member [] 9) -> #f", "(member [] 9) -> #f", "(member [] 2) -> #f", "(member [5] 8) -> #f", "(member [1 1 9 5] 1) -> #t", "(member [8] 5) -> #f", "(member [2 8 3 9] 9) -> #t", "(member [7 1] 1) -> #t", "(member [2 4] 1) -> #f", "(member [6 1 3] 1) -> #t", "(member [4] 3) -> #f", "(member [3 0] 8) -> #f", "(member [7] 7) -> #t", "(member [8 8] 0) -> #f", "(member [5 4] 1) -> #f", "(member [5 3 7] 9) -> #f", "(member [0 1 3] 5) -> #f", "(member [2 9 7 4 4] 8) -> #f", "(member [] 6) -> #f", "(member [4] 1) -> #f", "(member [8 1 4] 0) -> #f", "(member [7 9] 9) -> #t", "(member [8 8 8 9 3] 8) -> #t", "(member [8 9] 7) -> #f", "(member [7 5] 7) -> #t", "(member [6 2 3 6 0] 0) -> #t", "(member [6 9] 5) -> #f", "(member [] 4) -> #f", "(member [] 0) -> #f", "(member [] 1) -> #f", "(member [] 3) -> #f", "(member [9 4] 3) -> #f", "(member [6 9] 4) -> #f"], "time": 1.435545, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 8) -> #f", "(member [8 2 9 9 6] 2) -> #t", "(member [9 7 6] 9) -> #t", "(member [6 2 6 4] 7) -> #f", "(member [6] 3) -> #f", "(member [5 1] 0) -> #f", "(member [0 3] 3) -> #t", "(member [0 4] 8) -> #f", "(member [] 0) -> #f", "(member [] 6) -> #f", "(member [2] 2) -> #t", "(member [0] 6) -> #f", "(member [0 0 0] 8) -> #f", "(member [7] 1) -> #f", "(member [8 0] 0) -> #t", "(member [6 3 0] 3) -> #t", "(member [9 2 8] 7) -> #f", "(member [8 9 6 1 1] 0) -> #f", "(member [] 4) -> #f", "(member [] 2) -> #f", "(member [] 4) -> #f", "(member [] 5) -> #f", "(member [3 5 4 0 1] 6) -> #f", "(member [8 2 7] 4) -> #f", "(member [6 3] 4) -> #f", "(member [2] 7) -> #f", "(member [7 5 3] 1) -> #f", "(member [] 8) -> #f", "(member [2 3] 7) -> #f", "(member [8 6 7] 5) -> #f", "(member [3 7 0] 4) -> #f", "(member [] 9) -> #f", "(member [9 3 6] 5) -> #f", "(member [1 9 7 9 8] 2) -> #f", "(member [7 4 6] 3) -> #f", "(member [2 5 2 5 9] 2) -> #t", "(member [3 8] 7) -> #f", "(member [1] 1) -> #t", "(member [] 8) -> #f", "(member [8 2 6] 3) -> #f", "(member [5 9] 8) -> #f", "(member [0 2 1 3 8] 0) -> #t"], "time": 1.361214, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 8) -> #f", "(member [] 5) -> #f", "(member [9 8 3 5] 5) -> #t", "(member [5 2] 3) -> #f", "(member [] 8) -> #f", "(member [3 2] 6) -> #f", "(member [9 5 6 6] 9) -> #t", "(member [7] 3) -> #f", "(member [5 9 0 6 2] 6) -> #t", "(member [5 3 7] 4) -> #f", "(member [6 6 7] 3) -> #f", "(member [] 7) -> #f", "(member [8] 9) -> #f", "(member [5 6] 1) -> #f", "(member [6] 1) -> #f", "(member [1 3 2] 3) -> #t", "(member [7 8 3 2] 2) -> #t", "(member [9 7 3 3 2] 1) -> #f", "(member [1 3 2 6 9] 9) -> #t", "(member [7 2] 8) -> #f", "(member [4 8 2 0 1] 3) -> #f", "(member [3] 6) -> #f", "(member [1 7 5] 3) -> #f", "(member [] 0) -> #f", "(member [6] 1) -> #f", "(member [9] 5) -> #f", "(member [5 6 4 9] 9) -> #t", "(member [3 2 6 4 4] 4) -> #t", "(member [] 4) -> #f", "(member [2 4 0 9 5] 4) -> #t", "(member [] 9) -> #f", "(member [4 0 2 1] 5) -> #f", "(member [7 1 9 3 9] 3) -> #t", "(member [] 3) -> #f", "(member [3 9] 5) -> #f", "(member [3 6 2] 2) -> #t", "(member [1] 1) -> #t", "(member [7 7] 2) -> #f", "(member [9] 3) -> #f", "(member [] 1) -> #f", "(member [6 7 0 3 4] 1) -> #f", "(member [2 2 3 4 7] 2) -> #t"], "time": 1.322258, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 7) -> #f", "(member [8] 0) -> #f", "(member [2 6] 5) -> #f", "(member [1 4 8] 3) -> #f", "(member [7] 0) -> #f", "(member [3 6 3] 0) -> #f", "(member [0 5 7 6] 1) -> #f", "(member [] 3) -> #f", "(member [] 4) -> #f", "(member [2 3] 1) -> #f", "(member [5 0 8] 3) -> #f", "(member [0 3] 6) -> #f", "(member [4 3] 7) -> #f", "(member [1 6 4] 2) -> #f", "(member [4 2 6 9] 9) -> #t", "(member [] 6) -> #f", "(member [7 2 3 3] 8) -> #f", "(member [2 9] 3) -> #f", "(member [0] 6) -> #f", "(member [] 9) -> #f", "(member [8 3] 4) -> #f", "(member [] 8) -> #f", "(member [8] 8) -> #t", "(member [5 8 9 3] 7) -> #f", "(member [4 3] 0) -> #f", "(member [6 9 6] 4) -> #f", "(member [9 7 2 5] 4) -> #f", "(member [9 2 0 3] 4) -> #f", "(member [1 6 1] 2) -> #f", "(member [7] 1) -> #f", "(member [6 5 3 5 0] 4) -> #f", "(member [6 7 3 7 7] 2) -> #f", "(member [7 9] 4) -> #f", "(member [] 6) -> #f", "(member [1] 8) -> #f", "(member [9 7 5] 9) -> #t", "(member [7 5 7] 5) -> #t", "(member [] 5) -> #f", "(member [5 2 0 3] 8) -> #f", "(member [] 0) -> #f", "(member [4 7 3] 2) -> #f", "(member [0 5 2 9 1] 4) -> #f"], "time": 1.446267, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (= e (!= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 7) -> #f", "(member [9 1 7] 1) -> #t", "(member [0 7] 4) -> #f", "(member [7 6] 7) -> #t", "(member [6] 1) -> #f", "(member [9 7 8] 0) -> #f", "(member [7 6 8] 5) -> #f", "(member [] 7) -> #f", "(member [6 6 7 8 3] 4) -> #f", "(member [9] 4) -> #f", "(member [3 2 9 0] 9) -> #t", "(member [2 4 5] 9) -> #f", "(member [5 4 5 0] 7) -> #f", "(member [6 7 5 3 4] 9) -> #f", "(member [3] 6) -> #f", "(member [3 5 6 9 5] 1) -> #f", "(member [8 6 2 4] 4) -> #t", "(member [9 7 6 8 4] 8) -> #t", "(member [2 4 8 0 9] 7) -> #f", "(member [0 2 1 6 1] 9) -> #f", "(member [1 0 7 6 6] 8) -> #f", "(member [4 1] 8) -> #f", "(member [1] 6) -> #f", "(member [] 7) -> #f", "(member [9] 9) -> #t", "(member [6 3 5 9] 0) -> #f", "(member [5 0] 9) -> #f", "(member [8 7 2 5] 5) -> #t", "(member [0 9] 0) -> #t", "(member [3] 4) -> #f", "(member [6 5] 4) -> #f", "(member [1 4 6 7] 4) -> #t", "(member [2 6 6 2] 3) -> #f", "(member [9 3] 1) -> #f", "(member [9 3 2 2] 4) -> #f", "(member [3] 4) -> #f", "(member [6 5] 9) -> #f", "(member [] 4) -> #f", "(member [9 5 3 9 8] 4) -> #f", "(member [5 0 8 5 6] 9) -> #f", "(member [9 2 4] 1) -> #f", "(member [9 9] 7) -> #f"], "time": 1.540137, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (= e (!= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 1) -> #f", "(member [0 7 3] 9) -> #f", "(member [6] 6) -> #t", "(member [6 9] 0) -> #f", "(member [0 7 4] 0) -> #t", "(member [1] 2) -> #f", "(member [1 5 2 3 3] 2) -> #t", "(member [1 1] 1) -> #t", "(member [9 2 4 3 0] 6) -> #f", "(member [9 8] 5) -> #f", "(member [5 7 7 6 8] 9) -> #f", "(member [] 8) -> #f", "(member [4 7] 1) -> #f", "(member [3] 9) -> #f", "(member [7 6 5 7] 8) -> #f", "(member [3 5 8 9 1] 9) -> #t", "(member [7] 2) -> #f", "(member [4 2 4 7] 5) -> #f", "(member [5 1 8 8 3] 0) -> #f", "(member [6 5 5] 0) -> #f", "(member [] 2) -> #f", "(member [2 3 6] 2) -> #t", "(member [2 9 5 1] 1) -> #t", "(member [3 7 5 8 0] 7) -> #t", "(member [8 1] 5) -> #f", "(member [3 9 1 9] 6) -> #f", "(member [0 8 8] 3) -> #f", "(member [9 5 7 8 0] 1) -> #f", "(member [8] 1) -> #f", "(member [8 4 1] 2) -> #f", "(member [7] 8) -> #f", "(member [0] 6) -> #f", "(member [9 9 2 3 4] 9) -> #t", "(member [8 2 4 3 8] 0) -> #f", "(member [5] 9) -> #f", "(member [] 4) -> #f", "(member [9 0 6 5] 9) -> #t", "(member [6 8 7 4] 6) -> #t", "(member [5] 3) -> #f", "(member [0] 2) -> #f", "(member [7 0 1 9 3] 4) -> #f", "(member [6 1 4 2 1] 9) -> #f"], "time": 1.572271, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 1) -> #f", "(member [6 2 3 6 5] 9) -> #f", "(member [3 8] 5) -> #f", "(member [0 7 4 5 0] 0) -> #t", "(member [3 3 0 0] 7) -> #f", "(member [8] 2) -> #f", "(member [4 5] 0) -> #f", "(member [] 8) -> #f", "(member [2 4] 9) -> #f", "(member [] 2) -> #f", "(member [0 4] 1) -> #f", "(member [8] 1) -> #f", "(member [3 8 9 0 2] 4) -> #f", "(member [4 1 5 7 5] 7) -> #t", "(member [2] 8) -> #f", "(member [1 1] 5) -> #f", "(member [4 6 5] 0) -> #f", "(member [0 2 0 1] 2) -> #t", "(member [0 7 3] 8) -> #f", "(member [] 3) -> #f", "(member [2 0 1] 8) -> #f", "(member [1] 9) -> #f", "(member [] 2) -> #f", "(member [] 3) -> #f", "(member [1] 8) -> #f", "(member [0 4 7 9] 2) -> #f", "(member [9] 3) -> #f", "(member [8] 0) -> #f", "(member [1 3 0 2] 9) -> #f", "(member [8 8 8 8] 5) -> #f", "(member [2] 9) -> #f", "(member [8 8 1 4] 8) -> #t", "(member [5] 9) -> #f", "(member [] 1) -> #f", "(member [] 8) -> #f", "(member [8 0 2 6] 1) -> #f", "(member [9 5 3] 9) -> #t", "(member [0 5 3 8] 4) -> #f", "(member [4 1] 1) -> #t", "(member [9 4] 3) -> #f", "(member [1 2 4 3] 0) -> #f", "(member [7] 4) -> #f"], "time": 1.496925, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 0) -> #f", "(member [5 0 8] 0) -> #t", "(member [] 8) -> #f", "(member [0 7 0 7 6] 4) -> #f", "(member [] 6) -> #f", "(member [4 3 0 8] 7) -> #f", "(member [0] 1) -> #f", "(member [6 6 4 1 3] 2) -> #f", "(member [8 7 0] 7) -> #t", "(member [7 0 9 8 7] 5) -> #f", "(member [8 9 7] 6) -> #f", "(member [] 6) -> #f", "(member [9 6 0 0] 8) -> #f", "(member [7] 2) -> #f", "(member [2 7 9 0] 8) -> #f", "(member [7 1 7 9 2] 2) -> #t", "(member [0 7 9 7] 1) -> #f", "(member [2] 0) -> #f", "(member [7 4] 9) -> #f", "(member [] 0) -> #f", "(member [8 7 5] 3) -> #f", "(member [4 1 1 7] 7) -> #t", "(member [1 5 8 0] 8) -> #t", "(member [] 5) -> #f", "(member [7] 3) -> #f", "(member [] 8) -> #f", "(member [7 3 8 4 6] 1) -> #f", "(member [7] 0) -> #f", "(member [5 9 9] 1) -> #f", "(member [8] 9) -> #f", "(member [0 1 1 0] 4) -> #f", "(member [8 4 0 5 1] 4) -> #t", "(member [9 5 2 0] 9) -> #t", "(member [0 8] 2) -> #f", "(member [7 8] 4) -> #f", "(member [8 3 3] 4) -> #f", "(member [] 8) -> #f", "(member [6 8 6 6 9] 6) -> #t", "(member [4] 1) -> #f", "(member [] 3) -> #f", "(member [0 9 4 5] 2) -> #f", "(member [2] 6) -> #f"], "time": 1.63013, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (= e (!= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 4) -> #f", "(member [0 5 1 8 3] 1) -> #t", "(member [8 1 7 9] 5) -> #f", "(member [0] 7) -> #f", "(member [3 1 1] 3) -> #t", "(member [3 1 2] 1) -> #t", "(member [4] 4) -> #t", "(member [9] 0) -> #f", "(member [7 0 3 7] 9) -> #f", "(member [2 5 5 2] 7) -> #f", "(member [7] 7) -> #t", "(member [4 8 2 5 9] 0) -> #f", "(member [9 8] 2) -> #f", "(member [] 0) -> #f", "(member [9] 7) -> #f", "(member [6 2] 7) -> #f", "(member [9 4 2 0 8] 1) -> #f", "(member [2] 6) -> #f", "(member [9 8] 7) -> #f", "(member [4 3 4 5 1] 5) -> #t", "(member [9] 9) -> #t", "(member [0 3 0] 4) -> #f", "(member [5 5] 7) -> #f", "(member [5 4 2 2] 2) -> #t", "(member [6 0 1 1 6] 2) -> #f", "(member [5] 8) -> #f", "(member [8 8 5 6 9] 3) -> #f", "(member [] 2) -> #f", "(member [1 7 1 8] 4) -> #f", "(member [2 1 1] 0) -> #f", "(member [0] 8) -> #f", "(member [6 0] 9) -> #f", "(member [1 1 1] 7) -> #f", "(member [4 4 4] 8) -> #f", "(member [6 4 7 0 0] 0) -> #t", "(member [] 7) -> #f", "(member [7 7 7] 6) -> #f", "(member [] 4) -> #f", "(member [] 6) -> #f", "(member [7] 0) -> #f", "(member [7] 7) -> #t", "(member [9 5 2] 0) -> #f"], "time": 1.59009, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (| e (= b d))) #f)) _) _)"}
{"name": "member", "examples": ["(member [] 9) -> #f", "(member [8 8 1] 4) -> #f", "(member [9 8] 0) -> #f", "(member [4 4] 2) -> #f", "(member [3] 9) -> #f", "(member [5] 2) -> #f", "(member [4 0 2 3 3] 6) -> #f", "(member [6] 3) -> #f", "(member [2 2 7] 4) -> #f", "(member [0 7 9 2 6] 9) -> #t", "(member [2] 2) -> #t", "(member [7 4 6 7] 4) -> #t", "(member [8 0 2 6] 6) -> #t", "(member [3 4 9 6] 2) -> #f", "(member [5 8 3 6 2] 2) -> #t", "(member [7 0 5 9] 9) -> #t", "(member [9 5 3] 8) -> #f", "(member [8 3 5 9] 0) -> #f", "(member [1 1 0 3 6] 6) -> #t", "(member [6 8] 9) -> #f", "(member [3] 5) -> #f", "(member [] 9) -> #f", "(member [7 7 6 7 9] 7) -> #t", "(member [2] 5) -> #f", "(member [3 7] 1) -> #f", "(member [2 6 4 2] 5) -> #f", "(member [2] 2) -> #t", "(member [0 3 7 7] 4) -> #f", "(member [] 7) -> #f", "(member [9 1 4 8 9] 4) -> #t", "(member [] 1) -> #f", "(member [1] 1) -> #t", "(member [6 9 6] 3) -> #f", "(member [4 0] 8) -> #f", "(member [3 2 1] 1) -> #t", "(member [] 1) -> #f", "(member [8 2 3] 5) -> #f", "(member [4 0 0 0] 1) -> #f", "(member [9 7 0 7] 5) -> #f", "(member [] 8) -> #f", "(member [4] 0) -> #f", "(member [5] 2) -> #f"], "time": 1.663457, "solution": "(let member (let a (lambda (c b) (foldl c (lambda (e d) (= e (!= b d))) #f)) _) _)"}
