{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {9}) -> 1", "(count_nodes {2}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) 1) 0)) _) _)", "time": 0.019192, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {7 {1 {4 {0} {3}}}}) -> 5", "(count_nodes {3}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (- c (+ 1 1))) 0)) _) _)", "time": 0.351843, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {2 {5}}) -> 2", "(count_nodes {3 {1 {1}}}) -> 3", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) c) 1)) 0)) _) _)", "time": 0.557296, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {2 {5}}) -> 2", "(count_nodes {8}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) c) 1)) 0)) _) _)", "time": 0.819355, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {8} {3}}) -> 3", "(count_nodes {3 {6}}) -> 2", "(count_nodes {1}) -> 1", "(count_nodes {7 {0} {3 {0 {8}} {3 {5} {7}}}}) -> 8", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.00525, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {9} {2}}) -> 3", "(count_nodes {2}) -> 1", "(count_nodes {6 {0} {3}}) -> 3", "(count_nodes {6 {6} {3 {6}}}) -> 4", "(count_nodes {5 {5 {0}} {4}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.03067, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {7 {4} {4 {7}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {5 {3} {9}}) -> 3", "(count_nodes {0}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.035172, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {5 {4 {3 {8} {7}}}}) -> 5", "(count_nodes {8 {3} {0 {6}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {7}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.208371, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1 {3 {3} {7}} {4 {0} {9}}}) -> 7", "(count_nodes {4}) -> 1", "(count_nodes {6 {4}}) -> 2", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.233149, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {6 {6 {2 {2}} {9}} {5 {6 {5} {9}}}}) -> 9", "(count_nodes {0 {6 {4 {1} {7}}} {0}}) -> 6", "(count_nodes {1 {6 {5} {8}}}) -> 4", "(count_nodes {4}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.371433, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {3}}) -> 2", "(count_nodes {3 {3}}) -> 2", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {5 {1}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 1)) 1)) 0)) _) _)", "time": 1.448513, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {2}) -> 1", "(count_nodes {4 {4}}) -> 2", "(count_nodes {3 {8 {4 {2}}}}) -> 4", "(count_nodes {7 {1}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 e)) 1)) 0)) _) _)", "time": 1.45075, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {1 {3}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {8 {4 {5} {8}} {0 {2 {7} {9}} {2}}}) -> 9", "(count_nodes {2}) -> 1", "(count_nodes {4 {6 {2 {8} {8}} {1}}}) -> 6"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.52083, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {5}}) -> 2", "(count_nodes {1 {7}}) -> 2", "(count_nodes {5}) -> 1", "(count_nodes {4 {1} {3 {2 {9}}}}) -> 5", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.499492, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {6 {1 {9 {4} {3}}} {1 {9 {2} {9}} {7 {9}}}}) -> 11", "(count_nodes {5}) -> 1", "(count_nodes {4}) -> 1", "(count_nodes {6 {0} {1 {1 {9} {8}}}}) -> 6"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.503951, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {0} {0}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {3 {0}}) -> 2", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 1.56185, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {3 {5 {4}} {1 {4} {2}}} {3 {6}}}) -> 9", "(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {6 {2}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.821562, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {7 {0} {0}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 0.750934, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {3 {2}} {8 {5} {0}}}) -> 6", "(count_nodes {4 {0 {3} {1}} {0 {7}}}) -> 6", "(count_nodes {5 {0} {9}}) -> 3", "(count_nodes {2}) -> 1", "(count_nodes {6 {1 {7 {7}} {5}} {4 {3 {9} {6}}}}) -> 9"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.847689, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6 {5 {8 {2}}}}) -> 4", "(count_nodes {4}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 e)) 1)) 0)) _) _)", "time": 0.704502, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {2} {5 {6} {5 {5} {9}}}}) -> 7", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {7}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.67886, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {4 {2}} {4 {4}}}) -> 5", "(count_nodes {3}) -> 1", "(count_nodes {6}) -> 1", "(count_nodes {7 {1}}) -> 2", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.906199, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {6 {8} {8}}}) -> 4", "(count_nodes {3}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {1 {6 {0 {5}} {2}}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.806493, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {9} {2 {8} {8 {1} {1}}}}) -> 7", "(count_nodes {}) -> 0", "(count_nodes {6 {3} {0}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {5 {1 {1 {3} {8}}}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.571813, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {4}) -> 1", "(count_nodes {9 {4} {9}}) -> 3", "(count_nodes {6 {9 {4}}}) -> 3", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.244688, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {4 {8}}) -> 2", "(count_nodes {8 {2} {7}}) -> 3", "(count_nodes {7}) -> 1", "(count_nodes {3 {2}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 1.166838, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {3 {6}} {0 {6} {7}}}) -> 6", "(count_nodes {5 {5 {3 {0} {0}} {8}} {2 {4}}}) -> 8", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.36084, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {5}) -> 1", "(count_nodes {1 {5} {3}}) -> 3", "(count_nodes {2 {5 {8} {8}}}) -> 4", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.655895, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {3}) -> 1", "(count_nodes {8 {5}}) -> 2", "(count_nodes {6 {5 {6 {6}}}}) -> 4", "(count_nodes {3 {1}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 e)) 1)) 0)) _) _)", "time": 1.182282, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {6 {1}}}) -> 3", "(count_nodes {1}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {1 {3 {9} {4}}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.257682, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {8 {9} {3}}) -> 3", "(count_nodes {0}) -> 1", "(count_nodes {8 {4 {3 {8}}}}) -> 4", "(count_nodes {1}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.274899, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6 {5} {5}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {9 {1} {2}}) -> 3", "(count_nodes {4}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 1.322825, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {6}) -> 1", "(count_nodes {6}) -> 1", "(count_nodes {7 {4 {6} {9}} {8 {2} {0}}}) -> 7", "(count_nodes {5 {5}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.730739, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {3 {0}}) -> 2", "(count_nodes {3 {2}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 1)) 1)) 0)) _) _)", "time": 1.070584, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2 {7 {3} {9}}}) -> 4", "(count_nodes {0 {6 {3}}}) -> 3", "(count_nodes {1 {3}}) -> 2", "(count_nodes {4}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.887639, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3 {7} {4}}) -> 3", "(count_nodes {4 {8 {4} {0}}}) -> 4", "(count_nodes {6}) -> 1", "(count_nodes {9}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) c) 1)) 0)) _) _)", "time": 0.481224, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {2}) -> 1", "(count_nodes {9 {4}}) -> 2", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 1)) 1)) 0)) _) _)", "time": 0.81601, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {2} {7}}) -> 3", "(count_nodes {5 {3} {1}}) -> 3", "(count_nodes {8 {4}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {3 {5} {5 {6} {2 {3}}}}) -> 6"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.881928, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {7 {5}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {3 {4 {4}} {9}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f f)) 1)) 0)) _) _)", "time": 0.8411, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {3} {4}}) -> 3", "(count_nodes {8}) -> 1", "(count_nodes {0 {6 {4} {0}}}) -> 4", "(count_nodes {0}) -> 1", "(count_nodes {9 {1} {9}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.86749, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {0 {2 {5 {5}}} {7 {5 {6} {0}}}}) -> 8", "(count_nodes {}) -> 0", "(count_nodes {1 {8}}) -> 2", "(count_nodes {8 {0 {1} {2 {8}}}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.12963, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {8 {0} {1}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {1 {0}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 0.762556, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {3 {6}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {8}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ c 1)) 1)) 0)) _) _)", "time": 1.071655, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {1}}) -> 2", "(count_nodes {5 {6} {0}}) -> 3", "(count_nodes {8 {4 {5 {6}}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.78499, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {7 {3 {6} {6}} {5 {3}}} {2}}) -> 8", "(count_nodes {9 {4 {1 {4} {8}} {5 {1}}}}) -> 7", "(count_nodes {9 {3 {3} {9}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.169257, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {6 {9}}) -> 2", "(count_nodes {0 {5} {0 {6 {5} {1}}}}) -> 6", "(count_nodes {1 {9 {3 {4} {6}} {3 {9}}} {9 {2}}}) -> 9", "(count_nodes {1 {3 {5 {7}} {9}} {8 {8 {0} {8}} {4}}}) -> 10"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.749377, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {1}}) -> 2", "(count_nodes {7 {6}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {4 {5} {2 {2} {6}}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.839833, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {3 {8 {1}} {9 {2} {4}}}) -> 6", "(count_nodes {8}) -> 1", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ c c)) 1)) 0)) _) _)", "time": 1.038106, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {0 {7} {0}} {5}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {1 {5 {6}} {0 {0} {4}}}) -> 6", "(count_nodes {2 {5}}) -> 2", "(count_nodes {4}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.119914, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {3 {2 {0}}}}) -> 4", "(count_nodes {7 {5}}) -> 2", "(count_nodes {6 {0}}) -> 2", "(count_nodes {8 {0 {6}} {0 {0}}}) -> 5", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.898945, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {8} {6}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {7 {0 {2} {1 {5}}} {2 {6}}}) -> 7", "(count_nodes {6 {6} {2}}) -> 3", "(count_nodes {4 {7}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.942311, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {4 {3 {7} {4}} {0 {8}}}}) -> 7", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {0}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.074021, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {1 {7} {1}}) -> 3", "(count_nodes {0 {9 {8 {6} {4}} {1 {7}}}}) -> 7", "(count_nodes {7}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.791493, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {9}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2 {7} {8}}) -> 3", "(count_nodes {2 {1} {2}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 0.933868, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {7}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {6 {3} {7 {3} {8}}}) -> 5", "(count_nodes {7 {2 {1 {0}}}}) -> 4", "(count_nodes {0}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.854691, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {7 {6 {9} {2}} {3}} {5 {4 {4} {2}}}}) -> 10", "(count_nodes {}) -> 0", "(count_nodes {0 {0} {4 {4 {8} {9}}}}) -> 6", "(count_nodes {4}) -> 1", "(count_nodes {6 {9 {3} {7}}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.94711, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {2 {2}}) -> 2", "(count_nodes {2}) -> 1", "(count_nodes {9 {1 {7}} {8 {8}}}) -> 5", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.025056, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {5 {9} {6}}) -> 3", "(count_nodes {4}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {3 {4 {8}}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.803712, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1 {6} {3}}) -> 3", "(count_nodes {7 {2 {0 {4} {8}} {0 {1} {7}}} {9 {2}}}) -> 10", "(count_nodes {0}) -> 1", "(count_nodes {4}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.828971, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1 {9 {2} {8}} {8 {8} {7}}}) -> 7", "(count_nodes {3}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.045955, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {1} {1}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 0.683968, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {5 {3} {0}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {1}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 0.810277, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {6}}) -> 2", "(count_nodes {3 {1}}) -> 2", "(count_nodes {3 {3}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (+ 1 1)) 0)) _) _)", "time": 0.157567, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {9 {6} {4}}) -> 3", "(count_nodes {4 {6 {9 {7} {1}} {7 {4} {3}}}}) -> 8", "(count_nodes {5 {2 {1}} {5 {4} {1}}}) -> 6", "(count_nodes {9 {4} {1}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.016447, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {3 {2} {0 {6} {4 {8}}}}) -> 6", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ c c)) 1)) 0)) _) _)", "time": 1.061511, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {1 {7 {1} {1}}}}) -> 5", "(count_nodes {1 {2}}) -> 2", "(count_nodes {1 {8} {1}}) -> 3", "(count_nodes {2 {1}}) -> 2", "(count_nodes {6 {1 {9} {7}}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.773302, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {5 {1 {7}} {7}} {2}}) -> 6", "(count_nodes {9 {2}}) -> 2", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {9 {3}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.127417, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {3 {5} {2}}) -> 3", "(count_nodes {3 {5}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {0 {5} {0 {4 {9}}}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.022443, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {4 {4} {9}}) -> 3", "(count_nodes {2 {9 {2 {4}} {0}}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.432392, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {0} {0}}) -> 3", "(count_nodes {1}) -> 1", "(count_nodes {9 {5} {8}}) -> 3", "(count_nodes {1}) -> 1", "(count_nodes {1}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 0.755277, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1 {1 {3} {2}} {5 {3} {3}}}) -> 7", "(count_nodes {2 {0 {0}} {8 {7}}}) -> 5", "(count_nodes {4 {8 {2 {9}}} {1}}) -> 5", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.310888, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {6} {4 {7} {1}}}) -> 5", "(count_nodes {0}) -> 1", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {4 {5} {6}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.755979, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {7} {8}}) -> 3", "(count_nodes {4 {0}}) -> 2", "(count_nodes {3 {3} {6}}) -> 3", "(count_nodes {5 {9} {8 {1} {1}}}) -> 5", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.288397, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {8 {3 {3} {4}} {7}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {2 {0 {4} {7 {8}}} {1}}) -> 6", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.182079, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {3 {3} {0}} {9 {1}}}) -> 6", "(count_nodes {8 {8} {5}}) -> 3", "(count_nodes {9 {5} {0}}) -> 3", "(count_nodes {8 {8 {9}}}) -> 3", "(count_nodes {7 {1 {2} {1}} {4 {7} {7}}}) -> 7"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.884515, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {0 {9 {3 {2}} {2 {8} {0}}} {3 {2} {5 {0} {0}}}}) -> 12", "(count_nodes {1 {0}}) -> 2", "(count_nodes {9 {6 {1} {0 {5}}} {3}}) -> 6"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.967186, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {1 {2} {6}}}) -> 4", "(count_nodes {9}) -> 1", "(count_nodes {8 {7} {1}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {6 {6} {9}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.819019, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {9 {7}}}) -> 3", "(count_nodes {8 {7 {4}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {5 {8 {1} {1}} {0 {2 {0}} {2}}}) -> 8"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.180571, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {3}}) -> 2", "(count_nodes {6 {5} {6}}) -> 3", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {8 {2}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 1.159399, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {9}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 1)) 1)) 0)) _) _)", "time": 0.719901, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {2}}) -> 2", "(count_nodes {0}) -> 1", "(count_nodes {3 {3 {2}}}) -> 3", "(count_nodes {2 {8} {6}}) -> 3", "(count_nodes {2 {9} {4}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.247267, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {9 {3} {3 {8} {7}}}}) -> 6", "(count_nodes {9 {4 {5}} {5 {1} {4}}}) -> 6", "(count_nodes {0}) -> 1", "(count_nodes {0 {3}}) -> 2", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.350947, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {3 {9 {8} {4}} {9 {5}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {9 {0 {3} {9}}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.653994, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {7} {0 {0}}}) -> 4", "(count_nodes {2}) -> 1", "(count_nodes {8 {6 {9} {0}} {9}}) -> 5", "(count_nodes {0 {5}}) -> 2", "(count_nodes {6 {7}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.748996, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {0 {6}}) -> 2", "(count_nodes {3 {8}}) -> 2", "(count_nodes {1 {4 {4 {2} {2}}} {3 {3 {0} {8}}}}) -> 9", "(count_nodes {1}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.116405, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {0 {5 {2} {9}}}}) -> 5", "(count_nodes {7}) -> 1", "(count_nodes {9 {5}}) -> 2", "(count_nodes {2}) -> 1", "(count_nodes {7 {9 {5}}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.768596, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {0} {2}}) -> 3", "(count_nodes {7}) -> 1", "(count_nodes {2 {9 {0 {5} {2}}} {1}}) -> 6", "(count_nodes {6}) -> 1", "(count_nodes {7 {1} {8}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.232355, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {0}}) -> 2", "(count_nodes {6 {1 {7 {4} {4}}}}) -> 5", "(count_nodes {1 {5}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {6 {5 {0 {6}} {4 {5} {4}}} {6 {1 {6}} {1 {4}}}}) -> 12"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.62534, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {7} {5}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {6 {8} {1}}) -> 3", "(count_nodes {8 {5}}) -> 2", "(count_nodes {8 {9} {9}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 1.053514, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {8 {5}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 1)) 1)) 0)) _) _)", "time": 1.107491, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1 {3} {9}}) -> 3", "(count_nodes {9 {2 {6 {0} {5}}}}) -> 5", "(count_nodes {0 {6 {1} {4}} {6 {0} {3}}}) -> 7", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.786529, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {9 {4 {5 {3}} {7}} {8 {0 {9}}}}) -> 8", "(count_nodes {}) -> 0", "(count_nodes {0 {1} {0}}) -> 3", "(count_nodes {9 {6}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.914371, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {2 {6}} {2 {1} {4}}}) -> 6", "(count_nodes {7 {0 {1} {3}}}) -> 4", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.933127, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {5}}) -> 2", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {1 {4}}) -> 2", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 1)) 1)) 0)) _) _)", "time": 0.586258, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {7 {1 {2} {9}}}) -> 4", "(count_nodes {1}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.985149, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {4 {1} {6}}) -> 3", "(count_nodes {5}) -> 1", "(count_nodes {7 {3 {1 {5}}} {4 {6}}}) -> 6"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.463427, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {3} {2}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {9}) -> 1", "(count_nodes {5 {1}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 0.550796, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6 {6}}) -> 2", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 1)) 1)) 0)) _) _)", "time": 0.502078, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1 {8}}) -> 2", "(count_nodes {7 {6 {9 {9}}} {5}}) -> 5", "(count_nodes {5 {9}}) -> 2", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.5015, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {0} {5}}) -> 3", "(count_nodes {6 {9 {9} {4}}}) -> 4", "(count_nodes {7 {7} {5}}) -> 3", "(count_nodes {0 {5} {2}}) -> 3", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.531866, "name": "count_nodes"}
