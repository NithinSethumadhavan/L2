{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli []) -> []"], "time": 0.000519, "solution": "(let dupli (let a (lambda (b) []) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli []) -> []"], "time": 0.000702, "solution": "(let dupli (let a (lambda (b) []) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5]) -> [5 5]", "(dupli [8]) -> [8 8]"], "time": 0.04519, "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c b)) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3]) -> [3 3]", "(dupli [2]) -> [2 2]"], "time": 0.038071, "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c b)) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5]) -> [5 5]", "(dupli []) -> []"], "time": 0.045507, "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c b)) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli []) -> []"], "time": 0.000726, "solution": "(let dupli (let a (lambda (b) []) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 0]) -> [0 0 0 0]", "(dupli [7 3 3]) -> [7 7 3 3 3 3]"], "time": 0.150047, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5 9]) -> [5 5 9 9]", "(dupli [4 2]) -> [4 4 2 2]"], "time": 0.221475, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 1]) -> [9 9 1 1]", "(dupli [8 2 5]) -> [8 8 2 2 5 5]"], "time": 0.161369, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 5 4 3 3]) -> [2 2 5 5 4 4 3 3 3 3]", "(dupli [2 9 6 7]) -> [2 2 9 9 6 6 7 7]"], "time": 0.174881, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5 6]) -> [5 5 6 6]", "(dupli [0 2 8 3]) -> [0 0 2 2 8 8 3 3]"], "time": 0.20239, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 5 7 0]) -> [9 9 5 5 7 7 0 0]", "(dupli [6 6 6 8 3]) -> [6 6 6 6 6 6 8 8 3 3]"], "time": 0.194862, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 1]) -> [8 8 1 1]", "(dupli [7 4 6]) -> [7 7 4 4 6 6]"], "time": 0.182699, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 6 8 6 2]) -> [6 6 6 6 8 8 6 6 2 2]", "(dupli [2 6 1]) -> [2 2 6 6 1 1]"], "time": 0.215114, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 8]) -> [0 0 8 8]", "(dupli []) -> []"], "time": 0.163875, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 1 8]) -> [7 7 1 1 8 8]", "(dupli [2 0 2]) -> [2 2 0 0 2 2]"], "time": 0.223952, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9]) -> [9 9]", "(dupli [2 6 4 9]) -> [2 2 6 6 4 4 9 9]"], "time": 0.176021, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 3 3 6 2]) -> [7 7 3 3 3 3 6 6 2 2]", "(dupli [5 0]) -> [5 5 0 0]"], "time": 0.179857, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli []) -> []"], "time": 0.000652, "solution": "(let dupli (let a (lambda (b) []) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3]) -> [3 3]", "(dupli [0 5]) -> [0 0 5 5]"], "time": 0.155815, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 7 2 0 8]) -> [0 0 7 7 2 2 0 0 8 8]", "(dupli [9 5]) -> [9 9 5 5]"], "time": 0.171324, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 6 3]) -> [3 3 6 6 3 3]", "(dupli [1]) -> [1 1]"], "time": 0.148535, "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 6 0]) -> [4 4 6 6 0 0]", "(dupli []) -> []"], "time": 0.201986, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 2 8]) -> [9 9 2 2 8 8]", "(dupli [3 2 0]) -> [3 3 2 2 0 0]"], "time": 0.215275, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5 8]) -> [5 5 8 8]", "(dupli [0 1]) -> [0 0 1 1]"], "time": 0.18912, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6]) -> [6 6]", "(dupli [9 4]) -> [9 9 4 4]"], "time": 0.206224, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 7 3]) -> [8 8 7 7 3 3]", "(dupli []) -> []"], "time": 0.219026, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 6]) -> [8 8 6 6]", "(dupli [3 6 5 8 4]) -> [3 3 6 6 5 5 8 8 4 4]"], "time": 0.196253, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 8 9]) -> [6 6 8 8 9 9]", "(dupli [5 0 1 8]) -> [5 5 0 0 1 1 8 8]"], "time": 0.186816, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 4 0 6 7]) -> [6 6 4 4 0 0 6 6 7 7]", "(dupli [7 1 3]) -> [7 7 1 1 3 3]"], "time": 0.19834, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 4 2]) -> [8 8 4 4 2 2]", "(dupli [7 6 8 9]) -> [7 7 6 6 8 8 9 9]"], "time": 0.194511, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [9 2 4 6]) -> [9 9 2 2 4 4 6 6]"], "time": 0.205219, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 5]) -> [9 9 5 5]", "(dupli [3]) -> [3 3]"], "time": 0.181507, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 2]) -> [0 0 2 2]", "(dupli [5 9 4 7 1]) -> [5 5 9 9 4 4 7 7 1 1]"], "time": 0.174933, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 4 7 3 5]) -> [3 3 4 4 7 7 3 3 5 5]", "(dupli [0]) -> [0 0]"], "time": 0.177358, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0]) -> [0 0]", "(dupli [3 0 8 2 1]) -> [3 3 0 0 8 8 2 2 1 1]"], "time": 0.171275, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1 4 5 0]) -> [1 1 4 4 5 5 0 0]", "(dupli [9 0]) -> [9 9 0 0]"], "time": 0.208362, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [8 7 0 3]) -> [8 8 7 7 0 0 3 3]"], "time": 0.166349, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 7 1]) -> [3 3 7 7 1 1]", "(dupli [0 0 4 4]) -> [0 0 0 0 4 4 4 4]"], "time": 0.219778, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 0 6 8]) -> [7 7 0 0 6 6 8 8]", "(dupli []) -> []"], "time": 0.169767, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [2]) -> [2 2]"], "time": 0.040062, "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c b)) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7]) -> [7 7]", "(dupli [3 8 6 4]) -> [3 3 8 8 6 6 4 4]"], "time": 0.168357, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 7 5]) -> [4 4 7 7 5 5]", "(dupli [8 1]) -> [8 8 1 1]"], "time": 0.192391, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1 0 5 3 9]) -> [1 1 0 0 5 5 3 3 9 9]", "(dupli [7]) -> [7 7]"], "time": 0.185038, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [1 2 0 7 3]) -> [1 1 2 2 0 0 7 7 3 3]"], "time": 0.231203, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5 5 2 5]) -> [5 5 5 5 2 2 5 5]", "(dupli [3 5 1 7]) -> [3 3 5 5 1 1 7 7]"], "time": 0.207032, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 9 7 1 4]) -> [8 8 9 9 7 7 1 1 4 4]", "(dupli []) -> []"], "time": 0.20985, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [2 7 7 1]) -> [2 2 7 7 7 7 1 1]"], "time": 0.206557, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 3 8 9 5]) -> [0 0 3 3 8 8 9 9 5 5]", "(dupli []) -> []"], "time": 0.214757, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5 9 1]) -> [5 5 9 9 1 1]", "(dupli [3 2 0]) -> [3 3 2 2 0 0]"], "time": 0.177682, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli []) -> []"], "time": 0.000438, "solution": "(let dupli (let a (lambda (b) []) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 9 9]) -> [7 7 9 9 9 9]", "(dupli [7]) -> [7 7]"], "time": 0.178439, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 0 8]) -> [9 9 0 0 8 8]", "(dupli [9]) -> [9 9]"], "time": 0.143706, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5 9 7 5 0]) -> [5 5 9 9 7 7 5 5 0 0]", "(dupli [3 8 9 4 9]) -> [3 3 8 8 9 9 4 4 9 9]"], "time": 0.171641, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 5 4]) -> [6 6 5 5 4 4]", "(dupli []) -> []"], "time": 0.231214, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5 8]) -> [5 5 8 8]", "(dupli [1 1]) -> [1 1 1 1]"], "time": 0.21926, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 4 0 0 9]) -> [8 8 4 4 0 0 0 0 9 9]", "(dupli [0 3 5 2]) -> [0 0 3 3 5 5 2 2]"], "time": 0.192143, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 7]) -> [7 7 7 7]", "(dupli [4]) -> [4 4]"], "time": 0.176247, "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5 4 7]) -> [5 5 4 4 7 7]", "(dupli [3 7 0 8]) -> [3 3 7 7 0 0 8 8]"], "time": 0.257361, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4]) -> [4 4]", "(dupli [4 4 7 1 6]) -> [4 4 4 4 7 7 1 1 6 6]"], "time": 0.174459, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 4 0 5 5]) -> [4 4 4 4 0 0 5 5 5 5]", "(dupli [9 2 3]) -> [9 9 2 2 3 3]"], "time": 0.166358, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 3 8 1 8]) -> [2 2 3 3 8 8 1 1 8 8]", "(dupli [2 9 9 8 2]) -> [2 2 9 9 9 9 8 8 2 2]"], "time": 0.249203, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [3 5 6]) -> [3 3 5 5 6 6]"], "time": 0.252699, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 6 3 9 1]) -> [2 2 6 6 3 3 9 9 1 1]", "(dupli []) -> []"], "time": 0.235252, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1 9 7 6]) -> [1 1 9 9 7 7 6 6]", "(dupli [3 8 5 4 1]) -> [3 3 8 8 5 5 4 4 1 1]"], "time": 0.16773, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 7]) -> [9 9 7 7]", "(dupli [8 4 6 2 8]) -> [8 8 4 4 6 6 2 2 8 8]"], "time": 0.223783, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 3 1 5]) -> [3 3 3 3 1 1 5 5]", "(dupli [9 3 2 9]) -> [9 9 3 3 2 2 9 9]"], "time": 0.264881, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5 8 0]) -> [5 5 8 8 0 0]", "(dupli [8 6 3 2]) -> [8 8 6 6 3 3 2 2]"], "time": 0.180719, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
