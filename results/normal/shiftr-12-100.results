{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 9.824204, "examples": ["(shiftr [4 5 7]) -> [7 4 5]", "(shiftr [7 7]) -> [7 7]", "(shiftr [8 5 9 3]) -> [3 8 5 9]", "(shiftr [4 4 5 5 6]) -> [6 4 4 5 5]", "(shiftr [9]) -> [9]", "(shiftr [1 9]) -> [9 1]", "(shiftr [7 2 1 9 9]) -> [9 7 2 1 9]", "(shiftr [4 5 4 8 0]) -> [0 4 5 4 8]", "(shiftr [1]) -> [1]", "(shiftr [7 1]) -> [1 7]", "(shiftr [4 2 8]) -> [8 4 2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 9.911546, "examples": ["(shiftr [5]) -> [5]", "(shiftr [3 5 8]) -> [8 3 5]", "(shiftr [7]) -> [7]", "(shiftr [1 6 9 4 7]) -> [7 1 6 9 4]", "(shiftr [8 1 1 4 6]) -> [6 8 1 1 4]", "(shiftr [3]) -> [3]", "(shiftr [0 9 1]) -> [1 0 9]", "(shiftr [7 7 0]) -> [0 7 7]", "(shiftr [9]) -> [9]", "(shiftr [1 2 3 7]) -> [7 1 2 3]", "(shiftr [3 9]) -> [9 3]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 10.886922, "examples": ["(shiftr [6 9]) -> [9 6]", "(shiftr [6 3 6 2 5]) -> [5 6 3 6 2]", "(shiftr [0 3]) -> [3 0]", "(shiftr [7 6 5 8 4]) -> [4 7 6 5 8]", "(shiftr [7 6]) -> [6 7]", "(shiftr [0 8 6]) -> [6 0 8]", "(shiftr [4 7 0 6]) -> [6 4 7 0]", "(shiftr [5 4 9 5 1]) -> [1 5 4 9 5]", "(shiftr [5 8]) -> [8 5]", "(shiftr [9]) -> [9]", "(shiftr [3 7 7 0 0]) -> [0 3 7 7 0]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 10.725945, "examples": ["(shiftr [5 5 2 2 5]) -> [5 5 5 2 2]", "(shiftr [2]) -> [2]", "(shiftr [4 7 3]) -> [3 4 7]", "(shiftr [7 4 4]) -> [4 7 4]", "(shiftr [1 8]) -> [8 1]", "(shiftr [5]) -> [5]", "(shiftr [5 9 5 5 2]) -> [2 5 9 5 5]", "(shiftr [8 4]) -> [4 8]", "(shiftr [6]) -> [6]", "(shiftr [6 8 6 9 9]) -> [9 6 8 6 9]", "(shiftr [6]) -> [6]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 11.119417, "examples": ["(shiftr [4 9]) -> [9 4]", "(shiftr [5]) -> [5]", "(shiftr [4 2 6 6]) -> [6 4 2 6]", "(shiftr [6 8 9 2 7]) -> [7 6 8 9 2]", "(shiftr [7 4 3 7 2]) -> [2 7 4 3 7]", "(shiftr [1 1 9 7 5]) -> [5 1 1 9 7]", "(shiftr [3 3 1]) -> [1 3 3]", "(shiftr [1 4 3 2]) -> [2 1 4 3]", "(shiftr [4 1 1]) -> [1 4 1]", "(shiftr [4 0]) -> [0 4]", "(shiftr [6 3]) -> [3 6]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 11.122676, "examples": ["(shiftr [9 2 9]) -> [9 9 2]", "(shiftr [9 3 8 9 3]) -> [3 9 3 8 9]", "(shiftr [2 5]) -> [5 2]", "(shiftr [5 5 3]) -> [3 5 5]", "(shiftr [5 3]) -> [3 5]", "(shiftr [6 5 7 8 3]) -> [3 6 5 7 8]", "(shiftr [3 1 6 6]) -> [6 3 1 6]", "(shiftr [5 0 6 2 1]) -> [1 5 0 6 2]", "(shiftr [8 2 5 9]) -> [9 8 2 5]", "(shiftr [3 1 4 2]) -> [2 3 1 4]", "(shiftr [4 7 6 0 2]) -> [2 4 7 6 0]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 11.155107, "examples": ["(shiftr [7]) -> [7]", "(shiftr [4 5 0 6 0]) -> [0 4 5 0 6]", "(shiftr [4 9]) -> [9 4]", "(shiftr [7 8]) -> [8 7]", "(shiftr [6 0 2 7 0]) -> [0 6 0 2 7]", "(shiftr [9]) -> [9]", "(shiftr [4 2]) -> [2 4]", "(shiftr [5 4 2]) -> [2 5 4]", "(shiftr [5 3]) -> [3 5]", "(shiftr [1 9]) -> [9 1]", "(shiftr [5]) -> [5]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 11.148065, "examples": ["(shiftr [9 7 5 2 4]) -> [4 9 7 5 2]", "(shiftr [0]) -> [0]", "(shiftr [5 7 9 3 2]) -> [2 5 7 9 3]", "(shiftr [6 2 6]) -> [6 6 2]", "(shiftr [1 5 3]) -> [3 1 5]", "(shiftr [2]) -> [2]", "(shiftr [6]) -> [6]", "(shiftr [3 1 5 1 3]) -> [3 3 1 5 1]", "(shiftr [4 5 0]) -> [0 4 5]", "(shiftr [6 2 4 8]) -> [8 6 2 4]", "(shiftr [8 5 8 1]) -> [1 8 5 8]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 11.540816, "examples": ["(shiftr [0 7]) -> [7 0]", "(shiftr [2 9]) -> [9 2]", "(shiftr [0 5 6 8 1]) -> [1 0 5 6 8]", "(shiftr [6]) -> [6]", "(shiftr [4 1]) -> [1 4]", "(shiftr [7 0 1]) -> [1 7 0]", "(shiftr [7 1 8 2 2]) -> [2 7 1 8 2]", "(shiftr [5 8 1 6]) -> [6 5 8 1]", "(shiftr [1 1 0 9]) -> [9 1 1 0]", "(shiftr [5]) -> [5]", "(shiftr [1 4 5]) -> [5 1 4]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 11.561917, "examples": ["(shiftr [3 5]) -> [5 3]", "(shiftr [6 3 7]) -> [7 6 3]", "(shiftr [7 1 6 6 4]) -> [4 7 1 6 6]", "(shiftr [0 8]) -> [8 0]", "(shiftr [6 2 8 6]) -> [6 6 2 8]", "(shiftr [6 3 3 5 8]) -> [8 6 3 3 5]", "(shiftr [5 5 7 2]) -> [2 5 5 7]", "(shiftr [4 7 1 6 7]) -> [7 4 7 1 6]", "(shiftr [4 2 7 6 8]) -> [8 4 2 7 6]", "(shiftr [0 1 8 6 5]) -> [5 0 1 8 6]", "(shiftr [1 7 5 9]) -> [9 1 7 5]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 11.930835, "examples": ["(shiftr [0]) -> [0]", "(shiftr [3 1]) -> [1 3]", "(shiftr [1 8]) -> [8 1]", "(shiftr [2 2]) -> [2 2]", "(shiftr [0 5 2]) -> [2 0 5]", "(shiftr [1 3 5 5]) -> [5 1 3 5]", "(shiftr [3 0]) -> [0 3]", "(shiftr [5 3 8]) -> [8 5 3]", "(shiftr [4 1 0 3]) -> [3 4 1 0]", "(shiftr [9 9 8 6 4]) -> [4 9 9 8 6]", "(shiftr [7 4 1 5 4]) -> [4 7 4 1 5]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 11.862507, "examples": ["(shiftr [1]) -> [1]", "(shiftr [9 9 2 6]) -> [6 9 9 2]", "(shiftr [3 4 0 5 2]) -> [2 3 4 0 5]", "(shiftr [7 7]) -> [7 7]", "(shiftr [2 1]) -> [1 2]", "(shiftr [8 1 2 5]) -> [5 8 1 2]", "(shiftr [4 9 5 3 1]) -> [1 4 9 5 3]", "(shiftr [7 9 8 6]) -> [6 7 9 8]", "(shiftr [6 8]) -> [8 6]", "(shiftr [8]) -> [8]", "(shiftr [8 7 9 9 9]) -> [9 8 7 9 9]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 12.029367, "examples": ["(shiftr [7 0]) -> [0 7]", "(shiftr [3 4 4 3 1]) -> [1 3 4 4 3]", "(shiftr [7 7 8]) -> [8 7 7]", "(shiftr [4]) -> [4]", "(shiftr [5 3]) -> [3 5]", "(shiftr [8 1 8 5]) -> [5 8 1 8]", "(shiftr [5 3]) -> [3 5]", "(shiftr [1 4]) -> [4 1]", "(shiftr [4 1 4 3]) -> [3 4 1 4]", "(shiftr [9 4 8]) -> [8 9 4]", "(shiftr [6 4 6]) -> [6 6 4]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 12.414073, "examples": ["(shiftr [5 6 6 4]) -> [4 5 6 6]", "(shiftr [6]) -> [6]", "(shiftr [1]) -> [1]", "(shiftr [9 0]) -> [0 9]", "(shiftr [4 0 6]) -> [6 4 0]", "(shiftr [6]) -> [6]", "(shiftr [2 1 7 3 4]) -> [4 2 1 7 3]", "(shiftr [3 3 7 2 4]) -> [4 3 3 7 2]", "(shiftr [4 0 5 3 7]) -> [7 4 0 5 3]", "(shiftr [1]) -> [1]", "(shiftr [2 5]) -> [5 2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 12.383243, "examples": ["(shiftr [6 4 6 3 9]) -> [9 6 4 6 3]", "(shiftr [9 1 3]) -> [3 9 1]", "(shiftr [7 9 1]) -> [1 7 9]", "(shiftr [2 6 9 7]) -> [7 2 6 9]", "(shiftr [2 4 2]) -> [2 2 4]", "(shiftr [9 7 7 7 6]) -> [6 9 7 7 7]", "(shiftr [8]) -> [8]", "(shiftr [2 8 5 6]) -> [6 2 8 5]", "(shiftr [0 0 0]) -> [0 0 0]", "(shiftr [4 0 3 9]) -> [9 4 0 3]", "(shiftr [3 4]) -> [4 3]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 12.551977, "examples": ["(shiftr [3 7 4 8 8]) -> [8 3 7 4 8]", "(shiftr [9 2 4 0 8]) -> [8 9 2 4 0]", "(shiftr [3 1]) -> [1 3]", "(shiftr [9 5 2]) -> [2 9 5]", "(shiftr [2 4]) -> [4 2]", "(shiftr [6 9 5 1]) -> [1 6 9 5]", "(shiftr [2 5 5 0 2]) -> [2 2 5 5 0]", "(shiftr [2]) -> [2]", "(shiftr [2 6]) -> [6 2]", "(shiftr [0 9 6 0]) -> [0 0 9 6]", "(shiftr [9]) -> [9]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.219608, "examples": ["(shiftr [3 5]) -> [5 3]", "(shiftr [1 3 5]) -> [5 1 3]", "(shiftr [3 0 2]) -> [2 3 0]", "(shiftr [5 9 4 8 8]) -> [8 5 9 4 8]", "(shiftr [7 8 2]) -> [2 7 8]", "(shiftr [1]) -> [1]", "(shiftr [2]) -> [2]", "(shiftr [6]) -> [6]", "(shiftr [6 4 7 1]) -> [1 6 4 7]", "(shiftr [8 6]) -> [6 8]", "(shiftr [9 3]) -> [3 9]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.874882, "examples": ["(shiftr [5]) -> [5]", "(shiftr [5 7]) -> [7 5]", "(shiftr [1 0 1 4]) -> [4 1 0 1]", "(shiftr [1 5]) -> [5 1]", "(shiftr [4 1 2 2]) -> [2 4 1 2]", "(shiftr [0 7 0 8]) -> [8 0 7 0]", "(shiftr [4 9]) -> [9 4]", "(shiftr [3 6 4]) -> [4 3 6]", "(shiftr [5 7 7]) -> [7 5 7]", "(shiftr [5 1 2 8 7]) -> [7 5 1 2 8]", "(shiftr [7 5 8 8]) -> [8 7 5 8]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.840536, "examples": ["(shiftr [8 6 7]) -> [7 8 6]", "(shiftr [8 8]) -> [8 8]", "(shiftr [7 6 0 3 4]) -> [4 7 6 0 3]", "(shiftr [5 6 5 1 7]) -> [7 5 6 5 1]", "(shiftr [8 5 3 4 3]) -> [3 8 5 3 4]", "(shiftr [5 3 5 5 2]) -> [2 5 3 5 5]", "(shiftr [1]) -> [1]", "(shiftr [8 5 1 9]) -> [9 8 5 1]", "(shiftr [7 8 0 0 0]) -> [0 7 8 0 0]", "(shiftr [1 4 3]) -> [3 1 4]", "(shiftr [2 7 7 5 6]) -> [6 2 7 7 5]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.687282, "examples": ["(shiftr [1 2 7 3]) -> [3 1 2 7]", "(shiftr [0 7]) -> [7 0]", "(shiftr [0 3 8]) -> [8 0 3]", "(shiftr [2 4 8 3]) -> [3 2 4 8]", "(shiftr [7 7]) -> [7 7]", "(shiftr [7 9 6 7]) -> [7 7 9 6]", "(shiftr [7 5 6]) -> [6 7 5]", "(shiftr [3]) -> [3]", "(shiftr [3]) -> [3]", "(shiftr [3 7 0 6 6]) -> [6 3 7 0 6]", "(shiftr [7 2 2 9]) -> [9 7 2 2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.342257, "examples": ["(shiftr [2 7]) -> [7 2]", "(shiftr [9 1 7 1]) -> [1 9 1 7]", "(shiftr [1 6]) -> [6 1]", "(shiftr [4 2 6]) -> [6 4 2]", "(shiftr [1 3 2 2]) -> [2 1 3 2]", "(shiftr [3 7]) -> [7 3]", "(shiftr [5 3 6 7]) -> [7 5 3 6]", "(shiftr [3]) -> [3]", "(shiftr [8 5 8 5 9]) -> [9 8 5 8 5]", "(shiftr [6 7 3 6 1]) -> [1 6 7 3 6]", "(shiftr [3 1 0]) -> [0 3 1]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 6.656458, "examples": ["(shiftr [3]) -> [3]", "(shiftr [4 1]) -> [1 4]", "(shiftr [6 8]) -> [8 6]", "(shiftr [5 9 4 5 1]) -> [1 5 9 4 5]", "(shiftr [5 8 9 7 1]) -> [1 5 8 9 7]", "(shiftr [4 7 9 5 8]) -> [8 4 7 9 5]", "(shiftr [6]) -> [6]", "(shiftr [0 0]) -> [0 0]", "(shiftr [9 9]) -> [9 9]", "(shiftr [8]) -> [8]", "(shiftr [3 0 6 7 3]) -> [3 3 0 6 7]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 7.368655, "examples": ["(shiftr [3 6 0 9 3]) -> [3 3 6 0 9]", "(shiftr [7]) -> [7]", "(shiftr [1 8 1 1 7]) -> [7 1 8 1 1]", "(shiftr [7 3]) -> [3 7]", "(shiftr [5 9 6]) -> [6 5 9]", "(shiftr [4 1 0]) -> [0 4 1]", "(shiftr [9 8 2]) -> [2 9 8]", "(shiftr [9 0 0]) -> [0 9 0]", "(shiftr [6]) -> [6]", "(shiftr [8 0]) -> [0 8]", "(shiftr [6 0 6]) -> [6 6 0]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.270353, "examples": ["(shiftr [2 6]) -> [6 2]", "(shiftr [4 8 7]) -> [7 4 8]", "(shiftr [1]) -> [1]", "(shiftr [9 6]) -> [6 9]", "(shiftr [2 1 4 8]) -> [8 2 1 4]", "(shiftr [8 3 7 5 9]) -> [9 8 3 7 5]", "(shiftr [2]) -> [2]", "(shiftr [0]) -> [0]", "(shiftr [3 6 0]) -> [0 3 6]", "(shiftr [3 8]) -> [8 3]", "(shiftr [7 1 1 6]) -> [6 7 1 1]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.080599, "examples": ["(shiftr [3 0 9 2 9]) -> [9 3 0 9 2]", "(shiftr [5 6 2 7 3]) -> [3 5 6 2 7]", "(shiftr [7 4]) -> [4 7]", "(shiftr [8 2 7]) -> [7 8 2]", "(shiftr [2]) -> [2]", "(shiftr [2 7]) -> [7 2]", "(shiftr [5 3 4 1]) -> [1 5 3 4]", "(shiftr [3]) -> [3]", "(shiftr [7 6]) -> [6 7]", "(shiftr [3 7]) -> [7 3]", "(shiftr [5 6]) -> [6 5]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.488051, "examples": ["(shiftr [9 0 5 1]) -> [1 9 0 5]", "(shiftr [7 4 7 2 2]) -> [2 7 4 7 2]", "(shiftr [2 3 3 6]) -> [6 2 3 3]", "(shiftr [6]) -> [6]", "(shiftr [3]) -> [3]", "(shiftr [0 6]) -> [6 0]", "(shiftr [6 4]) -> [4 6]", "(shiftr [4 3 6 3]) -> [3 4 3 6]", "(shiftr [2 9 8 0 9]) -> [9 2 9 8 0]", "(shiftr [1]) -> [1]", "(shiftr [9]) -> [9]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.513232, "examples": ["(shiftr [6 7 1 9]) -> [9 6 7 1]", "(shiftr [6]) -> [6]", "(shiftr [2]) -> [2]", "(shiftr [2 3 6 5]) -> [5 2 3 6]", "(shiftr [0 5]) -> [5 0]", "(shiftr [9 9 6 9 5]) -> [5 9 9 6 9]", "(shiftr [9 6 7 4]) -> [4 9 6 7]", "(shiftr [3 3 6 0]) -> [0 3 3 6]", "(shiftr [7 3 0 5 0]) -> [0 7 3 0 5]", "(shiftr [7 8 6 5]) -> [5 7 8 6]", "(shiftr [3 9 3 8 5]) -> [5 3 9 3 8]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.019891, "examples": ["(shiftr [5 1 6 3 4]) -> [4 5 1 6 3]", "(shiftr [6 7 8]) -> [8 6 7]", "(shiftr [3]) -> [3]", "(shiftr [4]) -> [4]", "(shiftr [6 1]) -> [1 6]", "(shiftr [4 1 2 3]) -> [3 4 1 2]", "(shiftr [4 5 7 8 8]) -> [8 4 5 7 8]", "(shiftr [3 9]) -> [9 3]", "(shiftr [4]) -> [4]", "(shiftr [3]) -> [3]", "(shiftr [0 3]) -> [3 0]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.54904, "examples": ["(shiftr [9]) -> [9]", "(shiftr [7 9]) -> [9 7]", "(shiftr [8 3 3]) -> [3 8 3]", "(shiftr [7 6 4 5 9]) -> [9 7 6 4 5]", "(shiftr [6 1 6 1]) -> [1 6 1 6]", "(shiftr [0]) -> [0]", "(shiftr [7 0 4]) -> [4 7 0]", "(shiftr [3 3 9 3]) -> [3 3 3 9]", "(shiftr [4]) -> [4]", "(shiftr [3 6]) -> [6 3]", "(shiftr [8]) -> [8]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.230529, "examples": ["(shiftr [7 7]) -> [7 7]", "(shiftr [7 7]) -> [7 7]", "(shiftr [3 3 5 4 5]) -> [5 3 3 5 4]", "(shiftr [3 3 9 2]) -> [2 3 3 9]", "(shiftr [5 7 6 9 4]) -> [4 5 7 6 9]", "(shiftr [3 8]) -> [8 3]", "(shiftr [0 2]) -> [2 0]", "(shiftr [5 4 2 1 1]) -> [1 5 4 2 1]", "(shiftr [6 5]) -> [5 6]", "(shiftr [5 1 5 6]) -> [6 5 1 5]", "(shiftr [8 4 4 6]) -> [6 8 4 4]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.837328, "examples": ["(shiftr [4]) -> [4]", "(shiftr [0 0 8 0]) -> [0 0 0 8]", "(shiftr [4 6]) -> [6 4]", "(shiftr [8 8 3 7]) -> [7 8 8 3]", "(shiftr [1 2]) -> [2 1]", "(shiftr [4 2 2]) -> [2 4 2]", "(shiftr [8 3]) -> [3 8]", "(shiftr [6 6 5 2]) -> [2 6 6 5]", "(shiftr [7 9 6 9 9]) -> [9 7 9 6 9]", "(shiftr [7 2 1]) -> [1 7 2]", "(shiftr [6 1 0]) -> [0 6 1]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.861905, "examples": ["(shiftr [8 7 7 7 8]) -> [8 8 7 7 7]", "(shiftr [0 4]) -> [4 0]", "(shiftr [8 1]) -> [1 8]", "(shiftr [9 3 2 0]) -> [0 9 3 2]", "(shiftr [9]) -> [9]", "(shiftr [1]) -> [1]", "(shiftr [8 4 4 9]) -> [9 8 4 4]", "(shiftr [1 2 1 5 6]) -> [6 1 2 1 5]", "(shiftr [8 8 0]) -> [0 8 8]", "(shiftr [6]) -> [6]", "(shiftr [7 9 9]) -> [9 7 9]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.238387, "examples": ["(shiftr [4 6 9 8 4]) -> [4 4 6 9 8]", "(shiftr [9 2 0]) -> [0 9 2]", "(shiftr [9 8 0 3 6]) -> [6 9 8 0 3]", "(shiftr [4]) -> [4]", "(shiftr [2 4 5 6 8]) -> [8 2 4 5 6]", "(shiftr [6 2 4]) -> [4 6 2]", "(shiftr [0]) -> [0]", "(shiftr [4 0 5 1]) -> [1 4 0 5]", "(shiftr [0 1 9 0 9]) -> [9 0 1 9 0]", "(shiftr [8 6]) -> [6 8]", "(shiftr [8 6 2 8]) -> [8 8 6 2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.809861, "examples": ["(shiftr [4 6 0]) -> [0 4 6]", "(shiftr [1 4 7 8 4]) -> [4 1 4 7 8]", "(shiftr [5]) -> [5]", "(shiftr [9 6]) -> [6 9]", "(shiftr [1 7]) -> [7 1]", "(shiftr [9 3 2 1 6]) -> [6 9 3 2 1]", "(shiftr [6 9 4 2 1]) -> [1 6 9 4 2]", "(shiftr [3 6 1 2 4]) -> [4 3 6 1 2]", "(shiftr [8 8 4 4]) -> [4 8 8 4]", "(shiftr [2 3]) -> [3 2]", "(shiftr [4 3 8 7]) -> [7 4 3 8]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.374284, "examples": ["(shiftr [8 6 2]) -> [2 8 6]", "(shiftr [6 6 9 9]) -> [9 6 6 9]", "(shiftr [6]) -> [6]", "(shiftr [2 2]) -> [2 2]", "(shiftr [8 1]) -> [1 8]", "(shiftr [9 2]) -> [2 9]", "(shiftr [5 2 7 4 2]) -> [2 5 2 7 4]", "(shiftr [4 4 8]) -> [8 4 4]", "(shiftr [5]) -> [5]", "(shiftr [6 3 9 2]) -> [2 6 3 9]", "(shiftr [7 9]) -> [9 7]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.001681, "examples": ["(shiftr [9 4 7 5 0]) -> [0 9 4 7 5]", "(shiftr [8 2 2 9]) -> [9 8 2 2]", "(shiftr [0 2 8 1 1]) -> [1 0 2 8 1]", "(shiftr [4 7]) -> [7 4]", "(shiftr [4 2]) -> [2 4]", "(shiftr [8 9 0 0]) -> [0 8 9 0]", "(shiftr [1 1 8]) -> [8 1 1]", "(shiftr [0 7 6 6]) -> [6 0 7 6]", "(shiftr [7 5 8]) -> [8 7 5]", "(shiftr [7 6 9 7 1]) -> [1 7 6 9 7]", "(shiftr [0 1 5]) -> [5 0 1]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.08178, "examples": ["(shiftr [0 0 9 3 3]) -> [3 0 0 9 3]", "(shiftr [9 7 2 7]) -> [7 9 7 2]", "(shiftr [2 6 5 8]) -> [8 2 6 5]", "(shiftr [1 7 8]) -> [8 1 7]", "(shiftr [9 7]) -> [7 9]", "(shiftr [3 8 4]) -> [4 3 8]", "(shiftr [3 0 9 3 4]) -> [4 3 0 9 3]", "(shiftr [4 9 1 0]) -> [0 4 9 1]", "(shiftr [1 1 7 6 4]) -> [4 1 1 7 6]", "(shiftr [7 6 3]) -> [3 7 6]", "(shiftr [2]) -> [2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.970597, "examples": ["(shiftr [2]) -> [2]", "(shiftr [4 4 3 5]) -> [5 4 4 3]", "(shiftr [2 3 4 6]) -> [6 2 3 4]", "(shiftr [2]) -> [2]", "(shiftr [0 2 6]) -> [6 0 2]", "(shiftr [7 9 2 4]) -> [4 7 9 2]", "(shiftr [0 9 3 5]) -> [5 0 9 3]", "(shiftr [3]) -> [3]", "(shiftr [3 8]) -> [8 3]", "(shiftr [3]) -> [3]", "(shiftr [3 0 0 8]) -> [8 3 0 0]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.325094, "examples": ["(shiftr [7 3]) -> [3 7]", "(shiftr [9 0 1]) -> [1 9 0]", "(shiftr [1 2 2 5]) -> [5 1 2 2]", "(shiftr [5 0 9]) -> [9 5 0]", "(shiftr [7 2 9 5]) -> [5 7 2 9]", "(shiftr [1 7 8 9 2]) -> [2 1 7 8 9]", "(shiftr [0 3 2 5]) -> [5 0 3 2]", "(shiftr [7]) -> [7]", "(shiftr [2]) -> [2]", "(shiftr [2 9 8 8]) -> [8 2 9 8]", "(shiftr [0 3]) -> [3 0]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 6.760633, "examples": ["(shiftr [7 7]) -> [7 7]", "(shiftr [7]) -> [7]", "(shiftr [6 7 1 2 1]) -> [1 6 7 1 2]", "(shiftr [7 0 4]) -> [4 7 0]", "(shiftr [4 0 9 6 8]) -> [8 4 0 9 6]", "(shiftr [5 1 6 5 7]) -> [7 5 1 6 5]", "(shiftr [4]) -> [4]", "(shiftr [7 4]) -> [4 7]", "(shiftr [3 2 9 2 5]) -> [5 3 2 9 2]", "(shiftr [8 7 4 5 7]) -> [7 8 7 4 5]", "(shiftr [3 0]) -> [0 3]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.429849, "examples": ["(shiftr [0 8 5]) -> [5 0 8]", "(shiftr [3 7 8 7]) -> [7 3 7 8]", "(shiftr [2 3 3 0]) -> [0 2 3 3]", "(shiftr [6 0 0 3 3]) -> [3 6 0 0 3]", "(shiftr [4 2 7 0]) -> [0 4 2 7]", "(shiftr [6 4 8 6]) -> [6 6 4 8]", "(shiftr [2 1 5]) -> [5 2 1]", "(shiftr [4 5]) -> [5 4]", "(shiftr [2]) -> [2]", "(shiftr [3 9 9]) -> [9 3 9]", "(shiftr [9 0 4 8]) -> [8 9 0 4]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.968213, "examples": ["(shiftr [9 7]) -> [7 9]", "(shiftr [6 1 3]) -> [3 6 1]", "(shiftr [5 3]) -> [3 5]", "(shiftr [8 6 9 2]) -> [2 8 6 9]", "(shiftr [7 8 8 6 2]) -> [2 7 8 8 6]", "(shiftr [6 3]) -> [3 6]", "(shiftr [6]) -> [6]", "(shiftr [2]) -> [2]", "(shiftr [7 6 3]) -> [3 7 6]", "(shiftr [6]) -> [6]", "(shiftr [4 2 9]) -> [9 4 2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.375504, "examples": ["(shiftr [8 2]) -> [2 8]", "(shiftr [6 3 9 5]) -> [5 6 3 9]", "(shiftr [5]) -> [5]", "(shiftr [5]) -> [5]", "(shiftr [6]) -> [6]", "(shiftr [0 4 3 5]) -> [5 0 4 3]", "(shiftr [0 9]) -> [9 0]", "(shiftr [3]) -> [3]", "(shiftr [3 1 3 0]) -> [0 3 1 3]", "(shiftr [2 9 2 5]) -> [5 2 9 2]", "(shiftr [1 3 5]) -> [5 1 3]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse d))) [])) _) _)", "time": 0.310015, "examples": ["(shiftr [0 7 6]) -> [6 0 7]", "(shiftr [1]) -> [1]", "(shiftr [0 0 9]) -> [9 0 0]", "(shiftr [9 0]) -> [0 9]", "(shiftr [6 6 4 7]) -> [7 6 6 4]", "(shiftr [5]) -> [5]", "(shiftr [6]) -> [6]", "(shiftr [9]) -> [9]", "(shiftr [8 7]) -> [7 8]", "(shiftr [8 6 7]) -> [7 8 6]", "(shiftr [4]) -> [4]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 5.948968, "examples": ["(shiftr [2]) -> [2]", "(shiftr [4 1 0]) -> [0 4 1]", "(shiftr [5 9 1 8]) -> [8 5 9 1]", "(shiftr [8]) -> [8]", "(shiftr [0 9]) -> [9 0]", "(shiftr [8 5]) -> [5 8]", "(shiftr [1 6 3 7]) -> [7 1 6 3]", "(shiftr [4 4 9 0]) -> [0 4 4 9]", "(shiftr [2]) -> [2]", "(shiftr [3]) -> [3]", "(shiftr [2 7 2]) -> [2 2 7]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.967777, "examples": ["(shiftr [9 7 0 4]) -> [4 9 7 0]", "(shiftr [7 5 6]) -> [6 7 5]", "(shiftr [3 5 1 1]) -> [1 3 5 1]", "(shiftr [9 0]) -> [0 9]", "(shiftr [7]) -> [7]", "(shiftr [6 7 9]) -> [9 6 7]", "(shiftr [6 3 0]) -> [0 6 3]", "(shiftr [6 7 2 2 8]) -> [8 6 7 2 2]", "(shiftr [9 0 1 7]) -> [7 9 0 1]", "(shiftr [8 9 8]) -> [8 8 9]", "(shiftr [8 7]) -> [7 8]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.611439, "examples": ["(shiftr [6 8 1 4 8]) -> [8 6 8 1 4]", "(shiftr [2 4 8]) -> [8 2 4]", "(shiftr [8 1 0 2 6]) -> [6 8 1 0 2]", "(shiftr [7 4 3]) -> [3 7 4]", "(shiftr [7 0 9]) -> [9 7 0]", "(shiftr [3]) -> [3]", "(shiftr [8]) -> [8]", "(shiftr [7 7 2 9 7]) -> [7 7 7 2 9]", "(shiftr [3 8 4 7]) -> [7 3 8 4]", "(shiftr [3 4 8 6]) -> [6 3 4 8]", "(shiftr [0 0 6 1 0]) -> [0 0 0 6 1]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.871412, "examples": ["(shiftr [5]) -> [5]", "(shiftr [4 8 4 5 9]) -> [9 4 8 4 5]", "(shiftr [7 4 5]) -> [5 7 4]", "(shiftr [3 7 6 5 0]) -> [0 3 7 6 5]", "(shiftr [2 8 2 6]) -> [6 2 8 2]", "(shiftr [5 7 1]) -> [1 5 7]", "(shiftr [9 0 4 0 8]) -> [8 9 0 4 0]", "(shiftr [5 3 6 0 3]) -> [3 5 3 6 0]", "(shiftr [4 6]) -> [6 4]", "(shiftr [4 9 4]) -> [4 4 9]", "(shiftr [2 1 4 6]) -> [6 2 1 4]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.95726, "examples": ["(shiftr [9 1 3]) -> [3 9 1]", "(shiftr [7 3 5]) -> [5 7 3]", "(shiftr [7 3 9]) -> [9 7 3]", "(shiftr [5 6 4 8]) -> [8 5 6 4]", "(shiftr [4 0 2 7]) -> [7 4 0 2]", "(shiftr [7 2]) -> [2 7]", "(shiftr [7 9 5 9 5]) -> [5 7 9 5 9]", "(shiftr [6]) -> [6]", "(shiftr [9 8 7]) -> [7 9 8]", "(shiftr [6 1 4]) -> [4 6 1]", "(shiftr [5 0 8]) -> [8 5 0]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.812556, "examples": ["(shiftr [5]) -> [5]", "(shiftr [8 4 2 0 7]) -> [7 8 4 2 0]", "(shiftr [0 8]) -> [8 0]", "(shiftr [1]) -> [1]", "(shiftr [7 8 0 6 7]) -> [7 7 8 0 6]", "(shiftr [6 9]) -> [9 6]", "(shiftr [1 9]) -> [9 1]", "(shiftr [5 3 4 2 9]) -> [9 5 3 4 2]", "(shiftr [1 2 8 8]) -> [8 1 2 8]", "(shiftr [2 6 1 1 4]) -> [4 2 6 1 1]", "(shiftr [8 7]) -> [7 8]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 6.383264, "examples": ["(shiftr [8 7 4]) -> [4 8 7]", "(shiftr [4 8 8 9 9]) -> [9 4 8 8 9]", "(shiftr [8 3 2 8 1]) -> [1 8 3 2 8]", "(shiftr [1]) -> [1]", "(shiftr [4 1 0 8 6]) -> [6 4 1 0 8]", "(shiftr [8 3]) -> [3 8]", "(shiftr [8 3 5 4 6]) -> [6 8 3 5 4]", "(shiftr [5 0 6 5 5]) -> [5 5 0 6 5]", "(shiftr [3 5]) -> [5 3]", "(shiftr [9]) -> [9]", "(shiftr [2]) -> [2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.348825, "examples": ["(shiftr [6]) -> [6]", "(shiftr [1 0]) -> [0 1]", "(shiftr [7 4 0]) -> [0 7 4]", "(shiftr [0 3]) -> [3 0]", "(shiftr [3]) -> [3]", "(shiftr [4 6 4 5]) -> [5 4 6 4]", "(shiftr [5 6]) -> [6 5]", "(shiftr [0 6 5 2]) -> [2 0 6 5]", "(shiftr [5 0 8 7]) -> [7 5 0 8]", "(shiftr [2 1]) -> [1 2]", "(shiftr [6 6]) -> [6 6]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.644734, "examples": ["(shiftr [9 1 7 8]) -> [8 9 1 7]", "(shiftr [3 3]) -> [3 3]", "(shiftr [2 4 3]) -> [3 2 4]", "(shiftr [4 8 2 4]) -> [4 4 8 2]", "(shiftr [8 1]) -> [1 8]", "(shiftr [1 0 3]) -> [3 1 0]", "(shiftr [3 2 3 8]) -> [8 3 2 3]", "(shiftr [2 1 3 1]) -> [1 2 1 3]", "(shiftr [7 8 5 8]) -> [8 7 8 5]", "(shiftr [6 0]) -> [0 6]", "(shiftr [7]) -> [7]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.019908, "examples": ["(shiftr [5 6]) -> [6 5]", "(shiftr [5 1 9 9]) -> [9 5 1 9]", "(shiftr [6 8 9]) -> [9 6 8]", "(shiftr [3 5 0]) -> [0 3 5]", "(shiftr [9 8 0]) -> [0 9 8]", "(shiftr [5 9 3 7]) -> [7 5 9 3]", "(shiftr [0 2]) -> [2 0]", "(shiftr [3 9 6 8 6]) -> [6 3 9 6 8]", "(shiftr [5 0 2 4 9]) -> [9 5 0 2 4]", "(shiftr [9 6 2 3]) -> [3 9 6 2]", "(shiftr [4]) -> [4]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.887083, "examples": ["(shiftr [2 5 4 4]) -> [4 2 5 4]", "(shiftr [5 5 1]) -> [1 5 5]", "(shiftr [9 6 6 9]) -> [9 9 6 6]", "(shiftr [2 3]) -> [3 2]", "(shiftr [8 7]) -> [7 8]", "(shiftr [1 2 1 1]) -> [1 1 2 1]", "(shiftr [5 7]) -> [7 5]", "(shiftr [0 3]) -> [3 0]", "(shiftr [5 1 2 0]) -> [0 5 1 2]", "(shiftr [5 2]) -> [2 5]", "(shiftr [2 9 4]) -> [4 2 9]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.00961, "examples": ["(shiftr [2 5 3 4 2]) -> [2 2 5 3 4]", "(shiftr [0 3 0]) -> [0 0 3]", "(shiftr [2 2 6 8]) -> [8 2 2 6]", "(shiftr [8]) -> [8]", "(shiftr [6 2]) -> [2 6]", "(shiftr [5 3 6 4 4]) -> [4 5 3 6 4]", "(shiftr [5]) -> [5]", "(shiftr [2]) -> [2]", "(shiftr [3 2 8]) -> [8 3 2]", "(shiftr [8 2 5]) -> [5 8 2]", "(shiftr [0]) -> [0]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.037483, "examples": ["(shiftr [4 7 8 3 8]) -> [8 4 7 8 3]", "(shiftr [5 6 0 6 8]) -> [8 5 6 0 6]", "(shiftr [8 3 3 5 2]) -> [2 8 3 3 5]", "(shiftr [5 6 8 1]) -> [1 5 6 8]", "(shiftr [6 7 6 9 5]) -> [5 6 7 6 9]", "(shiftr [8 0 4 1]) -> [1 8 0 4]", "(shiftr [6]) -> [6]", "(shiftr [0 6 2]) -> [2 0 6]", "(shiftr [8 2 5 0]) -> [0 8 2 5]", "(shiftr [1 5 4 3]) -> [3 1 5 4]", "(shiftr [8 0 3 5 4]) -> [4 8 0 3 5]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.665789, "examples": ["(shiftr [6 1 8]) -> [8 6 1]", "(shiftr [0 9]) -> [9 0]", "(shiftr [3 8 6]) -> [6 3 8]", "(shiftr [3 9 1 5 7]) -> [7 3 9 1 5]", "(shiftr [4 1]) -> [1 4]", "(shiftr [6 4]) -> [4 6]", "(shiftr [0 2 7 5]) -> [5 0 2 7]", "(shiftr [6 6 4]) -> [4 6 6]", "(shiftr [1]) -> [1]", "(shiftr [2]) -> [2]", "(shiftr [9 1]) -> [1 9]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.245221, "examples": ["(shiftr [9 1 3 7 1]) -> [1 9 1 3 7]", "(shiftr [4 5]) -> [5 4]", "(shiftr [7 6 8 7]) -> [7 7 6 8]", "(shiftr [5 7 9]) -> [9 5 7]", "(shiftr [0 5 1 5]) -> [5 0 5 1]", "(shiftr [0 0 3]) -> [3 0 0]", "(shiftr [4 8]) -> [8 4]", "(shiftr [1 3 9]) -> [9 1 3]", "(shiftr [8 0]) -> [0 8]", "(shiftr [3]) -> [3]", "(shiftr [4 3 8 1]) -> [1 4 3 8]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.086548, "examples": ["(shiftr [9 1 8 8]) -> [8 9 1 8]", "(shiftr [1]) -> [1]", "(shiftr [8]) -> [8]", "(shiftr [4 2 8]) -> [8 4 2]", "(shiftr [8 6]) -> [6 8]", "(shiftr [6 3]) -> [3 6]", "(shiftr [9 1]) -> [1 9]", "(shiftr [7 0]) -> [0 7]", "(shiftr [9 4]) -> [4 9]", "(shiftr [2 4 0 6]) -> [6 2 4 0]", "(shiftr [6 4 2]) -> [2 6 4]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.487325, "examples": ["(shiftr [2 7 6]) -> [6 2 7]", "(shiftr [0 7 3]) -> [3 0 7]", "(shiftr [8]) -> [8]", "(shiftr [4 9]) -> [9 4]", "(shiftr [2 5 9 9 8]) -> [8 2 5 9 9]", "(shiftr [7 8 3]) -> [3 7 8]", "(shiftr [6]) -> [6]", "(shiftr [7]) -> [7]", "(shiftr [7 2]) -> [2 7]", "(shiftr [4 1 5 0]) -> [0 4 1 5]", "(shiftr [7 3 7]) -> [7 7 3]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.252949, "examples": ["(shiftr [3 2 6 6]) -> [6 3 2 6]", "(shiftr [7 9 9]) -> [9 7 9]", "(shiftr [4 7 3]) -> [3 4 7]", "(shiftr [3 4 0 5]) -> [5 3 4 0]", "(shiftr [7 1 8 0]) -> [0 7 1 8]", "(shiftr [9 6]) -> [6 9]", "(shiftr [9]) -> [9]", "(shiftr [4 3 0]) -> [0 4 3]", "(shiftr [7]) -> [7]", "(shiftr [1 6 8 9 2]) -> [2 1 6 8 9]", "(shiftr [7 1]) -> [1 7]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.890983, "examples": ["(shiftr [4 0 5 1 9]) -> [9 4 0 5 1]", "(shiftr [8 7 5 9 1]) -> [1 8 7 5 9]", "(shiftr [3 5 2 7 0]) -> [0 3 5 2 7]", "(shiftr [4 4 2 1]) -> [1 4 4 2]", "(shiftr [6 1 2 3]) -> [3 6 1 2]", "(shiftr [8]) -> [8]", "(shiftr [3]) -> [3]", "(shiftr [4 1 4 9 4]) -> [4 4 1 4 9]", "(shiftr [4 8 5]) -> [5 4 8]", "(shiftr [9 6 0 0]) -> [0 9 6 0]", "(shiftr [5 3 7 4]) -> [4 5 3 7]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.078123, "examples": ["(shiftr [3]) -> [3]", "(shiftr [2 3 5 9]) -> [9 2 3 5]", "(shiftr [2]) -> [2]", "(shiftr [8 5]) -> [5 8]", "(shiftr [3 1]) -> [1 3]", "(shiftr [2 9]) -> [9 2]", "(shiftr [3 9 8]) -> [8 3 9]", "(shiftr [3 9 8]) -> [8 3 9]", "(shiftr [7 9 4 6 3]) -> [3 7 9 4 6]", "(shiftr [2]) -> [2]", "(shiftr [3 5 2 2 9]) -> [9 3 5 2 2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.125161, "examples": ["(shiftr [3 9 6]) -> [6 3 9]", "(shiftr [2 1 0 5]) -> [5 2 1 0]", "(shiftr [3 8 7 2 0]) -> [0 3 8 7 2]", "(shiftr [8 0 1]) -> [1 8 0]", "(shiftr [3 1 9 9 6]) -> [6 3 1 9 9]", "(shiftr [3 6 9]) -> [9 3 6]", "(shiftr [2 2]) -> [2 2]", "(shiftr [2 6 2]) -> [2 2 6]", "(shiftr [7 2 1]) -> [1 7 2]", "(shiftr [5 5]) -> [5 5]", "(shiftr [4 8 4]) -> [4 4 8]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 4.822729, "examples": ["(shiftr [7]) -> [7]", "(shiftr [8 2 8]) -> [8 8 2]", "(shiftr [9 8 1 9]) -> [9 9 8 1]", "(shiftr [8 4]) -> [4 8]", "(shiftr [4 8 5 5 2]) -> [2 4 8 5 5]", "(shiftr [1 2 1 8 8]) -> [8 1 2 1 8]", "(shiftr [1 4 8 0]) -> [0 1 4 8]", "(shiftr [7 2 0 9]) -> [9 7 2 0]", "(shiftr [5 5 1 6 6]) -> [6 5 5 1 6]", "(shiftr [6 2 7 4 5]) -> [5 6 2 7 4]", "(shiftr [5 3 5 3]) -> [3 5 3 5]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 5.733309, "examples": ["(shiftr [9 7]) -> [7 9]", "(shiftr [1 5 7 5 7]) -> [7 1 5 7 5]", "(shiftr [3 0 2]) -> [2 3 0]", "(shiftr [2 1 1]) -> [1 2 1]", "(shiftr [8 6 8]) -> [8 8 6]", "(shiftr [0 6 9 7]) -> [7 0 6 9]", "(shiftr [6 4 4 3]) -> [3 6 4 4]", "(shiftr [9 2]) -> [2 9]", "(shiftr [5 4 4 7 5]) -> [5 5 4 4 7]", "(shiftr [5 6 2 3]) -> [3 5 6 2]", "(shiftr [2 6 1 6 5]) -> [5 2 6 1 6]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.149524, "examples": ["(shiftr [5 3 9 2]) -> [2 5 3 9]", "(shiftr [4 2]) -> [2 4]", "(shiftr [1 5 8]) -> [8 1 5]", "(shiftr [6 0]) -> [0 6]", "(shiftr [0 2]) -> [2 0]", "(shiftr [3]) -> [3]", "(shiftr [6 2 6 7]) -> [7 6 2 6]", "(shiftr [3 8 7 2]) -> [2 3 8 7]", "(shiftr [7 6 4 0]) -> [0 7 6 4]", "(shiftr [7 2 6]) -> [6 7 2]", "(shiftr [9 1 9]) -> [9 9 1]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 5.969, "examples": ["(shiftr [8 4]) -> [4 8]", "(shiftr [1 3 8]) -> [8 1 3]", "(shiftr [0 2 2]) -> [2 0 2]", "(shiftr [5 0]) -> [0 5]", "(shiftr [2 4 8 2 7]) -> [7 2 4 8 2]", "(shiftr [1]) -> [1]", "(shiftr [4 5 0 3]) -> [3 4 5 0]", "(shiftr [2 4 0 8]) -> [8 2 4 0]", "(shiftr [2 7 8 3 0]) -> [0 2 7 8 3]", "(shiftr [4 6 4]) -> [4 4 6]", "(shiftr [9 1 3]) -> [3 9 1]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 8.120489, "examples": ["(shiftr [5 4]) -> [4 5]", "(shiftr [5 8 9 2]) -> [2 5 8 9]", "(shiftr [0 9 4]) -> [4 0 9]", "(shiftr [0 4]) -> [4 0]", "(shiftr [0 7 9]) -> [9 0 7]", "(shiftr [4 7 6]) -> [6 4 7]", "(shiftr [5 9 2]) -> [2 5 9]", "(shiftr [4 0 0 6 3]) -> [3 4 0 0 6]", "(shiftr [9 6]) -> [6 9]", "(shiftr [8 0 5]) -> [5 8 0]", "(shiftr [2 9]) -> [9 2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.113508, "examples": ["(shiftr [0 7]) -> [7 0]", "(shiftr [3 7]) -> [7 3]", "(shiftr [8]) -> [8]", "(shiftr [5 5]) -> [5 5]", "(shiftr [4]) -> [4]", "(shiftr [9 8]) -> [8 9]", "(shiftr [8]) -> [8]", "(shiftr [3 6 7 9 3]) -> [3 3 6 7 9]", "(shiftr [7 8 6]) -> [6 7 8]", "(shiftr [5 7 9 8]) -> [8 5 7 9]", "(shiftr [9 2 3 9 0]) -> [0 9 2 3 9]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 8.045816, "examples": ["(shiftr [2 0 6 8]) -> [8 2 0 6]", "(shiftr [4]) -> [4]", "(shiftr [5 8 3 3 2]) -> [2 5 8 3 3]", "(shiftr [9]) -> [9]", "(shiftr [7]) -> [7]", "(shiftr [2 7 8 7 7]) -> [7 2 7 8 7]", "(shiftr [2]) -> [2]", "(shiftr [4 4]) -> [4 4]", "(shiftr [1 2]) -> [2 1]", "(shiftr [3 3 9 1]) -> [1 3 3 9]", "(shiftr [7 1 0 4 0]) -> [0 7 1 0 4]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 8.070106, "examples": ["(shiftr [1 9]) -> [9 1]", "(shiftr [6]) -> [6]", "(shiftr [9 4 2]) -> [2 9 4]", "(shiftr [7 4 6 4]) -> [4 7 4 6]", "(shiftr [0 7 8 0]) -> [0 0 7 8]", "(shiftr [3 2 7 1]) -> [1 3 2 7]", "(shiftr [4 8]) -> [8 4]", "(shiftr [0]) -> [0]", "(shiftr [5 7 8 3]) -> [3 5 7 8]", "(shiftr [2]) -> [2]", "(shiftr [5 2 5 4]) -> [4 5 2 5]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 5.850325, "examples": ["(shiftr [3 5]) -> [5 3]", "(shiftr [4 3]) -> [3 4]", "(shiftr [0]) -> [0]", "(shiftr [8 7 5]) -> [5 8 7]", "(shiftr [5 9 6 1]) -> [1 5 9 6]", "(shiftr [3 7 6 1 3]) -> [3 3 7 6 1]", "(shiftr [7 9 8]) -> [8 7 9]", "(shiftr [0]) -> [0]", "(shiftr [0]) -> [0]", "(shiftr [8 8 4]) -> [4 8 8]", "(shiftr [2 7 6 7 6]) -> [6 2 7 6 7]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.848778, "examples": ["(shiftr [3 5]) -> [5 3]", "(shiftr [3 2 3 9]) -> [9 3 2 3]", "(shiftr [5 8 6]) -> [6 5 8]", "(shiftr [3 1 9]) -> [9 3 1]", "(shiftr [4 4 6 3 8]) -> [8 4 4 6 3]", "(shiftr [5 9 5]) -> [5 5 9]", "(shiftr [9]) -> [9]", "(shiftr [4 3 5]) -> [5 4 3]", "(shiftr [5 2 9 3]) -> [3 5 2 9]", "(shiftr [1]) -> [1]", "(shiftr [8 9]) -> [9 8]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.70415, "examples": ["(shiftr [7 4 1 1]) -> [1 7 4 1]", "(shiftr [3]) -> [3]", "(shiftr [7 8 7 1 7]) -> [7 7 8 7 1]", "(shiftr [2 3 6 7]) -> [7 2 3 6]", "(shiftr [8]) -> [8]", "(shiftr [1]) -> [1]", "(shiftr [3]) -> [3]", "(shiftr [5]) -> [5]", "(shiftr [9]) -> [9]", "(shiftr [4 0]) -> [0 4]", "(shiftr [0 4 8 8 5]) -> [5 0 4 8 8]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 8.302701, "examples": ["(shiftr [1 8 4]) -> [4 1 8]", "(shiftr [9 3]) -> [3 9]", "(shiftr [2]) -> [2]", "(shiftr [3 8 0 2 2]) -> [2 3 8 0 2]", "(shiftr [8 9]) -> [9 8]", "(shiftr [3 1 5]) -> [5 3 1]", "(shiftr [6 6 8 9 9]) -> [9 6 6 8 9]", "(shiftr [2 6 8]) -> [8 2 6]", "(shiftr [2 3 9]) -> [9 2 3]", "(shiftr [1 4 5 2]) -> [2 1 4 5]", "(shiftr [6 9]) -> [9 6]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 7.784426, "examples": ["(shiftr [9 8 7 0 2]) -> [2 9 8 7 0]", "(shiftr [5]) -> [5]", "(shiftr [9 7 9 8]) -> [8 9 7 9]", "(shiftr [8 5 3]) -> [3 8 5]", "(shiftr [9 9 9 4 7]) -> [7 9 9 9 4]", "(shiftr [2 0]) -> [0 2]", "(shiftr [4]) -> [4]", "(shiftr [2 0]) -> [0 2]", "(shiftr [3 1 7]) -> [7 3 1]", "(shiftr [6 4]) -> [4 6]", "(shiftr [0 7 6 8 7]) -> [7 0 7 6 8]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 8.328494, "examples": ["(shiftr [3]) -> [3]", "(shiftr [1 8]) -> [8 1]", "(shiftr [7]) -> [7]", "(shiftr [7]) -> [7]", "(shiftr [8 5 6 7]) -> [7 8 5 6]", "(shiftr [6 5]) -> [5 6]", "(shiftr [6 5 4 1]) -> [1 6 5 4]", "(shiftr [9 2 4 1]) -> [1 9 2 4]", "(shiftr [5 6 4]) -> [4 5 6]", "(shiftr [2 9 6 8 7]) -> [7 2 9 6 8]", "(shiftr [2 9 8]) -> [8 2 9]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 8.116815, "examples": ["(shiftr [1 6 8]) -> [8 1 6]", "(shiftr [2 2]) -> [2 2]", "(shiftr [6 4 2 9]) -> [9 6 4 2]", "(shiftr [7 9]) -> [9 7]", "(shiftr [6 4 7 7 6]) -> [6 6 4 7 7]", "(shiftr [0 0]) -> [0 0]", "(shiftr [2]) -> [2]", "(shiftr [6 0]) -> [0 6]", "(shiftr [2 9 2]) -> [2 2 9]", "(shiftr [7]) -> [7]", "(shiftr [6 6 9 9]) -> [9 6 6 9]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 8.862606, "examples": ["(shiftr [2 0 1]) -> [1 2 0]", "(shiftr [9]) -> [9]", "(shiftr [6 2]) -> [2 6]", "(shiftr [5 3 0]) -> [0 5 3]", "(shiftr [3 6]) -> [6 3]", "(shiftr [4 4 4 4]) -> [4 4 4 4]", "(shiftr [0]) -> [0]", "(shiftr [2 4 5]) -> [5 2 4]", "(shiftr [4 5 8 3]) -> [3 4 5 8]", "(shiftr [3]) -> [3]", "(shiftr [7 5 4]) -> [4 7 5]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.679638, "examples": ["(shiftr [4 0 0 7]) -> [7 4 0 0]", "(shiftr [1 8 3 1]) -> [1 1 8 3]", "(shiftr [1 1]) -> [1 1]", "(shiftr [1]) -> [1]", "(shiftr [1 1 4 0 6]) -> [6 1 1 4 0]", "(shiftr [9 6 1 1]) -> [1 9 6 1]", "(shiftr [1]) -> [1]", "(shiftr [1 6 2]) -> [2 1 6]", "(shiftr [6 3 3 7]) -> [7 6 3 3]", "(shiftr [5]) -> [5]", "(shiftr [2 5 7 4 8]) -> [8 2 5 7 4]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 5.374637, "examples": ["(shiftr [1 4 1 6 8]) -> [8 1 4 1 6]", "(shiftr [7 2]) -> [2 7]", "(shiftr [0 7 4]) -> [4 0 7]", "(shiftr [6 3 2 5 2]) -> [2 6 3 2 5]", "(shiftr [6 6 9]) -> [9 6 6]", "(shiftr [4 1]) -> [1 4]", "(shiftr [4 7 0]) -> [0 4 7]", "(shiftr [5 9 8 4 4]) -> [4 5 9 8 4]", "(shiftr [0 7]) -> [7 0]", "(shiftr [4 5 0 9]) -> [9 4 5 0]", "(shiftr [2 7]) -> [7 2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 4.431034, "examples": ["(shiftr [9 8 5]) -> [5 9 8]", "(shiftr [0 4 9 1]) -> [1 0 4 9]", "(shiftr [3 7]) -> [7 3]", "(shiftr [1 1 6]) -> [6 1 1]", "(shiftr [8]) -> [8]", "(shiftr [6 8 1]) -> [1 6 8]", "(shiftr [6]) -> [6]", "(shiftr [9 5 1]) -> [1 9 5]", "(shiftr [5 7 0 6 5]) -> [5 5 7 0 6]", "(shiftr [7 5]) -> [5 7]", "(shiftr [9 3 4 1]) -> [1 9 3 4]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.212983, "examples": ["(shiftr [8 0]) -> [0 8]", "(shiftr [3 7 7]) -> [7 3 7]", "(shiftr [0 1 6]) -> [6 0 1]", "(shiftr [1]) -> [1]", "(shiftr [6 8]) -> [8 6]", "(shiftr [7 7 9 0]) -> [0 7 7 9]", "(shiftr [0 1 4 9]) -> [9 0 1 4]", "(shiftr [4 6 2]) -> [2 4 6]", "(shiftr [5]) -> [5]", "(shiftr [7 3]) -> [3 7]", "(shiftr [7 2 8]) -> [8 7 2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.340649, "examples": ["(shiftr [2 5]) -> [5 2]", "(shiftr [5]) -> [5]", "(shiftr [6 0]) -> [0 6]", "(shiftr [5 4]) -> [4 5]", "(shiftr [2 9 8 9]) -> [9 2 9 8]", "(shiftr [8]) -> [8]", "(shiftr [1]) -> [1]", "(shiftr [0 6]) -> [6 0]", "(shiftr [9 5 9 7 0]) -> [0 9 5 9 7]", "(shiftr [6 9 3]) -> [3 6 9]", "(shiftr [6 8 4 7]) -> [7 6 8 4]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 8.52771, "examples": ["(shiftr [7 5 7 2]) -> [2 7 5 7]", "(shiftr [9 5]) -> [5 9]", "(shiftr [6 4 5 6 7]) -> [7 6 4 5 6]", "(shiftr [0 8]) -> [8 0]", "(shiftr [3 8 3 7]) -> [7 3 8 3]", "(shiftr [1 3 8 7 1]) -> [1 1 3 8 7]", "(shiftr [1 3]) -> [3 1]", "(shiftr [1 8]) -> [8 1]", "(shiftr [0 3 0 4 6]) -> [6 0 3 0 4]", "(shiftr [3]) -> [3]", "(shiftr [1 1 7 2 5]) -> [5 1 1 7 2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.732265, "examples": ["(shiftr [4 3 6 8]) -> [8 4 3 6]", "(shiftr [8 4 2 5 4]) -> [4 8 4 2 5]", "(shiftr [5 2 9 6]) -> [6 5 2 9]", "(shiftr [9 8 2 5 7]) -> [7 9 8 2 5]", "(shiftr [8 1]) -> [1 8]", "(shiftr [8 1 3 2]) -> [2 8 1 3]", "(shiftr [8 7]) -> [7 8]", "(shiftr [2 7 5 3]) -> [3 2 7 5]", "(shiftr [5 1 1 7]) -> [7 5 1 1]", "(shiftr [2 6]) -> [6 2]", "(shiftr [0 2 8]) -> [8 0 2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 8.542488, "examples": ["(shiftr [0]) -> [0]", "(shiftr [1 1]) -> [1 1]", "(shiftr [8]) -> [8]", "(shiftr [1]) -> [1]", "(shiftr [2 3 8 5]) -> [5 2 3 8]", "(shiftr [0 0 3]) -> [3 0 0]", "(shiftr [2 6 5 5 2]) -> [2 2 6 5 5]", "(shiftr [5]) -> [5]", "(shiftr [9]) -> [9]", "(shiftr [6 5 7 1]) -> [1 6 5 7]", "(shiftr [2 2 3]) -> [3 2 2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.798104, "examples": ["(shiftr [8 9 8 8]) -> [8 8 9 8]", "(shiftr [1 4]) -> [4 1]", "(shiftr [4 1]) -> [1 4]", "(shiftr [4 0]) -> [0 4]", "(shiftr [4 3]) -> [3 4]", "(shiftr [4]) -> [4]", "(shiftr [1 0 3 3]) -> [3 1 0 3]", "(shiftr [8 8]) -> [8 8]", "(shiftr [8 9 5 2]) -> [2 8 9 5]", "(shiftr [6]) -> [6]", "(shiftr [8 8 8 6 7]) -> [7 8 8 8 6]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.197418, "examples": ["(shiftr [4 9 6 3 7]) -> [7 4 9 6 3]", "(shiftr [3 5]) -> [5 3]", "(shiftr [1 5 9 7]) -> [7 1 5 9]", "(shiftr [4 4 4 6 1]) -> [1 4 4 4 6]", "(shiftr [2 4 4]) -> [4 2 4]", "(shiftr [4 0]) -> [0 4]", "(shiftr [1 5 1 4]) -> [4 1 5 1]", "(shiftr [1]) -> [1]", "(shiftr [8 2]) -> [2 8]", "(shiftr [4 3 2]) -> [2 4 3]", "(shiftr [6 0 4 9]) -> [9 6 0 4]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 9.02663, "examples": ["(shiftr [6 2 3 7 2]) -> [2 6 2 3 7]", "(shiftr [2]) -> [2]", "(shiftr [2 9 0]) -> [0 2 9]", "(shiftr [0 7]) -> [7 0]", "(shiftr [7 2 4 3 0]) -> [0 7 2 4 3]", "(shiftr [4]) -> [4]", "(shiftr [0 3 6]) -> [6 0 3]", "(shiftr [5 4 9]) -> [9 5 4]", "(shiftr [4 9]) -> [9 4]", "(shiftr [2 4 7 2]) -> [2 2 4 7]", "(shiftr [0 0 8 0]) -> [0 0 0 8]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.724071, "examples": ["(shiftr [8 3 9]) -> [9 8 3]", "(shiftr [3 8]) -> [8 3]", "(shiftr [7]) -> [7]", "(shiftr [8 2 2 5 6]) -> [6 8 2 2 5]", "(shiftr [4 3 2 1 2]) -> [2 4 3 2 1]", "(shiftr [1 1 6 2 4]) -> [4 1 1 6 2]", "(shiftr [5]) -> [5]", "(shiftr [7 7]) -> [7 7]", "(shiftr [7 9 3 5]) -> [5 7 9 3]", "(shiftr [0 1 9]) -> [9 0 1]", "(shiftr [2 3 5 7 4]) -> [4 2 3 5 7]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 8.446119, "examples": ["(shiftr [8 4 2 3 0]) -> [0 8 4 2 3]", "(shiftr [0]) -> [0]", "(shiftr [2 9 6 2 1]) -> [1 2 9 6 2]", "(shiftr [7]) -> [7]", "(shiftr [4 8 4 9]) -> [9 4 8 4]", "(shiftr [4]) -> [4]", "(shiftr [7 1]) -> [1 7]", "(shiftr [9]) -> [9]", "(shiftr [7 1 7 0]) -> [0 7 1 7]", "(shiftr [0 8 7 6 8]) -> [8 0 8 7 6]", "(shiftr [5]) -> [5]"], "name": "shiftr"}
