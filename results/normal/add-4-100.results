{"name": "add", "examples": ["(add [] 5) -> []", "(add [8 6] 8) -> [16 14]", "(add [7 4 7] 6) -> [13 10 13]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.033158}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [] 0) -> []", "(add [3] 6) -> [9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.032302}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [7 7 8 3] 4) -> [11 11 12 7]", "(add [6 6 8 4] 5) -> [11 11 13 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.035546}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [0] 0) -> [0]", "(add [2 5 5] 5) -> [7 10 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.033147}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [5 4 3] 1) -> [6 5 4]", "(add [] 7) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.044549}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [4] 7) -> [11]", "(add [4 0 3 0] 1) -> [5 1 4 1]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.040478}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [3 5 8 5] 8) -> [11 13 16 13]", "(add [8 3 8 5 1] 0) -> [8 3 8 5 1]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.04271}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [4 3 1 4 5] 8) -> [12 11 9 12 13]", "(add [0] 2) -> [2]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.037589}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [] 4) -> []", "(add [6 2 0 4 7] 4) -> [10 6 4 8 11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.049242}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [] 1) -> []", "(add [8] 2) -> [10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.039034}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [] 4) -> []", "(add [8 0 0] 1) -> [9 1 1]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.049116}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [4] 4) -> [8]", "(add [3 3 3 0 6] 6) -> [9 9 9 6 12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.055523}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [3] 2) -> [5]", "(add [9 8 2 6 5] 2) -> [11 10 4 8 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031859}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [4 5 3 6] 5) -> [9 10 8 11]", "(add [6] 4) -> [10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.040558}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [9 3 1] 5) -> [14 8 6]", "(add [7 5 0 6] 6) -> [13 11 6 12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.051346}
{"name": "add", "examples": ["(add [] 0) -> []", "(add [4 2 2] 5) -> [9 7 7]", "(add [1] 2) -> [3]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.043577}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [7 0 6] 3) -> [10 3 9]", "(add [8 2 6] 0) -> [8 2 6]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.037723}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [2] 4) -> [6]", "(add [0 8 4 0] 8) -> [8 16 12 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.043898}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [9 0] 6) -> [15 6]", "(add [] 5) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.042755}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [] 7) -> []", "(add [1] 5) -> [6]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b 1)))) _) _)", "time": 0.032101}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [9 9] 0) -> [9 9]", "(add [9 9 9 1] 9) -> [18 18 18 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.040642}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [3 2] 5) -> [8 7]", "(add [6 7 6 7] 2) -> [8 9 8 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.04604}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [6 3 3 2] 9) -> [15 12 12 11]", "(add [5 9 6 2] 5) -> [10 14 11 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.04219}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [3] 0) -> [3]", "(add [6 4 5 0 1] 7) -> [13 11 12 7 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.039094}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [] 3) -> []", "(add [3 8 8 8 2] 8) -> [11 16 16 16 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.041431}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [6] 6) -> [12]", "(add [5 0 0] 8) -> [13 8 8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031488}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [] 0) -> []", "(add [1 7 9] 9) -> [10 16 18]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.040147}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [] 7) -> []", "(add [4] 7) -> [11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.035375}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [6] 5) -> [11]", "(add [] 1) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.030628}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [5 2] 0) -> [5 2]", "(add [5 8 8 3 2] 9) -> [14 17 17 12 11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.03216}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [2 3 9 8] 4) -> [6 7 13 12]", "(add [5 5 9 6] 7) -> [12 12 16 13]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.050483}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [6 5 9 5 7] 0) -> [6 5 9 5 7]", "(add [1 4 7 0] 7) -> [8 11 14 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.041939}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [] 4) -> []", "(add [] 1) -> []"], "solution": "(let add (let a (lambda (c b) []) _) _)", "time": 0.000697}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [5 1 8] 6) -> [11 7 14]", "(add [0] 7) -> [7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.051453}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [4 2] 8) -> [12 10]", "(add [0 7] 2) -> [2 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.030963}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [] 8) -> []", "(add [9 8] 7) -> [16 15]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031292}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [8 2 7] 3) -> [11 5 10]", "(add [7 8] 5) -> [12 13]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.049448}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [7 3 2 9 1] 0) -> [7 3 2 9 1]", "(add [1 2 0 5] 6) -> [7 8 6 11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.038834}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [1 5 7 1 1] 7) -> [8 12 14 8 8]", "(add [5 8 9 0] 2) -> [7 10 11 2]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.049688}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [2 2 1] 8) -> [10 10 9]", "(add [6 7 4] 0) -> [6 7 4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.048365}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [3 2] 5) -> [8 7]", "(add [1 0] 1) -> [2 1]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.045646}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [] 9) -> []", "(add [1 7 8] 3) -> [4 10 11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.032465}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [1] 2) -> [3]", "(add [3] 2) -> [5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.039483}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [2 1] 0) -> [2 1]", "(add [1 9 6 2 8] 1) -> [2 10 7 3 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031428}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [3 2 4 5 4] 1) -> [4 3 5 6 5]", "(add [8 9 2] 3) -> [11 12 5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.036669}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [9 5 2 8 8] 4) -> [13 9 6 12 12]", "(add [8 6] 5) -> [13 11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.049961}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [] 6) -> []", "(add [2 7 4 4] 9) -> [11 16 13 13]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.037013}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [] 0) -> []", "(add [] 9) -> []"], "solution": "(let add (let a (lambda (c b) []) _) _)", "time": 0.00043}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [] 1) -> []", "(add [6 8] 7) -> [13 15]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.045479}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [4 0] 9) -> [13 9]", "(add [4 0 0 3 9] 7) -> [11 7 7 10 16]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.03173}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [9 4 5 7 0] 7) -> [16 11 12 14 7]", "(add [1] 3) -> [4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.050879}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [1] 6) -> [7]", "(add [4] 4) -> [8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.036472}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [0 4 1 2 0] 2) -> [2 6 3 4 2]", "(add [3 0 2 7 7] 9) -> [12 9 11 16 16]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031693}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [] 9) -> []", "(add [5 0] 3) -> [8 3]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.03182}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [9 6 4 1] 3) -> [12 9 7 4]", "(add [8] 1) -> [9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.032319}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [1 0 5 3 5] 7) -> [8 7 12 10 12]", "(add [5 6 7] 7) -> [12 13 14]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.049457}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [] 1) -> []", "(add [0 8] 5) -> [5 13]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.052672}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [1] 0) -> [1]", "(add [7 5 9] 4) -> [11 9 13]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.04842}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [0 3] 6) -> [6 9]", "(add [4 6 2] 2) -> [6 8 4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.043584}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [7 2 2 8] 6) -> [13 8 8 14]", "(add [1 6 6 4 4] 3) -> [4 9 9 7 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031019}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [8] 6) -> [14]", "(add [6 0] 1) -> [7 1]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.048257}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [] 9) -> []", "(add [6 9 9 2] 1) -> [7 10 10 3]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.050869}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [8 4 2 0] 5) -> [13 9 7 5]", "(add [1] 1) -> [2]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.03729}
{"name": "add", "examples": ["(add [] 0) -> []", "(add [9 7 4] 0) -> [9 7 4]", "(add [9 5] 6) -> [15 11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.035654}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [2] 4) -> [6]", "(add [3] 4) -> [7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.050356}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [9] 2) -> [11]", "(add [6 5 0 3 4] 8) -> [14 13 8 11 12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.041879}
{"name": "add", "examples": ["(add [] 0) -> []", "(add [7 9 4 8] 1) -> [8 10 5 9]", "(add [6 5 6] 6) -> [12 11 12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.041767}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [4 8] 0) -> [4 8]", "(add [4 1 9] 5) -> [9 6 14]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.038362}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [0 1 4] 1) -> [1 2 5]", "(add [0 0 8 7] 7) -> [7 7 15 14]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.030717}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [4 3 8] 7) -> [11 10 15]", "(add [9] 4) -> [13]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.044468}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [7 8 8 9] 4) -> [11 12 12 13]", "(add [] 2) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031578}
{"name": "add", "examples": ["(add [] 7) -> []", "(add [2 3 9 6 1] 6) -> [8 9 15 12 7]", "(add [] 0) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.049884}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [1 8 1 8 9] 9) -> [10 17 10 17 18]", "(add [7 0 1 2] 2) -> [9 2 3 4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.03275}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [0 9] 7) -> [7 16]", "(add [6 6 3 4] 2) -> [8 8 5 6]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.043517}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [7] 4) -> [11]", "(add [0 0] 9) -> [9 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031237}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [2 4 1 1] 8) -> [10 12 9 9]", "(add [0 3] 6) -> [6 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.03644}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [8 8] 1) -> [9 9]", "(add [2 2 7 1 1] 2) -> [4 4 9 3 3]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.052344}
{"name": "add", "examples": ["(add [] 0) -> []", "(add [] 2) -> []", "(add [8 3 6 1 7] 0) -> [8 3 6 1 7]"], "solution": "(let add (let a (lambda (c b) c) _) _)", "time": 0.000598}
{"name": "add", "examples": ["(add [] 1) -> []", "(add [2 2 1 2] 2) -> [4 4 3 4]", "(add [6] 4) -> [10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.045602}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [9 5 4 9 8] 5) -> [14 10 9 14 13]", "(add [2 4 1 5] 5) -> [7 9 6 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.033843}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [7 8 1] 1) -> [8 9 2]", "(add [8 8 4] 6) -> [14 14 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.04651}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [4 4 3 3 9] 4) -> [8 8 7 7 13]", "(add [] 1) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.04164}
{"name": "add", "examples": ["(add [] 3) -> []", "(add [0 3 5 0] 5) -> [5 8 10 5]", "(add [3 2 5] 1) -> [4 3 6]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.035779}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [7 0] 7) -> [14 7]", "(add [6 0] 5) -> [11 5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.030446}
{"name": "add", "examples": ["(add [] 4) -> []", "(add [8 3 5 8 2] 0) -> [8 3 5 8 2]", "(add [2 6 1 4 5] 0) -> [2 6 1 4 5]"], "solution": "(let add (let a (lambda (c b) c) _) _)", "time": 0.000379}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [1 2] 4) -> [5 6]", "(add [9 7 1] 4) -> [13 11 5]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031649}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [] 5) -> []", "(add [1] 1) -> [2]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b b)))) _) _)", "time": 0.045539}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [] 4) -> []", "(add [0 3 5] 6) -> [6 9 11]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.032375}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [1 4 1 7] 0) -> [1 4 1 7]", "(add [2 1 8 7] 9) -> [11 10 17 16]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.030916}
{"name": "add", "examples": ["(add [] 5) -> []", "(add [2 6] 9) -> [11 15]", "(add [9 1 8 4 4] 8) -> [17 9 16 12 12]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.03717}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [1] 2) -> [3]", "(add [6 1 6 0] 4) -> [10 5 10 4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.049253}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [6] 9) -> [15]", "(add [9 5 0 9 2] 8) -> [17 13 8 17 10]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.047457}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [1 5 4 1 1] 1) -> [2 6 5 2 2]", "(add [9] 9) -> [18]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031437}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [0] 8) -> [8]", "(add [0 6 0 4] 5) -> [5 11 5 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.053151}
{"name": "add", "examples": ["(add [] 9) -> []", "(add [2 8 9 6 0] 1) -> [3 9 10 7 1]", "(add [] 2) -> []"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.031094}
{"name": "add", "examples": ["(add [] 0) -> []", "(add [0 9 8 1] 1) -> [1 10 9 2]", "(add [2 5] 9) -> [11 14]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.032062}
{"name": "add", "examples": ["(add [] 8) -> []", "(add [0 2 3 0] 9) -> [9 11 12 9]", "(add [6 9 2 5] 4) -> [10 13 6 9]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.030906}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [4 4 4] 0) -> [4 4 4]", "(add [6 1] 3) -> [9 4]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.029908}
{"name": "add", "examples": ["(add [] 2) -> []", "(add [1 2 0] 1) -> [2 3 1]", "(add [1 7 9 6 0] 7) -> [8 14 16 13 7]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.029838}
{"name": "add", "examples": ["(add [] 6) -> []", "(add [5 0 7 0] 6) -> [11 6 13 6]", "(add [0] 8) -> [8]"], "solution": "(let add (let a (lambda (c b) (map c (lambda (d) (+ b d)))) _) _)", "time": 0.030509}
