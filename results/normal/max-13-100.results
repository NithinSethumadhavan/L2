{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1]) -> 1", "(max [1 7 9]) -> 9", "(max [0]) -> 0", "(max [9 3]) -> 9", "(max [1]) -> 1", "(max [7 2 5 8]) -> 8", "(max [1 4 9]) -> 9", "(max [3]) -> 3", "(max [1]) -> 1", "(max [4 4]) -> 4", "(max [8 9 9]) -> 9", "(max [0 6 5]) -> 6"], "time": 7.447252}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9]) -> 9", "(max [4 6 8]) -> 8", "(max [7]) -> 7", "(max [8 0 9 4 7]) -> 9", "(max [2 1 1 6 2]) -> 6", "(max [2 0]) -> 2", "(max [1 1]) -> 1", "(max [5 0 4 2]) -> 5", "(max [8 9 0 9]) -> 9", "(max [1]) -> 1", "(max [3 2 5]) -> 5", "(max [4 5 7 8 0]) -> 8"], "time": 7.764249}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8]) -> 8", "(max [1 9]) -> 9", "(max [3]) -> 3", "(max [4 0]) -> 4", "(max [2 6 4 8 3]) -> 8", "(max [0]) -> 0", "(max [3 0]) -> 3", "(max [5 2 5]) -> 5", "(max [0 2]) -> 2", "(max [6 9]) -> 9", "(max [1 7 6 0 7]) -> 7", "(max [2 5]) -> 5"], "time": 8.132476}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3]) -> 3", "(max [4]) -> 4", "(max [0 1 7]) -> 7", "(max [9 3 5 0 0]) -> 9", "(max [6 8 3 4]) -> 8", "(max [6]) -> 6", "(max [9 1]) -> 9", "(max [9]) -> 9", "(max [9 8 4]) -> 9", "(max [6 7 1]) -> 7", "(max [0 9 2]) -> 9", "(max [6 8]) -> 8"], "time": 8.063985}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2]) -> 2", "(max [4 8 7 4]) -> 8", "(max [6]) -> 6", "(max [5 1 1 8 2]) -> 8", "(max [2 2 0 0 9]) -> 9", "(max [9 3 9]) -> 9", "(max [1 5 3 1]) -> 5", "(max [8 6 2 8]) -> 8", "(max [5 7 1 2]) -> 7", "(max [9]) -> 9", "(max [2]) -> 2", "(max [5]) -> 5"], "time": 8.091146}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 4]) -> 8", "(max [4]) -> 4", "(max [4 2 1 8 4]) -> 8", "(max [5 0 8]) -> 8", "(max [7]) -> 7", "(max [8 1 6 3]) -> 8", "(max [5 3 0]) -> 5", "(max [2 5]) -> 5", "(max [7 9 3 2]) -> 9", "(max [3 5 5 1 1]) -> 5", "(max [4 5 8 1]) -> 8", "(max [3 4 5]) -> 5"], "time": 8.266231}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 7]) -> 8", "(max [5 2 6 3 6]) -> 6", "(max [1]) -> 1", "(max [1 8 3 7]) -> 8", "(max [0 4]) -> 4", "(max [3 9 5]) -> 9", "(max [2 9]) -> 9", "(max [8 9 2 7]) -> 9", "(max [7 0 9 2 3]) -> 9", "(max [2 1 0 5]) -> 5", "(max [3]) -> 3", "(max [1 9 5 0]) -> 9"], "time": 8.272355}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 7 3 8 2]) -> 8", "(max [7 2 4 7]) -> 7", "(max [3]) -> 3", "(max [1 1]) -> 1", "(max [2 0 4]) -> 4", "(max [3 9 0 0]) -> 9", "(max [5]) -> 5", "(max [3 7 9]) -> 9", "(max [4]) -> 4", "(max [3 5 8 4 0]) -> 8", "(max [4 6 6 8 2]) -> 8", "(max [7 1 2]) -> 7"], "time": 8.356133}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 1]) -> 1", "(max [3]) -> 3", "(max [1 4 0 5 4]) -> 5", "(max [7 0 3 5 3]) -> 7", "(max [1 7 7 4 1]) -> 7", "(max [2 1 8 7]) -> 8", "(max [5]) -> 5", "(max [1 6]) -> 6", "(max [3 4 1 2 4]) -> 4", "(max [1]) -> 1", "(max [3 0 6 5 4]) -> 6", "(max [1 5 5 1]) -> 5"], "time": 8.608005}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 6]) -> 8", "(max [6 3]) -> 6", "(max [3 6 1 1]) -> 6", "(max [4 0 5]) -> 5", "(max [8 0 6]) -> 8", "(max [7 2 6 3 9]) -> 9", "(max [2 5 6 2 1]) -> 6", "(max [2 4 9]) -> 9", "(max [1 2]) -> 2", "(max [7 1 7 6 0]) -> 7", "(max [2 9 4 4]) -> 9", "(max [9 7]) -> 9"], "time": 8.508885}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 9 8 4 8]) -> 9", "(max [0 7 1 4 9]) -> 9", "(max [1 1 3 2 3]) -> 3", "(max [7 9]) -> 9", "(max [6]) -> 6", "(max [7 0 3]) -> 7", "(max [0]) -> 0", "(max [1 7 5 1 4]) -> 7", "(max [2 0]) -> 2", "(max [2]) -> 2", "(max [4 6 2]) -> 6", "(max [7 5 6 8]) -> 8"], "time": 8.681396}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 4 2 5 2]) -> 6", "(max [6 5]) -> 6", "(max [5 6 6 2]) -> 6", "(max [3 6 8 3 0]) -> 8", "(max [3 5 6]) -> 6", "(max [3 0 9]) -> 9", "(max [0]) -> 0", "(max [2 9 6 9 1]) -> 9", "(max [2 9 5]) -> 9", "(max [8]) -> 8", "(max [9 5]) -> 9", "(max [0 9 6 2 8]) -> 9"], "time": 8.647462}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 0]) -> 2", "(max [4 7 0]) -> 7", "(max [6 5 8 1]) -> 8", "(max [9 5 0 2]) -> 9", "(max [2 1 2 7]) -> 7", "(max [4 0 4]) -> 4", "(max [7 5 1]) -> 7", "(max [6 4 2 0]) -> 6", "(max [9]) -> 9", "(max [5]) -> 5", "(max [3 2]) -> 3", "(max [7 6 7 9]) -> 9"], "time": 8.846851}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 5 0]) -> 5", "(max [9 0 2 7 5]) -> 9", "(max [7 5 9 2 5]) -> 9", "(max [6 6 1 9 5]) -> 9", "(max [8 1 3]) -> 8", "(max [3 8]) -> 8", "(max [4 5]) -> 5", "(max [7 3]) -> 7", "(max [6 4 8]) -> 8", "(max [0 0]) -> 0", "(max [7 6 3 9 3]) -> 9", "(max [8 4 1]) -> 8"], "time": 8.934964}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 1 5 9 3]) -> 9", "(max [1 3 1 9 2]) -> 9", "(max [9 0 1 5 3]) -> 9", "(max [7 3 6 7 6]) -> 7", "(max [9 1]) -> 9", "(max [5 5]) -> 5", "(max [1 7 0 6]) -> 7", "(max [7 5]) -> 7", "(max [6 7 8 9]) -> 9", "(max [4 5]) -> 5", "(max [9 0 9]) -> 9", "(max [2 5 6 2]) -> 6"], "time": 9.297532}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 6 1 1 4]) -> 6", "(max [8 1]) -> 8", "(max [5 2 2 6]) -> 6", "(max [0]) -> 0", "(max [3 6]) -> 6", "(max [3 1 1]) -> 3", "(max [7 9]) -> 9", "(max [8 0]) -> 8", "(max [9 1]) -> 9", "(max [2 1]) -> 2", "(max [7 8 5]) -> 8", "(max [2]) -> 2"], "time": 10.475386}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 6 7 5]) -> 7", "(max [3 5 4 3 9]) -> 9", "(max [8 8 0 4]) -> 8", "(max [4 0 8 3]) -> 8", "(max [4 1 9 3 7]) -> 9", "(max [0 1 7]) -> 7", "(max [2 4 4 7 4]) -> 7", "(max [4]) -> 4", "(max [2 6]) -> 6", "(max [1 7]) -> 7", "(max [3 4]) -> 4", "(max [0 0 8 9 7]) -> 9"], "time": 6.069542}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 4]) -> 9", "(max [6 5 3 2]) -> 6", "(max [4 4 2 7 9]) -> 9", "(max [0 4 1 1 1]) -> 4", "(max [2 0 8]) -> 8", "(max [1 8 3]) -> 8", "(max [3 3]) -> 3", "(max [6 9 4 2]) -> 9", "(max [0]) -> 0", "(max [4 4 7 4 4]) -> 7", "(max [1]) -> 1", "(max [8 6 2]) -> 8"], "time": 7.0195}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 8 4]) -> 8", "(max [0 9 2]) -> 9", "(max [4 9 0 1]) -> 9", "(max [1 5 1]) -> 5", "(max [9 3 8 7 8]) -> 9", "(max [5 7 3 4 0]) -> 7", "(max [3 9 5 2 2]) -> 9", "(max [1 6 7]) -> 7", "(max [8 5]) -> 8", "(max [7 1 4 3]) -> 7", "(max [1 2 0]) -> 2", "(max [9 8 5]) -> 9"], "time": 7.291097}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 9]) -> 9", "(max [2 7]) -> 7", "(max [6 5]) -> 6", "(max [2 8]) -> 8", "(max [2]) -> 2", "(max [5 8 8 4]) -> 8", "(max [1 9 5]) -> 9", "(max [9 4]) -> 9", "(max [1 0]) -> 1", "(max [1]) -> 1", "(max [8 8 7 4]) -> 8", "(max [2 2 2]) -> 2"], "time": 8.030632}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 6 0]) -> 6", "(max [3 5]) -> 5", "(max [3 6 1 2]) -> 6", "(max [6 3]) -> 6", "(max [7]) -> 7", "(max [1 2 8 5 0]) -> 8", "(max [8 2 0]) -> 8", "(max [9 0 1 4 6]) -> 9", "(max [0 6]) -> 6", "(max [5 1]) -> 5", "(max [9 5 8 6 6]) -> 9", "(max [1 0]) -> 1"], "time": 8.323165}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 3]) -> 4", "(max [4 9 6 5]) -> 9", "(max [6 1 6 1]) -> 6", "(max [0 4 4]) -> 4", "(max [4]) -> 4", "(max [0 1 9]) -> 9", "(max [3 6]) -> 6", "(max [1 1 7]) -> 7", "(max [5]) -> 5", "(max [4 2 7 0]) -> 7", "(max [8 3 5 8 9]) -> 9", "(max [7 2 7]) -> 7"], "time": 8.859229}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 6 8 9]) -> 9", "(max [0]) -> 0", "(max [8 2]) -> 8", "(max [3]) -> 3", "(max [9]) -> 9", "(max [5 5 3 7]) -> 7", "(max [3]) -> 3", "(max [4 8 4 1 9]) -> 9", "(max [1]) -> 1", "(max [8 6 5 5]) -> 8", "(max [2]) -> 2", "(max [0]) -> 0"], "time": 7.954351}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 8 4]) -> 8", "(max [3]) -> 3", "(max [4 7]) -> 7", "(max [0]) -> 0", "(max [7]) -> 7", "(max [8 3 8]) -> 8", "(max [6]) -> 6", "(max [9]) -> 9", "(max [0 6 4]) -> 6", "(max [5]) -> 5", "(max [7 0]) -> 7", "(max [7 7]) -> 7"], "time": 9.091881}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 2 0 0]) -> 2", "(max [2 5 2 3 9]) -> 9", "(max [2 9 0 8 9]) -> 9", "(max [8 9]) -> 9", "(max [0 8 9]) -> 9", "(max [9 6 7 4 8]) -> 9", "(max [3 7 5 3 7]) -> 7", "(max [1 3 4]) -> 4", "(max [0 0 9 5]) -> 9", "(max [3 1 7]) -> 7", "(max [0 7]) -> 7", "(max [0]) -> 0"], "time": 8.582868}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 6 3]) -> 6", "(max [0 9 2]) -> 9", "(max [8 5 4 5 5]) -> 8", "(max [5]) -> 5", "(max [2 9 9 0]) -> 9", "(max [5 8]) -> 8", "(max [0 2 5 5 9]) -> 9", "(max [4 9 3 2 1]) -> 9", "(max [7 8 5 2]) -> 8", "(max [9 2 0 5 8]) -> 9", "(max [2 4 8 8]) -> 8", "(max [0 2 8 9 3]) -> 9"], "time": 9.687601}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1]) -> 1", "(max [5 8 8 1 7]) -> 8", "(max [1 8]) -> 8", "(max [5 5 0]) -> 5", "(max [5 7 6 2]) -> 7", "(max [4 1 2]) -> 4", "(max [4 2 1 2 9]) -> 9", "(max [2 2 2 6]) -> 6", "(max [6 6]) -> 6", "(max [7 8 5 4]) -> 8", "(max [7 6]) -> 7", "(max [2 5 1 5 1]) -> 5"], "time": 9.150806}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 4 8 8 8]) -> 9", "(max [6 1 8 8 8]) -> 8", "(max [8 5 1 1]) -> 8", "(max [8 2]) -> 8", "(max [8]) -> 8", "(max [1 6 2 5]) -> 6", "(max [5 7 4 5 1]) -> 7", "(max [4 6]) -> 6", "(max [2]) -> 2", "(max [5 8 7 1]) -> 8", "(max [4 1 2 7 5]) -> 7", "(max [8]) -> 8"], "time": 9.370989}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 1 3 9]) -> 9", "(max [1 5]) -> 5", "(max [6 0 8]) -> 8", "(max [2]) -> 2", "(max [8 4 1]) -> 8", "(max [7 6 7 9]) -> 9", "(max [1]) -> 1", "(max [2 9 2]) -> 9", "(max [0 2 0 4]) -> 4", "(max [2 3 3 5 6]) -> 6", "(max [6]) -> 6", "(max [6 5]) -> 6"], "time": 9.387075}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 4 3]) -> 8", "(max [0 5 3 9]) -> 9", "(max [5 7 0 6 3]) -> 7", "(max [9 9 8 4 3]) -> 9", "(max [6 1 6 8 5]) -> 8", "(max [7]) -> 7", "(max [1 7]) -> 7", "(max [1 6]) -> 6", "(max [8 2]) -> 8", "(max [6 3 4 1]) -> 6", "(max [1 2 0 8 0]) -> 8", "(max [8 2 5 5 6]) -> 8"], "time": 10.336427}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 4]) -> 4", "(max [6 8 7 8]) -> 8", "(max [5 4 1 3]) -> 5", "(max [5 3 6 3 3]) -> 6", "(max [9]) -> 9", "(max [2 4 3]) -> 4", "(max [2 3 1]) -> 3", "(max [6 7]) -> 7", "(max [3]) -> 3", "(max [4]) -> 4", "(max [1]) -> 1", "(max [5]) -> 5"], "time": 8.792251}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 1 1 4 4]) -> 8", "(max [3]) -> 3", "(max [6]) -> 6", "(max [8]) -> 8", "(max [1]) -> 1", "(max [4]) -> 4", "(max [2 7 0 4]) -> 7", "(max [9 3 5 3]) -> 9", "(max [2 1 9 8]) -> 9", "(max [3 4 3]) -> 4", "(max [4]) -> 4", "(max [9 9 3 1]) -> 9"], "time": 10.711087}
{"name": "max", "solution": "(let max (let a (lambda (b) (car b)) _) _)", "examples": ["(max [7 2 1]) -> 7", "(max [1]) -> 1", "(max [6]) -> 6", "(max [2]) -> 2", "(max [9 7]) -> 9", "(max [0 0]) -> 0", "(max [5]) -> 5", "(max [7]) -> 7", "(max [5]) -> 5", "(max [8 0]) -> 8", "(max [4]) -> 4", "(max [2]) -> 2"], "time": 0.002063}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6]) -> 6", "(max [8 5 9 2]) -> 9", "(max [1 0 2 1 3]) -> 3", "(max [3 9]) -> 9", "(max [5 9 5]) -> 9", "(max [8 8 8 9 9]) -> 9", "(max [7 2 3 5 2]) -> 7", "(max [2 9 3 1 9]) -> 9", "(max [6 0 2 2 7]) -> 7", "(max [8 2]) -> 8", "(max [1 3 1]) -> 3", "(max [8 6]) -> 8"], "time": 6.567017}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 1 0 8 8]) -> 8", "(max [8]) -> 8", "(max [9 8 1 8]) -> 9", "(max [8 4 8]) -> 8", "(max [2 8 3]) -> 8", "(max [5 6]) -> 6", "(max [3 0 2]) -> 3", "(max [8 2 8 1 6]) -> 8", "(max [9 7 7 7]) -> 9", "(max [2 0 0 9 6]) -> 9", "(max [5 1 9]) -> 9", "(max [6 4 3 1 7]) -> 7"], "time": 6.766732}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 6 7 7]) -> 7", "(max [8]) -> 8", "(max [8 6]) -> 8", "(max [1 3 6]) -> 6", "(max [5 3 4 3 2]) -> 5", "(max [4]) -> 4", "(max [2 2 6]) -> 6", "(max [7 9 1]) -> 9", "(max [4 6]) -> 6", "(max [2 6 6 6 1]) -> 6", "(max [1 0]) -> 1", "(max [1 7 7 1 2]) -> 7"], "time": 7.602037}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7]) -> 7", "(max [4 0 9 9 9]) -> 9", "(max [9]) -> 9", "(max [7]) -> 7", "(max [6 6 9 0]) -> 9", "(max [6 5]) -> 6", "(max [2 7 2]) -> 7", "(max [9 8 5 9 0]) -> 9", "(max [3 8]) -> 8", "(max [7 5 2 0]) -> 7", "(max [5 6 3 6 7]) -> 7", "(max [8 0 7 0 0]) -> 8"], "time": 8.626612}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 9 6 9 1]) -> 9", "(max [5]) -> 5", "(max [7]) -> 7", "(max [7 4 3 9]) -> 9", "(max [7 6 2]) -> 7", "(max [0 8]) -> 8", "(max [9 0 5 7]) -> 9", "(max [9]) -> 9", "(max [0 9 0 3 9]) -> 9", "(max [4 1 8 9 6]) -> 9", "(max [3 1 1]) -> 3", "(max [1 4 4]) -> 4"], "time": 10.404684}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 1 5 5]) -> 5", "(max [3 4]) -> 4", "(max [1 9 3]) -> 9", "(max [3 2 5 4 7]) -> 7", "(max [4 4]) -> 4", "(max [6 4 2 3 4]) -> 6", "(max [1]) -> 1", "(max [3 9]) -> 9", "(max [2]) -> 2", "(max [8 0 0 2]) -> 8", "(max [9 5 7]) -> 9", "(max [9]) -> 9"], "time": 8.691364}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1]) -> 1", "(max [3]) -> 3", "(max [7]) -> 7", "(max [9 9 3 6 0]) -> 9", "(max [3]) -> 3", "(max [5 5 2]) -> 5", "(max [4 4 2 8]) -> 8", "(max [9 2]) -> 9", "(max [9]) -> 9", "(max [2 1 5 8 0]) -> 8", "(max [2]) -> 2", "(max [8]) -> 8"], "time": 6.917305}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8]) -> 8", "(max [0 3 1 4]) -> 4", "(max [5 6 8]) -> 8", "(max [4 8]) -> 8", "(max [4 8 1 8 3]) -> 8", "(max [4 1]) -> 4", "(max [4 9]) -> 9", "(max [7]) -> 7", "(max [9]) -> 9", "(max [9 0 9]) -> 9", "(max [3]) -> 3", "(max [7 4 6 6 9]) -> 9"], "time": 8.054888}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 8 5]) -> 8", "(max [3 4 4 5]) -> 5", "(max [8 4 9 4]) -> 9", "(max [1 3 3]) -> 3", "(max [3 9]) -> 9", "(max [4]) -> 4", "(max [1]) -> 1", "(max [8 5 9 5 7]) -> 9", "(max [0 8]) -> 8", "(max [6 4]) -> 6", "(max [5 0 6]) -> 6", "(max [7 1 9 1]) -> 9"], "time": 7.34899}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 7 9 4]) -> 9", "(max [3 3 9 2 1]) -> 9", "(max [1 9 9 9 9]) -> 9", "(max [9 7 1]) -> 9", "(max [1 1 3]) -> 3", "(max [2 4 5]) -> 5", "(max [4 6]) -> 6", "(max [6 2]) -> 6", "(max [2 0 1]) -> 2", "(max [9]) -> 9", "(max [0 9 6]) -> 9", "(max [1 1 4 1 2]) -> 4"], "time": 7.107976}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 2 7 8]) -> 8", "(max [4 5 9]) -> 9", "(max [5 9 8 7]) -> 9", "(max [6]) -> 6", "(max [9 3 5]) -> 9", "(max [2 1]) -> 2", "(max [9 8 3 8]) -> 9", "(max [6]) -> 6", "(max [5]) -> 5", "(max [1 5 8 4]) -> 8", "(max [4 3 1]) -> 4", "(max [2]) -> 2"], "time": 9.167489}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1]) -> 1", "(max [5]) -> 5", "(max [0]) -> 0", "(max [0]) -> 0", "(max [1]) -> 1", "(max [4 5]) -> 5", "(max [5 3 3]) -> 5", "(max [8 1]) -> 8", "(max [1 6 2 1 1]) -> 6", "(max [9 2]) -> 9", "(max [8 5 1 9 7]) -> 9", "(max [9 3 8 3 9]) -> 9"], "time": 9.741924}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 7 8]) -> 9", "(max [5 0 8 5 0]) -> 8", "(max [5 2 3 9]) -> 9", "(max [8 0]) -> 8", "(max [8]) -> 8", "(max [5 0]) -> 5", "(max [4 0]) -> 4", "(max [5 4]) -> 5", "(max [6 8]) -> 8", "(max [7 9 0]) -> 9", "(max [7 0 0]) -> 7", "(max [9 3 4 9 0]) -> 9"], "time": 9.631836}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 5]) -> 5", "(max [7 1 6 5 2]) -> 7", "(max [7 9 7 5 4]) -> 9", "(max [9 8 5 8 6]) -> 9", "(max [9 2]) -> 9", "(max [1 7 1 4 1]) -> 7", "(max [4 0]) -> 4", "(max [8 8]) -> 8", "(max [4 2]) -> 4", "(max [4 1]) -> 4", "(max [8 8 5 0]) -> 8", "(max [8 1]) -> 8"], "time": 9.13393}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 5 5 2 4]) -> 7", "(max [4 8 6 9]) -> 9", "(max [1 2]) -> 2", "(max [9 6]) -> 9", "(max [5 0 5 5 6]) -> 6", "(max [9 0 1]) -> 9", "(max [2 6 1]) -> 6", "(max [1]) -> 1", "(max [6 3 9]) -> 9", "(max [1 5 3 7]) -> 7", "(max [5 2 3 9 5]) -> 9", "(max [8 6]) -> 8"], "time": 9.296004}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 4 2]) -> 4", "(max [5 0 1 5 6]) -> 6", "(max [1 0 9 6 5]) -> 9", "(max [1 3 1 3]) -> 3", "(max [5 9 6]) -> 9", "(max [1]) -> 1", "(max [5]) -> 5", "(max [4 1 4 8 7]) -> 8", "(max [2 7 5 3 1]) -> 7", "(max [9 4 4 7 7]) -> 9", "(max [5 5 4]) -> 5", "(max [3 2 5 5]) -> 5"], "time": 6.555217}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 9 7 8]) -> 9", "(max [6 9 5]) -> 9", "(max [6 2 4]) -> 6", "(max [9]) -> 9", "(max [0]) -> 0", "(max [2 5 7 1]) -> 7", "(max [7 0 3]) -> 7", "(max [7 3 9]) -> 9", "(max [7]) -> 7", "(max [6]) -> 6", "(max [9 3 6]) -> 9", "(max [1]) -> 1"], "time": 9.471255}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3]) -> 3", "(max [1 8]) -> 8", "(max [7 9]) -> 9", "(max [0 6 1]) -> 6", "(max [3 8 7 8 4]) -> 8", "(max [9 6 6 5 2]) -> 9", "(max [6 9 9 8 9]) -> 9", "(max [7 7 0]) -> 7", "(max [1 8]) -> 8", "(max [2 8 6 8 8]) -> 8", "(max [9 7 0 6 5]) -> 9", "(max [5 9]) -> 9"], "time": 7.279731}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 9 7]) -> 9", "(max [8 5 3 6 2]) -> 8", "(max [2]) -> 2", "(max [7 2 4]) -> 7", "(max [4]) -> 4", "(max [9 5]) -> 9", "(max [7 1]) -> 7", "(max [1 5 0 7 5]) -> 7", "(max [2]) -> 2", "(max [2 9 5]) -> 9", "(max [9 1 4]) -> 9", "(max [9]) -> 9"], "time": 7.019811}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 8]) -> 9", "(max [0]) -> 0", "(max [6 9 0]) -> 9", "(max [7]) -> 7", "(max [7 6 3 7]) -> 7", "(max [6 7 2 8 7]) -> 8", "(max [3 5 2]) -> 5", "(max [6 2 1 0]) -> 6", "(max [3 9 1]) -> 9", "(max [4 9 7 5]) -> 9", "(max [3]) -> 3", "(max [1]) -> 1"], "time": 7.104735}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< 1 c) c d)) 0)) _) _)", "examples": ["(max [3 1 4 7]) -> 7", "(max [6 0]) -> 6", "(max [1 3 7 8 1]) -> 8", "(max [1 5]) -> 5", "(max [8]) -> 8", "(max [9 9 0]) -> 9", "(max [8 8 5 8]) -> 8", "(max [9 9 7 4 9]) -> 9", "(max [3 0]) -> 3", "(max [5]) -> 5", "(max [4 6 0 1]) -> 6", "(max [7 9]) -> 9"], "time": 8.922574}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1]) -> 1", "(max [1 5 7 9]) -> 9", "(max [4 4 5 4 9]) -> 9", "(max [4 8]) -> 8", "(max [8 4 4 3]) -> 8", "(max [9]) -> 9", "(max [1]) -> 1", "(max [4 7 9 1 1]) -> 9", "(max [4]) -> 4", "(max [9 3 5 1]) -> 9", "(max [9 2 1 9 3]) -> 9", "(max [8 0 3 8]) -> 8"], "time": 7.411038}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3]) -> 3", "(max [7 6 0]) -> 7", "(max [8 7]) -> 8", "(max [0 1 2]) -> 2", "(max [7 8 6 4]) -> 8", "(max [7 5 5]) -> 7", "(max [8 8 3 3 3]) -> 8", "(max [7 8 1]) -> 8", "(max [9 0]) -> 9", "(max [5 6]) -> 6", "(max [1 2]) -> 2", "(max [4 0 0 9 7]) -> 9"], "time": 8.443958}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 9 4]) -> 9", "(max [5 4 9 4]) -> 9", "(max [5 2 6 0 2]) -> 6", "(max [0 4 7 0 7]) -> 7", "(max [5 6 8 2]) -> 8", "(max [7 8 0]) -> 8", "(max [7 9 0]) -> 9", "(max [2 3 1 9 0]) -> 9", "(max [2 3]) -> 3", "(max [1]) -> 1", "(max [4 4 8 2 7]) -> 8", "(max [1 2]) -> 2"], "time": 8.030001}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 8 1 0 2]) -> 9", "(max [1]) -> 1", "(max [9 5 5]) -> 9", "(max [4 4 9 5 2]) -> 9", "(max [9 0 8]) -> 9", "(max [7 9 2 8 4]) -> 9", "(max [4]) -> 4", "(max [8 8 9]) -> 9", "(max [8 7]) -> 8", "(max [6 8 9]) -> 9", "(max [1 6 0 5 3]) -> 6", "(max [4]) -> 4"], "time": 8.532382}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 3]) -> 3", "(max [2 6 1 1 8]) -> 8", "(max [1 4 9 8 8]) -> 9", "(max [4 0 2 5 2]) -> 5", "(max [6 9 7 1 9]) -> 9", "(max [8]) -> 8", "(max [1 0 8]) -> 8", "(max [7 8]) -> 8", "(max [9 4 1]) -> 9", "(max [5 9]) -> 9", "(max [1]) -> 1", "(max [5 8 1 8]) -> 8"], "time": 7.955894}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 7 5 5 4]) -> 7", "(max [5 9 7 3]) -> 9", "(max [3 2 5 7]) -> 7", "(max [5 0 8 6 9]) -> 9", "(max [1 2 1]) -> 2", "(max [2 3 9]) -> 9", "(max [6 8]) -> 8", "(max [3 1 8 7 6]) -> 8", "(max [0 5 4]) -> 5", "(max [2 8 2 7]) -> 8", "(max [0 4]) -> 4", "(max [5 7]) -> 7"], "time": 7.892972}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 7 1]) -> 8", "(max [6 3 8 8]) -> 8", "(max [8 9 8 1]) -> 9", "(max [1 1 8 0]) -> 8", "(max [9 3 5]) -> 9", "(max [8 8 6 1]) -> 8", "(max [3 7]) -> 7", "(max [3 1 6]) -> 6", "(max [7 1 7 4 0]) -> 7", "(max [9 6]) -> 9", "(max [2]) -> 2", "(max [2]) -> 2"], "time": 7.995146}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 6 7 6]) -> 8", "(max [8 4 0]) -> 8", "(max [6 2 8 5]) -> 8", "(max [9 0]) -> 9", "(max [7 1]) -> 7", "(max [2 1 2 7 1]) -> 7", "(max [7 8]) -> 8", "(max [3 8 4]) -> 8", "(max [6 9]) -> 9", "(max [8 5 3 1 9]) -> 9", "(max [7 9 9 6 5]) -> 9", "(max [6 1 7 6 9]) -> 9"], "time": 8.690113}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5]) -> 5", "(max [4 3 7 4]) -> 7", "(max [3 3 0 0]) -> 3", "(max [0 8 9 3]) -> 9", "(max [7 1 4 5]) -> 7", "(max [7]) -> 7", "(max [6 3 0]) -> 6", "(max [6 3 2 6 3]) -> 6", "(max [9 5 2]) -> 9", "(max [9 6 9]) -> 9", "(max [2 6]) -> 6", "(max [9 6 7 0 9]) -> 9"], "time": 8.454647}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 2]) -> 4", "(max [5]) -> 5", "(max [7]) -> 7", "(max [2 0 0 5 8]) -> 8", "(max [3 3 4 3 0]) -> 4", "(max [6]) -> 6", "(max [1 9 5 6 2]) -> 9", "(max [0]) -> 0", "(max [8]) -> 8", "(max [8 7]) -> 8", "(max [4 8]) -> 8", "(max [1 8]) -> 8"], "time": 9.516832}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2]) -> 2", "(max [7 5 8]) -> 8", "(max [8 0 8 4 0]) -> 8", "(max [5]) -> 5", "(max [6 3 1 1 5]) -> 6", "(max [7 1 4]) -> 7", "(max [2 5 9 8 4]) -> 9", "(max [9 3 8]) -> 9", "(max [0 2 6 2]) -> 6", "(max [1 9 3]) -> 9", "(max [4 2]) -> 4", "(max [4 4 7 2]) -> 7"], "time": 8.671538}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 0]) -> 2", "(max [8 7 0 9 6]) -> 9", "(max [8]) -> 8", "(max [8 2 7 2 1]) -> 8", "(max [4 2]) -> 4", "(max [9]) -> 9", "(max [8]) -> 8", "(max [0 4 7 6 5]) -> 7", "(max [9]) -> 9", "(max [2 3 5 2 4]) -> 5", "(max [7]) -> 7", "(max [6]) -> 6"], "time": 8.612792}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 6 1 3]) -> 9", "(max [9 3 8 1 4]) -> 9", "(max [8 6]) -> 8", "(max [4 0 2]) -> 4", "(max [3 3 4 8 1]) -> 8", "(max [7]) -> 7", "(max [4]) -> 4", "(max [5]) -> 5", "(max [9 3 9]) -> 9", "(max [9 4 2 7]) -> 9", "(max [9 7 0 0 9]) -> 9", "(max [7 8 7 4]) -> 8"], "time": 5.68727}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9]) -> 9", "(max [0 1 6 2 4]) -> 6", "(max [9 8 6 9]) -> 9", "(max [9 8 0]) -> 9", "(max [0 8 6 2 4]) -> 8", "(max [4 6 0 5 0]) -> 6", "(max [0 5]) -> 5", "(max [6 6]) -> 6", "(max [2 2 4]) -> 4", "(max [4]) -> 4", "(max [8 9 4 2 5]) -> 9", "(max [0 9]) -> 9"], "time": 9.003266}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 5 2 8]) -> 9", "(max [7]) -> 7", "(max [4 9 1 0 3]) -> 9", "(max [2 8 7 3 8]) -> 8", "(max [5 4 9 9 1]) -> 9", "(max [7 9 5 6 8]) -> 9", "(max [4 4 5 4 4]) -> 5", "(max [2]) -> 2", "(max [5 1]) -> 5", "(max [3 6]) -> 6", "(max [7 1 7 9]) -> 9", "(max [1 6 5 0]) -> 6"], "time": 9.366698}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 7 4 1 3]) -> 9", "(max [1 5 4 1]) -> 5", "(max [2 7 3 9]) -> 9", "(max [4 1 3 7]) -> 7", "(max [2 5 3]) -> 5", "(max [0 1 9 2 9]) -> 9", "(max [5]) -> 5", "(max [6]) -> 6", "(max [3 3 7]) -> 7", "(max [0 1 9]) -> 9", "(max [5 5 9]) -> 9", "(max [6 4 0]) -> 6"], "time": 9.597881}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 2]) -> 9", "(max [1 5 0 9]) -> 9", "(max [8 1]) -> 8", "(max [2 2 4]) -> 4", "(max [6 0 8]) -> 8", "(max [8 7 5 5]) -> 8", "(max [2]) -> 2", "(max [4 0 8]) -> 8", "(max [5]) -> 5", "(max [8 5 1 4 7]) -> 8", "(max [4 7 8 5]) -> 8", "(max [4 9]) -> 9"], "time": 5.983995}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 9 4 1]) -> 9", "(max [7]) -> 7", "(max [0 4 0]) -> 4", "(max [1 1 9 4 0]) -> 9", "(max [7 0]) -> 7", "(max [1 6 8 1]) -> 8", "(max [2 6]) -> 6", "(max [3 0]) -> 3", "(max [5 8 6]) -> 8", "(max [1]) -> 1", "(max [6 0]) -> 6", "(max [4]) -> 4"], "time": 8.601888}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 1]) -> 2", "(max [8 3 0]) -> 8", "(max [7 5]) -> 7", "(max [5 9]) -> 9", "(max [7]) -> 7", "(max [5]) -> 5", "(max [7 9 3 5 3]) -> 9", "(max [5]) -> 5", "(max [9 9 3 8 9]) -> 9", "(max [2 3 2 5 3]) -> 5", "(max [8 7 8 7 0]) -> 8", "(max [7]) -> 7"], "time": 8.320692}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 8 3 7]) -> 8", "(max [6]) -> 6", "(max [2]) -> 2", "(max [0 0 0 0]) -> 0", "(max [2 1 0 7]) -> 7", "(max [9 3 2]) -> 9", "(max [8 8 2 5 0]) -> 8", "(max [9 0 1 4 6]) -> 9", "(max [4 9]) -> 9", "(max [0 5 3]) -> 5", "(max [9 3 5]) -> 9", "(max [6 2 7]) -> 7"], "time": 8.99986}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 8 9 5 8]) -> 9", "(max [6 8 5 1]) -> 8", "(max [0 2 3 3]) -> 3", "(max [4 6]) -> 6", "(max [4 8 8]) -> 8", "(max [7]) -> 7", "(max [6 9]) -> 9", "(max [6 0 0]) -> 6", "(max [5 1 2 7 7]) -> 7", "(max [3 7 7 6]) -> 7", "(max [9 3]) -> 9", "(max [4 5 7 2]) -> 7"], "time": 7.556204}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3]) -> 3", "(max [9]) -> 9", "(max [8 6 3 7]) -> 8", "(max [8 9 7 2 2]) -> 9", "(max [8 0 2]) -> 8", "(max [3 1 6]) -> 6", "(max [7 1 3 6 6]) -> 7", "(max [4 2]) -> 4", "(max [8 7 1]) -> 8", "(max [3 8 0 6 5]) -> 8", "(max [6]) -> 6", "(max [8 3 9 7]) -> 9"], "time": 8.139653}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 3]) -> 8", "(max [6 3 8 0]) -> 8", "(max [0 1 3 4 0]) -> 4", "(max [6 2]) -> 6", "(max [6 3]) -> 6", "(max [8 7 4]) -> 8", "(max [3 1 5 9 6]) -> 9", "(max [8]) -> 8", "(max [8 6 7 4 0]) -> 8", "(max [4 9 3 1]) -> 9", "(max [9 6 8 3 4]) -> 9", "(max [2 8 0]) -> 8"], "time": 8.273605}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 0 3 2]) -> 7", "(max [7 9 6 7 4]) -> 9", "(max [2 6 2 6]) -> 6", "(max [9 6 6]) -> 9", "(max [6 5]) -> 6", "(max [9 6]) -> 9", "(max [9 9 5]) -> 9", "(max [8 3 6]) -> 8", "(max [7 2]) -> 7", "(max [8 6]) -> 8", "(max [4 6 6 4 7]) -> 7", "(max [8]) -> 8"], "time": 7.560044}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 0 c) d c)) 0)) _) _)", "examples": ["(max [2 5]) -> 5", "(max [9]) -> 9", "(max [2]) -> 2", "(max [2]) -> 2", "(max [3 1 3]) -> 3", "(max [0 1 7]) -> 7", "(max [6 0]) -> 6", "(max [5]) -> 5", "(max [4 5 9]) -> 9", "(max [0 0]) -> 0", "(max [4]) -> 4", "(max [3 3]) -> 3"], "time": 9.283778}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5]) -> 5", "(max [1]) -> 1", "(max [7 1]) -> 7", "(max [7 8]) -> 8", "(max [7]) -> 7", "(max [6 0]) -> 6", "(max [9 9 0 8 6]) -> 9", "(max [3 9 1]) -> 9", "(max [5 0]) -> 5", "(max [9]) -> 9", "(max [3]) -> 3", "(max [5 1 4 1 1]) -> 5"], "time": 7.946522}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 8 4 0]) -> 8", "(max [3 1]) -> 3", "(max [3 6 0 8]) -> 8", "(max [8 7 6]) -> 8", "(max [5 9 7]) -> 9", "(max [0 3 5]) -> 5", "(max [2 5 5 1 9]) -> 9", "(max [8 5 7 8]) -> 8", "(max [4 5]) -> 5", "(max [4 3 8 6]) -> 8", "(max [0 6 8 3 3]) -> 8", "(max [2 9 8 3 7]) -> 9"], "time": 10.14768}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 0]) -> 6", "(max [6 5 9]) -> 9", "(max [9]) -> 9", "(max [1 9]) -> 9", "(max [2]) -> 2", "(max [1 3]) -> 3", "(max [6 5 7]) -> 7", "(max [7]) -> 7", "(max [6 5 4 1 5]) -> 6", "(max [0 5 8]) -> 8", "(max [0]) -> 0", "(max [4 4]) -> 4"], "time": 8.687324}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 6 9 9]) -> 9", "(max [7 6 7]) -> 7", "(max [1 3 3 3]) -> 3", "(max [2 5 2 8]) -> 8", "(max [9 1 0]) -> 9", "(max [7 8 1 2]) -> 8", "(max [8]) -> 8", "(max [5]) -> 5", "(max [5 0]) -> 5", "(max [4 2 3 6 5]) -> 6", "(max [7 1]) -> 7", "(max [9 8 6 5 5]) -> 9"], "time": 8.13359}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 9 4 9]) -> 9", "(max [1]) -> 1", "(max [2 2 9]) -> 9", "(max [5]) -> 5", "(max [6 0 2 2]) -> 6", "(max [7]) -> 7", "(max [7 6]) -> 7", "(max [5 8 5 6 8]) -> 8", "(max [0]) -> 0", "(max [6 3 8 9 8]) -> 9", "(max [8 4 8 3]) -> 8", "(max [6 7 1 4 1]) -> 7"], "time": 8.264792}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 6 3 2 0]) -> 6", "(max [1 4]) -> 4", "(max [7 1 3]) -> 7", "(max [0]) -> 0", "(max [1 8 5 1 9]) -> 9", "(max [8 6 1 1 5]) -> 8", "(max [4]) -> 4", "(max [0 6]) -> 6", "(max [8]) -> 8", "(max [3 9 1]) -> 9", "(max [8]) -> 8", "(max [7 1 7]) -> 7"], "time": 7.988989}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 1 9 0 7]) -> 9", "(max [6 3 6 8]) -> 8", "(max [3 7 9 0 6]) -> 9", "(max [1 6 0 0]) -> 6", "(max [6 2 8 4]) -> 8", "(max [8 2 5]) -> 8", "(max [2 3 5 2]) -> 5", "(max [3 3 0 4 9]) -> 9", "(max [0 6 5]) -> 6", "(max [5]) -> 5", "(max [8 6 8]) -> 8", "(max [9 4]) -> 9"], "time": 8.704715}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 8 9]) -> 9", "(max [4]) -> 4", "(max [5]) -> 5", "(max [1 0 1 1]) -> 1", "(max [9]) -> 9", "(max [9 3 8 2 5]) -> 9", "(max [3 4 4]) -> 4", "(max [2 4 5 2]) -> 5", "(max [3 6 9 7 8]) -> 9", "(max [2 7]) -> 7", "(max [7 3]) -> 7", "(max [4 3 7]) -> 7"], "time": 7.606593}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 9 8]) -> 9", "(max [8 4]) -> 8", "(max [2 5 1 6 7]) -> 7", "(max [6 5 2 8 6]) -> 8", "(max [3 4 4 7]) -> 7", "(max [2]) -> 2", "(max [4 8 1]) -> 8", "(max [9]) -> 9", "(max [7 8 5 9]) -> 9", "(max [4 2 2]) -> 4", "(max [3]) -> 3", "(max [4 9 2 6 1]) -> 9"], "time": 6.64536}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 1]) -> 6", "(max [0 7 6 6]) -> 7", "(max [5 6 4 8]) -> 8", "(max [4 5 1 3 2]) -> 5", "(max [4 4 2]) -> 4", "(max [1 1 9]) -> 9", "(max [9]) -> 9", "(max [3]) -> 3", "(max [2 7 5 8]) -> 8", "(max [8]) -> 8", "(max [4 8 3]) -> 8", "(max [4 2]) -> 4"], "time": 7.787783}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 9 4 8]) -> 9", "(max [1 7 7 3 0]) -> 7", "(max [4 9 8 6 6]) -> 9", "(max [1 2 1]) -> 2", "(max [7]) -> 7", "(max [3 5 9]) -> 9", "(max [9 3 5 3]) -> 9", "(max [5 6 4 4]) -> 6", "(max [4 6 0]) -> 6", "(max [1 3]) -> 3", "(max [3 8 9]) -> 9", "(max [2 4 8 3 3]) -> 8"], "time": 7.634537}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3]) -> 3", "(max [1 2 8 9 7]) -> 9", "(max [3 0]) -> 3", "(max [6 8 0 2 8]) -> 8", "(max [5 6 4]) -> 6", "(max [9 0 6 8 8]) -> 9", "(max [7 1 7 2 8]) -> 8", "(max [1 5]) -> 5", "(max [6 3]) -> 6", "(max [5 8 2 4]) -> 8", "(max [4 9 4 1 6]) -> 9", "(max [6 3 0 0 5]) -> 6"], "time": 6.567224}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 7 5 2 6]) -> 7", "(max [4 6 7 5 6]) -> 7", "(max [5 0 4 3]) -> 5", "(max [0]) -> 0", "(max [8 9 3 6]) -> 9", "(max [5 4 0]) -> 5", "(max [2]) -> 2", "(max [9 0 2 5]) -> 9", "(max [4 4 5 5 8]) -> 8", "(max [2 2 3 0 0]) -> 3", "(max [5 1]) -> 5", "(max [7 7 2]) -> 7"], "time": 7.259402}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 2 2 5]) -> 5", "(max [3 9 8]) -> 9", "(max [9 1 4 6 9]) -> 9", "(max [1]) -> 1", "(max [6 9 6]) -> 9", "(max [0 0 1 1 0]) -> 1", "(max [7]) -> 7", "(max [7 6 0 2]) -> 7", "(max [4 0]) -> 4", "(max [3 2 4]) -> 4", "(max [9 8]) -> 9", "(max [2 5 3]) -> 5"], "time": 8.44645}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 7]) -> 7", "(max [0 6 1]) -> 6", "(max [0 4 4]) -> 4", "(max [0 2 8 8]) -> 8", "(max [1]) -> 1", "(max [6 1 9]) -> 9", "(max [1 4 6 7 9]) -> 9", "(max [6 8 4 6 2]) -> 8", "(max [9 8]) -> 9", "(max [2 3]) -> 3", "(max [5]) -> 5", "(max [6 0 2 7]) -> 7"], "time": 6.663875}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 6 2 3 0]) -> 6", "(max [1 1 9 9 1]) -> 9", "(max [0 6 2 4]) -> 6", "(max [3 5]) -> 5", "(max [9]) -> 9", "(max [5 1 2 2 2]) -> 5", "(max [1 2 3]) -> 3", "(max [5 7]) -> 7", "(max [4 9]) -> 9", "(max [8 5 1 8 4]) -> 8", "(max [9 4 3 3 1]) -> 9", "(max [4 5 5 4]) -> 5"], "time": 8.102333}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 2]) -> 2", "(max [4 2 9 5 3]) -> 9", "(max [8 2 3 7 2]) -> 8", "(max [7 7]) -> 7", "(max [1 5 3 4 5]) -> 5", "(max [3 1 6 4]) -> 6", "(max [2 7 5 2]) -> 7", "(max [8 6 2 8 5]) -> 8", "(max [0 5 6 8]) -> 8", "(max [3 5 0]) -> 5", "(max [4 7]) -> 7", "(max [7 2 7]) -> 7"], "time": 5.297921}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 9 4 3 5]) -> 9", "(max [8]) -> 8", "(max [6 4 1 6]) -> 6", "(max [8]) -> 8", "(max [2 3]) -> 3", "(max [5 0 9 9]) -> 9", "(max [7 9 8 2 2]) -> 9", "(max [6]) -> 6", "(max [3 2 3 8 5]) -> 8", "(max [0 4]) -> 4", "(max [5 5]) -> 5", "(max [7 6]) -> 7"], "time": 5.56798}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 9]) -> 9", "(max [6 5]) -> 6", "(max [8 8 9 1]) -> 9", "(max [9 1 1]) -> 9", "(max [3 9]) -> 9", "(max [7]) -> 7", "(max [2 1]) -> 2", "(max [2 4 7]) -> 7", "(max [5 5]) -> 5", "(max [2]) -> 2", "(max [4 8 5]) -> 8", "(max [8 6 6 9 2]) -> 9"], "time": 5.756588}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 8 4 9 3]) -> 9", "(max [5]) -> 5", "(max [0 7 9 8]) -> 9", "(max [8 5 2 6]) -> 8", "(max [3 0]) -> 3", "(max [5 3 1]) -> 5", "(max [0 5]) -> 5", "(max [7 1 7 7]) -> 7", "(max [6 0 0 6 2]) -> 6", "(max [7]) -> 7", "(max [7 4 6]) -> 7", "(max [3 7 5 4 9]) -> 9"], "time": 3.317772}
{"name": "max", "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7]) -> 7", "(max [0 9]) -> 9", "(max [7]) -> 7", "(max [8 8]) -> 8", "(max [0 2 3 1]) -> 3", "(max [6]) -> 6", "(max [2]) -> 2", "(max [9]) -> 9", "(max [7 1 9]) -> 9", "(max [0]) -> 0", "(max [7 5 7]) -> 7", "(max [3 3 2 1]) -> 3"], "time": 3.086911}
