{"examples": ["(dupli []) -> []", "(dupli [2 0 0 5]) -> [2 2 0 0 0 0 5 5]", "(dupli []) -> []", "(dupli [5 1 6 0]) -> [5 5 1 1 6 6 0 0]", "(dupli []) -> []", "(dupli [6 8 6]) -> [6 6 8 8 6 6]", "(dupli []) -> []", "(dupli [4 8 0 3 5]) -> [4 4 8 8 0 0 3 3 5 5]", "(dupli [9 4 6 3 3]) -> [9 9 4 4 6 6 3 3 3 3]", "(dupli []) -> []", "(dupli [6]) -> [6 6]", "(dupli []) -> []"], "time": 0.238076, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 6 1]) -> [4 4 6 6 1 1]", "(dupli []) -> []", "(dupli [7 0 1 4]) -> [7 7 0 0 1 1 4 4]", "(dupli [8 4]) -> [8 8 4 4]", "(dupli [7]) -> [7 7]", "(dupli [2]) -> [2 2]", "(dupli [7]) -> [7 7]", "(dupli [5 4 4 6]) -> [5 5 4 4 4 4 6 6]", "(dupli []) -> []", "(dupli []) -> []", "(dupli []) -> []"], "time": 0.262137, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5]) -> [5 5]", "(dupli [9 1 3 1]) -> [9 9 1 1 3 3 1 1]", "(dupli [6 4 4 1]) -> [6 6 4 4 4 4 1 1]", "(dupli [5 0 8 7]) -> [5 5 0 0 8 8 7 7]", "(dupli [5 3 0 3]) -> [5 5 3 3 0 0 3 3]", "(dupli [3 5 1 7 0]) -> [3 3 5 5 1 1 7 7 0 0]", "(dupli [7 7 5]) -> [7 7 7 7 5 5]", "(dupli []) -> []", "(dupli [4]) -> [4 4]", "(dupli [2 6]) -> [2 2 6 6]", "(dupli [9 4 4]) -> [9 9 4 4 4 4]"], "time": 0.185831, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4]) -> [4 4]", "(dupli [1 0 8]) -> [1 1 0 0 8 8]", "(dupli [5]) -> [5 5]", "(dupli [3 0 7]) -> [3 3 0 0 7 7]", "(dupli [8 7 1 8 9]) -> [8 8 7 7 1 1 8 8 9 9]", "(dupli [2 7 4 0 5]) -> [2 2 7 7 4 4 0 0 5 5]", "(dupli [2 0 0 8]) -> [2 2 0 0 0 0 8 8]", "(dupli [9 2 2 8 0]) -> [9 9 2 2 2 2 8 8 0 0]", "(dupli [0 9]) -> [0 0 9 9]", "(dupli []) -> []", "(dupli [0 4 9 4 4]) -> [0 0 4 4 9 9 4 4 4 4]"], "time": 0.213734, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [4 4]) -> [4 4 4 4]", "(dupli [5]) -> [5 5]", "(dupli [7 5 7 0]) -> [7 7 5 5 7 7 0 0]", "(dupli [5 6 0 8 5]) -> [5 5 6 6 0 0 8 8 5 5]", "(dupli []) -> []", "(dupli []) -> []", "(dupli []) -> []", "(dupli [0]) -> [0 0]", "(dupli []) -> []", "(dupli [3 5]) -> [3 3 5 5]"], "time": 0.248245, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 1 6 6 1]) -> [3 3 1 1 6 6 6 6 1 1]", "(dupli [3 8 2 0 9]) -> [3 3 8 8 2 2 0 0 9 9]", "(dupli []) -> []", "(dupli [1 2 3 3 8]) -> [1 1 2 2 3 3 3 3 8 8]", "(dupli [7 5]) -> [7 7 5 5]", "(dupli [2 2]) -> [2 2 2 2]", "(dupli [9 1 2]) -> [9 9 1 1 2 2]", "(dupli [6]) -> [6 6]", "(dupli [3]) -> [3 3]", "(dupli []) -> []", "(dupli [3 9 5 3]) -> [3 3 9 9 5 5 3 3]"], "time": 0.208814, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5 9 6]) -> [5 5 9 9 6 6]", "(dupli [0 7]) -> [0 0 7 7]", "(dupli [1 6]) -> [1 1 6 6]", "(dupli []) -> []", "(dupli [7]) -> [7 7]", "(dupli [6 7 8]) -> [6 6 7 7 8 8]", "(dupli [7 7 9 2]) -> [7 7 7 7 9 9 2 2]", "(dupli [4]) -> [4 4]", "(dupli [0 0 2 7 4]) -> [0 0 0 0 2 2 7 7 4 4]", "(dupli [2 9 2 9]) -> [2 2 9 9 2 2 9 9]", "(dupli [0 4 7 0]) -> [0 0 4 4 7 7 0 0]"], "time": 0.217485, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7]) -> [7 7]", "(dupli []) -> []", "(dupli [4 2]) -> [4 4 2 2]", "(dupli [0 7 4]) -> [0 0 7 7 4 4]", "(dupli [1 2]) -> [1 1 2 2]", "(dupli [6 3 6 0]) -> [6 6 3 3 6 6 0 0]", "(dupli [2 5]) -> [2 2 5 5]", "(dupli [8 6]) -> [8 8 6 6]", "(dupli []) -> []", "(dupli [0 8 7 3]) -> [0 0 8 8 7 7 3 3]", "(dupli [2 9 5]) -> [2 2 9 9 5 5]"], "time": 0.203243, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9]) -> [9 9]", "(dupli []) -> []", "(dupli [7 2 1 0]) -> [7 7 2 2 1 1 0 0]", "(dupli [2 7 9 8]) -> [2 2 7 7 9 9 8 8]", "(dupli [3 3 5 5 4]) -> [3 3 3 3 5 5 5 5 4 4]", "(dupli [3 4 8 8 9]) -> [3 3 4 4 8 8 8 8 9 9]", "(dupli [3]) -> [3 3]", "(dupli [2 7 0 9 1]) -> [2 2 7 7 0 0 9 9 1 1]", "(dupli [7 5 9 1]) -> [7 7 5 5 9 9 1 1]", "(dupli [7]) -> [7 7]", "(dupli [6]) -> [6 6]"], "time": 0.201054, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 2 6 0 8]) -> [7 7 2 2 6 6 0 0 8 8]", "(dupli [4 0]) -> [4 4 0 0]", "(dupli [9 4]) -> [9 9 4 4]", "(dupli []) -> []", "(dupli [3 5 9 1 1]) -> [3 3 5 5 9 9 1 1 1 1]", "(dupli [9 3 0]) -> [9 9 3 3 0 0]", "(dupli [5 6 5 9 1]) -> [5 5 6 6 5 5 9 9 1 1]", "(dupli [6]) -> [6 6]", "(dupli []) -> []", "(dupli [4 4 1 5]) -> [4 4 4 4 1 1 5 5]", "(dupli []) -> []"], "time": 0.245095, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 3 3 4 7]) -> [2 2 3 3 3 3 4 4 7 7]", "(dupli [6 1 0 9 4]) -> [6 6 1 1 0 0 9 9 4 4]", "(dupli [8 8 9 6]) -> [8 8 8 8 9 9 6 6]", "(dupli [3 4 5 9 1]) -> [3 3 4 4 5 5 9 9 1 1]", "(dupli [3 6]) -> [3 3 6 6]", "(dupli [7 9]) -> [7 7 9 9]", "(dupli [9 3 5 4 7]) -> [9 9 3 3 5 5 4 4 7 7]", "(dupli [3 7 2 0 3]) -> [3 3 7 7 2 2 0 0 3 3]", "(dupli [1 8]) -> [1 1 8 8]", "(dupli []) -> []", "(dupli [8]) -> [8 8]"], "time": 0.238117, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 6 2 1 5]) -> [0 0 6 6 2 2 1 1 5 5]", "(dupli [1]) -> [1 1]", "(dupli [9]) -> [9 9]", "(dupli []) -> []", "(dupli [8 8 2 1 4]) -> [8 8 8 8 2 2 1 1 4 4]", "(dupli []) -> []", "(dupli [9 9 3 6]) -> [9 9 9 9 3 3 6 6]", "(dupli [3 8 5]) -> [3 3 8 8 5 5]", "(dupli [4 1]) -> [4 4 1 1]", "(dupli [0 4 9 3]) -> [0 0 4 4 9 9 3 3]", "(dupli [8 7]) -> [8 8 7 7]"], "time": 0.23055, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8]) -> [8 8]", "(dupli [8 2 7]) -> [8 8 2 2 7 7]", "(dupli [8 8 5 4 8]) -> [8 8 8 8 5 5 4 4 8 8]", "(dupli [8 9 1 9]) -> [8 8 9 9 1 1 9 9]", "(dupli []) -> []", "(dupli [3 5]) -> [3 3 5 5]", "(dupli [1 6 3 3 5]) -> [1 1 6 6 3 3 3 3 5 5]", "(dupli [6 6 7 2 5]) -> [6 6 6 6 7 7 2 2 5 5]", "(dupli [2 5]) -> [2 2 5 5]", "(dupli [6 8]) -> [6 6 8 8]", "(dupli [5]) -> [5 5]"], "time": 0.192234, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 1 1 0 2]) -> [7 7 1 1 1 1 0 0 2 2]", "(dupli [7 5 2 4]) -> [7 7 5 5 2 2 4 4]", "(dupli []) -> []", "(dupli [5 3 0 0]) -> [5 5 3 3 0 0 0 0]", "(dupli [7 5 6 6 8]) -> [7 7 5 5 6 6 6 6 8 8]", "(dupli [8 8 5]) -> [8 8 8 8 5 5]", "(dupli []) -> []", "(dupli [0 0]) -> [0 0 0 0]", "(dupli []) -> []", "(dupli [7 3 6 6]) -> [7 7 3 3 6 6 6 6]", "(dupli [6 2 5 9]) -> [6 6 2 2 5 5 9 9]"], "time": 0.188361, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 3 9]) -> [2 2 3 3 9 9]", "(dupli [2 9 5]) -> [2 2 9 9 5 5]", "(dupli []) -> []", "(dupli [4 9 5 6 1]) -> [4 4 9 9 5 5 6 6 1 1]", "(dupli [3 9]) -> [3 3 9 9]", "(dupli [3 0 3 2 1]) -> [3 3 0 0 3 3 2 2 1 1]", "(dupli [1]) -> [1 1]", "(dupli [1]) -> [1 1]", "(dupli []) -> []", "(dupli [9]) -> [9 9]", "(dupli [5 5 0 2]) -> [5 5 5 5 0 0 2 2]"], "time": 0.266699, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 4 8 6]) -> [8 8 4 4 8 8 6 6]", "(dupli []) -> []", "(dupli [3 5 5 2]) -> [3 3 5 5 5 5 2 2]", "(dupli [1]) -> [1 1]", "(dupli [5]) -> [5 5]", "(dupli [7 4]) -> [7 7 4 4]", "(dupli [2]) -> [2 2]", "(dupli [8 3 7 5]) -> [8 8 3 3 7 7 5 5]", "(dupli [5 8 6 0 3]) -> [5 5 8 8 6 6 0 0 3 3]", "(dupli [4 3]) -> [4 4 3 3]", "(dupli [4 2 2]) -> [4 4 2 2 2 2]"], "time": 0.296296, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 7 7 9 9]) -> [4 4 7 7 7 7 9 9 9 9]", "(dupli []) -> []", "(dupli [4 7 1 6 0]) -> [4 4 7 7 1 1 6 6 0 0]", "(dupli [5 3 1]) -> [5 5 3 3 1 1]", "(dupli [2]) -> [2 2]", "(dupli [1 9 2]) -> [1 1 9 9 2 2]", "(dupli [0 7 3]) -> [0 0 7 7 3 3]", "(dupli []) -> []", "(dupli []) -> []", "(dupli [1 8]) -> [1 1 8 8]", "(dupli [5 7 9 1 8]) -> [5 5 7 7 9 9 1 1 8 8]"], "time": 0.232345, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 8 6]) -> [8 8 8 8 6 6]", "(dupli [0 9]) -> [0 0 9 9]", "(dupli [7 8 5 1 9]) -> [7 7 8 8 5 5 1 1 9 9]", "(dupli [3 3 9 5 4]) -> [3 3 3 3 9 9 5 5 4 4]", "(dupli [3]) -> [3 3]", "(dupli [3 8 4 9 0]) -> [3 3 8 8 4 4 9 9 0 0]", "(dupli [3]) -> [3 3]", "(dupli []) -> []", "(dupli []) -> []", "(dupli [9]) -> [9 9]", "(dupli []) -> []"], "time": 0.225874, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 0 3 5]) -> [9 9 0 0 3 3 5 5]", "(dupli [8 5 0 3 8]) -> [8 8 5 5 0 0 3 3 8 8]", "(dupli []) -> []", "(dupli [6 1]) -> [6 6 1 1]", "(dupli []) -> []", "(dupli [4 9 3 8]) -> [4 4 9 9 3 3 8 8]", "(dupli [0 9 6 5 8]) -> [0 0 9 9 6 6 5 5 8 8]", "(dupli [8 4 6 4]) -> [8 8 4 4 6 6 4 4]", "(dupli [5 7 4 7]) -> [5 5 7 7 4 4 7 7]", "(dupli []) -> []", "(dupli [6 3 5]) -> [6 6 3 3 5 5]"], "time": 0.254894, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5]) -> [5 5]", "(dupli [7 6]) -> [7 7 6 6]", "(dupli [9]) -> [9 9]", "(dupli [7 4 4 6]) -> [7 7 4 4 4 4 6 6]", "(dupli []) -> []", "(dupli [9 5]) -> [9 9 5 5]", "(dupli [2 5]) -> [2 2 5 5]", "(dupli [0 1 2 9 0]) -> [0 0 1 1 2 2 9 9 0 0]", "(dupli [8 8 3]) -> [8 8 8 8 3 3]", "(dupli [7 1]) -> [7 7 1 1]", "(dupli [2 2]) -> [2 2 2 2]"], "time": 0.149223, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9]) -> [9 9]", "(dupli [2 3 5 6 8]) -> [2 2 3 3 5 5 6 6 8 8]", "(dupli []) -> []", "(dupli [0 7 3]) -> [0 0 7 7 3 3]", "(dupli [7 7 1 0]) -> [7 7 7 7 1 1 0 0]", "(dupli [9 7 2 6 3]) -> [9 9 7 7 2 2 6 6 3 3]", "(dupli [5 6]) -> [5 5 6 6]", "(dupli []) -> []", "(dupli []) -> []", "(dupli [8 1 7]) -> [8 8 1 1 7 7]", "(dupli [8]) -> [8 8]"], "time": 0.230013, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 8]) -> [9 9 8 8]", "(dupli [4 4 6]) -> [4 4 4 4 6 6]", "(dupli [4 1]) -> [4 4 1 1]", "(dupli []) -> []", "(dupli [3 9]) -> [3 3 9 9]", "(dupli [2 1 4 3 3]) -> [2 2 1 1 4 4 3 3 3 3]", "(dupli [9 2 0]) -> [9 9 2 2 0 0]", "(dupli [6 6 8 2]) -> [6 6 6 6 8 8 2 2]", "(dupli [7 6 9 9]) -> [7 7 6 6 9 9 9 9]", "(dupli [6]) -> [6 6]", "(dupli [1 4 6 0]) -> [1 1 4 4 6 6 0 0]"], "time": 0.246702, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 2 0 1 4]) -> [8 8 2 2 0 0 1 1 4 4]", "(dupli [8 9 2 6]) -> [8 8 9 9 2 2 6 6]", "(dupli []) -> []", "(dupli []) -> []", "(dupli [7 5 7]) -> [7 7 5 5 7 7]", "(dupli [8 1]) -> [8 8 1 1]", "(dupli [5]) -> [5 5]", "(dupli [7 6 0 5]) -> [7 7 6 6 0 0 5 5]", "(dupli [2]) -> [2 2]", "(dupli [0 4 4 7]) -> [0 0 4 4 4 4 7 7]", "(dupli [7 1]) -> [7 7 1 1]"], "time": 0.180003, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 4 1]) -> [8 8 4 4 1 1]", "(dupli [0 3 0 2]) -> [0 0 3 3 0 0 2 2]", "(dupli [2 4]) -> [2 2 4 4]", "(dupli [8 3 7 0]) -> [8 8 3 3 7 7 0 0]", "(dupli [7]) -> [7 7]", "(dupli [2 8 2]) -> [2 2 8 8 2 2]", "(dupli []) -> []", "(dupli [2 5]) -> [2 2 5 5]", "(dupli [8 2]) -> [8 8 2 2]", "(dupli []) -> []", "(dupli [9 5 7 5 0]) -> [9 9 5 5 7 7 5 5 0 0]"], "time": 0.295297, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6]) -> [6 6]", "(dupli [6 9]) -> [6 6 9 9]", "(dupli [0 9]) -> [0 0 9 9]", "(dupli [3 8 6]) -> [3 3 8 8 6 6]", "(dupli [3 0]) -> [3 3 0 0]", "(dupli [0 5 9 8]) -> [0 0 5 5 9 9 8 8]", "(dupli [2]) -> [2 2]", "(dupli [6]) -> [6 6]", "(dupli [9]) -> [9 9]", "(dupli [4]) -> [4 4]", "(dupli [8 7]) -> [8 8 7 7]"], "time": 0.20108, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 7 8 7]) -> [9 9 7 7 8 8 7 7]", "(dupli [7 0]) -> [7 7 0 0]", "(dupli [4 2 0]) -> [4 4 2 2 0 0]", "(dupli [0 7 3 8 8]) -> [0 0 7 7 3 3 8 8 8 8]", "(dupli [1 2]) -> [1 1 2 2]", "(dupli []) -> []", "(dupli [9]) -> [9 9]", "(dupli [2 4 3 0 8]) -> [2 2 4 4 3 3 0 0 8 8]", "(dupli []) -> []", "(dupli [7 5]) -> [7 7 5 5]", "(dupli [8 2 8 3 2]) -> [8 8 2 2 8 8 3 3 2 2]"], "time": 0.230064, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [9 1 5]) -> [9 9 1 1 5 5]", "(dupli [8]) -> [8 8]", "(dupli []) -> []", "(dupli []) -> []", "(dupli []) -> []", "(dupli [0 1]) -> [0 0 1 1]", "(dupli [8 8 3 7 7]) -> [8 8 8 8 3 3 7 7 7 7]", "(dupli [4 0 6]) -> [4 4 0 0 6 6]", "(dupli [9 9 0 3 4]) -> [9 9 9 9 0 0 3 3 4 4]", "(dupli []) -> []"], "time": 0.208734, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5]) -> [5 5]", "(dupli [5]) -> [5 5]", "(dupli [4 6 9 2]) -> [4 4 6 6 9 9 2 2]", "(dupli [6 0 9 5]) -> [6 6 0 0 9 9 5 5]", "(dupli [7 9 1]) -> [7 7 9 9 1 1]", "(dupli [4 2]) -> [4 4 2 2]", "(dupli [9 6]) -> [9 9 6 6]", "(dupli [6 9 0]) -> [6 6 9 9 0 0]", "(dupli []) -> []", "(dupli [3 3 6 9]) -> [3 3 3 3 6 6 9 9]", "(dupli [8 9]) -> [8 8 9 9]"], "time": 0.245038, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 0 4 0 9]) -> [6 6 0 0 4 4 0 0 9 9]", "(dupli [8 1 1 4]) -> [8 8 1 1 1 1 4 4]", "(dupli [3 0 4]) -> [3 3 0 0 4 4]", "(dupli [8 2 5 6]) -> [8 8 2 2 5 5 6 6]", "(dupli [6 8]) -> [6 6 8 8]", "(dupli [1 9 2]) -> [1 1 9 9 2 2]", "(dupli [5 6 0 6]) -> [5 5 6 6 0 0 6 6]", "(dupli [3 1]) -> [3 3 1 1]", "(dupli [6 3 2 9]) -> [6 6 3 3 2 2 9 9]", "(dupli []) -> []", "(dupli [3]) -> [3 3]"], "time": 0.199787, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 4 7 3 9]) -> [8 8 4 4 7 7 3 3 9 9]", "(dupli []) -> []", "(dupli []) -> []", "(dupli [4 1 9]) -> [4 4 1 1 9 9]", "(dupli [8 0]) -> [8 8 0 0]", "(dupli [0]) -> [0 0]", "(dupli [6 3 0 1]) -> [6 6 3 3 0 0 1 1]", "(dupli [1]) -> [1 1]", "(dupli [0 7 8]) -> [0 0 7 7 8 8]", "(dupli [9 3 0]) -> [9 9 3 3 0 0]", "(dupli [7 7]) -> [7 7 7 7]"], "time": 0.207748, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 1 3 4 4]) -> [3 3 1 1 3 3 4 4 4 4]", "(dupli [6]) -> [6 6]", "(dupli []) -> []", "(dupli []) -> []", "(dupli [3]) -> [3 3]", "(dupli []) -> []", "(dupli [9]) -> [9 9]", "(dupli [3 1 1]) -> [3 3 1 1 1 1]", "(dupli [9 3 5 1]) -> [9 9 3 3 5 5 1 1]", "(dupli [0 7]) -> [0 0 7 7]", "(dupli [9 6]) -> [9 9 6 6]"], "time": 0.281233, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli []) -> []", "(dupli [2]) -> [2 2]", "(dupli [9 6 7]) -> [9 9 6 6 7 7]", "(dupli [6 3 0]) -> [6 6 3 3 0 0]", "(dupli [8 5]) -> [8 8 5 5]", "(dupli [4 9 9]) -> [4 4 9 9 9 9]", "(dupli [7 2 9 4]) -> [7 7 2 2 9 9 4 4]", "(dupli [0 3 4]) -> [0 0 3 3 4 4]", "(dupli [5 8]) -> [5 5 8 8]", "(dupli [0]) -> [0 0]"], "time": 0.242644, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4]) -> [4 4]", "(dupli [4 3]) -> [4 4 3 3]", "(dupli [1 8 0 6 6]) -> [1 1 8 8 0 0 6 6 6 6]", "(dupli [9 6]) -> [9 9 6 6]", "(dupli [4 4 7 7]) -> [4 4 4 4 7 7 7 7]", "(dupli []) -> []", "(dupli [2]) -> [2 2]", "(dupli [3 7 5 2]) -> [3 3 7 7 5 5 2 2]", "(dupli [4]) -> [4 4]", "(dupli []) -> []", "(dupli [7 3 5 3]) -> [7 7 3 3 5 5 3 3]"], "time": 0.162952, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 7 6]) -> [4 4 7 7 6 6]", "(dupli []) -> []", "(dupli [1 9 2]) -> [1 1 9 9 2 2]", "(dupli [4 9 6 0]) -> [4 4 9 9 6 6 0 0]", "(dupli []) -> []", "(dupli [7 2]) -> [7 7 2 2]", "(dupli [6 5 4]) -> [6 6 5 5 4 4]", "(dupli [7]) -> [7 7]", "(dupli [0 6 3 2 4]) -> [0 0 6 6 3 3 2 2 4 4]", "(dupli [1 5 4 8 0]) -> [1 1 5 5 4 4 8 8 0 0]", "(dupli [7 1 9]) -> [7 7 1 1 9 9]"], "time": 0.268273, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 4 9 0 0]) -> [9 9 4 4 9 9 0 0 0 0]", "(dupli [9]) -> [9 9]", "(dupli [3 4]) -> [3 3 4 4]", "(dupli [7 2 4 5 8]) -> [7 7 2 2 4 4 5 5 8 8]", "(dupli []) -> []", "(dupli [1 3 6]) -> [1 1 3 3 6 6]", "(dupli [6 3 6 3]) -> [6 6 3 3 6 6 3 3]", "(dupli [6]) -> [6 6]", "(dupli [3 5 9 2]) -> [3 3 5 5 9 9 2 2]", "(dupli []) -> []", "(dupli [6 4]) -> [6 6 4 4]"], "time": 0.227863, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 5 4 7 4]) -> [6 6 5 5 4 4 7 7 4 4]", "(dupli [6]) -> [6 6]", "(dupli [6]) -> [6 6]", "(dupli [5]) -> [5 5]", "(dupli [1 1 1]) -> [1 1 1 1 1 1]", "(dupli [3 6 4 0]) -> [3 3 6 6 4 4 0 0]", "(dupli []) -> []", "(dupli [3 7 7 1]) -> [3 3 7 7 7 7 1 1]", "(dupli [7 5]) -> [7 7 5 5]", "(dupli [1 4 3 6]) -> [1 1 4 4 3 3 6 6]", "(dupli [7 7 7]) -> [7 7 7 7 7 7]"], "time": 0.238564, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli []) -> []", "(dupli [7 1]) -> [7 7 1 1]", "(dupli [6 3 6 6 1]) -> [6 6 3 3 6 6 6 6 1 1]", "(dupli [9 2 2 6]) -> [9 9 2 2 2 2 6 6]", "(dupli [9 0]) -> [9 9 0 0]", "(dupli [6 9 9]) -> [6 6 9 9 9 9]", "(dupli [8 3 5]) -> [8 8 3 3 5 5]", "(dupli [9 0 8 2 1]) -> [9 9 0 0 8 8 2 2 1 1]", "(dupli [8 9 6 5]) -> [8 8 9 9 6 6 5 5]", "(dupli [6 6 1]) -> [6 6 6 6 1 1]"], "time": 0.19839, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [0 9]) -> [0 0 9 9]", "(dupli [6 0 9 9 0]) -> [6 6 0 0 9 9 9 9 0 0]", "(dupli [9 6 2]) -> [9 9 6 6 2 2]", "(dupli [6 3 5 7 6]) -> [6 6 3 3 5 5 7 7 6 6]", "(dupli [2 4]) -> [2 2 4 4]", "(dupli []) -> []", "(dupli []) -> []", "(dupli [5]) -> [5 5]", "(dupli [3 7 4]) -> [3 3 7 7 4 4]", "(dupli []) -> []"], "time": 0.226409, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 2]) -> [4 4 2 2]", "(dupli [9 8 2]) -> [9 9 8 8 2 2]", "(dupli [0 4 8 1 1]) -> [0 0 4 4 8 8 1 1 1 1]", "(dupli [7 6 1 4 8]) -> [7 7 6 6 1 1 4 4 8 8]", "(dupli [7 1 5 5]) -> [7 7 1 1 5 5 5 5]", "(dupli [2]) -> [2 2]", "(dupli [2]) -> [2 2]", "(dupli [6 0 2 2 1]) -> [6 6 0 0 2 2 2 2 1 1]", "(dupli [1 1 9 7]) -> [1 1 1 1 9 9 7 7]", "(dupli [4 5 7 7 5]) -> [4 4 5 5 7 7 7 7 5 5]", "(dupli [7]) -> [7 7]"], "time": 0.183674, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2]) -> [2 2]", "(dupli [0]) -> [0 0]", "(dupli [3 9 4 8 8]) -> [3 3 9 9 4 4 8 8 8 8]", "(dupli []) -> []", "(dupli [4]) -> [4 4]", "(dupli [3 9]) -> [3 3 9 9]", "(dupli [4 5 6]) -> [4 4 5 5 6 6]", "(dupli [9 4 5 0 4]) -> [9 9 4 4 5 5 0 0 4 4]", "(dupli [0 7 8 1]) -> [0 0 7 7 8 8 1 1]", "(dupli [9]) -> [9 9]", "(dupli [5 3 5 6 5]) -> [5 5 3 3 5 5 6 6 5 5]"], "time": 0.265166, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 1 3 1 9]) -> [3 3 1 1 3 3 1 1 9 9]", "(dupli [0 7 6 7]) -> [0 0 7 7 6 6 7 7]", "(dupli [3 9 3 7 5]) -> [3 3 9 9 3 3 7 7 5 5]", "(dupli [4]) -> [4 4]", "(dupli [8 1 2 8 8]) -> [8 8 1 1 2 2 8 8 8 8]", "(dupli [4 0 9]) -> [4 4 0 0 9 9]", "(dupli []) -> []", "(dupli [9 7 2 3]) -> [9 9 7 7 2 2 3 3]", "(dupli [4 6]) -> [4 4 6 6]", "(dupli [4 6]) -> [4 4 6 6]", "(dupli [5 4 1 8]) -> [5 5 4 4 1 1 8 8]"], "time": 0.230887, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [0 4 9 7]) -> [0 0 4 4 9 9 7 7]", "(dupli []) -> []", "(dupli [4 0]) -> [4 4 0 0]", "(dupli [7 5 1 5 4]) -> [7 7 5 5 1 1 5 5 4 4]", "(dupli [3]) -> [3 3]", "(dupli [3 5 5 5 8]) -> [3 3 5 5 5 5 5 5 8 8]", "(dupli [1 7 8 1]) -> [1 1 7 7 8 8 1 1]", "(dupli [7 6 5 6]) -> [7 7 6 6 5 5 6 6]", "(dupli [7 3 4]) -> [7 7 3 3 4 4]", "(dupli [7 1 8 4 6]) -> [7 7 1 1 8 8 4 4 6 6]"], "time": 0.215752, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 4 8 3]) -> [4 4 4 4 8 8 3 3]", "(dupli [4 0 0 0]) -> [4 4 0 0 0 0 0 0]", "(dupli [9 5 4 5]) -> [9 9 5 5 4 4 5 5]", "(dupli [9 3]) -> [9 9 3 3]", "(dupli [9]) -> [9 9]", "(dupli []) -> []", "(dupli [4 0 1 4]) -> [4 4 0 0 1 1 4 4]", "(dupli [4]) -> [4 4]", "(dupli [7 2]) -> [7 7 2 2]", "(dupli [8 0]) -> [8 8 0 0]", "(dupli [2 2 5 2]) -> [2 2 2 2 5 5 2 2]"], "time": 0.21509, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 8]) -> [6 6 8 8]", "(dupli [4 6]) -> [4 4 6 6]", "(dupli [4 5]) -> [4 4 5 5]", "(dupli [3 7 1 5]) -> [3 3 7 7 1 1 5 5]", "(dupli [6 7 7 1 1]) -> [6 6 7 7 7 7 1 1 1 1]", "(dupli []) -> []", "(dupli [5 0]) -> [5 5 0 0]", "(dupli [1 0 5 8]) -> [1 1 0 0 5 5 8 8]", "(dupli [5 6]) -> [5 5 6 6]", "(dupli []) -> []", "(dupli [6 6 4 3]) -> [6 6 6 6 4 4 3 3]"], "time": 0.238864, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 3 9 7 7]) -> [7 7 3 3 9 9 7 7 7 7]", "(dupli [9]) -> [9 9]", "(dupli [6 9 5 6]) -> [6 6 9 9 5 5 6 6]", "(dupli []) -> []", "(dupli [7]) -> [7 7]", "(dupli [8]) -> [8 8]", "(dupli []) -> []", "(dupli [2 5]) -> [2 2 5 5]", "(dupli []) -> []", "(dupli [6 9 6]) -> [6 6 9 9 6 6]", "(dupli [6 0 0 3]) -> [6 6 0 0 0 0 3 3]"], "time": 0.220768, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [6 5]) -> [6 6 5 5]", "(dupli [2 4]) -> [2 2 4 4]", "(dupli [5 1 0 1]) -> [5 5 1 1 0 0 1 1]", "(dupli [1 0 4 3]) -> [1 1 0 0 4 4 3 3]", "(dupli [6]) -> [6 6]", "(dupli [3 1]) -> [3 3 1 1]", "(dupli [8 2 3]) -> [8 8 2 2 3 3]", "(dupli [6 8 4 7 9]) -> [6 6 8 8 4 4 7 7 9 9]", "(dupli [0 5]) -> [0 0 5 5]", "(dupli []) -> []"], "time": 0.21884, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 7 0]) -> [9 9 7 7 0 0]", "(dupli [6 8 9 6 8]) -> [6 6 8 8 9 9 6 6 8 8]", "(dupli [5]) -> [5 5]", "(dupli [2 5 6 0]) -> [2 2 5 5 6 6 0 0]", "(dupli [0]) -> [0 0]", "(dupli []) -> []", "(dupli [7]) -> [7 7]", "(dupli [9 7 5 1 9]) -> [9 9 7 7 5 5 1 1 9 9]", "(dupli [2 3]) -> [2 2 3 3]", "(dupli [2 9 2 3]) -> [2 2 9 9 2 2 3 3]", "(dupli []) -> []"], "time": 0.228234, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 6 8]) -> [8 8 6 6 8 8]", "(dupli [1 1]) -> [1 1 1 1]", "(dupli []) -> []", "(dupli [1 6]) -> [1 1 6 6]", "(dupli [5 6 1 4]) -> [5 5 6 6 1 1 4 4]", "(dupli [4 8 3 6]) -> [4 4 8 8 3 3 6 6]", "(dupli [9 8 7 9 7]) -> [9 9 8 8 7 7 9 9 7 7]", "(dupli [3]) -> [3 3]", "(dupli []) -> []", "(dupli [0 4 6 9]) -> [0 0 4 4 6 6 9 9]", "(dupli [0 4]) -> [0 0 4 4]"], "time": 0.265814, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 6 7 0 4]) -> [7 7 6 6 7 7 0 0 4 4]", "(dupli [4 1 4 2 3]) -> [4 4 1 1 4 4 2 2 3 3]", "(dupli [8 8]) -> [8 8 8 8]", "(dupli [7 9 9 6]) -> [7 7 9 9 9 9 6 6]", "(dupli []) -> []", "(dupli []) -> []", "(dupli [0 1 3 4]) -> [0 0 1 1 3 3 4 4]", "(dupli [5]) -> [5 5]", "(dupli [6 3]) -> [6 6 3 3]", "(dupli [4 0 5]) -> [4 4 0 0 5 5]", "(dupli [0 8 9 6]) -> [0 0 8 8 9 9 6 6]"], "time": 0.168249, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0]) -> [0 0]", "(dupli [2 2]) -> [2 2 2 2]", "(dupli [5 6 1]) -> [5 5 6 6 1 1]", "(dupli [8 4 2]) -> [8 8 4 4 2 2]", "(dupli [6 4 3]) -> [6 6 4 4 3 3]", "(dupli [6 3 6 0 6]) -> [6 6 3 3 6 6 0 0 6 6]", "(dupli [9 0]) -> [9 9 0 0]", "(dupli [4 7 8]) -> [4 4 7 7 8 8]", "(dupli [3 4 1 2 5]) -> [3 3 4 4 1 1 2 2 5 5]", "(dupli []) -> []", "(dupli [6 2]) -> [6 6 2 2]"], "time": 0.189655, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 5]) -> [9 9 5 5]", "(dupli []) -> []", "(dupli [8 6 4 8]) -> [8 8 6 6 4 4 8 8]", "(dupli [6 0 9 3 2]) -> [6 6 0 0 9 9 3 3 2 2]", "(dupli [6 1 1]) -> [6 6 1 1 1 1]", "(dupli [5]) -> [5 5]", "(dupli [7 6]) -> [7 7 6 6]", "(dupli [3 5 4 8]) -> [3 3 5 5 4 4 8 8]", "(dupli [9 7 1]) -> [9 9 7 7 1 1]", "(dupli [0 3 2 8 2]) -> [0 0 3 3 2 2 8 8 2 2]", "(dupli []) -> []"], "time": 0.152398, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 3]) -> [7 7 3 3]", "(dupli []) -> []", "(dupli [1 2]) -> [1 1 2 2]", "(dupli [4]) -> [4 4]", "(dupli [1]) -> [1 1]", "(dupli [0 3 4]) -> [0 0 3 3 4 4]", "(dupli [0 8 4 6]) -> [0 0 8 8 4 4 6 6]", "(dupli [5 7 4 3 0]) -> [5 5 7 7 4 4 3 3 0 0]", "(dupli []) -> []", "(dupli []) -> []", "(dupli [2 7 1]) -> [2 2 7 7 1 1]"], "time": 0.202388, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3]) -> [3 3]", "(dupli [8 7 6]) -> [8 8 7 7 6 6]", "(dupli [0 0 6 4]) -> [0 0 0 0 6 6 4 4]", "(dupli [1 8 5]) -> [1 1 8 8 5 5]", "(dupli [8 7 9]) -> [8 8 7 7 9 9]", "(dupli [5 0]) -> [5 5 0 0]", "(dupli [5 5 6]) -> [5 5 5 5 6 6]", "(dupli [7 8 5 7 6]) -> [7 7 8 8 5 5 7 7 6 6]", "(dupli []) -> []", "(dupli []) -> []", "(dupli [1 2]) -> [1 1 2 2]"], "time": 0.213417, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 8 4 4 6]) -> [3 3 8 8 4 4 4 4 6 6]", "(dupli [8 8 8]) -> [8 8 8 8 8 8]", "(dupli []) -> []", "(dupli [1 8 4 0 5]) -> [1 1 8 8 4 4 0 0 5 5]", "(dupli [6 8 5 0]) -> [6 6 8 8 5 5 0 0]", "(dupli [0 9 6 3 8]) -> [0 0 9 9 6 6 3 3 8 8]", "(dupli [1]) -> [1 1]", "(dupli []) -> []", "(dupli [4 0 0 6 1]) -> [4 4 0 0 0 0 6 6 1 1]", "(dupli [5]) -> [5 5]", "(dupli [2]) -> [2 2]"], "time": 0.241013, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [3]) -> [3 3]", "(dupli [1 8]) -> [1 1 8 8]", "(dupli [8 2]) -> [8 8 2 2]", "(dupli [3 7 9 7 2]) -> [3 3 7 7 9 9 7 7 2 2]", "(dupli []) -> []", "(dupli [1 5]) -> [1 1 5 5]", "(dupli [7 6]) -> [7 7 6 6]", "(dupli [9 9 0 0 1]) -> [9 9 9 9 0 0 0 0 1 1]", "(dupli [8 8 7]) -> [8 8 8 8 7 7]", "(dupli [5 4 2 2 4]) -> [5 5 4 4 2 2 2 2 4 4]"], "time": 0.211908, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli []) -> []", "(dupli [9 6 3 8 4]) -> [9 9 6 6 3 3 8 8 4 4]", "(dupli [5 4 8 5]) -> [5 5 4 4 8 8 5 5]", "(dupli []) -> []", "(dupli []) -> []", "(dupli [0 5 7]) -> [0 0 5 5 7 7]", "(dupli [0 4 9]) -> [0 0 4 4 9 9]", "(dupli [7 5]) -> [7 7 5 5]", "(dupli [8]) -> [8 8]", "(dupli [9 6 0 4]) -> [9 9 6 6 0 0 4 4]"], "time": 0.239743, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [8 9 0 6 5]) -> [8 8 9 9 0 0 6 6 5 5]", "(dupli []) -> []", "(dupli [3]) -> [3 3]", "(dupli [8 3 1 0 0]) -> [8 8 3 3 1 1 0 0 0 0]", "(dupli [5 2]) -> [5 5 2 2]", "(dupli [9 8 7]) -> [9 9 8 8 7 7]", "(dupli []) -> []", "(dupli [8]) -> [8 8]", "(dupli [6 9 5 3 8]) -> [6 6 9 9 5 5 3 3 8 8]", "(dupli [5 5 2]) -> [5 5 5 5 2 2]"], "time": 0.244817, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 2 4]) -> [6 6 2 2 4 4]", "(dupli [9]) -> [9 9]", "(dupli []) -> []", "(dupli []) -> []", "(dupli [5 6 6 0 6]) -> [5 5 6 6 6 6 0 0 6 6]", "(dupli [3 6 1]) -> [3 3 6 6 1 1]", "(dupli [7 3]) -> [7 7 3 3]", "(dupli []) -> []", "(dupli [1 5 1 8]) -> [1 1 5 5 1 1 8 8]", "(dupli [2 6]) -> [2 2 6 6]", "(dupli [5]) -> [5 5]"], "time": 0.228673, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5]) -> [5 5]", "(dupli [6 4 7 9 8]) -> [6 6 4 4 7 7 9 9 8 8]", "(dupli [8 4 4 8 0]) -> [8 8 4 4 4 4 8 8 0 0]", "(dupli [9 7 8]) -> [9 9 7 7 8 8]", "(dupli [9 0]) -> [9 9 0 0]", "(dupli [1 6 8]) -> [1 1 6 6 8 8]", "(dupli [4 4 7 6 2]) -> [4 4 4 4 7 7 6 6 2 2]", "(dupli []) -> []", "(dupli [0 7 9 1]) -> [0 0 7 7 9 9 1 1]", "(dupli []) -> []", "(dupli [1 8 5 3]) -> [1 1 8 8 5 5 3 3]"], "time": 0.210694, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9]) -> [9 9]", "(dupli []) -> []", "(dupli [4 6 2 4]) -> [4 4 6 6 2 2 4 4]", "(dupli [8 1 4]) -> [8 8 1 1 4 4]", "(dupli [5 6 0]) -> [5 5 6 6 0 0]", "(dupli [1 0 8 1]) -> [1 1 0 0 8 8 1 1]", "(dupli [4]) -> [4 4]", "(dupli [8 7]) -> [8 8 7 7]", "(dupli [8 3]) -> [8 8 3 3]", "(dupli [3 8]) -> [3 3 8 8]", "(dupli [7 4 6 9 5]) -> [7 7 4 4 6 6 9 9 5 5]"], "time": 0.190903, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6]) -> [6 6]", "(dupli [2 9]) -> [2 2 9 9]", "(dupli [7]) -> [7 7]", "(dupli [4 4 0 3]) -> [4 4 4 4 0 0 3 3]", "(dupli []) -> []", "(dupli [9 6 8 4]) -> [9 9 6 6 8 8 4 4]", "(dupli [5 2 8 9]) -> [5 5 2 2 8 8 9 9]", "(dupli [4]) -> [4 4]", "(dupli [3]) -> [3 3]", "(dupli []) -> []", "(dupli []) -> []"], "time": 0.227038, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 9 5 9 2]) -> [4 4 9 9 5 5 9 9 2 2]", "(dupli [3 5 1 8]) -> [3 3 5 5 1 1 8 8]", "(dupli [3 7 3 0]) -> [3 3 7 7 3 3 0 0]", "(dupli [9 7 8]) -> [9 9 7 7 8 8]", "(dupli [4]) -> [4 4]", "(dupli [7 9 8 2]) -> [7 7 9 9 8 8 2 2]", "(dupli [9 2]) -> [9 9 2 2]", "(dupli []) -> []", "(dupli [7 2 7 2 8]) -> [7 7 2 2 7 7 2 2 8 8]", "(dupli []) -> []", "(dupli [0 4 9 3 1]) -> [0 0 4 4 9 9 3 3 1 1]"], "time": 0.240633, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 4 3 8]) -> [7 7 4 4 3 3 8 8]", "(dupli [6]) -> [6 6]", "(dupli [3 8 4 9 6]) -> [3 3 8 8 4 4 9 9 6 6]", "(dupli [4 9 8 3 9]) -> [4 4 9 9 8 8 3 3 9 9]", "(dupli [4 6 6]) -> [4 4 6 6 6 6]", "(dupli [0 7 3]) -> [0 0 7 7 3 3]", "(dupli [5 1 5 5 0]) -> [5 5 1 1 5 5 5 5 0 0]", "(dupli [9]) -> [9 9]", "(dupli [5]) -> [5 5]", "(dupli [2 1 8 9 5]) -> [2 2 1 1 8 8 9 9 5 5]", "(dupli []) -> []"], "time": 0.245074, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 0 4 4]) -> [4 4 0 0 4 4 4 4]", "(dupli [7 1 2 5 8]) -> [7 7 1 1 2 2 5 5 8 8]", "(dupli [2 6 5 4]) -> [2 2 6 6 5 5 4 4]", "(dupli [4 8 8]) -> [4 4 8 8 8 8]", "(dupli [3]) -> [3 3]", "(dupli [7 9]) -> [7 7 9 9]", "(dupli [2 1 1]) -> [2 2 1 1 1 1]", "(dupli []) -> []", "(dupli [6]) -> [6 6]", "(dupli [9 7 9 9]) -> [9 9 7 7 9 9 9 9]", "(dupli [7 8 6 7]) -> [7 7 8 8 6 6 7 7]"], "time": 0.241205, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 0 7]) -> [7 7 0 0 7 7]", "(dupli [9 3 3 3]) -> [9 9 3 3 3 3 3 3]", "(dupli [5 6 8 3]) -> [5 5 6 6 8 8 3 3]", "(dupli []) -> []", "(dupli [3 2 7]) -> [3 3 2 2 7 7]", "(dupli [2 8]) -> [2 2 8 8]", "(dupli []) -> []", "(dupli [3 2 3 6 7]) -> [3 3 2 2 3 3 6 6 7 7]", "(dupli [9]) -> [9 9]", "(dupli [4]) -> [4 4]", "(dupli [2 1 4]) -> [2 2 1 1 4 4]"], "time": 0.208578, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [2 8 1 5 0]) -> [2 2 8 8 1 1 5 5 0 0]", "(dupli []) -> []", "(dupli [4 1]) -> [4 4 1 1]", "(dupli [5 9 1 6 2]) -> [5 5 9 9 1 1 6 6 2 2]", "(dupli [6]) -> [6 6]", "(dupli [6 1 4]) -> [6 6 1 1 4 4]", "(dupli []) -> []", "(dupli [8]) -> [8 8]", "(dupli [0 7]) -> [0 0 7 7]", "(dupli [9 7 1]) -> [9 9 7 7 1 1]"], "time": 0.266669, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [0 1]) -> [0 0 1 1]", "(dupli [8 4 9 0 6]) -> [8 8 4 4 9 9 0 0 6 6]", "(dupli [3 2]) -> [3 3 2 2]", "(dupli [3 7 2 9 3]) -> [3 3 7 7 2 2 9 9 3 3]", "(dupli [5 5 2 8 0]) -> [5 5 5 5 2 2 8 8 0 0]", "(dupli [6 1 6 8 1]) -> [6 6 1 1 6 6 8 8 1 1]", "(dupli []) -> []", "(dupli [6 1]) -> [6 6 1 1]", "(dupli [7 2 9 6]) -> [7 7 2 2 9 9 6 6]", "(dupli [3 9]) -> [3 3 9 9]"], "time": 0.255077, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [3 2]) -> [3 3 2 2]", "(dupli [5 6 6 7]) -> [5 5 6 6 6 6 7 7]", "(dupli [0]) -> [0 0]", "(dupli [3 5 2 4]) -> [3 3 5 5 2 2 4 4]", "(dupli []) -> []", "(dupli [3 2 5]) -> [3 3 2 2 5 5]", "(dupli [8 9]) -> [8 8 9 9]", "(dupli [7 1 3 9]) -> [7 7 1 1 3 3 9 9]", "(dupli [3]) -> [3 3]", "(dupli [2 3 4 3]) -> [2 2 3 3 4 4 3 3]"], "time": 0.240493, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 0 9]) -> [7 7 0 0 9 9]", "(dupli [6]) -> [6 6]", "(dupli [7 1 8]) -> [7 7 1 1 8 8]", "(dupli [1 9 3 6 9]) -> [1 1 9 9 3 3 6 6 9 9]", "(dupli [7]) -> [7 7]", "(dupli [0 9 2 4]) -> [0 0 9 9 2 2 4 4]", "(dupli [1 2 4 1]) -> [1 1 2 2 4 4 1 1]", "(dupli [7 8 0 2 6]) -> [7 7 8 8 0 0 2 2 6 6]", "(dupli [3 0 2 6 8]) -> [3 3 0 0 2 2 6 6 8 8]", "(dupli [0 9 4 5]) -> [0 0 9 9 4 4 5 5]", "(dupli [1 7 8 4]) -> [1 1 7 7 8 8 4 4]"], "time": 0.211989, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9]) -> [9 9]", "(dupli [9]) -> [9 9]", "(dupli []) -> []", "(dupli [0 5]) -> [0 0 5 5]", "(dupli [0 8 3 9]) -> [0 0 8 8 3 3 9 9]", "(dupli [7 9 1 5]) -> [7 7 9 9 1 1 5 5]", "(dupli [8 1 8 7]) -> [8 8 1 1 8 8 7 7]", "(dupli [5 0 3]) -> [5 5 0 0 3 3]", "(dupli [2 6 6 4]) -> [2 2 6 6 6 6 4 4]", "(dupli []) -> []", "(dupli [5 6 8 0 3]) -> [5 5 6 6 8 8 0 0 3 3]"], "time": 0.265752, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [2 6 7]) -> [2 2 6 6 7 7]", "(dupli [9 3 1 7 2]) -> [9 9 3 3 1 1 7 7 2 2]", "(dupli [7]) -> [7 7]", "(dupli [7 9 4 5]) -> [7 7 9 9 4 4 5 5]", "(dupli [9 7 8 4 9]) -> [9 9 7 7 8 8 4 4 9 9]", "(dupli [2 0]) -> [2 2 0 0]", "(dupli [5 3]) -> [5 5 3 3]", "(dupli [5 3 5 0]) -> [5 5 3 3 5 5 0 0]", "(dupli [9 5 4]) -> [9 9 5 5 4 4]", "(dupli [3 7 2 2 2]) -> [3 3 7 7 2 2 2 2 2 2]"], "time": 0.232306, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [6 8 9 3 2]) -> [6 6 8 8 9 9 3 3 2 2]", "(dupli [6 5]) -> [6 6 5 5]", "(dupli [6 1 0 8]) -> [6 6 1 1 0 0 8 8]", "(dupli [0 3 0]) -> [0 0 3 3 0 0]", "(dupli [8 2 0]) -> [8 8 2 2 0 0]", "(dupli []) -> []", "(dupli []) -> []", "(dupli [0]) -> [0 0]", "(dupli [0 1 9]) -> [0 0 1 1 9 9]", "(dupli [3 6]) -> [3 3 6 6]"], "time": 0.238821, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7]) -> [7 7]", "(dupli [3 9 3 5 2]) -> [3 3 9 9 3 3 5 5 2 2]", "(dupli []) -> []", "(dupli []) -> []", "(dupli [2]) -> [2 2]", "(dupli [1 4 5]) -> [1 1 4 4 5 5]", "(dupli [2 3]) -> [2 2 3 3]", "(dupli [3 6 4 3 9]) -> [3 3 6 6 4 4 3 3 9 9]", "(dupli [6 2 8 9 4]) -> [6 6 2 2 8 8 9 9 4 4]", "(dupli []) -> []", "(dupli [8 5]) -> [8 8 5 5]"], "time": 0.279569, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 7 3 5]) -> [9 9 7 7 3 3 5 5]", "(dupli [5]) -> [5 5]", "(dupli [1]) -> [1 1]", "(dupli [4 5 8 4 3]) -> [4 4 5 5 8 8 4 4 3 3]", "(dupli [1 4 4 8]) -> [1 1 4 4 4 4 8 8]", "(dupli [4]) -> [4 4]", "(dupli [9 3]) -> [9 9 3 3]", "(dupli [5 2 9 1 0]) -> [5 5 2 2 9 9 1 1 0 0]", "(dupli [5 5 5]) -> [5 5 5 5 5 5]", "(dupli [6 0 3 4 2]) -> [6 6 0 0 3 3 4 4 2 2]", "(dupli []) -> []"], "time": 0.227938, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 1 0 9 3]) -> [9 9 1 1 0 0 9 9 3 3]", "(dupli [0 4]) -> [0 0 4 4]", "(dupli []) -> []", "(dupli []) -> []", "(dupli [3 8 6 0]) -> [3 3 8 8 6 6 0 0]", "(dupli [9]) -> [9 9]", "(dupli [6 5 9]) -> [6 6 5 5 9 9]", "(dupli [8 2 1 3 8]) -> [8 8 2 2 1 1 3 3 8 8]", "(dupli [2 3 7 4 4]) -> [2 2 3 3 7 7 4 4 4 4]", "(dupli [2 0]) -> [2 2 0 0]", "(dupli [8 1]) -> [8 8 1 1]"], "time": 0.198658, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1 1]) -> [1 1 1 1]", "(dupli []) -> []", "(dupli [8 2 0 3 3]) -> [8 8 2 2 0 0 3 3 3 3]", "(dupli [7 2 0 7]) -> [7 7 2 2 0 0 7 7]", "(dupli [6 5 5 3 5]) -> [6 6 5 5 5 5 3 3 5 5]", "(dupli [2 8]) -> [2 2 8 8]", "(dupli [3 3 0 2 2]) -> [3 3 3 3 0 0 2 2 2 2]", "(dupli [5 5]) -> [5 5 5 5]", "(dupli []) -> []", "(dupli [3]) -> [3 3]", "(dupli [9]) -> [9 9]"], "time": 0.217269, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4]) -> [4 4]", "(dupli [3 6]) -> [3 3 6 6]", "(dupli []) -> []", "(dupli [9 0 7 7 1]) -> [9 9 0 0 7 7 7 7 1 1]", "(dupli [9]) -> [9 9]", "(dupli [8 5]) -> [8 8 5 5]", "(dupli [1 2]) -> [1 1 2 2]", "(dupli [5 1 6]) -> [5 5 1 1 6 6]", "(dupli [2 5 0]) -> [2 2 5 5 0 0]", "(dupli [7 8 3 1 7]) -> [7 7 8 8 3 3 1 1 7 7]", "(dupli [6 4 3]) -> [6 6 4 4 3 3]"], "time": 0.219677, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5]) -> [5 5]", "(dupli [5 7]) -> [5 5 7 7]", "(dupli [6 0 5 6 2]) -> [6 6 0 0 5 5 6 6 2 2]", "(dupli [8 8 5 4]) -> [8 8 8 8 5 5 4 4]", "(dupli [9 5 0 7 2]) -> [9 9 5 5 0 0 7 7 2 2]", "(dupli [8 8 4 5]) -> [8 8 8 8 4 4 5 5]", "(dupli []) -> []", "(dupli [6]) -> [6 6]", "(dupli [5 6 8]) -> [5 5 6 6 8 8]", "(dupli [2]) -> [2 2]", "(dupli [8 5]) -> [8 8 5 5]"], "time": 0.221639, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 2]) -> [3 3 2 2]", "(dupli [0 7]) -> [0 0 7 7]", "(dupli [2]) -> [2 2]", "(dupli [2 8 7]) -> [2 2 8 8 7 7]", "(dupli [6]) -> [6 6]", "(dupli [2 6 7 9]) -> [2 2 6 6 7 7 9 9]", "(dupli [7 4 9]) -> [7 7 4 4 9 9]", "(dupli [0 5 0]) -> [0 0 5 5 0 0]", "(dupli [7 8 1 0]) -> [7 7 8 8 1 1 0 0]", "(dupli [6 3 0 0]) -> [6 6 3 3 0 0 0 0]", "(dupli []) -> []"], "time": 0.232786, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 8]) -> [3 3 8 8]", "(dupli [0 4 9 6 5]) -> [0 0 4 4 9 9 6 6 5 5]", "(dupli [0 4 5 5]) -> [0 0 4 4 5 5 5 5]", "(dupli [8]) -> [8 8]", "(dupli [2]) -> [2 2]", "(dupli []) -> []", "(dupli [6 2 8 9]) -> [6 6 2 2 8 8 9 9]", "(dupli []) -> []", "(dupli [7 0]) -> [7 7 0 0]", "(dupli [1 0 9 8 7]) -> [1 1 0 0 9 9 8 8 7 7]", "(dupli [4 1 2 5 8]) -> [4 4 1 1 2 2 5 5 8 8]"], "time": 0.244157, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 6]) -> [4 4 6 6]", "(dupli [6 1 0 2 9]) -> [6 6 1 1 0 0 2 2 9 9]", "(dupli [2]) -> [2 2]", "(dupli [6]) -> [6 6]", "(dupli [0 9 2]) -> [0 0 9 9 2 2]", "(dupli [1]) -> [1 1]", "(dupli [6 7 7 1]) -> [6 6 7 7 7 7 1 1]", "(dupli [1]) -> [1 1]", "(dupli [1]) -> [1 1]", "(dupli []) -> []", "(dupli [9 1]) -> [9 9 1 1]"], "time": 0.154527, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5 7 7 5]) -> [5 5 7 7 7 7 5 5]", "(dupli [1 6 0 3]) -> [1 1 6 6 0 0 3 3]", "(dupli [5 2 1]) -> [5 5 2 2 1 1]", "(dupli []) -> []", "(dupli [5 4 1 0 6]) -> [5 5 4 4 1 1 0 0 6 6]", "(dupli [0 0 1 8]) -> [0 0 0 0 1 1 8 8]", "(dupli [2 7 1 4]) -> [2 2 7 7 1 1 4 4]", "(dupli [9 6 3 3 1]) -> [9 9 6 6 3 3 3 3 1 1]", "(dupli [4 7]) -> [4 4 7 7]", "(dupli [1 3 0]) -> [1 1 3 3 0 0]", "(dupli [4 6 7 6]) -> [4 4 6 6 7 7 6 6]"], "time": 0.155046, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 2 6 6]) -> [7 7 2 2 6 6 6 6]", "(dupli [2 0]) -> [2 2 0 0]", "(dupli [5 9 6 5]) -> [5 5 9 9 6 6 5 5]", "(dupli [8 6 6]) -> [8 8 6 6 6 6]", "(dupli [7 3 3 1]) -> [7 7 3 3 3 3 1 1]", "(dupli [0]) -> [0 0]", "(dupli [4 2 4]) -> [4 4 2 2 4 4]", "(dupli [1]) -> [1 1]", "(dupli [4 3]) -> [4 4 3 3]", "(dupli [8]) -> [8 8]", "(dupli [7 1 6]) -> [7 7 1 1 6 6]"], "time": 0.213173, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [7 6 8 8]) -> [7 7 6 6 8 8 8 8]", "(dupli [8 8 0 1]) -> [8 8 8 8 0 0 1 1]", "(dupli [3 1]) -> [3 3 1 1]", "(dupli [7 6 2 2]) -> [7 7 6 6 2 2 2 2]", "(dupli [0 4 5 9]) -> [0 0 4 4 5 5 9 9]", "(dupli [5 6 3 4]) -> [5 5 6 6 3 3 4 4]", "(dupli [9 4 1]) -> [9 9 4 4 1 1]", "(dupli [3 7 5]) -> [3 3 7 7 5 5]", "(dupli [3 2 0 1 5]) -> [3 3 2 2 0 0 1 1 5 5]", "(dupli [3 5 1 3 4]) -> [3 3 5 5 1 1 3 3 4 4]"], "time": 0.230206, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [8 0 0 0]) -> [8 8 0 0 0 0 0 0]", "(dupli [9 1 9]) -> [9 9 1 1 9 9]", "(dupli []) -> []", "(dupli [8 4]) -> [8 8 4 4]", "(dupli [4 7 0]) -> [4 4 7 7 0 0]", "(dupli [2 0 4 8]) -> [2 2 0 0 4 4 8 8]", "(dupli [2]) -> [2 2]", "(dupli [6 7]) -> [6 6 7 7]", "(dupli []) -> []", "(dupli []) -> []"], "time": 0.199457, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1]) -> [1 1]", "(dupli [6 7]) -> [6 6 7 7]", "(dupli []) -> []", "(dupli [1 3 6 4]) -> [1 1 3 3 6 6 4 4]", "(dupli []) -> []", "(dupli [5 4 7]) -> [5 5 4 4 7 7]", "(dupli [6 4 6 3 2]) -> [6 6 4 4 6 6 3 3 2 2]", "(dupli [6 0 8]) -> [6 6 0 0 8 8]", "(dupli [3 1 6]) -> [3 3 1 1 6 6]", "(dupli []) -> []", "(dupli [2 0 5 1]) -> [2 2 0 0 5 5 1 1]"], "time": 0.214337, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 3 7 7]) -> [8 8 3 3 7 7 7 7]", "(dupli [1 3 4 9]) -> [1 1 3 3 4 4 9 9]", "(dupli [8 9 1 6]) -> [8 8 9 9 1 1 6 6]", "(dupli [8 7 4 1 6]) -> [8 8 7 7 4 4 1 1 6 6]", "(dupli [5]) -> [5 5]", "(dupli [0 2 2 8 1]) -> [0 0 2 2 2 2 8 8 1 1]", "(dupli []) -> []", "(dupli [3 3 5]) -> [3 3 3 3 5 5]", "(dupli [6 7 3]) -> [6 6 7 7 3 3]", "(dupli [9 5]) -> [9 9 5 5]", "(dupli [0 6 8]) -> [0 0 6 6 8 8]"], "time": 0.241566, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 3 0 5 0]) -> [9 9 3 3 0 0 5 5 0 0]", "(dupli [3]) -> [3 3]", "(dupli [7 1 8 1 5]) -> [7 7 1 1 8 8 1 1 5 5]", "(dupli [0 7 9]) -> [0 0 7 7 9 9]", "(dupli [7 9]) -> [7 7 9 9]", "(dupli [6 6 4 5 3]) -> [6 6 6 6 4 4 5 5 3 3]", "(dupli [2]) -> [2 2]", "(dupli [3 3]) -> [3 3 3 3]", "(dupli [1 0 3 4]) -> [1 1 0 0 3 3 4 4]", "(dupli [4 5 1 4]) -> [4 4 5 5 1 1 4 4]", "(dupli [1 1 4 0]) -> [1 1 1 1 4 4 0 0]"], "time": 0.238825, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 1 9 0 0]) -> [6 6 1 1 9 9 0 0 0 0]", "(dupli [3 7 2 2]) -> [3 3 7 7 2 2 2 2]", "(dupli [9 4]) -> [9 9 4 4]", "(dupli [4 3 8 4 1]) -> [4 4 3 3 8 8 4 4 1 1]", "(dupli [9 3]) -> [9 9 3 3]", "(dupli [9 6 1 1]) -> [9 9 6 6 1 1 1 1]", "(dupli [7]) -> [7 7]", "(dupli []) -> []", "(dupli [5]) -> [5 5]", "(dupli [7]) -> [7 7]", "(dupli [5 0]) -> [5 5 0 0]"], "time": 0.21626, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 7]) -> [8 8 7 7]", "(dupli [9 9 1]) -> [9 9 9 9 1 1]", "(dupli [0 1 1 8]) -> [0 0 1 1 1 1 8 8]", "(dupli [4 5 8]) -> [4 4 5 5 8 8]", "(dupli [3 2]) -> [3 3 2 2]", "(dupli [3]) -> [3 3]", "(dupli [4 4 2 8 2]) -> [4 4 4 4 2 2 8 8 2 2]", "(dupli [9]) -> [9 9]", "(dupli [9 2 6 4]) -> [9 9 2 2 6 6 4 4]", "(dupli [8 6 8 6]) -> [8 8 6 6 8 8 6 6]", "(dupli [4]) -> [4 4]"], "time": 0.216482, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [0 6]) -> [0 0 6 6]", "(dupli [2 7 5 4 6]) -> [2 2 7 7 5 5 4 4 6 6]", "(dupli [3 7 6]) -> [3 3 7 7 6 6]", "(dupli [9 0 3 1]) -> [9 9 0 0 3 3 1 1]", "(dupli [3]) -> [3 3]", "(dupli [6 3 7 2]) -> [6 6 3 3 7 7 2 2]", "(dupli []) -> []", "(dupli [7 5 6]) -> [7 7 5 5 6 6]", "(dupli [5 2]) -> [5 5 2 2]", "(dupli [9 6 8 8]) -> [9 9 6 6 8 8 8 8]"], "time": 0.215894, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5 8 4 6]) -> [5 5 8 8 4 4 6 6]", "(dupli [4 7 9]) -> [4 4 7 7 9 9]", "(dupli [8 8 2]) -> [8 8 8 8 2 2]", "(dupli [0 7]) -> [0 0 7 7]", "(dupli [4 9 8 1]) -> [4 4 9 9 8 8 1 1]", "(dupli [5 0 8 3]) -> [5 5 0 0 8 8 3 3]", "(dupli []) -> []", "(dupli [4]) -> [4 4]", "(dupli [0 7 1 8 8]) -> [0 0 7 7 1 1 8 8 8 8]", "(dupli [9 2 0]) -> [9 9 2 2 0 0]", "(dupli [4]) -> [4 4]"], "time": 0.207443, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [7 3 2 2]) -> [7 7 3 3 2 2 2 2]", "(dupli [8 4 1 5 6]) -> [8 8 4 4 1 1 5 5 6 6]", "(dupli [9 1]) -> [9 9 1 1]", "(dupli [8 2]) -> [8 8 2 2]", "(dupli [7 2 5]) -> [7 7 2 2 5 5]", "(dupli [8 8 3 6 5]) -> [8 8 8 8 3 3 6 6 5 5]", "(dupli [5 9 1 7]) -> [5 5 9 9 1 1 7 7]", "(dupli [5]) -> [5 5]", "(dupli [1 6 9 6 0]) -> [1 1 6 6 9 9 6 6 0 0]", "(dupli [7 4]) -> [7 7 4 4]"], "time": 0.227395, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 4 0 2]) -> [0 0 4 4 0 0 2 2]", "(dupli []) -> []", "(dupli [1 6 7]) -> [1 1 6 6 7 7]", "(dupli [4]) -> [4 4]", "(dupli [0 2 5 8 6]) -> [0 0 2 2 5 5 8 8 6 6]", "(dupli [9]) -> [9 9]", "(dupli []) -> []", "(dupli [4 9]) -> [4 4 9 9]", "(dupli [7 4 7 8 1]) -> [7 7 4 4 7 7 8 8 1 1]", "(dupli []) -> []", "(dupli [0 1]) -> [0 0 1 1]"], "time": 0.228506, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [9 0 8 8]) -> [9 9 0 0 8 8 8 8]", "(dupli [5 1 9 1]) -> [5 5 1 1 9 9 1 1]", "(dupli [0 0 4]) -> [0 0 0 0 4 4]", "(dupli [8 6 5 7 1]) -> [8 8 6 6 5 5 7 7 1 1]", "(dupli [6 6 8 3]) -> [6 6 6 6 8 8 3 3]", "(dupli [3 1 5 3]) -> [3 3 1 1 5 5 3 3]", "(dupli [5 8 7]) -> [5 5 8 8 7 7]", "(dupli [5 7 5]) -> [5 5 7 7 5 5]", "(dupli [1 5 6 6 2]) -> [1 1 5 5 6 6 6 6 2 2]", "(dupli [3 6]) -> [3 3 6 6]"], "time": 0.2297, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 5 9 2]) -> [7 7 5 5 9 9 2 2]", "(dupli [7 0 1]) -> [7 7 0 0 1 1]", "(dupli [2]) -> [2 2]", "(dupli []) -> []", "(dupli [2 5 1 2 1]) -> [2 2 5 5 1 1 2 2 1 1]", "(dupli [4 3 4]) -> [4 4 3 3 4 4]", "(dupli []) -> []", "(dupli [7 8 3 0]) -> [7 7 8 8 3 3 0 0]", "(dupli [0 7 9 1 5]) -> [0 0 7 7 9 9 1 1 5 5]", "(dupli [5 3 4]) -> [5 5 3 3 4 4]", "(dupli [4]) -> [4 4]"], "time": 0.216603, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0]) -> [0 0]", "(dupli []) -> []", "(dupli [6]) -> [6 6]", "(dupli [7 6 2 7]) -> [7 7 6 6 2 2 7 7]", "(dupli [9 8 3 3 1]) -> [9 9 8 8 3 3 3 3 1 1]", "(dupli []) -> []", "(dupli [4 2 7 8]) -> [4 4 2 2 7 7 8 8]", "(dupli [9]) -> [9 9]", "(dupli []) -> []", "(dupli [8 5 2 4 3]) -> [8 8 5 5 2 2 4 4 3 3]", "(dupli [2 8 0 2]) -> [2 2 8 8 0 0 2 2]"], "time": 0.111605, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1]) -> [1 1]", "(dupli [7 6 6]) -> [7 7 6 6 6 6]", "(dupli [4 1 5 3 4]) -> [4 4 1 1 5 5 3 3 4 4]", "(dupli [1 4 4]) -> [1 1 4 4 4 4]", "(dupli [7 4 4 6]) -> [7 7 4 4 4 4 6 6]", "(dupli [0 5 2]) -> [0 0 5 5 2 2]", "(dupli [5]) -> [5 5]", "(dupli [7 5 7 8]) -> [7 7 5 5 7 7 8 8]", "(dupli [9 1 2]) -> [9 9 1 1 2 2]", "(dupli [8 6]) -> [8 8 6 6]", "(dupli []) -> []"], "time": 0.121751, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 1 8]) -> [2 2 1 1 8 8]", "(dupli [8 5]) -> [8 8 5 5]", "(dupli []) -> []", "(dupli [0 3 2 6]) -> [0 0 3 3 2 2 6 6]", "(dupli [9 1]) -> [9 9 1 1]", "(dupli [1 8 7 3]) -> [1 1 8 8 7 7 3 3]", "(dupli [6 8]) -> [6 6 8 8]", "(dupli []) -> []", "(dupli [6 7 0]) -> [6 6 7 7 0 0]", "(dupli [6]) -> [6 6]", "(dupli [6 8 9]) -> [6 6 8 8 9 9]"], "time": 0.123964, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5 9 7 2 4]) -> [5 5 9 9 7 7 2 2 4 4]", "(dupli []) -> []", "(dupli [3 5]) -> [3 3 5 5]", "(dupli [1 7 4]) -> [1 1 7 7 4 4]", "(dupli [1 7 8 9 9]) -> [1 1 7 7 8 8 9 9 9 9]", "(dupli [1 5]) -> [1 1 5 5]", "(dupli [4 2]) -> [4 4 2 2]", "(dupli [5 6 2 7 3]) -> [5 5 6 6 2 2 7 7 3 3]", "(dupli [2 0 3 5 5]) -> [2 2 0 0 3 3 5 5 5 5]", "(dupli [8 4]) -> [8 8 4 4]", "(dupli [5 6]) -> [5 5 6 6]"], "time": 0.115561, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
