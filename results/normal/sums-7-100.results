{"examples": ["(sums []) -> []", "(sums [[5 3]]) -> [8]", "(sums [[4 0 3] [] []]) -> [7 0 0]", "(sums [[0 9 1 9 0] [8] [5 8 2 1] [7 6 8]]) -> [19 8 16 21]", "(sums [[9 9] [5]]) -> [18 5]", "(sums [[1 1 4] [] [6 1 0 8 2] []]) -> [6 0 17 0]"], "time": 0.497762, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 1 8 1 9] [6 8] [6] [7]]) -> [28 14 6 7]", "(sums [[] [1 2 2 6]]) -> [0 11]", "(sums []) -> []", "(sums [[8 2]]) -> [10]", "(sums [[6 4 8 0 9] [7 4 0 4 9] [0 9 8 2] [4 8]]) -> [27 24 19 12]"], "time": 0.504256, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[]]) -> [0]", "(sums [[8 8] [8 7 9 2] [5 8] []]) -> [16 26 13 0]", "(sums [[1 8 3 9] [6 4]]) -> [21 10]", "(sums [[4 1] [4 3 3 0 6] []]) -> [5 16 0]"], "time": 0.469944, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[3] [9 0 3]]) -> [3 12]", "(sums [[2] [7 8 0 3] [5]]) -> [2 18 5]", "(sums [[9 2 8 0 7] [0]]) -> [26 0]", "(sums [[9 5 4 1 4] [] [] []]) -> [23 0 0 0]", "(sums [[3 6 5 1 4]]) -> [19]"], "time": 0.45197, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 6]]) -> [15]", "(sums [[4] [4 6 9] [9] [9 1]]) -> [4 19 9 10]", "(sums [[6] [9 0] [1 9 4 4 9] [3 1 0 5]]) -> [6 9 27 9]", "(sums [[7] []]) -> [7 0]", "(sums [[8] [4 4 6] [9 4 5 2]]) -> [8 14 20]"], "time": 0.415966, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2 3] []]) -> [5 0]", "(sums [[] [] [7]]) -> [0 0 7]", "(sums []) -> []", "(sums [[0 1]]) -> [1]", "(sums [[9 9 2 1] [3 5 2] [8 4 2 2 7] [0 4]]) -> [21 10 23 4]"], "time": 0.458021, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0 0 5 6 9]]) -> [20]", "(sums [[9] [8]]) -> [9 8]", "(sums []) -> []", "(sums [[9 0 8 3 3] [9 2 0 6] [6] []]) -> [23 17 6 0]", "(sums [[8 3 6 6]]) -> [23]"], "time": 0.523971, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[3 4 2 2 9] [] [3 3 3 9 9] [1 8 1] [1 8]]) -> [20 0 27 10 9]", "(sums []) -> []", "(sums [[] [9 3 5] [8 1 9 7 5] [8]]) -> [0 17 30 8]", "(sums [[9 8 8 4 8] [] [8 1 4 5] [5 6]]) -> [37 0 18 11]", "(sums [[7]]) -> [7]"], "time": 0.531311, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[7 1 0 6] [1 9 3 1] [9 0 5]]) -> [14 14 14]", "(sums []) -> []", "(sums [[4 2 1 4] [0 6 7]]) -> [11 13]", "(sums [[0 3 7 0 9] []]) -> [19 0]"], "time": 0.561807, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 4 3 3] [7] [0 2 3]]) -> [16 7 5]", "(sums [[] [4 3]]) -> [0 7]", "(sums [[6] [9 7 1] [9 2] [] [4 8 1 7]]) -> [6 17 11 0 20]", "(sums [[] [8 5 1 4 4] [] [9 7 3 0] [2 9 9 7 8]]) -> [0 22 0 19 35]", "(sums [[9 3 9 7] [1 4] [0 6 7 9] []]) -> [28 5 22 0]"], "time": 0.519593, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1] [3 2 4 5] [2 9]]) -> [1 14 11]", "(sums []) -> []", "(sums [[] [4 8 7] [9 4]]) -> [0 19 13]", "(sums [[4 5 4 0] [0 7 5 2 6]]) -> [13 20]", "(sums [[4 4 2 6 3]]) -> [19]"], "time": 0.471723, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0 8 9]]) -> [17]", "(sums [[] [4 7] [1]]) -> [0 11 1]", "(sums [[8 5 2] [0 7 7 8] [8 1 6 2] [6 5 0 6] [8 5 5 7]]) -> [15 22 17 17 25]", "(sums [[0 2 3]]) -> [5]", "(sums [[1 8 2 2] [3]]) -> [13 3]"], "time": 0.526061, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0 9 7 3 0] [] [5 1 9 2 9]]) -> [19 0 26]", "(sums [[2 9 5 7] [] [4 6] [7 0 0 8 1] [4 0 8 9 7]]) -> [23 0 10 16 28]", "(sums [[2] [0] [3 8 5 2] [5 9 7] [7 1 9]]) -> [2 0 18 21 17]", "(sums []) -> []", "(sums []) -> []"], "time": 0.535558, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0]]) -> [0]", "(sums [[3 4 9]]) -> [16]", "(sums []) -> []", "(sums [[6 9 0 3 0]]) -> [18]", "(sums []) -> []"], "time": 0.841272, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2 9 3 1] [8 5]]) -> [15 13]", "(sums []) -> []", "(sums [[0]]) -> [0]", "(sums [[6 9 6 1] [6 9] [3 1 0 5]]) -> [22 15 9]", "(sums [[2 0] [3 4 7 0]]) -> [2 14]"], "time": 0.903044, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums []) -> []", "(sums [[9 3 6 1 6] [7 6 4]]) -> [25 17]", "(sums [[7 8]]) -> [15]", "(sums []) -> []"], "time": 0.913638, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9] [6 6 9 4]]) -> [9 25]", "(sums [[0 5 5 1] [3 0 9]]) -> [11 12]", "(sums [[2 3]]) -> [5]", "(sums [[8 9] [8 6 8 2]]) -> [17 24]", "(sums [[7] [9 4 9] [6] [] [4]]) -> [7 22 6 0 4]"], "time": 0.393098, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[3 1 8 2 8] [9 6 0 8 7] []]) -> [22 30 0]", "(sums [[]]) -> [0]", "(sums [[4 7 3 9] [4 9 1] [3 7 6 7] [2 9 1] [3 8 1 2 8]]) -> [23 14 23 12 22]", "(sums [[4 5 8 3 0] [] [9 9 7 1 6]]) -> [20 0 32]", "(sums [[9] [5] [2 1 1 5]]) -> [9 5 9]"], "time": 0.427226, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[5] [8]]) -> [5 8]", "(sums [[2] [1 6 3] [5]]) -> [2 10 5]", "(sums [[3 8 4 6] [2 1 9] [8 3 8 6] [] [1 8 1 5 1]]) -> [21 12 25 0 16]", "(sums [[4] [9] [5 1 8 7] [0 7 3]]) -> [4 9 21 10]", "(sums [[1 7 3] []]) -> [11 0]"], "time": 0.418108, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2 4 3 6 7] [5]]) -> [22 5]", "(sums [[] [6 7] [5 1] []]) -> [0 13 6 0]", "(sums [[0 1 9 3 4] [] [7 4] [3 9 4]]) -> [17 0 11 16]", "(sums [[]]) -> [0]", "(sums [[3 2 1 8 0] [8] []]) -> [14 8 0]"], "time": 0.380212, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [7 6 4 7 2]]) -> [0 26]", "(sums [[6 1 8] [1 2] []]) -> [15 3 0]", "(sums [[8 6 6 3 5] [] [8 7 4 7]]) -> [28 0 26]", "(sums []) -> []", "(sums [[6] [2 2] [9 6 6]]) -> [6 4 21]"], "time": 0.514385, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [3] [4 3 6 2 9] [3 5 9 3 9] [2 7]]) -> [0 3 24 29 9]", "(sums [[1 1 8 0] [8 9 2 6 8] [4 4]]) -> [10 33 8]", "(sums [[8 4 2 8 5] [] [3 7 6]]) -> [27 0 16]", "(sums [[]]) -> [0]", "(sums [[0] [3 2 9 0 3] [7 6]]) -> [0 17 13]"], "time": 0.483969, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 8 8 4] [7 6 8 2 2]]) -> [26 25]", "(sums [[6 1 5 7 9]]) -> [28]", "(sums [[1 1] [9] [4 7] [] [5 3 7 3 5]]) -> [2 9 11 0 23]", "(sums [[]]) -> [0]", "(sums [[] [9] [3 8 7 2 6] [3 8 6]]) -> [0 9 26 17]"], "time": 0.530795, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9] [0 3 3] [6]]) -> [9 6 6]", "(sums [[0] [4 1 0 1 1] [8]]) -> [0 7 8]", "(sums [[0 4 0 8] [] [1 0 4] [3]]) -> [12 0 5 3]", "(sums [[9 5]]) -> [14]", "(sums [[1 0 2 7] [2] [7 2]]) -> [10 2 9]"], "time": 0.511762, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[3 0 6 8 8]]) -> [25]", "(sums [[9 9 2 2 3] [6 1]]) -> [25 7]", "(sums [[] [] [9 5 2 5] [9 9 1]]) -> [0 0 21 19]", "(sums [[3 7]]) -> [10]", "(sums [[3 7 0] [5] [7 8] [0 9]]) -> [10 5 15 9]"], "time": 0.480559, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 9 4]]) -> [22]", "(sums [[]]) -> [0]", "(sums [[6 7 6 3] [5 7 4 6] [2]]) -> [22 22 2]", "(sums [[2 2 9 7] [8 6 8 2] [2 6 2 3] [1 5] [6 4 0 5 1]]) -> [20 24 13 6 16]", "(sums [[8 5 8] [8]]) -> [21 8]"], "time": 0.421638, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[3] [6 1 2 8] [3]]) -> [3 17 3]", "(sums [[9]]) -> [9]", "(sums []) -> []", "(sums [[2 9 2 9 0] [5 5 5]]) -> [22 15]", "(sums [[0 8 1 4 8]]) -> [21]"], "time": 0.82949, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0 2 0] [4 8] [0 9 2] [5 9 0]]) -> [2 12 11 14]", "(sums [[1 1 6 3]]) -> [11]", "(sums [[4 8 6 4 0] [] [5 1]]) -> [22 0 6]", "(sums [[0 5]]) -> [5]", "(sums [[9 0 7] [] [5 3 8] []]) -> [16 0 16 0]"], "time": 0.460655, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1 8] [9] [1 3]]) -> [9 9 4]", "(sums [[] [5 9 2 8]]) -> [0 24]", "(sums [[1]]) -> [1]", "(sums [[0 1 0 6 4] [6 2] [4 0 6] [4 5 4 8 2] [2 7 7]]) -> [11 8 10 23 16]", "(sums [[] [2 3 5 2 9]]) -> [0 21]"], "time": 0.445013, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 1 1] [4 6 5] [7 0 2 6] [2 1 3]]) -> [9 15 15 6]", "(sums [[2 2] [3 9 4 3 2] [4 9] [1 0 8 1 1]]) -> [4 21 13 11]", "(sums [[9 8 7 3 3]]) -> [30]", "(sums [[5 7 2] [7 6 3 1] [5 8 1 8] [2 9] [4 3]]) -> [14 17 22 11 7]", "(sums [[7] [6 8 1 8 2] [0 6 3] [7 4 0]]) -> [7 25 9 11]"], "time": 0.876947, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 2] [9] [5 7 2] [6 9]]) -> [10 9 14 15]", "(sums [[8 0 5 3]]) -> [16]", "(sums [[8 5]]) -> [13]", "(sums [[6 9]]) -> [15]", "(sums [[2 2 1 9]]) -> [14]"], "time": 0.982022, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 8 2] [6 3 1]]) -> [14 10]", "(sums [[4 0 5] [8 4 7]]) -> [9 19]", "(sums [[3 3 1 8] [1 2] [1 0 8 5 8] [6]]) -> [15 3 22 6]", "(sums [[9 6]]) -> [15]", "(sums [[9 8 5 1 8]]) -> [31]"], "time": 1.020876, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[] [1 5 8 6 0] [8 3] [1 8 0 9] [4]]) -> [0 20 11 18 4]", "(sums [[4 7 6 7 1] [3 5]]) -> [25 8]", "(sums [[6 1]]) -> [7]", "(sums [[5 3 5]]) -> [13]"], "time": 0.478126, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[3 1] [] [1 9] [9 5] [7 3 7 5 8]]) -> [4 0 10 14 30]", "(sums []) -> []", "(sums []) -> []", "(sums []) -> []", "(sums [[2 4 0 2 6] [4 3]]) -> [14 7]"], "time": 0.467933, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8] [] [3 5 5]]) -> [8 0 13]", "(sums []) -> []", "(sums []) -> []", "(sums [[0 1 4 5 5] [3] [3 6 8] [1 2 2] [7 5 8 8]]) -> [15 3 17 5 28]", "(sums [[] [5 8 9]]) -> [0 22]"], "time": 0.521011, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[5 3] [8 1 8 9 7] [7 2 3 0] [9 3 5]]) -> [8 33 12 17]", "(sums [[7 5]]) -> [12]", "(sums [[4 4 3 3] [4 9] []]) -> [14 13 0]", "(sums [[5 4 5 4 4] [3 2 5 0] [] [6 7] [9 2 9 8 4]]) -> [22 10 0 13 32]"], "time": 0.549101, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 0 4] [5] [8 9] [1 2 8 0] [3 0 7 3 6]]) -> [11 5 17 11 19]", "(sums [[3 6 3] [3] [5 2]]) -> [12 3 7]", "(sums [[] [9 5] [3 1 3 1]]) -> [0 14 8]", "(sums [[9 2 1 3 8]]) -> [23]", "(sums [[8] [5 3 4]]) -> [8 12]"], "time": 0.550609, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1 5 1 4] [7 7 6 4 7] [8 4 8 3 1] [6 3]]) -> [11 31 24 9]", "(sums [[2] [6 5 0 1 1] [] [4 8 7 1]]) -> [2 13 0 20]", "(sums [[7] [2 2 9]]) -> [7 13]", "(sums [[4 0 4] [6] [2 4] []]) -> [8 6 6 0]", "(sums [[4 7] [1 5 4] [0 5 0 7 8]]) -> [11 10 20]"], "time": 0.589883, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 7 3 3 8]]) -> [30]", "(sums [[9 1 3 6 5] [1] [6 2 8] [5 9 0 7 9]]) -> [24 1 16 30]", "(sums []) -> []", "(sums [[9 5] [7 9 4 5] [6 5 4] [1 6 6]]) -> [14 25 15 13]", "(sums [[4 1 1] [4 4 8] [1 4]]) -> [6 16 5]"], "time": 0.743899, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 4 5 6 9] [] [8 0] [9 3 1]]) -> [32 0 8 13]", "(sums [[0] [2]]) -> [0 2]", "(sums []) -> []", "(sums []) -> []", "(sums [[] [3 7 9]]) -> [0 19]"], "time": 0.573708, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4] [4] [6]]) -> [4 4 6]", "(sums [[1 0 0 1 9] [4] [3]]) -> [11 4 3]", "(sums [[7 1 1] [] [9] [6 9]]) -> [9 0 9 15]", "(sums []) -> []", "(sums [[4]]) -> [4]"], "time": 0.369746, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [9] [0 6 0 8 4]]) -> [0 9 18]", "(sums [[] [5 7] [5 4] [1] [7 5 6 7]]) -> [0 12 9 1 25]", "(sums []) -> []", "(sums [[8 1 0 9]]) -> [18]", "(sums []) -> []"], "time": 0.345627, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0] [2 8] [0 6 9 9]]) -> [0 10 24]", "(sums []) -> []", "(sums [[6 4 0] [9 2 2 7 2] []]) -> [10 22 0]", "(sums [[0] [9 9 3 9 6]]) -> [0 36]", "(sums [[2] [3 3 6 4] [1 7 5 9 7] [] []]) -> [2 16 29 0 0]"], "time": 0.333385, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[]]) -> [0]", "(sums [[] [9 8 2 4 3] [3 1 0] [8 6 3 0] [9]]) -> [0 26 4 17 9]", "(sums [[0] [6 3 0 8] [4 1 5 3] []]) -> [0 17 13 0]", "(sums [[7 8 4 8]]) -> [27]"], "time": 0.344319, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[3 1]]) -> [4]", "(sums [[2 6 8] [] [7 1 9] [7 0 7 0]]) -> [16 0 17 14]", "(sums []) -> []", "(sums [[3 2 5 7 6]]) -> [23]", "(sums [[]]) -> [0]"], "time": 0.334378, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 3 8 2 7] [4 9 8] [4]]) -> [28 21 4]", "(sums [[5] [5 9 2 3] [1] [0 3 8 6]]) -> [5 19 1 17]", "(sums [[0] [4 6 4] [] [4 6]]) -> [0 14 0 10]", "(sums []) -> []", "(sums []) -> []"], "time": 0.579994, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[5 8 0]]) -> [13]", "(sums []) -> []", "(sums [[5] [1]]) -> [5 1]", "(sums [[1] [1 1 8 7] [5 8 8]]) -> [1 17 21]", "(sums []) -> []"], "time": 0.997951, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[7 2 6 2 2] [4] [1 3 4 3] [4] []]) -> [19 4 11 4 0]", "(sums [[6 6 4 4 8] [0 2 2] [8 3 4 6 5]]) -> [28 4 26]", "(sums [[6 7 2] [] [0]]) -> [15 0 0]", "(sums [[4 2] [7 9 1 0 4] [5 5 8 4]]) -> [6 21 22]"], "time": 0.560273, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 5 7 9] [0 3] [2 8 5 2] [0 4 2 8 5]]) -> [28 3 17 19]", "(sums [[4 6 0 1] [8 7 5 0] [9]]) -> [11 20 9]", "(sums [[9 2 3] [3 5] [7 8 8 7 9] [5 5]]) -> [14 8 39 10]", "(sums [[] [6 7 4 3 3] [4 8] [6 0 2]]) -> [0 23 12 8]", "(sums [[] [] [2] [8 2 6] []]) -> [0 0 2 16 0]"], "time": 0.579276, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[0 3 1 4 4] [] [1 2 9]]) -> [12 0 12]", "(sums [[6 1 3 1 2] [9 2] [6 8] [9]]) -> [13 11 14 9]", "(sums [[0 9 0 0] []]) -> [9 0]", "(sums [[2] [6 6 7] [8] [4 6 7 3]]) -> [2 19 8 20]"], "time": 0.358219, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[4 3 0]]) -> [7]", "(sums [[] [9 4 2]]) -> [0 15]", "(sums [[7 4 8] [9 7 9 5] [3 8 5 7 4]]) -> [19 30 27]", "(sums [[4] [7]]) -> [4 7]"], "time": 0.449398, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1 0 3 6] [5 2 7 7] [9 2] [1]]) -> [10 21 11 1]", "(sums [[] [6 5 2 3 4] [1 1] []]) -> [0 20 2 0]", "(sums [[8 0 0]]) -> [8]", "(sums [[3 9] [7] [7 1] [] []]) -> [12 7 8 0 0]", "(sums [[2 6] [6 2 2 7 8] [0 8 0 8] [2 9]]) -> [8 25 16 11]"], "time": 0.499972, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[5 0 1 7 3]]) -> [16]", "(sums [[9 6] [6 4 3 1 8]]) -> [15 22]", "(sums [[0 1 6] [7 5 6] [7 2 4 4] [7 7] [9 5 4 8 4]]) -> [7 18 17 14 30]", "(sums [[2 1] [9 8 5 1] [8 8 7 2] [0 7] [4 8 5 1 1]]) -> [3 23 25 7 19]", "(sums [[6 4] [] [7 3 9 0]]) -> [10 0 19]"], "time": 0.444155, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [1 7 7 8] [7 1] [5]]) -> [0 23 8 5]", "(sums [[6 6] [1 6 1 6 9] [9] [9 9 1 2 1]]) -> [12 23 9 22]", "(sums [[3 7 9 8] [1 2] [2 6 0 8]]) -> [27 3 16]", "(sums [[4 2 3 2 0]]) -> [11]", "(sums [[1 8 0 0] [5] [9 8 7 3 2]]) -> [9 5 29]"], "time": 0.335891, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 2 3] [4 1 6 0 9] [9 2 7 8] [8 9]]) -> [11 20 26 17]", "(sums [[] [4 6] [2 0 1]]) -> [0 10 3]", "(sums []) -> []", "(sums [[1] [6 6 8]]) -> [1 20]", "(sums [[5 7 2 3 1] [7 4] [8 1]]) -> [18 11 9]"], "time": 0.388091, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[7 9 4] [2 0 5 0 8] [7 7 0] [2 0] [0 4 8]]) -> [20 15 14 2 12]", "(sums [[5 1 5 2 2]]) -> [15]", "(sums [[2 1 5] [7] [0 1 6 6 2] [3 5] [0 8 8 2 9]]) -> [8 7 15 8 27]", "(sums []) -> []", "(sums [[5] [4] [3 6]]) -> [5 4 9]"], "time": 0.766073, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[5 5]]) -> [10]", "(sums []) -> []", "(sums [[1 0 8] [7 5] [] [6 8 1] [3 1 0]]) -> [9 12 0 15 4]", "(sums [[] [6] [1 8 7 9]]) -> [0 6 25]", "(sums [[] [9 3] [7 5 9 6] [] [5]]) -> [0 12 27 0 5]"], "time": 0.345205, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 5 5] [] [9 9 6 1 4]]) -> [16 0 29]", "(sums [[5 6 1 6] []]) -> [18 0]", "(sums [[6 4 4 4] [1 9 2 0] [7 8 8 5]]) -> [18 12 28]", "(sums [[] []]) -> [0 0]", "(sums [[2 3] [7]]) -> [5 7]"], "time": 0.379864, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[3 5 8 8 9] [7 4]]) -> [33 11]", "(sums [[1 9 1 8 9] [5 7] [5 5 0 4 7] [7 0 5 3] [5 3 6 3 0]]) -> [28 12 21 15 17]", "(sums [[9 1 8 7 4]]) -> [29]", "(sums [[3 9] []]) -> [12 0]", "(sums [[6] []]) -> [6 0]"], "time": 0.324236, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [4 0 8] [2 8] [4 5]]) -> [0 12 10 9]", "(sums [[9 6 9 3 8] [7 5] [5 6] [1] [4 6 4 6]]) -> [35 12 11 1 20]", "(sums [[8] [8 1 0 8]]) -> [8 17]", "(sums [[] [3 8]]) -> [0 11]", "(sums [[7] [6 0 8 5] [8 8 8 9 7] [5 4]]) -> [7 19 40 9]"], "time": 0.493471, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4] [9 8] [8 1 8 1 3]]) -> [4 17 21]", "(sums [[3 1 4] [7 5] [7 3] [6 4 7 8 7]]) -> [8 12 10 32]", "(sums [[9 1 3 9] [1 1 4] [6 9] [9 1 5] [3]]) -> [22 6 15 15 3]", "(sums [[9 3 7 6 8] [2 6 7 5 1] [0] [1 9]]) -> [33 21 0 10]", "(sums [[7 5 6 6 0] [2 0 1]]) -> [24 3]"], "time": 1.022123, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 3 2 1] [6 3 1 7 8] []]) -> [10 25 0]", "(sums [[5] [8 3 3] [6 5 7 8] [1 5 5 8 4] [7 7]]) -> [5 14 26 23 14]", "(sums [[3] [6 8 4 9 6] [4 5 0 8 4] [2 0 5 7]]) -> [3 33 21 14]", "(sums [[5 8 5 9 6] [6 9 7 0 9]]) -> [33 31]", "(sums [[6 9 3 5 1] [4] []]) -> [24 4 0]"], "time": 0.480484, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums []) -> []", "(sums [[6 7 1] [8 5 5 8 8] [0 1] [8 1 4 0 6]]) -> [14 34 1 19]", "(sums [[0 5] [5 1 7 3 5]]) -> [5 21]", "(sums [[2 4 5 2 3] [2 8 1 3] [8 7 1] [8 0]]) -> [16 14 16 8]"], "time": 1.043384, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[5 7 1 3] [] [1 4]]) -> [16 0 5]", "(sums [[] [1 6 7 2 0] [1 8 4 9 4] [1 1 3 1]]) -> [0 16 26 6]", "(sums [[9 7 8 4] [] [0 5 6 3 9] [6] [7]]) -> [28 0 23 6 7]", "(sums []) -> []", "(sums [[8 6 0 7 3] [0]]) -> [24 0]"], "time": 0.382139, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 1 0 7 5] [1 9 6 7 4] [7 3] [9] [5 5 0 9 0]]) -> [22 27 10 9 19]", "(sums [[5]]) -> [5]", "(sums [[] [6 3] [7 6]]) -> [0 9 13]", "(sums [[5 7] [1]]) -> [12 1]", "(sums [[8 0 4] [3 7 1 0] [3 2 9 5] [3]]) -> [12 11 19 3]"], "time": 0.360981, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0 7 5 1] [3 5 2] []]) -> [13 10 0]", "(sums [[4 1 5 2] [9 5 5 7] [7] [9 7 7 6 4]]) -> [12 26 7 33]", "(sums [[5 2 6 1] [2 0]]) -> [14 2]", "(sums [[9 5] [2] [0 8] [2] []]) -> [14 2 8 2 0]", "(sums [[2 9]]) -> [11]"], "time": 0.333154, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[3 2 0 7] [0 1 9]]) -> [12 10]", "(sums [[0] [9 4 9 7] [] [8] [2 2 9 5 2]]) -> [0 29 0 8 20]", "(sums [[5 4 6 7]]) -> [22]", "(sums [[7 0 1 4] [8 3 4]]) -> [12 15]", "(sums [[4 3 6 0] [5] [8 1] [6] [1]]) -> [13 5 9 6 1]"], "time": 0.448198, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 7 7]]) -> [22]", "(sums [[6] [3 0 2 0] [4 9 8 1]]) -> [6 5 22]", "(sums [[9 3 5 9] [2 5 7 4] [0 1 0] [8]]) -> [26 18 1 8]", "(sums [[0 1 7] [6] [3] [3 2 4 9]]) -> [8 6 3 18]", "(sums [[4] [2 6 6 7 3]]) -> [4 24]"], "time": 0.689806, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 7 2 4] [8 0 9 0 5] [] [0 3]]) -> [21 22 0 3]", "(sums [[7 9 0] [3 9 7 8 9] [1 1 5 5] [4 1 9 8 0]]) -> [16 36 12 22]", "(sums [[5 3] [2 0 5 6]]) -> [8 13]", "(sums [[7 5] [9 4 9 0 4]]) -> [12 26]", "(sums [[6 2 9 5] [7 7 5 9 9] [] [2 0 9] [1 0 1]]) -> [22 37 0 11 2]"], "time": 0.511529, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0 4]]) -> [4]", "(sums [[1 5 9]]) -> [15]", "(sums [[6 6 8 7 6] [7 4 9 4]]) -> [33 24]", "(sums [[7] [3 4 6] [0] [1] []]) -> [7 13 0 1 0]", "(sums [[0] [3 5 3 2 3] [4 5 3 0 4] []]) -> [0 16 16 0]"], "time": 0.347864, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[3 6 6] [1 5 7] [8 8 9]]) -> [15 13 25]", "(sums [[2 0 4] [6 5] []]) -> [6 11 0]", "(sums [[0 4 3 9 4] [6 5]]) -> [20 11]", "(sums []) -> []"], "time": 0.59091, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums []) -> []", "(sums [[8] [1] [0 1] []]) -> [8 1 1 0]", "(sums [[1 2 2 5] []]) -> [10 0]", "(sums []) -> []"], "time": 0.410227, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1 5] [2] [9 1 9 3] [3 6 8 2] [2]]) -> [6 2 22 19 2]", "(sums [[8] [1] [1 3 3] [8 2]]) -> [8 1 7 10]", "(sums [[] [2 9 4 1] [2 9 5] [5 9 0 2]]) -> [0 16 16 16]", "(sums [[]]) -> [0]", "(sums [[8] [5] [] [7 3 5]]) -> [8 5 0 15]"], "time": 0.518674, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[3 4 8]]) -> [15]", "(sums []) -> []", "(sums [[] [5 7 2 2 4]]) -> [0 20]", "(sums [[3 6 5] [4 9 8 8 2]]) -> [14 31]", "(sums [[2 4 7] [] [7 6 8]]) -> [13 0 21]"], "time": 0.437173, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[5 7 9 1] [9 5 9] []]) -> [22 23 0]", "(sums [[3 7 4 4] [] [8 7 9 2 1] [7 1 0 1 3]]) -> [18 0 27 12]", "(sums [[0 5 0] [7 2 0] [0 4 7 8] [2 3 6 9 5]]) -> [5 9 19 25]", "(sums []) -> []", "(sums [[5 6 6 0 8] [5 6 1 4] [9 1 6 8 9] [5 1 5]]) -> [25 16 33 11]"], "time": 0.423098, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[6 5 0 3 3] [9 6] [7 2 6 4] [9 1 9 4]]) -> [17 15 19 23]", "(sums []) -> []", "(sums [[6 9 9 0 0] [8 6] [5 6 0 9 2]]) -> [24 14 22]", "(sums [[4 3] [2]]) -> [7 2]", "(sums [[1 4 6 6 9] [3]]) -> [26 3]"], "time": 1.0761, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[5 2] [8] [5 3 2 1]]) -> [7 8 11]", "(sums [[9 1 1 7 1] [] [] [6] [5]]) -> [19 0 0 6 5]", "(sums [[4 6 1 9 3] [1 0 8] [9 5 1 0 7] [0 0]]) -> [23 9 22 0]", "(sums [[3 3 6 1 2] [] [0 6] [9 5 5 1 7]]) -> [15 0 6 27]", "(sums [[5 1 1 6 7] [5 2 3 4]]) -> [20 14]"], "time": 0.537613, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1 9 9] [4 2 4 0] [1] [7] [0]]) -> [19 10 1 7 0]", "(sums [[9 3 5 9 1]]) -> [27]", "(sums [[6 5 3] [4 8 2]]) -> [14 14]", "(sums [[7] [5] [0] [5 3] [7]]) -> [7 5 0 8 7]", "(sums []) -> []"], "time": 0.790141, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[]]) -> [0]", "(sums [[0 3 5] [0 7 5] [9 7 2 5 8] [5 2 9 6 2]]) -> [8 12 31 24]", "(sums [[2] [0] [4 9 5 0 6]]) -> [2 0 24]", "(sums [[9 9] []]) -> [18 0]", "(sums [[6 9 6 7 3] [1 9 7] [3 8] [8] [5 2 3 9 5]]) -> [31 17 11 8 24]"], "time": 0.394002, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 1 6]]) -> [11]", "(sums [[6 9 4] [4 7 6] [0 5 5] [6 9 5 9] [2 0 9 7 7]]) -> [19 17 10 29 25]", "(sums []) -> []", "(sums []) -> []", "(sums [[7] [7 0] []]) -> [7 7 0]"], "time": 0.367704, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[6 3]]) -> [9]", "(sums [[9 6] [0 4 5] [9] [7 0]]) -> [15 9 9 7]", "(sums [[4]]) -> [4]", "(sums [[4 0 5] [5 1 4 7 1] [1 2] [1 6 8 7 1] [7]]) -> [9 18 3 23 7]"], "time": 0.941102, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 9 5] [7 0 4 7 3]]) -> [22 21]", "(sums [[7 3 3] [1] [0 7]]) -> [13 1 7]", "(sums [[9 1 1 0]]) -> [11]", "(sums [[9 1] [2 4 9 5] [2 0 3 0] [] [5]]) -> [10 20 5 0 5]", "(sums [[] []]) -> [0 0]"], "time": 0.411608, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[] [1 7]]) -> [0 8]", "(sums [[] [2 2 9] [8 8]]) -> [0 13 16]", "(sums [[] [1 3 0] [6 6 0 2 4] []]) -> [0 4 18 0]", "(sums [[2] [1] [] []]) -> [2 1 0 0]", "(sums []) -> []"], "time": 0.452163, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[5 0 8 4 2] [3 1 3 6 9] [2 9 0] [0 9 4 4 7] [7 5 3 2 5]]) -> [19 22 11 24 22]", "(sums [[3 0 2 6] [] [7 8] [0 9 6 6 7]]) -> [11 0 15 28]", "(sums []) -> []", "(sums [[3 8 6 8] [9] [4 5] []]) -> [25 9 9 0]", "(sums [[9 3 7] [0 8] [5 7] [7 3] [3 8 8 0 9]]) -> [19 8 12 10 28]"], "time": 0.514705, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[5 8 3 3] [9]]) -> [19 9]", "(sums [[8 6 7 4 6] [5 8] [3 9 0 5 9] [3 7]]) -> [31 13 26 10]", "(sums [[3 2] [0 3 4 2]]) -> [5 9]", "(sums [[6 1 4 9 4] [6 4 7 9 6]]) -> [24 32]", "(sums [[4 3 3 0 7]]) -> [17]"], "time": 0.826578, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4]]) -> [4]", "(sums [[] [2] [8 7 1] [8 0]]) -> [0 2 16 8]", "(sums [[4 9 8 7]]) -> [28]", "(sums [[0 7 9] [7 8] [6 7 8]]) -> [16 15 21]", "(sums [[8] [8 9] [9 6 6 2] [4 8 4 2]]) -> [8 17 23 18]"], "time": 0.436964, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2 7] [6 4 8] [7 6 8]]) -> [9 18 21]", "(sums [[6 3 3 5] []]) -> [17 0]", "(sums [[0 3 0 5] [8 1] [9 6 1 4 7]]) -> [8 9 27]", "(sums []) -> []", "(sums [[1] [] [5 1 5] []]) -> [1 0 11 0]"], "time": 0.414658, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 4 0] [4 8 7] [9]]) -> [8 19 9]", "(sums [[7 7]]) -> [14]", "(sums [[7 8] [0 5] [2 0 7] [8 0 9 2]]) -> [15 5 9 19]", "(sums [[] [6 8 7 7] [6 6 1 4 2] [4 7] []]) -> [0 28 19 11 0]", "(sums [[9 5]]) -> [14]"], "time": 0.405044, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 2] [3 4 0 5 2] [2 5 4 4 6] [3 1]]) -> [6 14 21 4]", "(sums [[1 7] [5 2 3] [1 7 6] [3 6 2 9 6]]) -> [8 10 14 26]", "(sums [[1] [0 4 8 5 5] [6 1] [8 0] []]) -> [1 22 7 8 0]", "(sums [[9 6 1 4] []]) -> [20 0]", "(sums [[5 8 2 7] [] [8]]) -> [22 0 8]"], "time": 0.491947, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0 0 8 9] [3]]) -> [17 3]", "(sums [[1 7 2 6 5]]) -> [21]", "(sums [[6 0 9 0] [3 1 2 3] [] []]) -> [15 9 0 0]", "(sums [[2 5 7 2 2] [0 0 2 9 7] []]) -> [18 18 0]", "(sums [[0 2 1 2 1]]) -> [6]"], "time": 0.470202, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1 6 4] [6 9 4] [7 7] [4] [2 5 7]]) -> [11 19 14 4 14]", "(sums [[6 8] [8 1 2 9 4] [0 7 6 0] [9 1 7] [1 4]]) -> [14 24 13 17 5]", "(sums [[] [8 0 7] [2]]) -> [0 15 2]", "(sums [[9] [5 5 4 5] [4 3 9 3 8]]) -> [9 19 27]", "(sums [[] [3]]) -> [0 3]"], "time": 0.462049, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 3 4 5 2] [9 6 0 6 0] []]) -> [18 21 0]", "(sums [[9 9 8 5 6] [5] [4 9 3] [8 0 5] [9 6]]) -> [37 5 16 13 15]", "(sums [[4 4 1] [5]]) -> [9 5]", "(sums []) -> []", "(sums [[8] [3 9]]) -> [8 12]"], "time": 0.489731, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[9 2 3 0 8]]) -> [22]", "(sums [[8 1 7 2] [2 3 6 8 2] [5] [] [9 0 3 4]]) -> [18 21 5 0 16]", "(sums [[4 8 7]]) -> [19]", "(sums []) -> []", "(sums [[6 4 1 6 5]]) -> [22]"], "time": 0.389623, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[2 5 2]]) -> [9]", "(sums [[8 6] [1 1 1]]) -> [14 3]", "(sums [[7 2 9 7] [5 7 2 3 3] [1 5]]) -> [25 20 6]", "(sums [[7 5 8 4 2] [7]]) -> [26 7]", "(sums [[5] [4 9] [3 4 2] [5 1 2 0] [3 2 2]]) -> [5 13 9 8 7]"], "time": 0.667717, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[8 6 9] [2 5 2 5] [7 9 8 0 1]]) -> [23 14 25]", "(sums [[6 5] [4 1 6] [8 5 6 1]]) -> [11 11 20]", "(sums [[5] [6]]) -> [5 6]", "(sums [[4 7 9 3 1] [7] [] [5 7 7]]) -> [24 7 0 19]", "(sums [[8 6 1 2] [0 2 8] [1 3]]) -> [17 10 4]"], "time": 0.317021, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums []) -> []", "(sums [[8 8] [7 9 3 7] [8 3 5 6] [1 2] [4 8 9]]) -> [16 26 22 3 21]", "(sums [[] [4 2 7 8 7]]) -> [0 28]", "(sums [[2] [2 1 9 7 7] []]) -> [2 26 0]", "(sums [[4 8]]) -> [12]"], "time": 0.333723, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[4 9 9] [4 7 2 0] [4 0]]) -> [22 13 4]", "(sums [[1] [4 0 0]]) -> [1 4]", "(sums []) -> []", "(sums []) -> []", "(sums [[0 2 8]]) -> [10]"], "time": 0.824663, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1 1 3 1 1] [5 9] [9 2 0 7 7] [7 8 3] [5]]) -> [7 14 25 18 5]", "(sums [[] [6 6 8 5 9]]) -> [0 34]", "(sums [[1 7 1 1 6] [5 5] [2 4 0]]) -> [16 10 6]", "(sums []) -> []", "(sums [[1] [0] []]) -> [1 0 0]"], "time": 0.291781, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[0 4] [6 9] [9 2 2 9 8] [4 4 2 3 3]]) -> [4 15 30 16]", "(sums [[0] []]) -> [0 0]", "(sums [[1 3 1]]) -> [5]", "(sums [[3 8 4 9 5]]) -> [29]", "(sums []) -> []"], "time": 0.36444, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
{"examples": ["(sums []) -> []", "(sums [[1 7 4 0] [2] [3 6 4] [2 6] [1 0]]) -> [12 2 13 8 1]", "(sums [[1 4 0] [4 5 7 5]]) -> [5 21]", "(sums [[4 5 7] [5 0]]) -> [16 5]", "(sums []) -> []", "(sums [[0 1 7 9] [8 5 5 8] [9 2 1]]) -> [17 26 12]"], "time": 0.607795, "name": "sums", "solution": "(let sums (let a (lambda (b) (map b (lambda (c) (foldl c (lambda (e d) (+ e d)) 0)))) _) _)"}
