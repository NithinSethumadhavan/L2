{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [1 4 1 2]) -> [1 1 1 1]", "(multfirst [5]) -> [5]", "(multfirst [9]) -> [9]", "(multfirst [5 5]) -> [5 5]", "(multfirst [6 4]) -> [6 6]", "(multfirst [8 8]) -> [8 8]", "(multfirst [2 5 1 3 9]) -> [2 2 2 2 2]", "(multfirst [7 4 4]) -> [7 7 7]", "(multfirst [8]) -> [8]", "(multfirst []) -> []"], "time": 0.025959, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1 0 5 4 2]) -> [1 1 1 1 1]", "(multfirst [7]) -> [7]", "(multfirst [0 9 1 0]) -> [0 0 0 0]", "(multfirst [5 7 6]) -> [5 5 5]", "(multfirst [7 0]) -> [7 7]", "(multfirst [5 7]) -> [5 5]", "(multfirst [5 4]) -> [5 5]", "(multfirst [4 7 8 2]) -> [4 4 4 4]", "(multfirst [6 5 8 8 6]) -> [6 6 6 6 6]", "(multfirst []) -> []", "(multfirst [0]) -> [0]"], "time": 0.02941, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4 6]) -> [4 4]", "(multfirst [4]) -> [4]", "(multfirst [1 2 7 6]) -> [1 1 1 1]", "(multfirst [5 5]) -> [5 5]", "(multfirst [7 6]) -> [7 7]", "(multfirst [5]) -> [5]", "(multfirst [6 2 7]) -> [6 6 6]", "(multfirst [1]) -> [1]", "(multfirst [4 7 8 1 8]) -> [4 4 4 4 4]", "(multfirst []) -> []", "(multfirst [6 9 8 0]) -> [6 6 6 6]"], "time": 0.026476, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [2 2 5]) -> [2 2 2]", "(multfirst [6 6]) -> [6 6]", "(multfirst [3 9 8 1]) -> [3 3 3 3]", "(multfirst [1 5 0 5 1]) -> [1 1 1 1 1]", "(multfirst [7]) -> [7]", "(multfirst [1 3 9 0 3]) -> [1 1 1 1 1]", "(multfirst [3 7 9 5]) -> [3 3 3 3]", "(multfirst []) -> []", "(multfirst [2 2]) -> [2 2]", "(multfirst [0 5 5 3 7]) -> [0 0 0 0 0]"], "time": 0.033592, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7]) -> [7]", "(multfirst [6 7]) -> [6 6]", "(multfirst [4]) -> [4]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [9 9 9 9]) -> [9 9 9 9]", "(multfirst [3 2 1 4 2]) -> [3 3 3 3 3]", "(multfirst [2 6 9 5]) -> [2 2 2 2]", "(multfirst [9 6 8]) -> [9 9 9]", "(multfirst []) -> []"], "time": 0.029396, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8 6 1 6]) -> [8 8 8 8]", "(multfirst [4 9 5 8 3]) -> [4 4 4 4 4]", "(multfirst [7 3]) -> [7 7]", "(multfirst [0 9 1 3]) -> [0 0 0 0]", "(multfirst [0]) -> [0]", "(multfirst []) -> []", "(multfirst [0 1]) -> [0 0]", "(multfirst [4 8]) -> [4 4]", "(multfirst [9 4 8]) -> [9 9 9]", "(multfirst [1]) -> [1]", "(multfirst [8 4 9]) -> [8 8 8]"], "time": 0.035544, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0]) -> [0]", "(multfirst [9 7]) -> [9 9]", "(multfirst [5 3]) -> [5 5]", "(multfirst [6 0 0]) -> [6 6 6]", "(multfirst [0 4]) -> [0 0]", "(multfirst [5 1 8]) -> [5 5 5]", "(multfirst [4 5 1]) -> [4 4 4]", "(multfirst [5]) -> [5]", "(multfirst [0 3]) -> [0 0]", "(multfirst []) -> []", "(multfirst []) -> []"], "time": 0.025906, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1 1 9 8]) -> [1 1 1 1]", "(multfirst []) -> []", "(multfirst [6 1]) -> [6 6]", "(multfirst [6 4 7 1]) -> [6 6 6 6]", "(multfirst [7]) -> [7]", "(multfirst [7 9]) -> [7 7]", "(multfirst [8 9 6 1 9]) -> [8 8 8 8 8]", "(multfirst [5 0 5]) -> [5 5 5]", "(multfirst [8]) -> [8]", "(multfirst [0 5]) -> [0 0]", "(multfirst [8 4 1 2]) -> [8 8 8 8]"], "time": 0.033498, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4 9]) -> [4 4]", "(multfirst [0]) -> [0]", "(multfirst []) -> []", "(multfirst [9 9 1]) -> [9 9 9]", "(multfirst [2 4 9]) -> [2 2 2]", "(multfirst [7]) -> [7]", "(multfirst [3 8 3 3 4]) -> [3 3 3 3 3]", "(multfirst [1 7 4 7 9]) -> [1 1 1 1 1]", "(multfirst [6 7 5 0]) -> [6 6 6 6]", "(multfirst [3 7 5]) -> [3 3 3]", "(multfirst [6 2]) -> [6 6]"], "time": 0.033057, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 3 5 6]) -> [9 9 9 9]", "(multfirst [1 4 6 4]) -> [1 1 1 1]", "(multfirst [5]) -> [5]", "(multfirst [6 3 7 1]) -> [6 6 6 6]", "(multfirst [8 2 9 9]) -> [8 8 8 8]", "(multfirst [1 7]) -> [1 1]", "(multfirst [2]) -> [2]", "(multfirst []) -> []", "(multfirst [7 5 3]) -> [7 7 7]", "(multfirst [2 6 8 7]) -> [2 2 2 2]", "(multfirst [4]) -> [4]"], "time": 0.038895, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [8 9 4]) -> [8 8 8]", "(multfirst [5 9]) -> [5 5]", "(multfirst [7 5 7]) -> [7 7 7]", "(multfirst [0 2 2]) -> [0 0 0]", "(multfirst [5 4 0 2 4]) -> [5 5 5 5 5]", "(multfirst [1 1 2 2]) -> [1 1 1 1]", "(multfirst [9 2]) -> [9 9]", "(multfirst [2 1 5]) -> [2 2 2]", "(multfirst [0 7 7 4]) -> [0 0 0 0]", "(multfirst [3 9 6]) -> [3 3 3]"], "time": 0.042485, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0 2 3 1]) -> [0 0 0 0]", "(multfirst [2 9]) -> [2 2]", "(multfirst []) -> []", "(multfirst [6 0]) -> [6 6]", "(multfirst [0 9 0 3 1]) -> [0 0 0 0 0]", "(multfirst []) -> []", "(multfirst [5 9]) -> [5 5]", "(multfirst [5 9 4]) -> [5 5 5]", "(multfirst [0 1 1]) -> [0 0 0]", "(multfirst [9 0 5 8]) -> [9 9 9 9]", "(multfirst [5 8 2]) -> [5 5 5]"], "time": 0.037662, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4 1 8 0]) -> [4 4 4 4]", "(multfirst [6 5]) -> [6 6]", "(multfirst [5 2 0 6 1]) -> [5 5 5 5 5]", "(multfirst [7 9]) -> [7 7]", "(multfirst [1 6 5]) -> [1 1 1]", "(multfirst [4 1 3]) -> [4 4 4]", "(multfirst [1 8 9 6 8]) -> [1 1 1 1 1]", "(multfirst [7 1 5]) -> [7 7 7]", "(multfirst [1 5 0 4]) -> [1 1 1 1]", "(multfirst [9 4 5 6 4]) -> [9 9 9 9 9]", "(multfirst [8 6 6 2 9]) -> [8 8 8 8 8]"], "time": 0.029334, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [7 3 6 3 1]) -> [7 7 7 7 7]", "(multfirst [1 8]) -> [1 1]", "(multfirst []) -> []", "(multfirst [8 2 0]) -> [8 8 8]", "(multfirst [6 4]) -> [6 6]", "(multfirst [0 0]) -> [0 0]", "(multfirst [1]) -> [1]", "(multfirst [2 9 6 2]) -> [2 2 2 2]", "(multfirst [5 0 6]) -> [5 5 5]", "(multfirst [2 6 4]) -> [2 2 2]", "(multfirst []) -> []"], "time": 0.023909, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5]) -> [5]", "(multfirst [7 1 0]) -> [7 7 7]", "(multfirst [3 7]) -> [3 3]", "(multfirst [7 4 2 8]) -> [7 7 7 7]", "(multfirst [8 5 7]) -> [8 8 8]", "(multfirst [9 2 0 7]) -> [9 9 9 9]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst [5 8]) -> [5 5]", "(multfirst [2 7 1 1 7]) -> [2 2 2 2 2]"], "time": 0.030451, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 9 9 2]) -> [3 3 3 3]", "(multfirst []) -> []", "(multfirst [3 9]) -> [3 3]", "(multfirst [5 3]) -> [5 5]", "(multfirst [8 7]) -> [8 8]", "(multfirst [8 4 9 7]) -> [8 8 8 8]", "(multfirst [9 0]) -> [9 9]", "(multfirst [2]) -> [2]", "(multfirst [2]) -> [2]", "(multfirst [0 8 1 3]) -> [0 0 0 0]", "(multfirst [1]) -> [1]"], "time": 0.041325, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [3 2 7 5 0]) -> [3 3 3 3 3]", "(multfirst [8 1 3 1 7]) -> [8 8 8 8 8]", "(multfirst []) -> []", "(multfirst [8 2 8 4 1]) -> [8 8 8 8 8]", "(multfirst []) -> []", "(multfirst [3 8]) -> [3 3]", "(multfirst [5 6 1 3]) -> [5 5 5 5]", "(multfirst [0]) -> [0]", "(multfirst [6 2 3 3]) -> [6 6 6 6]", "(multfirst [3 3 2]) -> [3 3 3]"], "time": 0.034164, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5 2]) -> [5 5]", "(multfirst [4 5 6 9 8]) -> [4 4 4 4 4]", "(multfirst [8 5]) -> [8 8]", "(multfirst [1 0]) -> [1 1]", "(multfirst [5]) -> [5]", "(multfirst [5 0 6]) -> [5 5 5]", "(multfirst [2 8 0 1 7]) -> [2 2 2 2 2]", "(multfirst [4 9 0]) -> [4 4 4]", "(multfirst [8 6 9 2 2]) -> [8 8 8 8 8]", "(multfirst [0 3]) -> [0 0]", "(multfirst [8 6 8 8 1]) -> [8 8 8 8 8]"], "time": 0.027617, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [8 5 6 1]) -> [8 8 8 8]", "(multfirst [9 9]) -> [9 9]", "(multfirst [7]) -> [7]", "(multfirst [9]) -> [9]", "(multfirst [3 4]) -> [3 3]", "(multfirst [2 6]) -> [2 2]", "(multfirst [6 9]) -> [6 6]", "(multfirst [3 9 8]) -> [3 3 3]", "(multfirst []) -> []", "(multfirst [5]) -> [5]"], "time": 0.031005, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4 7 4]) -> [4 4 4]", "(multfirst [1 5]) -> [1 1]", "(multfirst [1 5 5 6 2]) -> [1 1 1 1 1]", "(multfirst [8 5]) -> [8 8]", "(multfirst []) -> []", "(multfirst [1 0]) -> [1 1]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [1 8 4 6]) -> [1 1 1 1]", "(multfirst [3 6 3 9 5]) -> [3 3 3 3 3]", "(multfirst []) -> []"], "time": 0.035457, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4 0 9 1 9]) -> [4 4 4 4 4]", "(multfirst [9 8 2 3 8]) -> [9 9 9 9 9]", "(multfirst [5 9 4 6 6]) -> [5 5 5 5 5]", "(multfirst [2 2 8]) -> [2 2 2]", "(multfirst [9 1 9 1 9]) -> [9 9 9 9 9]", "(multfirst []) -> []", "(multfirst [3]) -> [3]", "(multfirst [9 8]) -> [9 9]", "(multfirst [7]) -> [7]", "(multfirst [2 4 3 6 9]) -> [2 2 2 2 2]", "(multfirst [0 0]) -> [0 0]"], "time": 0.030259, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 9 2 8]) -> [6 6 6 6]", "(multfirst []) -> []", "(multfirst [5 1 8 4]) -> [5 5 5 5]", "(multfirst [8 7 6]) -> [8 8 8]", "(multfirst [4 9 9]) -> [4 4 4]", "(multfirst [3 3 8 4]) -> [3 3 3 3]", "(multfirst [0 7 8]) -> [0 0 0]", "(multfirst [9 0 9]) -> [9 9 9]", "(multfirst [9 2 3]) -> [9 9 9]", "(multfirst []) -> []", "(multfirst [6]) -> [6]"], "time": 0.0318, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 2 0 4]) -> [6 6 6 6]", "(multfirst [0 4 3]) -> [0 0 0]", "(multfirst []) -> []", "(multfirst [9 0 0]) -> [9 9 9]", "(multfirst [1 7 1]) -> [1 1 1]", "(multfirst [9 5 7 9]) -> [9 9 9 9]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [3 9 4 6 9]) -> [3 3 3 3 3]", "(multfirst [1 6 8 5 0]) -> [1 1 1 1 1]", "(multfirst [4 0]) -> [4 4]"], "time": 0.024428, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 2 2 3 9]) -> [6 6 6 6 6]", "(multfirst [4]) -> [4]", "(multfirst [5 7 4 5]) -> [5 5 5 5]", "(multfirst []) -> []", "(multfirst [9 9 7 4]) -> [9 9 9 9]", "(multfirst [2 3 7 9]) -> [2 2 2 2]", "(multfirst [0 7]) -> [0 0]", "(multfirst [6 4 6 8 2]) -> [6 6 6 6 6]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [0 5 3]) -> [0 0 0]"], "time": 0.0245, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0]) -> [0]", "(multfirst []) -> []", "(multfirst [1 9 5 2]) -> [1 1 1 1]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [2 4 2 3]) -> [2 2 2 2]", "(multfirst [9 2 8 1 2]) -> [9 9 9 9 9]", "(multfirst [7 0 9 4]) -> [7 7 7 7]", "(multfirst [3 9 7]) -> [3 3 3]", "(multfirst [6]) -> [6]"], "time": 0.030541, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7 4 2 4 8]) -> [7 7 7 7 7]", "(multfirst [1 7 5 1 8]) -> [1 1 1 1 1]", "(multfirst [2 0 6]) -> [2 2 2]", "(multfirst [3 0]) -> [3 3]", "(multfirst [0]) -> [0]", "(multfirst []) -> []", "(multfirst [9 5 6 8 5]) -> [9 9 9 9 9]", "(multfirst [8 8 9 9]) -> [8 8 8 8]", "(multfirst [7 3 9 1 3]) -> [7 7 7 7 7]", "(multfirst [3 9 6 2]) -> [3 3 3 3]"], "time": 0.024429, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [7 8 7]) -> [7 7 7]", "(multfirst [7 9 7 8 5]) -> [7 7 7 7 7]", "(multfirst [7 6 7 5]) -> [7 7 7 7]", "(multfirst [4 0]) -> [4 4]", "(multfirst [9 3 8]) -> [9 9 9]", "(multfirst []) -> []", "(multfirst [6 4]) -> [6 6]", "(multfirst [4]) -> [4]", "(multfirst [1 5 8]) -> [1 1 1]", "(multfirst [5 0 9]) -> [5 5 5]", "(multfirst [4 5 7 3 3]) -> [4 4 4 4 4]"], "time": 0.025386, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0]) -> [0]", "(multfirst [4]) -> [4]", "(multfirst [8 1 2]) -> [8 8 8]", "(multfirst [7 8]) -> [7 7]", "(multfirst [5 2 0 3]) -> [5 5 5 5]", "(multfirst [6 8 8]) -> [6 6 6]", "(multfirst [1 2 2 4 1]) -> [1 1 1 1 1]", "(multfirst [7 3 7 6 0]) -> [7 7 7 7 7]", "(multfirst []) -> []", "(multfirst [3]) -> [3]", "(multfirst [6 8 2]) -> [6 6 6]"], "time": 0.034385, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [7 7 3 0]) -> [7 7 7 7]", "(multfirst [9 4 8 0 2]) -> [9 9 9 9 9]", "(multfirst [5 7 1 9 0]) -> [5 5 5 5 5]", "(multfirst [6 8 3]) -> [6 6 6]", "(multfirst [7 3]) -> [7 7]", "(multfirst [2 8 1 2 6]) -> [2 2 2 2 2]", "(multfirst [8 7]) -> [8 8]", "(multfirst [2 2 3]) -> [2 2 2]", "(multfirst [7]) -> [7]", "(multfirst []) -> []", "(multfirst [8]) -> [8]"], "time": 0.022873, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 8 5 1 8]) -> [3 3 3 3 3]", "(multfirst []) -> []", "(multfirst [3 3 7]) -> [3 3 3]", "(multfirst [0 6 0 6 2]) -> [0 0 0 0 0]", "(multfirst [2 1 8]) -> [2 2 2]", "(multfirst []) -> []", "(multfirst [2 0]) -> [2 2]", "(multfirst [1 1 2]) -> [1 1 1]", "(multfirst [5 2 1 6]) -> [5 5 5 5]", "(multfirst [2 8 4]) -> [2 2 2]", "(multfirst [5 5 1 6 2]) -> [5 5 5 5 5]"], "time": 0.024702, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3]) -> [3]", "(multfirst [1 7 7]) -> [1 1 1]", "(multfirst [3 7 0 9 7]) -> [3 3 3 3 3]", "(multfirst []) -> []", "(multfirst [2 7 6]) -> [2 2 2]", "(multfirst []) -> []", "(multfirst [2 2 0]) -> [2 2 2]", "(multfirst [7 3]) -> [7 7]", "(multfirst [5 1 6 6 6]) -> [5 5 5 5 5]", "(multfirst [7 3 3 2 2]) -> [7 7 7 7 7]", "(multfirst [1]) -> [1]"], "time": 0.034591, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7 1 9 6]) -> [7 7 7 7]", "(multfirst [4 3 5 6]) -> [4 4 4 4]", "(multfirst [9 9 9 4]) -> [9 9 9 9]", "(multfirst []) -> []", "(multfirst [3 2 1 4]) -> [3 3 3 3]", "(multfirst []) -> []", "(multfirst [7 6 4 8 9]) -> [7 7 7 7 7]", "(multfirst []) -> []", "(multfirst [1 4 1 5 0]) -> [1 1 1 1 1]", "(multfirst [9]) -> [9]"], "time": 0.023554, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0 8]) -> [0 0]", "(multfirst [3 2 7]) -> [3 3 3]", "(multfirst [4 5 0 0 0]) -> [4 4 4 4 4]", "(multfirst [3]) -> [3]", "(multfirst [3]) -> [3]", "(multfirst [4 6 0]) -> [4 4 4]", "(multfirst [8 1 5 7]) -> [8 8 8 8]", "(multfirst [2]) -> [2]", "(multfirst [9 9]) -> [9 9]", "(multfirst [3 9]) -> [3 3]", "(multfirst []) -> []"], "time": 0.02292, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6]) -> [6]", "(multfirst [8 5 7 6]) -> [8 8 8 8]", "(multfirst []) -> []", "(multfirst [2 0 2 5]) -> [2 2 2 2]", "(multfirst [2 5 3]) -> [2 2 2]", "(multfirst [8 2 0]) -> [8 8 8]", "(multfirst [3 0 2]) -> [3 3 3]", "(multfirst [7 2 9]) -> [7 7 7]", "(multfirst []) -> []", "(multfirst [3 8]) -> [3 3]", "(multfirst [7 3 8 4]) -> [7 7 7 7]"], "time": 0.028969, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [3 5 5]) -> [3 3 3]", "(multfirst []) -> []", "(multfirst [8]) -> [8]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [5 2 2]) -> [5 5 5]", "(multfirst [7 7 7]) -> [7 7 7]", "(multfirst [6 5 0]) -> [6 6 6]", "(multfirst []) -> []"], "time": 0.022427, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0 2 0 7 2]) -> [0 0 0 0 0]", "(multfirst [0 5 4 7 0]) -> [0 0 0 0 0]", "(multfirst [9 4]) -> [9 9]", "(multfirst [2]) -> [2]", "(multfirst []) -> []", "(multfirst [5 0 1 5 0]) -> [5 5 5 5 5]", "(multfirst [9 7 8 2 8]) -> [9 9 9 9 9]", "(multfirst []) -> []", "(multfirst [8]) -> [8]", "(multfirst [5]) -> [5]", "(multfirst [3 9 2 7]) -> [3 3 3 3]"], "time": 0.022214, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 2 8 0]) -> [6 6 6 6]", "(multfirst [9 3]) -> [9 9]", "(multfirst [2 3 7 7 4]) -> [2 2 2 2 2]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [8 1 5 1 8]) -> [8 8 8 8 8]", "(multfirst [9 5 7 0]) -> [9 9 9 9]", "(multfirst [6]) -> [6]", "(multfirst [1 7 9 9]) -> [1 1 1 1]", "(multfirst [7]) -> [7]", "(multfirst [4 4 3]) -> [4 4 4]"], "time": 0.035189, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8 1 0 9]) -> [8 8 8 8]", "(multfirst []) -> []", "(multfirst [3 6]) -> [3 3]", "(multfirst [2 9 3]) -> [2 2 2]", "(multfirst [7 6]) -> [7 7]", "(multfirst [8 4]) -> [8 8]", "(multfirst [7 7 5 5 4]) -> [7 7 7 7 7]", "(multfirst [8 1 1 5 9]) -> [8 8 8 8 8]", "(multfirst []) -> []", "(multfirst [1 3 8]) -> [1 1 1]", "(multfirst []) -> []"], "time": 0.031832, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 5 7 9 1]) -> [3 3 3 3 3]", "(multfirst [9 2]) -> [9 9]", "(multfirst [3 2 8 6]) -> [3 3 3 3]", "(multfirst [8 9 5 0 3]) -> [8 8 8 8 8]", "(multfirst [4 7 8 0]) -> [4 4 4 4]", "(multfirst [1 3]) -> [1 1]", "(multfirst [4 5 1 5]) -> [4 4 4 4]", "(multfirst [1 6 7]) -> [1 1 1]", "(multfirst [0 3 1]) -> [0 0 0]", "(multfirst [7 5 7 5 5]) -> [7 7 7 7 7]", "(multfirst [1 2 4]) -> [1 1 1]"], "time": 0.035012, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 6 3 2 4]) -> [6 6 6 6 6]", "(multfirst [1 4 3 4 8]) -> [1 1 1 1 1]", "(multfirst [5 6 1 1]) -> [5 5 5 5]", "(multfirst [9 2 9]) -> [9 9 9]", "(multfirst [5 6 7]) -> [5 5 5]", "(multfirst []) -> []", "(multfirst [5 5]) -> [5 5]", "(multfirst [4 6 1]) -> [4 4 4]", "(multfirst [0 6 1]) -> [0 0 0]", "(multfirst [4 5 7]) -> [4 4 4]", "(multfirst [3 5 2]) -> [3 3 3]"], "time": 0.024516, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst [9 2 3]) -> [9 9 9]", "(multfirst [0 3]) -> [0 0]", "(multfirst [3 7 1 0 8]) -> [3 3 3 3 3]", "(multfirst [6 7 4 3]) -> [6 6 6 6]", "(multfirst [7 5 5 2]) -> [7 7 7 7]", "(multfirst []) -> []", "(multfirst [0 5 8]) -> [0 0 0]", "(multfirst [5 8 6 9 8]) -> [5 5 5 5 5]", "(multfirst [1 1 1 3]) -> [1 1 1 1]", "(multfirst [6 1 6 7]) -> [6 6 6 6]"], "time": 0.028377, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 5 5 1 7]) -> [6 6 6 6 6]", "(multfirst [8 7]) -> [8 8]", "(multfirst [1]) -> [1]", "(multfirst []) -> []", "(multfirst [8]) -> [8]", "(multfirst [4 3 5 6]) -> [4 4 4 4]", "(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst []) -> []", "(multfirst [1 7 8 4 1]) -> [1 1 1 1 1]", "(multfirst [8 0 3 3]) -> [8 8 8 8]"], "time": 0.024704, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [2 6 3]) -> [2 2 2]", "(multfirst [2 6]) -> [2 2]", "(multfirst []) -> []", "(multfirst [9 3 1 1]) -> [9 9 9 9]", "(multfirst [7 6]) -> [7 7]", "(multfirst [9 6 6]) -> [9 9 9]", "(multfirst [7 3]) -> [7 7]", "(multfirst [6 1 8 3 3]) -> [6 6 6 6 6]", "(multfirst [0 3]) -> [0 0]", "(multfirst [5 1 0]) -> [5 5 5]", "(multfirst [4 4 1]) -> [4 4 4]"], "time": 0.02559, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4 1]) -> [4 4]", "(multfirst []) -> []", "(multfirst [3 3]) -> [3 3]", "(multfirst [2 8 6]) -> [2 2 2]", "(multfirst [8]) -> [8]", "(multfirst [2 8 9 0 5]) -> [2 2 2 2 2]", "(multfirst [4 4 8 8 6]) -> [4 4 4 4 4]", "(multfirst [3]) -> [3]", "(multfirst [2 6]) -> [2 2]", "(multfirst [0 8 5 6 4]) -> [0 0 0 0 0]", "(multfirst [8 1 2 7 0]) -> [8 8 8 8 8]"], "time": 0.034701, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [3 7]) -> [3 3]", "(multfirst [1 6 5]) -> [1 1 1]", "(multfirst [4 0 7 3 1]) -> [4 4 4 4 4]", "(multfirst [0 4]) -> [0 0]", "(multfirst [1 3 5 7]) -> [1 1 1 1]", "(multfirst [6 5 4]) -> [6 6 6]", "(multfirst [9 8]) -> [9 9]", "(multfirst [4 7 7 3]) -> [4 4 4 4]", "(multfirst [4]) -> [4]", "(multfirst [7]) -> [7]"], "time": 0.029817, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6]) -> [6]", "(multfirst [5 1 6 5 9]) -> [5 5 5 5 5]", "(multfirst [6 2 3]) -> [6 6 6]", "(multfirst [5 0 5 3]) -> [5 5 5 5]", "(multfirst [8 2 5 6]) -> [8 8 8 8]", "(multfirst [6 0 8]) -> [6 6 6]", "(multfirst [4 6]) -> [4 4]", "(multfirst [9 7 9 6 9]) -> [9 9 9 9 9]", "(multfirst [9]) -> [9]", "(multfirst [6 5 8 6]) -> [6 6 6 6]", "(multfirst []) -> []"], "time": 0.030234, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 0 2 9 2]) -> [9 9 9 9 9]", "(multfirst [7 4 0 5 6]) -> [7 7 7 7 7]", "(multfirst [8 3 6 5 8]) -> [8 8 8 8 8]", "(multfirst []) -> []", "(multfirst [6 9 3 1]) -> [6 6 6 6]", "(multfirst [3 6 4 5 8]) -> [3 3 3 3 3]", "(multfirst [5]) -> [5]", "(multfirst [5 8 9 1]) -> [5 5 5 5]", "(multfirst [4 0 1 6]) -> [4 4 4 4]", "(multfirst [3 5 8 5]) -> [3 3 3 3]", "(multfirst [5 7 5 9 5]) -> [5 5 5 5 5]"], "time": 0.033747, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [7 4 4 9 9]) -> [7 7 7 7 7]", "(multfirst [6 7 2 0]) -> [6 6 6 6]", "(multfirst [3 9 2 5 1]) -> [3 3 3 3 3]", "(multfirst [8 2]) -> [8 8]", "(multfirst [4 4]) -> [4 4]", "(multfirst [8 1]) -> [8 8]", "(multfirst [6 1 3 5]) -> [6 6 6 6]", "(multfirst [5 0 7 5]) -> [5 5 5 5]", "(multfirst [4 3 3 5 4]) -> [4 4 4 4 4]", "(multfirst [4]) -> [4]", "(multfirst [9 7 5 2 3]) -> [9 9 9 9 9]"], "time": 0.022611, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1 9]) -> [1 1]", "(multfirst [8 9 3]) -> [8 8 8]", "(multfirst [4 1 9 5]) -> [4 4 4 4]", "(multfirst [2 4 3 0]) -> [2 2 2 2]", "(multfirst [2 7 5 8 2]) -> [2 2 2 2 2]", "(multfirst [1 6 0 4 3]) -> [1 1 1 1 1]", "(multfirst [5 3]) -> [5 5]", "(multfirst [2 6]) -> [2 2]", "(multfirst [5 3 3 6 2]) -> [5 5 5 5 5]", "(multfirst [0 3 9 5]) -> [0 0 0 0]", "(multfirst [2 6 5 4]) -> [2 2 2 2]"], "time": 0.022393, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [2 3 3]) -> [2 2 2]", "(multfirst [6 8]) -> [6 6]", "(multfirst [5 9 7 9 6]) -> [5 5 5 5 5]", "(multfirst [4 3 6]) -> [4 4 4]", "(multfirst []) -> []", "(multfirst [1 4 5 3]) -> [1 1 1 1]", "(multfirst [0 7 6]) -> [0 0 0]", "(multfirst [6 4 1 7 4]) -> [6 6 6 6 6]", "(multfirst [8 5]) -> [8 8]", "(multfirst [6 8 4 5]) -> [6 6 6 6]"], "time": 0.036567, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4 7]) -> [4 4]", "(multfirst [3 9]) -> [3 3]", "(multfirst [4]) -> [4]", "(multfirst [5 8 2]) -> [5 5 5]", "(multfirst [6 1]) -> [6 6]", "(multfirst [2]) -> [2]", "(multfirst [5]) -> [5]", "(multfirst [8 6]) -> [8 8]", "(multfirst [0]) -> [0]", "(multfirst [6 4]) -> [6 6]", "(multfirst [7 7 6 1 5]) -> [7 7 7 7 7]"], "time": 0.037382, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 7 1]) -> [6 6 6]", "(multfirst [7]) -> [7]", "(multfirst [6 1 2]) -> [6 6 6]", "(multfirst [0 1 3]) -> [0 0 0]", "(multfirst [1 4]) -> [1 1]", "(multfirst [4 0 2]) -> [4 4 4]", "(multfirst []) -> []", "(multfirst [8 9]) -> [8 8]", "(multfirst [6 1 4]) -> [6 6 6]", "(multfirst [9 8 4 8]) -> [9 9 9 9]", "(multfirst [6]) -> [6]"], "time": 0.036858, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 8 8]) -> [3 3 3]", "(multfirst [2]) -> [2]", "(multfirst [1 5 3 3 0]) -> [1 1 1 1 1]", "(multfirst []) -> []", "(multfirst [1 2]) -> [1 1]", "(multfirst [7]) -> [7]", "(multfirst [5 3]) -> [5 5]", "(multfirst [7 9]) -> [7 7]", "(multfirst [6 6]) -> [6 6]", "(multfirst [3 0 5 1]) -> [3 3 3 3]", "(multfirst [1 6 7 3]) -> [1 1 1 1]"], "time": 0.0294, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [5]) -> [5]", "(multfirst [4 7]) -> [4 4]", "(multfirst [5]) -> [5]", "(multfirst [1 7 8]) -> [1 1 1]", "(multfirst [9]) -> [9]", "(multfirst [0]) -> [0]", "(multfirst [5 9]) -> [5 5]", "(multfirst []) -> []", "(multfirst [5 4 0]) -> [5 5 5]", "(multfirst [0 2 0]) -> [0 0 0]"], "time": 0.034275, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0 7]) -> [0 0]", "(multfirst [1 1 3]) -> [1 1 1]", "(multfirst [4]) -> [4]", "(multfirst [7 5 3]) -> [7 7 7]", "(multfirst [1 0 5]) -> [1 1 1]", "(multfirst [7 6 5 4]) -> [7 7 7 7]", "(multfirst [8 9]) -> [8 8]", "(multfirst [4 5 5 4]) -> [4 4 4 4]", "(multfirst [5 6 1 1]) -> [5 5 5 5]", "(multfirst [3 9 8 2 4]) -> [3 3 3 3 3]", "(multfirst [7 6 4 1]) -> [7 7 7 7]"], "time": 0.022482, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4 4 4 0]) -> [4 4 4 4]", "(multfirst [3]) -> [3]", "(multfirst [6 1 1]) -> [6 6 6]", "(multfirst [6 6 7 4 9]) -> [6 6 6 6 6]", "(multfirst [8 9 1 9]) -> [8 8 8 8]", "(multfirst [0 8 7]) -> [0 0 0]", "(multfirst [2 3 2]) -> [2 2 2]", "(multfirst [0 0]) -> [0 0]", "(multfirst [6 8]) -> [6 6]", "(multfirst [4 7 9 1]) -> [4 4 4 4]", "(multfirst [3 6]) -> [3 3]"], "time": 0.024368, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 2]) -> [3 3]", "(multfirst [1]) -> [1]", "(multfirst [8 2 6 6]) -> [8 8 8 8]", "(multfirst [2]) -> [2]", "(multfirst [6 7 8]) -> [6 6 6]", "(multfirst [6 9 6 7]) -> [6 6 6 6]", "(multfirst [7 4]) -> [7 7]", "(multfirst []) -> []", "(multfirst [9 8 4]) -> [9 9 9]", "(multfirst []) -> []", "(multfirst []) -> []"], "time": 0.034079, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [4]) -> [4]", "(multfirst []) -> []", "(multfirst [7 0]) -> [7 7]", "(multfirst [6 9 2]) -> [6 6 6]", "(multfirst []) -> []", "(multfirst [1 3 9]) -> [1 1 1]", "(multfirst [4 4 9]) -> [4 4 4]", "(multfirst [9 2]) -> [9 9]", "(multfirst [6]) -> [6]", "(multfirst [2 3 4]) -> [2 2 2]"], "time": 0.029368, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [2]) -> [2]", "(multfirst [9 5 3 9]) -> [9 9 9 9]", "(multfirst [7 9 1]) -> [7 7 7]", "(multfirst [2 3 3 1 0]) -> [2 2 2 2 2]", "(multfirst [4 2 2]) -> [4 4 4]", "(multfirst [4 7 3]) -> [4 4 4]", "(multfirst [9 0 4]) -> [9 9 9]", "(multfirst [6]) -> [6]", "(multfirst [2 7 1]) -> [2 2 2]", "(multfirst [6 9]) -> [6 6]", "(multfirst []) -> []"], "time": 0.025111, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1 7 3]) -> [1 1 1]", "(multfirst [6 1 1 5 6]) -> [6 6 6 6 6]", "(multfirst [9 5 2 7]) -> [9 9 9 9]", "(multfirst []) -> []", "(multfirst [9 5]) -> [9 9]", "(multfirst [0 5 2 5]) -> [0 0 0 0]", "(multfirst [0 0 0]) -> [0 0 0]", "(multfirst [1 3 9]) -> [1 1 1]", "(multfirst [4 9]) -> [4 4]", "(multfirst [7 4 5]) -> [7 7 7]", "(multfirst [3]) -> [3]"], "time": 0.030098, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0 2 6]) -> [0 0 0]", "(multfirst [6 9]) -> [6 6]", "(multfirst [6]) -> [6]", "(multfirst [4 9 4 6 5]) -> [4 4 4 4 4]", "(multfirst [2]) -> [2]", "(multfirst [0 8 7]) -> [0 0 0]", "(multfirst [1 2]) -> [1 1]", "(multfirst [7 6]) -> [7 7]", "(multfirst [3 8 2 3 9]) -> [3 3 3 3 3]", "(multfirst [1 7 7 3 1]) -> [1 1 1 1 1]", "(multfirst [2 6 3 8 2]) -> [2 2 2 2 2]"], "time": 0.025911, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6]) -> [6]", "(multfirst []) -> []", "(multfirst [3 1 0 7 9]) -> [3 3 3 3 3]", "(multfirst [6]) -> [6]", "(multfirst [8 1 7 9 5]) -> [8 8 8 8 8]", "(multfirst [0 4 2 2]) -> [0 0 0 0]", "(multfirst [6 8]) -> [6 6]", "(multfirst [8 8]) -> [8 8]", "(multfirst [7 3 9 0 1]) -> [7 7 7 7 7]", "(multfirst [6 9]) -> [6 6]", "(multfirst []) -> []"], "time": 0.022348, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 0 8 1 4]) -> [6 6 6 6 6]", "(multfirst [2 2]) -> [2 2]", "(multfirst [2 0]) -> [2 2]", "(multfirst []) -> []", "(multfirst [7]) -> [7]", "(multfirst [2 4]) -> [2 2]", "(multfirst [8 4 4 8]) -> [8 8 8 8]", "(multfirst [3 0 9]) -> [3 3 3]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [4 9 1 2 1]) -> [4 4 4 4 4]"], "time": 0.024859, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [3 9 3]) -> [3 3 3]", "(multfirst [5 8 8 4 0]) -> [5 5 5 5 5]", "(multfirst [4 4]) -> [4 4]", "(multfirst [3 3 2 1]) -> [3 3 3 3]", "(multfirst [8 2 6 4 7]) -> [8 8 8 8 8]", "(multfirst [3 8 0 5]) -> [3 3 3 3]", "(multfirst [6 2 0]) -> [6 6 6]", "(multfirst [0 7 9 1]) -> [0 0 0 0]", "(multfirst [6 5 0 8]) -> [6 6 6 6]", "(multfirst [0]) -> [0]"], "time": 0.025085, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5 5 5 3]) -> [5 5 5 5]", "(multfirst []) -> []", "(multfirst [8]) -> [8]", "(multfirst [3 2 7 2]) -> [3 3 3 3]", "(multfirst [8 6 4 2]) -> [8 8 8 8]", "(multfirst [4 6 1 2]) -> [4 4 4 4]", "(multfirst [3 3]) -> [3 3]", "(multfirst [7]) -> [7]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [5 3 1 7]) -> [5 5 5 5]"], "time": 0.029619, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1 0 1 6 5]) -> [1 1 1 1 1]", "(multfirst [6 5 4]) -> [6 6 6]", "(multfirst [7 1 9]) -> [7 7 7]", "(multfirst []) -> []", "(multfirst [5 4 7]) -> [5 5 5]", "(multfirst []) -> []", "(multfirst [7 1 5]) -> [7 7 7]", "(multfirst []) -> []", "(multfirst [1 0]) -> [1 1]", "(multfirst [0]) -> [0]", "(multfirst [4 7 0 6]) -> [4 4 4 4]"], "time": 0.030894, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1 8 3]) -> [1 1 1]", "(multfirst [2 5 8 5]) -> [2 2 2 2]", "(multfirst [7 0 6]) -> [7 7 7]", "(multfirst [4 2 7]) -> [4 4 4]", "(multfirst [3 5 8 0 2]) -> [3 3 3 3 3]", "(multfirst [3]) -> [3]", "(multfirst []) -> []", "(multfirst [6 7 6 5 9]) -> [6 6 6 6 6]", "(multfirst [1 1 8 8 4]) -> [1 1 1 1 1]", "(multfirst []) -> []", "(multfirst [1 5 2]) -> [1 1 1]"], "time": 0.037675, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4 1 8]) -> [4 4 4]", "(multfirst [3 9 4 9 0]) -> [3 3 3 3 3]", "(multfirst [2]) -> [2]", "(multfirst [9]) -> [9]", "(multfirst [9 7 1 7]) -> [9 9 9 9]", "(multfirst [4 3]) -> [4 4]", "(multfirst [0 9 9 4 1]) -> [0 0 0 0 0]", "(multfirst [5 5]) -> [5 5]", "(multfirst [9 8]) -> [9 9]", "(multfirst []) -> []", "(multfirst [0 5 2]) -> [0 0 0]"], "time": 0.031639, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7 1 2 7]) -> [7 7 7 7]", "(multfirst [1 5]) -> [1 1]", "(multfirst [1 5 0 7 7]) -> [1 1 1 1 1]", "(multfirst [5 3 4 8 9]) -> [5 5 5 5 5]", "(multfirst []) -> []", "(multfirst [2 8 8 1]) -> [2 2 2 2]", "(multfirst [1 1 7]) -> [1 1 1]", "(multfirst [1 7 4 9 3]) -> [1 1 1 1 1]", "(multfirst [6 4 8 1]) -> [6 6 6 6]", "(multfirst [9]) -> [9]"], "time": 0.0259, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1 0 7]) -> [1 1 1]", "(multfirst [7 2 3]) -> [7 7 7]", "(multfirst [1 6 6 0]) -> [1 1 1 1]", "(multfirst []) -> []", "(multfirst [6 4 5 4]) -> [6 6 6 6]", "(multfirst [5 8 4 2 4]) -> [5 5 5 5 5]", "(multfirst [3 2]) -> [3 3]", "(multfirst [9 1 5 8]) -> [9 9 9 9]", "(multfirst [6 5]) -> [6 6]", "(multfirst []) -> []", "(multfirst [9 9]) -> [9 9]"], "time": 0.031107, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 9]) -> [3 3]", "(multfirst [7 3 1 8 2]) -> [7 7 7 7 7]", "(multfirst [2 4]) -> [2 2]", "(multfirst [2]) -> [2]", "(multfirst []) -> []", "(multfirst [3]) -> [3]", "(multfirst [6]) -> [6]", "(multfirst [8 6]) -> [8 8]", "(multfirst [6 4]) -> [6 6]", "(multfirst []) -> []", "(multfirst [6]) -> [6]"], "time": 0.038725, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5 1]) -> [5 5]", "(multfirst [6]) -> [6]", "(multfirst [3 5 3 2]) -> [3 3 3 3]", "(multfirst [8 1]) -> [8 8]", "(multfirst [9]) -> [9]", "(multfirst [4 7 9 6]) -> [4 4 4 4]", "(multfirst [0 9 2 4 1]) -> [0 0 0 0 0]", "(multfirst [9 8 5]) -> [9 9 9]", "(multfirst [0 1 1 1]) -> [0 0 0 0]", "(multfirst [6]) -> [6]", "(multfirst [1 2 0]) -> [1 1 1]"], "time": 0.023144, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 1 1]) -> [9 9 9]", "(multfirst [2]) -> [2]", "(multfirst [6]) -> [6]", "(multfirst []) -> []", "(multfirst [2]) -> [2]", "(multfirst [3]) -> [3]", "(multfirst [5 9 2]) -> [5 5 5]", "(multfirst [5 4]) -> [5 5]", "(multfirst [3 9]) -> [3 3]", "(multfirst [5 8 5 7]) -> [5 5 5 5]", "(multfirst [2 8]) -> [2 2]"], "time": 0.027353, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [6]) -> [6]", "(multfirst [4 3 0 8 9]) -> [4 4 4 4 4]", "(multfirst [6 2]) -> [6 6]", "(multfirst [9]) -> [9]", "(multfirst [9 6 6 7]) -> [9 9 9 9]", "(multfirst [5 0]) -> [5 5]", "(multfirst [1 0]) -> [1 1]", "(multfirst []) -> []", "(multfirst [3 2 6 5 2]) -> [3 3 3 3 3]", "(multfirst [6 3 4 9]) -> [6 6 6 6]"], "time": 0.023594, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5]) -> [5]", "(multfirst [8 1 1 5 3]) -> [8 8 8 8 8]", "(multfirst [0 6 8 2 9]) -> [0 0 0 0 0]", "(multfirst [9 7 5 3 6]) -> [9 9 9 9 9]", "(multfirst [5]) -> [5]", "(multfirst [9 4]) -> [9 9]", "(multfirst [6]) -> [6]", "(multfirst []) -> []", "(multfirst [2]) -> [2]", "(multfirst [5 0 1 3 1]) -> [5 5 5 5 5]", "(multfirst [4 1 1 2 6]) -> [4 4 4 4 4]"], "time": 0.033273, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7 3]) -> [7 7]", "(multfirst []) -> []", "(multfirst [4]) -> [4]", "(multfirst []) -> []", "(multfirst [9 2 8 8 8]) -> [9 9 9 9 9]", "(multfirst [4 8 9 1]) -> [4 4 4 4]", "(multfirst []) -> []", "(multfirst [2]) -> [2]", "(multfirst [8]) -> [8]", "(multfirst [5 3 8 8]) -> [5 5 5 5]"], "time": 0.023032, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0 0 4 4]) -> [0 0 0 0]", "(multfirst [7 6 7 6]) -> [7 7 7 7]", "(multfirst [0 5 1 7]) -> [0 0 0 0]", "(multfirst [8 6]) -> [8 8]", "(multfirst [0 2 4 4]) -> [0 0 0 0]", "(multfirst [5 9 4 5 0]) -> [5 5 5 5 5]", "(multfirst []) -> []", "(multfirst [5 6]) -> [5 5]", "(multfirst [5]) -> [5]", "(multfirst [3 8 8 5]) -> [3 3 3 3]", "(multfirst [7 9 8 6 8]) -> [7 7 7 7 7]"], "time": 0.03624, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5 7]) -> [5 5]", "(multfirst [8 9 5 6 0]) -> [8 8 8 8 8]", "(multfirst [8 2 2]) -> [8 8 8]", "(multfirst [4 2 2]) -> [4 4 4]", "(multfirst [7 0 5]) -> [7 7 7]", "(multfirst [8 6 7 5]) -> [8 8 8 8]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [8]) -> [8]", "(multfirst [1]) -> [1]", "(multfirst [8 2 2]) -> [8 8 8]"], "time": 0.029571, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 8 2 7]) -> [6 6 6 6]", "(multfirst [5 1]) -> [5 5]", "(multfirst []) -> []", "(multfirst [4 0]) -> [4 4]", "(multfirst []) -> []", "(multfirst [3]) -> [3]", "(multfirst [6 1 0 1]) -> [6 6 6 6]", "(multfirst [6 2 8]) -> [6 6 6]", "(multfirst [5 9 3]) -> [5 5 5]", "(multfirst [9 6 9]) -> [9 9 9]", "(multfirst [4 4 9 8 2]) -> [4 4 4 4 4]"], "time": 0.029286, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [2 3]) -> [2 2]", "(multfirst [6 1 6]) -> [6 6 6]", "(multfirst [0 1]) -> [0 0]", "(multfirst [6 5]) -> [6 6]", "(multfirst [0]) -> [0]", "(multfirst [6 9 4 9]) -> [6 6 6 6]", "(multfirst [3 3 3 5]) -> [3 3 3 3]", "(multfirst [1 0 8]) -> [1 1 1]", "(multfirst [7 6 9 7 0]) -> [7 7 7 7 7]", "(multfirst [8 9 1]) -> [8 8 8]", "(multfirst [3 6 2]) -> [3 3 3]"], "time": 0.030203, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8 3]) -> [8 8]", "(multfirst [3 5]) -> [3 3]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7 3 1 8]) -> [7 7 7 7]", "(multfirst [7 2 1 8]) -> [7 7 7 7]", "(multfirst [9]) -> [9]", "(multfirst [3 9 7 4]) -> [3 3 3 3]", "(multfirst [6 2 5 2]) -> [6 6 6 6]", "(multfirst [3]) -> [3]", "(multfirst [7 6]) -> [7 7]"], "time": 0.024934, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [4 2 1 2]) -> [4 4 4 4]", "(multfirst [3 2]) -> [3 3]", "(multfirst []) -> []", "(multfirst [7 0 1 2]) -> [7 7 7 7]", "(multfirst []) -> []", "(multfirst [6 8]) -> [6 6]", "(multfirst [7 6 4]) -> [7 7 7]", "(multfirst [6 8 4]) -> [6 6 6]", "(multfirst []) -> []", "(multfirst []) -> []"], "time": 0.025744, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [3]) -> [3]", "(multfirst [3 3]) -> [3 3]", "(multfirst [7 4]) -> [7 7]", "(multfirst [6 8]) -> [6 6]", "(multfirst []) -> []", "(multfirst [7 6 0 0 2]) -> [7 7 7 7 7]", "(multfirst [3 9 3 1 0]) -> [3 3 3 3 3]", "(multfirst [5 9 6 0 8]) -> [5 5 5 5 5]", "(multfirst [1]) -> [1]", "(multfirst [5 3 1]) -> [5 5 5]"], "time": 0.023334, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [6 2]) -> [6 6]", "(multfirst [1 4 5]) -> [1 1 1]", "(multfirst []) -> []", "(multfirst [7 0 1]) -> [7 7 7]", "(multfirst [6 8 6]) -> [6 6 6]", "(multfirst [7 5]) -> [7 7]", "(multfirst [1 4 6]) -> [1 1 1]", "(multfirst [1 4 8 7]) -> [1 1 1 1]", "(multfirst [2 7 9]) -> [2 2 2]", "(multfirst [6 8 7]) -> [6 6 6]"], "time": 0.031583, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 3 0]) -> [9 9 9]", "(multfirst [4 7 5]) -> [4 4 4]", "(multfirst [2 3 0]) -> [2 2 2]", "(multfirst [0 1 9]) -> [0 0 0]", "(multfirst [9 2 2 8 0]) -> [9 9 9 9 9]", "(multfirst [4 5]) -> [4 4]", "(multfirst [0 7]) -> [0 0]", "(multfirst [2 4 7 4]) -> [2 2 2 2]", "(multfirst [2 0 1 3 3]) -> [2 2 2 2 2]", "(multfirst [8 4 3 4 1]) -> [8 8 8 8 8]", "(multfirst [3 3 4 9]) -> [3 3 3 3]"], "time": 0.02367, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1 3 8]) -> [1 1 1]", "(multfirst [3 3]) -> [3 3]", "(multfirst [5 7]) -> [5 5]", "(multfirst [0 0 1 7 2]) -> [0 0 0 0 0]", "(multfirst [3 1 6 2 8]) -> [3 3 3 3 3]", "(multfirst [1 6]) -> [1 1]", "(multfirst [7 1 0 0]) -> [7 7 7 7]", "(multfirst []) -> []", "(multfirst [2 6 8 5]) -> [2 2 2 2]", "(multfirst [1 5]) -> [1 1]", "(multfirst [8 1 5]) -> [8 8 8]"], "time": 0.032238, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8 9 2 8]) -> [8 8 8 8]", "(multfirst [8 0 5 1]) -> [8 8 8 8]", "(multfirst [6]) -> [6]", "(multfirst [9 0]) -> [9 9]", "(multfirst [7 9]) -> [7 7]", "(multfirst [1]) -> [1]", "(multfirst []) -> []", "(multfirst [5 4 7 1]) -> [5 5 5 5]", "(multfirst []) -> []", "(multfirst [9]) -> [9]", "(multfirst [9 0 6 0]) -> [9 9 9 9]"], "time": 0.033772, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1 5 1 4 0]) -> [1 1 1 1 1]", "(multfirst [5 7]) -> [5 5]", "(multfirst [4 7 9 0 9]) -> [4 4 4 4 4]", "(multfirst [6]) -> [6]", "(multfirst [6 5 9 4]) -> [6 6 6 6]", "(multfirst [7 5]) -> [7 7]", "(multfirst [8 5 4 8 1]) -> [8 8 8 8 8]", "(multfirst [6 4 3 1 0]) -> [6 6 6 6 6]", "(multfirst [1]) -> [1]", "(multfirst []) -> []", "(multfirst [1 4]) -> [1 1]"], "time": 0.03095, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [7 2 4]) -> [7 7 7]", "(multfirst []) -> []", "(multfirst [1 4 1 0 0]) -> [1 1 1 1 1]", "(multfirst [5 2 2 3 1]) -> [5 5 5 5 5]", "(multfirst [9]) -> [9]", "(multfirst [9 9]) -> [9 9]", "(multfirst [5 1 3 0]) -> [5 5 5 5]", "(multfirst [6 1 4 8 7]) -> [6 6 6 6 6]", "(multfirst [0 2]) -> [0 0]", "(multfirst [1 2 1]) -> [1 1 1]", "(multfirst [1 8 0 7]) -> [1 1 1 1]"], "time": 0.02271, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [2 5 1 0 1]) -> [2 2 2 2 2]", "(multfirst [0 7]) -> [0 0]", "(multfirst [1 7 2 2 7]) -> [1 1 1 1 1]", "(multfirst [6 2 7 6]) -> [6 6 6 6]", "(multfirst []) -> []", "(multfirst [6 2]) -> [6 6]", "(multfirst [1 5 3]) -> [1 1 1]", "(multfirst [5 0 2 4 5]) -> [5 5 5 5 5]", "(multfirst [4 0 8 8]) -> [4 4 4 4]", "(multfirst []) -> []", "(multfirst [1 8 7]) -> [1 1 1]"], "time": 0.027091, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8]) -> [8]", "(multfirst []) -> []", "(multfirst [8 9 7 4 9]) -> [8 8 8 8 8]", "(multfirst [2 3]) -> [2 2]", "(multfirst [2 1 4]) -> [2 2 2]", "(multfirst [1 3]) -> [1 1]", "(multfirst [4 3]) -> [4 4]", "(multfirst [0 5 6 3]) -> [0 0 0 0]", "(multfirst [9 3]) -> [9 9]", "(multfirst [2]) -> [2]", "(multfirst [5]) -> [5]"], "time": 0.030563, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0 5 6 2 5]) -> [0 0 0 0 0]", "(multfirst [1 7]) -> [1 1]", "(multfirst []) -> []", "(multfirst [7 9 8]) -> [7 7 7]", "(multfirst [6 8 0 6 1]) -> [6 6 6 6 6]", "(multfirst [7 4 8]) -> [7 7 7]", "(multfirst [2]) -> [2]", "(multfirst [2]) -> [2]", "(multfirst [1 6 1]) -> [1 1 1]", "(multfirst [6 7 5]) -> [6 6 6]", "(multfirst [6 0 9]) -> [6 6 6]"], "time": 0.022898, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [4 2]) -> [4 4]", "(multfirst [0 2 2 9]) -> [0 0 0 0]", "(multfirst [5]) -> [5]", "(multfirst [4]) -> [4]", "(multfirst [4 2 0 8 2]) -> [4 4 4 4 4]", "(multfirst [2 3 0 6]) -> [2 2 2 2]", "(multfirst [3 7 1 1 4]) -> [3 3 3 3 3]"], "time": 0.022737, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [9 1 9 5]) -> [9 9 9 9]", "(multfirst [2 7 5 6 5]) -> [2 2 2 2 2]", "(multfirst [6 0 4]) -> [6 6 6]", "(multfirst []) -> []", "(multfirst [8]) -> [8]", "(multfirst [3]) -> [3]", "(multfirst [7 7 8 8]) -> [7 7 7 7]", "(multfirst [0 7]) -> [0 0]", "(multfirst [9 1]) -> [9 9]", "(multfirst [4]) -> [4]"], "time": 0.024397, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [7 0 1]) -> [7 7 7]", "(multfirst [1 1 3]) -> [1 1 1]", "(multfirst [9 7]) -> [9 9]", "(multfirst []) -> []", "(multfirst [8 6 2 0]) -> [8 8 8 8]", "(multfirst [8 6 2 2 7]) -> [8 8 8 8 8]", "(multfirst [1 5 6]) -> [1 1 1]", "(multfirst [4 7 5 2 9]) -> [4 4 4 4 4]", "(multfirst [2]) -> [2]", "(multfirst [2]) -> [2]", "(multfirst [5]) -> [5]"], "time": 0.02246, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5 5 8]) -> [5 5 5]", "(multfirst []) -> []", "(multfirst [8 1]) -> [8 8]", "(multfirst [9 4]) -> [9 9]", "(multfirst [6 4]) -> [6 6]", "(multfirst [5 7 9]) -> [5 5 5]", "(multfirst [6 5 6]) -> [6 6 6]", "(multfirst [8 8 6 5]) -> [8 8 8 8]", "(multfirst [7 5 8]) -> [7 7 7]", "(multfirst [8 5 8 3]) -> [8 8 8 8]", "(multfirst [0 6 0 1]) -> [0 0 0 0]"], "time": 0.02198, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 4 0 5]) -> [6 6 6 6]", "(multfirst [4]) -> [4]", "(multfirst [8 8 7 4]) -> [8 8 8 8]", "(multfirst [4 6 1]) -> [4 4 4]", "(multfirst [9 0 7 3]) -> [9 9 9 9]", "(multfirst [0 3 4 1]) -> [0 0 0 0]", "(multfirst [1 2 1 1]) -> [1 1 1 1]", "(multfirst [1 3 6 2 6]) -> [1 1 1 1 1]", "(multfirst [0 7 2 7 3]) -> [0 0 0 0 0]", "(multfirst [0 8 2 0 9]) -> [0 0 0 0 0]", "(multfirst []) -> []"], "time": 0.022387, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0 6]) -> [0 0]", "(multfirst [0]) -> [0]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [2 4]) -> [2 2]", "(multfirst [7]) -> [7]", "(multfirst [6 1 0]) -> [6 6 6]", "(multfirst [5]) -> [5]", "(multfirst [9 8 1 5 3]) -> [9 9 9 9 9]", "(multfirst [3 8 0 5 7]) -> [3 3 3 3 3]"], "time": 0.022165, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [2 0]) -> [2 2]", "(multfirst [0 9 2 5 2]) -> [0 0 0 0 0]", "(multfirst [8 4 5 6]) -> [8 8 8 8]", "(multfirst [7 5 7 4]) -> [7 7 7 7]", "(multfirst [4 1 1 1 2]) -> [4 4 4 4 4]", "(multfirst [9 9]) -> [9 9]", "(multfirst [8 0 6]) -> [8 8 8]", "(multfirst []) -> []", "(multfirst [6 6]) -> [6 6]", "(multfirst [7 7]) -> [7 7]", "(multfirst [9 2 8 1]) -> [9 9 9 9]"], "time": 0.021914, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1 1 9]) -> [1 1 1]", "(multfirst [6 3 1 9 1]) -> [6 6 6 6 6]", "(multfirst [8 2]) -> [8 8]", "(multfirst [6 0 6 0 3]) -> [6 6 6 6 6]", "(multfirst [7 3 6]) -> [7 7 7]", "(multfirst []) -> []", "(multfirst [3 6 9]) -> [3 3 3]", "(multfirst [8 6 3 7 8]) -> [8 8 8 8 8]", "(multfirst [9]) -> [9]", "(multfirst [3 1]) -> [3 3]", "(multfirst []) -> []"], "time": 0.021881, "name": "multfirst"}
