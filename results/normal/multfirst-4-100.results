{"solution": "(let multfirst (let a (lambda (b) b) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [0]) -> [0]"], "time": 0.000586, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) b) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [1 1]) -> [1 1]"], "time": 0.000572, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) b) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7]) -> [7]"], "time": 0.000461, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 5]) -> [3 3]", "(multfirst [8 3 1 4]) -> [8 8 8 8]"], "time": 0.023088, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1 3]) -> [1 1]", "(multfirst [8 7]) -> [8 8]"], "time": 0.030214, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4 4 7]) -> [4 4 4]", "(multfirst [7 2 9]) -> [7 7 7]"], "time": 0.026157, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0 2 7 3 3]) -> [0 0 0 0 0]", "(multfirst [4 7 2 1 7]) -> [4 4 4 4 4]"], "time": 0.025591, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5]) -> [5]", "(multfirst [4 6]) -> [4 4]"], "time": 0.027113, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 7 0 2 0]) -> [9 9 9 9 9]", "(multfirst [8 2 4]) -> [8 8 8]"], "time": 0.025759, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 0 6 3]) -> [3 3 3 3]", "(multfirst [7 9 2 1]) -> [7 7 7 7]"], "time": 0.034829, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [2 8 0]) -> [2 2 2]", "(multfirst [4 9]) -> [4 4]"], "time": 0.029091, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 0 8 8]) -> [9 9 9 9]", "(multfirst []) -> []"], "time": 0.022584, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 1 7 8 9]) -> [9 9 9 9 9]", "(multfirst [2 7 6 8 6]) -> [2 2 2 2 2]"], "time": 0.035565, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 8 4]) -> [3 3 3]", "(multfirst []) -> []"], "time": 0.022212, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 6 9]) -> [3 3 3]", "(multfirst []) -> []"], "time": 0.026766, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0 3]) -> [0 0]", "(multfirst [9 7 4 5]) -> [9 9 9 9]"], "time": 0.023521, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [3 3 1 3 0]) -> [3 3 3 3 3]"], "time": 0.025438, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 6 4 3 0]) -> [9 9 9 9 9]", "(multfirst [2 1 9 3 9]) -> [2 2 2 2 2]"], "time": 0.028816, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1 8 6]) -> [1 1 1]", "(multfirst [5 5]) -> [5 5]"], "time": 0.031092, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) 1))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [1 4]) -> [1 1]"], "time": 0.03151, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9]) -> [9]", "(multfirst [7 3 3 2 8]) -> [7 7 7 7 7]"], "time": 0.02255, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8 1 0 4 9]) -> [8 8 8 8 8]", "(multfirst [0 5 2]) -> [0 0 0]"], "time": 0.035068, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [2 9 4 7 9]) -> [2 2 2 2 2]", "(multfirst [0 1 2 8]) -> [0 0 0 0]"], "time": 0.031941, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [6 2 6]) -> [6 6 6]"], "time": 0.028705, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 1 1 3 3]) -> [9 9 9 9 9]", "(multfirst []) -> []"], "time": 0.030273, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9]) -> [9]", "(multfirst [7 0 1 3]) -> [7 7 7 7]"], "time": 0.024608, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [4 0 2 1 7]) -> [4 4 4 4 4]"], "time": 0.025753, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 4 6 5 0]) -> [3 3 3 3 3]", "(multfirst [8]) -> [8]"], "time": 0.025019, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 9 3 4 0]) -> [6 6 6 6 6]", "(multfirst [0]) -> [0]"], "time": 0.029626, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 3 3 6 7]) -> [6 6 6 6 6]", "(multfirst []) -> []"], "time": 0.029588, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1 2 7]) -> [1 1 1]", "(multfirst [6 5 8]) -> [6 6 6]"], "time": 0.026731, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8 3 4 9]) -> [8 8 8 8]", "(multfirst [5 8 0]) -> [5 5 5]"], "time": 0.022879, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) b) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5]) -> [5]", "(multfirst []) -> []"], "time": 0.000624, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1 7 2 2 4]) -> [1 1 1 1 1]", "(multfirst [3 8 1 4 3]) -> [3 3 3 3 3]"], "time": 0.021236, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 0]) -> [9 9]", "(multfirst []) -> []"], "time": 0.030124, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 0]) -> [3 3]", "(multfirst [2 4 3 0 1]) -> [2 2 2 2 2]"], "time": 0.025484, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9]) -> [9]", "(multfirst [7 5]) -> [7 7]"], "time": 0.028353, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 5 4]) -> [3 3 3]", "(multfirst [4]) -> [4]"], "time": 0.029299, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 3 9 5 1]) -> [9 9 9 9 9]", "(multfirst [6 1]) -> [6 6]"], "time": 0.029946, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8 2 3]) -> [8 8 8]", "(multfirst [6 7 2 9]) -> [6 6 6 6]"], "time": 0.030366, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 4 0 6 5]) -> [9 9 9 9 9]", "(multfirst []) -> []"], "time": 0.026505, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 5 9 7]) -> [6 6 6 6]", "(multfirst [7]) -> [7]"], "time": 0.024147, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 5 7]) -> [6 6 6]", "(multfirst [7 9 2 2 9]) -> [7 7 7 7 7]"], "time": 0.022151, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0 7 9 8]) -> [0 0 0 0]", "(multfirst [3 5 1]) -> [3 3 3]"], "time": 0.034596, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 9 6]) -> [6 6 6]", "(multfirst [3 4 2 6 7]) -> [3 3 3 3 3]"], "time": 0.031242, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 5 7]) -> [6 6 6]", "(multfirst [5 7]) -> [5 5]"], "time": 0.02257, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8 1 4]) -> [8 8 8]", "(multfirst [1 8 9 9]) -> [1 1 1 1]"], "time": 0.034569, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 8 9 1 9]) -> [3 3 3 3 3]", "(multfirst [5 7 7 7]) -> [5 5 5 5]"], "time": 0.03449, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 7 8]) -> [3 3 3]", "(multfirst [9 4 9]) -> [9 9 9]"], "time": 0.021987, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 3 4 3 1]) -> [3 3 3 3 3]", "(multfirst [4 9 9 7]) -> [4 4 4 4]"], "time": 0.024203, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6]) -> [6]", "(multfirst [8 4 3 4]) -> [8 8 8 8]"], "time": 0.034108, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9 4 7 7 8]) -> [9 9 9 9 9]", "(multfirst [3 6 7 3]) -> [3 3 3 3]"], "time": 0.021635, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) b) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [3]) -> [3]"], "time": 0.000424, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0 0]) -> [0 0]", "(multfirst [4 6 3]) -> [4 4 4]"], "time": 0.034895, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) []) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []"], "time": 0.000773, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) b) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3]) -> [3]", "(multfirst [5]) -> [5]"], "time": 0.000494, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) b) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst [1]) -> [1]"], "time": 0.000572, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4 7 5 2 3]) -> [4 4 4 4 4]", "(multfirst [1 3 5 9]) -> [1 1 1 1]"], "time": 0.026588, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) b) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5]) -> [5]", "(multfirst [5]) -> [5]"], "time": 0.000543, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) b) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6]) -> [6]", "(multfirst []) -> []"], "time": 0.000408, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4 8 7]) -> [4 4 4]", "(multfirst []) -> []"], "time": 0.022208, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [5 6 0]) -> [5 5 5]", "(multfirst [9]) -> [9]"], "time": 0.036438, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0 9 3 6 8]) -> [0 0 0 0 0]", "(multfirst [9 7 3]) -> [9 9 9]"], "time": 0.036009, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4 5 9 4]) -> [4 4 4 4]", "(multfirst [2 4 0 2]) -> [2 2 2 2]"], "time": 0.021824, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [8 3 2 0 7]) -> [8 8 8 8 8]", "(multfirst [3]) -> [3]"], "time": 0.033007, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 6 3 9]) -> [3 3 3 3]", "(multfirst [3 6 7 8 7]) -> [3 3 3 3 3]"], "time": 0.022535, "name": "multfirst"}
{"solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [3 8 6]) -> [3 3 3]", "(multfirst [5 0 5 7]) -> [5 5 5 5]"], "time": 0.021858, "name": "multfirst"}
