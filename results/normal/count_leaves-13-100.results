{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {9}) -> 1", "(count_leaves {3}) -> 1", "(count_leaves {1 {2 {9}}}) -> 1", "(count_leaves {7}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {3 {9}}) -> 1", "(count_leaves {0 {8} {8}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {7}) -> 1", "(count_leaves {1 {1} {4}}) -> 2", "(count_leaves {5 {1 {8 {1}} {7}}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.784685}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {4 {5}}) -> 1", "(count_leaves {8}) -> 1", "(count_leaves {0}) -> 1", "(count_leaves {2}) -> 1", "(count_leaves {6 {8} {3}}) -> 2", "(count_leaves {7}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.787457}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {7 {2} {9 {1 {2}}}}) -> 2", "(count_leaves {1 {3 {2}}}) -> 1", "(count_leaves {4}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {0}) -> 1", "(count_leaves {0 {8} {4}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {8}) -> 1", "(count_leaves {1}) -> 1", "(count_leaves {5}) -> 1", "(count_leaves {8}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.820294}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {9 {6 {9} {1}} {8}}) -> 3", "(count_leaves {2 {5}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {2 {5 {0}}}) -> 1", "(count_leaves {6 {5} {6}}) -> 2", "(count_leaves {4 {9}}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.882377}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {0 {5} {2}}) -> 2", "(count_leaves {0 {3}}) -> 1", "(count_leaves {4 {8}}) -> 1", "(count_leaves {0 {0} {4}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {2}) -> 1", "(count_leaves {5}) -> 1", "(count_leaves {8 {4 {7 {6}}}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {9}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.775839}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {2}) -> 1", "(count_leaves {3 {7}}) -> 1", "(count_leaves {5 {3} {4}}) -> 2", "(count_leaves {9}) -> 1", "(count_leaves {4 {5 {6 {0} {1}} {8 {3} {1}}} {5 {5 {4} {7}}}}) -> 6", "(count_leaves {3 {4 {1}} {8 {4}}}) -> 2", "(count_leaves {0 {7}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {8}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.816787}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {2}) -> 1", "(count_leaves {7 {7 {6}} {5}}) -> 2", "(count_leaves {0 {3} {8}}) -> 2", "(count_leaves {1 {9} {8}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {6}) -> 1", "(count_leaves {6 {0}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {9 {4 {3 {9} {2}}}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.792128}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {2}) -> 1", "(count_leaves {4}) -> 1", "(count_leaves {9 {6 {0} {9}}}) -> 2", "(count_leaves {4 {6} {2 {6 {5} {0}}}}) -> 3", "(count_leaves {8 {9}}) -> 1", "(count_leaves {1}) -> 1", "(count_leaves {8 {8}}) -> 1", "(count_leaves {0 {6}}) -> 1", "(count_leaves {8 {7 {9}} {4 {2} {8}}}) -> 3", "(count_leaves {9 {2}}) -> 1", "(count_leaves {1 {6}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.861333}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {0 {6 {3 {2} {9}} {0 {3} {2}}}}) -> 4", "(count_leaves {}) -> 0", "(count_leaves {7}) -> 1", "(count_leaves {6 {9 {4 {6} {8}} {6 {3} {5}}}}) -> 4", "(count_leaves {}) -> 0", "(count_leaves {0}) -> 1", "(count_leaves {1 {6 {3} {0 {1}}} {5}}) -> 3", "(count_leaves {8 {4} {7}}) -> 2", "(count_leaves {4 {6}}) -> 1", "(count_leaves {4}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.853198}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {9 {4}}) -> 1", "(count_leaves {5 {5 {0} {0}}}) -> 2", "(count_leaves {0 {9} {9}}) -> 2", "(count_leaves {4 {8}}) -> 1", "(count_leaves {2 {4 {1 {6} {1}}} {1}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {5 {0 {6 {3} {4}}} {2}}) -> 3", "(count_leaves {3}) -> 1", "(count_leaves {4}) -> 1", "(count_leaves {5 {4} {8}}) -> 2", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.80428}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {8 {0}}) -> 1", "(count_leaves {5 {4} {6}}) -> 2", "(count_leaves {7 {0}}) -> 1", "(count_leaves {1 {9 {5}} {7}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {5}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.859433}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {5}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {5 {6 {3 {1}} {7}}}) -> 2", "(count_leaves {2 {0}}) -> 1", "(count_leaves {9 {0 {6} {2}}}) -> 2", "(count_leaves {0}) -> 1", "(count_leaves {0}) -> 1", "(count_leaves {1 {8} {6}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {7}) -> 1", "(count_leaves {9}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.827757}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {0}) -> 1", "(count_leaves {4}) -> 1", "(count_leaves {0 {0 {6 {2}}}}) -> 1", "(count_leaves {0}) -> 1", "(count_leaves {3 {3} {9}}) -> 2", "(count_leaves {2 {2 {1} {5 {3}}}}) -> 2", "(count_leaves {3 {0}}) -> 1", "(count_leaves {4 {8} {1}}) -> 2", "(count_leaves {2 {1}}) -> 1", "(count_leaves {4 {7 {0} {6 {5}}}}) -> 2", "(count_leaves {6 {2} {6}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.823375}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {1 {9 {9} {7 {3}}}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {8 {5 {8 {4} {3}}} {4 {0}}}) -> 3", "(count_leaves {5 {8}}) -> 1", "(count_leaves {5 {9} {7}}) -> 2", "(count_leaves {7 {0 {8} {9}} {0 {1}}}) -> 3", "(count_leaves {8 {1} {8}}) -> 2", "(count_leaves {3 {4}}) -> 1", "(count_leaves {5 {9}}) -> 1", "(count_leaves {7}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.828863}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {5 {4}}) -> 1", "(count_leaves {2 {9 {3}} {1 {6} {1 {2} {7}}}}) -> 4", "(count_leaves {8}) -> 1", "(count_leaves {6 {0}}) -> 1", "(count_leaves {1}) -> 1", "(count_leaves {4 {7} {9}}) -> 2", "(count_leaves {4}) -> 1", "(count_leaves {1}) -> 1", "(count_leaves {6 {4 {7 {4} {8}}}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {5 {8} {3}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.809069}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {4 {4 {9}} {0}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {3 {6}}) -> 1", "(count_leaves {6 {6} {5}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {1 {8 {9 {5} {5}}}}) -> 2", "(count_leaves {5 {7}}) -> 1", "(count_leaves {4 {6}}) -> 1", "(count_leaves {7 {2}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.909351}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {5 {1}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {7}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {8}) -> 1", "(count_leaves {0 {2}}) -> 1", "(count_leaves {1 {4} {5}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {2}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.795468}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {7}) -> 1", "(count_leaves {5 {8} {7}}) -> 2", "(count_leaves {3 {3} {1}}) -> 2", "(count_leaves {4 {6}}) -> 1", "(count_leaves {8}) -> 1", "(count_leaves {5}) -> 1", "(count_leaves {0}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {1}) -> 1", "(count_leaves {9}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.720722}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {6 {2 {4 {5} {5}} {5}} {1 {0} {8 {9} {7}}}}) -> 6", "(count_leaves {8 {0} {8}}) -> 2", "(count_leaves {5}) -> 1", "(count_leaves {9 {8 {8} {9}} {9 {6}}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {6}) -> 1", "(count_leaves {9}) -> 1", "(count_leaves {3 {5 {8}} {9 {0} {5}}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {2 {6} {4}}) -> 2", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.827671}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {3 {8 {7 {1} {9}} {2}}}) -> 3", "(count_leaves {4 {3}}) -> 1", "(count_leaves {8}) -> 1", "(count_leaves {5}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {0 {6 {4} {8}} {2 {4} {3}}}) -> 4", "(count_leaves {6}) -> 1", "(count_leaves {5 {3 {8}}}) -> 1", "(count_leaves {5 {0}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {2 {4 {7 {2}} {0}}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.7793}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {3 {8 {8 {7}} {0 {4}}}}) -> 2", "(count_leaves {9 {0 {6 {8}} {8 {4} {8}}} {5 {1 {4} {0}} {3 {1} {1}}}}) -> 7", "(count_leaves {5}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {3 {6}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {5}) -> 1", "(count_leaves {5}) -> 1", "(count_leaves {7 {6}}) -> 1", "(count_leaves {1}) -> 1", "(count_leaves {3 {2 {0} {8}} {9}}) -> 3"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.785085}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {5}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {8 {9} {2}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {9}) -> 1", "(count_leaves {3}) -> 1", "(count_leaves {6 {3}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.762785}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {7}) -> 1", "(count_leaves {7 {6}}) -> 1", "(count_leaves {8 {1 {5}}}) -> 1", "(count_leaves {3 {4} {4}}) -> 2", "(count_leaves {0 {4}}) -> 1", "(count_leaves {0 {0} {4 {0 {5} {4}} {2}}}) -> 4", "(count_leaves {4}) -> 1", "(count_leaves {9}) -> 1", "(count_leaves {9 {6 {0}}}) -> 1", "(count_leaves {2}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.870916}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {0}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {6 {4}}) -> 1", "(count_leaves {5 {8}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {3 {1 {9 {8}} {9 {6}}} {7}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {9 {0}}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.827538}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {4 {5}}) -> 1", "(count_leaves {5 {8}}) -> 1", "(count_leaves {3 {8 {8 {0}} {3 {3} {0}}} {1}}) -> 4", "(count_leaves {1}) -> 1", "(count_leaves {1 {8 {4}} {9 {6} {7}}}) -> 3", "(count_leaves {8 {6 {6}} {5 {4} {3}}}) -> 3", "(count_leaves {1}) -> 1", "(count_leaves {0 {3}}) -> 1", "(count_leaves {6 {0}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {0 {2 {4} {9 {9}}} {2 {1 {9}} {2}}}) -> 4"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.764175}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8 {0 {8 {5}}} {2}}) -> 2", "(count_leaves {4}) -> 1", "(count_leaves {8 {9} {7}}) -> 2", "(count_leaves {8 {7 {6 {8}}} {9 {2 {6} {3}} {9}}}) -> 4", "(count_leaves {7 {5} {9}}) -> 2", "(count_leaves {4 {1}}) -> 1", "(count_leaves {6}) -> 1", "(count_leaves {8 {6} {5}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {8 {9}}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.835154}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {1}) -> 1", "(count_leaves {7 {6} {9}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {9}) -> 1", "(count_leaves {4 {1}}) -> 1", "(count_leaves {7 {5} {9}}) -> 2", "(count_leaves {7}) -> 1", "(count_leaves {9 {6} {9}}) -> 2", "(count_leaves {9 {3 {7} {4}}}) -> 2", "(count_leaves {0 {3} {6}}) -> 2", "(count_leaves {9 {4 {0}} {2}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.762598}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8}) -> 1", "(count_leaves {7 {2}}) -> 1", "(count_leaves {1}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {5}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {1 {2 {9}} {1 {0} {4}}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {5 {9 {1 {7} {1}} {7}}}) -> 3", "(count_leaves {1 {4} {9}}) -> 2", "(count_leaves {1}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.824335}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {1}) -> 1", "(count_leaves {1 {2 {5} {7}} {2 {2}}}) -> 3", "(count_leaves {9 {8 {9} {1}} {7 {2}}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {0 {4}}) -> 1", "(count_leaves {1 {1} {0}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {4 {5}}) -> 1", "(count_leaves {9 {9}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.733625}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {7}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {6 {4 {1}} {6 {7}}}) -> 2", "(count_leaves {1 {9 {3} {5}} {5}}) -> 3", "(count_leaves {5 {6 {0} {2}}}) -> 2", "(count_leaves {2}) -> 1", "(count_leaves {0}) -> 1", "(count_leaves {1 {7} {3}}) -> 2", "(count_leaves {8 {9 {4 {1}}}}) -> 1", "(count_leaves {1}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.873344}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {5 {6 {5 {3} {4}}} {7}}) -> 3", "(count_leaves {1}) -> 1", "(count_leaves {4}) -> 1", "(count_leaves {6 {0 {6 {8} {1}} {0 {1} {9}}} {8 {6 {9}} {2 {9} {5}}}}) -> 7", "(count_leaves {}) -> 0", "(count_leaves {0 {7 {2}}}) -> 1", "(count_leaves {2 {2}}) -> 1", "(count_leaves {0 {6 {9 {1}} {3}} {8}}) -> 3", "(count_leaves {0 {9} {7}}) -> 2", "(count_leaves {2}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.889984}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {2 {4}}) -> 1", "(count_leaves {0 {2 {3} {3}} {1 {1}}}) -> 3", "(count_leaves {7 {9}}) -> 1", "(count_leaves {0 {3 {3}} {6 {4} {0}}}) -> 3", "(count_leaves {5 {6} {2 {8}}}) -> 2", "(count_leaves {1}) -> 1", "(count_leaves {4}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {4 {6}}) -> 1", "(count_leaves {3}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.80215}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {2}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {8 {2} {3 {2} {2}}}) -> 3", "(count_leaves {9}) -> 1", "(count_leaves {0 {7} {7}}) -> 2", "(count_leaves {8 {8 {3}}}) -> 1", "(count_leaves {3 {9 {5} {9}} {9 {6} {8}}}) -> 4", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.678818}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {9 {2} {9}}) -> 2", "(count_leaves {7 {9}}) -> 1", "(count_leaves {7 {9}}) -> 1", "(count_leaves {7 {3 {9}} {3 {1 {9}}}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {1 {6}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.67537}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {1 {8}}) -> 1", "(count_leaves {6}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {1 {5 {9} {2}}}) -> 2", "(count_leaves {7 {0 {0} {3 {4}}}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {8 {2}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {2 {7 {8} {3}} {7}}) -> 3", "(count_leaves {6 {6} {4}}) -> 2", "(count_leaves {4}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.664958}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {6 {4 {9}}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {8}) -> 1", "(count_leaves {2 {8}}) -> 1", "(count_leaves {7 {9 {6}} {0 {3}}}) -> 2", "(count_leaves {7}) -> 1", "(count_leaves {7 {9 {6 {0} {9}} {8 {8}}} {1 {4} {4}}}) -> 5", "(count_leaves {3 {0 {1} {9}} {0 {0} {4}}}) -> 4", "(count_leaves {3 {6} {1 {5} {0}}}) -> 3", "(count_leaves {7 {1}}) -> 1", "(count_leaves {6}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.706512}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {4 {5 {2}} {9 {5} {8}}}) -> 3", "(count_leaves {9 {3}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {5}) -> 1", "(count_leaves {7}) -> 1", "(count_leaves {0 {4 {5}} {5 {9} {5}}}) -> 3", "(count_leaves {1}) -> 1", "(count_leaves {3 {2 {2 {7}}} {9 {4 {7} {0}}}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {2}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.716959}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {9 {1}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {9}) -> 1", "(count_leaves {2}) -> 1", "(count_leaves {3 {4} {8}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {0 {3 {4 {7} {5}}} {3 {9 {7} {1}} {6 {6} {2}}}}) -> 6", "(count_leaves {}) -> 0", "(count_leaves {3 {1}}) -> 1", "(count_leaves {0}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.769821}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {2 {1} {9 {9}}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {6}) -> 1", "(count_leaves {0 {3}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {8 {8 {4 {4}}} {3 {0 {2} {5}}}}) -> 3", "(count_leaves {4 {7}}) -> 1", "(count_leaves {7 {3}}) -> 1", "(count_leaves {8 {6}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.760648}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {5}) -> 1", "(count_leaves {3 {8}}) -> 1", "(count_leaves {5 {5} {1 {3} {6}}}) -> 3", "(count_leaves {7 {0}}) -> 1", "(count_leaves {9}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {5 {4 {7}} {6 {5} {3}}}) -> 3", "(count_leaves {1 {2} {9}}) -> 2", "(count_leaves {0 {6 {3 {9} {2}} {2 {0}}} {8}}) -> 4", "(count_leaves {0 {6 {1 {9}}} {9 {9}}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.740819}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {2}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {2}) -> 1", "(count_leaves {0 {7 {8} {7}} {8 {9}}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {3 {5} {1}}) -> 2", "(count_leaves {0 {2 {2}}}) -> 1", "(count_leaves {4 {9 {1}}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.788075}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {3}) -> 1", "(count_leaves {9 {1} {4}}) -> 2", "(count_leaves {4 {9}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {1}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {4 {1 {3 {7} {4}} {0 {8} {3}}}}) -> 4", "(count_leaves {0}) -> 1", "(count_leaves {2 {3 {8} {3 {6}}} {3 {4 {4}}}}) -> 3", "(count_leaves {4}) -> 1", "(count_leaves {1 {1 {7} {8}}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.743456}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {9 {7}}) -> 1", "(count_leaves {6 {9 {3}}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {1 {8}}) -> 1", "(count_leaves {1 {8 {1} {6}}}) -> 2", "(count_leaves {1 {8}}) -> 1", "(count_leaves {7}) -> 1", "(count_leaves {0}) -> 1", "(count_leaves {1}) -> 1", "(count_leaves {9 {3 {6 {6} {3}}}}) -> 2", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.694548}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8 {9 {4}} {8}}) -> 2", "(count_leaves {7 {9} {8}}) -> 2", "(count_leaves {2 {4 {4} {7}}}) -> 2", "(count_leaves {3 {1}}) -> 1", "(count_leaves {0 {4 {9 {8}} {8}}}) -> 2", "(count_leaves {2 {3 {0} {5}} {8 {1}}}) -> 3", "(count_leaves {0 {8} {4}}) -> 2", "(count_leaves {0 {1} {2 {0 {3} {9}}}}) -> 3", "(count_leaves {9}) -> 1", "(count_leaves {8 {5 {3 {9}} {1}}}) -> 2", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.74247}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {4}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {0 {7 {1 {2}} {0 {7} {0}}} {4 {7 {0}}}}) -> 4", "(count_leaves {9}) -> 1", "(count_leaves {5}) -> 1", "(count_leaves {5 {1 {3} {3}} {3}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {5}) -> 1", "(count_leaves {3}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {0 {2 {8 {4}} {7 {3}}}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.789641}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {7 {8}}) -> 1", "(count_leaves {2}) -> 1", "(count_leaves {2 {0} {8 {8}}}) -> 2", "(count_leaves {9}) -> 1", "(count_leaves {8 {3} {1}}) -> 2", "(count_leaves {1 {1 {8} {7}} {0}}) -> 3", "(count_leaves {8}) -> 1", "(count_leaves {0}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {4}) -> 1", "(count_leaves {7}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.777812}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {6 {0 {5} {8}} {7 {7}}}) -> 3", "(count_leaves {1 {7 {7 {5}}}}) -> 1", "(count_leaves {3 {8 {7 {0}} {5 {9}}}}) -> 2", "(count_leaves {2}) -> 1", "(count_leaves {9}) -> 1", "(count_leaves {5 {9} {0}}) -> 2", "(count_leaves {5 {3} {8 {2 {0} {8}} {0 {7}}}}) -> 4", "(count_leaves {9 {4} {2}}) -> 2", "(count_leaves {7 {2} {5}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.780448}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {4}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {4}) -> 1", "(count_leaves {6 {1 {1} {0}}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {8 {6 {2}}}) -> 1", "(count_leaves {7 {4 {9 {3}} {7 {1}}} {4 {1 {0} {8}} {7}}}) -> 5", "(count_leaves {3}) -> 1", "(count_leaves {6 {4}}) -> 1", "(count_leaves {2 {2 {2} {2 {2}}}}) -> 2", "(count_leaves {5 {6 {3 {7} {8}}}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.77965}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {6 {1}}) -> 1", "(count_leaves {2}) -> 1", "(count_leaves {5}) -> 1", "(count_leaves {2}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {5 {5}}) -> 1", "(count_leaves {9 {9}}) -> 1", "(count_leaves {7 {8}}) -> 1", "(count_leaves {1 {5} {6}}) -> 2", "(count_leaves {7 {8 {1}}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (+ 1 (/ 1 c))) 0)) _) _)", "time": 0.119961}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {5 {9}}) -> 1", "(count_leaves {6 {4 {7} {6}} {1 {8 {0} {1}} {0 {5}}}}) -> 5", "(count_leaves {7 {5}}) -> 1", "(count_leaves {6}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {9}) -> 1", "(count_leaves {6 {9}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {0 {8}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.513112}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {7}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {6 {9 {7}} {5}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {8 {5}}) -> 1", "(count_leaves {2}) -> 1", "(count_leaves {8 {3} {4}}) -> 2", "(count_leaves {8 {1}}) -> 1", "(count_leaves {1}) -> 1", "(count_leaves {3 {3}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.595278}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {2 {4 {6}}}) -> 1", "(count_leaves {5}) -> 1", "(count_leaves {0}) -> 1", "(count_leaves {0}) -> 1", "(count_leaves {8 {3} {5 {2}}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {1 {3} {5}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.624206}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {5}) -> 1", "(count_leaves {5}) -> 1", "(count_leaves {1}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {5 {3 {5} {6}}}) -> 2", "(count_leaves {7 {6}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {2 {6 {8 {9}}}}) -> 1", "(count_leaves {2}) -> 1", "(count_leaves {6}) -> 1", "(count_leaves {5 {5}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.606571}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {1}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {8 {9} {2}}) -> 2", "(count_leaves {3}) -> 1", "(count_leaves {4 {5 {3}}}) -> 1", "(count_leaves {0 {4} {3}}) -> 2", "(count_leaves {0 {0 {7}} {2 {0}}}) -> 2", "(count_leaves {8 {9 {3} {7}} {0 {6}}}) -> 3", "(count_leaves {6}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.603896}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {9 {4}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {0 {6}}) -> 1", "(count_leaves {7}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {0}) -> 1", "(count_leaves {7 {7 {1 {9}} {1}}}) -> 2", "(count_leaves {0 {8 {1 {7}} {4 {9} {5}}}}) -> 3", "(count_leaves {4}) -> 1", "(count_leaves {2 {4} {9 {8}}}) -> 2", "(count_leaves {4 {8}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.623445}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {3 {9 {8}}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {9}) -> 1", "(count_leaves {8 {4 {3}} {7 {9 {6}} {1}}}) -> 3", "(count_leaves {6 {4 {2 {9} {2}} {9 {0} {7}}}}) -> 4", "(count_leaves {}) -> 0", "(count_leaves {6}) -> 1", "(count_leaves {1 {4 {2 {9}}}}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.622311}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {0}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {0 {4}}) -> 1", "(count_leaves {2 {6 {7} {6}}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {3}) -> 1", "(count_leaves {9 {7 {6}}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {7 {7 {6} {9}} {7 {7} {1}}}) -> 4", "(count_leaves {}) -> 0", "(count_leaves {0 {1}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.772243}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {0}) -> 1", "(count_leaves {9 {8}}) -> 1", "(count_leaves {1 {5}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {5}) -> 1", "(count_leaves {3 {5 {5} {3}} {1}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {7 {4 {5} {7 {7} {7}}}}) -> 3", "(count_leaves {9 {7 {7} {0}}}) -> 2", "(count_leaves {0 {4 {7} {0}} {9 {8} {2}}}) -> 4"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.817053}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {2}) -> 1", "(count_leaves {2 {7} {8 {0}}}) -> 2", "(count_leaves {7 {1 {2}}}) -> 1", "(count_leaves {5 {8} {2}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {4 {0} {2}}) -> 2", "(count_leaves {7}) -> 1", "(count_leaves {4 {0}}) -> 1", "(count_leaves {5 {6}}) -> 1", "(count_leaves {5 {7 {3 {2} {2}}}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.831592}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {0 {5 {0 {0} {6}} {4}} {5 {8 {0} {7}}}}) -> 5", "(count_leaves {}) -> 0", "(count_leaves {6 {5} {5}}) -> 2", "(count_leaves {9}) -> 1", "(count_leaves {8 {2 {8}} {3}}) -> 2", "(count_leaves {3}) -> 1", "(count_leaves {5 {7} {9}}) -> 2", "(count_leaves {0 {5 {3} {5}}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {7 {0}}) -> 1", "(count_leaves {0}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.848908}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {9 {3} {3 {3 {5}}}}) -> 2", "(count_leaves {1 {2 {0} {9}} {5 {9}}}) -> 3", "(count_leaves {2 {3}}) -> 1", "(count_leaves {6 {4}}) -> 1", "(count_leaves {9}) -> 1", "(count_leaves {9}) -> 1", "(count_leaves {2 {1}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {0 {7} {4 {9 {8}}}}) -> 2", "(count_leaves {5 {5 {2 {3} {1}}} {9}}) -> 3", "(count_leaves {8 {5 {3} {0 {5} {2}}} {1}}) -> 4"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.841544}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8 {1}}) -> 1", "(count_leaves {9}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {2}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {8 {5} {5}}) -> 2", "(count_leaves {2 {4}}) -> 1", "(count_leaves {2 {6 {3 {7}}} {6 {9 {4} {9}}}}) -> 3", "(count_leaves {4}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.843759}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {8 {4 {1}} {4 {3}}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {9}) -> 1", "(count_leaves {3 {1 {0} {4}}}) -> 2", "(count_leaves {1 {5} {0}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {0}) -> 1", "(count_leaves {2}) -> 1", "(count_leaves {4 {2}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.884691}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {3}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {1 {2} {8 {0 {7} {6}}}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {4 {7 {7} {7}}}) -> 2", "(count_leaves {7 {0}}) -> 1", "(count_leaves {7 {8} {4}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {0}) -> 1", "(count_leaves {8 {7 {1 {2}} {1}} {7}}) -> 3", "(count_leaves {2 {7}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.869472}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {0 {6 {7 {7} {1}} {0}} {7 {1}}}) -> 4", "(count_leaves {8}) -> 1", "(count_leaves {8}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {4 {2} {5}}) -> 2", "(count_leaves {0}) -> 1", "(count_leaves {1}) -> 1", "(count_leaves {3 {0 {4} {7 {7}}} {8}}) -> 3", "(count_leaves {8 {9 {7}}}) -> 1", "(count_leaves {6 {6}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.426096}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {5 {5 {4 {3} {7}}} {7}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {8}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {4}) -> 1", "(count_leaves {8 {0}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {4}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.450289}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {6 {8 {7} {5 {7}}}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {8}) -> 1", "(count_leaves {8}) -> 1", "(count_leaves {0}) -> 1", "(count_leaves {8 {4} {1}}) -> 2", "(count_leaves {0 {3} {8 {6} {1}}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {0}) -> 1", "(count_leaves {1}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.729812}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {3 {0} {3 {2 {6} {2}} {9}}}) -> 4", "(count_leaves {}) -> 0", "(count_leaves {9}) -> 1", "(count_leaves {4}) -> 1", "(count_leaves {8 {7}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {1 {9} {5 {0} {8}}}) -> 3", "(count_leaves {6}) -> 1", "(count_leaves {3}) -> 1", "(count_leaves {8 {3 {5} {6}} {3 {7}}}) -> 3", "(count_leaves {1 {4} {5}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.484784}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {6}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {3 {5}}) -> 1", "(count_leaves {9}) -> 1", "(count_leaves {5 {5} {5}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {8 {6 {6} {6 {9} {1}}}}) -> 3", "(count_leaves {7}) -> 1", "(count_leaves {2 {1} {7}}) -> 2", "(count_leaves {4 {3} {4 {8}}}) -> 2", "(count_leaves {9}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.440748}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {9 {0} {0}}) -> 2", "(count_leaves {6}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {6 {8}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {9 {3 {4}} {4 {8} {9}}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {8}) -> 1", "(count_leaves {3 {2} {7 {8} {3}}}) -> 3", "(count_leaves {7 {2 {5}}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.538592}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {9}) -> 1", "(count_leaves {5 {4 {7 {6} {8}} {8 {7} {2}}} {9 {6 {1}}}}) -> 5", "(count_leaves {0 {8 {5 {5} {0}}}}) -> 2", "(count_leaves {5 {3} {3}}) -> 2", "(count_leaves {8 {2}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {6 {6 {5} {2}} {9 {7}}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {1}) -> 1", "(count_leaves {8 {6}}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.7556}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8 {7 {7 {4} {2}} {6 {1}}} {7 {6 {5} {8}} {1}}}) -> 6", "(count_leaves {7 {7 {2}}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {9 {0}}) -> 1", "(count_leaves {9 {1}}) -> 1", "(count_leaves {4 {9} {5}}) -> 2", "(count_leaves {3}) -> 1", "(count_leaves {2 {7} {6 {0}}}) -> 2", "(count_leaves {3 {7} {4}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {7}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.788022}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {3 {7}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {8 {8}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {9 {2 {4 {3}}} {5 {6 {7} {5}}}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {1 {4}}) -> 1", "(count_leaves {0 {1} {2 {8}}}) -> 2", "(count_leaves {7}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.780202}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {6 {7 {7}}}) -> 1", "(count_leaves {9 {2} {9}}) -> 2", "(count_leaves {5 {7} {9}}) -> 2", "(count_leaves {2 {3}}) -> 1", "(count_leaves {3 {9}}) -> 1", "(count_leaves {7 {5 {6} {9}}}) -> 2", "(count_leaves {8 {4 {7 {0}}}}) -> 1", "(count_leaves {2}) -> 1", "(count_leaves {3 {8 {5}}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {3 {2 {9}}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.564952}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {1 {6 {5} {0 {2} {5}}}}) -> 3", "(count_leaves {5 {0} {5 {2} {1}}}) -> 3", "(count_leaves {7 {4 {7}}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {0 {3} {5}}) -> 2", "(count_leaves {0}) -> 1", "(count_leaves {2}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.566747}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {0 {6 {5}}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {4}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {9 {3}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {9}) -> 1", "(count_leaves {3}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {2}) -> 1", "(count_leaves {3}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) 1) 0)) _) _)", "time": 0.047538}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {3 {2}}) -> 1", "(count_leaves {3 {3}}) -> 1", "(count_leaves {4 {0 {8} {2}} {0 {4} {8}}}) -> 4", "(count_leaves {5}) -> 1", "(count_leaves {3}) -> 1", "(count_leaves {8 {1 {0} {5}} {7 {3}}}) -> 3", "(count_leaves {3 {0} {7 {8 {5}} {7 {4}}}}) -> 3", "(count_leaves {9 {6}}) -> 1", "(count_leaves {5}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {2}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.777947}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {8 {1} {5}}) -> 2", "(count_leaves {5 {4}}) -> 1", "(count_leaves {8 {9} {3}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {8 {5 {8 {4}} {9}}}) -> 2", "(count_leaves {3}) -> 1", "(count_leaves {7 {5 {2}}}) -> 1", "(count_leaves {1}) -> 1", "(count_leaves {6 {1 {0} {7}} {8 {2} {4}}}) -> 4"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.784538}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {2}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {5 {4 {2}} {5 {6}}}) -> 2", "(count_leaves {8}) -> 1", "(count_leaves {0 {7}}) -> 1", "(count_leaves {5 {5 {1 {0}} {2}}}) -> 2", "(count_leaves {8}) -> 1", "(count_leaves {9}) -> 1", "(count_leaves {0 {8} {0}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {8 {6 {3}}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.743138}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {8 {0} {0}}) -> 2", "(count_leaves {4 {9 {0}}}) -> 1", "(count_leaves {7 {9}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {1 {5}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {6 {6} {0}}) -> 2", "(count_leaves {6}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.769112}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {9 {8}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {5}) -> 1", "(count_leaves {8 {9 {6} {7}}}) -> 2", "(count_leaves {5}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {2 {6} {4}}) -> 2", "(count_leaves {5 {5 {5 {1} {1}} {9}}}) -> 3", "(count_leaves {1 {9}}) -> 1", "(count_leaves {1 {4 {7 {8} {0}} {7 {1} {3}}} {2 {1}}}) -> 5"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.660724}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {4 {0 {0} {2}}}) -> 2", "(count_leaves {7}) -> 1", "(count_leaves {1 {1 {8} {0 {7} {8}}}}) -> 3", "(count_leaves {2 {4 {9} {3}}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {7 {2} {2}}) -> 2", "(count_leaves {0 {2} {7}}) -> 2", "(count_leaves {9}) -> 1", "(count_leaves {7 {1} {5}}) -> 2", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.762561}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {3 {1}}) -> 1", "(count_leaves {2 {3 {4} {5}} {4 {9}}}) -> 3", "(count_leaves {5}) -> 1", "(count_leaves {1}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {6 {4 {9 {2} {4}}} {8}}) -> 3", "(count_leaves {4 {5} {8}}) -> 2", "(count_leaves {8 {9}}) -> 1", "(count_leaves {4 {5 {2 {9} {0}}} {8}}) -> 3", "(count_leaves {2}) -> 1", "(count_leaves {0}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.56466}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8}) -> 1", "(count_leaves {8 {8} {0}}) -> 2", "(count_leaves {6 {1}}) -> 1", "(count_leaves {2 {8} {7}}) -> 2", "(count_leaves {9 {5} {4 {3} {9}}}) -> 3", "(count_leaves {1 {3}}) -> 1", "(count_leaves {6 {8} {3}}) -> 2", "(count_leaves {5}) -> 1", "(count_leaves {2}) -> 1", "(count_leaves {5 {6 {6}} {5}}) -> 2", "(count_leaves {6}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.593545}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {7}) -> 1", "(count_leaves {3}) -> 1", "(count_leaves {7 {3}}) -> 1", "(count_leaves {9 {4} {3}}) -> 2", "(count_leaves {7 {8 {3} {5 {8} {5}}}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {6 {3} {1}}) -> 2", "(count_leaves {0 {4} {1 {7}}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.568583}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {5 {6} {6}}) -> 2", "(count_leaves {7 {6 {4}}}) -> 1", "(count_leaves {1 {0} {5}}) -> 2", "(count_leaves {8}) -> 1", "(count_leaves {5}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {7 {2 {7}}}) -> 1", "(count_leaves {3 {0} {2}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {5 {5 {9}}}) -> 1", "(count_leaves {5 {0}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.622331}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {2 {6} {5}}) -> 2", "(count_leaves {8 {3}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {4 {3}}) -> 1", "(count_leaves {7 {5 {8} {2}} {9}}) -> 3", "(count_leaves {6 {7} {8}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {5}) -> 1", "(count_leaves {5 {2 {0} {8}}}) -> 2", "(count_leaves {0}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.598931}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {7}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {7 {0 {0}}}) -> 1", "(count_leaves {7 {3 {8 {8} {8}}} {1}}) -> 3", "(count_leaves {3 {2}}) -> 1", "(count_leaves {3}) -> 1", "(count_leaves {4 {1} {1 {9 {4}} {5 {9} {5}}}}) -> 4", "(count_leaves {}) -> 0", "(count_leaves {3 {1 {2 {1} {8}} {5}} {8 {8 {7}} {8}}}) -> 5", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.582803}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {3 {7 {3} {5}}}) -> 2", "(count_leaves {9}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {0 {5}}) -> 1", "(count_leaves {1 {5 {2}} {1 {8}}}) -> 2", "(count_leaves {6}) -> 1", "(count_leaves {3}) -> 1", "(count_leaves {8 {4}}) -> 1", "(count_leaves {4 {5}}) -> 1", "(count_leaves {0 {1} {3}}) -> 2", "(count_leaves {9 {0}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.620613}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {7}) -> 1", "(count_leaves {4 {2 {1}} {1 {0}}}) -> 2", "(count_leaves {7 {1} {7}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {5 {8}}) -> 1", "(count_leaves {2 {6}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {2 {2 {1}}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {7 {2 {7} {7}}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.567937}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {5 {4 {1}} {4 {5}}}) -> 2", "(count_leaves {9 {9 {2 {5} {0}}}}) -> 2", "(count_leaves {6 {2 {4} {7}} {5 {4} {5}}}) -> 4", "(count_leaves {4 {0} {5}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {7 {5 {5}}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {5 {3} {0}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.673018}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {9 {2} {6}}) -> 2", "(count_leaves {3 {3}}) -> 1", "(count_leaves {6 {6}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {6 {7}}) -> 1", "(count_leaves {6}) -> 1", "(count_leaves {1 {5}}) -> 1", "(count_leaves {9}) -> 1", "(count_leaves {5 {7 {2} {3}} {2 {8} {2}}}) -> 4"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.531525}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {1 {6}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {5 {3 {3}}}) -> 1", "(count_leaves {6}) -> 1", "(count_leaves {2 {6} {9 {4} {6}}}) -> 3", "(count_leaves {3}) -> 1", "(count_leaves {8}) -> 1", "(count_leaves {8}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {4 {2 {9} {8 {8}}} {3}}) -> 3", "(count_leaves {1}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.497404}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {0 {8 {0 {9} {8}} {4 {5}}} {9}}) -> 4", "(count_leaves {5 {3}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {5 {1}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {2}) -> 1", "(count_leaves {1 {1} {2}}) -> 2", "(count_leaves {4}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {8 {9 {0} {9}} {1}}) -> 3"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.575532}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8 {4} {7}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {3 {5 {0 {2}} {6 {4} {3}}} {7 {5} {0 {1}}}}) -> 5", "(count_leaves {0}) -> 1", "(count_leaves {9}) -> 1", "(count_leaves {2 {8} {5}}) -> 2", "(count_leaves {8}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {4 {7}}) -> 1", "(count_leaves {5 {4}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.479948}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {4 {1 {5}}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {4 {3 {2} {6}}}) -> 2", "(count_leaves {5 {5 {8} {3}} {6}}) -> 3", "(count_leaves {8 {9 {3} {1}} {2 {9}}}) -> 3", "(count_leaves {0 {7 {6 {1} {8}}}}) -> 2", "(count_leaves {5 {2} {4}}) -> 2", "(count_leaves {0}) -> 1", "(count_leaves {3 {9} {4}}) -> 2", "(count_leaves {0}) -> 1", "(count_leaves {4 {4 {5}}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.481657}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8 {4 {1 {9} {5}}}}) -> 2", "(count_leaves {7}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {2}) -> 1", "(count_leaves {7}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {8 {6} {9}}) -> 2", "(count_leaves {5}) -> 1", "(count_leaves {6 {7 {4 {8} {2}}}}) -> 2", "(count_leaves {7 {2} {8 {5 {8}}}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.544797}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8}) -> 1", "(count_leaves {0 {5} {3}}) -> 2", "(count_leaves {3 {1 {6}}}) -> 1", "(count_leaves {8 {4}}) -> 1", "(count_leaves {9 {2} {3 {2}}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {3 {7 {4}}}) -> 1", "(count_leaves {9 {2} {8}}) -> 2", "(count_leaves {0 {8} {6}}) -> 2", "(count_leaves {7 {0 {4} {8}}}) -> 2", "(count_leaves {3}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.494032}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {3 {6 {4}}}) -> 1", "(count_leaves {4 {0 {8 {6}}}}) -> 1", "(count_leaves {6}) -> 1", "(count_leaves {7 {7} {1 {9}}}) -> 2", "(count_leaves {2}) -> 1", "(count_leaves {7 {3} {6}}) -> 2", "(count_leaves {9}) -> 1", "(count_leaves {4}) -> 1", "(count_leaves {9}) -> 1", "(count_leaves {6}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.500317}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {8 {6 {6}} {3 {9}}}) -> 2", "(count_leaves {7 {6} {3}}) -> 2", "(count_leaves {9 {5 {3 {6}}}}) -> 1", "(count_leaves {7 {4}}) -> 1", "(count_leaves {7}) -> 1", "(count_leaves {7}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.514237}
