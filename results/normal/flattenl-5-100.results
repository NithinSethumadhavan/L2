{"time": 0.04253, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[8 0 8 7]}) -> [8 0 8 7]", "(flattenl {[6 9 9]}) -> [6 9 9]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)"}
{"time": 0.149915, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[1] {[8 3 7 6 9] {[5 0 9 6 6]} {[]}} {[] {[8 0]} {[0 1]}}}) -> [1 8 3 7 6 9 5 0 9 6 6 8 0 0 1]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.14822, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[7 7 6 9] {[6 6 5 5]} {[6 1 6 4] {[9 1 3 1 6]}}}) -> [7 7 6 9 6 6 5 5 6 1 6 4 9 1 3 1 6]", "(flattenl {[8 9 9] {[]}}) -> [8 9 9]", "(flattenl {[4 8 9 0] {[8] {[3 0]}}}) -> [4 8 9 0 8 3 0]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.156678, "name": "flattenl", "examples": ["(flattenl {[]}) -> []", "(flattenl {[3 6 9] {[6 3 2 7 1] {[9 3 1 9 0]} {[]}} {[3 4 0 1 7] {[6 5 1]}}}) -> [3 6 9 6 3 2 7 1 9 3 1 9 0 3 4 0 1 7 6 5 1]", "(flattenl {[7 6 5] {[4]}}) -> [7 6 5 4]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.244088, "name": "flattenl", "examples": ["(flattenl {[0 6 9 2 0] {[3 6]}}) -> [0 6 9 2 0 3 6]", "(flattenl {[5 5 6 9 7]}) -> [5 5 6 9 7]", "(flattenl {[4 8 7 8] {[1 5 2 4]}}) -> [4 8 7 8 1 5 2 4]", "(flattenl {[9 4 8 7] {[5 7 8 6 0]}}) -> [9 4 8 7 5 7 8 6 0]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.142346, "name": "flattenl", "examples": ["(flattenl {[8]}) -> [8]", "(flattenl {[1 3 5 0] {[6]}}) -> [1 3 5 0 6]", "(flattenl {[]}) -> []", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.142144, "name": "flattenl", "examples": ["(flattenl {[0 0] {[3]}}) -> [0 0 3]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.144244, "name": "flattenl", "examples": ["(flattenl {[] {[]} {[4 2 8]}}) -> [4 2 8]", "(flattenl {}) -> []", "(flattenl {[9 5 2] {[2 4 3 2]}}) -> [9 5 2 2 4 3 2]", "(flattenl {[4 3] {[4 2 6]}}) -> [4 3 4 2 6]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.157876, "name": "flattenl", "examples": ["(flattenl {[5 3 7 2] {[5 1 4 9]}}) -> [5 3 7 2 5 1 4 9]", "(flattenl {[5 2] {[]} {[4 0 7 7] {[6 5 5 8 1]} {[4]}}}) -> [5 2 4 0 7 7 6 5 5 8 1 4]", "(flattenl {}) -> []", "(flattenl {[4 3 8 3 7] {[8]} {[6 9 3 1] {[4 2] {[]} {[2 2 2]}} {[7 4]}}}) -> [4 3 8 3 7 8 6 9 3 1 4 2 2 2 2 7 4]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.129949, "name": "flattenl", "examples": ["(flattenl {[9 9 4] {[0]}}) -> [9 9 4 0]", "(flattenl {[3 9 5 3 3]}) -> [3 9 5 3 3]", "(flattenl {[4 9 6]}) -> [4 9 6]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.144811, "name": "flattenl", "examples": ["(flattenl {[7 2 0] {[] {[3 6 6 6 6] {[6 6 9 4 0]}}} {[4 4]}}) -> [7 2 0 3 6 6 6 6 6 6 9 4 0 4 4]", "(flattenl {[6 6 5 8] {[9 6] {[3 5 3]}}}) -> [6 6 5 8 9 6 3 5 3]", "(flattenl {}) -> []", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.163834, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[6] {[2 6 5 8]}}) -> [6 2 6 5 8]", "(flattenl {[7 5 8 8] {[0 8 9 8]}}) -> [7 5 8 8 0 8 9 8]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.256916, "name": "flattenl", "examples": ["(flattenl {[7]}) -> [7]", "(flattenl {[0]}) -> [0]", "(flattenl {[9 6 9 0] {[] {[4 9 9] {[5 5 1]}}} {[2 1 2 1] {[9] {[2 5 5]}}}}) -> [9 6 9 0 4 9 9 5 5 1 2 1 2 1 9 2 5 5]", "(flattenl {[1 1 8] {[2]}}) -> [1 1 8 2]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.240109, "name": "flattenl", "examples": ["(flattenl {[] {[2 6 4 9 7] {[1 3 5]}}}) -> [2 6 4 9 7 1 3 5]", "(flattenl {[4] {[]}}) -> [4]", "(flattenl {[5 8 4 6 5] {[] {[]} {[6 1 7]}}}) -> [5 8 4 6 5 6 1 7]", "(flattenl {[]}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.225012, "name": "flattenl", "examples": ["(flattenl {[6 3 2 8] {[9 2 6 3 5]}}) -> [6 3 2 8 9 2 6 3 5]", "(flattenl {[1 6 1 7 5]}) -> [1 6 1 7 5]", "(flattenl {[5 8] {[1 3 4 6] {[1 4 7 6]} {[5 7 3 4] {[3]} {[3]}}} {[4 1] {[7 0 3] {[0]} {[9]}} {[5 1 6 2] {[4 7 5 1 3]}}}}) -> [5 8 1 3 4 6 1 4 7 6 5 7 3 4 3 3 4 1 7 0 3 0 9 5 1 6 2 4 7 5 1 3]", "(flattenl {[] {[7 3 3 6]}}) -> [7 3 3 6]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.144799, "name": "flattenl", "examples": ["(flattenl {[3] {[8 2 5 9 4] {[6]}}}) -> [3 8 2 5 9 4 6]", "(flattenl {}) -> []", "(flattenl {[9 1 0 6 1] {[1 5 5 3 8] {[9] {[0]} {[3 7 7]}}} {[] {[]} {[8 1]}}}) -> [9 1 0 6 1 1 5 5 3 8 9 0 3 7 7 8 1]", "(flattenl {[5] {[3 0 9 0 2]} {[9 1 5 0]}}) -> [5 3 0 9 0 2 9 1 5 0]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.192659, "name": "flattenl", "examples": ["(flattenl {[6 3 6] {[1 9] {[3 6 4] {[1 3]}} {[3] {[9]} {[0]}}}}) -> [6 3 6 1 9 3 6 4 1 3 3 9 0]", "(flattenl {[2 4 4 5] {[8 0 7 4 7]} {[0 2 8 7 4] {[5 1 4] {[6 2 6]} {[6 7 8]}} {[4 4 0 1] {[7 8 1 6 1]} {[6 1 6 1 2]}}}}) -> [2 4 4 5 8 0 7 4 7 0 2 8 7 4 5 1 4 6 2 6 6 7 8 4 4 0 1 7 8 1 6 1 6 1 6 1 2]", "(flattenl {[7 4 3 8]}) -> [7 4 3 8]", "(flattenl {[0 2] {[7 4 0 9] {[7 2 1 0 1] {[0 6 7 1]}}}}) -> [0 2 7 4 0 9 7 2 1 0 1 0 6 7 1]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.029502, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[6 9 1] {[]}}) -> [6 9 1]", "(flattenl {[3 3]}) -> [3 3]", "(flattenl {[6]}) -> [6]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)"}
{"time": 0.057263, "name": "flattenl", "examples": ["(flattenl {[]}) -> []", "(flattenl {}) -> []", "(flattenl {[2 1 7 5]}) -> [2 1 7 5]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)"}
{"time": 0.15102, "name": "flattenl", "examples": ["(flattenl {[5 1 3 3] {[3 9 2 9]} {[9 5]}}) -> [5 1 3 3 3 9 2 9 9 5]", "(flattenl {[5] {[5 9 0 4 5]} {[6] {[1]}}}) -> [5 5 9 0 4 5 6 1]", "(flattenl {[5 7 0 0] {[0 5]} {[2 3 8 0] {[9 1 8] {[]} {[4 7 6 3 7]}}}}) -> [5 7 0 0 0 5 2 3 8 0 9 1 8 4 7 6 3 7]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.154723, "name": "flattenl", "examples": ["(flattenl {[2 8 8 9 4]}) -> [2 8 8 9 4]", "(flattenl {[1 1 1] {[4]}}) -> [1 1 1 4]", "(flattenl {[0 7 5] {[4]}}) -> [0 7 5 4]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.128604, "name": "flattenl", "examples": ["(flattenl {[] {[0 4 5 1]}}) -> [0 4 5 1]", "(flattenl {[8 7 2]}) -> [8 7 2]", "(flattenl {[5 9 2 4] {[]}}) -> [5 9 2 4]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.118213, "name": "flattenl", "examples": ["(flattenl {[4 1 9] {[9 1 4] {[8 3]} {[]}} {[] {[0 9 1]} {[]}}}) -> [4 1 9 9 1 4 8 3 0 9 1]", "(flattenl {[2 8 9 6 2] {[7 7 8] {[9 5 9 5]} {[7 0 7 0]}} {[0 4 7 2 8]}}) -> [2 8 9 6 2 7 7 8 9 5 9 5 7 0 7 0 0 4 7 2 8]", "(flattenl {}) -> []", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.25273, "name": "flattenl", "examples": ["(flattenl {[3 8 4] {[6 8 6 9 4] {[1 1 4 1]} {[0 6 7 7] {[4 9 5 3]}}}}) -> [3 8 4 6 8 6 9 4 1 1 4 1 0 6 7 7 4 9 5 3]", "(flattenl {[8] {[0] {[7 7 0]}} {[6 8 4 1 9] {[3 6 3]} {[6 7 1 2 7]}}}) -> [8 0 7 7 0 6 8 4 1 9 3 6 3 6 7 1 2 7]", "(flattenl {[1 9 5] {[1 7 3 7 8] {[] {[5 5 8]} {[]}} {[]}}}) -> [1 9 5 1 7 3 7 8 5 5 8]", "(flattenl {[]}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.140176, "name": "flattenl", "examples": ["(flattenl {[6] {[4 7 1 1]} {[8 0 6 3] {[0] {[7 4 3 9]}}}}) -> [6 4 7 1 1 8 0 6 3 0 7 4 3 9]", "(flattenl {}) -> []", "(flattenl {[4 1 0]}) -> [4 1 0]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.22346, "name": "flattenl", "examples": ["(flattenl {[6 5 6 1 9] {[1 1] {[7]} {[1]}}}) -> [6 5 6 1 9 1 1 7 1]", "(flattenl {[9 9 4]}) -> [9 9 4]", "(flattenl {[6 8 8] {[]} {[]}}) -> [6 8 8]", "(flattenl {[2 3]}) -> [2 3]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.16376, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {}) -> []", "(flattenl {[5 2 7 1] {[] {[8 8 2] {[]}}}}) -> [5 2 7 1 8 8 2]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.142712, "name": "flattenl", "examples": ["(flattenl {[3 0]}) -> [3 0]", "(flattenl {[0 8 8 1] {[7 3] {[]}} {[2 2 8 5] {[]} {[8 9 1 3]}}}) -> [0 8 8 1 7 3 2 2 8 5 8 9 1 3]", "(flattenl {[6 0 3 0 0]}) -> [6 0 3 0 0]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.238928, "name": "flattenl", "examples": ["(flattenl {[8]}) -> [8]", "(flattenl {[8 3 1] {[4 4 7] {[7 6]}}}) -> [8 3 1 4 4 7 7 6]", "(flattenl {[4 0 3 4 3] {[] {[]} {[8 7 5 2]}} {[] {[]}}}) -> [4 0 3 4 3 8 7 5 2]", "(flattenl {[6 4 1 8 6]}) -> [6 4 1 8 6]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.268307, "name": "flattenl", "examples": ["(flattenl {[2 3 2 6 2] {[8 6]} {[2]}}) -> [2 3 2 6 2 8 6 2]", "(flattenl {[4 5 3 4 3] {[3 9] {[] {[0 0 8 1 2]}} {[9 2 2 6 5] {[3 1 3 7 3]}}} {[8 0] {[4 9 8]}}}) -> [4 5 3 4 3 3 9 0 0 8 1 2 9 2 2 6 5 3 1 3 7 3 8 0 4 9 8]", "(flattenl {[]}) -> []", "(flattenl {[6 2]}) -> [6 2]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.260651, "name": "flattenl", "examples": ["(flattenl {[7 7] {[7 5]}}) -> [7 7 7 5]", "(flattenl {[7 7 6] {[9]} {[7 7]}}) -> [7 7 6 9 7 7]", "(flattenl {[3] {[4 3] {[5 1 8 8] {[2 0 5]}}}}) -> [3 4 3 5 1 8 8 2 0 5]", "(flattenl {[] {[1 6]}}) -> [1 6]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.264714, "name": "flattenl", "examples": ["(flattenl {[9] {[2 6 9 3] {[7 1] {[]}}} {[8 1 4 5]}}) -> [9 2 6 9 3 7 1 8 1 4 5]", "(flattenl {[]}) -> []", "(flattenl {[4 3 0 4 8]}) -> [4 3 0 4 8]", "(flattenl {[2 9 3] {[3 3 0 5]} {[]}}) -> [2 9 3 3 3 0 5]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.238545, "name": "flattenl", "examples": ["(flattenl {[0 2 0] {[7 4 8] {[8 9 8 7] {[]}}} {[]}}) -> [0 2 0 7 4 8 8 9 8 7]", "(flattenl {[] {[7 0] {[6 9]} {[5]}} {[1 4 2 1] {[5 1 8] {[7 8 0 4 6]} {[4 4 2 4 5]}}}}) -> [7 0 6 9 5 1 4 2 1 5 1 8 7 8 0 4 6 4 4 2 4 5]", "(flattenl {[1 8] {[]} {[0 3 4]}}) -> [1 8 0 3 4]", "(flattenl {[5]}) -> [5]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.180231, "name": "flattenl", "examples": ["(flattenl {[1 8 7 9] {[3 5]} {[3 3 8 9]}}) -> [1 8 7 9 3 5 3 3 8 9]", "(flattenl {[0 9 2] {[]}}) -> [0 9 2]", "(flattenl {[2 8] {[6]} {[0 9 6 0 7]}}) -> [2 8 6 0 9 6 0 7]", "(flattenl {[4 8] {[]} {[6 8]}}) -> [4 8 6 8]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.139146, "name": "flattenl", "examples": ["(flattenl {[6] {[4 0]}}) -> [6 4 0]", "(flattenl {}) -> []", "(flattenl {[1 8] {[4 4 4] {[9]} {[6 2 3]}} {[8 0 3 6]}}) -> [1 8 4 4 4 9 6 2 3 8 0 3 6]", "(flattenl {[4 8 2 5]}) -> [4 8 2 5]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.107771, "name": "flattenl", "examples": ["(flattenl {[2 0 8 0]}) -> [2 0 8 0]", "(flattenl {[] {[2 0 7 1 7]} {[0 9 2 7]}}) -> [2 0 7 1 7 0 9 2 7]", "(flattenl {}) -> []", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.130256, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[5 8 8 5]}) -> [5 8 8 5]", "(flattenl {[] {[3 4 7]}}) -> [3 4 7]", "(flattenl {[2 0 9 4] {[1 6] {[3 3 2]}}}) -> [2 0 9 4 1 6 3 3 2]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.132916, "name": "flattenl", "examples": ["(flattenl {[3 3]}) -> [3 3]", "(flattenl {}) -> []", "(flattenl {[3 8 9 1] {[8 9]} {[]}}) -> [3 8 9 1 8 9]", "(flattenl {[4]}) -> [4]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.134935, "name": "flattenl", "examples": ["(flattenl {[2] {[]}}) -> [2]", "(flattenl {[1 9 1] {[2 9 2] {[2 6 8 5 5]}}}) -> [1 9 1 2 9 2 2 6 8 5 5]", "(flattenl {}) -> []", "(flattenl {[4 0 5 8] {[]}}) -> [4 0 5 8]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.126838, "name": "flattenl", "examples": ["(flattenl {[2] {[8] {[6]}} {[] {[]}}}) -> [2 8 6]", "(flattenl {}) -> []", "(flattenl {[0 6 1 7 4] {[5 9 8 3] {[5 6 5] {[5 7 9 8]}}}}) -> [0 6 1 7 4 5 9 8 3 5 6 5 5 7 9 8]", "(flattenl {[] {[] {[4 9 3]} {[6 7 5 2 0] {[1 1]} {[]}}} {[]}}) -> [4 9 3 6 7 5 2 0 1 1]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.137521, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[1 2 1 2 7] {[2]} {[3 5 7 3 7] {[7]}}}) -> [1 2 1 2 7 2 3 5 7 3 7 7]", "(flattenl {[7] {[9]}}) -> [7 9]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.147307, "name": "flattenl", "examples": ["(flattenl {[1 2 2 7 4] {[3 8 0 2]} {[2 9 9 4 2] {[8 8 1] {[7 2 5 3 0]} {[0]}} {[8 2 6 0 7]}}}) -> [1 2 2 7 4 3 8 0 2 2 9 9 4 2 8 8 1 7 2 5 3 0 0 8 2 6 0 7]", "(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {[9 4 1] {[8 8 5 2 6]}}) -> [9 4 1 8 8 5 2 6]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.156092, "name": "flattenl", "examples": ["(flattenl {[6 7 6 9] {[] {[9]} {[9 0 0 9 3]}} {[] {[]} {[3 7]}}}) -> [6 7 6 9 9 9 0 0 9 3 3 7]", "(flattenl {[9] {[5 7 8 6]} {[]}}) -> [9 5 7 8 6]", "(flattenl {[5 0 3] {[5]}}) -> [5 0 3 5]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.150891, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[3 0] {[2 8 2 8]}}) -> [3 0 2 8 2 8]", "(flattenl {[5 2 9 2] {[5] {[0]} {[]}} {[7 5]}}) -> [5 2 9 2 5 0 7 5]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.130223, "name": "flattenl", "examples": ["(flattenl {[5 4 2 2 5] {[4 4 9]}}) -> [5 4 2 2 5 4 4 9]", "(flattenl {[]}) -> []", "(flattenl {[]}) -> []", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.150615, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[7 4] {[0]}}) -> [7 4 0]", "(flattenl {[0] {[4 9 3]}}) -> [0 4 9 3]", "(flattenl {[3 0 2 4 6] {[9 9 6 3 1]} {[5 4 6 1 2] {[] {[6 9 3 8]}}}}) -> [3 0 2 4 6 9 9 6 3 1 5 4 6 1 2 6 9 3 8]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.13716, "name": "flattenl", "examples": ["(flattenl {[7 9 5 2] {[6] {[1 6 9]} {[1 7 0]}} {[2 8 0 7] {[3 8 5 0 5]} {[7 4 0 3 4]}}}) -> [7 9 5 2 6 1 6 9 1 7 0 2 8 0 7 3 8 5 0 5 7 4 0 3 4]", "(flattenl {[8 0]}) -> [8 0]", "(flattenl {}) -> []", "(flattenl {[1 3] {[1 6]}}) -> [1 3 1 6]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.263447, "name": "flattenl", "examples": ["(flattenl {[7 8 1] {[] {[] {[]} {[5 4 5 6 9]}}} {[1]}}) -> [7 8 1 5 4 5 6 9 1]", "(flattenl {[0] {[4 9 1] {[]} {[1 6 2 7]}} {[2] {[5 5 2]}}}) -> [0 4 9 1 1 6 2 7 2 5 5 2]", "(flattenl {[9] {[0 2 0 2] {[8]}} {[5 5 0 1 7]}}) -> [9 0 2 0 2 8 5 5 0 1 7]", "(flattenl {[8 3 5]}) -> [8 3 5]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.129512, "name": "flattenl", "examples": ["(flattenl {[9 1] {[8 7 8]} {[4 2 3 7]}}) -> [9 1 8 7 8 4 2 3 7]", "(flattenl {[1 7 2 9 9]}) -> [1 7 2 9 9]", "(flattenl {}) -> []", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.150177, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[5 6]}) -> [5 6]", "(flattenl {[0 1 7 9] {[1 0]}}) -> [0 1 7 9 1 0]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.220823, "name": "flattenl", "examples": ["(flattenl {[8 1 3]}) -> [8 1 3]", "(flattenl {[2 3] {[5 1 0 2]}}) -> [2 3 5 1 0 2]", "(flattenl {[] {[1 6 4 7 4] {[7 1 4 3]} {[7]}} {[8 0] {[0 2]}}}) -> [1 6 4 7 4 7 1 4 3 7 8 0 0 2]", "(flattenl {[5 3 6] {[8 1] {[6 6 8 4]} {[5]}}}) -> [5 3 6 8 1 6 6 8 4 5]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.147001, "name": "flattenl", "examples": ["(flattenl {[2] {[1]} {[8 9 3]}}) -> [2 1 8 9 3]", "(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[6 7] {[9 2 1 9] {[7]}}}) -> [6 7 9 2 1 9 7]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.116403, "name": "flattenl", "examples": ["(flattenl {[6]}) -> [6]", "(flattenl {[2 2 2 9] {[7 4 4 2 9]} {[5 2 7 4 0]}}) -> [2 2 2 9 7 4 4 2 9 5 2 7 4 0]", "(flattenl {}) -> []", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.142305, "name": "flattenl", "examples": ["(flattenl {[3 7 1 8] {[]} {[3]}}) -> [3 7 1 8 3]", "(flattenl {}) -> []", "(flattenl {[0 2 5 1]}) -> [0 2 5 1]", "(flattenl {[2 1 5 7 3]}) -> [2 1 5 7 3]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.217824, "name": "flattenl", "examples": ["(flattenl {[5 9 1 9] {[] {[5 6 3]}} {[2 4 2 0 4] {[2 1 0 4 7]}}}) -> [5 9 1 9 5 6 3 2 4 2 0 4 2 1 0 4 7]", "(flattenl {[]}) -> []", "(flattenl {[8] {[7 0 8]}}) -> [8 7 0 8]", "(flattenl {[4 7 2 9] {[6 5 2 8 2]}}) -> [4 7 2 9 6 5 2 8 2]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.237587, "name": "flattenl", "examples": ["(flattenl {[2 7 8]}) -> [2 7 8]", "(flattenl {[8] {[8 0 6] {[1 1 6 0 9]} {[6 2] {[4 6]} {[8 6 7 1]}}}}) -> [8 8 0 6 1 1 6 0 9 6 2 4 6 8 6 7 1]", "(flattenl {[3 5 4 5 5]}) -> [3 5 4 5 5]", "(flattenl {[1]}) -> [1]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.218003, "name": "flattenl", "examples": ["(flattenl {[5 1 2 3 5] {[4 5 1] {[1 0 4 6 3]}} {[] {[5 1 0 4]} {[4 3]}}}) -> [5 1 2 3 5 4 5 1 1 0 4 6 3 5 1 0 4 4 3]", "(flattenl {[9 0 2] {[0 1]} {[2 4 9 2 2] {[1 4]}}}) -> [9 0 2 0 1 2 4 9 2 2 1 4]", "(flattenl {[8] {[0 8]} {[1 2]}}) -> [8 0 8 1 2]", "(flattenl {[2 2 9 7]}) -> [2 2 9 7]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.139925, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[0] {[4] {[]}}}) -> [0 4]", "(flattenl {[0 6 6 8 1] {[]}}) -> [0 6 6 8 1]", "(flattenl {[0 1 5 0 8] {[8 2 4 4] {[3 4 3 1] {[7 7 3 5]}} {[1 2 3] {[]} {[5 6]}}}}) -> [0 1 5 0 8 8 2 4 4 3 4 3 1 7 7 3 5 1 2 3 5 6]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.243584, "name": "flattenl", "examples": ["(flattenl {[6] {[9] {[8]} {[]}}}) -> [6 9 8]", "(flattenl {[2] {[6 4] {[0 0] {[9 6]}} {[5 1 7 7]}} {[6] {[] {[]} {[4 5 5]}} {[2 0] {[4 7 7]}}}}) -> [2 6 4 0 0 9 6 5 1 7 7 6 4 5 5 2 0 4 7 7]", "(flattenl {[0 4 5]}) -> [0 4 5]", "(flattenl {[6 1 3]}) -> [6 1 3]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.127756, "name": "flattenl", "examples": ["(flattenl {[1 5 0 8]}) -> [1 5 0 8]", "(flattenl {}) -> []", "(flattenl {[7 7 5 2 4] {[1 4 7]}}) -> [7 7 5 2 4 1 4 7]", "(flattenl {[2 5 5 6] {[1 7 5 9 9] {[0 9 4]} {[2] {[3 9]}}}}) -> [2 5 5 6 1 7 5 9 9 0 9 4 2 3 9]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.137843, "name": "flattenl", "examples": ["(flattenl {[] {[8 2 1 3] {[0 6 6 4 4]} {[9 9]}} {[]}}) -> [8 2 1 3 0 6 6 4 4 9 9]", "(flattenl {}) -> []", "(flattenl {[2 9] {[] {[0 5 4 6 4]}}}) -> [2 9 0 5 4 6 4]", "(flattenl {[] {[] {[3 0 8 1 5]} {[4]}}}) -> [3 0 8 1 5 4]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.145665, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[8 8] {[5]}}) -> [8 8 5]", "(flattenl {[6 9] {[0]} {[5] {[1 6]}}}) -> [6 9 0 5 1 6]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.253468, "name": "flattenl", "examples": ["(flattenl {[3 1 8] {[] {[2 0 8 8 3]}}}) -> [3 1 8 2 0 8 8 3]", "(flattenl {[] {[5 2 7 0 1]}}) -> [5 2 7 0 1]", "(flattenl {[3 5 6 3 0] {[2 0 8] {[8 7 8 8]}} {[8 0 1 0 7]}}) -> [3 5 6 3 0 2 0 8 8 7 8 8 8 0 1 0 7]", "(flattenl {[1 3 9 1 9]}) -> [1 3 9 1 9]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.232331, "name": "flattenl", "examples": ["(flattenl {[8 5 6 6 3]}) -> [8 5 6 6 3]", "(flattenl {[8 3] {[9 8 8 5] {[9 0 4 3 9]} {[3 8 3] {[]}}}}) -> [8 3 9 8 8 5 9 0 4 3 9 3 8 3]", "(flattenl {[2 6] {[9 1 0 1 1] {[2] {[3 3 0 3]} {[0]}} {[6 4 5] {[]}}}}) -> [2 6 9 1 0 1 1 2 3 3 0 3 0 6 4 5]", "(flattenl {[0 7] {[4 7]}}) -> [0 7 4 7]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.132574, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[2]}) -> [2]", "(flattenl {[7 6 0] {[7 1 1 8 6] {[9 2 4] {[1 6 3]} {[]}}} {[7 0 0 5] {[6 8 2 5 7]} {[6 4 0 9 6] {[]}}}}) -> [7 6 0 7 1 1 8 6 9 2 4 1 6 3 7 0 0 5 6 8 2 5 7 6 4 0 9 6]", "(flattenl {[7 9] {[9 6 2] {[]} {[8 4 2 1 8]}} {[]}}) -> [7 9 9 6 2 8 4 2 1 8]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.040711, "name": "flattenl", "examples": ["(flattenl {[6 3 5 5]}) -> [6 3 5 5]", "(flattenl {}) -> []", "(flattenl {[8 6 8 9 1]}) -> [8 6 8 9 1]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)"}
{"time": 0.17831, "name": "flattenl", "examples": ["(flattenl {[2 2 9] {[9 3 4]}}) -> [2 2 9 9 3 4]", "(flattenl {[] {[1 1] {[3]}}}) -> [1 1 3]", "(flattenl {[2 8 9]}) -> [2 8 9]", "(flattenl {[4]}) -> [4]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.03761, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[3 5 3 6]}) -> [3 5 3 6]", "(flattenl {[5]}) -> [5]", "(flattenl {[]}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)"}
{"time": 0.138405, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[0 2] {[] {[3 3]}} {[6 9 4] {[8] {[0 2]}} {[9] {[5 5 4 0 6]}}}}) -> [0 2 3 3 6 9 4 8 0 2 9 5 5 4 0 6]", "(flattenl {[9 5 7 8 0] {[6 6]}}) -> [9 5 7 8 0 6 6]", "(flattenl {[9 4]}) -> [9 4]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.124991, "name": "flattenl", "examples": ["(flattenl {[1 0 0]}) -> [1 0 0]", "(flattenl {}) -> []", "(flattenl {[] {[] {[]}} {[3 4 3 2 3] {[8 5 3] {[8 5]}} {[]}}}) -> [3 4 3 2 3 8 5 3 8 5]", "(flattenl {[3 3 6] {[7]} {[4 7 0 4 2]}}) -> [3 3 6 7 4 7 0 4 2]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.205949, "name": "flattenl", "examples": ["(flattenl {[7 3]}) -> [7 3]", "(flattenl {[7 9 5] {[5]} {[] {[7 8]} {[9 3 2 4 5] {[9 3 5]} {[1 9]}}}}) -> [7 9 5 5 7 8 9 3 2 4 5 9 3 5 1 9]", "(flattenl {[0 6] {[]} {[7 8 6 5] {[3 9 5]} {[9 7 5 8]}}}) -> [0 6 7 8 6 5 3 9 5 9 7 5 8]", "(flattenl {[1 4 0] {[8 8 7]} {[8]}}) -> [1 4 0 8 8 7 8]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.205576, "name": "flattenl", "examples": ["(flattenl {[3] {[6 4 1]}}) -> [3 6 4 1]", "(flattenl {[]}) -> []", "(flattenl {[5] {[6 1 8]}}) -> [5 6 1 8]", "(flattenl {[] {[]} {[2 2 1 8]}}) -> [2 2 1 8]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.041706, "name": "flattenl", "examples": ["(flattenl {[6 0 4 1 4]}) -> [6 0 4 1 4]", "(flattenl {}) -> []", "(flattenl {[5 7]}) -> [5 7]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)"}
{"time": 0.219607, "name": "flattenl", "examples": ["(flattenl {[8 4 6 5]}) -> [8 4 6 5]", "(flattenl {[] {[]}}) -> []", "(flattenl {[6 3 9 3 9] {[2 3 2 8]}}) -> [6 3 9 3 9 2 3 2 8]", "(flattenl {[6 6 6 4 6]}) -> [6 6 6 4 6]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.116793, "name": "flattenl", "examples": ["(flattenl {[8 2] {[3 8 1]}}) -> [8 2 3 8 1]", "(flattenl {}) -> []", "(flattenl {[9 2 5] {[9] {[9 8 8 2 4]}} {[7 2 1] {[9 5 7]} {[]}}}) -> [9 2 5 9 9 8 8 2 4 7 2 1 9 5 7]", "(flattenl {[1 7 5 6 3]}) -> [1 7 5 6 3]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.130908, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[5 7 0 7]}) -> [5 7 0 7]", "(flattenl {[3 0 9] {[] {[4 7 3] {[]} {[4 8 7 7]}}}}) -> [3 0 9 4 7 3 4 8 7 7]", "(flattenl {[5 4 2] {[3]}}) -> [5 4 2 3]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.217856, "name": "flattenl", "examples": ["(flattenl {[8 5]}) -> [8 5]", "(flattenl {[0] {[9]} {[7 4]}}) -> [0 9 7 4]", "(flattenl {[3 6 7 7 6] {[0 0 6 0] {[9 2 1 7] {[8 1 3 0 1]} {[5]}}} {[5 5 6] {[6 9 9] {[8 5 2 1 5]}}}}) -> [3 6 7 7 6 0 0 6 0 9 2 1 7 8 1 3 0 1 5 5 5 6 6 9 9 8 5 2 1 5]", "(flattenl {[1 3 4 6] {[8 9 7 0 3] {[0]} {[2 6]}}}) -> [1 3 4 6 8 9 7 0 3 0 2 6]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.140054, "name": "flattenl", "examples": ["(flattenl {[9 4 9]}) -> [9 4 9]", "(flattenl {[6 9 7 9 2] {[5 9 2 2]} {[]}}) -> [6 9 7 9 2 5 9 2 2]", "(flattenl {[] {[]}}) -> []", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.137594, "name": "flattenl", "examples": ["(flattenl {[2 1 5] {[6 2] {[6 0]}}}) -> [2 1 5 6 2 6 0]", "(flattenl {[0]}) -> [0]", "(flattenl {[7 6 2 5] {[8 0 7]}}) -> [7 6 2 5 8 0 7]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.252135, "name": "flattenl", "examples": ["(flattenl {[] {[4 9 9 3]} {[9 4 4 2]}}) -> [4 9 9 3 9 4 4 2]", "(flattenl {[3 7 0 7 5] {[4] {[3 6] {[3 5 8 7]} {[5]}} {[1 5] {[8 0 8 5 4]} {[7]}}}}) -> [3 7 0 7 5 4 3 6 3 5 8 7 5 1 5 8 0 8 5 4 7]", "(flattenl {[1 4 1 8] {[7 4 3]}}) -> [1 4 1 8 7 4 3]", "(flattenl {[3 5] {[2 0] {[6 8]} {[7 5]}}}) -> [3 5 2 0 6 8 7 5]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.11347, "name": "flattenl", "examples": ["(flattenl {[0 8 0 6] {[1 7 6 3 5]}}) -> [0 8 0 6 1 7 6 3 5]", "(flattenl {[5 0 6 9]}) -> [5 0 6 9]", "(flattenl {}) -> []", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.183051, "name": "flattenl", "examples": ["(flattenl {[]}) -> []", "(flattenl {[1] {[] {[]} {[4]}}}) -> [1 4]", "(flattenl {[1 8] {[5 4 2 0] {[7 8] {[5]}} {[4 8 9 3]}}}) -> [1 8 5 4 2 0 7 8 5 4 8 9 3]", "(flattenl {[4 5]}) -> [4 5]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.049913, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[]}) -> []", "(flattenl {[]}) -> []", "(flattenl {[1]}) -> [1]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)"}
{"time": 0.22977, "name": "flattenl", "examples": ["(flattenl {[4] {[1] {[3 7 9 4 2] {[1]} {[9]}}} {[] {[6] {[5 7 0 0 2]}} {[9 5 8] {[]}}}}) -> [4 1 3 7 9 4 2 1 9 6 5 7 0 0 2 9 5 8]", "(flattenl {[3 4] {[] {[5 3 5] {[9 8 5 5 3]} {[0]}} {[4 0 9 2] {[7 9 4 8 7]}}}}) -> [3 4 5 3 5 9 8 5 5 3 0 4 0 9 2 7 9 4 8 7]", "(flattenl {[9 9] {[]}}) -> [9 9]", "(flattenl {[7] {[] {[6 5] {[]} {[0 0 8]}} {[4 8 4 6]}} {[0 1 1 3] {[5 8] {[6 4 2 1 1]}}}}) -> [7 6 5 0 0 8 4 8 4 6 0 1 1 3 5 8 6 4 2 1 1]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.216544, "name": "flattenl", "examples": ["(flattenl {[0 1 6 4] {[5 3] {[] {[8 6 5]}}}}) -> [0 1 6 4 5 3 8 6 5]", "(flattenl {[0] {[8 6 4]} {[9 5 6] {[7 5 7] {[7 9 3 3]} {[7 8]}} {[3 0 5] {[7]} {[5]}}}}) -> [0 8 6 4 9 5 6 7 5 7 7 9 3 3 7 8 3 0 5 7 5]", "(flattenl {[6 2] {[2 8 5 6 1]} {[4 3 5] {[6 4 4 9 6] {[4]} {[]}} {[3 1 0 0 2]}}}) -> [6 2 2 8 5 6 1 4 3 5 6 4 4 9 6 4 3 1 0 0 2]", "(flattenl {[0 3] {[6] {[2 7]}} {[8 6] {[4]}}}) -> [0 3 6 2 7 8 6 4]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.163535, "name": "flattenl", "examples": ["(flattenl {[7 9] {[3 3 5 4 4] {[9 1 9] {[3 8 2 1]} {[8 8 2]}}}}) -> [7 9 3 3 5 4 4 9 1 9 3 8 2 1 8 8 2]", "(flattenl {[7 1 0]}) -> [7 1 0]", "(flattenl {[6 4 0 6 3] {[6]}}) -> [6 4 0 6 3 6]", "(flattenl {[] {[6 9] {[1 0 6] {[0 5 1 9]}} {[5]}}}) -> [6 9 1 0 6 0 5 1 9 5]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.137557, "name": "flattenl", "examples": ["(flattenl {[7 8 0 4]}) -> [7 8 0 4]", "(flattenl {}) -> []", "(flattenl {[5 5] {[]} {[9 0 0 2]}}) -> [5 5 9 0 0 2]", "(flattenl {[1 8 8 3] {[7 3] {[1 9 6]} {[5 1 4 5 4]}} {[2 4] {[3 0]} {[2 2 8 7]}}}) -> [1 8 8 3 7 3 1 9 6 5 1 4 5 4 2 4 3 0 2 2 8 7]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.039434, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[8 5 2]}) -> [8 5 2]", "(flattenl {[2 2 4 7 7]}) -> [2 2 4 7 7]", "(flattenl {[3 5 8]}) -> [3 5 8]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) c) [])) _) _)"}
{"time": 0.113807, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {}) -> []", "(flattenl {[8] {[8 2 2 5 7]} {[0 0 9 1 4]}}) -> [8 8 2 2 5 7 0 0 9 1 4]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.102736, "name": "flattenl", "examples": ["(flattenl {}) -> []", "(flattenl {[] {[2 5 8 3 0] {[3 7 6]}} {[0 2 8 1 7]}}) -> [2 5 8 3 0 3 7 6 0 2 8 1 7]", "(flattenl {}) -> []", "(flattenl {[1 9 6 2 1] {[3 8 0] {[8 6] {[]}}} {[0 1 2 3 9]}}) -> [1 9 6 2 1 3 8 0 8 6 0 1 2 3 9]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.125063, "name": "flattenl", "examples": ["(flattenl {[] {[4 6 8 8] {[4]} {[5 3 4]}}}) -> [4 6 8 8 4 5 3 4]", "(flattenl {[2 6]}) -> [2 6]", "(flattenl {[] {[8 4] {[9 2 6] {[3 9 1 9 4]}} {[0 4 0 2 6] {[3 7]}}} {[1 2]}}) -> [8 4 9 2 6 3 9 1 9 4 0 4 0 2 6 3 7 1 2]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.140065, "name": "flattenl", "examples": ["(flattenl {[8 7 5 4] {[1 4 1 2 4]} {[6 3] {[4] {[8 3 2 8 4]} {[8 7 2 3 7]}} {[1 9 8] {[]} {[8 0 9]}}}}) -> [8 7 5 4 1 4 1 2 4 6 3 4 8 3 2 8 4 8 7 2 3 7 1 9 8 8 0 9]", "(flattenl {[]}) -> []", "(flattenl {[5 2 8 0 8]}) -> [5 2 8 0 8]", "(flattenl {}) -> []"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.105252, "name": "flattenl", "examples": ["(flattenl {[1 6 9] {[4 5] {[7] {[0 4 7 6]} {[]}}} {[5 0 3 6 4] {[7 2 8] {[5]} {[3]}}}}) -> [1 6 9 4 5 7 0 4 7 6 5 0 3 6 4 7 2 8 5 3]", "(flattenl {[1 3 6 1] {[5 2 3 0] {[9 2]}} {[6] {[4 5 3 1]}}}) -> [1 3 6 1 5 2 3 0 9 2 6 4 5 3 1]", "(flattenl {}) -> []", "(flattenl {[6 1] {[]} {[2 4]}}) -> [6 1 2 4]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.216883, "name": "flattenl", "examples": ["(flattenl {[0 3 5] {[1 3]} {[4 6 4]}}) -> [0 3 5 1 3 4 6 4]", "(flattenl {[2 5 7]}) -> [2 5 7]", "(flattenl {[3]}) -> [3]", "(flattenl {[1 2 2]}) -> [1 2 2]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.193894, "name": "flattenl", "examples": ["(flattenl {[8] {[6 7 1]} {[]}}) -> [8 6 7 1]", "(flattenl {[] {[9 9] {[0 2 8] {[2 4]} {[5]}}}}) -> [9 9 0 2 8 2 4 5]", "(flattenl {[4 1 1] {[0 4 8 9] {[7 5 7 1]}} {[3]}}) -> [4 1 1 0 4 8 9 7 5 7 1 3]", "(flattenl {[2 6 5 9 4] {[0 8] {[7 7 8 5 3] {[5 2]}} {[5] {[]} {[]}}}}) -> [2 6 5 9 4 0 8 7 7 8 5 3 5 2 5]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.199493, "name": "flattenl", "examples": ["(flattenl {[2 1 8] {[] {[6 1 5 6 0] {[8 6 2 4 4]}} {[2 0] {[8 2 4 7 3]}}} {[5 7] {[5 3] {[6 2 3 7]}}}}) -> [2 1 8 6 1 5 6 0 8 6 2 4 4 2 0 8 2 4 7 3 5 7 5 3 6 2 3 7]", "(flattenl {[8]}) -> [8]", "(flattenl {[0 4 3 6 4]}) -> [0 4 3 6 4]", "(flattenl {[5 5 7 9] {[9 9 6 3 1] {[7 9]} {[4 8 9 9]}} {[1 8 7 5 1] {[]} {[5 5 1 9]}}}) -> [5 5 7 9 9 9 6 3 1 7 9 4 8 9 9 1 8 7 5 1 5 5 1 9]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.157175, "name": "flattenl", "examples": ["(flattenl {[]}) -> []", "(flattenl {[3 3] {[] {[9 6 7 5 4]}} {[8 2 6 9 2] {[] {[0 1 7 6 0]} {[4 0 4]}} {[9 2 3]}}}) -> [3 3 9 6 7 5 4 8 2 6 9 2 0 1 7 6 0 4 0 4 9 2 3]", "(flattenl {[0 5]}) -> [0 5]", "(flattenl {[9]}) -> [9]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.080273, "name": "flattenl", "examples": ["(flattenl {[1 9] {[4 2]}}) -> [1 9 4 2]", "(flattenl {[8 7] {[6 3 8 4] {[9 8 9 4 5]}}}) -> [8 7 6 3 8 4 9 8 9 4 5]", "(flattenl {}) -> []", "(flattenl {[7 9] {[8]} {[9 4]}}) -> [7 9 8 9 4]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.135521, "name": "flattenl", "examples": ["(flattenl {[] {[7 3 5] {[3 9] {[8 5 0 7]} {[9 7 0 7]}}}}) -> [7 3 5 3 9 8 5 0 7 9 7 0 7]", "(flattenl {[6] {[5 6 6 9] {[2] {[4 3 9 1]}} {[7 1 2 8] {[7 3 7]}}} {[2 3 0 5] {[3 0 9 9] {[9 4]}}}}) -> [6 5 6 6 9 2 4 3 9 1 7 1 2 8 7 3 7 2 3 0 5 3 0 9 9 9 4]", "(flattenl {[]}) -> []", "(flattenl {[5 3] {[2 1 1 1 5] {[4 5 8 8] {[7 8 9 2]}}} {[9]}}) -> [5 3 2 1 1 1 5 4 5 8 8 7 8 9 2 9]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
{"time": 0.13094, "name": "flattenl", "examples": ["(flattenl {[0 4 1] {[8 0]} {[2 8 0] {[9 7 9 1 5] {[8 0 9 7 3]} {[1 3 8 8 5]}} {[4 5 5 0] {[2 4 9]} {[4 9 8]}}}}) -> [0 4 1 8 0 2 8 0 9 7 9 1 5 8 0 9 7 3 1 3 8 8 5 4 5 5 0 2 4 9 4 9 8]", "(flattenl {[3 3 1 6] {[0 7 9 8] {[]} {[1 8]}}}) -> [3 3 1 6 0 7 9 8 1 8]", "(flattenl {[] {[6 8 7] {[0] {[9]} {[4]}} {[2] {[9 3]} {[3 6 7 9]}}} {[9 2 1 3] {[5 8 9 7] {[7 1]}} {[1 0 3] {[6 9 0 5]} {[0]}}}}) -> [6 8 7 0 9 4 2 9 3 3 6 7 9 9 2 1 3 5 8 9 7 7 1 1 0 3 6 9 0 5 0]", "(flattenl {[5 6 6] {[6 9] {[1 9 3 6] {[2 5]} {[5 2 4]}}}}) -> [5 6 6 6 9 1 9 3 6 2 5 5 2 4]"], "solution": "(let flattenl (let a (lambda (b) (foldt b (lambda (d c) (join (cons c d))) [])) _) _)"}
