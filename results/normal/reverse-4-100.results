{"name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)", "examples": ["(reverse []) -> []", "(reverse [3]) -> [3]", "(reverse []) -> []"], "time": 0.00052}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [4]) -> [4]"], "time": 0.000548}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) []) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse []) -> []"], "time": 0.000448}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [0 1 3 0 3]) -> [3 0 3 1 0]", "(reverse [9 7]) -> [7 9]"], "time": 0.031509}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [1 8 2 2 5]) -> [5 2 2 8 1]", "(reverse [1 8 6]) -> [6 8 1]"], "time": 0.030336}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [9]) -> [9]", "(reverse [5 0 2 9 0]) -> [0 9 2 0 5]"], "time": 0.033928}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [0]) -> [0]", "(reverse [3 5 1 5]) -> [5 1 5 3]"], "time": 0.03486}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [9]) -> [9]", "(reverse [7 4]) -> [4 7]"], "time": 0.042004}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [1 2 2 9]) -> [9 2 2 1]", "(reverse [2 1 8 5]) -> [5 8 1 2]"], "time": 0.03842}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [0 5 5 8 0]) -> [0 8 5 5 0]", "(reverse [3 8 7 5 7]) -> [7 5 7 8 3]"], "time": 0.028887}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [6 1 8 9]) -> [9 8 1 6]", "(reverse [3 5 5]) -> [5 5 3]"], "time": 0.02744}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [3 0 0]) -> [0 0 3]", "(reverse [3]) -> [3]"], "time": 0.034895}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [6 3 1 9]) -> [9 1 3 6]"], "time": 0.039333}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [8]) -> [8]", "(reverse [3 4]) -> [4 3]"], "time": 0.033251}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [6 6 7 7 8]) -> [8 7 7 6 6]", "(reverse [9 5]) -> [5 9]"], "time": 0.041711}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [9 4]) -> [4 9]", "(reverse [7]) -> [7]"], "time": 0.047195}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [5 4 4 4]) -> [4 4 4 5]"], "time": 0.02561}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [0 3]) -> [3 0]", "(reverse [0 2 0 8 8]) -> [8 8 0 2 0]"], "time": 0.026543}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [5 8 1 8 5]) -> [5 8 1 8 5]"], "time": 0.000535}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [5]) -> [5]", "(reverse [1 6 6 5 1]) -> [1 5 6 6 1]"], "time": 0.025993}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [9 8 8 1]) -> [1 8 8 9]", "(reverse [3 1 9 5 7]) -> [7 5 9 1 3]"], "time": 0.050235}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)", "examples": ["(reverse []) -> []", "(reverse [5]) -> [5]", "(reverse []) -> []"], "time": 0.000524}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [4]) -> [4]", "(reverse [4 9 1 5]) -> [5 1 9 4]"], "time": 0.029909}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [6 9]) -> [9 6]", "(reverse [7 3 1 6]) -> [6 1 3 7]"], "time": 0.041853}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [9 0]) -> [0 9]", "(reverse [9 2 1]) -> [1 2 9]"], "time": 0.04119}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [4]) -> [4]"], "time": 0.000349}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [0 0 5]) -> [5 0 0]", "(reverse [3 8 2]) -> [2 8 3]"], "time": 0.029037}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [4 3 3]) -> [3 3 4]", "(reverse []) -> []"], "time": 0.039712}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [9]) -> [9]", "(reverse [9 0]) -> [0 9]"], "time": 0.039701}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [6 1 8]) -> [8 1 6]", "(reverse [4 5 9]) -> [9 5 4]"], "time": 0.036289}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [5 3 4 9]) -> [9 4 3 5]", "(reverse [8 9 9]) -> [9 9 8]"], "time": 0.033375}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [7 0 8]) -> [8 0 7]", "(reverse [4 4]) -> [4 4]"], "time": 0.036382}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [7 2 7 1]) -> [1 7 2 7]", "(reverse [4 5 1 7]) -> [7 1 5 4]"], "time": 0.025363}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [1 8]) -> [8 1]", "(reverse [3 2 8]) -> [8 2 3]"], "time": 0.028382}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) []) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse []) -> []"], "time": 0.000641}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [3 7 5]) -> [5 7 3]", "(reverse [1 9]) -> [9 1]"], "time": 0.04814}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [3 0]) -> [0 3]", "(reverse [6]) -> [6]"], "time": 0.048758}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)", "examples": ["(reverse []) -> []", "(reverse [0 2 7 2 0]) -> [0 2 7 2 0]", "(reverse [5]) -> [5]"], "time": 0.000376}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [8 8 8 0 4]) -> [4 0 8 8 8]", "(reverse [9 7 1 8]) -> [8 1 7 9]"], "time": 0.028292}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [7 3 2 7]) -> [7 2 3 7]", "(reverse [0 6 5]) -> [5 6 0]"], "time": 0.039837}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [5 4 3 0 7]) -> [7 0 3 4 5]", "(reverse [4 2 7 8 9]) -> [9 8 7 2 4]"], "time": 0.030958}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [9 8 0 2 4]) -> [4 2 0 8 9]", "(reverse [5]) -> [5]"], "time": 0.034686}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [1 2 5]) -> [5 2 1]", "(reverse [0]) -> [0]"], "time": 0.031639}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [4 2 7]) -> [7 2 4]", "(reverse [0 1 5 0]) -> [0 5 1 0]"], "time": 0.033053}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [1 1 7 3 8]) -> [8 3 7 1 1]", "(reverse [2 5 4 6 5]) -> [5 6 4 5 2]"], "time": 0.034328}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [9 7 8 6 2]) -> [2 6 8 7 9]"], "time": 0.045381}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [6 3 2]) -> [2 3 6]", "(reverse [4 3 3 1]) -> [1 3 3 4]"], "time": 0.035789}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [3 7 9 8]) -> [8 9 7 3]", "(reverse [9 2 4 1]) -> [1 4 2 9]"], "time": 0.037799}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [6]) -> [6]"], "time": 0.000609}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [6]) -> [6]", "(reverse [1 1 7 0 4]) -> [4 0 7 1 1]"], "time": 0.035984}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [8 1 3 3]) -> [3 3 1 8]", "(reverse [2 6]) -> [6 2]"], "time": 0.028202}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)", "examples": ["(reverse []) -> []", "(reverse [2]) -> [2]", "(reverse [1]) -> [1]"], "time": 0.000342}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [7 5 2]) -> [2 5 7]", "(reverse [5 7]) -> [7 5]"], "time": 0.043684}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [4]) -> [4]"], "time": 0.00036}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [0 9 1 1]) -> [1 1 9 0]", "(reverse []) -> []"], "time": 0.027417}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [6 7 0 8]) -> [8 0 7 6]", "(reverse [2 8 1]) -> [1 8 2]"], "time": 0.038395}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [5 8 4 2]) -> [2 4 8 5]", "(reverse [9]) -> [9]"], "time": 0.042876}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [4 5 9 6]) -> [6 9 5 4]", "(reverse [3]) -> [3]"], "time": 0.050821}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [0 2 1 7]) -> [7 1 2 0]"], "time": 0.032303}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [7 6]) -> [6 7]"], "time": 0.044507}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [5 7 3 1]) -> [1 3 7 5]", "(reverse [3 4 4 2]) -> [2 4 4 3]"], "time": 0.045118}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [2 2 7 4 1]) -> [1 4 7 2 2]", "(reverse [1 6 7]) -> [7 6 1]"], "time": 0.03585}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [8 9 0]) -> [0 9 8]"], "time": 0.029645}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [3 0 0 7]) -> [7 0 0 3]", "(reverse [2 6 8]) -> [8 6 2]"], "time": 0.039701}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [3 8]) -> [8 3]", "(reverse []) -> []"], "time": 0.04013}
