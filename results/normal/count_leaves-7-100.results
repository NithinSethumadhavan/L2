{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {4 {5}}) -> 1", "(count_leaves {6}) -> 1", "(count_leaves {2}) -> 1", "(count_leaves {9}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) 1) 0)) _) _)", "time": 0.036479}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {5 {5 {0}}}) -> 1", "(count_leaves {5 {2} {5 {0}}}) -> 2", "(count_leaves {2 {5}}) -> 1", "(count_leaves {6 {5 {2} {2}} {2 {9} {9}}}) -> 4"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.791581}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {1}) -> 1", "(count_leaves {7}) -> 1", "(count_leaves {1 {2 {9 {3}} {9 {3}}}}) -> 2", "(count_leaves {2}) -> 1", "(count_leaves {6}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.808532}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {7}) -> 1", "(count_leaves {0 {2}}) -> 1", "(count_leaves {2}) -> 1", "(count_leaves {0 {9} {6}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.796773}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {4 {8} {9}}) -> 2", "(count_leaves {8 {4 {7}} {7}}) -> 2", "(count_leaves {2 {1 {1} {3}} {7}}) -> 3", "(count_leaves {7 {2} {2}}) -> 2", "(count_leaves {1}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.76484}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {9}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {0}) -> 1", "(count_leaves {4 {4} {3 {2} {7}}}) -> 3", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.785685}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {6 {3} {1 {9 {9} {6}}}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {5 {8} {2}}) -> 2", "(count_leaves {4}) -> 1", "(count_leaves {5 {4 {3} {7 {6} {9}}} {2 {6 {6} {7}} {8 {1} {9}}}}) -> 7"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.805562}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {4 {4 {8 {5}}}}) -> 1", "(count_leaves {6 {7} {7}}) -> 2", "(count_leaves {4}) -> 1", "(count_leaves {4}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.821622}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {3 {9} {2}}) -> 2", "(count_leaves {5}) -> 1", "(count_leaves {3 {5}}) -> 1", "(count_leaves {4}) -> 1", "(count_leaves {0 {2 {0 {3}} {2}} {0 {0 {2}}}}) -> 3"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.804802}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {7 {1 {6} {7}}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {4 {4} {6}}) -> 2", "(count_leaves {5}) -> 1", "(count_leaves {5}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.771918}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {9}) -> 1", "(count_leaves {4 {2 {6 {3}}} {9}}) -> 2", "(count_leaves {0 {9} {7}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {3 {7}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.749462}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {2}) -> 1", "(count_leaves {1 {8} {8 {7} {8}}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {7 {4 {5 {5} {7}} {9 {2} {6}}} {1 {2 {1} {4}}}}) -> 6"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.760908}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {6 {5}}) -> 1", "(count_leaves {3 {1 {1} {8}} {3}}) -> 3", "(count_leaves {4 {4 {3}} {0}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {8 {4} {8 {6} {4 {6} {1}}}}) -> 4"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.794024}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {2}) -> 1", "(count_leaves {6 {1} {5}}) -> 2", "(count_leaves {5}) -> 1", "(count_leaves {3 {3 {9}}}) -> 1", "(count_leaves {8}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.807796}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {0 {1}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {4 {4} {1 {4}}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.770007}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {6 {7 {0 {6} {9}} {6}} {7 {6 {2}}}}) -> 4", "(count_leaves {2 {6} {6}}) -> 2", "(count_leaves {3}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.831988}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {8}) -> 1", "(count_leaves {7}) -> 1", "(count_leaves {1}) -> 1", "(count_leaves {4 {6 {7} {9}} {6 {6} {1}}}) -> 4"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) c) 1)) 0)) _) _)", "time": 0.723238}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {2 {4 {2}}}) -> 1", "(count_leaves {5 {4}}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) 1) 0)) _) _)", "time": 0.020982}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8}) -> 1", "(count_leaves {4 {9} {0}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {9 {9} {0 {3 {5}} {7 {5} {2}}}}) -> 4"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.666153}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {5 {3 {7 {6} {5}}} {3 {6 {4}}}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {6 {2} {5 {2 {9}} {4 {8}}}}) -> 3", "(count_leaves {2 {3 {0} {6}} {9}}) -> 3"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (+ 1 (+ 1 1))) 0)) _) _)", "time": 0.439798}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {1 {4 {8} {1}}}) -> 2", "(count_leaves {2 {3} {2}}) -> 2", "(count_leaves {0}) -> 1", "(count_leaves {8 {0} {0}}) -> 2", "(count_leaves {6 {1}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.646423}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {4}) -> 1", "(count_leaves {1}) -> 1", "(count_leaves {7 {2 {2 {0} {1}} {8}} {0 {1 {3} {7}} {3}}}) -> 6", "(count_leaves {3}) -> 1", "(count_leaves {0 {0}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.754353}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {9 {5 {3 {5}} {7 {3}}}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {2 {8}}) -> 1", "(count_leaves {4}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.672345}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {7 {8}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {2 {6} {7}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {8}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.664336}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {2 {8 {5} {1}}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {6 {7} {7}}) -> 2", "(count_leaves {7}) -> 1", "(count_leaves {7}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.66643}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {9}) -> 1", "(count_leaves {3 {4}}) -> 1", "(count_leaves {0}) -> 1", "(count_leaves {5 {2}}) -> 1", "(count_leaves {3 {2} {3 {6} {0 {3}}}}) -> 3"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.773713}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {6 {2}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {4 {3 {4}} {7 {2} {2}}}) -> 3", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.799632}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {4 {6}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {9 {8} {2}}) -> 2", "(count_leaves {1 {5 {9} {9 {6}}}}) -> 2", "(count_leaves {9 {4} {7}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.777642}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {8 {2 {5 {8}}} {7}}) -> 2", "(count_leaves {8 {2}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.730396}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8 {5 {3 {9}} {7}} {8}}) -> 3", "(count_leaves {9 {6} {0}}) -> 2", "(count_leaves {7 {5}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.715478}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {0 {4} {5}}) -> 2", "(count_leaves {7 {0} {0 {3}}}) -> 2", "(count_leaves {3}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {8 {2}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.817236}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8 {4} {5}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {5}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.803166}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {2 {1 {8} {5}} {2}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {2 {6}}) -> 1", "(count_leaves {4 {6 {8} {8}}}) -> 2", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.779016}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {7 {0 {5} {1}}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {7 {9}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.764802}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {2}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) 1) 0)) _) _)", "time": 0.028664}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {2}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {0 {6 {6} {8}}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (- 1 (sum d))) 0)) _) _)", "time": 0.197713}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {7 {5 {6} {8 {4} {0}}}}) -> 3", "(count_leaves {3}) -> 1", "(count_leaves {0 {5 {9}} {7 {7 {4} {4}} {4}}}) -> 4", "(count_leaves {1}) -> 1", "(count_leaves {7 {8}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.715023}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {0}) -> 1", "(count_leaves {1 {5 {7}} {2 {6}}}) -> 2", "(count_leaves {1 {8}}) -> 1", "(count_leaves {8 {4 {7}}}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.768014}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {4 {1 {2 {9} {5}}} {2}}) -> 3", "(count_leaves {5}) -> 1", "(count_leaves {6}) -> 1", "(count_leaves {6}) -> 1", "(count_leaves {9}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.741685}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {4}) -> 1", "(count_leaves {5 {7 {6} {4}} {2}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {1}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.674686}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {7 {5 {4}} {1 {8}}}) -> 2", "(count_leaves {4 {1 {3 {0}}}}) -> 1", "(count_leaves {0}) -> 1", "(count_leaves {6}) -> 1", "(count_leaves {3 {6}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.714635}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {8 {7 {4 {7} {2}}}}) -> 2", "(count_leaves {6 {3 {9} {6}}}) -> 2", "(count_leaves {7 {3 {3}}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.728315}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {4}) -> 1", "(count_leaves {8}) -> 1", "(count_leaves {1}) -> 1", "(count_leaves {8 {5}}) -> 1", "(count_leaves {9 {6} {6 {5 {0}} {6 {5} {4}}}}) -> 4"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.655704}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {1 {4 {0}} {9}}) -> 2", "(count_leaves {1 {1 {3 {8} {9}} {4 {9} {5}}}}) -> 4", "(count_leaves {5}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.697329}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {3 {1}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {3 {9} {9}}) -> 2", "(count_leaves {6 {3 {4 {9} {8}}} {3}}) -> 3", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.742214}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {4}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {4 {4 {7} {8}} {6 {7}}}) -> 3", "(count_leaves {6 {5} {3 {5} {2}}}) -> 3"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.696984}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {4 {0 {0} {6}}}) -> 2", "(count_leaves {7 {5 {6 {0} {2}} {3 {4} {8}}} {1}}) -> 5", "(count_leaves {6}) -> 1", "(count_leaves {2 {1 {8} {5 {3}}}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.706077}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {7 {9}}) -> 1", "(count_leaves {1 {0} {6 {4 {5} {7}} {1 {0}}}}) -> 4", "(count_leaves {}) -> 0", "(count_leaves {6 {3}}) -> 1", "(count_leaves {1}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.675108}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {1 {8} {2}}) -> 2", "(count_leaves {5}) -> 1", "(count_leaves {3 {6} {1}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.70393}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {9}) -> 1", "(count_leaves {7 {7 {0 {7} {2}}}}) -> 2", "(count_leaves {2}) -> 1", "(count_leaves {3}) -> 1", "(count_leaves {0}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.687746}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8 {9}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {3}) -> 1", "(count_leaves {5}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) 1) 0)) _) _)", "time": 0.030087}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {8 {5} {3 {7}}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {9 {8} {8}}) -> 2", "(count_leaves {7}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.729515}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {2 {5 {0}}}) -> 1", "(count_leaves {5}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {7 {5}}) -> 1", "(count_leaves {8 {3 {6}}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) 1) 0)) _) _)", "time": 0.042665}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {4 {3 {9} {5 {2} {3}}}}) -> 3", "(count_leaves {8 {7}}) -> 1", "(count_leaves {3 {1} {4}}) -> 2", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.634945}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {1}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {0 {7 {0} {0}} {5 {6}}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {3}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.599859}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {9 {5 {4} {6}} {5 {3}}}) -> 3", "(count_leaves {3}) -> 1", "(count_leaves {9}) -> 1", "(count_leaves {1 {8 {6}}}) -> 1", "(count_leaves {5}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.680571}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {9 {0} {9}}) -> 2", "(count_leaves {1 {7} {0}}) -> 2", "(count_leaves {3 {5 {5 {1}} {6 {8}}} {8 {3}}}) -> 3", "(count_leaves {5 {6} {6}}) -> 2", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.633887}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {4}) -> 1", "(count_leaves {0}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {5 {6} {1}}) -> 2", "(count_leaves {7}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.619089}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {8 {2 {6} {5}} {4 {1} {8}}}) -> 4", "(count_leaves {1 {8}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.72863}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {1 {6 {0} {0}} {4 {2} {5}}}) -> 4", "(count_leaves {}) -> 0", "(count_leaves {8 {6}}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.634144}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {5 {4 {6} {6}} {5 {0}}}) -> 3", "(count_leaves {}) -> 0", "(count_leaves {1}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.668853}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {6}) -> 1", "(count_leaves {7 {4 {7 {5}} {9 {3} {5}}}}) -> 3", "(count_leaves {4}) -> 1", "(count_leaves {3 {2} {4}}) -> 2", "(count_leaves {0}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.734979}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {2}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) 1) 0)) _) _)", "time": 0.018371}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {9 {1 {4} {0 {7}}}}) -> 2", "(count_leaves {0 {3 {3 {3} {0}} {8}} {1 {8 {5}} {3}}}) -> 5", "(count_leaves {8 {4} {8}}) -> 2", "(count_leaves {2 {9 {2} {8}}}) -> 2", "(count_leaves {2 {0 {1} {7}} {3 {7}}}) -> 3"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.783026}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {9 {4 {4}} {1 {7} {0 {3}}}}) -> 3", "(count_leaves {1 {1}}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) c)) 0)) _) _)", "time": 0.81366}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {5 {6} {8 {2 {4}}}}) -> 2", "(count_leaves {4}) -> 1", "(count_leaves {8}) -> 1", "(count_leaves {4}) -> 1", "(count_leaves {2 {6} {6}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.663992}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {1}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) 1) 0)) _) _)", "time": 0.039573}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8 {1 {4 {2}} {0 {8} {4}}}}) -> 3", "(count_leaves {7 {9 {6}} {5}}) -> 2", "(count_leaves {2 {5}}) -> 1", "(count_leaves {5 {3 {9 {6}}} {3}}) -> 2", "(count_leaves {9 {5}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.801155}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {5 {1}}) -> 1", "(count_leaves {8 {6 {4} {6}}}) -> 2", "(count_leaves {2 {7}}) -> 1", "(count_leaves {1 {9}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.591634}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {9 {7}}) -> 1", "(count_leaves {1 {1}}) -> 1", "(count_leaves {8 {3} {4}}) -> 2", "(count_leaves {7 {7 {9}}}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.80759}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {7 {2}}) -> 1", "(count_leaves {9 {8}}) -> 1", "(count_leaves {7 {8}}) -> 1", "(count_leaves {0 {0 {3}}}) -> 1", "(count_leaves {6 {1}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) 1) 0)) _) _)", "time": 0.032627}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {3 {8}}) -> 1", "(count_leaves {8 {8} {0 {4} {2}}}) -> 3", "(count_leaves {8}) -> 1", "(count_leaves {7 {7} {1}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.601411}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {4 {3 {7} {0 {7}}} {4}}) -> 3", "(count_leaves {6 {4 {0 {9} {3}}}}) -> 2", "(count_leaves {6 {8 {6 {0} {6}} {2}} {4 {3} {3}}}) -> 5"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.567607}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {4}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {9 {8}}) -> 1", "(count_leaves {2}) -> 1", "(count_leaves {4 {1 {6}}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) 1) 0)) _) _)", "time": 0.027659}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {5 {5} {3}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {0 {2 {2}} {4}}) -> 2", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (+ 1 1)) 0)) _) _)", "time": 0.18801}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {3 {6 {7} {2}} {5}}) -> 3", "(count_leaves {0 {3} {7}}) -> 2", "(count_leaves {0 {8}}) -> 1", "(count_leaves {9 {9 {3 {0}}}}) -> 1", "(count_leaves {7 {7 {6}} {9}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.444853}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {3 {4} {9}}) -> 2", "(count_leaves {0 {9}}) -> 1", "(count_leaves {6}) -> 1", "(count_leaves {4 {6} {7}}) -> 2", "(count_leaves {6}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.432057}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {7}) -> 1", "(count_leaves {8}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) 1) 0)) _) _)", "time": 0.025493}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {0 {1 {0 {4} {3}} {6}} {4}}) -> 4", "(count_leaves {}) -> 0", "(count_leaves {2 {5 {4}}}) -> 1", "(count_leaves {9 {3 {1 {6} {1}}} {1 {9 {7}} {4}}}) -> 4", "(count_leaves {5 {8} {9}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.494049}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {1 {5}}) -> 1", "(count_leaves {8}) -> 1", "(count_leaves {9}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) 1) 0)) _) _)", "time": 0.026713}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {8 {8} {1 {7 {6} {8}}}}) -> 3", "(count_leaves {1 {3 {2}}}) -> 1", "(count_leaves {2 {3}}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.478298}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {7}) -> 1", "(count_leaves {9 {6 {7 {7} {2}} {9 {9}}} {3 {6 {9}} {7}}}) -> 5", "(count_leaves {9}) -> 1", "(count_leaves {4 {2 {2} {2 {9} {8}}}}) -> 3"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.698393}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {9 {0} {0}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (+ 1 1)) 0)) _) _)", "time": 0.199014}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {7 {8 {7}} {6}}) -> 2", "(count_leaves {2}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {0}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.435909}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {7}) -> 1", "(count_leaves {7}) -> 1", "(count_leaves {6 {6}}) -> 1", "(count_leaves {5}) -> 1", "(count_leaves {4 {0} {3}}) -> 2"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.832572}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {1 {8}}) -> 1", "(count_leaves {7}) -> 1", "(count_leaves {0}) -> 1", "(count_leaves {3 {0 {6} {2}}}) -> 2", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.910953}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {8 {6} {1}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {1}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {4 {6}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.427093}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {1 {0} {8 {0} {7}}}) -> 3", "(count_leaves {7 {9} {0 {8 {5} {8}} {9}}}) -> 4", "(count_leaves {8 {9 {3 {3} {5}} {7 {8} {5}}}}) -> 4", "(count_leaves {}) -> 0", "(count_leaves {9}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.869066}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {2}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {1}) -> 1", "(count_leaves {9}) -> 1", "(count_leaves {3 {5}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) 1) 0)) _) _)", "time": 0.018678}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {9}) -> 1", "(count_leaves {5}) -> 1", "(count_leaves {3}) -> 1", "(count_leaves {9 {9} {6}}) -> 2", "(count_leaves {8}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.420843}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {5 {4} {6}}) -> 2", "(count_leaves {7 {5}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {6 {8}}) -> 1", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.827466}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {7}) -> 1", "(count_leaves {4 {3 {6}} {3 {6} {2 {8} {5}}}}) -> 4", "(count_leaves {4 {7} {0}}) -> 2", "(count_leaves {4 {8}}) -> 1", "(count_leaves {3}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.774279}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {3 {1}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {1 {4} {3}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (+ 1 (/ 1 c))) 0)) _) _)", "time": 0.166645}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {}) -> 0", "(count_leaves {9 {9}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {8 {0 {5} {9}} {0 {5}}}) -> 3", "(count_leaves {1}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.815247}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {6 {4 {9}}}) -> 1", "(count_leaves {7 {0} {9 {9 {5} {7}}}}) -> 3", "(count_leaves {2 {6} {8}}) -> 2", "(count_leaves {}) -> 0", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.428386}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {0 {1} {9}}) -> 2", "(count_leaves {1}) -> 1", "(count_leaves {9}) -> 1", "(count_leaves {9 {6 {6 {4} {0}}} {7}}) -> 3", "(count_leaves {}) -> 0"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.784267}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {2}) -> 1", "(count_leaves {6 {3} {6}}) -> 2", "(count_leaves {7 {5}}) -> 1", "(count_leaves {}) -> 0", "(count_leaves {9 {1}}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.742093}
{"name": "count_leaves", "examples": ["(count_leaves {}) -> 0", "(count_leaves {6 {9 {8} {2}} {7}}) -> 3", "(count_leaves {0 {5} {2}}) -> 2", "(count_leaves {6 {4} {9}}) -> 2", "(count_leaves {2}) -> 1", "(count_leaves {4}) -> 1"], "solution": "(let count_leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (sum d)) 1)) 0)) _) _)", "time": 0.394771}
