{"solution": "(let shiftr (let a (lambda (b) (reverse b)) _) _)", "time": 0.000583, "examples": ["(shiftr [3 3 7]) -> [7 3 3]", "(shiftr [7 2]) -> [2 7]", "(shiftr [7]) -> [7]", "(shiftr [8 4]) -> [4 8]", "(shiftr [2]) -> [2]", "(shiftr [8]) -> [8]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 3.615975, "examples": ["(shiftr [8]) -> [8]", "(shiftr [3 5]) -> [5 3]", "(shiftr [0 7 3]) -> [3 0 7]", "(shiftr [1 6]) -> [6 1]", "(shiftr [8 4 4 6 7]) -> [7 8 4 4 6]", "(shiftr [8 9 8 1]) -> [1 8 9 8]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 4.499455, "examples": ["(shiftr [2 8]) -> [8 2]", "(shiftr [3 8 8 6]) -> [6 3 8 8]", "(shiftr [9 6 4]) -> [4 9 6]", "(shiftr [1]) -> [1]", "(shiftr [3 5 5 3]) -> [3 3 5 5]", "(shiftr [4 2 7 2 7]) -> [7 4 2 7 2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 4.774596, "examples": ["(shiftr [2 5 5 4 6]) -> [6 2 5 5 4]", "(shiftr [5 9 2 1]) -> [1 5 9 2]", "(shiftr [8 3 8]) -> [8 8 3]", "(shiftr [9 3 9 0 0]) -> [0 9 3 9 0]", "(shiftr [5 1]) -> [1 5]", "(shiftr [4 4 7]) -> [7 4 4]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 4.850807, "examples": ["(shiftr [6]) -> [6]", "(shiftr [0 8 4]) -> [4 0 8]", "(shiftr [1 9 6 7]) -> [7 1 9 6]", "(shiftr [7 1 6]) -> [6 7 1]", "(shiftr [0 0 0 5]) -> [5 0 0 0]", "(shiftr [4 8 4 5]) -> [5 4 8 4]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 5.528268, "examples": ["(shiftr [4 7 4 9 4]) -> [4 4 7 4 9]", "(shiftr [1 0 2 5 4]) -> [4 1 0 2 5]", "(shiftr [5]) -> [5]", "(shiftr [2 1]) -> [1 2]", "(shiftr [5]) -> [5]", "(shiftr [9 5]) -> [5 9]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.435893, "examples": ["(shiftr [5 6 1 5]) -> [5 5 6 1]", "(shiftr [0 2 9]) -> [9 0 2]", "(shiftr [6 3 8 5]) -> [5 6 3 8]", "(shiftr [1 9]) -> [9 1]", "(shiftr [8 8]) -> [8 8]", "(shiftr [4 4 2 8]) -> [8 4 4 2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.264291, "examples": ["(shiftr [3 4]) -> [4 3]", "(shiftr [4 6 4 1]) -> [1 4 6 4]", "(shiftr [5 3]) -> [3 5]", "(shiftr [1]) -> [1]", "(shiftr [6 4 3 6]) -> [6 6 4 3]", "(shiftr [9 1 8 4]) -> [4 9 1 8]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.776114, "examples": ["(shiftr [7]) -> [7]", "(shiftr [4 0 1 8]) -> [8 4 0 1]", "(shiftr [5]) -> [5]", "(shiftr [5 9]) -> [9 5]", "(shiftr [6 0 5 7]) -> [7 6 0 5]", "(shiftr [4 1 4 3 6]) -> [6 4 1 4 3]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.811453, "examples": ["(shiftr [5 3 7]) -> [7 5 3]", "(shiftr [7 8 6 6 2]) -> [2 7 8 6 6]", "(shiftr [5 2 4 6 1]) -> [1 5 2 4 6]", "(shiftr [2 8 7 6]) -> [6 2 8 7]", "(shiftr [4 7 5 5]) -> [5 4 7 5]", "(shiftr [8 7 7 1]) -> [1 8 7 7]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 3.898918, "examples": ["(shiftr [4 4 4]) -> [4 4 4]", "(shiftr [6 5 6 0]) -> [0 6 5 6]", "(shiftr [0 6 4]) -> [4 0 6]", "(shiftr [8 3 7]) -> [7 8 3]", "(shiftr [4 1]) -> [1 4]", "(shiftr [1]) -> [1]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 8.229322, "examples": ["(shiftr [3 1 6]) -> [6 3 1]", "(shiftr [4 8 5]) -> [5 4 8]", "(shiftr [7 6 7 7 3]) -> [3 7 6 7 7]", "(shiftr [6]) -> [6]", "(shiftr [1 7 7 6]) -> [6 1 7 7]", "(shiftr [8 9]) -> [9 8]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 8.358221, "examples": ["(shiftr [9 2]) -> [2 9]", "(shiftr [3]) -> [3]", "(shiftr [3 9 3 6]) -> [6 3 9 3]", "(shiftr [6 1 8]) -> [8 6 1]", "(shiftr [5]) -> [5]", "(shiftr [9 8 2 4]) -> [4 9 8 2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 8.356732, "examples": ["(shiftr [3]) -> [3]", "(shiftr [2 7]) -> [7 2]", "(shiftr [8 7 7 9]) -> [9 8 7 7]", "(shiftr [1]) -> [1]", "(shiftr [0 3]) -> [3 0]", "(shiftr [7 8 9 9 3]) -> [3 7 8 9 9]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 9.070862, "examples": ["(shiftr [1 7 8 7 0]) -> [0 1 7 8 7]", "(shiftr [3 3 5 1 6]) -> [6 3 3 5 1]", "(shiftr [0 1 5]) -> [5 0 1]", "(shiftr [9 9]) -> [9 9]", "(shiftr [6 9]) -> [9 6]", "(shiftr [3]) -> [3]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 9.027133, "examples": ["(shiftr [0 7 5 2]) -> [2 0 7 5]", "(shiftr [6 2 4]) -> [4 6 2]", "(shiftr [5 5 2 8 1]) -> [1 5 5 2 8]", "(shiftr [7 6]) -> [6 7]", "(shiftr [0]) -> [0]", "(shiftr [3 8 8 1]) -> [1 3 8 8]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 9.493904, "examples": ["(shiftr [8 8 3 6 3]) -> [3 8 8 3 6]", "(shiftr [6 4 0 4]) -> [4 6 4 0]", "(shiftr [6 1 9 1 3]) -> [3 6 1 9 1]", "(shiftr [1 6 9]) -> [9 1 6]", "(shiftr [8 8 6 2 3]) -> [3 8 8 6 2]", "(shiftr [4]) -> [4]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 9.68439, "examples": ["(shiftr [3 4 5 3 6]) -> [6 3 4 5 3]", "(shiftr [0]) -> [0]", "(shiftr [4 7 6 1 2]) -> [2 4 7 6 1]", "(shiftr [9 3]) -> [3 9]", "(shiftr [9]) -> [9]", "(shiftr [3 9]) -> [9 3]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 4.920811, "examples": ["(shiftr [8]) -> [8]", "(shiftr [8 1 4 0]) -> [0 8 1 4]", "(shiftr [5 2 6 0 8]) -> [8 5 2 6 0]", "(shiftr [7 9 0]) -> [0 7 9]", "(shiftr [9 9 0 3 2]) -> [2 9 9 0 3]", "(shiftr [6 5 3]) -> [3 6 5]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 5.829126, "examples": ["(shiftr [4 0 4 6]) -> [6 4 0 4]", "(shiftr [0 8 7 1]) -> [1 0 8 7]", "(shiftr [3]) -> [3]", "(shiftr [9 5 2 3]) -> [3 9 5 2]", "(shiftr [3 9]) -> [9 3]", "(shiftr [0]) -> [0]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 4.784062, "examples": ["(shiftr [6 3]) -> [3 6]", "(shiftr [3 5 3 1 9]) -> [9 3 5 3 1]", "(shiftr [8]) -> [8]", "(shiftr [4 8 2]) -> [2 4 8]", "(shiftr [3]) -> [3]", "(shiftr [2]) -> [2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.560636, "examples": ["(shiftr [1]) -> [1]", "(shiftr [4]) -> [4]", "(shiftr [1 7 7 9]) -> [9 1 7 7]", "(shiftr [6 5 5 8 4]) -> [4 6 5 5 8]", "(shiftr [9 0]) -> [0 9]", "(shiftr [4 1 1 1 9]) -> [9 4 1 1 1]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.740152, "examples": ["(shiftr [0 6 3 1]) -> [1 0 6 3]", "(shiftr [3]) -> [3]", "(shiftr [6 8]) -> [8 6]", "(shiftr [1 8]) -> [8 1]", "(shiftr [4 1]) -> [1 4]", "(shiftr [7 2 1]) -> [1 7 2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 5.746424, "examples": ["(shiftr [4 2 3 6 2]) -> [2 4 2 3 6]", "(shiftr [8 4 1]) -> [1 8 4]", "(shiftr [9]) -> [9]", "(shiftr [9 1 9 8]) -> [8 9 1 9]", "(shiftr [4 0 7 8 5]) -> [5 4 0 7 8]", "(shiftr [7]) -> [7]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 5.883839, "examples": ["(shiftr [5 8 6 8 2]) -> [2 5 8 6 8]", "(shiftr [7 1 5 3]) -> [3 7 1 5]", "(shiftr [8 2]) -> [2 8]", "(shiftr [5]) -> [5]", "(shiftr [8 6]) -> [6 8]", "(shiftr [0 8]) -> [8 0]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.756269, "examples": ["(shiftr [3 2]) -> [2 3]", "(shiftr [3 2 2]) -> [2 3 2]", "(shiftr [1 3 7 0]) -> [0 1 3 7]", "(shiftr [6 0 6]) -> [6 6 0]", "(shiftr [0 6 9 4 8]) -> [8 0 6 9 4]", "(shiftr [1 1 6]) -> [6 1 1]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 5.57385, "examples": ["(shiftr [6]) -> [6]", "(shiftr [5 8 2 1]) -> [1 5 8 2]", "(shiftr [7]) -> [7]", "(shiftr [2]) -> [2]", "(shiftr [2 4 2 0]) -> [0 2 4 2]", "(shiftr [5 8 7 9]) -> [9 5 8 7]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 7.436416, "examples": ["(shiftr [0]) -> [0]", "(shiftr [4 8 0 7 9]) -> [9 4 8 0 7]", "(shiftr [7 6 5]) -> [5 7 6]", "(shiftr [8 9]) -> [9 8]", "(shiftr [8 4 2 5 7]) -> [7 8 4 2 5]", "(shiftr [2 7 4]) -> [4 2 7]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 5.523983, "examples": ["(shiftr [7 8 3 4 4]) -> [4 7 8 3 4]", "(shiftr [4 0]) -> [0 4]", "(shiftr [5 6 3 0 4]) -> [4 5 6 3 0]", "(shiftr [7 5 0 2 3]) -> [3 7 5 0 2]", "(shiftr [3 1 2 2 5]) -> [5 3 1 2 2]", "(shiftr [3 7]) -> [7 3]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.093672, "examples": ["(shiftr [0 9]) -> [9 0]", "(shiftr [0 1 4]) -> [4 0 1]", "(shiftr [6 5]) -> [5 6]", "(shiftr [5]) -> [5]", "(shiftr [8 1 0 2]) -> [2 8 1 0]", "(shiftr [3 5]) -> [5 3]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.840177, "examples": ["(shiftr [4 1 7 5]) -> [5 4 1 7]", "(shiftr [8 9]) -> [9 8]", "(shiftr [0 7 9 7]) -> [7 0 7 9]", "(shiftr [8 3 0]) -> [0 8 3]", "(shiftr [6]) -> [6]", "(shiftr [8 4 5 0]) -> [0 8 4 5]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 8.442471, "examples": ["(shiftr [2 2 1 7 6]) -> [6 2 2 1 7]", "(shiftr [3 0 1 6]) -> [6 3 0 1]", "(shiftr [7 0 7 5 6]) -> [6 7 0 7 5]", "(shiftr [1]) -> [1]", "(shiftr [8 5 3 7]) -> [7 8 5 3]", "(shiftr [8]) -> [8]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 5.641304, "examples": ["(shiftr [4 4 3]) -> [3 4 4]", "(shiftr [5 3 2 5]) -> [5 5 3 2]", "(shiftr [4 1 7]) -> [7 4 1]", "(shiftr [7 5 0 7]) -> [7 7 5 0]", "(shiftr [5]) -> [5]", "(shiftr [1 3 6]) -> [6 1 3]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 8.148477, "examples": ["(shiftr [3 1 8]) -> [8 3 1]", "(shiftr [3 6 8 4 4]) -> [4 3 6 8 4]", "(shiftr [6 4 8]) -> [8 6 4]", "(shiftr [8]) -> [8]", "(shiftr [9 5 2]) -> [2 9 5]", "(shiftr [9 1 9]) -> [9 9 1]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.643915, "examples": ["(shiftr [3]) -> [3]", "(shiftr [2 9 6 2]) -> [2 2 9 6]", "(shiftr [0 3 2 0]) -> [0 0 3 2]", "(shiftr [7 7]) -> [7 7]", "(shiftr [9 7 4]) -> [4 9 7]", "(shiftr [8 9]) -> [9 8]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 5.831065, "examples": ["(shiftr [1 6 2]) -> [2 1 6]", "(shiftr [7 4 9 6 4]) -> [4 7 4 9 6]", "(shiftr [2 2 7 8]) -> [8 2 2 7]", "(shiftr [2 2 1 9 5]) -> [5 2 2 1 9]", "(shiftr [4 3 2 2]) -> [2 4 3 2]", "(shiftr [7 8]) -> [8 7]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.338178, "examples": ["(shiftr [0 6 5 7]) -> [7 0 6 5]", "(shiftr [7 2]) -> [2 7]", "(shiftr [0]) -> [0]", "(shiftr [9 7 4 4]) -> [4 9 7 4]", "(shiftr [0 6]) -> [6 0]", "(shiftr [0]) -> [0]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.718359, "examples": ["(shiftr [9 6]) -> [6 9]", "(shiftr [5]) -> [5]", "(shiftr [2 6 1 2 8]) -> [8 2 6 1 2]", "(shiftr [7]) -> [7]", "(shiftr [2 4]) -> [4 2]", "(shiftr [8 4 0 6]) -> [6 8 4 0]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.562861, "examples": ["(shiftr [8 3 1]) -> [1 8 3]", "(shiftr [2 5]) -> [5 2]", "(shiftr [5 4 3]) -> [3 5 4]", "(shiftr [3]) -> [3]", "(shiftr [5 2 6 9]) -> [9 5 2 6]", "(shiftr [7]) -> [7]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 6.297065, "examples": ["(shiftr [6]) -> [6]", "(shiftr [0 1 6]) -> [6 0 1]", "(shiftr [0 7 3]) -> [3 0 7]", "(shiftr [0 8]) -> [8 0]", "(shiftr [4 6]) -> [6 4]", "(shiftr [3 3 9 6 2]) -> [2 3 3 9 6]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 6.091865, "examples": ["(shiftr [6]) -> [6]", "(shiftr [8 4 4 4 2]) -> [2 8 4 4 4]", "(shiftr [8 6 0 3 7]) -> [7 8 6 0 3]", "(shiftr [0 1 9 1 6]) -> [6 0 1 9 1]", "(shiftr [8 6 5]) -> [5 8 6]", "(shiftr [5 3 9 6 3]) -> [3 5 3 9 6]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.143369, "examples": ["(shiftr [0 5 9 9]) -> [9 0 5 9]", "(shiftr [4 6 2 3 7]) -> [7 4 6 2 3]", "(shiftr [0 5 9]) -> [9 0 5]", "(shiftr [5 5 2 5 0]) -> [0 5 5 2 5]", "(shiftr [7 3 0 4]) -> [4 7 3 0]", "(shiftr [5 2 5]) -> [5 5 2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 6.130194, "examples": ["(shiftr [4 5 3]) -> [3 4 5]", "(shiftr [4 2 4]) -> [4 4 2]", "(shiftr [7 9]) -> [9 7]", "(shiftr [6 6 4 1 4]) -> [4 6 6 4 1]", "(shiftr [3]) -> [3]", "(shiftr [8 2 3 1 7]) -> [7 8 2 3 1]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 6.246595, "examples": ["(shiftr [5 7 4 5 1]) -> [1 5 7 4 5]", "(shiftr [1 4]) -> [4 1]", "(shiftr [6 1 7]) -> [7 6 1]", "(shiftr [1 8 8 2 5]) -> [5 1 8 8 2]", "(shiftr [3 0]) -> [0 3]", "(shiftr [5]) -> [5]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 7.870173, "examples": ["(shiftr [1 7 1 0 1]) -> [1 1 7 1 0]", "(shiftr [9 2]) -> [2 9]", "(shiftr [6]) -> [6]", "(shiftr [4 6]) -> [6 4]", "(shiftr [7 4 0]) -> [0 7 4]", "(shiftr [8 2 7]) -> [7 8 2]"], "name": "shiftr"}
