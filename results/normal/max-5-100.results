{"name": "max", "time": 0.013199, "solution": "(let max (let a (lambda (b) (car b)) _) _)", "examples": ["(max [7]) -> 7", "(max [8 8 5]) -> 8", "(max [6]) -> 6", "(max [1]) -> 1"]}
{"name": "max", "time": 2.21332, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (+ c (% c d))) 1)) _) _)", "examples": ["(max [2 1 1]) -> 2", "(max [1]) -> 1", "(max [2 1 6]) -> 6", "(max [8]) -> 8"]}
{"name": "max", "time": 2.421017, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (+ c (% 1 d))) 1)) _) _)", "examples": ["(max [8]) -> 8", "(max [0]) -> 0", "(max [0]) -> 0", "(max [7 9 8 8]) -> 9"]}
{"name": "max", "time": 10.740449, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2]) -> 2", "(max [9 5]) -> 9", "(max [1 4 5 0 2]) -> 5", "(max [8]) -> 8"]}
{"name": "max", "time": 10.583407, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 0 c) d c)) 0)) _) _)", "examples": ["(max [1 0 9]) -> 9", "(max [7 3 0 0 7]) -> 7", "(max [2 1 6 6 0]) -> 6", "(max [5 2 3 9 0]) -> 9"]}
{"name": "max", "time": "timeout", "examples": ["(max [6 6 0]) -> 6", "(max [4 2 8 9]) -> 9", "(max [7 2]) -> 7", "(max [5 2 2]) -> 5"]}
{"name": "max", "time": 11.495742, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 9 3]) -> 9", "(max [1 0 8 2]) -> 8", "(max [9 4 4 6]) -> 9", "(max [3 9 6 0]) -> 9"]}
{"name": "max", "time": 12.017126, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 8]) -> 8", "(max [8 4 9]) -> 9", "(max [6 7]) -> 7", "(max [2 3 9 2 3]) -> 9"]}
{"name": "max", "time": 12.66822, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 3 8 2 2]) -> 8", "(max [1 8 4]) -> 8", "(max [4 6]) -> 6", "(max [2]) -> 2"]}
{"name": "max", "time": 13.002662, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 4 4 2]) -> 4", "(max [1]) -> 1", "(max [2]) -> 2", "(max [5 4]) -> 5"]}
{"name": "max", "time": 13.386639, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 8 3 8]) -> 8", "(max [8 6 9 3]) -> 9", "(max [8 3 1 8]) -> 8", "(max [0 3]) -> 3"]}
{"name": "max", "time": 0.055865, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) c) 0)) _) _)", "examples": ["(max [4]) -> 4", "(max [7 7]) -> 7", "(max [1]) -> 1", "(max [4 8]) -> 8"]}
{"name": "max", "time": 13.864867, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 0 4 4]) -> 4", "(max [0]) -> 0", "(max [9 0 9 7 4]) -> 9", "(max [3 7 9]) -> 9"]}
{"name": "max", "time": 13.827102, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6]) -> 6", "(max [5 7 2]) -> 7", "(max [0 7 4 9 6]) -> 9", "(max [6 8 6]) -> 8"]}
{"name": "max", "time": 13.068281, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4]) -> 4", "(max [6]) -> 6", "(max [2 3 8 1]) -> 8", "(max [2 0 4 8 4]) -> 8"]}
{"name": "max", "time": 14.310407, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 7 3 3 7]) -> 7", "(max [0]) -> 0", "(max [0 7 9 6]) -> 9", "(max [4 4 2]) -> 4"]}
{"name": "max", "time": 14.489489, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 8 0 6]) -> 8", "(max [1 3]) -> 3", "(max [3 5 9 2]) -> 9", "(max [5]) -> 5"]}
{"name": "max", "time": 14.559394, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 8]) -> 8", "(max [0 9 0 7 7]) -> 9", "(max [7 3 4]) -> 7", "(max [5 3]) -> 5"]}
{"name": "max", "time": 12.363141, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 9]) -> 9", "(max [4 7 4 4]) -> 7", "(max [5 4]) -> 5", "(max [9 8 1 9 5]) -> 9"]}
{"name": "max", "time": 12.45245, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 3 0 4]) -> 4", "(max [4 1 9 9 9]) -> 9", "(max [4 3 0 0]) -> 4", "(max [2 5]) -> 5"]}
{"name": "max", "time": 6.69381, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 0 c) d c)) 0)) _) _)", "examples": ["(max [9 1 4 9 0]) -> 9", "(max [4 5 5]) -> 5", "(max [8]) -> 8", "(max [1]) -> 1"]}
{"name": "max", "time": 6.999688, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 1 c) d c)) 0)) _) _)", "examples": ["(max [9]) -> 9", "(max [7 8 3 8 9]) -> 9", "(max [2 1 6 6 1]) -> 6", "(max [4 1 1]) -> 4"]}
{"name": "max", "time": 7.414086, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 0]) -> 9", "(max [4 5 1]) -> 5", "(max [0 9 6 3 5]) -> 9", "(max [4 7 4 9 4]) -> 9"]}
{"name": "max", "time": 6.620037, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 1 c) d c)) 1)) _) _)", "examples": ["(max [8]) -> 8", "(max [2 4]) -> 4", "(max [1 5 1 1]) -> 5", "(max [1 1]) -> 1"]}
{"name": "max", "time": 9.888384, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 3 3 1]) -> 3", "(max [7 6 3 4]) -> 7", "(max [2 8 2]) -> 8", "(max [7 4 6 7]) -> 7"]}
{"name": "max", "time": 7.259382, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 1 d) c d)) 1)) _) _)", "examples": ["(max [1 7 5]) -> 7", "(max [1]) -> 1", "(max [6 1 2]) -> 6", "(max [5]) -> 5"]}
{"name": "max", "time": 7.830139, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 9]) -> 9", "(max [1 1]) -> 1", "(max [1 9 2 1 7]) -> 9", "(max [4 7 8 9]) -> 9"]}
{"name": "max", "time": 9.209249, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 2 2]) -> 2", "(max [6 7 8]) -> 8", "(max [4 2 4 6 5]) -> 6", "(max [9]) -> 9"]}
{"name": "max", "time": 10.174237, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 3 2]) -> 7", "(max [0]) -> 0", "(max [6 4 3 7 3]) -> 7", "(max [6 8 3 4 8]) -> 8"]}
{"name": "max", "time": 9.418274, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 6 1]) -> 9", "(max [1]) -> 1", "(max [0 4 4 6 5]) -> 6", "(max [3 7 0 4 3]) -> 7"]}
{"name": "max", "time": 0.000935, "solution": "(let max (let a (lambda (b) (car b)) _) _)", "examples": ["(max [1]) -> 1", "(max [6 6]) -> 6", "(max [7 6 4 0 4]) -> 7", "(max [9 3 2 8]) -> 9"]}
{"name": "max", "time": 9.260192, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [2 7 1 2 3]) -> 7", "(max [9]) -> 9", "(max [5 0 6 3 7]) -> 7", "(max [8 6 5]) -> 8"]}
{"name": "max", "time": 9.835534, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 1 8 2]) -> 8", "(max [4 0]) -> 4", "(max [8 2 7]) -> 8", "(max [4 5 8 8 3]) -> 8"]}
{"name": "max", "time": 9.986472, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [8 4]) -> 8", "(max [0 9 4 9 8]) -> 9", "(max [9 3]) -> 9", "(max [5 6 2 4 9]) -> 9"]}
{"name": "max", "time": 7.379109, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 5 9 8]) -> 9", "(max [6 0 6 5 5]) -> 6", "(max [1]) -> 1", "(max [1 7 0 2]) -> 7"]}
{"name": "max", "time": 10.830281, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 8 8 1 9]) -> 9", "(max [5]) -> 5", "(max [0 2]) -> 2", "(max [6 1 1 5]) -> 6"]}
{"name": "max", "time": 9.550429, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 7 5 4]) -> 7", "(max [0 5 8 5 2]) -> 8", "(max [5 3]) -> 5", "(max [9]) -> 9"]}
{"name": "max", "time": 9.576338, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 5 0]) -> 5", "(max [3 1 9 5 4]) -> 9", "(max [1 6 0]) -> 6", "(max [1 7 1 0 8]) -> 8"]}
{"name": "max", "time": 7.567465, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 9 8 5 6]) -> 9", "(max [5 4 1]) -> 5", "(max [8]) -> 8", "(max [3 5 9 6]) -> 9"]}
{"name": "max", "time": 0.001317, "solution": "(let max (let a (lambda (b) (car b)) _) _)", "examples": ["(max [1]) -> 1", "(max [0]) -> 0", "(max [8]) -> 8", "(max [5]) -> 5"]}
{"name": "max", "time": 9.740779, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 7 5 0]) -> 7", "(max [8]) -> 8", "(max [6 4 0 6]) -> 6", "(max [3 4 8]) -> 8"]}
{"name": "max", "time": 6.403468, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [7 8 4]) -> 8", "(max [7 5]) -> 7", "(max [9 6 3 2 6]) -> 9", "(max [4 7 9 2 9]) -> 9"]}
{"name": "max", "time": 0.001046, "solution": "(let max (let a (lambda (b) (car b)) _) _)", "examples": ["(max [7]) -> 7", "(max [9 7]) -> 9", "(max [3]) -> 3", "(max [0]) -> 0"]}
{"name": "max", "time": 9.025362, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 6 3]) -> 6", "(max [1 4 6 4 7]) -> 7", "(max [7]) -> 7", "(max [4 4 7 7]) -> 7"]}
{"name": "max", "time": 5.348405, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 5 7 1 3]) -> 7", "(max [2 9 9 6 6]) -> 9", "(max [5 8]) -> 8", "(max [8 7 2]) -> 8"]}
{"name": "max", "time": 0.001403, "solution": "(let max (let a (lambda (b) (car b)) _) _)", "examples": ["(max [8 3]) -> 8", "(max [5]) -> 5", "(max [3]) -> 3", "(max [8 2 7 2 4]) -> 8"]}
{"name": "max", "time": 6.384644, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 8 5]) -> 8", "(max [2]) -> 2", "(max [9 7 0 4 9]) -> 9", "(max [4 6]) -> 6"]}
{"name": "max", "time": 9.736095, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6]) -> 6", "(max [6 4 7]) -> 7", "(max [5 6 0]) -> 6", "(max [9 7 2 4]) -> 9"]}
{"name": "max", "time": 10.210024, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 9 5 3]) -> 9", "(max [9]) -> 9", "(max [2 3 5 1 0]) -> 5", "(max [3 8]) -> 8"]}
{"name": "max", "time": 6.277933, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 1 d) c d)) 1)) _) _)", "examples": ["(max [1 9]) -> 9", "(max [6 4]) -> 6", "(max [6 3 4 3]) -> 6", "(max [7]) -> 7"]}
{"name": "max", "time": 10.134669, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 0 4 3 8]) -> 8", "(max [0 6 9 1]) -> 9", "(max [2 9 4]) -> 9", "(max [9 7 2 9]) -> 9"]}
{"name": "max", "time": 0.000677, "solution": "(let max (let a (lambda (b) (car b)) _) _)", "examples": ["(max [7]) -> 7", "(max [4 4 3]) -> 4", "(max [4]) -> 4", "(max [3]) -> 3"]}
{"name": "max", "time": 10.70705, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 9]) -> 9", "(max [0 3 9 5]) -> 9", "(max [7 8 3]) -> 8", "(max [2 6 9 6 0]) -> 9"]}
{"name": "max", "time": 0.000699, "solution": "(let max (let a (lambda (b) (car b)) _) _)", "examples": ["(max [8 0 2 6]) -> 8", "(max [5 0 5]) -> 5", "(max [4 0]) -> 4", "(max [5]) -> 5"]}
{"name": "max", "time": 8.402605, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 1 6 6 6]) -> 9", "(max [5 9]) -> 9", "(max [4 2 9 3 7]) -> 9", "(max [8 6 9 5 1]) -> 9"]}
{"name": "max", "time": 9.429167, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< 1 c) c d)) 0)) _) _)", "examples": ["(max [8]) -> 8", "(max [2 1]) -> 2", "(max [5 1 0 8 0]) -> 8", "(max [2 3 5]) -> 5"]}
{"name": "max", "time": 10.7512, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 9 1 2]) -> 9", "(max [7 2 4]) -> 7", "(max [3 7 8 6]) -> 8", "(max [4 3 3 2]) -> 4"]}
{"name": "max", "time": 10.931909, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 4 0 2 6]) -> 6", "(max [2 7 4 1]) -> 7", "(max [4]) -> 4", "(max [8 1]) -> 8"]}
{"name": "max", "time": 8.832374, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0]) -> 0", "(max [1 2 5 3 2]) -> 5", "(max [0 9 9]) -> 9", "(max [0 7 5 9 0]) -> 9"]}
{"name": "max", "time": 1.55088, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (+ c (% d c))) 0)) _) _)", "examples": ["(max [4 3]) -> 4", "(max [4 4 7 4]) -> 7", "(max [9]) -> 9", "(max [3]) -> 3"]}
{"name": "max", "time": 9.226593, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [0 3 0 6 1]) -> 6", "(max [3 7 3 9]) -> 9", "(max [6 3 2 8 8]) -> 8", "(max [5 4]) -> 5"]}
{"name": "max", "time": 11.060047, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 4 9]) -> 9", "(max [3]) -> 3", "(max [7 6 1 6 0]) -> 7", "(max [2 7 8 3]) -> 8"]}
{"name": "max", "time": 9.312803, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4]) -> 4", "(max [7 1 9 7 1]) -> 9", "(max [5 8 3 4]) -> 8", "(max [3 6 4]) -> 6"]}
{"name": "max", "time": 7.142244, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [5 6 3 0 7]) -> 7", "(max [4 0]) -> 4", "(max [3 7 8]) -> 8", "(max [0 5 6 3]) -> 6"]}
{"name": "max", "time": 10.836514, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 1 c) d c)) 0)) _) _)", "examples": ["(max [9]) -> 9", "(max [3 8]) -> 8", "(max [7]) -> 7", "(max [1 1 0 4 1]) -> 4"]}
{"name": "max", "time": 8.938134, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [3 0 4 0]) -> 4", "(max [6 3 6 5]) -> 6", "(max [1 6 2 0 8]) -> 8", "(max [1 5 6 8]) -> 8"]}
{"name": "max", "time": 9.565225, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [1 2 7]) -> 7", "(max [4 9 0 5 6]) -> 9", "(max [9 8 7 3 3]) -> 9", "(max [6]) -> 6"]}
{"name": "max", "time": 9.282228, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4]) -> 4", "(max [9 3 5 6 3]) -> 9", "(max [4 1 7]) -> 7", "(max [6 4 3]) -> 6"]}
{"name": "max", "time": 8.254076, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [4 9 2 8]) -> 9", "(max [6 0 7 3 5]) -> 7", "(max [0 9 3 0 6]) -> 9", "(max [2 6 5 7]) -> 7"]}
{"name": "max", "time": 9.555423, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [9 1 7 1]) -> 9", "(max [7]) -> 7", "(max [7 2 4 9 4]) -> 9", "(max [0 3 2]) -> 3"]}
{"name": "max", "time": 7.432591, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (= 0 c) d c)) 0)) _) _)", "examples": ["(max [6 7 9]) -> 9", "(max [8 7 8 8]) -> 8", "(max [8 0]) -> 8", "(max [3 9 0 0]) -> 9"]}
{"name": "max", "time": 9.594435, "solution": "(let max (let a (lambda (b) (foldl b (lambda (d c) (if (< d c) c d)) 0)) _) _)", "examples": ["(max [6 7]) -> 7", "(max [1 4 1 5 3]) -> 5", "(max [2]) -> 2", "(max [8 7 0 0 5]) -> 8"]}
