{"name": "append", "time": 0.658745, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [] 6) -> [6]", "(append [7] 1) -> [7 1]", "(append [2] 3) -> [2 3]", "(append [] 3) -> [3]", "(append [] 6) -> [6]"]}
{"name": "append", "time": 0.93728, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [9 1] 7) -> [9 1 7]", "(append [4 7 3] 1) -> [4 7 3 1]", "(append [8 8 0 6 9] 1) -> [8 8 0 6 9 1]", "(append [0] 6) -> [0 6]", "(append [4] 9) -> [4 9]"]}
{"name": "append", "time": 0.977621, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [1] 3) -> [1 3]", "(append [] 5) -> [5]", "(append [0 1] 7) -> [0 1 7]", "(append [8 4] 7) -> [8 4 7]", "(append [] 2) -> [2]"]}
{"name": "append", "time": 1.259201, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [3] 9) -> [3 9]", "(append [4 3 8 6] 5) -> [4 3 8 6 5]", "(append [7 2 2 0] 8) -> [7 2 2 0 8]", "(append [3] 8) -> [3 8]", "(append [9 5 2] 4) -> [9 5 2 4]"]}
{"name": "append", "time": 1.308241, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [1] 4) -> [1 4]", "(append [7] 8) -> [7 8]", "(append [9 9 3 5 1] 4) -> [9 9 3 5 1 4]", "(append [8] 7) -> [8 7]", "(append [2 5] 5) -> [2 5 5]"]}
{"name": "append", "time": 1.271181, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [2 3 5 3 4] 1) -> [2 3 5 3 4 1]", "(append [0 6 8] 6) -> [0 6 8 6]", "(append [0] 6) -> [0 6]", "(append [0] 6) -> [0 6]", "(append [6] 7) -> [6 7]"]}
{"name": "append", "time": 1.322029, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [4 6 4 8] 4) -> [4 6 4 8 4]", "(append [] 4) -> [4]", "(append [2 6 7 2] 2) -> [2 6 7 2 2]", "(append [5 2 6 1] 7) -> [5 2 6 1 7]", "(append [] 9) -> [9]"]}
{"name": "append", "time": 1.291836, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [4 8 8 7] 2) -> [4 8 8 7 2]", "(append [7 3 1 0 8] 7) -> [7 3 1 0 8 7]", "(append [0] 4) -> [0 4]", "(append [1 5 1 7] 3) -> [1 5 1 7 3]", "(append [2] 4) -> [2 4]"]}
{"name": "append", "time": 1.286118, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [9 8] 4) -> [9 8 4]", "(append [] 1) -> [1]", "(append [1 0 9] 5) -> [1 0 9 5]", "(append [] 7) -> [7]", "(append [] 1) -> [1]"]}
{"name": "append", "time": 0.942533, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [5 9 6 2 8] 0) -> [5 9 6 2 8 0]", "(append [5] 1) -> [5 1]", "(append [5 3 9 3 3] 1) -> [5 3 9 3 3 1]", "(append [7 7] 6) -> [7 7 6]", "(append [3 4 4 8] 2) -> [3 4 4 8 2]"]}
{"name": "append", "time": 0.666742, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [4 7 7 0] 7) -> [4 7 7 0 7]", "(append [6 1 0 2 3] 0) -> [6 1 0 2 3 0]", "(append [4] 0) -> [4 0]", "(append [5] 8) -> [5 8]", "(append [2 9] 1) -> [2 9 1]"]}
{"name": "append", "time": 1.30608, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [1] 6) -> [1 6]", "(append [1 5] 5) -> [1 5 5]", "(append [7 0] 9) -> [7 0 9]", "(append [8 9 5] 6) -> [8 9 5 6]", "(append [3] 7) -> [3 7]"]}
{"name": "append", "time": 1.303543, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [] 2) -> [2]", "(append [] 1) -> [1]", "(append [4 4] 0) -> [4 4 0]", "(append [0 3 3] 2) -> [0 3 3 2]", "(append [3 7 6] 6) -> [3 7 6 6]"]}
{"name": "append", "time": 1.360843, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [1 8 8 2 5] 8) -> [1 8 8 2 5 8]", "(append [8 2 7 0] 1) -> [8 2 7 0 1]", "(append [3 2 1 9] 6) -> [3 2 1 9 6]", "(append [5 9 3] 5) -> [5 9 3 5]", "(append [7] 6) -> [7 6]"]}
{"name": "append", "time": 1.46709, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [9 0 2] 2) -> [9 0 2 2]", "(append [4] 7) -> [4 7]", "(append [5 2 9 6] 9) -> [5 2 9 6 9]", "(append [0] 8) -> [0 8]", "(append [7] 2) -> [7 2]"]}
{"name": "append", "time": 0.602643, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [7 5 3 1] 4) -> [7 5 3 1 4]", "(append [4 0 8 5 0] 3) -> [4 0 8 5 0 3]", "(append [] 5) -> [5]", "(append [] 0) -> [0]", "(append [0 9] 3) -> [0 9 3]"]}
{"name": "append", "time": 1.431866, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [6 0 2] 4) -> [6 0 2 4]", "(append [2] 7) -> [2 7]", "(append [4 3] 3) -> [4 3 3]", "(append [9 9 1 9] 5) -> [9 9 1 9 5]", "(append [9] 2) -> [9 2]"]}
{"name": "append", "time": 0.773297, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [] 7) -> [7]", "(append [3 8] 2) -> [3 8 2]", "(append [5 6] 6) -> [5 6 6]", "(append [3 2] 6) -> [3 2 6]", "(append [] 0) -> [0]"]}
{"name": "append", "time": 1.044465, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [9 4 5 0 7] 7) -> [9 4 5 0 7 7]", "(append [5 8 6] 1) -> [5 8 6 1]", "(append [8 7 1 6] 5) -> [8 7 1 6 5]", "(append [] 5) -> [5]", "(append [] 8) -> [8]"]}
{"name": "append", "time": 1.135874, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [6 4] 4) -> [6 4 4]", "(append [8 8 5 3] 4) -> [8 8 5 3 4]", "(append [8 3 1] 6) -> [8 3 1 6]", "(append [2 2 9] 3) -> [2 2 9 3]", "(append [5 1] 2) -> [5 1 2]"]}
{"name": "append", "time": 1.148497, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [8] 9) -> [8 9]", "(append [7 9 6 6] 5) -> [7 9 6 6 5]", "(append [5 0 7] 4) -> [5 0 7 4]", "(append [3 1 6 9 7] 0) -> [3 1 6 9 7 0]", "(append [8 7 1] 1) -> [8 7 1 1]"]}
{"name": "append", "time": 0.772619, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d (cons b (cdr c)))) [8])) _) _)", "examples": ["(append [4] 2) -> [4 2]", "(append [8] 4) -> [8 4]", "(append [] 8) -> [8]", "(append [4 2] 2) -> [4 2 2]", "(append [0] 6) -> [0 6]"]}
{"name": "append", "time": 5.401883, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [5])) _) _)", "examples": ["(append [2 8 9] 3) -> [2 8 9 3]", "(append [6] 8) -> [6 8]", "(append [8] 0) -> [8 0]", "(append [6] 3) -> [6 3]", "(append [] 5) -> [5]"]}
{"name": "append", "time": 1.159343, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [] 4) -> [4]", "(append [] 1) -> [1]", "(append [] 7) -> [7]", "(append [9 3 3 1] 1) -> [9 3 3 1 1]", "(append [3 5 1 9] 8) -> [3 5 1 9 8]"]}
{"name": "append", "time": 5.560058, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [9])) _) _)", "examples": ["(append [3 3 8 9] 2) -> [3 3 8 9 2]", "(append [] 9) -> [9]", "(append [3 8 3 0] 8) -> [3 8 3 0 8]", "(append [5] 8) -> [5 8]", "(append [0] 2) -> [0 2]"]}
{"name": "append", "time": 0.671958, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [] 3) -> [3]", "(append [8] 1) -> [8 1]", "(append [] 1) -> [1]", "(append [8 4 4] 0) -> [8 4 4 0]", "(append [] 0) -> [0]"]}
{"name": "append", "time": 1.207944, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [4 6] 0) -> [4 6 0]", "(append [2 1 5] 7) -> [2 1 5 7]", "(append [] 3) -> [3]", "(append [] 2) -> [2]", "(append [5 5 4 1] 7) -> [5 5 4 1 7]"]}
{"name": "append", "time": 0.813897, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [0 0 4 9] 7) -> [0 0 4 9 7]", "(append [4 7] 4) -> [4 7 4]", "(append [6] 9) -> [6 9]", "(append [3 0] 5) -> [3 0 5]", "(append [9] 2) -> [9 2]"]}
{"name": "append", "time": 5.792568, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [6])) _) _)", "examples": ["(append [5 2] 5) -> [5 2 5]", "(append [] 6) -> [6]", "(append [8 4 5] 1) -> [8 4 5 1]", "(append [2 5] 9) -> [2 5 9]", "(append [9] 6) -> [9 6]"]}
{"name": "append", "time": 6.891862, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [4])) _) _)", "examples": ["(append [9 3] 2) -> [9 3 2]", "(append [] 4) -> [4]", "(append [5 2 9 8] 2) -> [5 2 9 8 2]", "(append [4] 7) -> [4 7]", "(append [1 8] 8) -> [1 8 8]"]}
{"name": "append", "time": 7.071613, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [7])) _) _)", "examples": ["(append [4 2 5] 3) -> [4 2 5 3]", "(append [7 3 7 4 3] 2) -> [7 3 7 4 3 2]", "(append [3] 1) -> [3 1]", "(append [] 7) -> [7]", "(append [6 2 2 9 1] 8) -> [6 2 2 9 1 8]"]}
{"name": "append", "time": 0.678652, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [] 9) -> [9]", "(append [2 8 4] 6) -> [2 8 4 6]", "(append [2] 3) -> [2 3]", "(append [9] 6) -> [9 6]", "(append [] 5) -> [5]"]}
{"name": "append", "time": 5.957468, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [3])) _) _)", "examples": ["(append [] 3) -> [3]", "(append [2 9] 3) -> [2 9 3]", "(append [1] 1) -> [1 1]", "(append [0 4] 9) -> [0 4 9]", "(append [1 8 7 2 7] 9) -> [1 8 7 2 7 9]"]}
{"name": "append", "time": 1.070061, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [7 4] 3) -> [7 4 3]", "(append [2 0 1 3] 4) -> [2 0 1 3 4]", "(append [2 4 1 3 9] 4) -> [2 4 1 3 9 4]", "(append [2 0 9] 9) -> [2 0 9 9]", "(append [0] 5) -> [0 5]"]}
{"name": "append", "time": 0.740966, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [0 3 1 0 9] 8) -> [0 3 1 0 9 8]", "(append [5] 7) -> [5 7]", "(append [7 5 5 7] 4) -> [7 5 5 7 4]", "(append [0 5] 2) -> [0 5 2]", "(append [7 0 4 6] 4) -> [7 0 4 6 4]"]}
{"name": "append", "time": 0.770532, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [7 6] 2) -> [7 6 2]", "(append [3 0 7 3 9] 3) -> [3 0 7 3 9 3]", "(append [7 3 2] 3) -> [7 3 2 3]", "(append [8] 4) -> [8 4]", "(append [1 1 9 1] 8) -> [1 1 9 1 8]"]}
{"name": "append", "time": 5.804527, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [0])) _) _)", "examples": ["(append [9 0 1 6 4] 2) -> [9 0 1 6 4 2]", "(append [6 7 3] 7) -> [6 7 3 7]", "(append [] 0) -> [0]", "(append [5] 6) -> [5 6]", "(append [8 2 4 7] 7) -> [8 2 4 7 7]"]}
{"name": "append", "time": 1.536797, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [5 4 9 7] 0) -> [5 4 9 7 0]", "(append [6 7 4 5 8] 4) -> [6 7 4 5 8 4]", "(append [4 1 5] 5) -> [4 1 5 5]", "(append [3 0 8 7] 8) -> [3 0 8 7 8]", "(append [8 4 2] 0) -> [8 4 2 0]"]}
{"name": "append", "time": 4.954223, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [6])) _) _)", "examples": ["(append [0 6 5 6] 8) -> [0 6 5 6 8]", "(append [1 9 6] 6) -> [1 9 6 6]", "(append [9 1 0 9 9] 1) -> [9 1 0 9 9 1]", "(append [9] 1) -> [9 1]", "(append [] 6) -> [6]"]}
{"name": "append", "time": 0.846571, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [] 2) -> [2]", "(append [8 8] 8) -> [8 8 8]", "(append [] 5) -> [5]", "(append [1 2 5 5] 4) -> [1 2 5 5 4]", "(append [1 0 6] 3) -> [1 0 6 3]"]}
{"name": "append", "time": 1.206211, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [9] 8) -> [9 8]", "(append [8 5] 0) -> [8 5 0]", "(append [1 4 9 3] 0) -> [1 4 9 3 0]", "(append [1 0 9 8 6] 9) -> [1 0 9 8 6 9]", "(append [2] 3) -> [2 3]"]}
{"name": "append", "time": 10.550335, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [7])) _) _)", "examples": ["(append [0 1 6] 5) -> [0 1 6 5]", "(append [3 1 2] 5) -> [3 1 2 5]", "(append [3 6] 2) -> [3 6 2]", "(append [9 5 3] 4) -> [9 5 3 4]", "(append [] 7) -> [7]"]}
{"name": "append", "time": 8.235659, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [3])) _) _)", "examples": ["(append [] 3) -> [3]", "(append [3 4 9 3] 4) -> [3 4 9 3 4]", "(append [0 3 7] 9) -> [0 3 7 9]", "(append [5] 3) -> [5 3]", "(append [3] 3) -> [3 3]"]}
{"name": "append", "time": 5.512799, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [5])) _) _)", "examples": ["(append [2 9 2 7 5] 1) -> [2 9 2 7 5 1]", "(append [0] 4) -> [0 4]", "(append [0 4 3 8] 0) -> [0 4 3 8 0]", "(append [0 5 2] 3) -> [0 5 2 3]", "(append [] 5) -> [5]"]}
{"name": "append", "time": 5.390961, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [4])) _) _)", "examples": ["(append [4] 2) -> [4 2]", "(append [6 3] 3) -> [6 3 3]", "(append [] 4) -> [4]", "(append [9 8 3] 9) -> [9 8 3 9]", "(append [1] 2) -> [1 2]"]}
{"name": "append", "time": 4.893072, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [1])) _) _)", "examples": ["(append [9 9 9] 6) -> [9 9 9 6]", "(append [5 6] 8) -> [5 6 8]", "(append [] 1) -> [1]", "(append [4] 9) -> [4 9]", "(append [3 1] 3) -> [3 1 3]"]}
{"name": "append", "time": 6.726903, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [1])) _) _)", "examples": ["(append [4] 3) -> [4 3]", "(append [1 0 2 4 4] 4) -> [1 0 2 4 4 4]", "(append [] 1) -> [1]", "(append [8 7 1 6] 0) -> [8 7 1 6 0]", "(append [8 0 5 9 5] 4) -> [8 0 5 9 5 4]"]}
{"name": "append", "time": 0.616411, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [7 6] 7) -> [7 6 7]", "(append [3 3] 6) -> [3 3 6]", "(append [0] 5) -> [0 5]", "(append [5] 4) -> [5 4]", "(append [4 2 0 0 3] 9) -> [4 2 0 0 3 9]"]}
{"name": "append", "time": 14.138427, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [2])) _) _)", "examples": ["(append [4 6] 3) -> [4 6 3]", "(append [4 9 6 5 5] 7) -> [4 9 6 5 5 7]", "(append [0 3] 7) -> [0 3 7]", "(append [4 3 4 0] 9) -> [4 3 4 0 9]", "(append [] 2) -> [2]"]}
{"name": "append", "time": 3.817071, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [6])) _) _)", "examples": ["(append [6] 9) -> [6 9]", "(append [8] 0) -> [8 0]", "(append [] 6) -> [6]", "(append [0 8 0 1] 0) -> [0 8 0 1 0]", "(append [4 3 3 6 3] 4) -> [4 3 3 6 3 4]"]}
{"name": "append", "time": 1.332408, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [0 1 0 3 1] 0) -> [0 1 0 3 1 0]", "(append [9 3 9 6] 5) -> [9 3 9 6 5]", "(append [] 6) -> [6]", "(append [] 9) -> [9]", "(append [7 9 8] 7) -> [7 9 8 7]"]}
{"name": "append", "time": 14.941619, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [3])) _) _)", "examples": ["(append [6 0 7 1] 8) -> [6 0 7 1 8]", "(append [7 1 0 6 1] 1) -> [7 1 0 6 1 1]", "(append [2 9 2] 4) -> [2 9 2 4]", "(append [] 3) -> [3]", "(append [3 6 1 7 0] 2) -> [3 6 1 7 0 2]"]}
{"name": "append", "time": 7.658664, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [2])) _) _)", "examples": ["(append [] 2) -> [2]", "(append [3 6] 7) -> [3 6 7]", "(append [0 2 3] 5) -> [0 2 3 5]", "(append [7] 9) -> [7 9]", "(append [2 0 4 8 1] 3) -> [2 0 4 8 1 3]"]}
{"name": "append", "time": 1.298946, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [6 2] 1) -> [6 2 1]", "(append [] 8) -> [8]", "(append [] 4) -> [4]", "(append [] 9) -> [9]", "(append [0 0 4] 2) -> [0 0 4 2]"]}
{"name": "append", "time": 1.166902, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [4 8 7 1] 9) -> [4 8 7 1 9]", "(append [] 5) -> [5]", "(append [] 6) -> [6]", "(append [8 0 9 0 6] 9) -> [8 0 9 0 6 9]", "(append [8 2 8 4] 2) -> [8 2 8 4 2]"]}
{"name": "append", "time": 1.160124, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [7 4] 9) -> [7 4 9]", "(append [6 0 0 8 2] 1) -> [6 0 0 8 2 1]", "(append [2 8 6] 7) -> [2 8 6 7]", "(append [] 4) -> [4]", "(append [] 3) -> [3]"]}
{"name": "append", "time": 8.632163, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [3])) _) _)", "examples": ["(append [] 3) -> [3]", "(append [8 3 6 5] 7) -> [8 3 6 5 7]", "(append [7] 5) -> [7 5]", "(append [4 0 7 2] 0) -> [4 0 7 2 0]", "(append [6 3] 2) -> [6 3 2]"]}
{"name": "append", "time": 1.11795, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [0 1] 1) -> [0 1 1]", "(append [7 2 8 9] 5) -> [7 2 8 9 5]", "(append [8 6] 4) -> [8 6 4]", "(append [6 2] 2) -> [6 2 2]", "(append [0 8 5 6] 0) -> [0 8 5 6 0]"]}
{"name": "append", "time": 16.325902, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [0])) _) _)", "examples": ["(append [5 5 6 2] 3) -> [5 5 6 2 3]", "(append [3 4] 0) -> [3 4 0]", "(append [5 6 8 2] 0) -> [5 6 8 2 0]", "(append [1 6] 0) -> [1 6 0]", "(append [] 0) -> [0]"]}
{"name": "append", "time": 0.727454, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [1 4 0 8 7] 5) -> [1 4 0 8 7 5]", "(append [3 1 0] 8) -> [3 1 0 8]", "(append [0] 8) -> [0 8]", "(append [6 9 5 9] 8) -> [6 9 5 9 8]", "(append [2] 3) -> [2 3]"]}
{"name": "append", "time": 1.239453, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [3 2] 1) -> [3 2 1]", "(append [2 0] 5) -> [2 0 5]", "(append [1 6 3] 0) -> [1 6 3 0]", "(append [3] 1) -> [3 1]", "(append [0 2 9] 7) -> [0 2 9 7]"]}
{"name": "append", "time": 0.797064, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [6 4] 0) -> [6 4 0]", "(append [8 8 8 5] 2) -> [8 8 8 5 2]", "(append [3 1 5 0 7] 2) -> [3 1 5 0 7 2]", "(append [0 2 1 4 9] 6) -> [0 2 1 4 9 6]", "(append [7 1] 0) -> [7 1 0]"]}
{"name": "append", "time": 0.762074, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [7 1 8 1 0] 2) -> [7 1 8 1 0 2]", "(append [5 9 2 0 7] 2) -> [5 9 2 0 7 2]", "(append [3 3 2] 9) -> [3 3 2 9]", "(append [] 5) -> [5]", "(append [] 3) -> [3]"]}
{"name": "append", "time": 1.110091, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [1 8 1] 8) -> [1 8 1 8]", "(append [8 9 8 9] 7) -> [8 9 8 9 7]", "(append [7 9 7 0 9] 8) -> [7 9 7 0 9 8]", "(append [5 3 1 5] 3) -> [5 3 1 5 3]", "(append [0 4 9] 0) -> [0 4 9 0]"]}
{"name": "append", "time": 0.740577, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [7 2] 5) -> [7 2 5]", "(append [1 5 3 5 3] 7) -> [1 5 3 5 3 7]", "(append [8 8 1 1] 2) -> [8 8 1 1 2]", "(append [8 3 5] 6) -> [8 3 5 6]", "(append [5 3 9 6] 7) -> [5 3 9 6 7]"]}
{"name": "append", "time": 5.802789, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [5])) _) _)", "examples": ["(append [0] 1) -> [0 1]", "(append [] 5) -> [5]", "(append [9 2 2] 7) -> [9 2 2 7]", "(append [5 2 4 0 0] 3) -> [5 2 4 0 0 3]", "(append [9] 4) -> [9 4]"]}
{"name": "append", "time": 0.950424, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [7 1 8] 6) -> [7 1 8 6]", "(append [1 8 3 1 0] 5) -> [1 8 3 1 0 5]", "(append [8] 0) -> [8 0]", "(append [] 4) -> [4]", "(append [] 0) -> [0]"]}
{"name": "append", "time": 15.400704, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [9])) _) _)", "examples": ["(append [1 3 5 2] 6) -> [1 3 5 2 6]", "(append [] 9) -> [9]", "(append [1 1 6 7] 3) -> [1 1 6 7 3]", "(append [9 5] 6) -> [9 5 6]", "(append [9 0 8] 6) -> [9 0 8 6]"]}
{"name": "append", "time": 12.75306, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [4])) _) _)", "examples": ["(append [1 5 9 1] 8) -> [1 5 9 1 8]", "(append [9 8 8 4] 2) -> [9 8 8 4 2]", "(append [3 7] 7) -> [3 7 7]", "(append [5 4] 8) -> [5 4 8]", "(append [] 4) -> [4]"]}
{"name": "append", "time": 1.059017, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [2 2 8] 7) -> [2 2 8 7]", "(append [9 1] 6) -> [9 1 6]", "(append [9 3 2 5] 8) -> [9 3 2 5 8]", "(append [3 7 6] 4) -> [3 7 6 4]", "(append [6 9 3] 8) -> [6 9 3 8]"]}
{"name": "append", "time": 1.046064, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [8 4 8 4 2] 4) -> [8 4 8 4 2 4]", "(append [7 1 8 0] 6) -> [7 1 8 0 6]", "(append [0 2 5 0] 7) -> [0 2 5 0 7]", "(append [2 0 0 6] 8) -> [2 0 0 6 8]", "(append [8 1 8 6 2] 3) -> [8 1 8 6 2 3]"]}
{"name": "append", "time": 1.068195, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [] 5) -> [5]", "(append [2 1] 3) -> [2 1 3]", "(append [4 8 0] 2) -> [4 8 0 2]", "(append [] 6) -> [6]", "(append [] 8) -> [8]"]}
{"name": "append", "time": 6.025966, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [6])) _) _)", "examples": ["(append [7] 3) -> [7 3]", "(append [] 6) -> [6]", "(append [7 9 6] 5) -> [7 9 6 5]", "(append [3 0] 4) -> [3 0 4]", "(append [1 3 6 8 2] 5) -> [1 3 6 8 2 5]"]}
{"name": "append", "time": 0.739145, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [2] 5) -> [2 5]", "(append [9 4] 5) -> [9 4 5]", "(append [1 0 7] 6) -> [1 0 7 6]", "(append [2 6] 2) -> [2 6 2]", "(append [9 2 2 3] 1) -> [9 2 2 3 1]"]}
{"name": "append", "time": 0.908578, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [8] 8) -> [8 8]", "(append [8 9 2 4 9] 2) -> [8 9 2 4 9 2]", "(append [6 3 5 2] 1) -> [6 3 5 2 1]", "(append [5 3] 6) -> [5 3 6]", "(append [3 9] 0) -> [3 9 0]"]}
{"name": "append", "time": 0.841151, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [4 5 2] 1) -> [4 5 2 1]", "(append [5] 9) -> [5 9]", "(append [4 7 6 2] 1) -> [4 7 6 2 1]", "(append [9 6 5 6] 4) -> [9 6 5 6 4]", "(append [7] 8) -> [7 8]"]}
{"name": "append", "time": 5.711836, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [1])) _) _)", "examples": ["(append [3 9] 7) -> [3 9 7]", "(append [5] 5) -> [5 5]", "(append [8 5 3 2 1] 5) -> [8 5 3 2 1 5]", "(append [4 9] 3) -> [4 9 3]", "(append [] 1) -> [1]"]}
{"name": "append", "time": 0.959816, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [0 1 4 4] 9) -> [0 1 4 4 9]", "(append [7] 3) -> [7 3]", "(append [0 2 9 9 3] 5) -> [0 2 9 9 3 5]", "(append [4 8 0 8] 8) -> [4 8 0 8 8]", "(append [2 2] 8) -> [2 2 8]"]}
{"name": "append", "time": 10.473352, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [2])) _) _)", "examples": ["(append [1 0] 9) -> [1 0 9]", "(append [5 0 0 7 1] 2) -> [5 0 0 7 1 2]", "(append [] 2) -> [2]", "(append [8 0 7] 8) -> [8 0 7 8]", "(append [1 8 2 0 7] 0) -> [1 8 2 0 7 0]"]}
{"name": "append", "time": 0.784924, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [2 4 5 6] 6) -> [2 4 5 6 6]", "(append [6 8] 1) -> [6 8 1]", "(append [9 2 5 3] 6) -> [9 2 5 3 6]", "(append [4 1 4] 4) -> [4 1 4 4]", "(append [2 3 7] 9) -> [2 3 7 9]"]}
{"name": "append", "time": 6.425943, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [6])) _) _)", "examples": ["(append [] 6) -> [6]", "(append [0 6 4] 5) -> [0 6 4 5]", "(append [7] 5) -> [7 5]", "(append [2 1 7] 4) -> [2 1 7 4]", "(append [] 6) -> [6]"]}
{"name": "append", "time": 1.205583, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [3] 8) -> [3 8]", "(append [2 7 6] 8) -> [2 7 6 8]", "(append [8 6 6] 5) -> [8 6 6 5]", "(append [1] 7) -> [1 7]", "(append [8] 2) -> [8 2]"]}
{"name": "append", "time": 0.600217, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [1 9 6] 1) -> [1 9 6 1]", "(append [4] 2) -> [4 2]", "(append [6 4 4 1 0] 6) -> [6 4 4 1 0 6]", "(append [7] 2) -> [7 2]", "(append [6] 9) -> [6 9]"]}
{"name": "append", "time": 0.604605, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [] 7) -> [7]", "(append [2 2 6] 6) -> [2 2 6 6]", "(append [1] 2) -> [1 2]", "(append [3 8 1 4 3] 2) -> [3 8 1 4 3 2]", "(append [] 2) -> [2]"]}
{"name": "append", "time": 1.100819, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [2 7] 8) -> [2 7 8]", "(append [4] 7) -> [4 7]", "(append [1] 5) -> [1 5]", "(append [7 1] 5) -> [7 1 5]", "(append [4 9 5 2] 8) -> [4 9 5 2 8]"]}
{"name": "append", "time": 1.235507, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [5 9 9 5] 8) -> [5 9 9 5 8]", "(append [0 9 8] 2) -> [0 9 8 2]", "(append [5 4 9 8] 4) -> [5 4 9 8 4]", "(append [7 3 2] 2) -> [7 3 2 2]", "(append [5 3] 5) -> [5 3 5]"]}
{"name": "append", "time": 6.061713, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [4])) _) _)", "examples": ["(append [4 1 0] 6) -> [4 1 0 6]", "(append [] 4) -> [4]", "(append [6] 7) -> [6 7]", "(append [1 2 8] 7) -> [1 2 8 7]", "(append [1 9] 7) -> [1 9 7]"]}
{"name": "append", "time": 0.829595, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [6 9 3 5 4] 1) -> [6 9 3 5 4 1]", "(append [] 9) -> [9]", "(append [] 0) -> [0]", "(append [9 1] 7) -> [9 1 7]", "(append [2 0] 0) -> [2 0 0]"]}
{"name": "append", "time": 12.365985, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [2])) _) _)", "examples": ["(append [8 8 6 6] 9) -> [8 8 6 6 9]", "(append [0 0 6] 1) -> [0 0 6 1]", "(append [7 5] 6) -> [7 5 6]", "(append [] 2) -> [2]", "(append [9 8 1] 2) -> [9 8 1 2]"]}
{"name": "append", "time": 0.722974, "solution": "(let append (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) (cons b []))) _) _)", "examples": ["(append [] 0) -> [0]", "(append [] 6) -> [6]", "(append [3 3 2 9 7] 4) -> [3 3 2 9 7 4]", "(append [3 4] 1) -> [3 4 1]", "(append [2 8 7] 5) -> [2 8 7 5]"]}
{"name": "append", "time": 4.448562, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [9])) _) _)", "examples": ["(append [7] 0) -> [7 0]", "(append [7 5] 9) -> [7 5 9]", "(append [9] 4) -> [9 4]", "(append [] 9) -> [9]", "(append [7] 7) -> [7 7]"]}
{"name": "append", "time": 6.155697, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [9])) _) _)", "examples": ["(append [6 4 9 8 1] 0) -> [6 4 9 8 1 0]", "(append [] 9) -> [9]", "(append [7] 3) -> [7 3]", "(append [9 9 2] 2) -> [9 9 2 2]", "(append [7] 2) -> [7 2]"]}
{"name": "append", "time": 4.827257, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [1])) _) _)", "examples": ["(append [] 1) -> [1]", "(append [1 4 8 1] 2) -> [1 4 8 1 2]", "(append [6 9 4 5 8] 2) -> [6 9 4 5 8 2]", "(append [5] 9) -> [5 9]", "(append [7 9] 6) -> [7 9 6]"]}
{"name": "append", "time": 5.78126, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [4])) _) _)", "examples": ["(append [3 8 6 0 2] 6) -> [3 8 6 0 2 6]", "(append [3] 4) -> [3 4]", "(append [3] 9) -> [3 9]", "(append [] 4) -> [4]", "(append [7 8] 0) -> [7 8 0]"]}
{"name": "append", "time": 12.909433, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [1])) _) _)", "examples": ["(append [] 1) -> [1]", "(append [5 2 1 6 6] 9) -> [5 2 1 6 6 9]", "(append [5 5] 4) -> [5 5 4]", "(append [4 1 8 7 6] 7) -> [4 1 8 7 6 7]", "(append [5 5 0 4] 9) -> [5 5 0 4 9]"]}
{"name": "append", "time": 10.129511, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [7])) _) _)", "examples": ["(append [9 5 7 0] 6) -> [9 5 7 0 6]", "(append [3 0 8] 7) -> [3 0 8 7]", "(append [2 6 5 4 1] 6) -> [2 6 5 4 1 6]", "(append [] 7) -> [7]", "(append [3 5 2 7 0] 6) -> [3 5 2 7 0 6]"]}
{"name": "append", "time": 10.1114, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [1])) _) _)", "examples": ["(append [3 0 4 5 0] 4) -> [3 0 4 5 0 4]", "(append [] 1) -> [1]", "(append [0 4 8 0 8] 8) -> [0 4 8 0 8 8]", "(append [0 3 8 7] 4) -> [0 3 8 7 4]", "(append [3 6] 9) -> [3 6 9]"]}
{"name": "append", "time": 7.249918, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [7])) _) _)", "examples": ["(append [7 5 2] 2) -> [7 5 2 2]", "(append [8 5 2 2 6] 3) -> [8 5 2 2 6 3]", "(append [] 7) -> [7]", "(append [9 7 8] 1) -> [9 7 8 1]", "(append [0 3 1 6] 5) -> [0 3 1 6 5]"]}
{"name": "append", "time": 7.854941, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [1])) _) _)", "examples": ["(append [3 8] 8) -> [3 8 8]", "(append [7 8 3 6 0] 5) -> [7 8 3 6 0 5]", "(append [3 4] 7) -> [3 4 7]", "(append [] 1) -> [1]", "(append [3 6] 1) -> [3 6 1]"]}
{"name": "append", "time": 6.245668, "solution": "(let append (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) (cons b []))) [5])) _) _)", "examples": ["(append [2 0 0 3] 7) -> [2 0 0 3 7]", "(append [4 2 7] 1) -> [4 2 7 1]", "(append [7 7 8] 1) -> [7 7 8 1]", "(append [] 5) -> [5]", "(append [7 1] 6) -> [7 1 6]"]}
