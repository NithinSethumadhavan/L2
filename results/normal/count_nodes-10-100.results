{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {7 {8} {9}}) -> 3", "(count_nodes {8 {1} {2}}) -> 3", "(count_nodes {1 {3} {1 {9 {1} {6}} {2}}}) -> 7", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.096766, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {8}}) -> 2", "(count_nodes {4 {5} {6}}) -> 3", "(count_nodes {1 {0 {4 {1} {4}} {6}} {9 {3} {5}}}) -> 9", "(count_nodes {3 {4 {5} {3}} {8}}) -> 5", "(count_nodes {2 {8 {1} {6}} {3}}) -> 5", "(count_nodes {3 {0 {6}}}) -> 3", "(count_nodes {5 {6} {1 {8}}}) -> 4", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.130811, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {7 {5}}) -> 2", "(count_nodes {9}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2 {1}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 1)) 1)) 0)) _) _)", "time": 1.166303, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {4} {2}}) -> 3", "(count_nodes {3}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {3 {4 {6 {4} {8}} {4}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {3 {8 {0}}}) -> 3", "(count_nodes {4 {7 {6 {4}} {2 {6}}} {0 {7}}}) -> 8", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.17037, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {7 {8 {2} {2}} {0}}) -> 5", "(count_nodes {9 {4 {0 {9}}}}) -> 4", "(count_nodes {3 {9 {2 {5} {3}} {2}}}) -> 6", "(count_nodes {1}) -> 1", "(count_nodes {7 {2}}) -> 2", "(count_nodes {8}) -> 1", "(count_nodes {1 {3} {2 {5}}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.142018, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {3} {3}}) -> 3", "(count_nodes {4}) -> 1", "(count_nodes {6 {3 {2 {4} {7}}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {7 {9 {6 {6} {5}} {0}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.188828, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {9} {4}}) -> 3", "(count_nodes {7 {2}}) -> 2", "(count_nodes {8 {1} {5}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {5 {1} {8}}) -> 3", "(count_nodes {2 {1 {9 {2} {6}}}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.156495, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {5 {6 {2}}}) -> 3", "(count_nodes {9 {3} {8 {2}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.145605, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {3}) -> 1", "(count_nodes {9 {1 {6} {6}} {6}}) -> 5", "(count_nodes {8 {1 {7 {1} {4}} {8 {2} {5}}} {6 {5 {7} {6}} {6}}}) -> 13", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {9 {9 {5}}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.134044, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2 {2} {9}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {7 {4 {3} {2}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {1 {6 {3}}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.211597, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {4 {0} {0}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {3 {0 {9} {2}}}) -> 4", "(count_nodes {1}) -> 1", "(count_nodes {9 {5} {1}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {1}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.072206, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {0 {9}}) -> 2", "(count_nodes {7 {3} {0}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {8}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 1.232662, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {1 {8}} {5}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {9 {6}}) -> 2", "(count_nodes {0 {1}}) -> 2", "(count_nodes {1}) -> 1", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {2 {3} {4}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.238325, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {0 {7 {7}} {4}}}) -> 5", "(count_nodes {4 {2 {8}}}) -> 3", "(count_nodes {5 {5}}) -> 2", "(count_nodes {1 {0 {1}} {6 {6} {9}}}) -> 6", "(count_nodes {3}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.227134, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {1} {5}}) -> 3", "(count_nodes {1 {8 {6}} {5 {7} {6}}}) -> 6", "(count_nodes {2}) -> 1", "(count_nodes {5 {7} {7 {8}}}) -> 4", "(count_nodes {3}) -> 1", "(count_nodes {8}) -> 1", "(count_nodes {0 {7 {5}} {1 {2}}}) -> 5", "(count_nodes {5 {1}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.279187, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {8 {1 {7} {8}} {3 {8} {8}}} {1 {1} {0 {9} {8}}}}) -> 13", "(count_nodes {5}) -> 1", "(count_nodes {7 {4 {4} {2}} {3 {2} {7}}}) -> 7", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.396095, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {1 {4 {2} {2 {1}}} {6}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {9 {0} {7}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {9 {8 {4}} {7}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.057203, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {9}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {4 {1 {3}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {6 {9} {7}}) -> 3", "(count_nodes {8 {5}}) -> 2", "(count_nodes {7 {5}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.977623, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {5}}) -> 2", "(count_nodes {1}) -> 1", "(count_nodes {9 {6 {4 {4} {2}}} {5}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {9 {2 {9}}}) -> 3", "(count_nodes {5}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.999101, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {0 {5 {7}} {5}}) -> 4", "(count_nodes {1 {2} {4}}) -> 3", "(count_nodes {2 {0} {6 {6 {0}} {2 {5}}}}) -> 7", "(count_nodes {5 {1} {9 {3}}}) -> 4", "(count_nodes {3 {2 {1 {7}} {4 {4}}}}) -> 6", "(count_nodes {9 {2 {3}}}) -> 3", "(count_nodes {0 {0 {5}} {9 {8} {2}}}) -> 6"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.050172, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {2 {6}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {0 {6 {7 {4} {9}}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {8 {7} {1}}) -> 3", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.000166, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {9}) -> 1", "(count_nodes {4 {4 {1 {7}} {0 {0} {9}}}}) -> 7", "(count_nodes {1 {2}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {7 {4} {0 {6} {2}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {8}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.996231, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {0 {1}} {9}}) -> 4", "(count_nodes {1 {6 {3}}}) -> 3", "(count_nodes {7}) -> 1", "(count_nodes {6 {8 {7}} {6 {1} {9}}}) -> 6", "(count_nodes {3}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2 {6 {4}}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.078594, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {3 {9 {6} {7}} {8}}}) -> 6", "(count_nodes {7 {6} {1}}) -> 3", "(count_nodes {6 {2 {2 {8}} {2 {6}}} {6 {1 {9}}}}) -> 9", "(count_nodes {}) -> 0", "(count_nodes {7 {7 {9} {3 {7} {3}}} {2 {7 {8}}}}) -> 9", "(count_nodes {4}) -> 1", "(count_nodes {6}) -> 1", "(count_nodes {3 {4 {9} {7}}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.124143, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {2}}) -> 2", "(count_nodes {1}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {6 {2}}) -> 2", "(count_nodes {0 {6} {2}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {0 {0 {8} {5}}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.017072, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {4} {1}}) -> 3", "(count_nodes {9 {8 {1}} {7 {4}}}) -> 5", "(count_nodes {8 {4 {7} {4}}}) -> 4", "(count_nodes {2 {0 {7} {6}} {4 {9} {6}}}) -> 7", "(count_nodes {2 {3}}) -> 2", "(count_nodes {5 {9 {3} {3}} {1 {3}}}) -> 6", "(count_nodes {0}) -> 1", "(count_nodes {5 {1} {9}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.115679, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {3 {3}}}) -> 3", "(count_nodes {2 {5 {4 {5}} {2 {7} {0}}}}) -> 7", "(count_nodes {7 {5}}) -> 2", "(count_nodes {8 {5} {3}}) -> 3", "(count_nodes {0 {6 {2}} {5 {4}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {8}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.056577, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {7} {3}}) -> 3", "(count_nodes {4}) -> 1", "(count_nodes {1 {9 {1 {6} {5}}} {4 {7 {0}} {1 {7}}}}) -> 10", "(count_nodes {6}) -> 1", "(count_nodes {5 {0}}) -> 2", "(count_nodes {6}) -> 1", "(count_nodes {1}) -> 1", "(count_nodes {8 {2}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.061159, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8 {4 {7 {0} {2}}}}) -> 5", "(count_nodes {4 {9}}) -> 2", "(count_nodes {0 {1 {6} {3}}}) -> 4", "(count_nodes {5}) -> 1", "(count_nodes {7 {0 {7}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {8 {9} {9 {3} {3}}}) -> 5", "(count_nodes {9 {0 {6 {1} {5}} {0 {5}}} {4}}) -> 8"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.126849, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1 {8 {6} {5}} {0}}) -> 5", "(count_nodes {1 {0} {2}}) -> 3", "(count_nodes {7}) -> 1", "(count_nodes {4 {2 {2} {3}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {4 {8 {5} {6}} {0}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.11139, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6 {0 {9 {2}} {0}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {0 {1}}) -> 2", "(count_nodes {2 {4}}) -> 2", "(count_nodes {6 {6} {8}}) -> 3", "(count_nodes {1}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.179966, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {3} {1}}) -> 3", "(count_nodes {1 {0 {1 {8} {9}} {7}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {7}) -> 1", "(count_nodes {9}) -> 1", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.068825, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {3 {8}}) -> 2", "(count_nodes {4 {0 {8 {0}} {9 {2} {4}}}}) -> 7", "(count_nodes {}) -> 0", "(count_nodes {5 {3 {6} {0}} {2 {3}}}) -> 6", "(count_nodes {3 {2 {8} {0}}}) -> 4", "(count_nodes {4 {6} {5}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.954471, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {4 {7} {6}}) -> 3", "(count_nodes {4 {5}}) -> 2", "(count_nodes {7 {7 {6} {1}} {3 {6}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {1 {7 {8} {1}} {3}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.013698, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {8 {3} {7}}}) -> 4", "(count_nodes {8}) -> 1", "(count_nodes {6}) -> 1", "(count_nodes {6 {4} {6}}) -> 3", "(count_nodes {0}) -> 1", "(count_nodes {9 {8 {6} {5}} {7 {3 {1}}}}) -> 7", "(count_nodes {7 {1}}) -> 2", "(count_nodes {7 {6 {6 {5}} {4 {4}}}}) -> 6"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.03744, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {9 {4} {1}}) -> 3", "(count_nodes {9 {3}}) -> 2", "(count_nodes {8 {9 {3}} {0 {8} {2}}}) -> 6", "(count_nodes {9}) -> 1", "(count_nodes {1 {7} {8}}) -> 3", "(count_nodes {5}) -> 1", "(count_nodes {4 {8 {7}}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.969355, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {9 {2 {9} {8}} {2 {5}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {9 {4} {9}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.043434, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {1} {6}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {4 {6 {6} {7}}}) -> 4", "(count_nodes {4}) -> 1", "(count_nodes {5 {7} {3}}) -> 3", "(count_nodes {3}) -> 1", "(count_nodes {7 {8 {3} {9}} {8 {0}}}) -> 6", "(count_nodes {1 {8} {5}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.956376, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {9} {6}}) -> 3", "(count_nodes {4}) -> 1", "(count_nodes {0 {4}}) -> 2", "(count_nodes {3}) -> 1", "(count_nodes {8 {0} {0}}) -> 3", "(count_nodes {1 {4}}) -> 2", "(count_nodes {7 {5 {7} {6}}}) -> 4", "(count_nodes {7}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.070246, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {0 {6} {1}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {8 {2 {1 {1}}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.957472, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8 {9}}) -> 2", "(count_nodes {2 {7 {1}} {2 {9}}}) -> 5", "(count_nodes {1 {1 {3} {9}} {3}}) -> 5", "(count_nodes {7}) -> 1", "(count_nodes {8}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {0 {5}}) -> 2", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.074823, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {4 {6}}) -> 2", "(count_nodes {5 {0}}) -> 2", "(count_nodes {9 {1 {2 {9} {1}}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3 {9 {6 {5}} {6 {5}}}}) -> 6"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.029695, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {8}) -> 1", "(count_nodes {7 {6 {9} {5}}}) -> 4", "(count_nodes {2 {1} {9 {5}}}) -> 4", "(count_nodes {2}) -> 1", "(count_nodes {9 {0}}) -> 2", "(count_nodes {0}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.102, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1 {4} {5 {9 {6}}}}) -> 5", "(count_nodes {8 {0}}) -> 2", "(count_nodes {3 {2 {4} {0}}}) -> 4", "(count_nodes {0}) -> 1", "(count_nodes {3 {1 {1 {2}} {4 {1} {7}}}}) -> 7", "(count_nodes {6 {0 {0 {6} {7}}} {6 {0 {4}}}}) -> 8", "(count_nodes {3 {2 {5 {1} {3}} {4 {9}}}}) -> 7"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.218106, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {5 {9 {8}} {1 {4}}}}) -> 6", "(count_nodes {2 {5 {4 {4} {3}}}}) -> 5", "(count_nodes {9 {1 {8}} {8 {5} {2}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {9 {0 {7 {2}}} {2}}) -> 5", "(count_nodes {3 {8}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.140623, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6 {9 {2 {7}}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {2 {3}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {9}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 e)) 1)) 0)) _) _)", "time": 1.25547, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {8 {2 {9}} {8}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {3 {9 {9} {5}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {7 {0}}) -> 2", "(count_nodes {7}) -> 1", "(count_nodes {3}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.065861, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {3 {7}}) -> 2", "(count_nodes {6 {5 {1 {5} {2}} {5 {9}}} {2 {5 {3} {6}}}}) -> 11", "(count_nodes {}) -> 0", "(count_nodes {9 {4 {4 {6}} {5}} {7}}) -> 6", "(count_nodes {0 {1}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.147954, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {9 {9} {4}}) -> 3", "(count_nodes {3}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {4 {1} {7}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 0.675414, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {0 {6 {5} {8}} {1}}) -> 5", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1 {2} {2 {5}}}) -> 4", "(count_nodes {4 {1} {5 {5} {5}}}) -> 5", "(count_nodes {2}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.68311, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {0 {5}}) -> 2", "(count_nodes {1 {7 {2} {3}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {9}) -> 1", "(count_nodes {5}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.76498, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {3 {9} {6}} {2 {0}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {8 {9}}) -> 2", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {7 {4} {6}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {5}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.806758, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) 1) 0)) _) _)", "time": 0.021973, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {7 {9}}) -> 2", "(count_nodes {7 {5 {9 {8}} {8 {2} {6}}}}) -> 7", "(count_nodes {5 {4 {0 {5}} {2 {2}}} {7 {6 {2} {2}} {6}}}) -> 11", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.71104, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {9 {3}} {7 {7}}}) -> 5", "(count_nodes {9 {5 {8} {3 {0} {4}}} {7}}) -> 7", "(count_nodes {2 {7}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {7 {8 {8 {0}}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {0 {8}}) -> 2", "(count_nodes {4 {0 {8} {9}} {7 {0}}}) -> 6"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.785305, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {1 {5}}) -> 2", "(count_nodes {3}) -> 1", "(count_nodes {8 {7 {6 {7} {9}}}}) -> 5", "(count_nodes {3}) -> 1", "(count_nodes {4 {7 {4} {1}}}) -> 4", "(count_nodes {9 {2}}) -> 2", "(count_nodes {8}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.282723, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {9}}) -> 2", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {9 {6} {0}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {5 {7} {0}}) -> 3", "(count_nodes {7 {4 {3} {7}} {1}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.346805, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {9}}) -> 2", "(count_nodes {1 {3}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6 {6 {3 {9} {6}} {6}} {2}}) -> 7", "(count_nodes {2 {1} {2}}) -> 3", "(count_nodes {3}) -> 1", "(count_nodes {6 {4 {7}} {5 {5} {4}}}) -> 6"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.423984, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {2 {9}}) -> 2", "(count_nodes {0 {1 {0} {3}} {9}}) -> 5", "(count_nodes {0}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {8 {8} {0 {5} {2}}}) -> 5", "(count_nodes {1}) -> 1", "(count_nodes {8}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.615111, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9 {8 {6}} {8 {9} {0}}}) -> 6", "(count_nodes {4 {4}}) -> 2", "(count_nodes {5 {7 {5}} {4 {6}}}) -> 5", "(count_nodes {8 {8 {9} {9}} {2 {4}}}) -> 6", "(count_nodes {4}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {7 {0 {0}} {6 {8}}}) -> 5", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.460933, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {4 {3 {6 {3} {3}}}}) -> 5", "(count_nodes {9 {2}}) -> 2", "(count_nodes {8 {5 {6}}}) -> 3", "(count_nodes {1}) -> 1", "(count_nodes {4}) -> 1", "(count_nodes {5}) -> 1", "(count_nodes {2 {8 {3 {0} {2}}}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.598587, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {4 {5}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {8 {6}}) -> 2", "(count_nodes {9}) -> 1", "(count_nodes {2 {2} {6}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 1.327637, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {8}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {4 {0 {3 {8} {7}} {7 {9}}} {9 {7 {7} {0}} {0}}}) -> 12", "(count_nodes {2}) -> 1", "(count_nodes {5 {1 {0} {5}} {1}}) -> 5", "(count_nodes {1 {0 {9 {7} {7}} {8 {3} {5}}}}) -> 8", "(count_nodes {3 {4} {5 {6}}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.31498, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {2 {2} {7 {4 {0} {1}}}}) -> 6", "(count_nodes {3 {6 {0 {3}} {9 {7}}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {4 {9 {7}} {9}}) -> 4", "(count_nodes {9 {1}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.500392, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {7}}) -> 2", "(count_nodes {6 {7}}) -> 2", "(count_nodes {4 {0 {7} {9}} {9}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {6 {6} {6 {8}}}) -> 4", "(count_nodes {7 {9}}) -> 2", "(count_nodes {7 {5}}) -> 2", "(count_nodes {9}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.284531, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {9 {5 {1} {4 {3} {7}}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {0 {2}}) -> 2", "(count_nodes {0 {5} {0}}) -> 3", "(count_nodes {5}) -> 1", "(count_nodes {6 {3}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.686512, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {1 {8} {0}}) -> 3", "(count_nodes {8 {7} {7}}) -> 3", "(count_nodes {4 {8 {2}} {4 {2} {1}}}) -> 6", "(count_nodes {7}) -> 1", "(count_nodes {2}) -> 1", "(count_nodes {6 {9 {1 {9} {6}}} {6 {8 {9}}}}) -> 8", "(count_nodes {2}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.735988, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4 {9 {8 {6} {5}} {0 {3}}}}) -> 7", "(count_nodes {0 {3 {0}}}) -> 3", "(count_nodes {1 {6}}) -> 2", "(count_nodes {3 {0} {3 {0} {8}}}) -> 5", "(count_nodes {0}) -> 1", "(count_nodes {2}) -> 1", "(count_nodes {5 {7} {4}}) -> 3", "(count_nodes {8 {1 {5}} {0 {9}}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.749041, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {0 {0 {3}} {3 {0}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {6 {8}}) -> 2", "(count_nodes {9 {7} {6}}) -> 3", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.049239, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {3 {3} {6}}}) -> 4", "(count_nodes {3 {0 {9}} {6 {7}}}) -> 5", "(count_nodes {0 {6} {5}}) -> 3", "(count_nodes {3 {3}}) -> 2", "(count_nodes {4 {7} {8}}) -> 3", "(count_nodes {7 {4 {2}}}) -> 3", "(count_nodes {2 {9 {2 {1} {1}} {0}}}) -> 6", "(count_nodes {1 {7 {1}} {3}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.158007, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1 {2} {4}}) -> 3", "(count_nodes {4}) -> 1", "(count_nodes {8 {5} {1}}) -> 3", "(count_nodes {9}) -> 1", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 f)) 1)) 0)) _) _)", "time": 0.958852, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {1}}) -> 2", "(count_nodes {4 {3 {9}} {5 {8}}}) -> 5", "(count_nodes {6 {3 {3 {6} {5}}} {8 {6 {2}}}}) -> 8", "(count_nodes {2 {7 {8} {2}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {1 {7}}) -> 2", "(count_nodes {7 {7} {7}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.750586, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1 {9}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {2 {9 {4} {3}} {3 {6} {8}}}) -> 7", "(count_nodes {8 {9 {0}}}) -> 3", "(count_nodes {8}) -> 1", "(count_nodes {5}) -> 1", "(count_nodes {0}) -> 1", "(count_nodes {4 {6 {7}} {9}}) -> 4"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.021536, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3 {7}}) -> 2", "(count_nodes {5 {0 {4 {0}}} {9 {0} {3 {4}}}}) -> 8", "(count_nodes {9 {0 {4}} {9}}) -> 4", "(count_nodes {4 {5} {1}}) -> 3", "(count_nodes {7 {6 {7 {4}} {5 {5}}} {6 {1 {1}} {9}}}) -> 10", "(count_nodes {7 {8} {4}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.913883, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {9}) -> 1", "(count_nodes {0 {8 {8 {6} {2}} {7 {2} {8}}} {4 {0 {0} {2}}}}) -> 12", "(count_nodes {0 {0}}) -> 2", "(count_nodes {3}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {4 {9}}) -> 2", "(count_nodes {7}) -> 1", "(count_nodes {1}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.828496, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {2 {5} {3 {2}}}) -> 4", "(count_nodes {8 {3} {7}}) -> 3", "(count_nodes {7}) -> 1", "(count_nodes {4 {8} {3}}) -> 3", "(count_nodes {2 {3}}) -> 2", "(count_nodes {3}) -> 1", "(count_nodes {5}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.066859, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {1 {5 {5} {3}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {9 {1 {0}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {3 {5 {7}}}) -> 3", "(count_nodes {2 {2 {0 {8} {5}}}}) -> 5"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.588474, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {5 {0} {7}}) -> 3", "(count_nodes {4}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2 {5 {0 {9} {6}} {3 {1} {4}}} {9 {3 {5} {2}}}}) -> 12", "(count_nodes {}) -> 0", "(count_nodes {1}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.615893, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {0 {5}}}) -> 3", "(count_nodes {1 {4 {7}}}) -> 3", "(count_nodes {9 {1 {7} {4}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {6 {7}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {2 {7}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.24445, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0 {6}}) -> 2", "(count_nodes {9}) -> 1", "(count_nodes {7 {0} {2 {9} {3}}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {1 {3}}) -> 2", "(count_nodes {4}) -> 1", "(count_nodes {5 {4 {9}}}) -> 3", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.272693, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {1 {6 {8} {3}}} {8}}) -> 6", "(count_nodes {5}) -> 1", "(count_nodes {8 {1} {5}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {3 {3}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {8}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.317288, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {2 {3}} {7}}) -> 4", "(count_nodes {3}) -> 1", "(count_nodes {5 {1 {8} {7}} {8}}) -> 5", "(count_nodes {8}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {1 {0 {5}} {6}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {0 {7}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.302501, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {6 {3 {8}} {2 {9} {9 {0}}}}) -> 7", "(count_nodes {9 {5 {1}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {7 {8}}) -> 2", "(count_nodes {9 {7 {8 {4}}} {0 {5 {8}}}}) -> 7", "(count_nodes {2 {9} {5}}) -> 3", "(count_nodes {3 {2} {1 {9} {7}}}) -> 5", "(count_nodes {8}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.773377, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {6}) -> 1", "(count_nodes {7 {6 {0} {0}} {7}}) -> 5", "(count_nodes {4 {8}}) -> 2", "(count_nodes {9 {9 {8} {8}} {0}}) -> 5", "(count_nodes {5}) -> 1", "(count_nodes {0 {4}}) -> 2", "(count_nodes {2 {8}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.342797, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {8 {2} {4 {4} {8}}}) -> 5", "(count_nodes {1 {7 {0 {3}}}}) -> 4", "(count_nodes {2}) -> 1", "(count_nodes {5 {8} {7}}) -> 3", "(count_nodes {2}) -> 1", "(count_nodes {5 {4} {0}}) -> 3", "(count_nodes {7 {6}}) -> 2", "(count_nodes {0}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.690758, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {0 {5} {2}}}) -> 4", "(count_nodes {6 {0}}) -> 2", "(count_nodes {5 {9}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {9 {3 {1 {4} {7}} {6 {4}}}}) -> 7", "(count_nodes {5 {8} {3}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {8 {3} {7}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.704652, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {2}}) -> 2", "(count_nodes {2}) -> 1", "(count_nodes {9 {0}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {8 {0} {0}}) -> 3", "(count_nodes {7 {5 {4 {1} {9}}}}) -> 5", "(count_nodes {1 {1 {8}}}) -> 3"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.687837, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {2 {0 {4}}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {5 {7} {8}}) -> 3", "(count_nodes {8}) -> 1", "(count_nodes {8 {4 {0} {0 {7} {5}}} {0}}) -> 7", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.46213, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {2}) -> 1", "(count_nodes {1 {0}}) -> 2", "(count_nodes {4 {0}}) -> 2", "(count_nodes {6 {6} {8 {6 {9} {3}}}}) -> 6", "(count_nodes {0 {4 {9}}}) -> 3", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.381005, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {4 {5 {2} {0}} {6 {3}}}) -> 6", "(count_nodes {8 {3} {7}}) -> 3", "(count_nodes {7 {8 {9 {3}} {6}}}) -> 5", "(count_nodes {5 {0} {2}}) -> 3", "(count_nodes {7 {7 {9} {8}} {9 {4}}}) -> 6", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.333043, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {3 {9}}) -> 2", "(count_nodes {7}) -> 1", "(count_nodes {3 {9}}) -> 2", "(count_nodes {0 {8}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {9 {8}}) -> 2", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 1)) 1)) 0)) _) _)", "time": 0.621608, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {4}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {4 {3 {1} {1 {2} {2}}}}) -> 6", "(count_nodes {}) -> 0", "(count_nodes {0 {1 {2}}}) -> 3", "(count_nodes {0}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.009649, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {6}) -> 1", "(count_nodes {6 {9} {0}}) -> 3", "(count_nodes {5}) -> 1", "(count_nodes {5 {1} {3}}) -> 3", "(count_nodes {1}) -> 1", "(count_nodes {2 {3 {8 {1} {5}}} {1 {3 {0}} {3 {8} {0}}}}) -> 11", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 1.117267, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {6}) -> 1", "(count_nodes {9 {9} {4}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {1 {0 {0 {1}} {9 {5}}} {6 {5 {8}}}}) -> 9", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0", "(count_nodes {7 {2 {7} {5}} {9 {2}}}) -> 6"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.950473, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {2 {9 {8} {0}} {8}}) -> 5", "(count_nodes {}) -> 0", "(count_nodes {8 {4}}) -> 2", "(count_nodes {2}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {9 {6 {7}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {}) -> 0"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.529837, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {0}) -> 1", "(count_nodes {3 {7}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {1 {3}}) -> 2", "(count_nodes {7 {5 {5}}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {5}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ 1 e)) 1)) 0)) _) _)", "time": 0.755865, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {7 {5}}) -> 2", "(count_nodes {7}) -> 1", "(count_nodes {2 {3 {4} {5}}}) -> 4", "(count_nodes {3}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {0 {5}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {8 {1}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.690114, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {5 {3}}) -> 2", "(count_nodes {1 {0 {9 {1}} {5 {7} {6}}} {6}}) -> 8", "(count_nodes {3 {9}}) -> 2", "(count_nodes {}) -> 0", "(count_nodes {7}) -> 1", "(count_nodes {}) -> 0", "(count_nodes {6}) -> 1", "(count_nodes {9}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.745971, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {1}) -> 1", "(count_nodes {6 {0} {3}}) -> 3", "(count_nodes {3}) -> 1", "(count_nodes {6 {4 {9 {2}} {3 {2} {1}}}}) -> 7", "(count_nodes {4 {2 {5 {3}}}}) -> 4", "(count_nodes {}) -> 0", "(count_nodes {5}) -> 1", "(count_nodes {6}) -> 1"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.363783, "name": "count_nodes"}
{"examples": ["(count_nodes {}) -> 0", "(count_nodes {3 {7} {9}}) -> 3", "(count_nodes {2 {9} {7}}) -> 3", "(count_nodes {}) -> 0", "(count_nodes {3}) -> 1", "(count_nodes {9 {1 {0} {2}}}) -> 4", "(count_nodes {2 {7} {9 {8 {5} {2}} {8}}}) -> 7", "(count_nodes {8 {6}}) -> 2", "(count_nodes {9 {6}}) -> 2"], "solution": "(let count_nodes (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (+ f e)) 1)) 0)) _) _)", "time": 0.574483, "name": "count_nodes"}
