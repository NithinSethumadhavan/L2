{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.150766, "examples": ["(concat [6 1 8 6] [5 7 2]) -> [6 1 8 6 5 7 2]", "(concat [4 2] [3 1 9]) -> [4 2 3 1 9]", "(concat [1 4 7 2 8] [6 0 0 8 1 7]) -> [1 4 7 2 8 6 0 0 8 1 7]", "(concat [2] [4]) -> [2 4]", "(concat [5 6 2 9 9 7] []) -> [5 6 2 9 9 7]", "(concat [7 9 8] [3 2 0]) -> [7 9 8 3 2 0]", "(concat [1 5 9 6 8] [4 8 4 5 4 0]) -> [1 5 9 6 8 4 8 4 5 4 0]", "(concat [0 2 5 5] []) -> [0 2 5 5]", "(concat [5] [9 0 2 5 8 2]) -> [5 9 0 2 5 8 2]", "(concat [0 1 6 1 4] [4 0 0 3 0 9]) -> [0 1 6 1 4 4 0 0 3 0 9]", "(concat [1 5 5 7 2 0] [0 3 1 1 9]) -> [1 5 5 7 2 0 0 3 1 1 9]", "(concat [4 9 9 5] [2 3 7 4]) -> [4 9 9 5 2 3 7 4]", "(concat [2 8 5] [8 9 1]) -> [2 8 5 8 9 1]", "(concat [5 5 1 5] [4 8 8 8 8 2]) -> [5 5 1 5 4 8 8 8 8 2]", "(concat [6 5 3 1 2 3] [3 9 9 7 0]) -> [6 5 3 1 2 3 3 9 9 7 0]", "(concat [8 6] [9 3]) -> [8 6 9 3]", "(concat [4 6 0 8 3 6] []) -> [4 6 0 8 3 6]", "(concat [] [5 8]) -> [5 8]", "(concat [3 0 8 7] [1 5 2 0 7 3]) -> [3 0 8 7 1 5 2 0 7 3]", "(concat [5 6] []) -> [5 6]", "(concat [3] []) -> [3]", "(concat [5 9 2 0 3] [9 2 0 1]) -> [5 9 2 0 3 9 2 0 1]", "(concat [] [7 7 0 4]) -> [7 7 0 4]", "(concat [] [1]) -> [1]", "(concat [4 0 9 2 2] [9 4 1 4 4 3]) -> [4 0 9 2 2 9 4 1 4 4 3]", "(concat [8 6 7 3 2 7] []) -> [8 6 7 3 2 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.130839, "examples": ["(concat [8 2] [2 0]) -> [8 2 2 0]", "(concat [3 0 3 1 8 9] [3 9 6 9]) -> [3 0 3 1 8 9 3 9 6 9]", "(concat [9 0 6] [1]) -> [9 0 6 1]", "(concat [8 6 3 3] [0 1 4 5 5]) -> [8 6 3 3 0 1 4 5 5]", "(concat [9 2 8 3 4 6] []) -> [9 2 8 3 4 6]", "(concat [1 8 0 2 0 4] [1 2 0 2 7]) -> [1 8 0 2 0 4 1 2 0 2 7]", "(concat [8 8 5 9 4] [9 8 3 1 5 6]) -> [8 8 5 9 4 9 8 3 1 5 6]", "(concat [6 4 0 8 7] [9 3 3]) -> [6 4 0 8 7 9 3 3]", "(concat [] [2 1 3 4 8 8]) -> [2 1 3 4 8 8]", "(concat [0 8] [7 5 4 2 9 5]) -> [0 8 7 5 4 2 9 5]", "(concat [4 3] []) -> [4 3]", "(concat [8 1 5 3 8 0] [2 1 1 7]) -> [8 1 5 3 8 0 2 1 1 7]", "(concat [5 3 5] [5 6 4 9 9]) -> [5 3 5 5 6 4 9 9]", "(concat [5 2] []) -> [5 2]", "(concat [1] [0 1 9 6]) -> [1 0 1 9 6]", "(concat [] [5 0 5]) -> [5 0 5]", "(concat [0] [4 9 9 0 0]) -> [0 4 9 9 0 0]", "(concat [5 0 4 2 9 5] [5 6 6]) -> [5 0 4 2 9 5 5 6 6]", "(concat [3] [6 0]) -> [3 6 0]", "(concat [3] [2 8 1 3 9 5]) -> [3 2 8 1 3 9 5]", "(concat [4 9 8 5 5 8] []) -> [4 9 8 5 5 8]", "(concat [5] [3 0 7]) -> [5 3 0 7]", "(concat [3 9] [9 2 7]) -> [3 9 9 2 7]", "(concat [4 6 4 3 1 8] [0 2 0]) -> [4 6 4 3 1 8 0 2 0]", "(concat [7] [9 3 9 1]) -> [7 9 3 9 1]", "(concat [5 6 3] [4 0 1 6 6]) -> [5 6 3 4 0 1 6 6]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.202058, "examples": ["(concat [6 9 9 5 6 8] [3 6]) -> [6 9 9 5 6 8 3 6]", "(concat [0 0 3 0 0 5] []) -> [0 0 3 0 0 5]", "(concat [0 1 1] [5 7 3]) -> [0 1 1 5 7 3]", "(concat [7] [7]) -> [7 7]", "(concat [0 7 3] [3 6 4 0]) -> [0 7 3 3 6 4 0]", "(concat [0] [6 5 3 7 6]) -> [0 6 5 3 7 6]", "(concat [4 8 0] [3 1 6 5 8 9]) -> [4 8 0 3 1 6 5 8 9]", "(concat [5 7 5] [2 2]) -> [5 7 5 2 2]", "(concat [] [5 3 9 7 1]) -> [5 3 9 7 1]", "(concat [8 2 3 3] [7]) -> [8 2 3 3 7]", "(concat [] [4 2 5 9]) -> [4 2 5 9]", "(concat [4 9 7 5 6] [5]) -> [4 9 7 5 6 5]", "(concat [1 1 1 6 9] [7 6 5]) -> [1 1 1 6 9 7 6 5]", "(concat [8 9 2 6 9] [5 7 6]) -> [8 9 2 6 9 5 7 6]", "(concat [5 4 9 4 3 0] [9 3 7 5 3 8]) -> [5 4 9 4 3 0 9 3 7 5 3 8]", "(concat [4 1] [0 5 6 6 2]) -> [4 1 0 5 6 6 2]", "(concat [7 0 2 5 3 6] [1 7 5 4 3]) -> [7 0 2 5 3 6 1 7 5 4 3]", "(concat [8 2 3 3 7 4] [1 8 3 9 9 3]) -> [8 2 3 3 7 4 1 8 3 9 9 3]", "(concat [3] [2]) -> [3 2]", "(concat [5 8 8 8 3 4] [3 7 8 7 5]) -> [5 8 8 8 3 4 3 7 8 7 5]", "(concat [2 8 2] [9 0 7]) -> [2 8 2 9 0 7]", "(concat [3 4] [2 7 8 1 3 8]) -> [3 4 2 7 8 1 3 8]", "(concat [0 3 8 1] [7 9 7 2]) -> [0 3 8 1 7 9 7 2]", "(concat [8 5 8 7 9 7] [4 4 2]) -> [8 5 8 7 9 7 4 4 2]", "(concat [] [2 2]) -> [2 2]", "(concat [3 3 7 6] [6 4 3]) -> [3 3 7 6 6 4 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.209614, "examples": ["(concat [7 8 3 6] [1 6 6 7 7]) -> [7 8 3 6 1 6 6 7 7]", "(concat [7 4] [5 7 1 6]) -> [7 4 5 7 1 6]", "(concat [1 4 4 2 7 8] [9 9 1 7]) -> [1 4 4 2 7 8 9 9 1 7]", "(concat [4] [0 3 9 9 0 2]) -> [4 0 3 9 9 0 2]", "(concat [7] [2]) -> [7 2]", "(concat [0] [4 3 2 0]) -> [0 4 3 2 0]", "(concat [] [3 1 5 5 5]) -> [3 1 5 5 5]", "(concat [3 4 7 0 9] [6 0 3]) -> [3 4 7 0 9 6 0 3]", "(concat [] [0 9 3]) -> [0 9 3]", "(concat [9] [3 4 5 3 7 7]) -> [9 3 4 5 3 7 7]", "(concat [9 8 1] [2 6 8]) -> [9 8 1 2 6 8]", "(concat [3 0 5 8 2] [9 7]) -> [3 0 5 8 2 9 7]", "(concat [4 2 3 1 2] [4 9]) -> [4 2 3 1 2 4 9]", "(concat [6] [6 3 5 6 4]) -> [6 6 3 5 6 4]", "(concat [8 8 2 1 0 5] [7 2]) -> [8 8 2 1 0 5 7 2]", "(concat [9 1] [7 5 9 8 6 4]) -> [9 1 7 5 9 8 6 4]", "(concat [] [8 0 2 3]) -> [8 0 2 3]", "(concat [] []) -> []", "(concat [7 8 0 4 0] [7 2 3 2 4]) -> [7 8 0 4 0 7 2 3 2 4]", "(concat [6] [4 1 5 6 0 3]) -> [6 4 1 5 6 0 3]", "(concat [] [7 4 0 4 8 0]) -> [7 4 0 4 8 0]", "(concat [6 1 1 1 9 1] [1 0 3 4]) -> [6 1 1 1 9 1 1 0 3 4]", "(concat [] [6 9 2 0 3]) -> [6 9 2 0 3]", "(concat [3 3 5 2 5 5] [6 1 5 1]) -> [3 3 5 2 5 5 6 1 5 1]", "(concat [8 3] [2 9]) -> [8 3 2 9]", "(concat [0 2 1 9 1] []) -> [0 2 1 9 1]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.144824, "examples": ["(concat [2] [5 1 7 7]) -> [2 5 1 7 7]", "(concat [0] [9 4 5 0 8]) -> [0 9 4 5 0 8]", "(concat [0 2 2 0 3 4] [7 3 7 2 5 6]) -> [0 2 2 0 3 4 7 3 7 2 5 6]", "(concat [] [8 3]) -> [8 3]", "(concat [] [4 8 6]) -> [4 8 6]", "(concat [7 6 3] [1 8 5 1]) -> [7 6 3 1 8 5 1]", "(concat [4 8] [3 0 4 8]) -> [4 8 3 0 4 8]", "(concat [1] [2 3 3]) -> [1 2 3 3]", "(concat [6 0 9 1 3 8] [2 7 3 1 4 6]) -> [6 0 9 1 3 8 2 7 3 1 4 6]", "(concat [6 7] [7 5 6 4 7 5]) -> [6 7 7 5 6 4 7 5]", "(concat [8] [9 5 8 6]) -> [8 9 5 8 6]", "(concat [9 1 6 3 1] [4 8 5 4 9 3]) -> [9 1 6 3 1 4 8 5 4 9 3]", "(concat [8] []) -> [8]", "(concat [2 1 8 4 7] [1 2]) -> [2 1 8 4 7 1 2]", "(concat [4] [7 5]) -> [4 7 5]", "(concat [7 8 9] [0]) -> [7 8 9 0]", "(concat [2 9 4 9 3 2] []) -> [2 9 4 9 3 2]", "(concat [8 5 3 3 1] []) -> [8 5 3 3 1]", "(concat [5] [4 9 9 0 0]) -> [5 4 9 9 0 0]", "(concat [1 7 6 4 6 4] [8 5]) -> [1 7 6 4 6 4 8 5]", "(concat [8 2 6] [5 4 5]) -> [8 2 6 5 4 5]", "(concat [3 5 9 0 4] []) -> [3 5 9 0 4]", "(concat [3 9] [4 3 8]) -> [3 9 4 3 8]", "(concat [2 3 2 3 6 1] [5 4]) -> [2 3 2 3 6 1 5 4]", "(concat [] [0 1 2]) -> [0 1 2]", "(concat [8 0 1 6 7 5] [4 2 2 2]) -> [8 0 1 6 7 5 4 2 2 2]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.1472, "examples": ["(concat [8 3 5] [0 8 8]) -> [8 3 5 0 8 8]", "(concat [8 6 0 0 0] [7 2 7 8]) -> [8 6 0 0 0 7 2 7 8]", "(concat [8 3 3 3] [2 8 4 1 0]) -> [8 3 3 3 2 8 4 1 0]", "(concat [9 8] [2 8 6 1 4]) -> [9 8 2 8 6 1 4]", "(concat [2 4 3 8] [1]) -> [2 4 3 8 1]", "(concat [6 6 7 7 8] [1 6 3 4 9]) -> [6 6 7 7 8 1 6 3 4 9]", "(concat [3 6 3] [6]) -> [3 6 3 6]", "(concat [] [6 6 2 6 5]) -> [6 6 2 6 5]", "(concat [1 1 5 9] [0]) -> [1 1 5 9 0]", "(concat [] [3 4 9 2 8]) -> [3 4 9 2 8]", "(concat [] [4 8]) -> [4 8]", "(concat [5 7 7 1 8 7] [4 7 3 0 8 1]) -> [5 7 7 1 8 7 4 7 3 0 8 1]", "(concat [6 5 9 0] []) -> [6 5 9 0]", "(concat [3] [3 5 4 0 6 4]) -> [3 3 5 4 0 6 4]", "(concat [5 2 2 5 4 5] [1 4 2 7 8 4]) -> [5 2 2 5 4 5 1 4 2 7 8 4]", "(concat [] [2 9 6 3 6 7]) -> [2 9 6 3 6 7]", "(concat [] [3 9 2 4]) -> [3 9 2 4]", "(concat [0 2 6 2 7 4] [4 5 2 9 6 4]) -> [0 2 6 2 7 4 4 5 2 9 6 4]", "(concat [1 8 1 8] [4 3]) -> [1 8 1 8 4 3]", "(concat [1 1 1 0] [3 9 8 8 3]) -> [1 1 1 0 3 9 8 8 3]", "(concat [6] [3 9 6 1 3]) -> [6 3 9 6 1 3]", "(concat [4 3 5 7] [5]) -> [4 3 5 7 5]", "(concat [0 8] []) -> [0 8]", "(concat [] [9 6]) -> [9 6]", "(concat [2 1] []) -> [2 1]", "(concat [4 9 2 8 3 2] []) -> [4 9 2 8 3 2]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.10158, "examples": ["(concat [2 5] [7 1]) -> [2 5 7 1]", "(concat [9 3 5] []) -> [9 3 5]", "(concat [8] [1 3 1 2]) -> [8 1 3 1 2]", "(concat [1 9 4 0] [7 6]) -> [1 9 4 0 7 6]", "(concat [8 8 8 1 7] [5 7 8 9]) -> [8 8 8 1 7 5 7 8 9]", "(concat [] [2 8 3 8]) -> [2 8 3 8]", "(concat [7 9 6 9 5] [7]) -> [7 9 6 9 5 7]", "(concat [5] [6 6]) -> [5 6 6]", "(concat [4 5 8 6 9] []) -> [4 5 8 6 9]", "(concat [1 7 7] [3 1 3]) -> [1 7 7 3 1 3]", "(concat [1 9] [6 5 7 8]) -> [1 9 6 5 7 8]", "(concat [5 5 3 3] [5 0 9]) -> [5 5 3 3 5 0 9]", "(concat [9 2 9 5 5] [0 8 0 7]) -> [9 2 9 5 5 0 8 0 7]", "(concat [] [4 1 4]) -> [4 1 4]", "(concat [7 8 3 3 0] [8 4 2 9 9 4]) -> [7 8 3 3 0 8 4 2 9 9 4]", "(concat [8 3 1 9 9 8] [7 9 5 3 1]) -> [8 3 1 9 9 8 7 9 5 3 1]", "(concat [8 3 2 7] [8 5 1 9 0 0]) -> [8 3 2 7 8 5 1 9 0 0]", "(concat [0 5 8] [9 6 7 0]) -> [0 5 8 9 6 7 0]", "(concat [7 4 9 9 7 8] [6 2]) -> [7 4 9 9 7 8 6 2]", "(concat [9 7] []) -> [9 7]", "(concat [9] [8 4 2]) -> [9 8 4 2]", "(concat [8 9 2 9 7 0] [5 2 6 1 2 0]) -> [8 9 2 9 7 0 5 2 6 1 2 0]", "(concat [] [7]) -> [7]", "(concat [4] [5]) -> [4 5]", "(concat [] [0 8 3]) -> [0 8 3]", "(concat [4] [0 4 7 3 2 0]) -> [4 0 4 7 3 2 0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.169489, "examples": ["(concat [9] [5 8 3 0 8 3]) -> [9 5 8 3 0 8 3]", "(concat [5 7] []) -> [5 7]", "(concat [5 4 2] [3 2 9 6]) -> [5 4 2 3 2 9 6]", "(concat [3 4] [5 8]) -> [3 4 5 8]", "(concat [0 4 2 2] [2 2]) -> [0 4 2 2 2 2]", "(concat [] [7 2 0 5]) -> [7 2 0 5]", "(concat [7 3 0 9] [5 8 1]) -> [7 3 0 9 5 8 1]", "(concat [0 2 9] [4 2 7 4]) -> [0 2 9 4 2 7 4]", "(concat [9 2 4 7] [0 3 8 7]) -> [9 2 4 7 0 3 8 7]", "(concat [] [9 5 3 2 9]) -> [9 5 3 2 9]", "(concat [1 5] [6 7 0 8 4]) -> [1 5 6 7 0 8 4]", "(concat [4 0 5 2 5 7] [8 2 6]) -> [4 0 5 2 5 7 8 2 6]", "(concat [] [1 4 0]) -> [1 4 0]", "(concat [1 8] [5 8]) -> [1 8 5 8]", "(concat [0 9 4 0 6 4] [4]) -> [0 9 4 0 6 4 4]", "(concat [0 2 2] [7 8]) -> [0 2 2 7 8]", "(concat [2 0 1] []) -> [2 0 1]", "(concat [] [9 8 2]) -> [9 8 2]", "(concat [] [9 1 9 1 3 8]) -> [9 1 9 1 3 8]", "(concat [5 4] [6 4]) -> [5 4 6 4]", "(concat [4 1 2 4 0 7] []) -> [4 1 2 4 0 7]", "(concat [5 4 1 5] []) -> [5 4 1 5]", "(concat [3] [1 7 9 4]) -> [3 1 7 9 4]", "(concat [0] [6 1 9 0 0 8]) -> [0 6 1 9 0 0 8]", "(concat [9] []) -> [9]", "(concat [] [9 8 2]) -> [9 8 2]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.206112, "examples": ["(concat [5 0 6 9] [8 8 8 8 6]) -> [5 0 6 9 8 8 8 8 6]", "(concat [7 8 5 7 3] [9]) -> [7 8 5 7 3 9]", "(concat [2 1] []) -> [2 1]", "(concat [] [5 9]) -> [5 9]", "(concat [0 3 2] [0 8 3 0 5 8]) -> [0 3 2 0 8 3 0 5 8]", "(concat [1 1 6 2 6] [7 6 6 7]) -> [1 1 6 2 6 7 6 6 7]", "(concat [5 1] [7 3 2 2 3 8]) -> [5 1 7 3 2 2 3 8]", "(concat [2 4] [5 1 8 0 0 4]) -> [2 4 5 1 8 0 0 4]", "(concat [6] [3]) -> [6 3]", "(concat [9 1 7 2 8 0] [7 9 2 6 0]) -> [9 1 7 2 8 0 7 9 2 6 0]", "(concat [2 0 8 7 4] [4 3 8 0 8 8]) -> [2 0 8 7 4 4 3 8 0 8 8]", "(concat [6 0] [2 0 8]) -> [6 0 2 0 8]", "(concat [] [1 4]) -> [1 4]", "(concat [] [1 1 4 0 2]) -> [1 1 4 0 2]", "(concat [1 2 1] [4 2 2 8 0]) -> [1 2 1 4 2 2 8 0]", "(concat [1 6 2 5 4] [6 6 8 9 9]) -> [1 6 2 5 4 6 6 8 9 9]", "(concat [8 7 2 4 8] [8 3 7 1 9]) -> [8 7 2 4 8 8 3 7 1 9]", "(concat [9 0 4 0 4 8] [3]) -> [9 0 4 0 4 8 3]", "(concat [6] [5 6 8 4]) -> [6 5 6 8 4]", "(concat [7] [7]) -> [7 7]", "(concat [2 0 0 1 6 8] [6 5 8 5]) -> [2 0 0 1 6 8 6 5 8 5]", "(concat [1 1 7 2] [2]) -> [1 1 7 2 2]", "(concat [7 0] []) -> [7 0]", "(concat [1 1 4 3] []) -> [1 1 4 3]", "(concat [4] [5 7]) -> [4 5 7]", "(concat [9 2 3 4 4] [7 3 8 6 1]) -> [9 2 3 4 4 7 3 8 6 1]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.221693, "examples": ["(concat [1 3] [3 7 4 8]) -> [1 3 3 7 4 8]", "(concat [] [5 2]) -> [5 2]", "(concat [] [0 1 4]) -> [0 1 4]", "(concat [2 5 7 4 7 6] [9 3]) -> [2 5 7 4 7 6 9 3]", "(concat [] [7 3 7]) -> [7 3 7]", "(concat [3 2 4] [7 7]) -> [3 2 4 7 7]", "(concat [7 3] [1 6 6 3 4]) -> [7 3 1 6 6 3 4]", "(concat [2 4 1 0] [3 2]) -> [2 4 1 0 3 2]", "(concat [2 4] [8 5]) -> [2 4 8 5]", "(concat [2 0 5 1 3 2] [6 2 2 3 8]) -> [2 0 5 1 3 2 6 2 2 3 8]", "(concat [] [0 2]) -> [0 2]", "(concat [2] [9 9 7 0]) -> [2 9 9 7 0]", "(concat [3 2 0] [8 5 8 0 8]) -> [3 2 0 8 5 8 0 8]", "(concat [8 1 8 0 7] [2 1 9]) -> [8 1 8 0 7 2 1 9]", "(concat [] [1 2 0 4]) -> [1 2 0 4]", "(concat [4 5] [6]) -> [4 5 6]", "(concat [6 0 7 3] [3 3 3 2 5 3]) -> [6 0 7 3 3 3 3 2 5 3]", "(concat [4 9 2 2 3] [5]) -> [4 9 2 2 3 5]", "(concat [] [5]) -> [5]", "(concat [6 9 3 9 6] [8 2 1 2]) -> [6 9 3 9 6 8 2 1 2]", "(concat [9 7] [8 4]) -> [9 7 8 4]", "(concat [1 4 8 1] [8 8 7 3 8]) -> [1 4 8 1 8 8 7 3 8]", "(concat [] [4 4 6 5 3]) -> [4 4 6 5 3]", "(concat [1 9 4] []) -> [1 9 4]", "(concat [4 4 5 4] [6 3 7 0 6 1]) -> [4 4 5 4 6 3 7 0 6 1]", "(concat [0] []) -> [0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.222199, "examples": ["(concat [9 3 3 3 3 4] [3 2 2]) -> [9 3 3 3 3 4 3 2 2]", "(concat [] [3 6 8 6 9]) -> [3 6 8 6 9]", "(concat [] [0]) -> [0]", "(concat [7] [8 6]) -> [7 8 6]", "(concat [3 8 1] [8]) -> [3 8 1 8]", "(concat [8 7 8 9] [9 3 1 5 4]) -> [8 7 8 9 9 3 1 5 4]", "(concat [0 9 1] [0 2]) -> [0 9 1 0 2]", "(concat [2 8 7 0 2 6] [7]) -> [2 8 7 0 2 6 7]", "(concat [0 5 0 6 1 9] [4 0 8 4 2]) -> [0 5 0 6 1 9 4 0 8 4 2]", "(concat [8 7 8 3 8] []) -> [8 7 8 3 8]", "(concat [4 2 1 5] [6 2 0 6]) -> [4 2 1 5 6 2 0 6]", "(concat [5 6 5 1] [9 7 3 8]) -> [5 6 5 1 9 7 3 8]", "(concat [0 4 9] [9 7 1]) -> [0 4 9 9 7 1]", "(concat [3 9 8 8 1 9] [9 2]) -> [3 9 8 8 1 9 9 2]", "(concat [] [8 3 8 5]) -> [8 3 8 5]", "(concat [] [5 8 7 7]) -> [5 8 7 7]", "(concat [3 6 2 3] [2 3 1]) -> [3 6 2 3 2 3 1]", "(concat [0] []) -> [0]", "(concat [4 6 0 9 1] [8 5 0]) -> [4 6 0 9 1 8 5 0]", "(concat [3] [9 6]) -> [3 9 6]", "(concat [] [3 4 9]) -> [3 4 9]", "(concat [3 8] [7]) -> [3 8 7]", "(concat [2 2 6 8 8] []) -> [2 2 6 8 8]", "(concat [1 7 2 3 6 5] [1 3 3 4 5]) -> [1 7 2 3 6 5 1 3 3 4 5]", "(concat [0 6 1 9 7] [2 6 2 1 2]) -> [0 6 1 9 7 2 6 2 1 2]", "(concat [6 3 0 8 5] [2 1 4 3 5 2]) -> [6 3 0 8 5 2 1 4 3 5 2]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.223958, "examples": ["(concat [6 7 6] [3 7 4 0]) -> [6 7 6 3 7 4 0]", "(concat [2 8 1 5 5] [9]) -> [2 8 1 5 5 9]", "(concat [9 8 8] [4]) -> [9 8 8 4]", "(concat [3 1] [8]) -> [3 1 8]", "(concat [0 8 7] [4 2 7 3 1]) -> [0 8 7 4 2 7 3 1]", "(concat [7 9 2 5 3] [7 8 6]) -> [7 9 2 5 3 7 8 6]", "(concat [] [6 1 3 8 7]) -> [6 1 3 8 7]", "(concat [0 1 3 4] [4 6]) -> [0 1 3 4 4 6]", "(concat [2 1 3 6 0] [3 1 2 2 4 9]) -> [2 1 3 6 0 3 1 2 2 4 9]", "(concat [8 2 1 3 6] [0 2 4 2]) -> [8 2 1 3 6 0 2 4 2]", "(concat [5 4 9 8 0 1] [2 0 7 7 5 4]) -> [5 4 9 8 0 1 2 0 7 7 5 4]", "(concat [] [3 4 4 7 3 6]) -> [3 4 4 7 3 6]", "(concat [] [6 7]) -> [6 7]", "(concat [7 5] [2 6 9]) -> [7 5 2 6 9]", "(concat [9 0 9 2] [2 2]) -> [9 0 9 2 2 2]", "(concat [9 6 1] [0 8 4 0 7]) -> [9 6 1 0 8 4 0 7]", "(concat [] [0 5 3 1]) -> [0 5 3 1]", "(concat [6 6 9 8 0 4] [8 3 3 1 0]) -> [6 6 9 8 0 4 8 3 3 1 0]", "(concat [6 5 1 4] [8]) -> [6 5 1 4 8]", "(concat [2] [4 3 6 8]) -> [2 4 3 6 8]", "(concat [5 7 6 8 6] [8 6 5 2 1]) -> [5 7 6 8 6 8 6 5 2 1]", "(concat [1 9] [7 4 1]) -> [1 9 7 4 1]", "(concat [1 9 7 8] [1 9 3]) -> [1 9 7 8 1 9 3]", "(concat [9 9 1 7] [4 9]) -> [9 9 1 7 4 9]", "(concat [9 4 3 5 0 0] [4 7]) -> [9 4 3 5 0 0 4 7]", "(concat [6 9] [6 3 4]) -> [6 9 6 3 4]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.219544, "examples": ["(concat [3] [0 4 0]) -> [3 0 4 0]", "(concat [8 9 4 3] [2 9 8]) -> [8 9 4 3 2 9 8]", "(concat [9 0] [7 1 5 1 6 8]) -> [9 0 7 1 5 1 6 8]", "(concat [9 5 1 4 3 8] [7 7]) -> [9 5 1 4 3 8 7 7]", "(concat [4 5 0 3 7 4] [2 5 9 5]) -> [4 5 0 3 7 4 2 5 9 5]", "(concat [6] [3 5 7 4 6 9]) -> [6 3 5 7 4 6 9]", "(concat [] [1 1 7 5]) -> [1 1 7 5]", "(concat [4 2] [2 9 6 5]) -> [4 2 2 9 6 5]", "(concat [] [1 3 3 0 0 3]) -> [1 3 3 0 0 3]", "(concat [6 2 8 1 8 0] [5]) -> [6 2 8 1 8 0 5]", "(concat [] [2]) -> [2]", "(concat [2 5] [1 4 9 4 3 6]) -> [2 5 1 4 9 4 3 6]", "(concat [] [1 5 1]) -> [1 5 1]", "(concat [5 6] [9 1 5 3 1]) -> [5 6 9 1 5 3 1]", "(concat [7 0 0] []) -> [7 0 0]", "(concat [] [0 3 5 4 6]) -> [0 3 5 4 6]", "(concat [9 4] [4 0 4]) -> [9 4 4 0 4]", "(concat [5 0 0 3 8 8] [5 5 7 0 5]) -> [5 0 0 3 8 8 5 5 7 0 5]", "(concat [0 8 9 3 3] [6]) -> [0 8 9 3 3 6]", "(concat [7 6 7 8 2] [5]) -> [7 6 7 8 2 5]", "(concat [9] [7 1 4 4 4 5]) -> [9 7 1 4 4 4 5]", "(concat [] [4]) -> [4]", "(concat [2 5 2 6 5] [8 6 1 1 5 8]) -> [2 5 2 6 5 8 6 1 1 5 8]", "(concat [6 4 3 9 4] [8]) -> [6 4 3 9 4 8]", "(concat [8 1] [3 7]) -> [8 1 3 7]", "(concat [4 6 6 6 3 0] []) -> [4 6 6 6 3 0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.169552, "examples": ["(concat [5 9 2 5] []) -> [5 9 2 5]", "(concat [2 3 9 3] [2 9 4]) -> [2 3 9 3 2 9 4]", "(concat [2 6 1] [3]) -> [2 6 1 3]", "(concat [3 6 4 0] [8 8 2]) -> [3 6 4 0 8 8 2]", "(concat [8 3 2 5] [3 4 0]) -> [8 3 2 5 3 4 0]", "(concat [1 9] [2 9 7 2 9]) -> [1 9 2 9 7 2 9]", "(concat [2 9 7] []) -> [2 9 7]", "(concat [1] [4 9 7 9 9]) -> [1 4 9 7 9 9]", "(concat [3 6 9 3] [7 4 0]) -> [3 6 9 3 7 4 0]", "(concat [7 5 5 5] [1 7 8 5 3]) -> [7 5 5 5 1 7 8 5 3]", "(concat [1 3] [3 6 0 4 7 0]) -> [1 3 3 6 0 4 7 0]", "(concat [] [3 1 7 4 1 7]) -> [3 1 7 4 1 7]", "(concat [] [4]) -> [4]", "(concat [3 1 5 5] [2 4 4]) -> [3 1 5 5 2 4 4]", "(concat [6 7 4] []) -> [6 7 4]", "(concat [9 7] []) -> [9 7]", "(concat [7 3 9 3] [9 8 2]) -> [7 3 9 3 9 8 2]", "(concat [0 9 2 3 1 1] [7 1 3 0 4 3]) -> [0 9 2 3 1 1 7 1 3 0 4 3]", "(concat [1 7 2 5 6 3] [6 7 5 5 9]) -> [1 7 2 5 6 3 6 7 5 5 9]", "(concat [8 8 2 1] [8 9 0 1 4 8]) -> [8 8 2 1 8 9 0 1 4 8]", "(concat [5 7] [6]) -> [5 7 6]", "(concat [6 1] []) -> [6 1]", "(concat [5 7 6 3] [2 4 2 1 0 9]) -> [5 7 6 3 2 4 2 1 0 9]", "(concat [9 5 8 4 1 3] [4 3]) -> [9 5 8 4 1 3 4 3]", "(concat [] [6 7 9 8]) -> [6 7 9 8]", "(concat [7 3 6 6 7 3] [6 4]) -> [7 3 6 6 7 3 6 4]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.233171, "examples": ["(concat [6] [8 7]) -> [6 8 7]", "(concat [3 4 4] []) -> [3 4 4]", "(concat [3 5 9 5 2] []) -> [3 5 9 5 2]", "(concat [5 5 1 0] []) -> [5 5 1 0]", "(concat [6 7 4 8 4] [6 6 8 2 4 9]) -> [6 7 4 8 4 6 6 8 2 4 9]", "(concat [7 5 2] [2 1 9 1 7 1]) -> [7 5 2 2 1 9 1 7 1]", "(concat [5 0 5 6 5] [2 8]) -> [5 0 5 6 5 2 8]", "(concat [8 6 0 5] [8 7 9 0 8 4]) -> [8 6 0 5 8 7 9 0 8 4]", "(concat [5 5 9 8 1] []) -> [5 5 9 8 1]", "(concat [7 4 0 8] []) -> [7 4 0 8]", "(concat [] [3 0 8 4]) -> [3 0 8 4]", "(concat [4] [7 5 0]) -> [4 7 5 0]", "(concat [2] [0 6]) -> [2 0 6]", "(concat [9 4 3 3 2 5] [7 9 5 1 0 5]) -> [9 4 3 3 2 5 7 9 5 1 0 5]", "(concat [5 7] []) -> [5 7]", "(concat [7] [9 4 4]) -> [7 9 4 4]", "(concat [] [2 9]) -> [2 9]", "(concat [9] []) -> [9]", "(concat [4] [6 2 4 6]) -> [4 6 2 4 6]", "(concat [] [1 3 9 9]) -> [1 3 9 9]", "(concat [4 0 1 2 7] [0]) -> [4 0 1 2 7 0]", "(concat [8 8] [1 1 8 2 9 0]) -> [8 8 1 1 8 2 9 0]", "(concat [5 4 5 7 3] [8 6 2 6 9 7]) -> [5 4 5 7 3 8 6 2 6 9 7]", "(concat [1 6 3] []) -> [1 6 3]", "(concat [] []) -> []", "(concat [1] [0 6 0 8]) -> [1 0 6 0 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.172006, "examples": ["(concat [0 7] [5]) -> [0 7 5]", "(concat [8 8 7 7] [6 9 3 1]) -> [8 8 7 7 6 9 3 1]", "(concat [1 4] [8 7 7 5 0]) -> [1 4 8 7 7 5 0]", "(concat [7 8 9] [5 9 7 4 8 7]) -> [7 8 9 5 9 7 4 8 7]", "(concat [] [0 3]) -> [0 3]", "(concat [4 8 1 5 7 3] [2 4 9]) -> [4 8 1 5 7 3 2 4 9]", "(concat [] [2 4 3 7]) -> [2 4 3 7]", "(concat [9 4 8 5 8 7] [5 7]) -> [9 4 8 5 8 7 5 7]", "(concat [4 9] [8]) -> [4 9 8]", "(concat [0 9 4 1] [1 5]) -> [0 9 4 1 1 5]", "(concat [8 8 7 6 2] [7 2 3]) -> [8 8 7 6 2 7 2 3]", "(concat [8 9 1 4 4] [8 1 7 6]) -> [8 9 1 4 4 8 1 7 6]", "(concat [6 7 2 8 7 8] []) -> [6 7 2 8 7 8]", "(concat [4 5 1 7 0 7] [2 2 3 4]) -> [4 5 1 7 0 7 2 2 3 4]", "(concat [0] []) -> [0]", "(concat [] [6 7 9 1 3 8]) -> [6 7 9 1 3 8]", "(concat [1 7] [9 8 6 4 7 3]) -> [1 7 9 8 6 4 7 3]", "(concat [9 8 1] [8 7]) -> [9 8 1 8 7]", "(concat [9 9 6 2 4] [8 8 8 4]) -> [9 9 6 2 4 8 8 8 4]", "(concat [9] [5 1 5 2]) -> [9 5 1 5 2]", "(concat [9 3] [2 9 0 0 2]) -> [9 3 2 9 0 0 2]", "(concat [] [5 9 0 8 0 6]) -> [5 9 0 8 0 6]", "(concat [8 0] [5]) -> [8 0 5]", "(concat [3 6 4 1 1] [8 8 8 8]) -> [3 6 4 1 1 8 8 8 8]", "(concat [] [2 4 2 2 0 5]) -> [2 4 2 2 0 5]", "(concat [0 6 3 1] [5 1 6 8 5 2]) -> [0 6 3 1 5 1 6 8 5 2]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.233186, "examples": ["(concat [] []) -> []", "(concat [0 0] [6 4 7 4 9]) -> [0 0 6 4 7 4 9]", "(concat [3 0 3 6 8 5] [6]) -> [3 0 3 6 8 5 6]", "(concat [3 8 4 0] [9 6 1]) -> [3 8 4 0 9 6 1]", "(concat [9 6 7 7] []) -> [9 6 7 7]", "(concat [3 0 5 8 8 0] []) -> [3 0 5 8 8 0]", "(concat [7] [7 8 1 7 4 9]) -> [7 7 8 1 7 4 9]", "(concat [4 0 0 3] [3]) -> [4 0 0 3 3]", "(concat [9 2 9 4] [2 7 6 4 4]) -> [9 2 9 4 2 7 6 4 4]", "(concat [] [9 6 8 8 6 6]) -> [9 6 8 8 6 6]", "(concat [] []) -> []", "(concat [3 8 5] []) -> [3 8 5]", "(concat [] [1 8 0 2 5 9]) -> [1 8 0 2 5 9]", "(concat [] [1 9 2]) -> [1 9 2]", "(concat [9 9 6 8 2] [5 8 7]) -> [9 9 6 8 2 5 8 7]", "(concat [1 8 4 6 0] [9 6 0 3 6]) -> [1 8 4 6 0 9 6 0 3 6]", "(concat [4] [1]) -> [4 1]", "(concat [5 8] [4 1 6]) -> [5 8 4 1 6]", "(concat [5 9 2 1] []) -> [5 9 2 1]", "(concat [9 6 9 3 4] [4 5 6 1]) -> [9 6 9 3 4 4 5 6 1]", "(concat [9] [4 2 5 7]) -> [9 4 2 5 7]", "(concat [8] [3 3 7 9 5]) -> [8 3 3 7 9 5]", "(concat [9 3 4 4 0] [5 9 1 9]) -> [9 3 4 4 0 5 9 1 9]", "(concat [8 3 8 3 3] []) -> [8 3 8 3 3]", "(concat [6] [2 1]) -> [6 2 1]", "(concat [5 0 4] [1 5 5]) -> [5 0 4 1 5 5]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.177801, "examples": ["(concat [4] [7 9]) -> [4 7 9]", "(concat [9 1 2] [3]) -> [9 1 2 3]", "(concat [5 0 3 7 9 6] []) -> [5 0 3 7 9 6]", "(concat [5 7 8 6 9 2] [1 6 1 5]) -> [5 7 8 6 9 2 1 6 1 5]", "(concat [3 0 6 2] [9 2]) -> [3 0 6 2 9 2]", "(concat [] []) -> []", "(concat [5] [4 4 0]) -> [5 4 4 0]", "(concat [9] []) -> [9]", "(concat [4 2 5 5 7] [3]) -> [4 2 5 5 7 3]", "(concat [7 9 9 0 6] [9 5 3 5 6 9]) -> [7 9 9 0 6 9 5 3 5 6 9]", "(concat [4] [1 5 9 5]) -> [4 1 5 9 5]", "(concat [9 8] [7 5]) -> [9 8 7 5]", "(concat [2 0 3] [4 9 7 6 0]) -> [2 0 3 4 9 7 6 0]", "(concat [] [0]) -> [0]", "(concat [] [4 5 6 0 7]) -> [4 5 6 0 7]", "(concat [] [9]) -> [9]", "(concat [4 3] []) -> [4 3]", "(concat [0 4 7 0] [6 3 2 6]) -> [0 4 7 0 6 3 2 6]", "(concat [2] [3 2 1]) -> [2 3 2 1]", "(concat [2 5 1 2 8] [4 9 3]) -> [2 5 1 2 8 4 9 3]", "(concat [7 1 7] [0]) -> [7 1 7 0]", "(concat [0] [2 9 9 9 5 5]) -> [0 2 9 9 9 5 5]", "(concat [1] [2 2 7 2 4]) -> [1 2 2 7 2 4]", "(concat [0 7 5 2] [2 4 4 1 3]) -> [0 7 5 2 2 4 4 1 3]", "(concat [8 2 4 9] [5 6 5]) -> [8 2 4 9 5 6 5]", "(concat [] []) -> []"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.214633, "examples": ["(concat [2 4] [0 3 7 6 5]) -> [2 4 0 3 7 6 5]", "(concat [] [0 8 0]) -> [0 8 0]", "(concat [0] [0 2 1 7 6 7]) -> [0 0 2 1 7 6 7]", "(concat [5 5 6 5 3] [8 4 0]) -> [5 5 6 5 3 8 4 0]", "(concat [1 6 1 5 8 3] [5 9]) -> [1 6 1 5 8 3 5 9]", "(concat [] [8 5 5 1 2]) -> [8 5 5 1 2]", "(concat [3] [0]) -> [3 0]", "(concat [8] []) -> [8]", "(concat [1 6 7] [5 5 1 7]) -> [1 6 7 5 5 1 7]", "(concat [8 3] [9 1 8 4]) -> [8 3 9 1 8 4]", "(concat [] [3 1]) -> [3 1]", "(concat [8 0] [9 2 8 0 4 8]) -> [8 0 9 2 8 0 4 8]", "(concat [2] [9 7 2 9]) -> [2 9 7 2 9]", "(concat [3 2 0 4] [3 3 4 0 3]) -> [3 2 0 4 3 3 4 0 3]", "(concat [2 0 3 5 9 9] [3 0 6 9]) -> [2 0 3 5 9 9 3 0 6 9]", "(concat [3 0 9 7 2 1] [2 4 7 7 5 9]) -> [3 0 9 7 2 1 2 4 7 7 5 9]", "(concat [2 8 6 7 8 4] [5]) -> [2 8 6 7 8 4 5]", "(concat [2 2 9] []) -> [2 2 9]", "(concat [7 1 0 6 3 5] [5]) -> [7 1 0 6 3 5 5]", "(concat [3 5] [2 7]) -> [3 5 2 7]", "(concat [1 8 6] [5]) -> [1 8 6 5]", "(concat [7 7 1 3] [2 3]) -> [7 7 1 3 2 3]", "(concat [6 2 6] []) -> [6 2 6]", "(concat [] [7 4 5 7 9]) -> [7 4 5 7 9]", "(concat [4 6 6 3] [4 9]) -> [4 6 6 3 4 9]", "(concat [3 4 7 0 0] [4 5 1 8]) -> [3 4 7 0 0 4 5 1 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.20748, "examples": ["(concat [] [4 5 5 8]) -> [4 5 5 8]", "(concat [8] [1 2]) -> [8 1 2]", "(concat [1 5 9] [8]) -> [1 5 9 8]", "(concat [8 2 3 7] [8 1 7 4 1]) -> [8 2 3 7 8 1 7 4 1]", "(concat [9 1 9 2 2] [8 3]) -> [9 1 9 2 2 8 3]", "(concat [1 4 1 4 6 5] [4 4 1 9 8 7]) -> [1 4 1 4 6 5 4 4 1 9 8 7]", "(concat [] [8 7 2 9 3 4]) -> [8 7 2 9 3 4]", "(concat [8 8 3 0 3 3] [6 3 9 8 1 1]) -> [8 8 3 0 3 3 6 3 9 8 1 1]", "(concat [0 7] []) -> [0 7]", "(concat [9 5] [0 5 2 5]) -> [9 5 0 5 2 5]", "(concat [1 5 9 7 7] []) -> [1 5 9 7 7]", "(concat [0 7 4] [6 6 6 3 8]) -> [0 7 4 6 6 6 3 8]", "(concat [] []) -> []", "(concat [0 7] [5 6]) -> [0 7 5 6]", "(concat [9] [5 7 1 7 5]) -> [9 5 7 1 7 5]", "(concat [3 1 8 8 3] [1 8 4]) -> [3 1 8 8 3 1 8 4]", "(concat [4] []) -> [4]", "(concat [4 0 1 0] [4 2 2 7 5 0]) -> [4 0 1 0 4 2 2 7 5 0]", "(concat [7 3 0 7 9 5] [2 7 7 2 3]) -> [7 3 0 7 9 5 2 7 7 2 3]", "(concat [4 2 1 6] [1 2]) -> [4 2 1 6 1 2]", "(concat [1 9] [9 2 2 2 0 1]) -> [1 9 9 2 2 2 0 1]", "(concat [9 8] [8 4]) -> [9 8 8 4]", "(concat [3 7 7 8] []) -> [3 7 7 8]", "(concat [8 4 6 1 4] [3 1 7 1 4 7]) -> [8 4 6 1 4 3 1 7 1 4 7]", "(concat [7 0] [8]) -> [7 0 8]", "(concat [6 5 7] []) -> [6 5 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.261132, "examples": ["(concat [0 8 9 4 8 8] [1]) -> [0 8 9 4 8 8 1]", "(concat [8 4] [4 5 2]) -> [8 4 4 5 2]", "(concat [3 3 7 0 5 4] [2 7 1]) -> [3 3 7 0 5 4 2 7 1]", "(concat [9 6] [5 2 8 8 1]) -> [9 6 5 2 8 8 1]", "(concat [2 6 0 3 9] []) -> [2 6 0 3 9]", "(concat [] [4 4 4]) -> [4 4 4]", "(concat [7 3 9 8 9 2] [1 5 4]) -> [7 3 9 8 9 2 1 5 4]", "(concat [8 7 0 7 4] [7]) -> [8 7 0 7 4 7]", "(concat [7 5 9 0 7 9] [2]) -> [7 5 9 0 7 9 2]", "(concat [5 1 7 5 1 2] [3 9 2 6 5]) -> [5 1 7 5 1 2 3 9 2 6 5]", "(concat [] [1 8 3]) -> [1 8 3]", "(concat [7 2 6 8 2 2] [1 8 1 2 3]) -> [7 2 6 8 2 2 1 8 1 2 3]", "(concat [] [0]) -> [0]", "(concat [5 1 2 8] [9 0 7 6]) -> [5 1 2 8 9 0 7 6]", "(concat [] [1 0 9 0 1]) -> [1 0 9 0 1]", "(concat [] [0 6]) -> [0 6]", "(concat [6 3 3 2] [0 7 8]) -> [6 3 3 2 0 7 8]", "(concat [] [2 7]) -> [2 7]", "(concat [3 6 2 3 4 4] [7]) -> [3 6 2 3 4 4 7]", "(concat [8] [9 0 0 7 5]) -> [8 9 0 0 7 5]", "(concat [2 0 7 6 5] [2 6 5 2]) -> [2 0 7 6 5 2 6 5 2]", "(concat [0 9 6 6 0 8] [1]) -> [0 9 6 6 0 8 1]", "(concat [5] [2 9 6 1 2]) -> [5 2 9 6 1 2]", "(concat [5 4 9] [6 8 9]) -> [5 4 9 6 8 9]", "(concat [7 5 9 1 9 4] [1 8 2]) -> [7 5 9 1 9 4 1 8 2]", "(concat [2] [1 8]) -> [2 1 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.231724, "examples": ["(concat [] [4 0 3 7 7]) -> [4 0 3 7 7]", "(concat [5 9 8] [5 2 2 6 4]) -> [5 9 8 5 2 2 6 4]", "(concat [2 8] [6 1 5 7 2 8]) -> [2 8 6 1 5 7 2 8]", "(concat [] [5 3 2]) -> [5 3 2]", "(concat [0 1 5] [6 9 3]) -> [0 1 5 6 9 3]", "(concat [5 7 5] [6 9 0]) -> [5 7 5 6 9 0]", "(concat [2 8 9 0 5 5] [8 6 1 1]) -> [2 8 9 0 5 5 8 6 1 1]", "(concat [4 7 0 4 2] []) -> [4 7 0 4 2]", "(concat [8 2 7] [8 0 0 3 7]) -> [8 2 7 8 0 0 3 7]", "(concat [7] [5 5]) -> [7 5 5]", "(concat [6 0] [5 5 0 0 8]) -> [6 0 5 5 0 0 8]", "(concat [4 0 6 7] [8 5 9]) -> [4 0 6 7 8 5 9]", "(concat [7 8 5 7 2 5] [5 2 1 2]) -> [7 8 5 7 2 5 5 2 1 2]", "(concat [] [6 4 9 1 6]) -> [6 4 9 1 6]", "(concat [0 7 9 5 4 4] [9 8 8 6 9]) -> [0 7 9 5 4 4 9 8 8 6 9]", "(concat [6] [8]) -> [6 8]", "(concat [5 8] [2 1 2 5]) -> [5 8 2 1 2 5]", "(concat [5 5 3 5] []) -> [5 5 3 5]", "(concat [5 9 0 2 4 8] []) -> [5 9 0 2 4 8]", "(concat [9 4 3 7 1 1] [5 3 2 6 5]) -> [9 4 3 7 1 1 5 3 2 6 5]", "(concat [5 6 6 6 0 2] [7 8 9 5]) -> [5 6 6 6 0 2 7 8 9 5]", "(concat [] [1 9 7 0 6]) -> [1 9 7 0 6]", "(concat [6] [6]) -> [6 6]", "(concat [6 6 0 0 8 5] [5 0]) -> [6 6 0 0 8 5 5 0]", "(concat [0 8 8 4] [4 6 1 3 7]) -> [0 8 8 4 4 6 1 3 7]", "(concat [9 4 5 5 4] [1]) -> [9 4 5 5 4 1]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.238955, "examples": ["(concat [] [9 1 2 0 4 0]) -> [9 1 2 0 4 0]", "(concat [3 4 5 6] [0]) -> [3 4 5 6 0]", "(concat [7 4 5 3] [4 2 2 6 9]) -> [7 4 5 3 4 2 2 6 9]", "(concat [5] [1 2 1 8 1 4]) -> [5 1 2 1 8 1 4]", "(concat [2 5] [3 3]) -> [2 5 3 3]", "(concat [8 0 4] []) -> [8 0 4]", "(concat [] [6 5 3 6 9]) -> [6 5 3 6 9]", "(concat [9 6] [5 0 1 2]) -> [9 6 5 0 1 2]", "(concat [0 7 0] [6 2 2 8 9]) -> [0 7 0 6 2 2 8 9]", "(concat [] [3 7 3 9]) -> [3 7 3 9]", "(concat [0 2 8 0 7 1] [0 5 3]) -> [0 2 8 0 7 1 0 5 3]", "(concat [5 7 8] [5 3]) -> [5 7 8 5 3]", "(concat [] [9 9 5 5]) -> [9 9 5 5]", "(concat [2 5 1 2] [5 9]) -> [2 5 1 2 5 9]", "(concat [4 8] [9 7 1]) -> [4 8 9 7 1]", "(concat [9 3 6] [7 4 4 9]) -> [9 3 6 7 4 4 9]", "(concat [6] [2 2 3 8 8 8]) -> [6 2 2 3 8 8 8]", "(concat [] [1 9 7 6 3 1]) -> [1 9 7 6 3 1]", "(concat [4] [0 1 9 4]) -> [4 0 1 9 4]", "(concat [8 4 8 8 7] [1]) -> [8 4 8 8 7 1]", "(concat [4 0 9 7 7] [2 3 8 4]) -> [4 0 9 7 7 2 3 8 4]", "(concat [6 1 2 6] []) -> [6 1 2 6]", "(concat [0 4 7 4] [1 0 0]) -> [0 4 7 4 1 0 0]", "(concat [] [5]) -> [5]", "(concat [] [9 1 0]) -> [9 1 0]", "(concat [1 0 9 6] [6 0 3]) -> [1 0 9 6 6 0 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.227219, "examples": ["(concat [3] [5 2]) -> [3 5 2]", "(concat [] [0 9 9 5 3 0]) -> [0 9 9 5 3 0]", "(concat [1 5 9 5] [5 4]) -> [1 5 9 5 5 4]", "(concat [0 6] [3 2 5 3 0 1]) -> [0 6 3 2 5 3 0 1]", "(concat [2 2 2 3 4 3] [9 0 6 7]) -> [2 2 2 3 4 3 9 0 6 7]", "(concat [] [0 3 2 5 0]) -> [0 3 2 5 0]", "(concat [] [6]) -> [6]", "(concat [7 8 3 3 1 4] [2 2]) -> [7 8 3 3 1 4 2 2]", "(concat [7 2 2 6 9] [3 1]) -> [7 2 2 6 9 3 1]", "(concat [2 3 9 7 6 8] [3 4 6 2 1 9]) -> [2 3 9 7 6 8 3 4 6 2 1 9]", "(concat [2 8 4] [1 8 8 7 7 6]) -> [2 8 4 1 8 8 7 7 6]", "(concat [0] [8 5 9]) -> [0 8 5 9]", "(concat [0 4 1 3] [6 2 4 6]) -> [0 4 1 3 6 2 4 6]", "(concat [4 5] []) -> [4 5]", "(concat [9 3 5 1] [0 8 3 3]) -> [9 3 5 1 0 8 3 3]", "(concat [9 2] [9]) -> [9 2 9]", "(concat [0 5 8 8 1] [8 2 6]) -> [0 5 8 8 1 8 2 6]", "(concat [1 1 5 9 7] [1 8 9 0 7 8]) -> [1 1 5 9 7 1 8 9 0 7 8]", "(concat [3 2] [4 2]) -> [3 2 4 2]", "(concat [5 5 1] [4]) -> [5 5 1 4]", "(concat [0 6 6] [7 9]) -> [0 6 6 7 9]", "(concat [6] [5 8 4 5 4 6]) -> [6 5 8 4 5 4 6]", "(concat [9 6 2 9] [4 3]) -> [9 6 2 9 4 3]", "(concat [4 1 5 7 4] [1 6 1 8 0]) -> [4 1 5 7 4 1 6 1 8 0]", "(concat [2 9 3 3 0] [3 4]) -> [2 9 3 3 0 3 4]", "(concat [5 1 4 5 4] [5 9]) -> [5 1 4 5 4 5 9]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.241233, "examples": ["(concat [] [8 0 3 8 9 9]) -> [8 0 3 8 9 9]", "(concat [6 1 9 0 0] [9 5 5 7]) -> [6 1 9 0 0 9 5 5 7]", "(concat [] [6 5 9]) -> [6 5 9]", "(concat [2 8 3 2] [6 3 9 1 1]) -> [2 8 3 2 6 3 9 1 1]", "(concat [9 4] [2 0]) -> [9 4 2 0]", "(concat [5] [0 7 7 9]) -> [5 0 7 7 9]", "(concat [1] [2 5 7 0 8]) -> [1 2 5 7 0 8]", "(concat [] [8 2]) -> [8 2]", "(concat [5 8 1 0 0] [5 7 5 2 3]) -> [5 8 1 0 0 5 7 5 2 3]", "(concat [6 8 4] []) -> [6 8 4]", "(concat [9 8 6 3 2 7] [2 5 3]) -> [9 8 6 3 2 7 2 5 3]", "(concat [9 9 1] [4 8 7]) -> [9 9 1 4 8 7]", "(concat [7 4 0 7] [5 1]) -> [7 4 0 7 5 1]", "(concat [9 6 4 7 0] [8]) -> [9 6 4 7 0 8]", "(concat [2 0 5] [6 5 3 4 4 0]) -> [2 0 5 6 5 3 4 4 0]", "(concat [] []) -> []", "(concat [3 6 4] [1 9]) -> [3 6 4 1 9]", "(concat [9 6 3] [7 1 3 0 4]) -> [9 6 3 7 1 3 0 4]", "(concat [9] [8 4]) -> [9 8 4]", "(concat [9 2] [0 5]) -> [9 2 0 5]", "(concat [1 3 8 7 1 8] [1 7 8]) -> [1 3 8 7 1 8 1 7 8]", "(concat [7 4 4 5 5] [9 0]) -> [7 4 4 5 5 9 0]", "(concat [3 4 5 5 1 5] [6 3 1 2]) -> [3 4 5 5 1 5 6 3 1 2]", "(concat [9 7 7 6] [9 3 8 4 3]) -> [9 7 7 6 9 3 8 4 3]", "(concat [2 5 8 6 0] [2]) -> [2 5 8 6 0 2]", "(concat [2] [8]) -> [2 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.230254, "examples": ["(concat [5 0 4 6 5] [7]) -> [5 0 4 6 5 7]", "(concat [6 5 4 8 6 0] [6 1]) -> [6 5 4 8 6 0 6 1]", "(concat [] [7]) -> [7]", "(concat [] []) -> []", "(concat [] [5 2 2 6 1 5]) -> [5 2 2 6 1 5]", "(concat [7 2 7] [6 7 7]) -> [7 2 7 6 7 7]", "(concat [6 8 5 3 6] [8 7 0 8 6]) -> [6 8 5 3 6 8 7 0 8 6]", "(concat [8 1] []) -> [8 1]", "(concat [3 1 6 6] [6 2 4]) -> [3 1 6 6 6 2 4]", "(concat [2] [7 2 2]) -> [2 7 2 2]", "(concat [3 8 0] [8]) -> [3 8 0 8]", "(concat [4 1 6 6 7 7] [5 6 8]) -> [4 1 6 6 7 7 5 6 8]", "(concat [4 7 0 0 4] [7 0 4 2 7]) -> [4 7 0 0 4 7 0 4 2 7]", "(concat [6 0 6] [0]) -> [6 0 6 0]", "(concat [2 9 9 9 5 9] [3]) -> [2 9 9 9 5 9 3]", "(concat [9] [9 4]) -> [9 9 4]", "(concat [5 7 0 6 3 2] [3 7 1]) -> [5 7 0 6 3 2 3 7 1]", "(concat [0 1 6] [5 4 7 5]) -> [0 1 6 5 4 7 5]", "(concat [4 6] [2 7 7 9]) -> [4 6 2 7 7 9]", "(concat [] [5 9 7 7 2]) -> [5 9 7 7 2]", "(concat [5 8 9 1 8] []) -> [5 8 9 1 8]", "(concat [1 5 9 2] [8]) -> [1 5 9 2 8]", "(concat [2 3 9 4 5] []) -> [2 3 9 4 5]", "(concat [7 5 6 2 9] [9 7]) -> [7 5 6 2 9 9 7]", "(concat [] [1 5 4]) -> [1 5 4]", "(concat [7 4] [4 2]) -> [7 4 4 2]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.231479, "examples": ["(concat [] []) -> []", "(concat [9 7 4] [5 7 1 1 4 9]) -> [9 7 4 5 7 1 1 4 9]", "(concat [8] [8 2]) -> [8 8 2]", "(concat [6 8 3 8 1] [6 9 2 7]) -> [6 8 3 8 1 6 9 2 7]", "(concat [9] [4 4 8 9]) -> [9 4 4 8 9]", "(concat [4 6] [5 0 3 4 1]) -> [4 6 5 0 3 4 1]", "(concat [0 9 1] [1]) -> [0 9 1 1]", "(concat [3] [7 8 1]) -> [3 7 8 1]", "(concat [7 9 1 3 5 4] [0 3 6]) -> [7 9 1 3 5 4 0 3 6]", "(concat [] [5 9]) -> [5 9]", "(concat [4 0 1 6] [1 9 1]) -> [4 0 1 6 1 9 1]", "(concat [7 4 1] [7 5]) -> [7 4 1 7 5]", "(concat [1 3 5 6 0] [5]) -> [1 3 5 6 0 5]", "(concat [3 2 7 9] [0 0 3]) -> [3 2 7 9 0 0 3]", "(concat [8] [1 7 0 1 9]) -> [8 1 7 0 1 9]", "(concat [4 3 6 0] [3]) -> [4 3 6 0 3]", "(concat [1 9 1 3] [1]) -> [1 9 1 3 1]", "(concat [7 8 1 5 9 6] [1 1 9 3]) -> [7 8 1 5 9 6 1 1 9 3]", "(concat [0 6 5 8 0] [3 1 3 1 2 2]) -> [0 6 5 8 0 3 1 3 1 2 2]", "(concat [] [0 2 1]) -> [0 2 1]", "(concat [3 2 8] [4 0 4 3 7]) -> [3 2 8 4 0 4 3 7]", "(concat [] [7 9 6 4 1 1]) -> [7 9 6 4 1 1]", "(concat [] []) -> []", "(concat [3 3 7] []) -> [3 3 7]", "(concat [8 9 2 0 5 8] [9 3 6 4]) -> [8 9 2 0 5 8 9 3 6 4]", "(concat [3 5] [0 8 4]) -> [3 5 0 8 4]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.206294, "examples": ["(concat [0] [5 6]) -> [0 5 6]", "(concat [2 7] [7 7 7]) -> [2 7 7 7 7]", "(concat [4 4 9 7 4] [5 8 3 4 2]) -> [4 4 9 7 4 5 8 3 4 2]", "(concat [] [5 5 4 3 2]) -> [5 5 4 3 2]", "(concat [0] [5 1 9]) -> [0 5 1 9]", "(concat [9 8 5] [4 2 9 7]) -> [9 8 5 4 2 9 7]", "(concat [4 6 4] [5 2]) -> [4 6 4 5 2]", "(concat [8 2] [6 1 2 5]) -> [8 2 6 1 2 5]", "(concat [5 3] [2 8 8 3]) -> [5 3 2 8 8 3]", "(concat [0 1 7 0 6 5] [6 2 0 5 1 1]) -> [0 1 7 0 6 5 6 2 0 5 1 1]", "(concat [0] [8 0 1 9]) -> [0 8 0 1 9]", "(concat [9 1 0] [6 7 0]) -> [9 1 0 6 7 0]", "(concat [9] [6 7 7]) -> [9 6 7 7]", "(concat [8 1] []) -> [8 1]", "(concat [4 5 8 3 7 1] [0]) -> [4 5 8 3 7 1 0]", "(concat [6] [0 3 4 5]) -> [6 0 3 4 5]", "(concat [0 4 1 6] [9 4 1]) -> [0 4 1 6 9 4 1]", "(concat [] [2 7]) -> [2 7]", "(concat [] [7 0 2]) -> [7 0 2]", "(concat [4 6 2 8 0] [8 5 8 5 7]) -> [4 6 2 8 0 8 5 8 5 7]", "(concat [4 5] []) -> [4 5]", "(concat [2 3 4 2 2 5] [7 6]) -> [2 3 4 2 2 5 7 6]", "(concat [1 4 9] [2 6 9 1 1]) -> [1 4 9 2 6 9 1 1]", "(concat [0] [6 5 7 0 3]) -> [0 6 5 7 0 3]", "(concat [1] [0 5 0]) -> [1 0 5 0]", "(concat [] [2 9]) -> [2 9]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.238093, "examples": ["(concat [5 8 8 1] [3]) -> [5 8 8 1 3]", "(concat [6 0 8 9] [1 7 2 9 4 2]) -> [6 0 8 9 1 7 2 9 4 2]", "(concat [2 9] [3 6 9 9 2]) -> [2 9 3 6 9 9 2]", "(concat [] []) -> []", "(concat [1] [1]) -> [1 1]", "(concat [6 6 7 3 6] [0 7]) -> [6 6 7 3 6 0 7]", "(concat [7] [8 4 0 2 8]) -> [7 8 4 0 2 8]", "(concat [7 2 4 9 6 9] [4 9 6]) -> [7 2 4 9 6 9 4 9 6]", "(concat [3 2 9 7 1] [2 3 3 1 0]) -> [3 2 9 7 1 2 3 3 1 0]", "(concat [2 4] [9]) -> [2 4 9]", "(concat [3 4 9 5 0] [7 8]) -> [3 4 9 5 0 7 8]", "(concat [0 6 9] []) -> [0 6 9]", "(concat [0 9] [5 1 5 5 0 0]) -> [0 9 5 1 5 5 0 0]", "(concat [9 4 3 9 1 9] [1 4 1 6 6 1]) -> [9 4 3 9 1 9 1 4 1 6 6 1]", "(concat [] [0 5]) -> [0 5]", "(concat [] [6 5 1 4 6 6]) -> [6 5 1 4 6 6]", "(concat [0 8 9 5 0] [9 3 0]) -> [0 8 9 5 0 9 3 0]", "(concat [] [8]) -> [8]", "(concat [6 0 6 3] [6 6 1]) -> [6 0 6 3 6 6 1]", "(concat [] [0]) -> [0]", "(concat [0 2 6 5 2 1] [1 9]) -> [0 2 6 5 2 1 1 9]", "(concat [4 8 9 5 7] [5 4 2 4 4]) -> [4 8 9 5 7 5 4 2 4 4]", "(concat [7 9 4 9 2 5] []) -> [7 9 4 9 2 5]", "(concat [4 3 8] [8 3 4 1 1 1]) -> [4 3 8 8 3 4 1 1 1]", "(concat [1 0 6 0 1] []) -> [1 0 6 0 1]", "(concat [7] [4]) -> [7 4]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.21727, "examples": ["(concat [] [9 9 9]) -> [9 9 9]", "(concat [5 0 6 9 1] [6 4 7]) -> [5 0 6 9 1 6 4 7]", "(concat [4] [7 2]) -> [4 7 2]", "(concat [5 9 9 7] []) -> [5 9 9 7]", "(concat [4 4 4] [7]) -> [4 4 4 7]", "(concat [5 6 2] [3 4 0]) -> [5 6 2 3 4 0]", "(concat [4 1 9 7 2 0] []) -> [4 1 9 7 2 0]", "(concat [4 2 1 4 0 9] [2 2 3 8]) -> [4 2 1 4 0 9 2 2 3 8]", "(concat [6 4 8 8 9 4] [6 5 8 0 8 3]) -> [6 4 8 8 9 4 6 5 8 0 8 3]", "(concat [9 3 7 2] [1 0 3 6 9]) -> [9 3 7 2 1 0 3 6 9]", "(concat [0 5 0] [8 5 8 3]) -> [0 5 0 8 5 8 3]", "(concat [7 0 1 2 5] []) -> [7 0 1 2 5]", "(concat [0 2 9 6 8] [1 4 2]) -> [0 2 9 6 8 1 4 2]", "(concat [0 7] []) -> [0 7]", "(concat [2 1 2 1] [5 6 7 0]) -> [2 1 2 1 5 6 7 0]", "(concat [4 6 0] [1]) -> [4 6 0 1]", "(concat [7 6] [2 9 3]) -> [7 6 2 9 3]", "(concat [7 0 4] [6 7 1 8]) -> [7 0 4 6 7 1 8]", "(concat [6 8 2 5 1 6] [4 2 1 4 8]) -> [6 8 2 5 1 6 4 2 1 4 8]", "(concat [5 3] [6 0 2 6]) -> [5 3 6 0 2 6]", "(concat [0 9 7 1 2] [8 0 7 5 2]) -> [0 9 7 1 2 8 0 7 5 2]", "(concat [3 2 3] []) -> [3 2 3]", "(concat [0 7 5] [5 4]) -> [0 7 5 5 4]", "(concat [9 1] [6 4 0 9 0]) -> [9 1 6 4 0 9 0]", "(concat [7 8 5] [1 9 2 0 9 6]) -> [7 8 5 1 9 2 0 9 6]", "(concat [] [4]) -> [4]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.203702, "examples": ["(concat [8] [5 5]) -> [8 5 5]", "(concat [9 0 1 8 4] [8 1 5]) -> [9 0 1 8 4 8 1 5]", "(concat [1 7 0 1 6 5] [4 4 5]) -> [1 7 0 1 6 5 4 4 5]", "(concat [6 1 2] [5]) -> [6 1 2 5]", "(concat [] [3 6]) -> [3 6]", "(concat [3] [3 7 2 6 8]) -> [3 3 7 2 6 8]", "(concat [] [5 9 9 4]) -> [5 9 9 4]", "(concat [4 5] []) -> [4 5]", "(concat [5 4 4] [5 5 2]) -> [5 4 4 5 5 2]", "(concat [3 7 9 7 9 1] [8 1 5 3 0 5]) -> [3 7 9 7 9 1 8 1 5 3 0 5]", "(concat [3] [0 0 6 2 9]) -> [3 0 0 6 2 9]", "(concat [0 7 8 1 5] []) -> [0 7 8 1 5]", "(concat [0 7 5] [8 9 5]) -> [0 7 5 8 9 5]", "(concat [9 9 5 5] [8]) -> [9 9 5 5 8]", "(concat [5 2 3 2 7] [5]) -> [5 2 3 2 7 5]", "(concat [7 0] [7 4 1 2 4 3]) -> [7 0 7 4 1 2 4 3]", "(concat [0 9 0] [0]) -> [0 9 0 0]", "(concat [4 4 6] [4 7 2 5 3 7]) -> [4 4 6 4 7 2 5 3 7]", "(concat [0 6 1 0 6 6] [6 3 3 0 7 8]) -> [0 6 1 0 6 6 6 3 3 0 7 8]", "(concat [1 4 5] [5 9]) -> [1 4 5 5 9]", "(concat [] [9]) -> [9]", "(concat [] []) -> []", "(concat [9 9 2 1 9 2] [7 1 7 7 4 6]) -> [9 9 2 1 9 2 7 1 7 7 4 6]", "(concat [0] [2]) -> [0 2]", "(concat [] [6]) -> [6]", "(concat [9 2 9 8] []) -> [9 2 9 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.208439, "examples": ["(concat [4 9] [7 1]) -> [4 9 7 1]", "(concat [] [7 7]) -> [7 7]", "(concat [5 9 5 1] [7 3 1 0 5 5]) -> [5 9 5 1 7 3 1 0 5 5]", "(concat [8 3] [3 2 7]) -> [8 3 3 2 7]", "(concat [3 2 2 5] [9]) -> [3 2 2 5 9]", "(concat [0 4 3 4 1] [4 1 1 2 5]) -> [0 4 3 4 1 4 1 1 2 5]", "(concat [5 0 6] []) -> [5 0 6]", "(concat [8 0 2] [8 5 0 3]) -> [8 0 2 8 5 0 3]", "(concat [1 1 0 5 6 8] [5]) -> [1 1 0 5 6 8 5]", "(concat [4 7 0 2] [7 0 8 0]) -> [4 7 0 2 7 0 8 0]", "(concat [9 0 9] [8 1 8 8 4]) -> [9 0 9 8 1 8 8 4]", "(concat [8] [3 3 3]) -> [8 3 3 3]", "(concat [2 6 9 7 9 4] [3]) -> [2 6 9 7 9 4 3]", "(concat [4 6 7 0 8] [9]) -> [4 6 7 0 8 9]", "(concat [0] [7 7 7 7]) -> [0 7 7 7 7]", "(concat [8 4 5 7 6 2] []) -> [8 4 5 7 6 2]", "(concat [4 9 1 3] [7 1]) -> [4 9 1 3 7 1]", "(concat [5 5] [6 3 1 4 4]) -> [5 5 6 3 1 4 4]", "(concat [1 1] [6 5 4 2]) -> [1 1 6 5 4 2]", "(concat [5 0 9] [3 8 8 9]) -> [5 0 9 3 8 8 9]", "(concat [] [0 9 6]) -> [0 9 6]", "(concat [0 4 8] []) -> [0 4 8]", "(concat [7 6 6 5 8 0] []) -> [7 6 6 5 8 0]", "(concat [6 7 9] [0 2 9 6 5]) -> [6 7 9 0 2 9 6 5]", "(concat [5] [5 7 3 6]) -> [5 5 7 3 6]", "(concat [2 3 3] [3]) -> [2 3 3 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.19049, "examples": ["(concat [] []) -> []", "(concat [7] [3 2 9]) -> [7 3 2 9]", "(concat [2 6] [2 3 7 9 5]) -> [2 6 2 3 7 9 5]", "(concat [7 9 6] [4 5 9 8 0]) -> [7 9 6 4 5 9 8 0]", "(concat [3 6 6 8] []) -> [3 6 6 8]", "(concat [4 7 1 3] []) -> [4 7 1 3]", "(concat [6] []) -> [6]", "(concat [9 4 9 5 0] [1 6 4 0 3]) -> [9 4 9 5 0 1 6 4 0 3]", "(concat [3 0 3 3 0 1] []) -> [3 0 3 3 0 1]", "(concat [2 5 4 2 5 9] [4 0 8 7 4]) -> [2 5 4 2 5 9 4 0 8 7 4]", "(concat [7 3 5] [4]) -> [7 3 5 4]", "(concat [3 4] [5 6 6 0 1 7]) -> [3 4 5 6 6 0 1 7]", "(concat [3] [4 0 7]) -> [3 4 0 7]", "(concat [2 1 0] [3 2]) -> [2 1 0 3 2]", "(concat [] [0 3 0 7 0]) -> [0 3 0 7 0]", "(concat [3 7 4] [1]) -> [3 7 4 1]", "(concat [3 3] [3]) -> [3 3 3]", "(concat [] [8 3 9 1]) -> [8 3 9 1]", "(concat [7] [5 5 4]) -> [7 5 5 4]", "(concat [8 5 1] [0 5 9 9 3 6]) -> [8 5 1 0 5 9 9 3 6]", "(concat [1] [5 0 3 7 3 2]) -> [1 5 0 3 7 3 2]", "(concat [3 5] [3 4 3 6 9]) -> [3 5 3 4 3 6 9]", "(concat [7 5 6 4 6 2] [0]) -> [7 5 6 4 6 2 0]", "(concat [5] []) -> [5]", "(concat [5 0 7 6 0] [2 8 2 9]) -> [5 0 7 6 0 2 8 2 9]", "(concat [9 2] [8 8 8]) -> [9 2 8 8 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.200069, "examples": ["(concat [2 8 8 7 9] [1]) -> [2 8 8 7 9 1]", "(concat [4] [3]) -> [4 3]", "(concat [9 2 2] []) -> [9 2 2]", "(concat [8 5 5 2 5 1] [7 1 0 7 6 1]) -> [8 5 5 2 5 1 7 1 0 7 6 1]", "(concat [6 8] [4 9]) -> [6 8 4 9]", "(concat [8 0 7 1 2] [5 0 3 3 2 7]) -> [8 0 7 1 2 5 0 3 3 2 7]", "(concat [5] []) -> [5]", "(concat [4 6 2 8 5] []) -> [4 6 2 8 5]", "(concat [1 4 3 2 8] [3 9 3]) -> [1 4 3 2 8 3 9 3]", "(concat [2 4 2 9 4] [3 7]) -> [2 4 2 9 4 3 7]", "(concat [1 5 6 8 6] []) -> [1 5 6 8 6]", "(concat [3 0 0 9] [9 2 9 3]) -> [3 0 0 9 9 2 9 3]", "(concat [0 9 7] [7 3 3 1 5 0]) -> [0 9 7 7 3 3 1 5 0]", "(concat [0 4] [4 4 4 2 3]) -> [0 4 4 4 4 2 3]", "(concat [1] [5 0 6 7 8 9]) -> [1 5 0 6 7 8 9]", "(concat [5 4 5] [3 4]) -> [5 4 5 3 4]", "(concat [] [8 9 5 1]) -> [8 9 5 1]", "(concat [6] [3 7 4]) -> [6 3 7 4]", "(concat [7 6] [3 4 1 3 5]) -> [7 6 3 4 1 3 5]", "(concat [0 2 4 0 4] [8 7 3]) -> [0 2 4 0 4 8 7 3]", "(concat [] [1 3 7 8]) -> [1 3 7 8]", "(concat [8 0 4 7 2] [7 6 4 0 8]) -> [8 0 4 7 2 7 6 4 0 8]", "(concat [1 1] [7 0 7 6 9 8]) -> [1 1 7 0 7 6 9 8]", "(concat [8 3 2 3] [1]) -> [8 3 2 3 1]", "(concat [8 3 3] []) -> [8 3 3]", "(concat [4 9 5 5 8] []) -> [4 9 5 5 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.216462, "examples": ["(concat [6 1 1] [3 7 1 3 3 6]) -> [6 1 1 3 7 1 3 3 6]", "(concat [7 5 8 3 1] [5 7 8 1 4 2]) -> [7 5 8 3 1 5 7 8 1 4 2]", "(concat [] [2 8 2 4 4]) -> [2 8 2 4 4]", "(concat [] [3 8 8 7 4]) -> [3 8 8 7 4]", "(concat [4 4 7 6 6 3] [1 2 9 2]) -> [4 4 7 6 6 3 1 2 9 2]", "(concat [9 6 5] [9 0 5 2 4]) -> [9 6 5 9 0 5 2 4]", "(concat [0 3 3] [5]) -> [0 3 3 5]", "(concat [0 1 6 5 9] [4]) -> [0 1 6 5 9 4]", "(concat [5 9 5 2] []) -> [5 9 5 2]", "(concat [4 5 8 5 8] [3 3 1 2 7 6]) -> [4 5 8 5 8 3 3 1 2 7 6]", "(concat [6 8 1] [9 0 6]) -> [6 8 1 9 0 6]", "(concat [5] [3]) -> [5 3]", "(concat [5 4] [9 9 1 1 0]) -> [5 4 9 9 1 1 0]", "(concat [] [0 3 4 3 4 6]) -> [0 3 4 3 4 6]", "(concat [0 7] [8 1 6 4]) -> [0 7 8 1 6 4]", "(concat [3 4] []) -> [3 4]", "(concat [8] [0 7 7 5 8]) -> [8 0 7 7 5 8]", "(concat [0 0] []) -> [0 0]", "(concat [9 1 1 6 9 8] [4 1]) -> [9 1 1 6 9 8 4 1]", "(concat [4] []) -> [4]", "(concat [4 5] [7 6 5 7 4 9]) -> [4 5 7 6 5 7 4 9]", "(concat [0] [3 5 8]) -> [0 3 5 8]", "(concat [6 4] [5 5]) -> [6 4 5 5]", "(concat [4 3 9 0 7 8] []) -> [4 3 9 0 7 8]", "(concat [] [7 2 4]) -> [7 2 4]", "(concat [5 0] [0]) -> [5 0 0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.239016, "examples": ["(concat [] [0]) -> [0]", "(concat [3 6 2 6] [5 6 5 3 6]) -> [3 6 2 6 5 6 5 3 6]", "(concat [2 7 8 7 6] [5 3 2 9 3 2]) -> [2 7 8 7 6 5 3 2 9 3 2]", "(concat [0 4 9 3 6 3] [0 8 0 4]) -> [0 4 9 3 6 3 0 8 0 4]", "(concat [3 4 2 2 2] [2]) -> [3 4 2 2 2 2]", "(concat [0] [8 0 8]) -> [0 8 0 8]", "(concat [9 7] [4]) -> [9 7 4]", "(concat [2 5 5 6 8] []) -> [2 5 5 6 8]", "(concat [2] [0 1 2 5]) -> [2 0 1 2 5]", "(concat [7 7 2 5] [1 9 1 3]) -> [7 7 2 5 1 9 1 3]", "(concat [9] []) -> [9]", "(concat [4 4] [9]) -> [4 4 9]", "(concat [4 6 5 0 4] [9]) -> [4 6 5 0 4 9]", "(concat [] [0 4 6 9 3 2]) -> [0 4 6 9 3 2]", "(concat [7 7 6 9 6 0] [9 0 7 7 3 7]) -> [7 7 6 9 6 0 9 0 7 7 3 7]", "(concat [6 8] [3 2]) -> [6 8 3 2]", "(concat [0] [9]) -> [0 9]", "(concat [5 7 6 7 3] [6 6 1 7 7 6]) -> [5 7 6 7 3 6 6 1 7 7 6]", "(concat [8 4 1 7 8] [5 0 3 5 1 1]) -> [8 4 1 7 8 5 0 3 5 1 1]", "(concat [1 5 2 7 1] [6 6 1 1 4]) -> [1 5 2 7 1 6 6 1 1 4]", "(concat [1 6 8 6 2] [2 7 6 6]) -> [1 6 8 6 2 2 7 6 6]", "(concat [5 4 5 2] []) -> [5 4 5 2]", "(concat [4 0 2 0] [2 9 9 8 5]) -> [4 0 2 0 2 9 9 8 5]", "(concat [5 5 6 4 8] [4 8 3]) -> [5 5 6 4 8 4 8 3]", "(concat [0 2 5 6 9 5] [1 5 6 7]) -> [0 2 5 6 9 5 1 5 6 7]", "(concat [0] [4 7 9]) -> [0 4 7 9]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.196028, "examples": ["(concat [6] [8 2 4 8]) -> [6 8 2 4 8]", "(concat [1 9 1] [1 6]) -> [1 9 1 1 6]", "(concat [7 0 2] [3 2 4 2 1]) -> [7 0 2 3 2 4 2 1]", "(concat [4] [0 8]) -> [4 0 8]", "(concat [0 8 9 1 0 5] [7 4 0 1]) -> [0 8 9 1 0 5 7 4 0 1]", "(concat [3 0 9 3 9 6] [2 6 7 3 4 8]) -> [3 0 9 3 9 6 2 6 7 3 4 8]", "(concat [7 5 7 9 1 1] []) -> [7 5 7 9 1 1]", "(concat [2 9 9 2 1] [4 0 9 0 0]) -> [2 9 9 2 1 4 0 9 0 0]", "(concat [1 7] [7 7 4]) -> [1 7 7 7 4]", "(concat [8 6 9 9] [4 4]) -> [8 6 9 9 4 4]", "(concat [8 6 2] [2 2]) -> [8 6 2 2 2]", "(concat [4 3 7 8 6] [9 4 2]) -> [4 3 7 8 6 9 4 2]", "(concat [6 4] [3]) -> [6 4 3]", "(concat [7 7 3 2 7] [3 4 5 0 4]) -> [7 7 3 2 7 3 4 5 0 4]", "(concat [9 8] [2 6 4]) -> [9 8 2 6 4]", "(concat [] [1]) -> [1]", "(concat [0 8] [3 1 4 0 9]) -> [0 8 3 1 4 0 9]", "(concat [6 3 7 4] [2 8 4 0 3]) -> [6 3 7 4 2 8 4 0 3]", "(concat [9 6 0] []) -> [9 6 0]", "(concat [8] [8]) -> [8 8]", "(concat [7 9] [8 6 8 4 2 5]) -> [7 9 8 6 8 4 2 5]", "(concat [6 4 4 2 1] [5 5 4 2 2]) -> [6 4 4 2 1 5 5 4 2 2]", "(concat [7 7 9 1 5 4] [4 0]) -> [7 7 9 1 5 4 4 0]", "(concat [] []) -> []", "(concat [1 0 9 7 6 9] []) -> [1 0 9 7 6 9]", "(concat [1 2 1 8] [8 4 1 1 1]) -> [1 2 1 8 8 4 1 1 1]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.248527, "examples": ["(concat [] [6 9]) -> [6 9]", "(concat [] [0]) -> [0]", "(concat [5 2 7 5 5] [9 2 9 0]) -> [5 2 7 5 5 9 2 9 0]", "(concat [2 9 7] [8 8]) -> [2 9 7 8 8]", "(concat [7 7 9] [6 1 8 9 1 6]) -> [7 7 9 6 1 8 9 1 6]", "(concat [7 2 4 3 4 3] [2 0]) -> [7 2 4 3 4 3 2 0]", "(concat [5 5 7 3] [6]) -> [5 5 7 3 6]", "(concat [8] [1 5]) -> [8 1 5]", "(concat [7 7 4 5] [8 4 7 3 8]) -> [7 7 4 5 8 4 7 3 8]", "(concat [0 2 3 0] [4 0 5 4]) -> [0 2 3 0 4 0 5 4]", "(concat [1] []) -> [1]", "(concat [5 5 2] [5 0 2 1 7]) -> [5 5 2 5 0 2 1 7]", "(concat [8 0] [6 0 4 9 1 9]) -> [8 0 6 0 4 9 1 9]", "(concat [0 6 7 4] [5]) -> [0 6 7 4 5]", "(concat [2 3 0 1 7] [1]) -> [2 3 0 1 7 1]", "(concat [3 6 2] [6 7 2 9 6 7]) -> [3 6 2 6 7 2 9 6 7]", "(concat [6 7 0] [3 1 9 2 0 5]) -> [6 7 0 3 1 9 2 0 5]", "(concat [6 6] [0 3 8 1 9]) -> [6 6 0 3 8 1 9]", "(concat [2 1 2 4] [9 8]) -> [2 1 2 4 9 8]", "(concat [9] [9 2 9 5]) -> [9 9 2 9 5]", "(concat [2 0] [2 3]) -> [2 0 2 3]", "(concat [] [0 9 5 5]) -> [0 9 5 5]", "(concat [6 4 6 5] [1 2]) -> [6 4 6 5 1 2]", "(concat [9] []) -> [9]", "(concat [9] [6 1 3 8]) -> [9 6 1 3 8]", "(concat [4 3 2 6 9] [8]) -> [4 3 2 6 9 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.229958, "examples": ["(concat [8 4] []) -> [8 4]", "(concat [4 8 7 5 9 2] [0]) -> [4 8 7 5 9 2 0]", "(concat [6 4 8 3 9] [1 3 5 2 1]) -> [6 4 8 3 9 1 3 5 2 1]", "(concat [] []) -> []", "(concat [2 7 0 7 6 5] [0 0 9 7]) -> [2 7 0 7 6 5 0 0 9 7]", "(concat [6 6 4 9 5 7] [2 6 2]) -> [6 6 4 9 5 7 2 6 2]", "(concat [5] []) -> [5]", "(concat [8 5 3 6] [8 3 6 2 7]) -> [8 5 3 6 8 3 6 2 7]", "(concat [5 0 2 8 2] [4 8]) -> [5 0 2 8 2 4 8]", "(concat [1] []) -> [1]", "(concat [5 8 2 3] [9 4]) -> [5 8 2 3 9 4]", "(concat [6 4 3] [7 1 9 8]) -> [6 4 3 7 1 9 8]", "(concat [3 7 5 9] [1 0]) -> [3 7 5 9 1 0]", "(concat [3 8 9 4 7 4] [7]) -> [3 8 9 4 7 4 7]", "(concat [] [8 9]) -> [8 9]", "(concat [5] [6]) -> [5 6]", "(concat [3 9 1 7 6] [2 1 5 2]) -> [3 9 1 7 6 2 1 5 2]", "(concat [2 5 2 3 7 7] [9 5 2 5]) -> [2 5 2 3 7 7 9 5 2 5]", "(concat [0 4 0] [3 4 4]) -> [0 4 0 3 4 4]", "(concat [0 9 1 4 0] [6 8 4 8 1]) -> [0 9 1 4 0 6 8 4 8 1]", "(concat [] []) -> []", "(concat [8 8 1 5 3 1] [8]) -> [8 8 1 5 3 1 8]", "(concat [] []) -> []", "(concat [2 7 9] [9 3 3 7 4]) -> [2 7 9 9 3 3 7 4]", "(concat [5 7 2 0 6 9] [2]) -> [5 7 2 0 6 9 2]", "(concat [6 0 4 3] [9 1 9]) -> [6 0 4 3 9 1 9]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.221832, "examples": ["(concat [7 9 5 5 4] [5 0]) -> [7 9 5 5 4 5 0]", "(concat [8] [5 0 0 6 9]) -> [8 5 0 0 6 9]", "(concat [] [5 0 3 3 7]) -> [5 0 3 3 7]", "(concat [3 1 2 5 0] [7 4 5 7]) -> [3 1 2 5 0 7 4 5 7]", "(concat [9] [1 7 3 3 3]) -> [9 1 7 3 3 3]", "(concat [9 8 8] []) -> [9 8 8]", "(concat [3 8 7 8 8 6] [6 1 5 6 9 8]) -> [3 8 7 8 8 6 6 1 5 6 9 8]", "(concat [3 6 5 6] [7 2 1 2 5]) -> [3 6 5 6 7 2 1 2 5]", "(concat [8] [1 8 1 4 4]) -> [8 1 8 1 4 4]", "(concat [2 9] [2 5 6 6 0 5]) -> [2 9 2 5 6 6 0 5]", "(concat [6 1 7 0 8] [7 5 9 8 1]) -> [6 1 7 0 8 7 5 9 8 1]", "(concat [0 1] [5 9 8 3 8]) -> [0 1 5 9 8 3 8]", "(concat [8 2 4 6] []) -> [8 2 4 6]", "(concat [0 2 1 5 1 0] [9 9 8 3 0 8]) -> [0 2 1 5 1 0 9 9 8 3 0 8]", "(concat [] []) -> []", "(concat [7] [5 3 0 6 6 9]) -> [7 5 3 0 6 6 9]", "(concat [5 8 4] []) -> [5 8 4]", "(concat [5 0 0] [1 5 5]) -> [5 0 0 1 5 5]", "(concat [9 4 1 2 1 1] [1 8 9 8 5 1]) -> [9 4 1 2 1 1 1 8 9 8 5 1]", "(concat [9 6 3 9 9 8] [3]) -> [9 6 3 9 9 8 3]", "(concat [9 4 2 0 4 2] [5 7 1]) -> [9 4 2 0 4 2 5 7 1]", "(concat [8 0 7 9] [1 4 2 1 0]) -> [8 0 7 9 1 4 2 1 0]", "(concat [9 2 7] [1 4 1 5]) -> [9 2 7 1 4 1 5]", "(concat [4 4 9] [9 5 9]) -> [4 4 9 9 5 9]", "(concat [6] [7]) -> [6 7]", "(concat [5 7] [7 9 2 6]) -> [5 7 7 9 2 6]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.249974, "examples": ["(concat [] [4 5 2 3 1]) -> [4 5 2 3 1]", "(concat [3] [6 6 3 1 8 3]) -> [3 6 6 3 1 8 3]", "(concat [] [8 7 0 9 8 0]) -> [8 7 0 9 8 0]", "(concat [7 7] [4 8 9]) -> [7 7 4 8 9]", "(concat [] [4 1 7 0 0 9]) -> [4 1 7 0 0 9]", "(concat [1 2 9 4] [7 8 4 0]) -> [1 2 9 4 7 8 4 0]", "(concat [9 3] []) -> [9 3]", "(concat [9 1 1] [4 8 6 3 6 5]) -> [9 1 1 4 8 6 3 6 5]", "(concat [7] [6 7 9 9 2]) -> [7 6 7 9 9 2]", "(concat [9 1 5 3] [8]) -> [9 1 5 3 8]", "(concat [3 6 9 9] [3 6]) -> [3 6 9 9 3 6]", "(concat [9] [8 0 3 6]) -> [9 8 0 3 6]", "(concat [5] [1 2 1 5 2]) -> [5 1 2 1 5 2]", "(concat [8 1 9 6 7 9] [3 0 4 3 1 6]) -> [8 1 9 6 7 9 3 0 4 3 1 6]", "(concat [4 9 1 7] [3 9 7 2]) -> [4 9 1 7 3 9 7 2]", "(concat [0 4 8 7] [0]) -> [0 4 8 7 0]", "(concat [7 9 0 8 0 2] [2 6 3 6]) -> [7 9 0 8 0 2 2 6 3 6]", "(concat [6 5] [4 8]) -> [6 5 4 8]", "(concat [5 6 7 3 3 6] [3 9 0 3 0 8]) -> [5 6 7 3 3 6 3 9 0 3 0 8]", "(concat [5 2 8 5 3] [6 9 6 9 1]) -> [5 2 8 5 3 6 9 6 9 1]", "(concat [5] [8 3 5 6]) -> [5 8 3 5 6]", "(concat [] [4 4 5 5 6]) -> [4 4 5 5 6]", "(concat [6] [5 6 2 5 8]) -> [6 5 6 2 5 8]", "(concat [8 2] []) -> [8 2]", "(concat [2 4] [0 8 7 8 9 0]) -> [2 4 0 8 7 8 9 0]", "(concat [9 4 1] [9 6 5]) -> [9 4 1 9 6 5]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.20605, "examples": ["(concat [6 0 5 1] [5]) -> [6 0 5 1 5]", "(concat [1] []) -> [1]", "(concat [7 5 6] [4]) -> [7 5 6 4]", "(concat [8 6 7 6] [3 9 4 9 8]) -> [8 6 7 6 3 9 4 9 8]", "(concat [] [2 9 0 9 4]) -> [2 9 0 9 4]", "(concat [4 5 7 0 1 9] []) -> [4 5 7 0 1 9]", "(concat [1] []) -> [1]", "(concat [9 0 4 9 2 5] [7 9]) -> [9 0 4 9 2 5 7 9]", "(concat [7 8 6 1 3 3] []) -> [7 8 6 1 3 3]", "(concat [5 9 1 3] [2 0 9 5 3]) -> [5 9 1 3 2 0 9 5 3]", "(concat [9 4] [7]) -> [9 4 7]", "(concat [7 4 5 0 7 4] [0 9 9]) -> [7 4 5 0 7 4 0 9 9]", "(concat [4 4 9] [3]) -> [4 4 9 3]", "(concat [6 7 8 6] [4 9]) -> [6 7 8 6 4 9]", "(concat [3 1 0] []) -> [3 1 0]", "(concat [6 8 3 4 4 2] []) -> [6 8 3 4 4 2]", "(concat [8] [8 1 3]) -> [8 8 1 3]", "(concat [1 1 8 2 0] []) -> [1 1 8 2 0]", "(concat [2 6] [6 7 8 2]) -> [2 6 6 7 8 2]", "(concat [] [5 2 0 4 2]) -> [5 2 0 4 2]", "(concat [9 2 7 5] [7 5 9]) -> [9 2 7 5 7 5 9]", "(concat [9 6] [3 2]) -> [9 6 3 2]", "(concat [3 4 7 0 2 2] [1 0 3 2 2]) -> [3 4 7 0 2 2 1 0 3 2 2]", "(concat [6 6] [9 7]) -> [6 6 9 7]", "(concat [9 8 4 9 9] []) -> [9 8 4 9 9]", "(concat [6 2 4 7 9] [5 3 7]) -> [6 2 4 7 9 5 3 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.237432, "examples": ["(concat [1 5 1 2] []) -> [1 5 1 2]", "(concat [0 2 6 5 1] [0]) -> [0 2 6 5 1 0]", "(concat [9 5 7 6 7] [2 6 0 4 4]) -> [9 5 7 6 7 2 6 0 4 4]", "(concat [1 1 0 8] [7 3 1 0 2 5]) -> [1 1 0 8 7 3 1 0 2 5]", "(concat [8 4 0] [9 4 4]) -> [8 4 0 9 4 4]", "(concat [2 6 0 1 0 9] [8 7 9 7 0 2]) -> [2 6 0 1 0 9 8 7 9 7 0 2]", "(concat [] []) -> []", "(concat [4 0 5 3 2] [3 3]) -> [4 0 5 3 2 3 3]", "(concat [3 7 5 5 0] [5 6 8]) -> [3 7 5 5 0 5 6 8]", "(concat [5 2 4 0 7 0] [1 7 2]) -> [5 2 4 0 7 0 1 7 2]", "(concat [6 8] [3 4 6 9 4 5]) -> [6 8 3 4 6 9 4 5]", "(concat [6] [5 8 3]) -> [6 5 8 3]", "(concat [1 4 1 1 1] [7 4 1 0 9]) -> [1 4 1 1 1 7 4 1 0 9]", "(concat [0 5 3 3 4 8] [7]) -> [0 5 3 3 4 8 7]", "(concat [5 2 0 2] [3 1 6 2 3]) -> [5 2 0 2 3 1 6 2 3]", "(concat [4 8] [5 4 3 2]) -> [4 8 5 4 3 2]", "(concat [0] [0]) -> [0 0]", "(concat [5 0 2] [0 2 9 0 5]) -> [5 0 2 0 2 9 0 5]", "(concat [4 3] []) -> [4 3]", "(concat [] [2 6 7]) -> [2 6 7]", "(concat [4 2 0 8] [2 4]) -> [4 2 0 8 2 4]", "(concat [6 7] [2 2 7 3 5]) -> [6 7 2 2 7 3 5]", "(concat [9 7 4] [2 8 6 7 5 1]) -> [9 7 4 2 8 6 7 5 1]", "(concat [] [5 0 9 9]) -> [5 0 9 9]", "(concat [6 1 0 5 5] [5 3 4]) -> [6 1 0 5 5 5 3 4]", "(concat [] []) -> []"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.219496, "examples": ["(concat [] []) -> []", "(concat [9 0 5] [5 9]) -> [9 0 5 5 9]", "(concat [] [7 4 1 4 0]) -> [7 4 1 4 0]", "(concat [3 9 9] [1 5]) -> [3 9 9 1 5]", "(concat [] [1 3]) -> [1 3]", "(concat [3 1] [3 3]) -> [3 1 3 3]", "(concat [8 7 1 9 5 7] [6 7 4]) -> [8 7 1 9 5 7 6 7 4]", "(concat [8 6 7 5 2] [9 3]) -> [8 6 7 5 2 9 3]", "(concat [3 2 4 5 3 4] [6 2 0 2]) -> [3 2 4 5 3 4 6 2 0 2]", "(concat [7 7] [3 0 8 1 7 6]) -> [7 7 3 0 8 1 7 6]", "(concat [4 5 8 0 3] [7 0]) -> [4 5 8 0 3 7 0]", "(concat [7 1 6 5] [1 3 7 9 4]) -> [7 1 6 5 1 3 7 9 4]", "(concat [3 1 2 9 1] [1 9]) -> [3 1 2 9 1 1 9]", "(concat [3 4 9 1] [0]) -> [3 4 9 1 0]", "(concat [] [6 9 0]) -> [6 9 0]", "(concat [1 7 3] [3]) -> [1 7 3 3]", "(concat [8 1 9 1 7 8] [5 5]) -> [8 1 9 1 7 8 5 5]", "(concat [9 2 5] [9 4 0 2 6 9]) -> [9 2 5 9 4 0 2 6 9]", "(concat [6 0 7 6] [9 7 2 9]) -> [6 0 7 6 9 7 2 9]", "(concat [] [7 0 9 8 9 3]) -> [7 0 9 8 9 3]", "(concat [1 5 1 1 1 9] [7 9 8]) -> [1 5 1 1 1 9 7 9 8]", "(concat [4 7 8 6 1 4] [0 8 6 3]) -> [4 7 8 6 1 4 0 8 6 3]", "(concat [3 4] [7 6 9 5]) -> [3 4 7 6 9 5]", "(concat [2 2 4 6 2] [4 2 2 4]) -> [2 2 4 6 2 4 2 2 4]", "(concat [6 9 7 3 4 9] [3 1 9 8 0]) -> [6 9 7 3 4 9 3 1 9 8 0]", "(concat [8] [1]) -> [8 1]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.206301, "examples": ["(concat [5 6 3 6] [7 4 3 6]) -> [5 6 3 6 7 4 3 6]", "(concat [4 7] [4]) -> [4 7 4]", "(concat [2] [1]) -> [2 1]", "(concat [6] [0 2 5 8 9 8]) -> [6 0 2 5 8 9 8]", "(concat [3] [7 8 6]) -> [3 7 8 6]", "(concat [4] [7 8 7 7]) -> [4 7 8 7 7]", "(concat [9] [0]) -> [9 0]", "(concat [1] [2 5 3]) -> [1 2 5 3]", "(concat [1 5] [6 1 8 2]) -> [1 5 6 1 8 2]", "(concat [] [6 2 6]) -> [6 2 6]", "(concat [3] [4 3 2 0 2 0]) -> [3 4 3 2 0 2 0]", "(concat [5 8 4 1] [5 0 0 7]) -> [5 8 4 1 5 0 0 7]", "(concat [8 2] [8 3]) -> [8 2 8 3]", "(concat [5 4 4] [7 1 6 7 3 1]) -> [5 4 4 7 1 6 7 3 1]", "(concat [1 1] [0]) -> [1 1 0]", "(concat [] [8 2]) -> [8 2]", "(concat [] [0]) -> [0]", "(concat [6 5 3 2 4] [3 0 3 7 6 6]) -> [6 5 3 2 4 3 0 3 7 6 6]", "(concat [0 7 0 1 6 8] [3 8 5 9]) -> [0 7 0 1 6 8 3 8 5 9]", "(concat [7 3] []) -> [7 3]", "(concat [7 8 0 9 4 4] []) -> [7 8 0 9 4 4]", "(concat [] []) -> []", "(concat [7 5 9] [2]) -> [7 5 9 2]", "(concat [5 1 5 3] [3 4]) -> [5 1 5 3 3 4]", "(concat [0 2 0 4] [6 6 3 9]) -> [0 2 0 4 6 6 3 9]", "(concat [3 8 7] [1 2 3]) -> [3 8 7 1 2 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.200735, "examples": ["(concat [6] [9 2]) -> [6 9 2]", "(concat [8 7 2] [6 8 5]) -> [8 7 2 6 8 5]", "(concat [4 0 5 9 0 1] [2]) -> [4 0 5 9 0 1 2]", "(concat [] [8 0 8]) -> [8 0 8]", "(concat [] [8 4 2]) -> [8 4 2]", "(concat [8 2 8 5] [4 3 1 9 9 7]) -> [8 2 8 5 4 3 1 9 9 7]", "(concat [9 5 7 8 7] [7 3 7]) -> [9 5 7 8 7 7 3 7]", "(concat [5 1 6 2] [4 7 0]) -> [5 1 6 2 4 7 0]", "(concat [2 2 4] [9 2]) -> [2 2 4 9 2]", "(concat [4] [0 8 4 2 4]) -> [4 0 8 4 2 4]", "(concat [6 0 0 0 1 2] [7 1 2 7 5 3]) -> [6 0 0 0 1 2 7 1 2 7 5 3]", "(concat [8] [8 5]) -> [8 8 5]", "(concat [5 1 7 0 0] [2 6 2]) -> [5 1 7 0 0 2 6 2]", "(concat [] [3 2]) -> [3 2]", "(concat [7 7 9 4] [7]) -> [7 7 9 4 7]", "(concat [9] [3]) -> [9 3]", "(concat [1 7] [1 7 3 1]) -> [1 7 1 7 3 1]", "(concat [9 2] [3 0 8 3 6 5]) -> [9 2 3 0 8 3 6 5]", "(concat [] [6 1]) -> [6 1]", "(concat [8 3] [3 5 5 1 7 5]) -> [8 3 3 5 5 1 7 5]", "(concat [7 2 0] [5 8 6 6 9]) -> [7 2 0 5 8 6 6 9]", "(concat [] [8]) -> [8]", "(concat [3 9 5 5] [8 6]) -> [3 9 5 5 8 6]", "(concat [2 6 4 1] [1 7 4]) -> [2 6 4 1 1 7 4]", "(concat [5 6 2 8 5] [3 6 6 5 3]) -> [5 6 2 8 5 3 6 6 5 3]", "(concat [] [7 4 7]) -> [7 4 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.256096, "examples": ["(concat [6] [6 1 0]) -> [6 6 1 0]", "(concat [4 7 0 8] [1 4 2 4]) -> [4 7 0 8 1 4 2 4]", "(concat [6 1 7 7 7 5] [4]) -> [6 1 7 7 7 5 4]", "(concat [8 2 5] [4 7 0 9 5]) -> [8 2 5 4 7 0 9 5]", "(concat [0] [9]) -> [0 9]", "(concat [5] [7 2 2 1]) -> [5 7 2 2 1]", "(concat [4] [8 4 1]) -> [4 8 4 1]", "(concat [7] [9 8]) -> [7 9 8]", "(concat [] [6 9 4 4 7]) -> [6 9 4 4 7]", "(concat [8 0 2 9] [8 1 2 6 6 5]) -> [8 0 2 9 8 1 2 6 6 5]", "(concat [4 7 8] [5 2 6 4 0]) -> [4 7 8 5 2 6 4 0]", "(concat [] [9 0 0]) -> [9 0 0]", "(concat [5 8 4 2] [3]) -> [5 8 4 2 3]", "(concat [4 4 9 4 2] [6 8 3 3]) -> [4 4 9 4 2 6 8 3 3]", "(concat [9] [2 6 7 1]) -> [9 2 6 7 1]", "(concat [0 0 4 3] [5]) -> [0 0 4 3 5]", "(concat [2 5 2 7] [0 0 0]) -> [2 5 2 7 0 0 0]", "(concat [0 2] [6 7 2 0 0]) -> [0 2 6 7 2 0 0]", "(concat [0 9] [4 5 1]) -> [0 9 4 5 1]", "(concat [4] [9]) -> [4 9]", "(concat [2 1 7 5 0] [6 8 9]) -> [2 1 7 5 0 6 8 9]", "(concat [7 3] [8 5]) -> [7 3 8 5]", "(concat [2] [8]) -> [2 8]", "(concat [3 5] [4 6 2 7]) -> [3 5 4 6 2 7]", "(concat [8 0 5] [2 7]) -> [8 0 5 2 7]", "(concat [1 2 4 3 2] [1 2 3 2 3]) -> [1 2 4 3 2 1 2 3 2 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.216849, "examples": ["(concat [1] [1 1 2 2 2]) -> [1 1 1 2 2 2]", "(concat [4 7 7 0 0] [6 2 0 5]) -> [4 7 7 0 0 6 2 0 5]", "(concat [9 0 3 6 6] []) -> [9 0 3 6 6]", "(concat [4 3 7 5 1] [5 2 3]) -> [4 3 7 5 1 5 2 3]", "(concat [3] [9 2 5]) -> [3 9 2 5]", "(concat [7] [0 0 4 2 5 3]) -> [7 0 0 4 2 5 3]", "(concat [7 5 2] [5 6 8 2 7]) -> [7 5 2 5 6 8 2 7]", "(concat [6] [6]) -> [6 6]", "(concat [3 5 8 8 4 6] [3 3]) -> [3 5 8 8 4 6 3 3]", "(concat [] [8]) -> [8]", "(concat [] [6 5 9 4 9]) -> [6 5 9 4 9]", "(concat [0 5 0 3] []) -> [0 5 0 3]", "(concat [8 3 0 0 5 1] [7 6 6 8 9]) -> [8 3 0 0 5 1 7 6 6 8 9]", "(concat [3 4 7 9] [1 2 9 2 8]) -> [3 4 7 9 1 2 9 2 8]", "(concat [7 9 2 6 0 2] [8 7 5 9 6]) -> [7 9 2 6 0 2 8 7 5 9 6]", "(concat [6 2 2 4 8 5] [5 5 8]) -> [6 2 2 4 8 5 5 5 8]", "(concat [0 3 6] []) -> [0 3 6]", "(concat [] [9 1 6 0]) -> [9 1 6 0]", "(concat [5 6] [1 2 8 2 6]) -> [5 6 1 2 8 2 6]", "(concat [] [0 3 0]) -> [0 3 0]", "(concat [] [3 5 1]) -> [3 5 1]", "(concat [4 2 9] [4 8 9 2 0]) -> [4 2 9 4 8 9 2 0]", "(concat [8 8] [9 4 4 4 3 5]) -> [8 8 9 4 4 4 3 5]", "(concat [0 8 9 3] []) -> [0 8 9 3]", "(concat [7 9 7] [8 5 0 9 4]) -> [7 9 7 8 5 0 9 4]", "(concat [0 5 3 1] [1 7 8]) -> [0 5 3 1 1 7 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.20763, "examples": ["(concat [1 8] [1 9 5 0 6]) -> [1 8 1 9 5 0 6]", "(concat [] [9 8 6 8 2 1]) -> [9 8 6 8 2 1]", "(concat [8 3 7 8 7] [2 8 5 7 6]) -> [8 3 7 8 7 2 8 5 7 6]", "(concat [9] [5 2]) -> [9 5 2]", "(concat [] [1 2 1 6 9]) -> [1 2 1 6 9]", "(concat [2 0 5] [2 8 7]) -> [2 0 5 2 8 7]", "(concat [4 9 8 0] [8]) -> [4 9 8 0 8]", "(concat [6 3 5 7 4 2] [0 1 2 8 3]) -> [6 3 5 7 4 2 0 1 2 8 3]", "(concat [1 0 5 7 4] [6 7]) -> [1 0 5 7 4 6 7]", "(concat [8 0 5] [7 6 6 6 9 8]) -> [8 0 5 7 6 6 6 9 8]", "(concat [1 5 0 4] [8 6 1 4 0 3]) -> [1 5 0 4 8 6 1 4 0 3]", "(concat [8 8 4 6 4 3] [0 8 8 0 9 6]) -> [8 8 4 6 4 3 0 8 8 0 9 6]", "(concat [9] []) -> [9]", "(concat [5 0] [1 5]) -> [5 0 1 5]", "(concat [8 0 8 6 2] [4]) -> [8 0 8 6 2 4]", "(concat [6 5 0 2 0 8] [9 8]) -> [6 5 0 2 0 8 9 8]", "(concat [6 2 1 2] []) -> [6 2 1 2]", "(concat [3 6 3 0 5 6] [5 5 6]) -> [3 6 3 0 5 6 5 5 6]", "(concat [0 8 7 9 5] [5 1 7]) -> [0 8 7 9 5 5 1 7]", "(concat [] [6 7 6]) -> [6 7 6]", "(concat [4 3] [5 4]) -> [4 3 5 4]", "(concat [3 7 9 2] [5 1 4 1 7 1]) -> [3 7 9 2 5 1 4 1 7 1]", "(concat [0 3 9 2 5 2] [4 3]) -> [0 3 9 2 5 2 4 3]", "(concat [3] [2 2]) -> [3 2 2]", "(concat [] [6 0 9 0 7 1]) -> [6 0 9 0 7 1]", "(concat [7 4] [2 5 7 3 4 9]) -> [7 4 2 5 7 3 4 9]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.217439, "examples": ["(concat [3] [5 8 2 7 6 2]) -> [3 5 8 2 7 6 2]", "(concat [1 2 9 0] [1 9 6 2 9 4]) -> [1 2 9 0 1 9 6 2 9 4]", "(concat [6 9 5 8] [1 2 5 4 4 1]) -> [6 9 5 8 1 2 5 4 4 1]", "(concat [7 7] []) -> [7 7]", "(concat [3 8 7 1] [5 4 1]) -> [3 8 7 1 5 4 1]", "(concat [6] [9 6]) -> [6 9 6]", "(concat [7] [4 2 4 5]) -> [7 4 2 4 5]", "(concat [4 3] [8 9 0 7 9]) -> [4 3 8 9 0 7 9]", "(concat [2] []) -> [2]", "(concat [3 9] [1]) -> [3 9 1]", "(concat [9 9] [1 0]) -> [9 9 1 0]", "(concat [0 9] [3 5]) -> [0 9 3 5]", "(concat [9 2 7 6] []) -> [9 2 7 6]", "(concat [4 4 5 8] []) -> [4 4 5 8]", "(concat [1 8 3 6] [1 1 9 6]) -> [1 8 3 6 1 1 9 6]", "(concat [2 2 0 1] [6 8]) -> [2 2 0 1 6 8]", "(concat [0 9 0] [5 7 5 2]) -> [0 9 0 5 7 5 2]", "(concat [0 0] [0 9 4 9 8 9]) -> [0 0 0 9 4 9 8 9]", "(concat [] []) -> []", "(concat [] [0 2]) -> [0 2]", "(concat [1 4 0 7 4 4] [8 8 7 8 7 5]) -> [1 4 0 7 4 4 8 8 7 8 7 5]", "(concat [1] [4 6 6 9 3 8]) -> [1 4 6 6 9 3 8]", "(concat [0 9 0 2 6 9] []) -> [0 9 0 2 6 9]", "(concat [] []) -> []", "(concat [9] [7 0 7 3 9]) -> [9 7 0 7 3 9]", "(concat [3 7 5 3] [1 9 5]) -> [3 7 5 3 1 9 5]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.220074, "examples": ["(concat [6 6 7 3 4 5] [2]) -> [6 6 7 3 4 5 2]", "(concat [4] [7 5]) -> [4 7 5]", "(concat [6 3 1] []) -> [6 3 1]", "(concat [2 3] [1 2 5 0]) -> [2 3 1 2 5 0]", "(concat [9 5] [7 6]) -> [9 5 7 6]", "(concat [6 0] [4 1 6 4 6 6]) -> [6 0 4 1 6 4 6 6]", "(concat [7 9 2] [3 1 6 1 5]) -> [7 9 2 3 1 6 1 5]", "(concat [9 3] [1 5 7 0]) -> [9 3 1 5 7 0]", "(concat [2 0 8] [5]) -> [2 0 8 5]", "(concat [] [1 2 2]) -> [1 2 2]", "(concat [] [0 6 7 0]) -> [0 6 7 0]", "(concat [6 6 0 7 8] [7]) -> [6 6 0 7 8 7]", "(concat [5 2] [4 4 7 6 9]) -> [5 2 4 4 7 6 9]", "(concat [] [5 4]) -> [5 4]", "(concat [4] []) -> [4]", "(concat [1] [7 2 1 9 4 9]) -> [1 7 2 1 9 4 9]", "(concat [2 1 5 1] [3 8 3 1]) -> [2 1 5 1 3 8 3 1]", "(concat [4 3] [5 2 8]) -> [4 3 5 2 8]", "(concat [6 6 9 5] [3 1]) -> [6 6 9 5 3 1]", "(concat [6 9 4 8] [5]) -> [6 9 4 8 5]", "(concat [3 1 4] [5 8]) -> [3 1 4 5 8]", "(concat [3] [6 7 7 0 4]) -> [3 6 7 7 0 4]", "(concat [2 9 5] [8 4 3 1 5 7]) -> [2 9 5 8 4 3 1 5 7]", "(concat [0] [7 5]) -> [0 7 5]", "(concat [6 9 9 3 5] [6 5 1]) -> [6 9 9 3 5 6 5 1]", "(concat [4 5] [1 5 8]) -> [4 5 1 5 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.25922, "examples": ["(concat [0 1] []) -> [0 1]", "(concat [5 2 5 2 7] [7 6]) -> [5 2 5 2 7 7 6]", "(concat [0 2] [3 7 2]) -> [0 2 3 7 2]", "(concat [] [6 8 3]) -> [6 8 3]", "(concat [3] [7 2 3 7 1 7]) -> [3 7 2 3 7 1 7]", "(concat [6 5 3 9 2] [5 3]) -> [6 5 3 9 2 5 3]", "(concat [6 8 2 4 2] [9 0 0 3 2 1]) -> [6 8 2 4 2 9 0 0 3 2 1]", "(concat [6 0 9] []) -> [6 0 9]", "(concat [6 8 4 6 4] [8 2 1 0 0]) -> [6 8 4 6 4 8 2 1 0 0]", "(concat [1 3] [2 1 8 2 8]) -> [1 3 2 1 8 2 8]", "(concat [3 1 4 4] [2 8]) -> [3 1 4 4 2 8]", "(concat [9 2 8] [5]) -> [9 2 8 5]", "(concat [] [8]) -> [8]", "(concat [0 1 4 3] [4 7 7 1]) -> [0 1 4 3 4 7 7 1]", "(concat [8 4 1 9 8 9] []) -> [8 4 1 9 8 9]", "(concat [8 4] [8 8 6]) -> [8 4 8 8 6]", "(concat [9 6 2] []) -> [9 6 2]", "(concat [4 3 8 5] [7 6 6]) -> [4 3 8 5 7 6 6]", "(concat [3 8] [2 1 0 2 7 3]) -> [3 8 2 1 0 2 7 3]", "(concat [1] []) -> [1]", "(concat [0] [4 3 1 0]) -> [0 4 3 1 0]", "(concat [4 6 7 2] [5 0 2]) -> [4 6 7 2 5 0 2]", "(concat [3 3] [5]) -> [3 3 5]", "(concat [] [9 6 5 6 5]) -> [9 6 5 6 5]", "(concat [4 2 6 9 8] [8 5]) -> [4 2 6 9 8 8 5]", "(concat [1 3 9 4 0 8] [9 4 9 5 4]) -> [1 3 9 4 0 8 9 4 9 5 4]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.225061, "examples": ["(concat [0 3 8 3] [5 4]) -> [0 3 8 3 5 4]", "(concat [7 5 5 0 9 0] [5 4 6 0 8 9]) -> [7 5 5 0 9 0 5 4 6 0 8 9]", "(concat [0 6] []) -> [0 6]", "(concat [1 9 3 8 3] [4 9 9 4]) -> [1 9 3 8 3 4 9 9 4]", "(concat [] [2 2 5]) -> [2 2 5]", "(concat [] [7 4]) -> [7 4]", "(concat [6 5 6 0] [8 0 0 7]) -> [6 5 6 0 8 0 0 7]", "(concat [6 9 3] []) -> [6 9 3]", "(concat [5 9 9] [1 3 0 1]) -> [5 9 9 1 3 0 1]", "(concat [5 3 7] []) -> [5 3 7]", "(concat [4 5 0 9] [4 4]) -> [4 5 0 9 4 4]", "(concat [8] [1 4]) -> [8 1 4]", "(concat [3 8 1 3 0] [2 9 2 9 2]) -> [3 8 1 3 0 2 9 2 9 2]", "(concat [3 1 9 3] [0 5 6]) -> [3 1 9 3 0 5 6]", "(concat [2 1 5] [4 7 0 3 7]) -> [2 1 5 4 7 0 3 7]", "(concat [3] [9 4 1]) -> [3 9 4 1]", "(concat [3 3 2 6 9 5] [2 7]) -> [3 3 2 6 9 5 2 7]", "(concat [4 6 0] [8 8 1 6 7 3]) -> [4 6 0 8 8 1 6 7 3]", "(concat [] [7 9]) -> [7 9]", "(concat [3 6 2] [5 2]) -> [3 6 2 5 2]", "(concat [7 2 9] [2 5 4]) -> [7 2 9 2 5 4]", "(concat [0 0] [4 3 7 2 4 1]) -> [0 0 4 3 7 2 4 1]", "(concat [8 0 7 9 9 6] [0]) -> [8 0 7 9 9 6 0]", "(concat [5 9 5 0 8 8] [7]) -> [5 9 5 0 8 8 7]", "(concat [6 6 8 0 6 5] [3]) -> [6 6 8 0 6 5 3]", "(concat [1 9 9] [0 8 7 7 8 7]) -> [1 9 9 0 8 7 7 8 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.231136, "examples": ["(concat [8 6 3] [7 0 2 4 3]) -> [8 6 3 7 0 2 4 3]", "(concat [6] []) -> [6]", "(concat [5 7 1] [9 4 6 6 1]) -> [5 7 1 9 4 6 6 1]", "(concat [3 6 5 7] []) -> [3 6 5 7]", "(concat [2] [1 8 6 8]) -> [2 1 8 6 8]", "(concat [2 7 1 1] [0 0 7 9 5 0]) -> [2 7 1 1 0 0 7 9 5 0]", "(concat [0 3] []) -> [0 3]", "(concat [8 0 2 4 4 6] [2 6 8 1 6 7]) -> [8 0 2 4 4 6 2 6 8 1 6 7]", "(concat [] [0 0 3 0]) -> [0 0 3 0]", "(concat [] [1 3]) -> [1 3]", "(concat [] []) -> []", "(concat [4 0] [5 9 6 3 1]) -> [4 0 5 9 6 3 1]", "(concat [0 3 7] []) -> [0 3 7]", "(concat [6 5 2 3] [3 6]) -> [6 5 2 3 3 6]", "(concat [2 1 9 5 2 0] [8 1 2]) -> [2 1 9 5 2 0 8 1 2]", "(concat [8 4 7 0 5 0] [1]) -> [8 4 7 0 5 0 1]", "(concat [] [7 9]) -> [7 9]", "(concat [4 5 4 9] [6 1 3 3 7]) -> [4 5 4 9 6 1 3 3 7]", "(concat [2 6 0] [0 9]) -> [2 6 0 0 9]", "(concat [5 6] []) -> [5 6]", "(concat [7 5 2 0 2] [9 2]) -> [7 5 2 0 2 9 2]", "(concat [] []) -> []", "(concat [0] [3 7 2 0]) -> [0 3 7 2 0]", "(concat [3 5 6 6 1 7] []) -> [3 5 6 6 1 7]", "(concat [] [2]) -> [2]", "(concat [6 9] [7 2]) -> [6 9 7 2]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.212549, "examples": ["(concat [0] [8 2 0 8]) -> [0 8 2 0 8]", "(concat [] [0 3]) -> [0 3]", "(concat [9 6 7 9 6 1] [1 3 4 5]) -> [9 6 7 9 6 1 1 3 4 5]", "(concat [] [7 6 7]) -> [7 6 7]", "(concat [2 8 0 4 9] [0 1 7]) -> [2 8 0 4 9 0 1 7]", "(concat [7 0 9] []) -> [7 0 9]", "(concat [6 3 2 9] []) -> [6 3 2 9]", "(concat [] [7]) -> [7]", "(concat [] [7 2 9 1]) -> [7 2 9 1]", "(concat [5 4 4 7] [8 2 7 1 3 1]) -> [5 4 4 7 8 2 7 1 3 1]", "(concat [8 5] [4 0 2 6 5 0]) -> [8 5 4 0 2 6 5 0]", "(concat [6] [5]) -> [6 5]", "(concat [7] []) -> [7]", "(concat [2 1] [1 6 1]) -> [2 1 1 6 1]", "(concat [6 6 5] [1 8 7 4]) -> [6 6 5 1 8 7 4]", "(concat [5 7 6 6] [7]) -> [5 7 6 6 7]", "(concat [5] [9 9]) -> [5 9 9]", "(concat [4 9] [7 0 1 2]) -> [4 9 7 0 1 2]", "(concat [1] [1]) -> [1 1]", "(concat [4 9 3 4] [3 3 2 2 4 3]) -> [4 9 3 4 3 3 2 2 4 3]", "(concat [0 0] [5]) -> [0 0 5]", "(concat [6 0] [7 8 1]) -> [6 0 7 8 1]", "(concat [] [3 4 2 7 3 9]) -> [3 4 2 7 3 9]", "(concat [8 5 9 9 5 1] [1]) -> [8 5 9 9 5 1 1]", "(concat [] [0 7]) -> [0 7]", "(concat [3 6 4 3 8] [9 5 8 2 9]) -> [3 6 4 3 8 9 5 8 2 9]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.225222, "examples": ["(concat [7] [3 7]) -> [7 3 7]", "(concat [] [9 2 1 4 0]) -> [9 2 1 4 0]", "(concat [5 3 3] [4 5]) -> [5 3 3 4 5]", "(concat [3 4 6 5 8] [8 6 9 1]) -> [3 4 6 5 8 8 6 9 1]", "(concat [2 1] [1]) -> [2 1 1]", "(concat [2 7 9 1 8] [0 5 4 5 5]) -> [2 7 9 1 8 0 5 4 5 5]", "(concat [5 8 1 2 4] [3 6]) -> [5 8 1 2 4 3 6]", "(concat [9 9] []) -> [9 9]", "(concat [5] [2 7 4]) -> [5 2 7 4]", "(concat [] [2 8]) -> [2 8]", "(concat [0 0 0 2 8 7] [3 0 4]) -> [0 0 0 2 8 7 3 0 4]", "(concat [0 9 6] [9 9 8]) -> [0 9 6 9 9 8]", "(concat [0 9 2 5 4 4] [5 6 9 5 4 3]) -> [0 9 2 5 4 4 5 6 9 5 4 3]", "(concat [3 3 6 7 7 3] [0 6 3 0 2 6]) -> [3 3 6 7 7 3 0 6 3 0 2 6]", "(concat [3 5 9 4] [3 7 2]) -> [3 5 9 4 3 7 2]", "(concat [7] [7 7 2 0]) -> [7 7 7 2 0]", "(concat [7 1 0 1 9 7] [0]) -> [7 1 0 1 9 7 0]", "(concat [5] [2 6]) -> [5 2 6]", "(concat [1 9 1 6 0 4] [8 1 1 0 4 1]) -> [1 9 1 6 0 4 8 1 1 0 4 1]", "(concat [0] [9 4 7 0 4 7]) -> [0 9 4 7 0 4 7]", "(concat [2] [8]) -> [2 8]", "(concat [5 3 1 4] [0 1]) -> [5 3 1 4 0 1]", "(concat [] [0 9]) -> [0 9]", "(concat [4 5 6] [0 6 7 3 0 4]) -> [4 5 6 0 6 7 3 0 4]", "(concat [3 5] []) -> [3 5]", "(concat [4] [3 8 1 2 3 9]) -> [4 3 8 1 2 3 9]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.212019, "examples": ["(concat [4 2 6 0] [3 7 0 1 2]) -> [4 2 6 0 3 7 0 1 2]", "(concat [2 3 8 7] [5 7 9 3 7]) -> [2 3 8 7 5 7 9 3 7]", "(concat [0] []) -> [0]", "(concat [0 0 1 7 5] [9]) -> [0 0 1 7 5 9]", "(concat [] [5 4]) -> [5 4]", "(concat [3 7 0 4] [3 1 5 3 8 9]) -> [3 7 0 4 3 1 5 3 8 9]", "(concat [7 0 0 1] [9 7 3 9 5]) -> [7 0 0 1 9 7 3 9 5]", "(concat [2 5] [4]) -> [2 5 4]", "(concat [] [3 8 1 5 3 0]) -> [3 8 1 5 3 0]", "(concat [9 3 0 5] [2 7 1 1]) -> [9 3 0 5 2 7 1 1]", "(concat [8] [3 5 3]) -> [8 3 5 3]", "(concat [1 1 3 4 2 5] []) -> [1 1 3 4 2 5]", "(concat [] [3 0 9 3 0 3]) -> [3 0 9 3 0 3]", "(concat [9] [3 3 5 4]) -> [9 3 3 5 4]", "(concat [4 6 1] [0 8 1 1 1]) -> [4 6 1 0 8 1 1 1]", "(concat [1 4 3 4 3] [9 1 3 3 8]) -> [1 4 3 4 3 9 1 3 3 8]", "(concat [9 2 6 4 2 5] [3 0]) -> [9 2 6 4 2 5 3 0]", "(concat [2] []) -> [2]", "(concat [8] [4]) -> [8 4]", "(concat [] [3 6 7]) -> [3 6 7]", "(concat [8 5] [9 5 9]) -> [8 5 9 5 9]", "(concat [4 6 2 0 8] [3 3 6]) -> [4 6 2 0 8 3 3 6]", "(concat [5 2 8 3] [5 2 3 1]) -> [5 2 8 3 5 2 3 1]", "(concat [3 3 9 0 2 6] [7 3]) -> [3 3 9 0 2 6 7 3]", "(concat [] [3 3 9]) -> [3 3 9]", "(concat [2 6 2 1 8] [4 3 6 0 3]) -> [2 6 2 1 8 4 3 6 0 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.245227, "examples": ["(concat [7 0 2 6 5 6] [3 0 2 3 4 2]) -> [7 0 2 6 5 6 3 0 2 3 4 2]", "(concat [3] [6]) -> [3 6]", "(concat [7 6 1 5 9 5] [5 8]) -> [7 6 1 5 9 5 5 8]", "(concat [9 5 8 6 6 4] [2 5 9 5 0 9]) -> [9 5 8 6 6 4 2 5 9 5 0 9]", "(concat [9 3] [9]) -> [9 3 9]", "(concat [8] [1]) -> [8 1]", "(concat [1 9 9 4] [8 3]) -> [1 9 9 4 8 3]", "(concat [7 9 9 6] [8]) -> [7 9 9 6 8]", "(concat [7 9 2 9 4] []) -> [7 9 2 9 4]", "(concat [] []) -> []", "(concat [7 5 6 9 0] [5 7 1 6]) -> [7 5 6 9 0 5 7 1 6]", "(concat [7 8 2 7 1] [6 5 8 4]) -> [7 8 2 7 1 6 5 8 4]", "(concat [3 4 5] [0 4 5]) -> [3 4 5 0 4 5]", "(concat [5 8 4 9 7 9] [6 1 8 1 5 7]) -> [5 8 4 9 7 9 6 1 8 1 5 7]", "(concat [4 5 8] []) -> [4 5 8]", "(concat [] [5 2 5 2 0 4]) -> [5 2 5 2 0 4]", "(concat [4 6 0 3] [4 4 2 5 6 0]) -> [4 6 0 3 4 4 2 5 6 0]", "(concat [1 5] [1 3 2 0 7]) -> [1 5 1 3 2 0 7]", "(concat [3 9 4 3] [0]) -> [3 9 4 3 0]", "(concat [9 1 7 8 8] [0]) -> [9 1 7 8 8 0]", "(concat [] [7]) -> [7]", "(concat [] [0 5 5 3]) -> [0 5 5 3]", "(concat [1 4 5 8 3 5] [4 0 4 2 0]) -> [1 4 5 8 3 5 4 0 4 2 0]", "(concat [9 0 3 2 1 2] [6 1 9 2]) -> [9 0 3 2 1 2 6 1 9 2]", "(concat [1 1 0 7] [0 2]) -> [1 1 0 7 0 2]", "(concat [7] []) -> [7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.253166, "examples": ["(concat [0 0 0 6 4] [0 3 6 1]) -> [0 0 0 6 4 0 3 6 1]", "(concat [2] [6 4 5 3 0 9]) -> [2 6 4 5 3 0 9]", "(concat [8 1] []) -> [8 1]", "(concat [7 6 0 2] []) -> [7 6 0 2]", "(concat [1 4 2] [7 3]) -> [1 4 2 7 3]", "(concat [9 3 5] [7 7 4]) -> [9 3 5 7 7 4]", "(concat [] [5 6 6 0 4 6]) -> [5 6 6 0 4 6]", "(concat [] [0 8 9 3]) -> [0 8 9 3]", "(concat [5 9 6 8 6 5] [0]) -> [5 9 6 8 6 5 0]", "(concat [] [3 5]) -> [3 5]", "(concat [1 7 9] [4 2 3]) -> [1 7 9 4 2 3]", "(concat [7 9 5 8 1] [3 3 9 8 4]) -> [7 9 5 8 1 3 3 9 8 4]", "(concat [] []) -> []", "(concat [8 9 0] []) -> [8 9 0]", "(concat [6 2 2] []) -> [6 2 2]", "(concat [6 6] [9 7]) -> [6 6 9 7]", "(concat [9 2 4 6 9] [4 6]) -> [9 2 4 6 9 4 6]", "(concat [1 7 7 6] [0]) -> [1 7 7 6 0]", "(concat [9 8] [2 4 8 3]) -> [9 8 2 4 8 3]", "(concat [5 4 0 1 6 7] [7 8 9 0]) -> [5 4 0 1 6 7 7 8 9 0]", "(concat [8 8 7 0 7] [6 2 0 7]) -> [8 8 7 0 7 6 2 0 7]", "(concat [4 7 0] [1 2 1]) -> [4 7 0 1 2 1]", "(concat [9] [0]) -> [9 0]", "(concat [6 9] []) -> [6 9]", "(concat [3 4 1 5 2 4] [8 5 2 4]) -> [3 4 1 5 2 4 8 5 2 4]", "(concat [4 5 7 0] []) -> [4 5 7 0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.241846, "examples": ["(concat [3 2] [3 6 7]) -> [3 2 3 6 7]", "(concat [] [4 3 4 5 6]) -> [4 3 4 5 6]", "(concat [9 7 3 0 7] [5 2 6 3 6]) -> [9 7 3 0 7 5 2 6 3 6]", "(concat [] [6 9 8]) -> [6 9 8]", "(concat [2 5 2] []) -> [2 5 2]", "(concat [5 6 8 6] [9]) -> [5 6 8 6 9]", "(concat [2 7 2 8 1] [0 4]) -> [2 7 2 8 1 0 4]", "(concat [4 6] []) -> [4 6]", "(concat [0 8 8 7] [0 2 9 1 1]) -> [0 8 8 7 0 2 9 1 1]", "(concat [6 3] [8 4 2 6]) -> [6 3 8 4 2 6]", "(concat [3] [5 9]) -> [3 5 9]", "(concat [4] [5 4 4 9]) -> [4 5 4 4 9]", "(concat [0] [0 2 7 8 4 7]) -> [0 0 2 7 8 4 7]", "(concat [9] [9 6]) -> [9 9 6]", "(concat [6 4] [5 7 1 0 6]) -> [6 4 5 7 1 0 6]", "(concat [2 5 2] [0 7 6 0 7 2]) -> [2 5 2 0 7 6 0 7 2]", "(concat [1 5 8 6 1] [1]) -> [1 5 8 6 1 1]", "(concat [7 1 9 8 0] [8 3 7]) -> [7 1 9 8 0 8 3 7]", "(concat [4 4 9 7 6] []) -> [4 4 9 7 6]", "(concat [] []) -> []", "(concat [4 0 2 9 9] [6 7 0 1]) -> [4 0 2 9 9 6 7 0 1]", "(concat [9 0 6 2 7] [9 9 2 1 6 9]) -> [9 0 6 2 7 9 9 2 1 6 9]", "(concat [] [7 2 8]) -> [7 2 8]", "(concat [4 2] [9 8]) -> [4 2 9 8]", "(concat [7 7] [5 9]) -> [7 7 5 9]", "(concat [7 9 1 3 1 8] [9 6 2 9 5]) -> [7 9 1 3 1 8 9 6 2 9 5]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.177071, "examples": ["(concat [2 2 8] [4 9 2 0 1 1]) -> [2 2 8 4 9 2 0 1 1]", "(concat [6 7 7 2] [2]) -> [6 7 7 2 2]", "(concat [] []) -> []", "(concat [5 5 3 1] [8 5 5 8]) -> [5 5 3 1 8 5 5 8]", "(concat [3 4] [6 2 7 4 4 7]) -> [3 4 6 2 7 4 4 7]", "(concat [9] [2 4 9]) -> [9 2 4 9]", "(concat [4 7 3 1 7 8] [5 5 3]) -> [4 7 3 1 7 8 5 5 3]", "(concat [] [7]) -> [7]", "(concat [1 4] [6 7 7]) -> [1 4 6 7 7]", "(concat [4 2 8 3 7] [8 8 4 7 8 0]) -> [4 2 8 3 7 8 8 4 7 8 0]", "(concat [] [3 5 6 8 7]) -> [3 5 6 8 7]", "(concat [2 1] [8]) -> [2 1 8]", "(concat [5 3 9 8] [4 3 6 4 8 3]) -> [5 3 9 8 4 3 6 4 8 3]", "(concat [1 3 4 5] []) -> [1 3 4 5]", "(concat [0 5] [2]) -> [0 5 2]", "(concat [] [4 3 8 2 1 4]) -> [4 3 8 2 1 4]", "(concat [1 6 3] []) -> [1 6 3]", "(concat [5 3 7 8 4] [3 8 4 3]) -> [5 3 7 8 4 3 8 4 3]", "(concat [6] [2 7]) -> [6 2 7]", "(concat [2 2 9] [5 3]) -> [2 2 9 5 3]", "(concat [0] [2]) -> [0 2]", "(concat [3 9 2] [5]) -> [3 9 2 5]", "(concat [] [7]) -> [7]", "(concat [] [4 7 9 0]) -> [4 7 9 0]", "(concat [3 5] [2 9 1 3]) -> [3 5 2 9 1 3]", "(concat [] [6 1]) -> [6 1]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.229111, "examples": ["(concat [3 4 6] [5 1 9 8]) -> [3 4 6 5 1 9 8]", "(concat [5 2 7 0 0 2] []) -> [5 2 7 0 0 2]", "(concat [5 0] [3 0 8 1 9 7]) -> [5 0 3 0 8 1 9 7]", "(concat [] [1]) -> [1]", "(concat [2 8 6 0] [6 7 4 5 0 0]) -> [2 8 6 0 6 7 4 5 0 0]", "(concat [] []) -> []", "(concat [] []) -> []", "(concat [1 6] [8 7]) -> [1 6 8 7]", "(concat [7] [1 0 1 6]) -> [7 1 0 1 6]", "(concat [3 2 6 2 8] [3]) -> [3 2 6 2 8 3]", "(concat [6 3 6 7 8] [0 7 0 3 2]) -> [6 3 6 7 8 0 7 0 3 2]", "(concat [1] [3 0 9 3]) -> [1 3 0 9 3]", "(concat [0 4 1 4] [5 6 6 9 8]) -> [0 4 1 4 5 6 6 9 8]", "(concat [] [9 0 2 4]) -> [9 0 2 4]", "(concat [1 5] [3]) -> [1 5 3]", "(concat [5 4 0] [7 4 4]) -> [5 4 0 7 4 4]", "(concat [6] [3 7]) -> [6 3 7]", "(concat [2 0] []) -> [2 0]", "(concat [1 2 6 6 3] [7 0 3 9 6]) -> [1 2 6 6 3 7 0 3 9 6]", "(concat [3 9 3 9 4 5] [9 7 4]) -> [3 9 3 9 4 5 9 7 4]", "(concat [1 7 7] [8 4 4 7 8]) -> [1 7 7 8 4 4 7 8]", "(concat [2] [1 9]) -> [2 1 9]", "(concat [9 5 6 2 7 8] [2 5 3 8 2]) -> [9 5 6 2 7 8 2 5 3 8 2]", "(concat [4 8] [0 7 8 8 4]) -> [4 8 0 7 8 8 4]", "(concat [9 7 2 1 3] [3 6]) -> [9 7 2 1 3 3 6]", "(concat [6 5 0] [5]) -> [6 5 0 5]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.210152, "examples": ["(concat [5 8 5] [8 6]) -> [5 8 5 8 6]", "(concat [5 0 2 5 8] [4 8 2]) -> [5 0 2 5 8 4 8 2]", "(concat [1] [4 1 8]) -> [1 4 1 8]", "(concat [] [1 9 4]) -> [1 9 4]", "(concat [1 2] [1 0 6 1 2 9]) -> [1 2 1 0 6 1 2 9]", "(concat [4 6 2 8 2] [1]) -> [4 6 2 8 2 1]", "(concat [] [0 8 9 5 2]) -> [0 8 9 5 2]", "(concat [2 5 0 8] [8 7 7 7 5]) -> [2 5 0 8 8 7 7 7 5]", "(concat [7] [7 8 9 3]) -> [7 7 8 9 3]", "(concat [] [1 7 8 4]) -> [1 7 8 4]", "(concat [9 4 1 8 3 9] []) -> [9 4 1 8 3 9]", "(concat [4 3 5 4 0 3] [0 6 9 8 7]) -> [4 3 5 4 0 3 0 6 9 8 7]", "(concat [3 2 3 9] [3 4 1 6 7 9]) -> [3 2 3 9 3 4 1 6 7 9]", "(concat [8 3 6 0 1 6] [2 5]) -> [8 3 6 0 1 6 2 5]", "(concat [0 6 3 0 4] [2 9 4 7]) -> [0 6 3 0 4 2 9 4 7]", "(concat [1] [7 4 5 4 1 9]) -> [1 7 4 5 4 1 9]", "(concat [9 5] [3 8 9]) -> [9 5 3 8 9]", "(concat [5 2 5] []) -> [5 2 5]", "(concat [] [7 8]) -> [7 8]", "(concat [8 6 8 0 3] []) -> [8 6 8 0 3]", "(concat [] []) -> []", "(concat [2] [9 9 8 1]) -> [2 9 9 8 1]", "(concat [5 6 9] [9 9 5 0]) -> [5 6 9 9 9 5 0]", "(concat [1] [1 4 3 7 1 6]) -> [1 1 4 3 7 1 6]", "(concat [6 8 8 2 2 5] [4 3 1]) -> [6 8 8 2 2 5 4 3 1]", "(concat [] [5 9 6 9 8 3]) -> [5 9 6 9 8 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.190282, "examples": ["(concat [] []) -> []", "(concat [] [3 2]) -> [3 2]", "(concat [5 1 3 9 8 9] [9]) -> [5 1 3 9 8 9 9]", "(concat [3 0 1 6] [4 8]) -> [3 0 1 6 4 8]", "(concat [0 6 3] []) -> [0 6 3]", "(concat [9 5 7 4 2 1] [9 8 7 2]) -> [9 5 7 4 2 1 9 8 7 2]", "(concat [2 3 5 8 5 1] [1]) -> [2 3 5 8 5 1 1]", "(concat [7 3 4 8] [4 0 8 3]) -> [7 3 4 8 4 0 8 3]", "(concat [9] [1 0 5]) -> [9 1 0 5]", "(concat [1 5 1 3 8 5] [7 2 5 9]) -> [1 5 1 3 8 5 7 2 5 9]", "(concat [0] [8 2 7 3]) -> [0 8 2 7 3]", "(concat [9 7 7] [4 0 4 1 7]) -> [9 7 7 4 0 4 1 7]", "(concat [0 0 0] [7 0 5 8 4 4]) -> [0 0 0 7 0 5 8 4 4]", "(concat [] [2 4]) -> [2 4]", "(concat [7 9] []) -> [7 9]", "(concat [1 0] [1]) -> [1 0 1]", "(concat [2 6] [9 0]) -> [2 6 9 0]", "(concat [9 5 5] [6 4 8 3]) -> [9 5 5 6 4 8 3]", "(concat [5 4 6 0 8 9] [7 1 7]) -> [5 4 6 0 8 9 7 1 7]", "(concat [] [2 2 7 6 5 8]) -> [2 2 7 6 5 8]", "(concat [4 6 9] [1 7 2]) -> [4 6 9 1 7 2]", "(concat [6 3 5 5] [9]) -> [6 3 5 5 9]", "(concat [9 3] [2 6]) -> [9 3 2 6]", "(concat [0] [3]) -> [0 3]", "(concat [9 5 3 9 9 1] [6 9]) -> [9 5 3 9 9 1 6 9]", "(concat [7 1 0 5 5 9] [3]) -> [7 1 0 5 5 9 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.237413, "examples": ["(concat [1] [7]) -> [1 7]", "(concat [] [0 5 1 6 5 1]) -> [0 5 1 6 5 1]", "(concat [5 9 6 4] [7 4 0 0 9 8]) -> [5 9 6 4 7 4 0 0 9 8]", "(concat [6] [5 1 5 6 8 4]) -> [6 5 1 5 6 8 4]", "(concat [3 1 4 2] [5]) -> [3 1 4 2 5]", "(concat [3 2 5 7] [5 2 7 0]) -> [3 2 5 7 5 2 7 0]", "(concat [] [1 8 7 5]) -> [1 8 7 5]", "(concat [2 6 7] [0]) -> [2 6 7 0]", "(concat [2 8 2 9 6 9] [0 6 0]) -> [2 8 2 9 6 9 0 6 0]", "(concat [] [2 1 6 8]) -> [2 1 6 8]", "(concat [] [7 9 4 5 6 7]) -> [7 9 4 5 6 7]", "(concat [0 1 2] [0]) -> [0 1 2 0]", "(concat [1 0 4 6 5 9] [0 9 7 4]) -> [1 0 4 6 5 9 0 9 7 4]", "(concat [9 8 1 8] [5 2 0]) -> [9 8 1 8 5 2 0]", "(concat [7 3 4 3] [1 5 9 1 8 9]) -> [7 3 4 3 1 5 9 1 8 9]", "(concat [1 9 5 7 0] [1 5 0 7]) -> [1 9 5 7 0 1 5 0 7]", "(concat [0 2 4 4] [5 0 7]) -> [0 2 4 4 5 0 7]", "(concat [0 3 9 1 8 1] [5]) -> [0 3 9 1 8 1 5]", "(concat [8 5 1] [3]) -> [8 5 1 3]", "(concat [9] [8 9 9]) -> [9 8 9 9]", "(concat [3 4 1 3 4] [2 2 7]) -> [3 4 1 3 4 2 2 7]", "(concat [9 4 0] [2 3]) -> [9 4 0 2 3]", "(concat [8 9 2 3 0 7] [3 9 9 4]) -> [8 9 2 3 0 7 3 9 9 4]", "(concat [2 5 7 6] [2]) -> [2 5 7 6 2]", "(concat [9 1 4 5 7] [0]) -> [9 1 4 5 7 0]", "(concat [1 1 7 3 9 1] [1 5 1 8]) -> [1 1 7 3 9 1 1 5 1 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.223113, "examples": ["(concat [7 1 5 2 5 8] [1 1 2 9 6 6]) -> [7 1 5 2 5 8 1 1 2 9 6 6]", "(concat [3 7 0 4] [9]) -> [3 7 0 4 9]", "(concat [5 0 1 2] [1 4 2]) -> [5 0 1 2 1 4 2]", "(concat [2] [1 6 7 8 7 9]) -> [2 1 6 7 8 7 9]", "(concat [2 4 9 6] [3]) -> [2 4 9 6 3]", "(concat [9] [0 4 1 7 3]) -> [9 0 4 1 7 3]", "(concat [3 2] [5 3]) -> [3 2 5 3]", "(concat [] [6 3 6 9]) -> [6 3 6 9]", "(concat [8 5] [8 7 8 7 6]) -> [8 5 8 7 8 7 6]", "(concat [] [4]) -> [4]", "(concat [9 7] [3 5 3 0 7]) -> [9 7 3 5 3 0 7]", "(concat [] []) -> []", "(concat [0] [0 2 0 2 3]) -> [0 0 2 0 2 3]", "(concat [1 4 1 8 9] [0 5 2]) -> [1 4 1 8 9 0 5 2]", "(concat [8] [3 4 4 2 3]) -> [8 3 4 4 2 3]", "(concat [1 9 6 2 6] [8 5 2 8 3 7]) -> [1 9 6 2 6 8 5 2 8 3 7]", "(concat [6 9 0 9 0] []) -> [6 9 0 9 0]", "(concat [] [0]) -> [0]", "(concat [2 5 6 5] []) -> [2 5 6 5]", "(concat [3] [8 3 6 1]) -> [3 8 3 6 1]", "(concat [9 9 2 6 3 4] [5 7 8 3]) -> [9 9 2 6 3 4 5 7 8 3]", "(concat [6] [4 0 6 0 0]) -> [6 4 0 6 0 0]", "(concat [] [0 0 6 6 9 1]) -> [0 0 6 6 9 1]", "(concat [] [3 6 7 9 7 1]) -> [3 6 7 9 7 1]", "(concat [4 4] [7 0 2 7]) -> [4 4 7 0 2 7]", "(concat [1] [8]) -> [1 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.216203, "examples": ["(concat [9 6 4 9] [4 5]) -> [9 6 4 9 4 5]", "(concat [9 7 5] []) -> [9 7 5]", "(concat [0 5 0 2 4] [1 1]) -> [0 5 0 2 4 1 1]", "(concat [8 4 6 2 9] [2 1]) -> [8 4 6 2 9 2 1]", "(concat [7 3 9 9 2 0] [4 2 3]) -> [7 3 9 9 2 0 4 2 3]", "(concat [6 6] [9 6 9]) -> [6 6 9 6 9]", "(concat [5 9 6 7 4] [2 8 9 4 0]) -> [5 9 6 7 4 2 8 9 4 0]", "(concat [1 3 0] [3 1 6 0]) -> [1 3 0 3 1 6 0]", "(concat [1 9] [7 1]) -> [1 9 7 1]", "(concat [0 8 7 6 7 5] [6 8 2]) -> [0 8 7 6 7 5 6 8 2]", "(concat [5] [1]) -> [5 1]", "(concat [6 7 7] [2 8 5 5 7 2]) -> [6 7 7 2 8 5 5 7 2]", "(concat [0 4] [9 6]) -> [0 4 9 6]", "(concat [3 0 1 2] [7]) -> [3 0 1 2 7]", "(concat [5 3 9] [4 8 9]) -> [5 3 9 4 8 9]", "(concat [7] [8 7 0 6]) -> [7 8 7 0 6]", "(concat [1 1 2] [0 8 6]) -> [1 1 2 0 8 6]", "(concat [1 1 7] [0 5 8 4 4 3]) -> [1 1 7 0 5 8 4 4 3]", "(concat [] [1]) -> [1]", "(concat [1 4 3 8 2] []) -> [1 4 3 8 2]", "(concat [5 0 5 6 8] [3 9]) -> [5 0 5 6 8 3 9]", "(concat [4 4 5 0 4] [0 5 6]) -> [4 4 5 0 4 0 5 6]", "(concat [] [3 1 2]) -> [3 1 2]", "(concat [] [3 1 7 6]) -> [3 1 7 6]", "(concat [] [4 5 3 3]) -> [4 5 3 3]", "(concat [1 0 3 1] [4 0 1 3]) -> [1 0 3 1 4 0 1 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.221006, "examples": ["(concat [1 2 7 1 2 4] [5]) -> [1 2 7 1 2 4 5]", "(concat [5 3 0 5] []) -> [5 3 0 5]", "(concat [0 8 4 3] [7]) -> [0 8 4 3 7]", "(concat [7] [8 7 1 4 7]) -> [7 8 7 1 4 7]", "(concat [0 7] [2]) -> [0 7 2]", "(concat [2 7 8 3 5] []) -> [2 7 8 3 5]", "(concat [1 6 1 3 2] []) -> [1 6 1 3 2]", "(concat [8] [9 1 0 1]) -> [8 9 1 0 1]", "(concat [6 6 9 3 5] []) -> [6 6 9 3 5]", "(concat [7] [2 3 2 8 0]) -> [7 2 3 2 8 0]", "(concat [] [6 3]) -> [6 3]", "(concat [5 2] [6 4 1 6]) -> [5 2 6 4 1 6]", "(concat [] [7 5 6]) -> [7 5 6]", "(concat [] [4]) -> [4]", "(concat [0] [0 9 0 7]) -> [0 0 9 0 7]", "(concat [8 5 9 2 7] []) -> [8 5 9 2 7]", "(concat [4 2] [4 3 8]) -> [4 2 4 3 8]", "(concat [9] [4 0 1 0 0 0]) -> [9 4 0 1 0 0 0]", "(concat [5 9 5 8 5 5] [1 6 9 0 1]) -> [5 9 5 8 5 5 1 6 9 0 1]", "(concat [] []) -> []", "(concat [5 3 3 9] [6 8 6 9 3]) -> [5 3 3 9 6 8 6 9 3]", "(concat [1 8 1] [2 1 6 7 2 8]) -> [1 8 1 2 1 6 7 2 8]", "(concat [9 2 2 1 3] [1 6 0 2 2 7]) -> [9 2 2 1 3 1 6 0 2 2 7]", "(concat [0 9] [2 9 7 3 4]) -> [0 9 2 9 7 3 4]", "(concat [5 5] []) -> [5 5]", "(concat [0 4 4 1 0] [4 9 7 5 7 3]) -> [0 4 4 1 0 4 9 7 5 7 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.259915, "examples": ["(concat [] [9 9 3 2]) -> [9 9 3 2]", "(concat [9 0 5 8] [1]) -> [9 0 5 8 1]", "(concat [3 8 0 4] [0]) -> [3 8 0 4 0]", "(concat [8 6 0 0] [4 7]) -> [8 6 0 0 4 7]", "(concat [1 3 1] [0 8 9 7 8]) -> [1 3 1 0 8 9 7 8]", "(concat [7 8 0 7 1] [9 5 6 6]) -> [7 8 0 7 1 9 5 6 6]", "(concat [1 4 5] [7 9 0 9 6]) -> [1 4 5 7 9 0 9 6]", "(concat [] [4 8]) -> [4 8]", "(concat [8 2 2 9 5 2] [8 8 4 8 5]) -> [8 2 2 9 5 2 8 8 4 8 5]", "(concat [1] [8 0]) -> [1 8 0]", "(concat [7] [6 7 4 9]) -> [7 6 7 4 9]", "(concat [4] [6]) -> [4 6]", "(concat [5 3 7 7] [4 2]) -> [5 3 7 7 4 2]", "(concat [2 9 5] [8 3 9 2 1 1]) -> [2 9 5 8 3 9 2 1 1]", "(concat [7 7 0] [9 9 5 9 7]) -> [7 7 0 9 9 5 9 7]", "(concat [0 0 4 8 3 3] [9 9]) -> [0 0 4 8 3 3 9 9]", "(concat [7 3 1] []) -> [7 3 1]", "(concat [1 2 5 6] [2]) -> [1 2 5 6 2]", "(concat [6] [3 7 7 7 3 2]) -> [6 3 7 7 7 3 2]", "(concat [2 4] []) -> [2 4]", "(concat [5 9 5 6 2 9] [1 7 8 6 7]) -> [5 9 5 6 2 9 1 7 8 6 7]", "(concat [9 4] [4 8 1]) -> [9 4 4 8 1]", "(concat [6 3] [8 4 3 2]) -> [6 3 8 4 3 2]", "(concat [3] [4]) -> [3 4]", "(concat [8] []) -> [8]", "(concat [0 5 6 2 2] [7]) -> [0 5 6 2 2 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.235197, "examples": ["(concat [9 8] [7 3 8 5 9]) -> [9 8 7 3 8 5 9]", "(concat [] [7]) -> [7]", "(concat [4 7 4 2] [4 6 0 7 5]) -> [4 7 4 2 4 6 0 7 5]", "(concat [0 4 7] [7 3 2 2 6]) -> [0 4 7 7 3 2 2 6]", "(concat [0 0 4] []) -> [0 0 4]", "(concat [5 0 9] [6 8 2]) -> [5 0 9 6 8 2]", "(concat [] [4 4 4 2 5]) -> [4 4 4 2 5]", "(concat [2 9] [6 4]) -> [2 9 6 4]", "(concat [6 0 4 4 2 2] [0 5 2 5 0 3]) -> [6 0 4 4 2 2 0 5 2 5 0 3]", "(concat [2] [9 4 3 8 6]) -> [2 9 4 3 8 6]", "(concat [7 0 3 1 8] [7 3]) -> [7 0 3 1 8 7 3]", "(concat [0 0 8] [3 7 0 5]) -> [0 0 8 3 7 0 5]", "(concat [4 6 1 8] [9 9 4 0]) -> [4 6 1 8 9 9 4 0]", "(concat [0 9] [3 3 1 7 5 4]) -> [0 9 3 3 1 7 5 4]", "(concat [4 4 9 9 5] [6 1 4]) -> [4 4 9 9 5 6 1 4]", "(concat [9] [0 3 7 4 8]) -> [9 0 3 7 4 8]", "(concat [1 8 7] [0 2 6 7]) -> [1 8 7 0 2 6 7]", "(concat [9 7 3 4 2 2] [2]) -> [9 7 3 4 2 2 2]", "(concat [4] [8]) -> [4 8]", "(concat [0 3 5] [8 9 8 2]) -> [0 3 5 8 9 8 2]", "(concat [2 7 3] [7 9 2 2 7 1]) -> [2 7 3 7 9 2 2 7 1]", "(concat [3] [6 0 5]) -> [3 6 0 5]", "(concat [2 4 7 1] [9 7 9 5 4 2]) -> [2 4 7 1 9 7 9 5 4 2]", "(concat [] [8 3 9 5 0]) -> [8 3 9 5 0]", "(concat [1 3 0 8 7 4] [3 1 7]) -> [1 3 0 8 7 4 3 1 7]", "(concat [3 4 4] [3]) -> [3 4 4 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.188543, "examples": ["(concat [5 8 4 3 5 0] []) -> [5 8 4 3 5 0]", "(concat [3 5 8 3 6 4] [9 6 6]) -> [3 5 8 3 6 4 9 6 6]", "(concat [7 8 7 7] [8]) -> [7 8 7 7 8]", "(concat [3 4 8] [3]) -> [3 4 8 3]", "(concat [0 9 7] []) -> [0 9 7]", "(concat [] [7]) -> [7]", "(concat [2 9 1 5 9] [6 5]) -> [2 9 1 5 9 6 5]", "(concat [5 2 3 3 2 0] [6 2 1 6 0 7]) -> [5 2 3 3 2 0 6 2 1 6 0 7]", "(concat [9 8 1 5 6 2] [3 2 5 4]) -> [9 8 1 5 6 2 3 2 5 4]", "(concat [] [0]) -> [0]", "(concat [4] [7]) -> [4 7]", "(concat [2 4] [5 3 1]) -> [2 4 5 3 1]", "(concat [] []) -> []", "(concat [8 6 0 0 4] [1 6 7 1 9]) -> [8 6 0 0 4 1 6 7 1 9]", "(concat [4 8 0 7] [4 2 5 1 1 7]) -> [4 8 0 7 4 2 5 1 1 7]", "(concat [4 7 6 1 6 9] []) -> [4 7 6 1 6 9]", "(concat [0 9] [4 1 1]) -> [0 9 4 1 1]", "(concat [3] [1 9]) -> [3 1 9]", "(concat [4 8 1 2] [7]) -> [4 8 1 2 7]", "(concat [6 6 7 3] [5 6 6 5 7 0]) -> [6 6 7 3 5 6 6 5 7 0]", "(concat [9 5 3 7 7 1] []) -> [9 5 3 7 7 1]", "(concat [0 4 9 9 9] [2 1 9]) -> [0 4 9 9 9 2 1 9]", "(concat [8 7 0 1 4] []) -> [8 7 0 1 4]", "(concat [3 5 0 6 5] [8 2]) -> [3 5 0 6 5 8 2]", "(concat [0 5 1] [2 7 9 9 2 7]) -> [0 5 1 2 7 9 9 2 7]", "(concat [] [9 6 9]) -> [9 6 9]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.182909, "examples": ["(concat [4] []) -> [4]", "(concat [5 5 7 2 1 9] []) -> [5 5 7 2 1 9]", "(concat [8 9 3 4 2 2] [4 8 3 0 6]) -> [8 9 3 4 2 2 4 8 3 0 6]", "(concat [] [7 2]) -> [7 2]", "(concat [3 1 6] []) -> [3 1 6]", "(concat [3 0] []) -> [3 0]", "(concat [4] [6 2 2]) -> [4 6 2 2]", "(concat [6 9 2] []) -> [6 9 2]", "(concat [3 4 8 1 1] [9 0 6 0]) -> [3 4 8 1 1 9 0 6 0]", "(concat [0 7] [7 5 8 9]) -> [0 7 7 5 8 9]", "(concat [6 7 7] [7 3 3 1 8]) -> [6 7 7 7 3 3 1 8]", "(concat [4 5 0 3] [1 6 2]) -> [4 5 0 3 1 6 2]", "(concat [1 3 5 2 5] [0 5 3 8 0]) -> [1 3 5 2 5 0 5 3 8 0]", "(concat [2 0 3] []) -> [2 0 3]", "(concat [4 1 6 2] [6]) -> [4 1 6 2 6]", "(concat [5 2 3 2 0 8] [3 6 1]) -> [5 2 3 2 0 8 3 6 1]", "(concat [8 6 8 8 5] [2 5 8 6]) -> [8 6 8 8 5 2 5 8 6]", "(concat [2 9] [8 2 8 7]) -> [2 9 8 2 8 7]", "(concat [9 6] [4 5 3 4]) -> [9 6 4 5 3 4]", "(concat [] [2 4 1 6 1]) -> [2 4 1 6 1]", "(concat [4 9 1 7 9 2] [6 5 5]) -> [4 9 1 7 9 2 6 5 5]", "(concat [1 1 2 0] [1 8 4 8 3]) -> [1 1 2 0 1 8 4 8 3]", "(concat [1 8 3 3 5 4] [4]) -> [1 8 3 3 5 4 4]", "(concat [1 6] [0]) -> [1 6 0]", "(concat [] [8 0 1 2]) -> [8 0 1 2]", "(concat [8 8] [4 1]) -> [8 8 4 1]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.192966, "examples": ["(concat [2] [3]) -> [2 3]", "(concat [4] [1 1 8]) -> [4 1 1 8]", "(concat [] [5 3]) -> [5 3]", "(concat [2 0 1 4] []) -> [2 0 1 4]", "(concat [7] []) -> [7]", "(concat [8 7 3 4 4 2] [0 7 9 4 1]) -> [8 7 3 4 4 2 0 7 9 4 1]", "(concat [1 5 8 5 1 2] []) -> [1 5 8 5 1 2]", "(concat [6] [2]) -> [6 2]", "(concat [7] [7 9 1 7 6 5]) -> [7 7 9 1 7 6 5]", "(concat [6 0] [5 2 2 1 6]) -> [6 0 5 2 2 1 6]", "(concat [5 5 8 6 9 4] [5 7 6]) -> [5 5 8 6 9 4 5 7 6]", "(concat [2 0 7 0] []) -> [2 0 7 0]", "(concat [1 3 9 6 7] [1]) -> [1 3 9 6 7 1]", "(concat [4 7 9 6 7 8] [4 2 4]) -> [4 7 9 6 7 8 4 2 4]", "(concat [5 6] [5]) -> [5 6 5]", "(concat [9 7 2] [0]) -> [9 7 2 0]", "(concat [4] [2 4]) -> [4 2 4]", "(concat [3 8 6 2] [3 6]) -> [3 8 6 2 3 6]", "(concat [4 4 7 2] [4]) -> [4 4 7 2 4]", "(concat [2 3 3] [0 4 4 4 3 1]) -> [2 3 3 0 4 4 4 3 1]", "(concat [5 6 8 5] [4 5]) -> [5 6 8 5 4 5]", "(concat [2 1 3 0] [5]) -> [2 1 3 0 5]", "(concat [7 5] []) -> [7 5]", "(concat [] [3]) -> [3]", "(concat [] [9 3 1 7]) -> [9 3 1 7]", "(concat [3 8 7] [6 0 5]) -> [3 8 7 6 0 5]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.197715, "examples": ["(concat [3 0 7] [9 4 5 6]) -> [3 0 7 9 4 5 6]", "(concat [0 0 4 0 1] []) -> [0 0 4 0 1]", "(concat [3 5 3] [8 2 4 3 4 5]) -> [3 5 3 8 2 4 3 4 5]", "(concat [1 4 9] []) -> [1 4 9]", "(concat [] [1 0 0]) -> [1 0 0]", "(concat [5 6 6] [4]) -> [5 6 6 4]", "(concat [4 3 6 1] [1 6]) -> [4 3 6 1 1 6]", "(concat [] []) -> []", "(concat [0 4 5 0 5] [4 6]) -> [0 4 5 0 5 4 6]", "(concat [] []) -> []", "(concat [9 6 9] []) -> [9 6 9]", "(concat [4 4 3 1 5 4] [8 4 0 3]) -> [4 4 3 1 5 4 8 4 0 3]", "(concat [6 7 3] []) -> [6 7 3]", "(concat [6 5 8] [6]) -> [6 5 8 6]", "(concat [1] [2 4 1 4 9 6]) -> [1 2 4 1 4 9 6]", "(concat [1 5] [5 5 8 7 7 4]) -> [1 5 5 5 8 7 7 4]", "(concat [] [5]) -> [5]", "(concat [2 2] [9 2]) -> [2 2 9 2]", "(concat [9 7 5 1 8 8] [7]) -> [9 7 5 1 8 8 7]", "(concat [6 0 3 0 2] [2 4 1 5 2]) -> [6 0 3 0 2 2 4 1 5 2]", "(concat [7 5 9] []) -> [7 5 9]", "(concat [3 1] [6]) -> [3 1 6]", "(concat [2 7 3] [3 4]) -> [2 7 3 3 4]", "(concat [1 0 0 6 4] [8 6 7 7 5 4]) -> [1 0 0 6 4 8 6 7 7 5 4]", "(concat [7 4 8 6 6 4] [8 4 7]) -> [7 4 8 6 6 4 8 4 7]", "(concat [5 0 3 3] [0 0 0 0 2 7]) -> [5 0 3 3 0 0 0 0 2 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.270001, "examples": ["(concat [7 6 0 9] [5 0 2 9 6]) -> [7 6 0 9 5 0 2 9 6]", "(concat [] [1 6 6]) -> [1 6 6]", "(concat [0] [4]) -> [0 4]", "(concat [6 5] [6]) -> [6 5 6]", "(concat [9 9 3 2] [6 6 5 5 5 4]) -> [9 9 3 2 6 6 5 5 5 4]", "(concat [] [9 9]) -> [9 9]", "(concat [3 9 5 0 0 3] [1 8 7 5 7 2]) -> [3 9 5 0 0 3 1 8 7 5 7 2]", "(concat [0 4 9] [7 9 8 9 4 7]) -> [0 4 9 7 9 8 9 4 7]", "(concat [] [9]) -> [9]", "(concat [1] [6 2]) -> [1 6 2]", "(concat [6 9 6] [2 4 8 7]) -> [6 9 6 2 4 8 7]", "(concat [2 6] [8 1 8 3]) -> [2 6 8 1 8 3]", "(concat [9 4 7 0 1] [9 7 3 1 9 2]) -> [9 4 7 0 1 9 7 3 1 9 2]", "(concat [4] []) -> [4]", "(concat [5 3 5] []) -> [5 3 5]", "(concat [] []) -> []", "(concat [] [7 1 5 0 0 4]) -> [7 1 5 0 0 4]", "(concat [3 8 5 9] [3 0 0 2 9]) -> [3 8 5 9 3 0 0 2 9]", "(concat [9] [1 8]) -> [9 1 8]", "(concat [6 8 4 2 6] []) -> [6 8 4 2 6]", "(concat [1 9] [8 4 6]) -> [1 9 8 4 6]", "(concat [6 7 5 9] []) -> [6 7 5 9]", "(concat [9 2 4 9 5] [6 5]) -> [9 2 4 9 5 6 5]", "(concat [] [4 3 5]) -> [4 3 5]", "(concat [8 9 6 5 6 2] [1 9 1 4 3]) -> [8 9 6 5 6 2 1 9 1 4 3]", "(concat [5 5 0] [3 7 4 7 1 7]) -> [5 5 0 3 7 4 7 1 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.244479, "examples": ["(concat [5 9 7] [5 9]) -> [5 9 7 5 9]", "(concat [9 0 2 6 0 9] [8 7 6 6]) -> [9 0 2 6 0 9 8 7 6 6]", "(concat [8 1 1 4 7 1] [7 9]) -> [8 1 1 4 7 1 7 9]", "(concat [1 5 3] [5 1 1]) -> [1 5 3 5 1 1]", "(concat [3 4 1 5] [4 3 0]) -> [3 4 1 5 4 3 0]", "(concat [3 4 3 0 5 2] [0 5 1 4]) -> [3 4 3 0 5 2 0 5 1 4]", "(concat [] [2 7 4 8 0]) -> [2 7 4 8 0]", "(concat [3 0] [5 4 3 7 7 7]) -> [3 0 5 4 3 7 7 7]", "(concat [2 6] [2 4 1 1 8 3]) -> [2 6 2 4 1 1 8 3]", "(concat [4] [2 4 8 6 7]) -> [4 2 4 8 6 7]", "(concat [9 5 3 4] [5 7]) -> [9 5 3 4 5 7]", "(concat [] []) -> []", "(concat [] [1]) -> [1]", "(concat [0 7 5 5 6 1] [9 6 9 7 3 3]) -> [0 7 5 5 6 1 9 6 9 7 3 3]", "(concat [3 9 1] []) -> [3 9 1]", "(concat [] [1 7 6]) -> [1 7 6]", "(concat [5 2 1] [3 1 7 0 9]) -> [5 2 1 3 1 7 0 9]", "(concat [] [2 1 2 0 5]) -> [2 1 2 0 5]", "(concat [4 6 8 5] [7 8]) -> [4 6 8 5 7 8]", "(concat [2 5 1] [8 3]) -> [2 5 1 8 3]", "(concat [5 5 0 1 4] [0]) -> [5 5 0 1 4 0]", "(concat [8] [1 5 3 8 9 0]) -> [8 1 5 3 8 9 0]", "(concat [] [5 4 6 9 8]) -> [5 4 6 9 8]", "(concat [2 8 8 6 8 5] []) -> [2 8 8 6 8 5]", "(concat [9 8 5 8] [3 9 8 2]) -> [9 8 5 8 3 9 8 2]", "(concat [4 3 5 6 1] [5 3 2 7]) -> [4 3 5 6 1 5 3 2 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.278927, "examples": ["(concat [] []) -> []", "(concat [9 5 4] [6]) -> [9 5 4 6]", "(concat [7 8 8 3 4 2] [8 1 5 0 3 3]) -> [7 8 8 3 4 2 8 1 5 0 3 3]", "(concat [7 0 2 9 8 2] [3 5]) -> [7 0 2 9 8 2 3 5]", "(concat [1 4 7 6] [2 7]) -> [1 4 7 6 2 7]", "(concat [1 8 3] [0 0 5 3]) -> [1 8 3 0 0 5 3]", "(concat [8 0] []) -> [8 0]", "(concat [4 0 0 1] [7 4 3 6 9]) -> [4 0 0 1 7 4 3 6 9]", "(concat [] [6 2 9 0 6]) -> [6 2 9 0 6]", "(concat [8 1 9] [5 5]) -> [8 1 9 5 5]", "(concat [1 2 4 2] []) -> [1 2 4 2]", "(concat [8] [9 8 9 9]) -> [8 9 8 9 9]", "(concat [5 5 8 4 2] []) -> [5 5 8 4 2]", "(concat [9 1 8 3 9] [2 6]) -> [9 1 8 3 9 2 6]", "(concat [1 9 2 8] [9 8 9 3]) -> [1 9 2 8 9 8 9 3]", "(concat [3 3] []) -> [3 3]", "(concat [2 5] [4 3]) -> [2 5 4 3]", "(concat [] [9 0]) -> [9 0]", "(concat [3 2 0 0] [5 8 0 9]) -> [3 2 0 0 5 8 0 9]", "(concat [6 7 1] []) -> [6 7 1]", "(concat [5 0 1] [5 5 2 6 0]) -> [5 0 1 5 5 2 6 0]", "(concat [6] [7 6 7 0 0 3]) -> [6 7 6 7 0 0 3]", "(concat [8 8 5 3 6 4] [1 8 7]) -> [8 8 5 3 6 4 1 8 7]", "(concat [0 0] [9 1 0 1 4 7]) -> [0 0 9 1 0 1 4 7]", "(concat [4 9 8 9 6 9] [5 4 5 6 5 9]) -> [4 9 8 9 6 9 5 4 5 6 5 9]", "(concat [8 8 6 7 6] [4 0 2 4]) -> [8 8 6 7 6 4 0 2 4]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.246554, "examples": ["(concat [0 5 7 2] [2 7 4 3 7 1]) -> [0 5 7 2 2 7 4 3 7 1]", "(concat [0 0 8] [4 7 4 3 5]) -> [0 0 8 4 7 4 3 5]", "(concat [5] [5 0 9 7 7]) -> [5 5 0 9 7 7]", "(concat [8 0 2] [4]) -> [8 0 2 4]", "(concat [9 3 1] [8 5 3 2 1 0]) -> [9 3 1 8 5 3 2 1 0]", "(concat [4 4 8 3 8 4] [2 0 3 7 8]) -> [4 4 8 3 8 4 2 0 3 7 8]", "(concat [5 3 1 1 3] [6 5 5 0]) -> [5 3 1 1 3 6 5 5 0]", "(concat [8 9 0 0] [1 4 0]) -> [8 9 0 0 1 4 0]", "(concat [0 3] [6 4 3 2 2 2]) -> [0 3 6 4 3 2 2 2]", "(concat [2 8 1] []) -> [2 8 1]", "(concat [] []) -> []", "(concat [7 0] [0 1 5 8 8]) -> [7 0 0 1 5 8 8]", "(concat [3 1] [2]) -> [3 1 2]", "(concat [] [9 7]) -> [9 7]", "(concat [6 7 4 4] [1]) -> [6 7 4 4 1]", "(concat [0 6 1 0] [7 3 1 9 1 8]) -> [0 6 1 0 7 3 1 9 1 8]", "(concat [5 3] [7]) -> [5 3 7]", "(concat [8 6 5 7] [0 4 1 6 2 2]) -> [8 6 5 7 0 4 1 6 2 2]", "(concat [7 9 6 0] [0]) -> [7 9 6 0 0]", "(concat [6 7 1 1] [5 5 7 9 1 2]) -> [6 7 1 1 5 5 7 9 1 2]", "(concat [9 2 1 6 2] []) -> [9 2 1 6 2]", "(concat [] [1 5 5 0 6]) -> [1 5 5 0 6]", "(concat [3 1] []) -> [3 1]", "(concat [3 2] [2 9]) -> [3 2 2 9]", "(concat [] [9 9 7 1 2]) -> [9 9 7 1 2]", "(concat [9] [9]) -> [9 9]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.221715, "examples": ["(concat [6] []) -> [6]", "(concat [6 8 7 3 7] [5 2]) -> [6 8 7 3 7 5 2]", "(concat [4] [3]) -> [4 3]", "(concat [] []) -> []", "(concat [2 4 0 3 1] [4]) -> [2 4 0 3 1 4]", "(concat [9 5 9] [2 2]) -> [9 5 9 2 2]", "(concat [9 6 1 0 1] [4 7 3 0]) -> [9 6 1 0 1 4 7 3 0]", "(concat [] []) -> []", "(concat [3 1 5 3 0 3] [3 6]) -> [3 1 5 3 0 3 3 6]", "(concat [] [5 3 3]) -> [5 3 3]", "(concat [9 7 2 8 0 8] [1 2 8 9 9]) -> [9 7 2 8 0 8 1 2 8 9 9]", "(concat [7 6] [7 6 1]) -> [7 6 7 6 1]", "(concat [8 6 4] [5 7 5]) -> [8 6 4 5 7 5]", "(concat [2 1 1] [8 2 4]) -> [2 1 1 8 2 4]", "(concat [] [8 3 0 0]) -> [8 3 0 0]", "(concat [5 9 6 0 0] [6 3]) -> [5 9 6 0 0 6 3]", "(concat [1 5 8 7 8 7] []) -> [1 5 8 7 8 7]", "(concat [1 9 1 4] [8 9 4 1]) -> [1 9 1 4 8 9 4 1]", "(concat [5 3 6 8] [0 9 9 1 1]) -> [5 3 6 8 0 9 9 1 1]", "(concat [7 6 2 7 8 5] [0 2]) -> [7 6 2 7 8 5 0 2]", "(concat [8 1 0] [8 3]) -> [8 1 0 8 3]", "(concat [9 4] []) -> [9 4]", "(concat [9 6 9 4 8 3] [2 2]) -> [9 6 9 4 8 3 2 2]", "(concat [1] [9 9]) -> [1 9 9]", "(concat [7 9 9 0 1 5] [6 8 6 9]) -> [7 9 9 0 1 5 6 8 6 9]", "(concat [8 4] [8 6 2]) -> [8 4 8 6 2]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.181489, "examples": ["(concat [] [0 7 8 5 1 4]) -> [0 7 8 5 1 4]", "(concat [8 1 1 2 5] [1 9 1]) -> [8 1 1 2 5 1 9 1]", "(concat [3 1 8] [0]) -> [3 1 8 0]", "(concat [] [7 2]) -> [7 2]", "(concat [2 4 2 7 3 1] []) -> [2 4 2 7 3 1]", "(concat [6] [2 4 5 8 4 8]) -> [6 2 4 5 8 4 8]", "(concat [8] [8 1]) -> [8 8 1]", "(concat [6 4] [7 4 8]) -> [6 4 7 4 8]", "(concat [1 8 4 0] []) -> [1 8 4 0]", "(concat [7 6] [3 2 2 4 6]) -> [7 6 3 2 2 4 6]", "(concat [1 5 5 4] [5 9 6 1 8]) -> [1 5 5 4 5 9 6 1 8]", "(concat [4 9] []) -> [4 9]", "(concat [0 9 4 7] [7]) -> [0 9 4 7 7]", "(concat [2 4 0 2 4 7] [5 9 6 2 5 6]) -> [2 4 0 2 4 7 5 9 6 2 5 6]", "(concat [2 6 9 9 3 8] [7]) -> [2 6 9 9 3 8 7]", "(concat [8 6 5 5] [3 5]) -> [8 6 5 5 3 5]", "(concat [6] [4 8 0 5 4]) -> [6 4 8 0 5 4]", "(concat [2 9 2 7 2] [0 2]) -> [2 9 2 7 2 0 2]", "(concat [4 7 1 0 2 0] []) -> [4 7 1 0 2 0]", "(concat [8 0 3 5 4 1] [0 7 9 0 0 8]) -> [8 0 3 5 4 1 0 7 9 0 0 8]", "(concat [1 7 2 8] [6 8 5 2 7]) -> [1 7 2 8 6 8 5 2 7]", "(concat [9] [3 8 3]) -> [9 3 8 3]", "(concat [5 7] [5 8 2 7 8]) -> [5 7 5 8 2 7 8]", "(concat [3] [0 5 7 6]) -> [3 0 5 7 6]", "(concat [] [1 4]) -> [1 4]", "(concat [4 1 5 8 5 8] [1 4 4 4]) -> [4 1 5 8 5 8 1 4 4 4]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.184239, "examples": ["(concat [3 7 3 8 1 3] [5 6]) -> [3 7 3 8 1 3 5 6]", "(concat [3 1 0 7] []) -> [3 1 0 7]", "(concat [4 0 1 8 1] [8 2 1]) -> [4 0 1 8 1 8 2 1]", "(concat [6 6 1] [6 8]) -> [6 6 1 6 8]", "(concat [6 8] [9 2 5 4]) -> [6 8 9 2 5 4]", "(concat [9] [0 0 6]) -> [9 0 0 6]", "(concat [3] [0 5 4 6 5 5]) -> [3 0 5 4 6 5 5]", "(concat [8 2 8] [7]) -> [8 2 8 7]", "(concat [8 1] [5 9 1]) -> [8 1 5 9 1]", "(concat [1 7 9 8 0] [3 4 7 1]) -> [1 7 9 8 0 3 4 7 1]", "(concat [4 0] [5 9 2 9 3]) -> [4 0 5 9 2 9 3]", "(concat [1 5] []) -> [1 5]", "(concat [6 1 8 8 7 4] []) -> [6 1 8 8 7 4]", "(concat [9 9 8 6 0] [0 5 9]) -> [9 9 8 6 0 0 5 9]", "(concat [3 6] [5]) -> [3 6 5]", "(concat [1 7 9 5 3] [9 2 1 4 6 1]) -> [1 7 9 5 3 9 2 1 4 6 1]", "(concat [5 2 1 2] [7 6 1 5]) -> [5 2 1 2 7 6 1 5]", "(concat [7 1] [2 4 1 2]) -> [7 1 2 4 1 2]", "(concat [0] [3 7 1 8 5]) -> [0 3 7 1 8 5]", "(concat [] [0]) -> [0]", "(concat [] [4 5 8 3 2]) -> [4 5 8 3 2]", "(concat [6 5 4 1] [3 3 8]) -> [6 5 4 1 3 3 8]", "(concat [0] [3 2 1 6]) -> [0 3 2 1 6]", "(concat [0] [5 3 0 8 7]) -> [0 5 3 0 8 7]", "(concat [2 7] [3 0 6]) -> [2 7 3 0 6]", "(concat [4 4 3 3] [3]) -> [4 4 3 3 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.19619, "examples": ["(concat [2 2 1 7] [5 1 5 8 6 1]) -> [2 2 1 7 5 1 5 8 6 1]", "(concat [6 6 6 7] [8 6 4 4 9 8]) -> [6 6 6 7 8 6 4 4 9 8]", "(concat [7 3 9 8 8 2] [0 4]) -> [7 3 9 8 8 2 0 4]", "(concat [4 2 6] []) -> [4 2 6]", "(concat [4 8 2 3] [9 8]) -> [4 8 2 3 9 8]", "(concat [4 7] [1 6 6 5 7]) -> [4 7 1 6 6 5 7]", "(concat [6 9 7 6 1] [7 2 1 4 9]) -> [6 9 7 6 1 7 2 1 4 9]", "(concat [7 8] [5 6 8]) -> [7 8 5 6 8]", "(concat [3 9] [6 3 8 9 6 4]) -> [3 9 6 3 8 9 6 4]", "(concat [5 8 5] [3 1 2]) -> [5 8 5 3 1 2]", "(concat [] [6 7]) -> [6 7]", "(concat [4 5 9 3] [0]) -> [4 5 9 3 0]", "(concat [5 2 8] [4]) -> [5 2 8 4]", "(concat [6 9] [2 7 3 9]) -> [6 9 2 7 3 9]", "(concat [2 5 1] [6 1 9]) -> [2 5 1 6 1 9]", "(concat [] [0 3]) -> [0 3]", "(concat [9] [4]) -> [9 4]", "(concat [0 4 0 7] [7]) -> [0 4 0 7 7]", "(concat [] [3 1 2 8 0]) -> [3 1 2 8 0]", "(concat [8 3 5 7 9 5] [2 5 3 9]) -> [8 3 5 7 9 5 2 5 3 9]", "(concat [7 3 6 1] [5 8 4 8 2]) -> [7 3 6 1 5 8 4 8 2]", "(concat [8 7] [5 9 2]) -> [8 7 5 9 2]", "(concat [9] []) -> [9]", "(concat [] [0]) -> [0]", "(concat [4 6 4 5] [1 0 7]) -> [4 6 4 5 1 0 7]", "(concat [7 3 4 2 7] [8]) -> [7 3 4 2 7 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.224844, "examples": ["(concat [] [4 1]) -> [4 1]", "(concat [8 6 6 1 8] [6 5]) -> [8 6 6 1 8 6 5]", "(concat [3 6 6 1 6 1] []) -> [3 6 6 1 6 1]", "(concat [0 3] [7 9]) -> [0 3 7 9]", "(concat [2 4 2 3 1 9] [2 2 2]) -> [2 4 2 3 1 9 2 2 2]", "(concat [7 5 3] [0 0]) -> [7 5 3 0 0]", "(concat [1 7 5 3 5 9] [9 4]) -> [1 7 5 3 5 9 9 4]", "(concat [8] [5 9]) -> [8 5 9]", "(concat [1 0] [8]) -> [1 0 8]", "(concat [7] [6 6]) -> [7 6 6]", "(concat [] []) -> []", "(concat [4 0 0 7] [0]) -> [4 0 0 7 0]", "(concat [3 4 8] []) -> [3 4 8]", "(concat [4] [7]) -> [4 7]", "(concat [9 3 3 2] [1 2 1 3]) -> [9 3 3 2 1 2 1 3]", "(concat [7 0 2 6 9] []) -> [7 0 2 6 9]", "(concat [] [0 9 9 1 4]) -> [0 9 9 1 4]", "(concat [5 6 8 6 9] []) -> [5 6 8 6 9]", "(concat [] [6 0 4 9 3]) -> [6 0 4 9 3]", "(concat [2 9 0 1 2 5] [4 3 0]) -> [2 9 0 1 2 5 4 3 0]", "(concat [8 2 7 8 8] [5 0]) -> [8 2 7 8 8 5 0]", "(concat [7 4 1 7 5] [1 0 5 6]) -> [7 4 1 7 5 1 0 5 6]", "(concat [] []) -> []", "(concat [5 0] [9 0 1 3]) -> [5 0 9 0 1 3]", "(concat [5] [2 9 4 3 3]) -> [5 2 9 4 3 3]", "(concat [8] [7 4 0 8]) -> [8 7 4 0 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.203798, "examples": ["(concat [2 1 4 2] [8 5 2 4 1]) -> [2 1 4 2 8 5 2 4 1]", "(concat [4 2 4 5 9] [7 4 4 0]) -> [4 2 4 5 9 7 4 4 0]", "(concat [0 6] []) -> [0 6]", "(concat [8] [4 6 4 2]) -> [8 4 6 4 2]", "(concat [5 3 3 3] [1 7]) -> [5 3 3 3 1 7]", "(concat [6 6] [0]) -> [6 6 0]", "(concat [8 4] [6]) -> [8 4 6]", "(concat [5 0 3 6] [7 3 6 0 3]) -> [5 0 3 6 7 3 6 0 3]", "(concat [] []) -> []", "(concat [8 3 5 4 8] [9 0 2 0]) -> [8 3 5 4 8 9 0 2 0]", "(concat [6] [8 9 8 9 7 8]) -> [6 8 9 8 9 7 8]", "(concat [5 9 2 6] []) -> [5 9 2 6]", "(concat [3] []) -> [3]", "(concat [3 0 5 7] []) -> [3 0 5 7]", "(concat [] [2 9 7 4 2]) -> [2 9 7 4 2]", "(concat [3 4 9] [2 9 3 7]) -> [3 4 9 2 9 3 7]", "(concat [0 8 0 7 9] [8 8 8 5 3]) -> [0 8 0 7 9 8 8 8 5 3]", "(concat [9 6] [1 1 9 3 2]) -> [9 6 1 1 9 3 2]", "(concat [] [8 9 3 1]) -> [8 9 3 1]", "(concat [7 6 9 2 3 9] [4 9 9 3 8 4]) -> [7 6 9 2 3 9 4 9 9 3 8 4]", "(concat [6 3 0 3] [7 4 0 4 6]) -> [6 3 0 3 7 4 0 4 6]", "(concat [6 0 6 4 6 9] [5 6 4]) -> [6 0 6 4 6 9 5 6 4]", "(concat [6 4 5 9] [8 8 7]) -> [6 4 5 9 8 8 7]", "(concat [7 8 5] [2 6]) -> [7 8 5 2 6]", "(concat [7 9 0] [8 5]) -> [7 9 0 8 5]", "(concat [2] [3 4 7 6 2]) -> [2 3 4 7 6 2]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.211282, "examples": ["(concat [7 1 2 1 1 1] [6]) -> [7 1 2 1 1 1 6]", "(concat [4] [8 0 5 2 7 1]) -> [4 8 0 5 2 7 1]", "(concat [8 6 4] [3]) -> [8 6 4 3]", "(concat [5 6 9 1 8] [7 7 8]) -> [5 6 9 1 8 7 7 8]", "(concat [0 2 3 0 6 3] [8 6 2]) -> [0 2 3 0 6 3 8 6 2]", "(concat [6 4] [7 3 2]) -> [6 4 7 3 2]", "(concat [3 5] [6]) -> [3 5 6]", "(concat [1 5 3 9] [0 0 9 2 0 9]) -> [1 5 3 9 0 0 9 2 0 9]", "(concat [] [1 9 5 9]) -> [1 9 5 9]", "(concat [8 5 5 1] [2 7 4 6 8 3]) -> [8 5 5 1 2 7 4 6 8 3]", "(concat [9 0 5 9 9] [8 2 1 9 9 8]) -> [9 0 5 9 9 8 2 1 9 9 8]", "(concat [3] [0 0 8 7 3]) -> [3 0 0 8 7 3]", "(concat [5] [5 7 0 5 3]) -> [5 5 7 0 5 3]", "(concat [1 6 6] [5 0 0]) -> [1 6 6 5 0 0]", "(concat [5 1] [2 4 3 2 6 1]) -> [5 1 2 4 3 2 6 1]", "(concat [4 9 4] [1 6 6 6 3]) -> [4 9 4 1 6 6 6 3]", "(concat [5] [8 4 9]) -> [5 8 4 9]", "(concat [4 7] [4 5 5 0 3 3]) -> [4 7 4 5 5 0 3 3]", "(concat [1 2 7 8 7 4] [4 0 6]) -> [1 2 7 8 7 4 4 0 6]", "(concat [1 1 2 3] [2 1 5 5 8]) -> [1 1 2 3 2 1 5 5 8]", "(concat [4 5 8] [4 7 4 5 6 0]) -> [4 5 8 4 7 4 5 6 0]", "(concat [] [8 0]) -> [8 0]", "(concat [3] [1 7 5 1]) -> [3 1 7 5 1]", "(concat [0 5 8 8] [4 8 3 3]) -> [0 5 8 8 4 8 3 3]", "(concat [] [6 1]) -> [6 1]", "(concat [6 8] []) -> [6 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.236772, "examples": ["(concat [3 3 2] [8 4]) -> [3 3 2 8 4]", "(concat [] [0]) -> [0]", "(concat [3 6 6 3 6] [7 7 2 1]) -> [3 6 6 3 6 7 7 2 1]", "(concat [0 8] [6 6]) -> [0 8 6 6]", "(concat [4 5 0 6 0 5] [7 0]) -> [4 5 0 6 0 5 7 0]", "(concat [5 5 9 0 7 3] [6 1 6]) -> [5 5 9 0 7 3 6 1 6]", "(concat [0 8] []) -> [0 8]", "(concat [] [4 1 8 9]) -> [4 1 8 9]", "(concat [7 6 3 5 8] [6]) -> [7 6 3 5 8 6]", "(concat [] [6 5 2 8]) -> [6 5 2 8]", "(concat [9] [2 3 9 1 6 6]) -> [9 2 3 9 1 6 6]", "(concat [8 9 7 7 5 1] []) -> [8 9 7 7 5 1]", "(concat [5 4 4 3] []) -> [5 4 4 3]", "(concat [2 4 0 7 6] []) -> [2 4 0 7 6]", "(concat [1 0] [0 8 2 8 6]) -> [1 0 0 8 2 8 6]", "(concat [5 2 4] [0 2 0 3 7]) -> [5 2 4 0 2 0 3 7]", "(concat [8] [3 7]) -> [8 3 7]", "(concat [7 9 1 5] [4 3 8 7]) -> [7 9 1 5 4 3 8 7]", "(concat [7 5 9 7 0 7] []) -> [7 5 9 7 0 7]", "(concat [0 8] [3 6 1 2]) -> [0 8 3 6 1 2]", "(concat [5 4 3 1 0 1] [7]) -> [5 4 3 1 0 1 7]", "(concat [0] []) -> [0]", "(concat [9 7 0 8 8 8] [1]) -> [9 7 0 8 8 8 1]", "(concat [8 8 7 8 2 1] [7 9 6 1 6]) -> [8 8 7 8 2 1 7 9 6 1 6]", "(concat [6 9 7 9] [1 1 9 0]) -> [6 9 7 9 1 1 9 0]", "(concat [0 0 7 2 0 0] [5 9 2 2]) -> [0 0 7 2 0 0 5 9 2 2]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.216369, "examples": ["(concat [2 7 3 8] [3 9 7 9 5 2]) -> [2 7 3 8 3 9 7 9 5 2]", "(concat [7] [2]) -> [7 2]", "(concat [7] []) -> [7]", "(concat [6] [0 8 2 9 5 4]) -> [6 0 8 2 9 5 4]", "(concat [8 6 0 3] [3 0 8]) -> [8 6 0 3 3 0 8]", "(concat [6 0 2 9 5] [5 5 0]) -> [6 0 2 9 5 5 5 0]", "(concat [5 9 8 9 1] [7 5]) -> [5 9 8 9 1 7 5]", "(concat [] []) -> []", "(concat [9] [1 1 5]) -> [9 1 1 5]", "(concat [9 6] [5]) -> [9 6 5]", "(concat [4] [8]) -> [4 8]", "(concat [7 0] []) -> [7 0]", "(concat [5 7 3 2 8 8] [1 0 5]) -> [5 7 3 2 8 8 1 0 5]", "(concat [4 1 4 3 8 5] [2 6]) -> [4 1 4 3 8 5 2 6]", "(concat [] [8]) -> [8]", "(concat [] [9 0 6 4]) -> [9 0 6 4]", "(concat [2 6 8 6 5] [4 7]) -> [2 6 8 6 5 4 7]", "(concat [2 0 3] [0]) -> [2 0 3 0]", "(concat [] [5]) -> [5]", "(concat [7 7 0] [5 9 4]) -> [7 7 0 5 9 4]", "(concat [4 2] [0]) -> [4 2 0]", "(concat [2 7] [7]) -> [2 7 7]", "(concat [1 0 4 0 7] [8 6 4 9 1]) -> [1 0 4 0 7 8 6 4 9 1]", "(concat [5 8 7 7 2 9] [2 4]) -> [5 8 7 7 2 9 2 4]", "(concat [7 6 3 2 3 0] [7 5 2 9]) -> [7 6 3 2 3 0 7 5 2 9]", "(concat [0 1 7 7 7 0] [6 5 1 7 1 1]) -> [0 1 7 7 7 0 6 5 1 7 1 1]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.223486, "examples": ["(concat [3 5 1 3 3] [1 2]) -> [3 5 1 3 3 1 2]", "(concat [6 6 7] [6 2 7 1 3]) -> [6 6 7 6 2 7 1 3]", "(concat [] [2 3 5 0 0]) -> [2 3 5 0 0]", "(concat [5 9 8] [2 6 2 2 1]) -> [5 9 8 2 6 2 2 1]", "(concat [] [4 0 3]) -> [4 0 3]", "(concat [5 2 4 5 2 3] [9 2 4 4 2]) -> [5 2 4 5 2 3 9 2 4 4 2]", "(concat [6 8 8] [6 4 4 7]) -> [6 8 8 6 4 4 7]", "(concat [5 0 1] [8 8 1 6 8]) -> [5 0 1 8 8 1 6 8]", "(concat [5] [9]) -> [5 9]", "(concat [4 8 1 8 7] []) -> [4 8 1 8 7]", "(concat [1 7 5 1 7 3] [3 0 2]) -> [1 7 5 1 7 3 3 0 2]", "(concat [7 0 8] [1]) -> [7 0 8 1]", "(concat [7 7] [3 5 2 3 6 8]) -> [7 7 3 5 2 3 6 8]", "(concat [7 7 0 4 9 0] [7 1 1]) -> [7 7 0 4 9 0 7 1 1]", "(concat [] [5 5]) -> [5 5]", "(concat [6 9 5 1] []) -> [6 9 5 1]", "(concat [] [4 5 8 6 0 3]) -> [4 5 8 6 0 3]", "(concat [3 6 7 7 1] [3]) -> [3 6 7 7 1 3]", "(concat [7 9] [7 1 3]) -> [7 9 7 1 3]", "(concat [3 6 2] [2]) -> [3 6 2 2]", "(concat [8 2 6] [4 3 2 3 9 6]) -> [8 2 6 4 3 2 3 9 6]", "(concat [5 6] [8 2 2 2 0]) -> [5 6 8 2 2 2 0]", "(concat [0 4 4 1 5] [1 8]) -> [0 4 4 1 5 1 8]", "(concat [6 2 6 4 1 8] [1 6 6 6 6 9]) -> [6 2 6 4 1 8 1 6 6 6 6 9]", "(concat [4 0] [2 7 8 0 2 4]) -> [4 0 2 7 8 0 2 4]", "(concat [6 9 2 6 9] [7 4 3 9]) -> [6 9 2 6 9 7 4 3 9]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.210145, "examples": ["(concat [2 7 8 2 5 1] [6 5]) -> [2 7 8 2 5 1 6 5]", "(concat [] [5 4]) -> [5 4]", "(concat [6 4] [4 0]) -> [6 4 4 0]", "(concat [0] [1 2 9 9]) -> [0 1 2 9 9]", "(concat [6 7 5] [8 3 4 0 2 9]) -> [6 7 5 8 3 4 0 2 9]", "(concat [9 8 6 9 9 6] [9 4]) -> [9 8 6 9 9 6 9 4]", "(concat [7 5] [8 6 3 1 3 4]) -> [7 5 8 6 3 1 3 4]", "(concat [8 5 1 3 9 1] [6]) -> [8 5 1 3 9 1 6]", "(concat [] [9 9 5 2 1]) -> [9 9 5 2 1]", "(concat [7 6 3 8 2] [2 2]) -> [7 6 3 8 2 2 2]", "(concat [5 1 9 4 6] [2 8]) -> [5 1 9 4 6 2 8]", "(concat [1 8 5 9 4] [8 8]) -> [1 8 5 9 4 8 8]", "(concat [] [7 1 3 9 0]) -> [7 1 3 9 0]", "(concat [] []) -> []", "(concat [] [5 0 1 3 4 8]) -> [5 0 1 3 4 8]", "(concat [2 7 7 6 5 8] [7 2 9 7 6]) -> [2 7 7 6 5 8 7 2 9 7 6]", "(concat [5] [9]) -> [5 9]", "(concat [] [1 3]) -> [1 3]", "(concat [2 1] [6 3]) -> [2 1 6 3]", "(concat [6 6] [5 3 6]) -> [6 6 5 3 6]", "(concat [1 0 6 3 4] [0]) -> [1 0 6 3 4 0]", "(concat [4 8 7] [5 2 4 2 3 2]) -> [4 8 7 5 2 4 2 3 2]", "(concat [8 1 5 6 5 2] [0]) -> [8 1 5 6 5 2 0]", "(concat [2] [9 9 9 0]) -> [2 9 9 9 0]", "(concat [1 4 5 7 3] [7 4]) -> [1 4 5 7 3 7 4]", "(concat [8 6 0 9] [8 4]) -> [8 6 0 9 8 4]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.202312, "examples": ["(concat [6 4 7 8] [7 7 5 2 5]) -> [6 4 7 8 7 7 5 2 5]", "(concat [4 6 9] [0 0 2]) -> [4 6 9 0 0 2]", "(concat [] [6 4 4 1 1]) -> [6 4 4 1 1]", "(concat [3 1 2 8] []) -> [3 1 2 8]", "(concat [1 7] [0 6 8 1 8]) -> [1 7 0 6 8 1 8]", "(concat [1 0] [1 9 9 5 1]) -> [1 0 1 9 9 5 1]", "(concat [9 9 9 0 9 0] []) -> [9 9 9 0 9 0]", "(concat [0 5 6] []) -> [0 5 6]", "(concat [1 9 3 0] [8]) -> [1 9 3 0 8]", "(concat [4 5 1 5 7 4] [8 8 6 6]) -> [4 5 1 5 7 4 8 8 6 6]", "(concat [8 5 1] [8]) -> [8 5 1 8]", "(concat [3 0 2 7 6 0] [8 7 3]) -> [3 0 2 7 6 0 8 7 3]", "(concat [5 4] [1 4 1]) -> [5 4 1 4 1]", "(concat [1 7] []) -> [1 7]", "(concat [4 1 4 2] [3]) -> [4 1 4 2 3]", "(concat [0 6] []) -> [0 6]", "(concat [4 9 7 3 5 1] [3 2 5 3 4 3]) -> [4 9 7 3 5 1 3 2 5 3 4 3]", "(concat [7 3 2] [7 3 1 1 0 6]) -> [7 3 2 7 3 1 1 0 6]", "(concat [9 6 5 1 5 3] [4 0 1]) -> [9 6 5 1 5 3 4 0 1]", "(concat [2 4] [4 2 3 3 0 5]) -> [2 4 4 2 3 3 0 5]", "(concat [9 1] [0]) -> [9 1 0]", "(concat [3 3 9 7 7 6] [3 9 1 1 6 6]) -> [3 3 9 7 7 6 3 9 1 1 6 6]", "(concat [] []) -> []", "(concat [0 0 3 5] [4 9]) -> [0 0 3 5 4 9]", "(concat [4 8 9 3 3] [1]) -> [4 8 9 3 3 1]", "(concat [8 8 9] [0 4 3 7 2 6]) -> [8 8 9 0 4 3 7 2 6]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.195262, "examples": ["(concat [9 0 0 0 8] [2 9 8 0 2]) -> [9 0 0 0 8 2 9 8 0 2]", "(concat [] []) -> []", "(concat [] [4 6]) -> [4 6]", "(concat [1] []) -> [1]", "(concat [9 6 2] [1 8 7]) -> [9 6 2 1 8 7]", "(concat [0 6 6 2 1] [6 9 5 2]) -> [0 6 6 2 1 6 9 5 2]", "(concat [1 8 1 6] [6 3 4]) -> [1 8 1 6 6 3 4]", "(concat [6 1] [2 6 6 0 2]) -> [6 1 2 6 6 0 2]", "(concat [2 3 6 3 8] [0 4 2 2 3 6]) -> [2 3 6 3 8 0 4 2 2 3 6]", "(concat [4 2 7] [3 7 0 5 9 3]) -> [4 2 7 3 7 0 5 9 3]", "(concat [8 2 7 1] [9 4]) -> [8 2 7 1 9 4]", "(concat [8 9 4 4 6] [6 4 7]) -> [8 9 4 4 6 6 4 7]", "(concat [7 2 3 1] []) -> [7 2 3 1]", "(concat [9 6] [0 7 2 9]) -> [9 6 0 7 2 9]", "(concat [1 3 5 1] [7 5 5 4 0]) -> [1 3 5 1 7 5 5 4 0]", "(concat [6 2 8 9 1 3] [8 7 0 4 3]) -> [6 2 8 9 1 3 8 7 0 4 3]", "(concat [8 5 3 8] [7]) -> [8 5 3 8 7]", "(concat [7 6 3] []) -> [7 6 3]", "(concat [3 6] [3 7 3 1 8]) -> [3 6 3 7 3 1 8]", "(concat [] [0 3 4]) -> [0 3 4]", "(concat [] [7 6 8 3]) -> [7 6 8 3]", "(concat [1] [0]) -> [1 0]", "(concat [] []) -> []", "(concat [3 0 9] [6 0 6]) -> [3 0 9 6 0 6]", "(concat [8] [5 7 1 8 7 7]) -> [8 5 7 1 8 7 7]", "(concat [9 4 6] [9 1 9 4 3 7]) -> [9 4 6 9 1 9 4 3 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.100628, "examples": ["(concat [3 3 3 8 4] [0 5]) -> [3 3 3 8 4 0 5]", "(concat [9 7 9 4] [9 9 4]) -> [9 7 9 4 9 9 4]", "(concat [0 6 6 5 9 1] []) -> [0 6 6 5 9 1]", "(concat [] [4 3 3 3]) -> [4 3 3 3]", "(concat [] []) -> []", "(concat [8 0 2 0 1 1] [1 8 3]) -> [8 0 2 0 1 1 1 8 3]", "(concat [9] [7 9 1 0]) -> [9 7 9 1 0]", "(concat [] [6 6 5]) -> [6 6 5]", "(concat [1 4 1 5 0] [7 1]) -> [1 4 1 5 0 7 1]", "(concat [8] [2 0 9]) -> [8 2 0 9]", "(concat [6 2 4 7 6 9] []) -> [6 2 4 7 6 9]", "(concat [2] []) -> [2]", "(concat [8 7 3 0] [9 3]) -> [8 7 3 0 9 3]", "(concat [3 5 4] [8]) -> [3 5 4 8]", "(concat [4 5 3 2 1] []) -> [4 5 3 2 1]", "(concat [8 2 8 5] [3 9 9 0]) -> [8 2 8 5 3 9 9 0]", "(concat [2 4 7] [1 0 2]) -> [2 4 7 1 0 2]", "(concat [6 7 5 4 4 6] [0 4 4]) -> [6 7 5 4 4 6 0 4 4]", "(concat [1 2 7 0] [1 0 0 2]) -> [1 2 7 0 1 0 0 2]", "(concat [5 2 5 7] [4]) -> [5 2 5 7 4]", "(concat [3 9] [9 4 3 2]) -> [3 9 9 4 3 2]", "(concat [9 0 9 0 7 0] [1 3 4 6 2 9]) -> [9 0 9 0 7 0 1 3 4 6 2 9]", "(concat [4 5 3 6 2 1] [9 2 9 5 1]) -> [4 5 3 6 2 1 9 2 9 5 1]", "(concat [] [5]) -> [5]", "(concat [8 6 2] []) -> [8 6 2]", "(concat [0 7 8 3 2] [6 1 4 0 9]) -> [0 7 8 3 2 6 1 4 0 9]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.094108, "examples": ["(concat [5 9] []) -> [5 9]", "(concat [1] [2 9 6]) -> [1 2 9 6]", "(concat [6] [5 9 3 6 1]) -> [6 5 9 3 6 1]", "(concat [0 3] [9 6 2 8 0 2]) -> [0 3 9 6 2 8 0 2]", "(concat [9 8 1 1] [1 4 0]) -> [9 8 1 1 1 4 0]", "(concat [8 2 2 2] [6 6 7 7 0 7]) -> [8 2 2 2 6 6 7 7 0 7]", "(concat [] [8 1 6]) -> [8 1 6]", "(concat [1 6] [8 8 9 3 3]) -> [1 6 8 8 9 3 3]", "(concat [2 1 6] [5 6 5 4 9]) -> [2 1 6 5 6 5 4 9]", "(concat [0 0] [5 0 6]) -> [0 0 5 0 6]", "(concat [6 4 3 6 2] [8 0 5 5 2]) -> [6 4 3 6 2 8 0 5 5 2]", "(concat [0 2 8 1 8] [5 2]) -> [0 2 8 1 8 5 2]", "(concat [7 5] [5 7]) -> [7 5 5 7]", "(concat [] []) -> []", "(concat [3 8 5] [2 1 1]) -> [3 8 5 2 1 1]", "(concat [5 5 1 3] [2 5]) -> [5 5 1 3 2 5]", "(concat [] [0]) -> [0]", "(concat [3 2 2] [3 8]) -> [3 2 2 3 8]", "(concat [6] [5 1 3 7]) -> [6 5 1 3 7]", "(concat [4 5 9 3 5 5] [6 1 4 1]) -> [4 5 9 3 5 5 6 1 4 1]", "(concat [8] [6 8]) -> [8 6 8]", "(concat [0 1 3 4] [1 0]) -> [0 1 3 4 1 0]", "(concat [5] [3 3 9 5 8 0]) -> [5 3 3 9 5 8 0]", "(concat [7 6 2 2] []) -> [7 6 2 2]", "(concat [4 7] [9 9 1 8 2]) -> [4 7 9 9 1 8 2]", "(concat [9 6 8] [6]) -> [9 6 8 6]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.09296, "examples": ["(concat [8 4 1 0] [6 1]) -> [8 4 1 0 6 1]", "(concat [0 9 5 0 9 6] [1 5 7 3 8 2]) -> [0 9 5 0 9 6 1 5 7 3 8 2]", "(concat [0 5 9 4 4 1] [7 2 9]) -> [0 5 9 4 4 1 7 2 9]", "(concat [6 7 7 4] []) -> [6 7 7 4]", "(concat [7 0 3 2] [1 2 5 7 5 1]) -> [7 0 3 2 1 2 5 7 5 1]", "(concat [6 9 5 0 4] [2 8 7 6]) -> [6 9 5 0 4 2 8 7 6]", "(concat [1 3 4] [3 2 3 3]) -> [1 3 4 3 2 3 3]", "(concat [] [0 8 4 1 5 1]) -> [0 8 4 1 5 1]", "(concat [7 4 6 3] []) -> [7 4 6 3]", "(concat [6] [2 0 9 7]) -> [6 2 0 9 7]", "(concat [2 1 2 6] [6 7 7 0 8 2]) -> [2 1 2 6 6 7 7 0 8 2]", "(concat [9 1] [2 2 4 5]) -> [9 1 2 2 4 5]", "(concat [8 7 2 5] [9 4 0 6]) -> [8 7 2 5 9 4 0 6]", "(concat [2 2 2 7 5] [0 3 6]) -> [2 2 2 7 5 0 3 6]", "(concat [4 1 3] [5 2 1 0 6 5]) -> [4 1 3 5 2 1 0 6 5]", "(concat [1 0 0 3 5] [9 5 2 1 0]) -> [1 0 0 3 5 9 5 2 1 0]", "(concat [0] [7 7 2 3]) -> [0 7 7 2 3]", "(concat [6 9 4 7] [3 6 4 1 3 1]) -> [6 9 4 7 3 6 4 1 3 1]", "(concat [5 1 8] [0 8 0]) -> [5 1 8 0 8 0]", "(concat [0 7 0 0 8] [0 3]) -> [0 7 0 0 8 0 3]", "(concat [5 8] [2 1 4 8 0]) -> [5 8 2 1 4 8 0]", "(concat [6 9] [6]) -> [6 9 6]", "(concat [2 3 3 3 4] [7 2]) -> [2 3 3 3 4 7 2]", "(concat [2 6 3 5] [7 3]) -> [2 6 3 5 7 3]", "(concat [9 2 4 7 2] [1 3 5 8]) -> [9 2 4 7 2 1 3 5 8]", "(concat [] []) -> []"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.114858, "examples": ["(concat [6 3 7 9 3] [5 3 1 9]) -> [6 3 7 9 3 5 3 1 9]", "(concat [0] [9 3 9]) -> [0 9 3 9]", "(concat [] [6 4 0 5 3]) -> [6 4 0 5 3]", "(concat [2 3 5 4 3 5] [8]) -> [2 3 5 4 3 5 8]", "(concat [8 8] [1 6 3 3 1 9]) -> [8 8 1 6 3 3 1 9]", "(concat [0] []) -> [0]", "(concat [5 3 2] [2 2]) -> [5 3 2 2 2]", "(concat [4 7] [1 9 9]) -> [4 7 1 9 9]", "(concat [6 9 8 1] [6 2 7 4 0]) -> [6 9 8 1 6 2 7 4 0]", "(concat [] []) -> []", "(concat [4] [2 5]) -> [4 2 5]", "(concat [3 7 7 3] [3 4]) -> [3 7 7 3 3 4]", "(concat [7 9 4 4] [6]) -> [7 9 4 4 6]", "(concat [1 6] [8 0 6 1 5]) -> [1 6 8 0 6 1 5]", "(concat [4 4 3 4 5] [2 5]) -> [4 4 3 4 5 2 5]", "(concat [8 9 3 7 4 1] []) -> [8 9 3 7 4 1]", "(concat [2 0] [9 4 0]) -> [2 0 9 4 0]", "(concat [] [9 9]) -> [9 9]", "(concat [4 7] [6 4 8 5 7 6]) -> [4 7 6 4 8 5 7 6]", "(concat [2 7 7 8] []) -> [2 7 7 8]", "(concat [7 9 7] []) -> [7 9 7]", "(concat [6 3] [0 0]) -> [6 3 0 0]", "(concat [8 7 3 4 9] [0 8]) -> [8 7 3 4 9 0 8]", "(concat [1 1 7 1 6] [7 0 3]) -> [1 1 7 1 6 7 0 3]", "(concat [] [3 6 6 7 8]) -> [3 6 6 7 8]", "(concat [1 2 2] [3 5 3 5]) -> [1 2 2 3 5 3 5]"]}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) b)) [0 7])) _) _)", "name": "concat", "time": 3.19283, "examples": ["(concat [1 8 8] [0 3 3 6]) -> [1 8 8 0 3 3 6]", "(concat [3] [4 5 8 4 2]) -> [3 4 5 8 4 2]", "(concat [5 9 6 2 1 7] []) -> [5 9 6 2 1 7]", "(concat [] [0 7]) -> [0 7]", "(concat [4 9 3 3 3 4] [0 1]) -> [4 9 3 3 3 4 0 1]", "(concat [2 5 7 1 2] [1 5 7 2 4 7]) -> [2 5 7 1 2 1 5 7 2 4 7]", "(concat [7 1 7 5 9] [9 2 7 8]) -> [7 1 7 5 9 9 2 7 8]", "(concat [6 1 4 9 0 1] []) -> [6 1 4 9 0 1]", "(concat [9 9 0 2] [9 9]) -> [9 9 0 2 9 9]", "(concat [8 2 0 4] []) -> [8 2 0 4]", "(concat [2] [2 8 4 3]) -> [2 2 8 4 3]", "(concat [8 6] [9 9 2 5]) -> [8 6 9 9 2 5]", "(concat [4] [0 2 9]) -> [4 0 2 9]", "(concat [5 6 2 7] [0]) -> [5 6 2 7 0]", "(concat [6 2] [9 7]) -> [6 2 9 7]", "(concat [9 4 3 1 6] [5 4 4 3]) -> [9 4 3 1 6 5 4 4 3]", "(concat [3 5 5 7 1] []) -> [3 5 5 7 1]", "(concat [8 4 2 5] [4 9 4 3]) -> [8 4 2 5 4 9 4 3]", "(concat [5 7] [6 7 4 2]) -> [5 7 6 7 4 2]", "(concat [0 6] []) -> [0 6]", "(concat [1 6 6 8 6 8] [7 6 5 0 8]) -> [1 6 6 8 6 8 7 6 5 0 8]", "(concat [7] []) -> [7]", "(concat [4 8 9 3] [8]) -> [4 8 9 3 8]", "(concat [6 7] [9 1 2 2 2 7]) -> [6 7 9 1 2 2 2 7]", "(concat [5] [0 7 4]) -> [5 0 7 4]", "(concat [8 5 3 7] [9 0 6 0]) -> [8 5 3 7 9 0 6 0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) b)) [5 2 8 2 8 1])) _) _)", "name": "concat", "time": 2.93221, "examples": ["(concat [0 3 8] [9 5 6 1]) -> [0 3 8 9 5 6 1]", "(concat [6] [5 1 4 5]) -> [6 5 1 4 5]", "(concat [1 1 1 2 3 5] []) -> [1 1 1 2 3 5]", "(concat [3 5 5 7] [7 9 9 4]) -> [3 5 5 7 7 9 9 4]", "(concat [7] [1 4]) -> [7 1 4]", "(concat [5 5 2 7] [9 7 8 2 8 1]) -> [5 5 2 7 9 7 8 2 8 1]", "(concat [9 2] [3 0 3]) -> [9 2 3 0 3]", "(concat [9 1 7] [5 4 0]) -> [9 1 7 5 4 0]", "(concat [6 4 2 5 4 1] [9 8 9 3 4]) -> [6 4 2 5 4 1 9 8 9 3 4]", "(concat [0 2 3 4 0] []) -> [0 2 3 4 0]", "(concat [5 3 7 9] [9]) -> [5 3 7 9 9]", "(concat [5 0] []) -> [5 0]", "(concat [7] [8 6 8 0 2]) -> [7 8 6 8 0 2]", "(concat [2 7 7 4 2 5] []) -> [2 7 7 4 2 5]", "(concat [5 0 8 7 0] [2]) -> [5 0 8 7 0 2]", "(concat [7 6] [6 7 3]) -> [7 6 6 7 3]", "(concat [3 9] [0 7 5]) -> [3 9 0 7 5]", "(concat [0 1 5 3 1] [0 5 8]) -> [0 1 5 3 1 0 5 8]", "(concat [2] []) -> [2]", "(concat [0 7 0 9 4] []) -> [0 7 0 9 4]", "(concat [4 4 0 7] [1 6 6]) -> [4 4 0 7 1 6 6]", "(concat [] [5 2 8 2 8 1]) -> [5 2 8 2 8 1]", "(concat [1 3 9] [1]) -> [1 3 9 1]", "(concat [9] []) -> [9]", "(concat [3 9 2 0] [7 6]) -> [3 9 2 0 7 6]", "(concat [8 7 4 3 9 2] [2 0 4 2 1 0]) -> [8 7 4 3 9 2 2 0 4 2 1 0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) b)) [7])) _) _)", "name": "concat", "time": 2.200565, "examples": ["(concat [8 4 8 3 5] [1 3 1 5 8]) -> [8 4 8 3 5 1 3 1 5 8]", "(concat [5 7 8 6 6 3] [4]) -> [5 7 8 6 6 3 4]", "(concat [2 2 0] [9 6]) -> [2 2 0 9 6]", "(concat [1 0 4 1 5 2] [9 0 7 6 4 2]) -> [1 0 4 1 5 2 9 0 7 6 4 2]", "(concat [8 4] [4]) -> [8 4 4]", "(concat [3] []) -> [3]", "(concat [7 9 9 4 9 2] [2 9 5 2 2 3]) -> [7 9 9 4 9 2 2 9 5 2 2 3]", "(concat [9 7 0] [9]) -> [9 7 0 9]", "(concat [2 5 9] [7]) -> [2 5 9 7]", "(concat [7 7 5 3] []) -> [7 7 5 3]", "(concat [0 9 7 3 1 0] [2 3]) -> [0 9 7 3 1 0 2 3]", "(concat [2 4 8] [6 5]) -> [2 4 8 6 5]", "(concat [5 6 1 4 2] []) -> [5 6 1 4 2]", "(concat [0] [2 7 6 5 1]) -> [0 2 7 6 5 1]", "(concat [1 9 1] [2 7 6 0 7 1]) -> [1 9 1 2 7 6 0 7 1]", "(concat [5 0 5 0 1 4] [7 5]) -> [5 0 5 0 1 4 7 5]", "(concat [1 0 1] [3]) -> [1 0 1 3]", "(concat [8 6] []) -> [8 6]", "(concat [6 9 7] []) -> [6 9 7]", "(concat [3 0 3 3 4 8] [1 1]) -> [3 0 3 3 4 8 1 1]", "(concat [] [7]) -> [7]", "(concat [7] [5 4]) -> [7 5 4]", "(concat [2 0 6 7 3] [7 4 6 3]) -> [2 0 6 7 3 7 4 6 3]", "(concat [4 2 8 7 1] []) -> [4 2 8 7 1]", "(concat [1 2 5 0 4 4] [5 9 6 4 6 1]) -> [1 2 5 0 4 4 5 9 6 4 6 1]", "(concat [9 1 7] [1 7 8]) -> [9 1 7 1 7 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) b)) [])) _) _)", "name": "concat", "time": 2.225083, "examples": ["(concat [7 7 0 5 8] [0 0 5 9 5]) -> [7 7 0 5 8 0 0 5 9 5]", "(concat [9 2 9] [0]) -> [9 2 9 0]", "(concat [7 0] [6 6 0 3 8]) -> [7 0 6 6 0 3 8]", "(concat [0 9 7 7 2 3] []) -> [0 9 7 7 2 3]", "(concat [7 0 9 5 0] [4]) -> [7 0 9 5 0 4]", "(concat [6 4] [1 2 2 4 5 0]) -> [6 4 1 2 2 4 5 0]", "(concat [2 7 3 0] [1 9 0]) -> [2 7 3 0 1 9 0]", "(concat [1] [3]) -> [1 3]", "(concat [0 7 6 6 2 1] [7 0 6 8 5 8]) -> [0 7 6 6 2 1 7 0 6 8 5 8]", "(concat [5] [9 4]) -> [5 9 4]", "(concat [6] []) -> [6]", "(concat [0 4 1 0 3] [7 7]) -> [0 4 1 0 3 7 7]", "(concat [] []) -> []", "(concat [1] [8 8 6 7 5 4]) -> [1 8 8 6 7 5 4]", "(concat [1 8 6 5 5] [4 0 6]) -> [1 8 6 5 5 4 0 6]", "(concat [0 8] [6 7 7]) -> [0 8 6 7 7]", "(concat [6] [1 8 1 2 0]) -> [6 1 8 1 2 0]", "(concat [8 9 4 1] []) -> [8 9 4 1]", "(concat [7 0 5] [7 5 6]) -> [7 0 5 7 5 6]", "(concat [3 1 2 8 8] [1 5 3 0]) -> [3 1 2 8 8 1 5 3 0]", "(concat [8 6 6 6 6] [3 3]) -> [8 6 6 6 6 3 3]", "(concat [5 0] [7 7 7 8 9 3]) -> [5 0 7 7 7 8 9 3]", "(concat [0 3 4 7 2 2] [6]) -> [0 3 4 7 2 2 6]", "(concat [7 6 2 2] [3]) -> [7 6 2 2 3]", "(concat [6 8 1 6 4 8] [5 6]) -> [6 8 1 6 4 8 5 6]", "(concat [9 4 9 8 1 8] [2 9 4 0]) -> [9 4 9 8 1 8 2 9 4 0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (foldr c (lambda (g f) (cons f g)) b)) [0 9 1 7 3])) _) _)", "name": "concat", "time": 2.172834, "examples": ["(concat [] [0 9 1 7 3]) -> [0 9 1 7 3]", "(concat [7 8 9 4] [0 1 9 0 8 0]) -> [7 8 9 4 0 1 9 0 8 0]", "(concat [1] [4 7 7]) -> [1 4 7 7]", "(concat [7 5 2 4 3 9] [1 8 2 4 0 7]) -> [7 5 2 4 3 9 1 8 2 4 0 7]", "(concat [6 5 7] [3]) -> [6 5 7 3]", "(concat [3 2] []) -> [3 2]", "(concat [8 0] [5 1]) -> [8 0 5 1]", "(concat [1 8 1 6] []) -> [1 8 1 6]", "(concat [6 6 6 8] [9 0]) -> [6 6 6 8 9 0]", "(concat [4 8 6 4] [1 7 0 4 6 1]) -> [4 8 6 4 1 7 0 4 6 1]", "(concat [7 3 9 3 5 8] [9]) -> [7 3 9 3 5 8 9]", "(concat [1 8] [6 1 4 1]) -> [1 8 6 1 4 1]", "(concat [9 4] [8 9 8 7 4 0]) -> [9 4 8 9 8 7 4 0]", "(concat [3] [8 6 8]) -> [3 8 6 8]", "(concat [7 4] [8 0]) -> [7 4 8 0]", "(concat [5 1] []) -> [5 1]", "(concat [2 8 9 1 1] [3 5 7 0]) -> [2 8 9 1 1 3 5 7 0]", "(concat [8 4 6 3 6 8] [4 0 3 5]) -> [8 4 6 3 6 8 4 0 3 5]", "(concat [2 6 1 8 9 2] [8 1]) -> [2 6 1 8 9 2 8 1]", "(concat [1 2 5] []) -> [1 2 5]", "(concat [0] []) -> [0]", "(concat [7 0 1] [3 0 5 8]) -> [7 0 1 3 0 5 8]", "(concat [7 9 8 4 4 2] [9 8]) -> [7 9 8 4 4 2 9 8]", "(concat [1 1] [4 7]) -> [1 1 4 7]", "(concat [9 9 4 4] [6 0 5 1 4]) -> [9 9 4 4 6 0 5 1 4]", "(concat [5 4 8 9] [5 8 6 9 0 1]) -> [5 4 8 9 5 8 6 9 0 1]"]}
