{"examples": ["(dupli []) -> []", "(dupli [5 4 4 9 7]) -> [5 5 4 4 4 4 9 9 7 7]", "(dupli []) -> []", "(dupli [1 6 5 7]) -> [1 1 6 6 5 5 7 7]", "(dupli [6]) -> [6 6]", "(dupli [1 7 4 2 7]) -> [1 1 7 7 4 4 2 2 7 7]"], "time": 0.210083, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 1]) -> [2 2 1 1]", "(dupli [1 3]) -> [1 1 3 3]", "(dupli [6 7 5 2 5]) -> [6 6 7 7 5 5 2 2 5 5]", "(dupli [1 1 7 9]) -> [1 1 1 1 7 7 9 9]", "(dupli [3 9 6 3]) -> [3 3 9 9 6 6 3 3]"], "time": 0.238328, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7]) -> [7 7]", "(dupli [6 7 4 1]) -> [6 6 7 7 4 4 1 1]", "(dupli [9 1 1]) -> [9 9 1 1 1 1]", "(dupli [8 9 6 9]) -> [8 8 9 9 6 6 9 9]", "(dupli [6 4 4 1 0]) -> [6 6 4 4 4 4 1 1 0 0]"], "time": 0.219612, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 7 7]) -> [9 9 7 7 7 7]", "(dupli [2 8 2 9]) -> [2 2 8 8 2 2 9 9]", "(dupli [5 8 0]) -> [5 5 8 8 0 0]", "(dupli [8]) -> [8 8]", "(dupli [3 0 5]) -> [3 3 0 0 5 5]"], "time": 0.204107, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 2]) -> [0 0 2 2]", "(dupli [7 9 4 3 6]) -> [7 7 9 9 4 4 3 3 6 6]", "(dupli [5 4 2 0 0]) -> [5 5 4 4 2 2 0 0 0 0]", "(dupli [4 1 4 1]) -> [4 4 1 1 4 4 1 1]", "(dupli [7 2 8 0]) -> [7 7 2 2 8 8 0 0]"], "time": 0.225912, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 6 4]) -> [8 8 6 6 4 4]", "(dupli [0 5 5]) -> [0 0 5 5 5 5]", "(dupli [2 9 2 2 4]) -> [2 2 9 9 2 2 2 2 4 4]", "(dupli []) -> []", "(dupli [6 3 3]) -> [6 6 3 3 3 3]"], "time": 0.216195, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 2]) -> [8 8 2 2]", "(dupli [1 8]) -> [1 1 8 8]", "(dupli [9 2 4]) -> [9 9 2 2 4 4]", "(dupli [7 6 3 5 9]) -> [7 7 6 6 3 3 5 5 9 9]", "(dupli [5 9 4]) -> [5 5 9 9 4 4]"], "time": 0.199029, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5]) -> [5 5]", "(dupli []) -> []", "(dupli [8 7 5 2]) -> [8 8 7 7 5 5 2 2]", "(dupli [2]) -> [2 2]", "(dupli [5 8 3 3]) -> [5 5 8 8 3 3 3 3]"], "time": 0.238646, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 2 6 3 2]) -> [2 2 2 2 6 6 3 3 2 2]", "(dupli [1]) -> [1 1]", "(dupli [6 0 9 0 5]) -> [6 6 0 0 9 9 0 0 5 5]", "(dupli [9]) -> [9 9]", "(dupli []) -> []"], "time": 0.22675, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 0 1 4 1]) -> [2 2 0 0 1 1 4 4 1 1]", "(dupli [6 8 3]) -> [6 6 8 8 3 3]", "(dupli [1]) -> [1 1]", "(dupli [2 1 6]) -> [2 2 1 1 6 6]", "(dupli [0 9 8 1 6]) -> [0 0 9 9 8 8 1 1 6 6]"], "time": 0.223097, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5]) -> [5 5]", "(dupli []) -> []", "(dupli [7 3 3 4 2]) -> [7 7 3 3 3 3 4 4 2 2]", "(dupli [4 4]) -> [4 4 4 4]", "(dupli []) -> []"], "time": 0.225039, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 0 8]) -> [4 4 0 0 8 8]", "(dupli [0 7]) -> [0 0 7 7]", "(dupli []) -> []", "(dupli [1 9 9]) -> [1 1 9 9 9 9]", "(dupli [7]) -> [7 7]"], "time": 0.230217, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 6]) -> [9 9 6 6]", "(dupli []) -> []", "(dupli [4 3 0 7]) -> [4 4 3 3 0 0 7 7]", "(dupli []) -> []", "(dupli [9 4 7]) -> [9 9 4 4 7 7]"], "time": 0.222198, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [4]) -> [4 4]", "(dupli [1 0 1]) -> [1 1 0 0 1 1]", "(dupli []) -> []", "(dupli []) -> []"], "time": 0.213976, "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4]) -> [4 4]", "(dupli [7 8 3]) -> [7 7 8 8 3 3]", "(dupli [1]) -> [1 1]", "(dupli [1 4]) -> [1 1 4 4]", "(dupli [7 1 4 0]) -> [7 7 1 1 4 4 0 0]"], "time": 0.216692, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1 3 4]) -> [1 1 3 3 4 4]", "(dupli [4 4 0 8 9]) -> [4 4 4 4 0 0 8 8 9 9]", "(dupli [2]) -> [2 2]", "(dupli [4 3]) -> [4 4 3 3]", "(dupli []) -> []"], "time": 0.203962, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 4 9]) -> [3 3 4 4 9 9]", "(dupli [0 5]) -> [0 0 5 5]", "(dupli [8 4 0 2 3]) -> [8 8 4 4 0 0 2 2 3 3]", "(dupli [5 1]) -> [5 5 1 1]", "(dupli [6 4 6 7]) -> [6 6 4 4 6 6 7 7]"], "time": 0.214047, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [9]) -> [9 9]", "(dupli [5 3 5 5]) -> [5 5 3 3 5 5 5 5]", "(dupli [9 4]) -> [9 9 4 4]", "(dupli [2]) -> [2 2]"], "time": 0.227382, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 8 2 5 3]) -> [0 0 8 8 2 2 5 5 3 3]", "(dupli [4 8]) -> [4 4 8 8]", "(dupli [6 8 5 2 6]) -> [6 6 8 8 5 5 2 2 6 6]", "(dupli [1 5]) -> [1 1 5 5]", "(dupli [1 1 9 2]) -> [1 1 1 1 9 9 2 2]"], "time": 0.229222, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 3 2 8 5]) -> [4 4 3 3 2 2 8 8 5 5]", "(dupli [2 6 2 1 8]) -> [2 2 6 6 2 2 1 1 8 8]", "(dupli [7 6]) -> [7 7 6 6]", "(dupli [1 6 6]) -> [1 1 6 6 6 6]", "(dupli [8 2 6 0 4]) -> [8 8 2 2 6 6 0 0 4 4]"], "time": 0.191054, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 4 1 5 2]) -> [7 7 4 4 1 1 5 5 2 2]", "(dupli [8]) -> [8 8]", "(dupli [4 6]) -> [4 4 6 6]", "(dupli []) -> []", "(dupli [0 2 7 2]) -> [0 0 2 2 7 7 2 2]"], "time": 0.197517, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 2 2 0 3]) -> [2 2 2 2 2 2 0 0 3 3]", "(dupli [5 7 7 9 2]) -> [5 5 7 7 7 7 9 9 2 2]", "(dupli [2 9 8 4 9]) -> [2 2 9 9 8 8 4 4 9 9]", "(dupli []) -> []", "(dupli [4 9 9]) -> [4 4 9 9 9 9]"], "time": 0.22628, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6]) -> [6 6]", "(dupli [2]) -> [2 2]", "(dupli [5 9 3]) -> [5 5 9 9 3 3]", "(dupli [8 6 7 8]) -> [8 8 6 6 7 7 8 8]", "(dupli [6 3 8]) -> [6 6 3 3 8 8]"], "time": 0.205062, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 8 4 2]) -> [6 6 8 8 4 4 2 2]", "(dupli [3]) -> [3 3]", "(dupli [3 9 9 6]) -> [3 3 9 9 9 9 6 6]", "(dupli [0 8 1]) -> [0 0 8 8 1 1]", "(dupli [3]) -> [3 3]"], "time": 0.243467, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6]) -> [6 6]", "(dupli [2]) -> [2 2]", "(dupli [7 6 0 9]) -> [7 7 6 6 0 0 9 9]", "(dupli [1 5 2 9]) -> [1 1 5 5 2 2 9 9]", "(dupli [0 1 8]) -> [0 0 1 1 8 8]"], "time": 0.218341, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 5 6 7]) -> [0 0 5 5 6 6 7 7]", "(dupli [3]) -> [3 3]", "(dupli [7 3 2]) -> [7 7 3 3 2 2]", "(dupli [9 1 7]) -> [9 9 1 1 7 7]", "(dupli [1 7 0 0 1]) -> [1 1 7 7 0 0 0 0 1 1]"], "time": 0.247221, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 9 4 4 3]) -> [6 6 9 9 4 4 4 4 3 3]", "(dupli [9 5 8 0 3]) -> [9 9 5 5 8 8 0 0 3 3]", "(dupli [4 6]) -> [4 4 6 6]", "(dupli [7 1 0 9]) -> [7 7 1 1 0 0 9 9]", "(dupli [8 4 9]) -> [8 8 4 4 9 9]"], "time": 0.219165, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [2 8 2 4]) -> [2 2 8 8 2 2 4 4]", "(dupli []) -> []", "(dupli [7 0 1 8]) -> [7 7 0 0 1 1 8 8]", "(dupli []) -> []"], "time": 0.23126, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 5 2 8]) -> [4 4 5 5 2 2 8 8]", "(dupli [3 7 5 5 9]) -> [3 3 7 7 5 5 5 5 9 9]", "(dupli [7 1]) -> [7 7 1 1]", "(dupli []) -> []", "(dupli [5]) -> [5 5]"], "time": 0.227681, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [8 2 2 2 0]) -> [8 8 2 2 2 2 2 2 0 0]", "(dupli []) -> []", "(dupli [1]) -> [1 1]", "(dupli [5 2 4 8 1]) -> [5 5 2 2 4 4 8 8 1 1]"], "time": 0.249156, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 1 6 4]) -> [7 7 1 1 6 6 4 4]", "(dupli [6 6 3]) -> [6 6 6 6 3 3]", "(dupli []) -> []", "(dupli [5 7 7 9 7]) -> [5 5 7 7 7 7 9 9 7 7]", "(dupli [4 4 3 9 7]) -> [4 4 4 4 3 3 9 9 7 7]"], "time": 0.226428, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 4 6]) -> [8 8 4 4 6 6]", "(dupli [3 3 3 0 4]) -> [3 3 3 3 3 3 0 0 4 4]", "(dupli [6 9 0 8 8]) -> [6 6 9 9 0 0 8 8 8 8]", "(dupli [8 7 3]) -> [8 8 7 7 3 3]", "(dupli []) -> []"], "time": 0.228979, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6]) -> [6 6]", "(dupli [1 3 7 0]) -> [1 1 3 3 7 7 0 0]", "(dupli [5 5 9]) -> [5 5 5 5 9 9]", "(dupli [2]) -> [2 2]", "(dupli []) -> []"], "time": 0.241041, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 9 7 5]) -> [2 2 9 9 7 7 5 5]", "(dupli [5 5 7 3]) -> [5 5 5 5 7 7 3 3]", "(dupli [8 9 2 3]) -> [8 8 9 9 2 2 3 3]", "(dupli [2 9 9 8]) -> [2 2 9 9 9 9 8 8]", "(dupli [8]) -> [8 8]"], "time": 0.244919, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5]) -> [5 5]", "(dupli [3 6]) -> [3 3 6 6]", "(dupli [2]) -> [2 2]", "(dupli []) -> []", "(dupli []) -> []"], "time": 0.213195, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli []) -> []", "(dupli [2 1 0 0]) -> [2 2 1 1 0 0 0 0]", "(dupli [1 8 8 2]) -> [1 1 8 8 8 8 2 2]", "(dupli []) -> []"], "time": 0.198101, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 4 8 2 6]) -> [7 7 4 4 8 8 2 2 6 6]", "(dupli []) -> []", "(dupli [2 4 6 4]) -> [2 2 4 4 6 6 4 4]", "(dupli []) -> []", "(dupli [2 0 4 3 1]) -> [2 2 0 0 4 4 3 3 1 1]"], "time": 0.195471, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 6 3]) -> [3 3 6 6 3 3]", "(dupli [4 8 2]) -> [4 4 8 8 2 2]", "(dupli [8 9 2 7 8]) -> [8 8 9 9 2 2 7 7 8 8]", "(dupli []) -> []", "(dupli [2 5 0]) -> [2 2 5 5 0 0]"], "time": 0.242428, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 1]) -> [6 6 1 1]", "(dupli [1 3 1 9 3]) -> [1 1 3 3 1 1 9 9 3 3]", "(dupli []) -> []", "(dupli []) -> []", "(dupli [5 6 9]) -> [5 5 6 6 9 9]"], "time": 0.242736, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5 9 4 9]) -> [5 5 9 9 4 4 9 9]", "(dupli [8 0 4 8]) -> [8 8 0 0 4 4 8 8]", "(dupli [5 3]) -> [5 5 3 3]", "(dupli [6 4]) -> [6 6 4 4]", "(dupli [6]) -> [6 6]"], "time": 0.271312, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [1]) -> [1 1]", "(dupli [2]) -> [2 2]", "(dupli [8 1 3 5]) -> [8 8 1 1 3 3 5 5]", "(dupli []) -> []"], "time": 0.243876, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 6 6 2]) -> [6 6 6 6 6 6 2 2]", "(dupli [2 8 8 9]) -> [2 2 8 8 8 8 9 9]", "(dupli [3 4 4 5]) -> [3 3 4 4 4 4 5 5]", "(dupli [5 3]) -> [5 5 3 3]", "(dupli []) -> []"], "time": 0.215636, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 3 2 5 7]) -> [2 2 3 3 2 2 5 5 7 7]", "(dupli [1]) -> [1 1]", "(dupli [8 3 2 1 3]) -> [8 8 3 3 2 2 1 1 3 3]", "(dupli [4]) -> [4 4]", "(dupli [7 4 8]) -> [7 7 4 4 8 8]"], "time": 0.197436, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 9 2 9 5]) -> [9 9 9 9 2 2 9 9 5 5]", "(dupli [1 0 3 6 4]) -> [1 1 0 0 3 3 6 6 4 4]", "(dupli []) -> []", "(dupli [8 6 9 8]) -> [8 8 6 6 9 9 8 8]", "(dupli [6 2 6 9]) -> [6 6 2 2 6 6 9 9]"], "time": 0.215363, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 5 9]) -> [4 4 5 5 9 9]", "(dupli [9 8 7]) -> [9 9 8 8 7 7]", "(dupli []) -> []", "(dupli [0 6 7]) -> [0 0 6 6 7 7]", "(dupli []) -> []"], "time": 0.210336, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1]) -> [1 1]", "(dupli []) -> []", "(dupli [1]) -> [1 1]", "(dupli [4 9 3 4 3]) -> [4 4 9 9 3 3 4 4 3 3]", "(dupli [9 4 7]) -> [9 9 4 4 7 7]"], "time": 0.265664, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 2 4 0 3]) -> [3 3 2 2 4 4 0 0 3 3]", "(dupli [2 2]) -> [2 2 2 2]", "(dupli [9 3 0]) -> [9 9 3 3 0 0]", "(dupli [4 7]) -> [4 4 7 7]", "(dupli []) -> []"], "time": 0.210499, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 0 2 2]) -> [8 8 0 0 2 2 2 2]", "(dupli []) -> []", "(dupli [1 1 3 7 5]) -> [1 1 1 1 3 3 7 7 5 5]", "(dupli [5 7 6 0]) -> [5 5 7 7 6 6 0 0]", "(dupli [8 2 3]) -> [8 8 2 2 3 3]"], "time": 0.266083, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [1 2 8]) -> [1 1 2 2 8 8]", "(dupli [0 6 8 7]) -> [0 0 6 6 8 8 7 7]", "(dupli [9]) -> [9 9]", "(dupli [7 6 0 1 7]) -> [7 7 6 6 0 0 1 1 7 7]"], "time": 0.217966, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 3 8]) -> [7 7 3 3 8 8]", "(dupli [8 3 3 5 3]) -> [8 8 3 3 3 3 5 5 3 3]", "(dupli [1 3 4]) -> [1 1 3 3 4 4]", "(dupli [3]) -> [3 3]", "(dupli []) -> []"], "time": 0.228637, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 4 3 3]) -> [8 8 4 4 3 3 3 3]", "(dupli []) -> []", "(dupli [6]) -> [6 6]", "(dupli [9 4 9 2]) -> [9 9 4 4 9 9 2 2]", "(dupli [2 5 0 9 0]) -> [2 2 5 5 0 0 9 9 0 0]"], "time": 0.191686, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 7]) -> [6 6 7 7]", "(dupli [0 3 6 2 9]) -> [0 0 3 3 6 6 2 2 9 9]", "(dupli [1 9 8 0 3]) -> [1 1 9 9 8 8 0 0 3 3]", "(dupli [3 2 5 9]) -> [3 3 2 2 5 5 9 9]", "(dupli [5 2]) -> [5 5 2 2]"], "time": 0.191639, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4]) -> [4 4]", "(dupli [4 7]) -> [4 4 7 7]", "(dupli [0]) -> [0 0]", "(dupli [6 4]) -> [6 6 4 4]", "(dupli [9 7 1 9 5]) -> [9 9 7 7 1 1 9 9 5 5]"], "time": 0.218419, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 1 3 5 0]) -> [2 2 1 1 3 3 5 5 0 0]", "(dupli [7]) -> [7 7]", "(dupli [5 1 6 3 4]) -> [5 5 1 1 6 6 3 3 4 4]", "(dupli []) -> []", "(dupli [6 9 5 2]) -> [6 6 9 9 5 5 2 2]"], "time": 0.214788, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5 3 8 6 7]) -> [5 5 3 3 8 8 6 6 7 7]", "(dupli []) -> []", "(dupli [0 9 0 8]) -> [0 0 9 9 0 0 8 8]", "(dupli [2 7 8]) -> [2 2 7 7 8 8]", "(dupli [7 3 2 4 9]) -> [7 7 3 3 2 2 4 4 9 9]"], "time": 0.258539, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9]) -> [9 9]", "(dupli [8 8 3 9]) -> [8 8 8 8 3 3 9 9]", "(dupli [0 7 3]) -> [0 0 7 7 3 3]", "(dupli [9]) -> [9 9]", "(dupli []) -> []"], "time": 0.250143, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 1]) -> [3 3 1 1]", "(dupli [3 9 0 6]) -> [3 3 9 9 0 0 6 6]", "(dupli [0 0]) -> [0 0 0 0]", "(dupli []) -> []", "(dupli []) -> []"], "time": 0.218592, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 2]) -> [2 2 2 2]", "(dupli []) -> []", "(dupli [4]) -> [4 4]", "(dupli []) -> []", "(dupli []) -> []"], "time": 0.18516, "solution": "(let dupli (let a (lambda (b) (foldl b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli []) -> []", "(dupli [8]) -> [8 8]", "(dupli []) -> []", "(dupli [1 0 9 0]) -> [1 1 0 0 9 9 0 0]"], "time": 0.236586, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [5 2 3 1 4]) -> [5 5 2 2 3 3 1 1 4 4]", "(dupli [6 2]) -> [6 6 2 2]", "(dupli [0]) -> [0 0]", "(dupli [8 6 1]) -> [8 8 6 6 1 1]", "(dupli [7]) -> [7 7]"], "time": 0.233239, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8]) -> [8 8]", "(dupli [5 8 6]) -> [5 5 8 8 6 6]", "(dupli [8 1 6 0]) -> [8 8 1 1 6 6 0 0]", "(dupli [2]) -> [2 2]", "(dupli [7 0 2]) -> [7 7 0 0 2 2]"], "time": 0.195171, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 4]) -> [2 2 4 4]", "(dupli [9 8 7 4 9]) -> [9 9 8 8 7 7 4 4 9 9]", "(dupli [0 3 3 3]) -> [0 0 3 3 3 3 3 3]", "(dupli [7 5 7]) -> [7 7 5 5 7 7]", "(dupli [2 2]) -> [2 2 2 2]"], "time": 0.231584, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 8]) -> [3 3 8 8]", "(dupli [8]) -> [8 8]", "(dupli [8 3]) -> [8 8 3 3]", "(dupli [2]) -> [2 2]", "(dupli [5 6 3]) -> [5 5 6 6 3 3]"], "time": 0.227476, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 9 1 2]) -> [0 0 9 9 1 1 2 2]", "(dupli [7 9]) -> [7 7 9 9]", "(dupli [4 2]) -> [4 4 2 2]", "(dupli []) -> []", "(dupli [6 5 6 2]) -> [6 6 5 5 6 6 2 2]"], "time": 0.213151, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 3 2]) -> [6 6 3 3 2 2]", "(dupli [5 8 9 8]) -> [5 5 8 8 9 9 8 8]", "(dupli [1 8 2 5]) -> [1 1 8 8 2 2 5 5]", "(dupli [8 6]) -> [8 8 6 6]", "(dupli [5 2 1 9]) -> [5 5 2 2 1 1 9 9]"], "time": 0.259097, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 4 0 7 0]) -> [3 3 4 4 0 0 7 7 0 0]", "(dupli [9 8 3 4]) -> [9 9 8 8 3 3 4 4]", "(dupli [0 6]) -> [0 0 6 6]", "(dupli []) -> []", "(dupli []) -> []"], "time": 0.247803, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7]) -> [7 7]", "(dupli []) -> []", "(dupli [7]) -> [7 7]", "(dupli []) -> []", "(dupli [7 3 6]) -> [7 7 3 3 6 6]"], "time": 0.245875, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 8 4 4]) -> [3 3 8 8 4 4 4 4]", "(dupli [5 1 8]) -> [5 5 1 1 8 8]", "(dupli [9 0 7 0 3]) -> [9 9 0 0 7 7 0 0 3 3]", "(dupli [8 8 8]) -> [8 8 8 8 8 8]", "(dupli []) -> []"], "time": 0.180729, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 0 7]) -> [6 6 0 0 7 7]", "(dupli [7 0 5]) -> [7 7 0 0 5 5]", "(dupli []) -> []", "(dupli [8]) -> [8 8]", "(dupli [8 2 4]) -> [8 8 2 2 4 4]"], "time": 0.152005, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [1]) -> [1 1]", "(dupli [1 9 6]) -> [1 1 9 9 6 6]", "(dupli [3 7 4 7]) -> [3 3 7 7 4 4 7 7]", "(dupli []) -> []", "(dupli [5 5]) -> [5 5 5 5]"], "time": 0.205372, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 8 6 9]) -> [8 8 8 8 6 6 9 9]", "(dupli [0 9 6]) -> [0 0 9 9 6 6]", "(dupli [3 9]) -> [3 3 9 9]", "(dupli [4 1 2]) -> [4 4 1 1 2 2]", "(dupli []) -> []"], "time": 0.262865, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 4 1 5 1]) -> [4 4 4 4 1 1 5 5 1 1]", "(dupli [2]) -> [2 2]", "(dupli [4 0 0 9 6]) -> [4 4 0 0 0 0 9 9 6 6]", "(dupli [4 0 1 2]) -> [4 4 0 0 1 1 2 2]", "(dupli []) -> []"], "time": 0.248201, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 7 1]) -> [7 7 7 7 1 1]", "(dupli [4 2 8 1]) -> [4 4 2 2 8 8 1 1]", "(dupli []) -> []", "(dupli [6 5]) -> [6 6 5 5]", "(dupli []) -> []"], "time": 0.196466, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 2 4 4]) -> [3 3 2 2 4 4 4 4]", "(dupli [7 6 1]) -> [7 7 6 6 1 1]", "(dupli [2 0 4 3 7]) -> [2 2 0 0 4 4 3 3 7 7]", "(dupli [0 3 6 3 5]) -> [0 0 3 3 6 6 3 3 5 5]", "(dupli [0 0]) -> [0 0 0 0]"], "time": 0.296755, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 8 1 0]) -> [4 4 8 8 1 1 0 0]", "(dupli [6 9 1]) -> [6 6 9 9 1 1]", "(dupli [3 0 8 5]) -> [3 3 0 0 8 8 5 5]", "(dupli [3 8 5 1]) -> [3 3 8 8 5 5 1 1]", "(dupli [2 3]) -> [2 2 3 3]"], "time": 0.259851, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 3]) -> [0 0 3 3]", "(dupli [9 5 0 9 5]) -> [9 9 5 5 0 0 9 9 5 5]", "(dupli [5 0 9 4 8]) -> [5 5 0 0 9 9 4 4 8 8]", "(dupli [0 2]) -> [0 0 2 2]", "(dupli [5 6 4 4]) -> [5 5 6 6 4 4 4 4]"], "time": 0.186187, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 6 4 9 2]) -> [9 9 6 6 4 4 9 9 2 2]", "(dupli [6 7 1 7 6]) -> [6 6 7 7 1 1 7 7 6 6]", "(dupli []) -> []", "(dupli [4 6 5 9]) -> [4 4 6 6 5 5 9 9]", "(dupli [8 2 5]) -> [8 8 2 2 5 5]"], "time": 0.262415, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 8]) -> [4 4 8 8]", "(dupli [1 3 9 9]) -> [1 1 3 3 9 9 9 9]", "(dupli [5]) -> [5 5]", "(dupli [9 4 1]) -> [9 9 4 4 1 1]", "(dupli [6 7 4]) -> [6 6 7 7 4 4]"], "time": 0.300462, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 9 3 0 7]) -> [8 8 9 9 3 3 0 0 7 7]", "(dupli [4 8 4]) -> [4 4 8 8 4 4]", "(dupli [0 3 2 3 5]) -> [0 0 3 3 2 2 3 3 5 5]", "(dupli [9 2 7 2]) -> [9 9 2 2 7 7 2 2]", "(dupli [0 6]) -> [0 0 6 6]"], "time": 0.192138, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 4]) -> [3 3 4 4]", "(dupli [1 5 1]) -> [1 1 5 5 1 1]", "(dupli [8]) -> [8 8]", "(dupli []) -> []", "(dupli []) -> []"], "time": 0.255523, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6]) -> [6 6]", "(dupli [1 2 3]) -> [1 1 2 2 3 3]", "(dupli [8]) -> [8 8]", "(dupli [0 4 2]) -> [0 0 4 4 2 2]", "(dupli [0 4 7 0 7]) -> [0 0 4 4 7 7 0 0 7 7]"], "time": 0.218949, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 1]) -> [0 0 1 1]", "(dupli [6 0]) -> [6 6 0 0]", "(dupli [1 9]) -> [1 1 9 9]", "(dupli [9 2]) -> [9 9 2 2]", "(dupli [5 6]) -> [5 5 6 6]"], "time": 0.277575, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6]) -> [6 6]", "(dupli [7]) -> [7 7]", "(dupli [5 9 0]) -> [5 5 9 9 0 0]", "(dupli [7 6 8]) -> [7 7 6 6 8 8]", "(dupli [5 5 1]) -> [5 5 5 5 1 1]"], "time": 0.199529, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 8 0]) -> [8 8 8 8 0 0]", "(dupli [9 4]) -> [9 9 4 4]", "(dupli [2 5]) -> [2 2 5 5]", "(dupli [4 9 7 3]) -> [4 4 9 9 7 7 3 3]", "(dupli [6 9]) -> [6 6 9 9]"], "time": 0.218431, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 4]) -> [3 3 4 4]", "(dupli [2 4 0 6 7]) -> [2 2 4 4 0 0 6 6 7 7]", "(dupli [1 0 2 3 8]) -> [1 1 0 0 2 2 3 3 8 8]", "(dupli [4 0 6 0 0]) -> [4 4 0 0 6 6 0 0 0 0]", "(dupli [0 5]) -> [0 0 5 5]"], "time": 0.178084, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [4 2 7 1]) -> [4 4 2 2 7 7 1 1]", "(dupli [6 7 0]) -> [6 6 7 7 0 0]", "(dupli [3 4 3 2]) -> [3 3 4 4 3 3 2 2]", "(dupli []) -> []"], "time": 0.237897, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 7 3 1]) -> [9 9 7 7 3 3 1 1]", "(dupli [9]) -> [9 9]", "(dupli [4 5 5 8]) -> [4 4 5 5 5 5 8 8]", "(dupli []) -> []", "(dupli [4 0 5]) -> [4 4 0 0 5 5]"], "time": 0.245053, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [7 1 7 8]) -> [7 7 1 1 7 7 8 8]", "(dupli [9 4 9]) -> [9 9 4 4 9 9]", "(dupli [3 2 9]) -> [3 3 2 2 9 9]", "(dupli [9 6]) -> [9 9 6 6]", "(dupli [0 1]) -> [0 0 1 1]"], "time": 0.157903, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [3 2 3 2]) -> [3 3 2 2 3 3 2 2]", "(dupli [2 1 8]) -> [2 2 1 1 8 8]", "(dupli [2 8 8 6 6]) -> [2 2 8 8 8 8 6 6 6 6]", "(dupli [4 9 3]) -> [4 4 9 9 3 3]"], "time": 0.251888, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli [5 2 5 9]) -> [5 5 2 2 5 5 9 9]", "(dupli [0 8 8 2]) -> [0 0 8 8 8 8 2 2]", "(dupli []) -> []", "(dupli [8 2]) -> [8 8 2 2]"], "time": 0.230496, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4 1]) -> [4 4 1 1]", "(dupli [7]) -> [7 7]", "(dupli [2 4 0 4]) -> [2 2 4 4 0 0 4 4]", "(dupli [3 2 0]) -> [3 3 2 2 0 0]", "(dupli [7]) -> [7 7]"], "time": 0.230611, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [3 2]) -> [3 3 2 2]", "(dupli [8 1 6]) -> [8 8 1 1 6 6]", "(dupli [0 7 0 7]) -> [0 0 7 7 0 0 7 7]", "(dupli [8 1]) -> [8 8 1 1]", "(dupli []) -> []"], "time": 0.200539, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [6 1]) -> [6 6 1 1]", "(dupli [4 8 8 9 6]) -> [4 4 8 8 8 8 9 9 6 6]", "(dupli [6 1 7 8]) -> [6 6 1 1 7 7 8 8]", "(dupli [1 4 9 5 5]) -> [1 1 4 4 9 9 5 5 5 5]", "(dupli [8 4 3 6]) -> [8 8 4 4 3 3 6 6]"], "time": 0.199357, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4]) -> [4 4]", "(dupli [1 9]) -> [1 1 9 9]", "(dupli [0]) -> [0 0]", "(dupli [7 6 2 8]) -> [7 7 6 6 2 2 8 8]", "(dupli []) -> []"], "time": 0.188675, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [2 1 6 4 1]) -> [2 2 1 1 6 6 4 4 1 1]", "(dupli [9 2 6 0 6]) -> [9 9 2 2 6 6 0 0 6 6]", "(dupli []) -> []", "(dupli [6 4 5 5]) -> [6 6 4 4 5 5 5 5]", "(dupli []) -> []"], "time": 0.227874, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [0 0 3 5]) -> [0 0 0 0 3 3 5 5]", "(dupli [8 7]) -> [8 8 7 7]", "(dupli [8 5 4 8 5]) -> [8 8 5 5 4 4 8 8 5 5]", "(dupli []) -> []", "(dupli []) -> []"], "time": 0.241065, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [4]) -> [4 4]", "(dupli [7 1 2 4 9]) -> [7 7 1 1 2 2 4 4 9 9]", "(dupli [8 0]) -> [8 8 0 0]", "(dupli [5 7 0]) -> [5 5 7 7 0 0]", "(dupli [1 8]) -> [1 1 8 8]"], "time": 0.109039, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [8 7]) -> [8 8 7 7]", "(dupli [2 4 6 3]) -> [2 2 4 4 6 6 3 3]", "(dupli [1 6]) -> [1 1 6 6]", "(dupli [6 1]) -> [6 6 1 1]", "(dupli [7 7 2 5]) -> [7 7 7 7 2 2 5 5]"], "time": 0.110737, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli [9 0]) -> [9 9 0 0]", "(dupli [2 9 9]) -> [2 2 9 9 9 9]", "(dupli [8]) -> [8 8]", "(dupli [5 2 5 6 1]) -> [5 5 2 2 5 5 6 6 1 1]", "(dupli [1 2 2]) -> [1 1 2 2 2 2]"], "time": 0.109706, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
{"examples": ["(dupli []) -> []", "(dupli []) -> []", "(dupli []) -> []", "(dupli [5 0 0]) -> [5 5 0 0 0 0]", "(dupli [2 0 7 8]) -> [2 2 0 0 7 7 8 8]", "(dupli [0 1 8 2 3]) -> [0 0 1 1 8 8 2 2 3 3]"], "time": 0.108944, "solution": "(let dupli (let a (lambda (b) (foldr b (lambda (d c) (cons c (cons c d))) [])) _) _)", "name": "dupli"}
