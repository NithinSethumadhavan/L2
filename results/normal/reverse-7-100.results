{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [9 2 2 1 8]) -> [8 1 2 2 9]", "(reverse [6 2 1 7 6]) -> [6 7 1 2 6]", "(reverse [3 6 4]) -> [4 6 3]", "(reverse [1 1 6 1]) -> [1 6 1 1]", "(reverse [4]) -> [4]"], "time": 0.028239}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [7 2]) -> [2 7]", "(reverse [8]) -> [8]", "(reverse [8]) -> [8]", "(reverse [8]) -> [8]", "(reverse [6 5 0]) -> [0 5 6]"], "time": 0.04359}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [2 1 5 1]) -> [1 5 1 2]", "(reverse [7 0 3 4 5]) -> [5 4 3 0 7]", "(reverse [2 5 0 2]) -> [2 0 5 2]", "(reverse [4 8 8 8 3]) -> [3 8 8 8 4]", "(reverse [3]) -> [3]"], "time": 0.040404}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [5 3 0]) -> [0 3 5]", "(reverse [5 1 9 3]) -> [3 9 1 5]", "(reverse [4 8]) -> [8 4]", "(reverse []) -> []", "(reverse [0]) -> [0]"], "time": 0.045541}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [3 9]) -> [9 3]", "(reverse [9]) -> [9]", "(reverse [9 2]) -> [2 9]", "(reverse [1 1 2 2]) -> [2 2 1 1]", "(reverse [1 4 4 6]) -> [6 4 4 1]"], "time": 0.037246}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [0]) -> [0]", "(reverse [4 9]) -> [9 4]", "(reverse [4 8 6]) -> [6 8 4]", "(reverse []) -> []", "(reverse [3 8 7 6]) -> [6 7 8 3]"], "time": 0.054651}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [7 4 6]) -> [6 4 7]", "(reverse []) -> []", "(reverse [1 7]) -> [7 1]", "(reverse []) -> []", "(reverse []) -> []"], "time": 0.036433}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [1 4 5 2 8]) -> [8 2 5 4 1]", "(reverse [0 1]) -> [1 0]", "(reverse [3 3 3]) -> [3 3 3]", "(reverse [3 9]) -> [9 3]"], "time": 0.054544}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [7 4 2 2 6]) -> [6 2 2 4 7]", "(reverse [3 8 9 8 7]) -> [7 8 9 8 3]", "(reverse [0]) -> [0]", "(reverse [3]) -> [3]", "(reverse []) -> []"], "time": 0.044802}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [8 8 1 5 4]) -> [4 5 1 8 8]", "(reverse [7 5]) -> [5 7]", "(reverse [6 1 2 5]) -> [5 2 1 6]", "(reverse [0 6 2 9 7]) -> [7 9 2 6 0]"], "time": 0.031484}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [2 4]) -> [4 2]", "(reverse [7]) -> [7]", "(reverse [0 6]) -> [6 0]", "(reverse [4 1]) -> [1 4]", "(reverse [3 2]) -> [2 3]"], "time": 0.04803}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [9 3 0]) -> [0 3 9]", "(reverse [8 3 3 0 2]) -> [2 0 3 3 8]", "(reverse []) -> []", "(reverse [1 8 1 2 8]) -> [8 2 1 8 1]", "(reverse []) -> []"], "time": 0.040482}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [2]) -> [2]", "(reverse [1]) -> [1]", "(reverse [5 6 3 6]) -> [6 3 6 5]", "(reverse [4 1 8 8 1]) -> [1 8 8 1 4]", "(reverse [7 9]) -> [9 7]"], "time": 0.044982}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [2 0 4]) -> [4 0 2]", "(reverse [7 1 4 3]) -> [3 4 1 7]", "(reverse [9 6 5 7]) -> [7 5 6 9]", "(reverse [6 6 1 5 4]) -> [4 5 1 6 6]", "(reverse [7 5 0 3]) -> [3 0 5 7]"], "time": 0.044645}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [5 1]) -> [1 5]", "(reverse [2]) -> [2]", "(reverse [1]) -> [1]", "(reverse [4]) -> [4]", "(reverse []) -> []"], "time": 0.036001}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [6 8 8 3 6]) -> [6 3 8 8 6]", "(reverse [0 5 7]) -> [7 5 0]", "(reverse [9 0 7 2]) -> [2 7 0 9]", "(reverse [9 1]) -> [1 9]", "(reverse [5 1]) -> [1 5]"], "time": 0.039671}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [9 4 4 0 7]) -> [7 0 4 4 9]", "(reverse [9 4 3 2 0]) -> [0 2 3 4 9]", "(reverse [9 4]) -> [4 9]", "(reverse [5 1 7]) -> [7 1 5]", "(reverse [1 2 2 1 2]) -> [2 1 2 2 1]"], "time": 0.025886}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [7 3 1]) -> [1 3 7]", "(reverse [1]) -> [1]", "(reverse [5]) -> [5]", "(reverse [3 7 1]) -> [1 7 3]", "(reverse [7 8 9 2]) -> [2 9 8 7]"], "time": 0.030925}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [1]) -> [1]", "(reverse [6 8 1]) -> [1 8 6]", "(reverse [6]) -> [6]", "(reverse []) -> []", "(reverse [7 6 5 6]) -> [6 5 6 7]"], "time": 0.027162}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [2 4 5]) -> [5 4 2]", "(reverse [3 6]) -> [6 3]", "(reverse [1]) -> [1]", "(reverse [9 9 8 9]) -> [9 8 9 9]", "(reverse [9 6 0 5]) -> [5 0 6 9]"], "time": 0.027556}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [8 4 2 0 0]) -> [0 0 2 4 8]", "(reverse [7]) -> [7]", "(reverse [2 6 5 0]) -> [0 5 6 2]", "(reverse []) -> []", "(reverse [2 8 1 6]) -> [6 1 8 2]"], "time": 0.033773}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [7 7 9]) -> [9 7 7]", "(reverse [0 2 0]) -> [0 2 0]", "(reverse [7 3]) -> [3 7]", "(reverse [0 2 8 9 5]) -> [5 9 8 2 0]", "(reverse [0 6 4 1]) -> [1 4 6 0]"], "time": 0.041504}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [6]) -> [6]", "(reverse [5 4 2]) -> [2 4 5]", "(reverse []) -> []", "(reverse [9 5 4]) -> [4 5 9]", "(reverse [5 5 8 8 3]) -> [3 8 8 5 5]"], "time": 0.036019}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [9]) -> [9]", "(reverse [7 2]) -> [2 7]", "(reverse [2 8 3 4]) -> [4 3 8 2]", "(reverse [3 4 0 4 4]) -> [4 4 0 4 3]", "(reverse [3 2 0 5 7]) -> [7 5 0 2 3]"], "time": 0.038479}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [2]) -> [2]", "(reverse [8 6 5]) -> [5 6 8]", "(reverse []) -> []", "(reverse [0 4]) -> [4 0]", "(reverse [4 4 4 6 6]) -> [6 6 4 4 4]"], "time": 0.041171}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [4 1 5]) -> [5 1 4]", "(reverse [1 9 9 1 9]) -> [9 1 9 9 1]", "(reverse [3 1 2 9]) -> [9 2 1 3]", "(reverse [5 0 3]) -> [3 0 5]"], "time": 0.033971}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [2]) -> [2]", "(reverse [8]) -> [8]", "(reverse [6 7]) -> [7 6]", "(reverse [7 8 6 5]) -> [5 6 8 7]", "(reverse [1 5]) -> [5 1]"], "time": 0.041301}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [3]) -> [3]", "(reverse [9 4 9 1 7]) -> [7 1 9 4 9]", "(reverse [4 8 0 0]) -> [0 0 8 4]", "(reverse [1]) -> [1]", "(reverse []) -> []"], "time": 0.041676}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [2 1 7 2 5]) -> [5 2 7 1 2]", "(reverse [2]) -> [2]", "(reverse [5]) -> [5]", "(reverse []) -> []", "(reverse [2 7 5 5]) -> [5 5 7 2]"], "time": 0.026612}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [2 2]) -> [2 2]", "(reverse [5 9 8 9 8]) -> [8 9 8 9 5]", "(reverse [4 7 0 5 7]) -> [7 5 0 7 4]", "(reverse [1 7 4 0]) -> [0 4 7 1]", "(reverse [0 8 1]) -> [1 8 0]"], "time": 0.03282}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [8 3]) -> [3 8]", "(reverse [6 0 1 8]) -> [8 1 0 6]", "(reverse [2 5 7]) -> [7 5 2]", "(reverse [1 4]) -> [4 1]", "(reverse []) -> []"], "time": 0.045964}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [3 5]) -> [5 3]", "(reverse [9]) -> [9]", "(reverse [6 6 1 5]) -> [5 1 6 6]", "(reverse [1 1 6]) -> [6 1 1]", "(reverse []) -> []"], "time": 0.033355}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [0 6]) -> [6 0]", "(reverse [2 1 4 4 9]) -> [9 4 4 1 2]", "(reverse [4 5 3 0]) -> [0 3 5 4]", "(reverse [9 0 6 9]) -> [9 6 0 9]"], "time": 0.027094}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [9 0 6 4]) -> [4 6 0 9]", "(reverse [0 2 2 7 5]) -> [5 7 2 2 0]", "(reverse [5 2]) -> [2 5]", "(reverse [2]) -> [2]", "(reverse [3]) -> [3]"], "time": 0.026679}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [4 1 1]) -> [1 1 4]", "(reverse [3]) -> [3]", "(reverse []) -> []", "(reverse [3 6 9 0]) -> [0 9 6 3]", "(reverse [9 9 4 1 0]) -> [0 1 4 9 9]"], "time": 0.032654}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [5 8 4 1]) -> [1 4 8 5]", "(reverse [0 9]) -> [9 0]", "(reverse [9 7 5 5]) -> [5 5 7 9]", "(reverse [7 0 7]) -> [7 0 7]"], "time": 0.036005}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [4 4 8 8]) -> [8 8 4 4]", "(reverse [4 1]) -> [1 4]", "(reverse [3 9 3]) -> [3 9 3]", "(reverse [5]) -> [5]"], "time": 0.043322}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [6 2 7]) -> [7 2 6]", "(reverse [2 3 2]) -> [2 3 2]", "(reverse []) -> []", "(reverse []) -> []", "(reverse []) -> []"], "time": 0.035201}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [4]) -> [4]", "(reverse [8 2 6 2]) -> [2 6 2 8]", "(reverse [0 2 1 0 6]) -> [6 0 1 2 0]", "(reverse [0]) -> [0]", "(reverse [9 7]) -> [7 9]"], "time": 0.029691}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [1 3 4 2]) -> [2 4 3 1]", "(reverse [6]) -> [6]", "(reverse [2 1 5]) -> [5 1 2]", "(reverse [0 5 8 4]) -> [4 8 5 0]", "(reverse [4 4]) -> [4 4]"], "time": 0.03394}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [4 6 0 9]) -> [9 0 6 4]", "(reverse []) -> []", "(reverse [0]) -> [0]", "(reverse [8 5 8]) -> [8 5 8]", "(reverse [0 7 9 7]) -> [7 9 7 0]"], "time": 0.043817}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [5]) -> [5]", "(reverse [4]) -> [4]", "(reverse [1]) -> [1]", "(reverse [9 3 0 2 2]) -> [2 2 0 3 9]"], "time": 0.027376}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [0 7]) -> [7 0]", "(reverse [3 9 7 1]) -> [1 7 9 3]", "(reverse [2 2 4 2]) -> [2 4 2 2]", "(reverse [8 0 1]) -> [1 0 8]", "(reverse []) -> []"], "time": 0.041649}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [2 8]) -> [8 2]", "(reverse [9 7 6]) -> [6 7 9]", "(reverse []) -> []", "(reverse [5]) -> [5]", "(reverse [8 0 7 6 0]) -> [0 6 7 0 8]"], "time": 0.029766}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [1 6]) -> [6 1]", "(reverse [8 5 2 8]) -> [8 2 5 8]", "(reverse [5 6]) -> [6 5]", "(reverse [2 6]) -> [6 2]", "(reverse []) -> []"], "time": 0.036089}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [2 4]) -> [4 2]", "(reverse [2]) -> [2]", "(reverse []) -> []", "(reverse []) -> []", "(reverse [6 9 5 3 0]) -> [0 3 5 9 6]"], "time": 0.046948}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [0 1]) -> [1 0]", "(reverse [9 0 8 1 5]) -> [5 1 8 0 9]", "(reverse [1]) -> [1]", "(reverse [8 2]) -> [2 8]", "(reverse [9 3 5 0]) -> [0 5 3 9]"], "time": 0.047724}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [9]) -> [9]", "(reverse [4 2 6 3]) -> [3 6 2 4]", "(reverse [1]) -> [1]", "(reverse []) -> []"], "time": 0.044913}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [6 2 2 9 0]) -> [0 9 2 2 6]", "(reverse []) -> []", "(reverse [3 0 8]) -> [8 0 3]", "(reverse [1 3 9 6]) -> [6 9 3 1]", "(reverse []) -> []"], "time": 0.027684}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [5]) -> [5]", "(reverse []) -> []", "(reverse [1 6 2]) -> [2 6 1]", "(reverse [9]) -> [9]", "(reverse [1]) -> [1]"], "time": 0.029436}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse []) -> []", "(reverse [8 0 8 6 5]) -> [5 6 8 0 8]", "(reverse [0 8 1 1]) -> [1 1 8 0]", "(reverse [1 0 5]) -> [5 0 1]"], "time": 0.035597}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [0 3 0 3]) -> [3 0 3 0]", "(reverse [3 1 2 2 0]) -> [0 2 2 1 3]", "(reverse [0]) -> [0]", "(reverse []) -> []", "(reverse [3 6]) -> [6 3]"], "time": 0.027021}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [3 2 4 7]) -> [7 4 2 3]", "(reverse []) -> []", "(reverse [8]) -> [8]", "(reverse [0 0 6 0 5]) -> [5 0 6 0 0]", "(reverse [7 8 3 0 3]) -> [3 0 3 8 7]"], "time": 0.045459}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [6 1 0 3]) -> [3 0 1 6]", "(reverse [6 2 1 5 5]) -> [5 5 1 2 6]", "(reverse []) -> []", "(reverse [1 6 4 9]) -> [9 4 6 1]", "(reverse [5]) -> [5]"], "time": 0.040526}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [2 5 1 9]) -> [9 1 5 2]", "(reverse [0 7 4 8 9]) -> [9 8 4 7 0]", "(reverse [7]) -> [7]", "(reverse [9 1]) -> [1 9]", "(reverse [4 1 2]) -> [2 1 4]"], "time": 0.047441}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [4 3 6 7]) -> [7 6 3 4]", "(reverse [9]) -> [9]", "(reverse [5 2 8]) -> [8 2 5]", "(reverse [5 8]) -> [8 5]", "(reverse [8]) -> [8]"], "time": 0.03138}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [7 7 2]) -> [2 7 7]", "(reverse [5 5]) -> [5 5]", "(reverse [4 8]) -> [8 4]", "(reverse [3 9]) -> [9 3]", "(reverse [0]) -> [0]"], "time": 0.027221}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [6 3 5 7 3]) -> [3 7 5 3 6]", "(reverse [4]) -> [4]", "(reverse [4 5 2 9]) -> [9 2 5 4]", "(reverse [6 7]) -> [7 6]", "(reverse []) -> []"], "time": 0.028809}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [4 6 3 5 0]) -> [0 5 3 6 4]", "(reverse [8 7 2 9 6]) -> [6 9 2 7 8]", "(reverse [4]) -> [4]", "(reverse []) -> []", "(reverse [5 1 6 9]) -> [9 6 1 5]"], "time": 0.034144}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [8 5 2 4 1]) -> [1 4 2 5 8]", "(reverse [7]) -> [7]", "(reverse []) -> []", "(reverse [3 7 2 2]) -> [2 2 7 3]"], "time": 0.037279}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [4]) -> [4]", "(reverse [4 0 9]) -> [9 0 4]", "(reverse [3 7 7]) -> [7 7 3]", "(reverse []) -> []"], "time": 0.028337}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [8]) -> [8]", "(reverse []) -> []", "(reverse [1 4 4 6 5]) -> [5 6 4 4 1]", "(reverse [1 0 7]) -> [7 0 1]", "(reverse [5 2]) -> [2 5]"], "time": 0.040468}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [6 9 4]) -> [4 9 6]", "(reverse [0 4 0]) -> [0 4 0]", "(reverse [6 6]) -> [6 6]", "(reverse []) -> []", "(reverse [7 9 3 1]) -> [1 3 9 7]"], "time": 0.03748}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [5 3 4]) -> [4 3 5]", "(reverse []) -> []", "(reverse [9 0 4]) -> [4 0 9]", "(reverse [1 2 3 4 4]) -> [4 4 3 2 1]", "(reverse [8 7]) -> [7 8]"], "time": 0.038538}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [6 7]) -> [7 6]", "(reverse [0 1 5 1]) -> [1 5 1 0]", "(reverse []) -> []", "(reverse []) -> []"], "time": 0.042562}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [9]) -> [9]", "(reverse [6 4 7 5]) -> [5 7 4 6]", "(reverse [9 4 3]) -> [3 4 9]", "(reverse [7 8 5 0]) -> [0 5 8 7]", "(reverse [2 7 2 6]) -> [6 2 7 2]"], "time": 0.038248}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [8]) -> [8]", "(reverse [1 3 8 1 7]) -> [7 1 8 3 1]", "(reverse [2 8 8 8 9]) -> [9 8 8 8 2]", "(reverse [1 8 0 2]) -> [2 0 8 1]", "(reverse [2 7 4]) -> [4 7 2]"], "time": 0.026306}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [2 1]) -> [1 2]", "(reverse [4 9 0]) -> [0 9 4]", "(reverse [7]) -> [7]", "(reverse [8 1 2 9 5]) -> [5 9 2 1 8]", "(reverse [5]) -> [5]"], "time": 0.044864}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [0 2 6 0 0]) -> [0 0 6 2 0]", "(reverse [9]) -> [9]", "(reverse [5]) -> [5]", "(reverse [2 5]) -> [5 2]", "(reverse []) -> []"], "time": 0.028258}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [7]) -> [7]", "(reverse [9 6 8]) -> [8 6 9]", "(reverse [8 8]) -> [8 8]", "(reverse []) -> []", "(reverse [4 4 3 5 5]) -> [5 5 3 4 4]"], "time": 0.036099}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [4 4 0 2]) -> [2 0 4 4]", "(reverse [7 5 9 0 0]) -> [0 0 9 5 7]", "(reverse [8 3 9]) -> [9 3 8]", "(reverse [6]) -> [6]", "(reverse [1 4]) -> [4 1]"], "time": 0.031062}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [8 6 6 1]) -> [1 6 6 8]", "(reverse [3 1 4]) -> [4 1 3]", "(reverse [6]) -> [6]", "(reverse [1]) -> [1]", "(reverse [3 7 0 3]) -> [3 0 7 3]"], "time": 0.037629}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [9 7 5 7]) -> [7 5 7 9]", "(reverse [9 1 8 3 8]) -> [8 3 8 1 9]", "(reverse [3 7 3 7]) -> [7 3 7 3]", "(reverse []) -> []", "(reverse [0 9 1 0 7]) -> [7 0 1 9 0]"], "time": 0.028918}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [1 8]) -> [8 1]", "(reverse [8 4]) -> [4 8]", "(reverse [1 0 1 1 7]) -> [7 1 1 0 1]", "(reverse []) -> []", "(reverse [8]) -> [8]"], "time": 0.04021}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [1 3 9]) -> [9 3 1]", "(reverse []) -> []", "(reverse [8 6 9 4]) -> [4 9 6 8]", "(reverse [5]) -> [5]"], "time": 0.051072}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [8 8]) -> [8 8]", "(reverse [1 0 3]) -> [3 0 1]", "(reverse [4 4 6 3 4]) -> [4 3 6 4 4]", "(reverse [6 6 6 0 9]) -> [9 0 6 6 6]", "(reverse []) -> []"], "time": 0.043883}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [6]) -> [6]", "(reverse [9 5 0 5]) -> [5 0 5 9]", "(reverse [8 9 5 6]) -> [6 5 9 8]", "(reverse []) -> []", "(reverse [1]) -> [1]"], "time": 0.036285}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) b) _) _)", "examples": ["(reverse []) -> []", "(reverse [9]) -> [9]", "(reverse []) -> []", "(reverse [0]) -> [0]", "(reverse [7]) -> [7]", "(reverse []) -> []"], "time": 0.000465}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [4 7 2]) -> [2 7 4]", "(reverse []) -> []", "(reverse [6 2]) -> [2 6]", "(reverse [5 6 0 6 8]) -> [8 6 0 6 5]", "(reverse [5 3 1 9 2]) -> [2 9 1 3 5]"], "time": 0.032942}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [0 5 9 6 7]) -> [7 6 9 5 0]", "(reverse [5]) -> [5]", "(reverse [3 7 8]) -> [8 7 3]", "(reverse [3 2 5]) -> [5 2 3]", "(reverse [4 9 3 4]) -> [4 3 9 4]"], "time": 0.042659}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [5 3 5]) -> [5 3 5]", "(reverse [9 7]) -> [7 9]", "(reverse [2 8 9 1]) -> [1 9 8 2]", "(reverse [5 7]) -> [7 5]", "(reverse [0 2 1 0 8]) -> [8 0 1 2 0]"], "time": 0.038277}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [5 8 9 4 0]) -> [0 4 9 8 5]", "(reverse [1 5]) -> [5 1]", "(reverse [8 7 4 0]) -> [0 4 7 8]", "(reverse [8 2 3 1 5]) -> [5 1 3 2 8]", "(reverse []) -> []"], "time": 0.033331}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [1]) -> [1]", "(reverse [6 1 0 3 2]) -> [2 3 0 1 6]", "(reverse []) -> []", "(reverse [4]) -> [4]", "(reverse []) -> []"], "time": 0.034223}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [7 1 0 5]) -> [5 0 1 7]", "(reverse [2]) -> [2]", "(reverse [0 7 7 9]) -> [9 7 7 0]", "(reverse [5]) -> [5]"], "time": 0.046802}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [0 3 0 5 9]) -> [9 5 0 3 0]", "(reverse [0 8]) -> [8 0]", "(reverse [5 5 2]) -> [2 5 5]", "(reverse [2 6 9 6 5]) -> [5 6 9 6 2]", "(reverse [8 5 2]) -> [2 5 8]"], "time": 0.039312}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [4 7]) -> [7 4]", "(reverse [5 1 8]) -> [8 1 5]", "(reverse [4]) -> [4]", "(reverse []) -> []", "(reverse [4 6 0 9]) -> [9 0 6 4]"], "time": 0.034885}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [4 7 3 9]) -> [9 3 7 4]", "(reverse []) -> []", "(reverse [1 4 0 6]) -> [6 0 4 1]", "(reverse [8 1 3]) -> [3 1 8]", "(reverse []) -> []"], "time": 0.033929}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [4 0 6 9 8]) -> [8 9 6 0 4]", "(reverse [0 9]) -> [9 0]", "(reverse [1 1 6 7]) -> [7 6 1 1]", "(reverse [9]) -> [9]", "(reverse [1 0]) -> [0 1]"], "time": 0.033992}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [9 9 9 5 5]) -> [5 5 9 9 9]", "(reverse []) -> []", "(reverse [1 8]) -> [8 1]", "(reverse [8 7]) -> [7 8]", "(reverse [1 4 0 9]) -> [9 0 4 1]"], "time": 0.049689}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [9 9 5 5 7]) -> [7 5 5 9 9]", "(reverse [6 0 5 3]) -> [3 5 0 6]", "(reverse [1 3 7 2 9]) -> [9 2 7 3 1]", "(reverse [2 9 4 4]) -> [4 4 9 2]", "(reverse [1 3 2 6 5]) -> [5 6 2 3 1]"], "time": 0.04837}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [1 8]) -> [8 1]", "(reverse [3 7]) -> [7 3]", "(reverse [4 3 9 1 6]) -> [6 1 9 3 4]", "(reverse []) -> []", "(reverse [6 5 5 0 6]) -> [6 0 5 5 6]"], "time": 0.044852}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [1 5 9 7]) -> [7 9 5 1]", "(reverse []) -> []", "(reverse [4 8 3]) -> [3 8 4]", "(reverse [7 7 4]) -> [4 7 7]", "(reverse [3 0]) -> [0 3]"], "time": 0.034671}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [3 8 4]) -> [4 8 3]", "(reverse [8 5]) -> [5 8]", "(reverse [3 8]) -> [8 3]", "(reverse [9]) -> [9]", "(reverse [7 6]) -> [6 7]"], "time": 0.028461}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [4 5 9 2 6]) -> [6 2 9 5 4]", "(reverse [1 3 4 8 5]) -> [5 8 4 3 1]", "(reverse [6 4 6]) -> [6 4 6]", "(reverse [1 8 6 0 3]) -> [3 0 6 8 1]", "(reverse [1]) -> [1]"], "time": 0.041632}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [0 6 9 2]) -> [2 9 6 0]", "(reverse [8 0 5 8]) -> [8 5 0 8]", "(reverse []) -> []", "(reverse [2]) -> [2]", "(reverse [1 8 0 8]) -> [8 0 8 1]"], "time": 0.030577}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [1 4 4 2 3]) -> [3 2 4 4 1]", "(reverse [1 9]) -> [9 1]", "(reverse [3]) -> [3]", "(reverse [3 3 5]) -> [5 3 3]", "(reverse []) -> []"], "time": 0.026706}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [0 3 3 3]) -> [3 3 3 0]", "(reverse []) -> []", "(reverse [5 6 6]) -> [6 6 5]", "(reverse [0]) -> [0]", "(reverse [5]) -> [5]"], "time": 0.026305}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse []) -> []", "(reverse [7 2 2 2]) -> [2 2 2 7]", "(reverse [4 8]) -> [8 4]", "(reverse [7 4 1 4]) -> [4 1 4 7]", "(reverse [7 3 4 6 2]) -> [2 6 4 3 7]"], "time": 0.025707}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [3 8 2 8 5]) -> [5 8 2 8 3]", "(reverse [5 2 3 4 6]) -> [6 4 3 2 5]", "(reverse []) -> []", "(reverse [4 8]) -> [8 4]", "(reverse [5]) -> [5]"], "time": 0.028965}
{"name": "reverse", "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "examples": ["(reverse []) -> []", "(reverse [8 8 7 9 6]) -> [6 9 7 8 8]", "(reverse [8 0]) -> [0 8]", "(reverse [1 9 1]) -> [1 9 1]", "(reverse [5 9 2]) -> [2 9 5]", "(reverse [1 8 3 7 3]) -> [3 7 3 8 1]"], "time": 0.025549}
