{"examples": ["(reverse [2]) -> [2]", "(reverse []) -> []"], "time": 0.000353, "solution": "(let reverse (let a (lambda (b) b) _) _)", "name": "reverse"}
{"examples": ["(reverse []) -> []", "(reverse [7 3 0 7 6]) -> [6 7 0 3 7]"], "time": 0.03043, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse []) -> []", "(reverse [7 2 5 1]) -> [1 5 2 7]"], "time": 0.042713, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse []) -> []", "(reverse [3 9]) -> [9 3]"], "time": 0.04802, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [1 2]) -> [2 1]", "(reverse [5 9 3]) -> [3 9 5]"], "time": 0.126781, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [1 5 2]) -> [2 5 1]", "(reverse [1 0 9 8]) -> [8 9 0 1]"], "time": 0.115484, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse []) -> []", "(reverse []) -> []"], "time": 0.000423, "solution": "(let reverse (let a (lambda (b) []) _) _)", "name": "reverse"}
{"examples": ["(reverse [0 6 7 0 0]) -> [0 0 7 6 0]", "(reverse [0 1 2]) -> [2 1 0]"], "time": 0.084665, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [2 9 5 7 6]) -> [6 7 5 9 2]", "(reverse [6]) -> [6]"], "time": 0.130178, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [5 0 5 7]) -> [7 5 0 5]", "(reverse [0 9]) -> [9 0]"], "time": 0.115913, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [5 7 8 2]) -> [2 8 7 5]", "(reverse [9]) -> [9]"], "time": 0.120352, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [2 1 2 1 3]) -> [3 1 2 1 2]", "(reverse [2 5 9 9]) -> [9 9 5 2]"], "time": 0.099388, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [1 9]) -> [9 1]", "(reverse [1 5 0]) -> [0 5 1]"], "time": 0.102949, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [9 6]) -> [6 9]", "(reverse [2]) -> [2]"], "time": 0.120562, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [4 4]) -> [4 4]", "(reverse [2 0 8 2 7]) -> [7 2 8 0 2]"], "time": 0.121259, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [3 3]) -> [3 3]", "(reverse [9 9 4 2]) -> [2 4 9 9]"], "time": 0.104111, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [9 3]) -> [3 9]", "(reverse [6 4]) -> [4 6]"], "time": 0.123642, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [1 2]) -> [2 1]", "(reverse [0 8 0 1]) -> [1 0 8 0]"], "time": 0.098916, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse []) -> []", "(reverse [1]) -> [1]"], "time": 0.000615, "solution": "(let reverse (let a (lambda (b) b) _) _)", "name": "reverse"}
{"examples": ["(reverse [7]) -> [7]", "(reverse [2]) -> [2]"], "time": 0.000432, "solution": "(let reverse (let a (lambda (b) b) _) _)", "name": "reverse"}
{"examples": ["(reverse [4 5 0]) -> [0 5 4]", "(reverse []) -> []"], "time": 0.03584, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse []) -> []", "(reverse [6 8]) -> [8 6]"], "time": 0.030364, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [8]) -> [8]", "(reverse [1 2]) -> [2 1]"], "time": 0.099942, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [3]) -> [3]", "(reverse [9 1 2 4]) -> [4 2 1 9]"], "time": 0.092595, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [7 5 3 0 9]) -> [9 0 3 5 7]", "(reverse []) -> []"], "time": 0.046988, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [4 7 8]) -> [8 7 4]", "(reverse []) -> []"], "time": 0.048925, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [8 2 2]) -> [2 2 8]", "(reverse [3]) -> [3]"], "time": 0.085302, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [3 7 7 7]) -> [7 7 7 3]", "(reverse [3]) -> [3]"], "time": 0.116758, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [9 6 6 3 6]) -> [6 3 6 6 9]", "(reverse [6 6]) -> [6 6]"], "time": 0.107881, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [2 0 8 3 1]) -> [1 3 8 0 2]", "(reverse [6]) -> [6]"], "time": 0.125513, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [9]) -> [9]", "(reverse [1 7 7]) -> [7 7 1]"], "time": 0.082809, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [4 4]) -> [4 4]", "(reverse [4]) -> [4]"], "time": 0.000372, "solution": "(let reverse (let a (lambda (b) b) _) _)", "name": "reverse"}
{"examples": ["(reverse [0 0 3 2 2]) -> [2 2 3 0 0]", "(reverse [0]) -> [0]"], "time": 0.105387, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [0 5]) -> [5 0]", "(reverse [5 5 0 0]) -> [0 0 5 5]"], "time": 0.0928, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [5 4 1 6 4]) -> [4 6 1 4 5]", "(reverse [0 2 7 0]) -> [0 7 2 0]"], "time": 0.097124, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [6 3]) -> [3 6]", "(reverse [7 0 7]) -> [7 0 7]"], "time": 0.084689, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse []) -> []", "(reverse [0 3]) -> [3 0]"], "time": 0.050188, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [7 7]) -> [7 7]", "(reverse []) -> []"], "time": 0.000409, "solution": "(let reverse (let a (lambda (b) b) _) _)", "name": "reverse"}
{"examples": ["(reverse []) -> []", "(reverse [1 7 4 4 2]) -> [2 4 4 7 1]"], "time": 0.040907, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [3 4]) -> [4 3]", "(reverse [9 9 3]) -> [3 9 9]"], "time": 0.116666, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [5 5 1]) -> [1 5 5]", "(reverse [0 3]) -> [3 0]"], "time": 0.074477, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [8 9]) -> [9 8]", "(reverse [1]) -> [1]"], "time": 0.091023, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [3]) -> [3]", "(reverse [1 6]) -> [6 1]"], "time": 0.086714, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [2 4 2 0]) -> [0 2 4 2]", "(reverse [7 5]) -> [5 7]"], "time": 0.071087, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [6 0 9 8]) -> [8 9 0 6]", "(reverse [9 7 1 3 0]) -> [0 3 1 7 9]"], "time": 0.107417, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [3 1]) -> [1 3]", "(reverse [4 8]) -> [8 4]"], "time": 0.10221, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [4 5]) -> [5 4]", "(reverse [9 3 1 6 0]) -> [0 6 1 3 9]"], "time": 0.078817, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [3 3 4]) -> [4 3 3]", "(reverse [7]) -> [7]"], "time": 0.107747, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [0 3 7]) -> [7 3 0]", "(reverse []) -> []"], "time": 0.034338, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [8 2]) -> [2 8]", "(reverse [0 2 8 4 4]) -> [4 4 8 2 0]"], "time": 0.106346, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [3 7 3 1 1]) -> [1 1 3 7 3]", "(reverse []) -> []"], "time": 0.042253, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [5 3 6 3 4]) -> [4 3 6 3 5]", "(reverse []) -> []"], "time": 0.031383, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [7 5 3 4]) -> [4 3 5 7]", "(reverse [5 5 7]) -> [7 5 5]"], "time": 0.095929, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [9]) -> [9]", "(reverse [0 7 7 9]) -> [9 7 7 0]"], "time": 0.081836, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [6 1 2 0]) -> [0 2 1 6]", "(reverse [9 6]) -> [6 9]"], "time": 0.09773, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse []) -> []", "(reverse [6 8 7]) -> [7 8 6]"], "time": 0.046599, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [7 6 5]) -> [5 6 7]", "(reverse [7 9 5 2 0]) -> [0 2 5 9 7]"], "time": 0.074534, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [8 6 6]) -> [6 6 8]", "(reverse [7 6]) -> [6 7]"], "time": 0.10085, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [6]) -> [6]", "(reverse [0]) -> [0]"], "time": 0.000479, "solution": "(let reverse (let a (lambda (b) b) _) _)", "name": "reverse"}
{"examples": ["(reverse [5 8 4 4]) -> [4 4 8 5]", "(reverse [4 5 3]) -> [3 5 4]"], "time": 0.11012, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [9 7]) -> [7 9]", "(reverse [1 7 4 3 7]) -> [7 3 4 7 1]"], "time": 0.111187, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse []) -> []", "(reverse [2 0 5 2]) -> [2 5 0 2]"], "time": 0.032716, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [0 4 2]) -> [2 4 0]", "(reverse [1 2 4]) -> [4 2 1]"], "time": 0.100166, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [9 6 3 5]) -> [5 3 6 9]", "(reverse []) -> []"], "time": 0.047344, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [1 7]) -> [7 1]", "(reverse []) -> []"], "time": 0.047777, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [1 6 5 0 7]) -> [7 0 5 6 1]", "(reverse [0]) -> [0]"], "time": 0.116088, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [1 9 4]) -> [4 9 1]", "(reverse [7 6 7]) -> [7 6 7]"], "time": 0.099307, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [4]) -> [4]", "(reverse [4 0 1]) -> [1 0 4]"], "time": 0.074964, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [4 5]) -> [5 4]", "(reverse [7 8 3 2]) -> [2 3 8 7]"], "time": 0.11364, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [0]) -> [0]", "(reverse [0 9 7 4 0]) -> [0 4 7 9 0]"], "time": 0.104386, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [4 8 3]) -> [3 8 4]", "(reverse [4 1 8]) -> [8 1 4]"], "time": 0.095939, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse []) -> []", "(reverse [7 9 4 9]) -> [9 4 9 7]"], "time": 0.028192, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [2 7 5 2]) -> [2 5 7 2]", "(reverse [2 2 8 7]) -> [7 8 2 2]"], "time": 0.098267, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [6 7]) -> [7 6]", "(reverse [5 5 4 0]) -> [0 4 5 5]"], "time": 0.110373, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [3 5 6 2 6]) -> [6 2 6 5 3]", "(reverse [9 0 4 9 5]) -> [5 9 4 0 9]"], "time": 0.113846, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [4]) -> [4]", "(reverse [8]) -> [8]"], "time": 0.00047, "solution": "(let reverse (let a (lambda (b) b) _) _)", "name": "reverse"}
{"examples": ["(reverse [8]) -> [8]", "(reverse [0 6 3 0]) -> [0 3 6 0]"], "time": 0.105491, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [8 0 5 9 9]) -> [9 9 5 0 8]", "(reverse [8 4 1 0 5]) -> [5 0 1 4 8]"], "time": 0.116455, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [1 0 3 6]) -> [6 3 0 1]", "(reverse [8]) -> [8]"], "time": 0.11915, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [1 0 0 9 1]) -> [1 9 0 0 1]", "(reverse [7 9]) -> [9 7]"], "time": 0.121795, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [2 9 9]) -> [9 9 2]", "(reverse [8 7 8 9 1]) -> [1 9 8 7 8]"], "time": 0.086257, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [7 2 2 3 5]) -> [5 3 2 2 7]", "(reverse [5 5]) -> [5 5]"], "time": 0.103053, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [3 7 0]) -> [0 7 3]", "(reverse [5]) -> [5]"], "time": 0.106279, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [1 0 0 4]) -> [4 0 0 1]", "(reverse []) -> []"], "time": 0.043713, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [1 5]) -> [5 1]", "(reverse [6 2]) -> [2 6]"], "time": 0.111879, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [6]) -> [6]", "(reverse [7]) -> [7]"], "time": 0.000386, "solution": "(let reverse (let a (lambda (b) b) _) _)", "name": "reverse"}
{"examples": ["(reverse [3 3 7]) -> [7 3 3]", "(reverse [8 8 4 0 0]) -> [0 0 4 8 8]"], "time": 0.11497, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [7 3 4]) -> [4 3 7]", "(reverse [3 6 4 5 8]) -> [8 5 4 6 3]"], "time": 0.103099, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [4 4 4]) -> [4 4 4]", "(reverse [6 7]) -> [7 6]"], "time": 0.111798, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse []) -> []", "(reverse [3 4 5 3 1]) -> [1 3 5 4 3]"], "time": 0.03009, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [9 3 3]) -> [3 3 9]", "(reverse [1 8]) -> [8 1]"], "time": 0.120042, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse []) -> []", "(reverse [5 1 9]) -> [9 1 5]"], "time": 0.044792, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse []) -> []", "(reverse [5 1 1 5]) -> [5 1 1 5]"], "time": 0.00035, "solution": "(let reverse (let a (lambda (b) b) _) _)", "name": "reverse"}
{"examples": ["(reverse [8 5]) -> [5 8]", "(reverse [2 6 6 2]) -> [2 6 6 2]"], "time": 0.114429, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [0 3 5 8]) -> [8 5 3 0]", "(reverse [5]) -> [5]"], "time": 0.124953, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [0 4 4 6 6]) -> [6 6 4 4 0]", "(reverse [0 6 1]) -> [1 6 0]"], "time": 0.110611, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [0 1 4 8]) -> [8 4 1 0]", "(reverse [2]) -> [2]"], "time": 0.093189, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [5 6]) -> [6 5]", "(reverse [8 0 1 4 7]) -> [7 4 1 0 8]"], "time": 0.070948, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [5 5 6 1]) -> [1 6 5 5]", "(reverse [2 4 2 8 8]) -> [8 8 2 4 2]"], "time": 0.068319, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
{"examples": ["(reverse [0 4 7 0]) -> [0 7 4 0]", "(reverse [9]) -> [9]"], "time": 0.074048, "solution": "(let reverse (let a (lambda (b) (foldl b (lambda (d c) (cons c d)) [])) _) _)", "name": "reverse"}
