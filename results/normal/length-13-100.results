{"name": "length", "examples": ["(length []) -> 0", "(length [0]) -> 1", "(length [1]) -> 1", "(length []) -> 0", "(length [3 1 7]) -> 3", "(length [0 8]) -> 2", "(length [1]) -> 1", "(length [5 5]) -> 2", "(length [4 0 3]) -> 3", "(length []) -> 0", "(length [1 8 7]) -> 3", "(length [8 7 4 5 0]) -> 5"], "time": 0.03235, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 2]) -> 2", "(length [1]) -> 1", "(length [5 9 4]) -> 3", "(length [1]) -> 1", "(length [3]) -> 1", "(length [8 2 0 3 9]) -> 5", "(length [3]) -> 1", "(length [9 0]) -> 2", "(length [8 9]) -> 2", "(length [1 7 1]) -> 3", "(length [0 1 0 6 2]) -> 5"], "time": 0.032915, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7]) -> 1", "(length [9 9]) -> 2", "(length [8 4 7]) -> 3", "(length [3 2 4 0]) -> 4", "(length [8 2 7 1]) -> 4", "(length [5 4 8 6 6]) -> 5", "(length [9]) -> 1", "(length [4 5]) -> 2", "(length [4 2 6 6]) -> 4", "(length [8 1]) -> 2", "(length []) -> 0"], "time": 0.033941, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1 6 1 6]) -> 4", "(length [7 9 3 2 8]) -> 5", "(length [4 0 7 3]) -> 4", "(length [7 5 1 2]) -> 4", "(length [3 7]) -> 2", "(length []) -> 0", "(length [5 4]) -> 2", "(length [8 6 9]) -> 3", "(length []) -> 0", "(length [4 4 4]) -> 3", "(length [7 4 9]) -> 3"], "time": 0.047914, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 9 1]) -> 3", "(length [3 8 4]) -> 3", "(length [3]) -> 1", "(length [0]) -> 1", "(length [6 1]) -> 2", "(length [0]) -> 1", "(length [2 8 8 9]) -> 4", "(length []) -> 0", "(length [0 6 4]) -> 3", "(length [7 2]) -> 2", "(length [6]) -> 1"], "time": 0.033428, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1 4 4 4 1]) -> 5", "(length [6 3 2 4]) -> 4", "(length [7 3 6]) -> 3", "(length []) -> 0", "(length [9 6 2 0 2]) -> 5", "(length [3 7 7 5 1]) -> 5", "(length []) -> 0", "(length [5 4 3 1 5]) -> 5", "(length [5]) -> 1", "(length [1]) -> 1", "(length [6 8]) -> 2"], "time": 0.039681, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [2 3 6 2]) -> 4", "(length [2]) -> 1", "(length []) -> 0", "(length [0 5 0 7 6]) -> 5", "(length [3 1 9]) -> 3", "(length [7 1]) -> 2", "(length [3 6]) -> 2", "(length []) -> 0", "(length [2 5 6 2 4]) -> 5", "(length [0 0 3]) -> 3", "(length [4 8 3]) -> 3"], "time": 0.034592, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 1 0]) -> 3", "(length [5 8 1 2]) -> 4", "(length [3 9 9]) -> 3", "(length [5 7]) -> 2", "(length [9 5 3]) -> 3", "(length [6 5 0]) -> 3", "(length []) -> 0", "(length [0]) -> 1", "(length [1 9 9]) -> 3", "(length []) -> 0", "(length [8 3 7 6]) -> 4"], "time": 0.039255, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [8 6 2]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [9 2]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [3]) -> 1", "(length [5 2 3]) -> 3", "(length [9 4 3 6]) -> 4", "(length [3 7 2 5]) -> 4"], "time": 0.052713, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 1 0 2 8]) -> 5", "(length [8 5 3 8 1]) -> 5", "(length [2]) -> 1", "(length [0 9 9]) -> 3", "(length []) -> 0", "(length [8 4 7]) -> 3", "(length [3 5]) -> 2", "(length [3 6]) -> 2", "(length [3 9]) -> 2", "(length []) -> 0", "(length [7]) -> 1"], "time": 0.039868, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7 5 4]) -> 3", "(length [7 5 0]) -> 3", "(length []) -> 0", "(length [5 1 1 6]) -> 4", "(length [1]) -> 1", "(length [3 0 9]) -> 3", "(length [8 8 2 1]) -> 4", "(length []) -> 0", "(length [7 3 7 3]) -> 4", "(length [9 3 5 4]) -> 4", "(length [9 6]) -> 2"], "time": 0.051864, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 5]) -> 2", "(length [7 0]) -> 2", "(length [6 7]) -> 2", "(length [5]) -> 1", "(length [8 2 0 9 1]) -> 5", "(length [9 9 3 4]) -> 4", "(length [8 0 0 0]) -> 4", "(length [5 2 7 4 3]) -> 5", "(length [9]) -> 1", "(length [3]) -> 1", "(length []) -> 0"], "time": 0.040471, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6]) -> 1", "(length []) -> 0", "(length [6 5 4 2 8]) -> 5", "(length [3 7 9]) -> 3", "(length [9 7 3 2 8]) -> 5", "(length [1]) -> 1", "(length [4 3]) -> 2", "(length [2 5 1 8]) -> 4", "(length [9 0]) -> 2", "(length [0]) -> 1", "(length [1 7]) -> 2"], "time": 0.033214, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 1 4 1]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length [5 3 2 6]) -> 4", "(length [8 8 7 3]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length [6 8 2 7]) -> 4", "(length [8 9 5 7 3]) -> 5", "(length [6 5 1 9 5]) -> 5", "(length [8 5 1 8]) -> 4"], "time": 0.03928, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [4 2 8 2]) -> 4", "(length [9 9]) -> 2", "(length [4]) -> 1", "(length [0 1 0 2]) -> 4", "(length []) -> 0", "(length [1 9 5 6 7]) -> 5", "(length [7 3 1 2]) -> 4", "(length [7 3 6 4 6]) -> 5", "(length [9 3 3]) -> 3", "(length [0 3 9 5 1]) -> 5"], "time": 0.041651, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7 2]) -> 2", "(length [1 5 2]) -> 3", "(length []) -> 0", "(length [5 2 8 8 8]) -> 5", "(length [8 6 0 2 0]) -> 5", "(length [6]) -> 1", "(length [7]) -> 1", "(length [3 0 9 4 5]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [8 2 6]) -> 3"], "time": 0.037969, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [2]) -> 1", "(length [2 8]) -> 2", "(length [0]) -> 1", "(length [3 9]) -> 2", "(length [8]) -> 1", "(length [2 8]) -> 2", "(length []) -> 0", "(length [8 1 7 6]) -> 4", "(length [3 4 6 3 4]) -> 5", "(length [8 5 5]) -> 3", "(length []) -> 0"], "time": 0.039872, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7]) -> 1", "(length [7 0 7 2]) -> 4", "(length [5 7]) -> 2", "(length [0 4 5 3]) -> 4", "(length [5 6 8 0 8]) -> 5", "(length [7 5 7]) -> 3", "(length [5 7 2]) -> 3", "(length []) -> 0", "(length [9 5]) -> 2", "(length []) -> 0", "(length [8 2]) -> 2"], "time": 0.033734, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1 2 0 2 5]) -> 5", "(length [8 7]) -> 2", "(length [8 7]) -> 2", "(length [4 2 6]) -> 3", "(length [1]) -> 1", "(length [3 3 1]) -> 3", "(length [7 2 0 4]) -> 4", "(length [1 6 9 3 3]) -> 5", "(length [8 4 0]) -> 3", "(length [3 8 4]) -> 3", "(length []) -> 0"], "time": 0.043232, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7]) -> 1", "(length [2]) -> 1", "(length [1]) -> 1", "(length [8]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [2]) -> 1", "(length [1]) -> 1", "(length [3]) -> 1", "(length [3 2]) -> 2", "(length [4 8 6 0 7]) -> 5"], "time": 0.039915, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 2 2]) -> 3", "(length []) -> 0", "(length [7 8]) -> 2", "(length [0]) -> 1", "(length [7 8 1 4 2]) -> 5", "(length [1]) -> 1", "(length [8]) -> 1", "(length [4 9]) -> 2", "(length [3 4 5 2 0]) -> 5", "(length [2 6 2 2]) -> 4", "(length [4 3 4 7]) -> 4"], "time": 0.035049, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7 3 2 6 4]) -> 5", "(length [8 3 6 0]) -> 4", "(length []) -> 0", "(length [7 0 0 1]) -> 4", "(length [7 6 0 2 9]) -> 5", "(length [3 9 6]) -> 3", "(length []) -> 0", "(length [7]) -> 1", "(length [0]) -> 1", "(length [7 3 0 7 7]) -> 5", "(length [7 9]) -> 2"], "time": 0.030578, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1]) -> 1", "(length [5 2 7]) -> 3", "(length [5]) -> 1", "(length [5 6 0 8]) -> 4", "(length [1]) -> 1", "(length []) -> 0", "(length [3 1]) -> 2", "(length [4 9 1 8]) -> 4", "(length [4]) -> 1", "(length [4]) -> 1", "(length [4]) -> 1"], "time": 0.041675, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6 7 1 4]) -> 4", "(length [4 5 4 0]) -> 4", "(length [4]) -> 1", "(length [1 5]) -> 2", "(length [5 6 2 3]) -> 4", "(length [2 5 6 6]) -> 4", "(length [9 5]) -> 2", "(length [1 8 4 1]) -> 4", "(length [0 3 3 6]) -> 4", "(length [1 2 1 8 1]) -> 5", "(length [0 5 8 0 3]) -> 5"], "time": 0.049246, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 0]) -> 2", "(length [4]) -> 1", "(length []) -> 0", "(length [6]) -> 1", "(length [5 4]) -> 2", "(length [5]) -> 1", "(length [9 7 5]) -> 3", "(length []) -> 0", "(length [4]) -> 1", "(length [3 6 4 2]) -> 4", "(length [4 0]) -> 2"], "time": 0.047611, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [2 1 4]) -> 3", "(length [9 8 3]) -> 3", "(length [8]) -> 1", "(length [9 1 6 2 4]) -> 5", "(length [9]) -> 1", "(length [8 6]) -> 2", "(length [4 2 1 7 4]) -> 5", "(length [4 5 6 9 6]) -> 5", "(length [0 2 2]) -> 3", "(length [8]) -> 1", "(length [7 6 3]) -> 3"], "time": 0.039793, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1 4 2 0 2]) -> 5", "(length [5]) -> 1", "(length [3 9 8 5 8]) -> 5", "(length [4 6]) -> 2", "(length [7 2 4 3 7]) -> 5", "(length [5 1]) -> 2", "(length []) -> 0", "(length [5 8 3]) -> 3", "(length [6]) -> 1", "(length [2 8]) -> 2", "(length [5 4 4 3]) -> 4"], "time": 0.041287, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 9]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [3 2]) -> 2", "(length []) -> 0", "(length [1 8]) -> 2", "(length []) -> 0", "(length [8 3 3 6 2]) -> 5", "(length [7 5 5 2 1]) -> 5", "(length [9]) -> 1", "(length []) -> 0"], "time": 0.032589, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [1 9 5 0 2]) -> 5", "(length [6 1 2 6]) -> 4", "(length [2 8 9]) -> 3", "(length [2 1 4]) -> 3", "(length [5 2]) -> 2", "(length [7 1 9 4]) -> 4", "(length [8]) -> 1", "(length [6 0]) -> 2", "(length [7 2 0 3]) -> 4", "(length [8 9 1]) -> 3"], "time": 0.041604, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5]) -> 1", "(length [0 8 3 4 0]) -> 5", "(length [8 4 6 6]) -> 4", "(length [9 1 3 3]) -> 4", "(length []) -> 0", "(length [5 3]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [7]) -> 1", "(length [7]) -> 1", "(length [0 7]) -> 2"], "time": 0.035191, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 5 5 5]) -> 4", "(length [9]) -> 1", "(length [7 5 2 5 3]) -> 5", "(length [1 6]) -> 2", "(length [2]) -> 1", "(length [4 3 8 2 2]) -> 5", "(length [4 7]) -> 2", "(length [8 6 9]) -> 3", "(length [6 5 8 1 7]) -> 5", "(length [7 6 5 7]) -> 4", "(length []) -> 0"], "time": 0.036022, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [4 9 9 4]) -> 4", "(length []) -> 0", "(length [6 1 0 5 1]) -> 5", "(length [4 4 6 0]) -> 4", "(length [9 0 4 1]) -> 4", "(length [6 3]) -> 2", "(length [9 8 6 0 3]) -> 5", "(length [5 2 6 6 8]) -> 5", "(length []) -> 0", "(length [5]) -> 1"], "time": 0.033267, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [1 8 1]) -> 3", "(length [6 6 5]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [0 4]) -> 2", "(length [1]) -> 1", "(length [7 1]) -> 2", "(length [9 7 0 0 9]) -> 5", "(length [6]) -> 1", "(length [3 2 6 9]) -> 4"], "time": 0.03518, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 2]) -> 2", "(length [8 3 4 8]) -> 4", "(length [8 0]) -> 2", "(length [5]) -> 1", "(length [3 4]) -> 2", "(length [4 4]) -> 2", "(length [8 4 3]) -> 3", "(length [8]) -> 1", "(length [4]) -> 1", "(length []) -> 0", "(length [3 7 3 5]) -> 4"], "time": 0.049639, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1 4 8 7 8]) -> 5", "(length [8 8 5 4 1]) -> 5", "(length [7 3 4]) -> 3", "(length [3 4 7 5 3]) -> 5", "(length [5 1]) -> 2", "(length [0 6 6]) -> 3", "(length [2 4 7 2 5]) -> 5", "(length [3 5 2 3]) -> 4", "(length [5 3 0]) -> 3", "(length [1 4]) -> 2", "(length [6 4 8 7 6]) -> 5"], "time": 0.04503, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7 4 2]) -> 3", "(length []) -> 0", "(length [6 7 8 4]) -> 4", "(length [0 7 2 8 4]) -> 5", "(length []) -> 0", "(length [5 6 4 0 7]) -> 5", "(length [1 6 1 7]) -> 4", "(length [1 3 8]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [3 1 6 5 4]) -> 5"], "time": 0.035244, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 4]) -> 2", "(length [5 8]) -> 2", "(length [2 2 9 4]) -> 4", "(length [0 3 3 0]) -> 4", "(length [7 0]) -> 2", "(length [0 8 8 4 0]) -> 5", "(length [3 0 5]) -> 3", "(length [3 8]) -> 2", "(length [3 7]) -> 2", "(length [7 9 9 1 5]) -> 5", "(length [7]) -> 1"], "time": 0.045024, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 6]) -> 2", "(length []) -> 0", "(length [1 6 0]) -> 3", "(length []) -> 0", "(length [2]) -> 1", "(length [9 5]) -> 2", "(length [2 4 1 6]) -> 4", "(length []) -> 0", "(length [0 1]) -> 2", "(length [1]) -> 1", "(length [3]) -> 1"], "time": 0.05114, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 3 1]) -> 3", "(length [2 9 7 1]) -> 4", "(length [5 7]) -> 2", "(length [2 7 0 9 4]) -> 5", "(length [1 4 5 4]) -> 4", "(length [1]) -> 1", "(length [6 8 8 1 0]) -> 5", "(length [4 1 0]) -> 3", "(length [2 0]) -> 2", "(length []) -> 0", "(length [1 7]) -> 2"], "time": 0.051161, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8]) -> 1", "(length [7 9]) -> 2", "(length [5]) -> 1", "(length [5 5]) -> 2", "(length [2 5 7 3]) -> 4", "(length [4]) -> 1", "(length [6]) -> 1", "(length [6]) -> 1", "(length [8 1]) -> 2", "(length [7 6 3 0 1]) -> 5", "(length []) -> 0"], "time": 0.031388, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 1 2 8 3]) -> 5", "(length [9 7 5]) -> 3", "(length [2 8 5 8 7]) -> 5", "(length [5]) -> 1", "(length [2 8 5 7 2]) -> 5", "(length [6]) -> 1", "(length [7 6 4 7]) -> 4", "(length [4 1]) -> 2", "(length [0 5 5 3 9]) -> 5", "(length [0 0 5]) -> 3", "(length [9]) -> 1"], "time": 0.049085, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 4 2]) -> 3", "(length [3]) -> 1", "(length [2 3 5 8]) -> 4", "(length [7 7 2 4 3]) -> 5", "(length [2 4 0]) -> 3", "(length [1]) -> 1", "(length [8 5 9]) -> 3", "(length [6 2 7 0 3]) -> 5", "(length [3 3]) -> 2", "(length [8]) -> 1", "(length [2 9 0 7 0]) -> 5"], "time": 0.041759, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1]) -> 1", "(length [4 5 1 0 5]) -> 5", "(length [8]) -> 1", "(length []) -> 0", "(length [9 0 5 2]) -> 4", "(length [9]) -> 1", "(length [1 5 3 1]) -> 4", "(length [2]) -> 1", "(length [1]) -> 1", "(length [6 4 1 1]) -> 4", "(length []) -> 0"], "time": 0.037317, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5]) -> 1", "(length [7 7 7]) -> 3", "(length [7]) -> 1", "(length []) -> 0", "(length [7]) -> 1", "(length [5 2 2 3]) -> 4", "(length [2 0 4]) -> 3", "(length [6 5 8 0]) -> 4", "(length [3]) -> 1", "(length [2 4 1 8 3]) -> 5", "(length []) -> 0"], "time": 0.054898, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 5 2 7]) -> 4", "(length []) -> 0", "(length [8 2]) -> 2", "(length [2 0]) -> 2", "(length [4 8 7 9 1]) -> 5", "(length [7 0 6 5 5]) -> 5", "(length []) -> 0", "(length [4 8]) -> 2", "(length [8]) -> 1", "(length [1 1 1]) -> 3", "(length [6 6 2]) -> 3"], "time": 0.033711, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7 4 0 6 5]) -> 5", "(length [4 9 5]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [1 0 8 3]) -> 4", "(length []) -> 0", "(length [2 2]) -> 2", "(length [5]) -> 1", "(length []) -> 0", "(length [8 4]) -> 2", "(length [5 1]) -> 2"], "time": 0.040175, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [2 2 8 1]) -> 4", "(length [1]) -> 1", "(length [7]) -> 1", "(length [7 2 0]) -> 3", "(length [7 5]) -> 2", "(length [1 9]) -> 2", "(length [4]) -> 1", "(length []) -> 0", "(length [3]) -> 1", "(length []) -> 0", "(length [0 3 9 0]) -> 4"], "time": 0.050559, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1]) -> 1", "(length [4 5 0]) -> 3", "(length [9 7]) -> 2", "(length [5 8 2 5 8]) -> 5", "(length [4 4]) -> 2", "(length [2]) -> 1", "(length [3 1]) -> 2", "(length [2]) -> 1", "(length [3 9 7]) -> 3", "(length [6]) -> 1", "(length [4 3 7 6]) -> 4"], "time": 0.048415, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9]) -> 1", "(length [9 6]) -> 2", "(length [1 4 0 3]) -> 4", "(length [1 6]) -> 2", "(length [4 3 2 2]) -> 4", "(length [3]) -> 1", "(length [0 7 5 5]) -> 4", "(length [4]) -> 1", "(length [3]) -> 1", "(length [5 1 5 0 3]) -> 5", "(length [7 4]) -> 2"], "time": 0.045963, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7 0 4 4 5]) -> 5", "(length [4]) -> 1", "(length [8]) -> 1", "(length [6 8 5 6 0]) -> 5", "(length [6 3 3]) -> 3", "(length [8]) -> 1", "(length [7 7]) -> 2", "(length [2]) -> 1", "(length [8 0 0]) -> 3", "(length [9 3]) -> 2", "(length [9]) -> 1"], "time": 0.034013, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [8 6 2]) -> 3", "(length [2 2 4 5]) -> 4", "(length [5]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [4 6 1]) -> 3", "(length [3 8 5 5 3]) -> 5", "(length [2 7 8 3 9]) -> 5", "(length [3 2 4]) -> 3", "(length []) -> 0"], "time": 0.044356, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6 0 5]) -> 3", "(length [9 6 6]) -> 3", "(length [2 1 6]) -> 3", "(length [3 4 8 0]) -> 4", "(length [1 2]) -> 2", "(length [8 6 7]) -> 3", "(length [0 4 6 4 1]) -> 5", "(length [3 3 1 5]) -> 4", "(length [1 5 3 1]) -> 4", "(length [9 7 9]) -> 3", "(length [1 2]) -> 2"], "time": 0.032919, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6 1 2 3 0]) -> 5", "(length [6 6]) -> 2", "(length [0]) -> 1", "(length [7 6 9 3]) -> 4", "(length [4 5 4]) -> 3", "(length []) -> 0", "(length [7 7 0]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [5 6]) -> 2", "(length [1 0 4]) -> 3"], "time": 0.041275, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [0 0 1 9]) -> 4", "(length [7 0 0 6 3]) -> 5", "(length [0 5 1]) -> 3", "(length [5 7 0 4 7]) -> 5", "(length [5 4 2 5 5]) -> 5", "(length [6 8 3 9 8]) -> 5", "(length [9 6 8 5 3]) -> 5", "(length [2]) -> 1", "(length [6 6]) -> 2", "(length [9]) -> 1", "(length [8 0]) -> 2"], "time": 0.031495, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [3]) -> 1", "(length [0 9 8 1 8]) -> 5", "(length []) -> 0", "(length [2]) -> 1", "(length [3 4]) -> 2", "(length [7 1 1]) -> 3", "(length [7 5]) -> 2", "(length [9]) -> 1", "(length [9 0 1 9 5]) -> 5", "(length [2 2 4 3 9]) -> 5"], "time": 0.036518, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [2 4]) -> 2", "(length [7]) -> 1", "(length [1 7 9]) -> 3", "(length []) -> 0", "(length [1 3 7 7]) -> 4", "(length [0 2 3 6 7]) -> 5", "(length []) -> 0", "(length [3 4 8 8 5]) -> 5", "(length [4 2 8 5 1]) -> 5", "(length [0 4 8 5]) -> 4", "(length [6]) -> 1"], "time": 0.029964, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6 4 2 9 1]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [7 8]) -> 2", "(length [4]) -> 1", "(length [3 1 3 8]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length [9 0]) -> 2", "(length [5 5 2 1 9]) -> 5", "(length [5 2 2]) -> 3"], "time": 0.051682, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8 1 3]) -> 3", "(length [3 5 0]) -> 3", "(length []) -> 0", "(length [3 7]) -> 2", "(length [7 8 7 1]) -> 4", "(length [5 3 0 4 7]) -> 5", "(length [9 1 4 9 2]) -> 5", "(length [0 5]) -> 2", "(length [4 6 3 9]) -> 4", "(length [9 1]) -> 2", "(length [8 3 3 9 1]) -> 5"], "time": 0.029948, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7 8]) -> 2", "(length [9 9 0 9]) -> 4", "(length [6]) -> 1", "(length [2 3]) -> 2", "(length [2 0 5 4]) -> 4", "(length [2]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [2 4 4 2 0]) -> 5", "(length [8 9 2 9]) -> 4", "(length [9 4 3 2 8]) -> 5"], "time": 0.038708, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [5 4 0 3]) -> 4", "(length [6 7]) -> 2", "(length [6 4 2 8]) -> 4", "(length [8 6]) -> 2", "(length [5 4 8]) -> 3", "(length [3 8]) -> 2", "(length [8]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [4]) -> 1"], "time": 0.035696, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3]) -> 1", "(length [1 1]) -> 2", "(length [8]) -> 1", "(length [3 0]) -> 2", "(length [5 3]) -> 2", "(length [7 5 1 7]) -> 4", "(length [7 3 4]) -> 3", "(length [1]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [5 7 7]) -> 3"], "time": 0.042878, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6 8 9 5]) -> 4", "(length [2 3 6]) -> 3", "(length [3 5 4]) -> 3", "(length []) -> 0", "(length [9 7 8 7]) -> 4", "(length [8 7]) -> 2", "(length [0 6]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [9 8 7]) -> 3", "(length [8 2 3 7 5]) -> 5"], "time": 0.037336, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8 2 6 5 3]) -> 5", "(length [8 0 8 4]) -> 4", "(length [1]) -> 1", "(length [1 1 0]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [2]) -> 1", "(length [7]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [2 8 7 7 8]) -> 5"], "time": 0.030326, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8]) -> 1", "(length [6 2]) -> 2", "(length [0 7 7]) -> 3", "(length [4 4 6 5]) -> 4", "(length [2 2 3 1 4]) -> 5", "(length [9 4 8 8 4]) -> 5", "(length [2 9 3 5]) -> 4", "(length [1 5 8 8 7]) -> 5", "(length []) -> 0", "(length [7 0 3]) -> 3", "(length [4 6]) -> 2"], "time": 0.044989, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [7 0 0 9 7]) -> 5", "(length [4 2]) -> 2", "(length [6]) -> 1", "(length [3 9 5 8]) -> 4", "(length []) -> 0", "(length [2]) -> 1", "(length [0 5 2]) -> 3", "(length [5]) -> 1", "(length [7 1 2 0 0]) -> 5", "(length []) -> 0", "(length [4 6]) -> 2"], "time": 0.030703, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [2 7]) -> 2", "(length [9 7 0 4]) -> 4", "(length [9]) -> 1", "(length [8 3 7 2]) -> 4", "(length [4 7]) -> 2", "(length []) -> 0", "(length [6 7 2]) -> 3", "(length [8]) -> 1", "(length []) -> 0", "(length [2 6 7 2 4]) -> 5", "(length []) -> 0"], "time": 0.03438, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [1 4 2 2 0]) -> 5", "(length [1 4 1 0 0]) -> 5", "(length [4 9 2]) -> 3", "(length [6 0 9 5 7]) -> 5", "(length []) -> 0", "(length [0 0 3 4]) -> 4", "(length []) -> 0", "(length [8 2 6 0]) -> 4", "(length []) -> 0", "(length [0 4 7]) -> 3"], "time": 0.031114, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8 9 5]) -> 3", "(length [1 3 4 0]) -> 4", "(length [7]) -> 1", "(length [7 9 8]) -> 3", "(length [7]) -> 1", "(length []) -> 0", "(length [1 0 1 6]) -> 4", "(length [8 4]) -> 2", "(length [5 5 1]) -> 3", "(length [3 8 0]) -> 3", "(length []) -> 0"], "time": 0.050305, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3]) -> 1", "(length [8 9 9]) -> 3", "(length [6 2 8]) -> 3", "(length [8 5 6 0]) -> 4", "(length [4 3 4 5 0]) -> 5", "(length [0 2 8 6 2]) -> 5", "(length []) -> 0", "(length [0 1]) -> 2", "(length [6 6 5]) -> 3", "(length [8 5 7 0]) -> 4", "(length [6 0]) -> 2"], "time": 0.044357, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 3 4 0 6]) -> 5", "(length [7]) -> 1", "(length [8 5]) -> 2", "(length [9]) -> 1", "(length [9 9 9 8 7]) -> 5", "(length [2 9 2 9]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length [4 8 2 2]) -> 4", "(length [1]) -> 1", "(length [5]) -> 1"], "time": 0.030543, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8 6 1 2 1]) -> 5", "(length [6 6 3 1 3]) -> 5", "(length [5 6 3 2 2]) -> 5", "(length [7]) -> 1", "(length [2]) -> 1", "(length [5]) -> 1", "(length [3]) -> 1", "(length [4]) -> 1", "(length []) -> 0", "(length [3 1 3 3 4]) -> 5", "(length [2 0 5]) -> 3"], "time": 0.034425, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8 8 5 4]) -> 4", "(length [5 2 5 9 7]) -> 5", "(length [7 4]) -> 2", "(length [3 7 1 4 7]) -> 5", "(length [8 1 5]) -> 3", "(length [2 4 3 8 2]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [1 8 0 3]) -> 4", "(length [5 5 7 0 9]) -> 5", "(length [5 9]) -> 2"], "time": 0.030883, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8 7 9]) -> 3", "(length [4 1 0 8 3]) -> 5", "(length []) -> 0", "(length [6 5]) -> 2", "(length [5 1]) -> 2", "(length [6 2 3 2]) -> 4", "(length [6 4 6]) -> 3", "(length []) -> 0", "(length [9]) -> 1", "(length [1 7 5 3 7]) -> 5", "(length [2]) -> 1"], "time": 0.048204, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 1 6 9 5]) -> 5", "(length [4]) -> 1", "(length [3 5 2 9 2]) -> 5", "(length [3]) -> 1", "(length [6]) -> 1", "(length [0]) -> 1", "(length [3 7]) -> 2", "(length [0]) -> 1", "(length []) -> 0", "(length [7 9 1 1 4]) -> 5", "(length [2 7 2 6 1]) -> 5"], "time": 0.047733, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [5 1]) -> 2", "(length [0]) -> 1", "(length []) -> 0", "(length [7 1]) -> 2", "(length [9 2 7 8 6]) -> 5", "(length [7 4]) -> 2", "(length [0 1 1]) -> 3", "(length []) -> 0", "(length [2 9 0 9]) -> 4", "(length []) -> 0"], "time": 0.033245, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8]) -> 1", "(length []) -> 0", "(length [2 9 6 2]) -> 4", "(length [9]) -> 1", "(length []) -> 0", "(length [1 8]) -> 2", "(length [2 9 5 2 2]) -> 5", "(length [6]) -> 1", "(length [4 6 0]) -> 3", "(length [3 2 7 0 7]) -> 5", "(length [3 4 4]) -> 3"], "time": 0.041619, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5]) -> 1", "(length [8 2 8]) -> 3", "(length []) -> 0", "(length [3 9 6]) -> 3", "(length [7 5 6 3 1]) -> 5", "(length [3 0 6]) -> 3", "(length [1 9 6 3 8]) -> 5", "(length [4 0 8 5]) -> 4", "(length [5]) -> 1", "(length [2]) -> 1", "(length [4 3 3 8]) -> 4"], "time": 0.038039, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3]) -> 1", "(length [2 0 3 0 7]) -> 5", "(length [6 0 1 6 3]) -> 5", "(length [3 3 5 6]) -> 4", "(length [7 6]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length [2 6]) -> 2", "(length [0 5]) -> 2", "(length [0 6 5]) -> 3", "(length [8]) -> 1"], "time": 0.030264, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 5]) -> 2", "(length []) -> 0", "(length [3 6 6 3]) -> 4", "(length []) -> 0", "(length [9 2 2 7]) -> 4", "(length [7]) -> 1", "(length [1]) -> 1", "(length [8]) -> 1", "(length [9 5 6 2]) -> 4", "(length [8 4]) -> 2", "(length [3 2 8 6]) -> 4"], "time": 0.042102, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3]) -> 1", "(length []) -> 0", "(length [5 8 3]) -> 3", "(length [7 5]) -> 2", "(length [1 7 5]) -> 3", "(length [8 5 7 9]) -> 4", "(length [8 2 2 1 5]) -> 5", "(length [3]) -> 1", "(length []) -> 0", "(length [6 4 5 3 2]) -> 5", "(length [9]) -> 1"], "time": 0.049203, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 4 2 9]) -> 4", "(length [4 2 4 7 5]) -> 5", "(length [6 0 2]) -> 3", "(length [4 1]) -> 2", "(length [7 4 1 3 1]) -> 5", "(length [5 6]) -> 2", "(length [5 3 5 8]) -> 4", "(length [8 1]) -> 2", "(length [4 4]) -> 2", "(length [1 0 5]) -> 3", "(length [5 7 4]) -> 3"], "time": 0.039834, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 1 8 2 0]) -> 5", "(length []) -> 0", "(length [1]) -> 1", "(length [1]) -> 1", "(length [6 8 8 9]) -> 4", "(length [9 3 2 0 7]) -> 5", "(length [8 3]) -> 2", "(length [7]) -> 1", "(length [3 3 6]) -> 3", "(length [8 0 7 5]) -> 4", "(length [0 5]) -> 2"], "time": 0.031031, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6 9 3 5]) -> 4", "(length [1]) -> 1", "(length [8]) -> 1", "(length [6 9 7 9]) -> 4", "(length [3 2 4]) -> 3", "(length [9 0 8 2]) -> 4", "(length []) -> 0", "(length [7 7 9 1]) -> 4", "(length [7 8 6 9 3]) -> 5", "(length [1 5 7 0 8]) -> 5", "(length [3 4]) -> 2"], "time": 0.039596, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [9 2 4]) -> 3", "(length []) -> 0", "(length [5]) -> 1", "(length []) -> 0", "(length [7 1]) -> 2", "(length []) -> 0", "(length [5 2 8]) -> 3", "(length [1 3]) -> 2", "(length [1 6 7 9 6]) -> 5", "(length [0 0 9 2 5]) -> 5"], "time": 0.032337, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [8 8]) -> 2", "(length [2 1 3 2]) -> 4", "(length [8 9]) -> 2", "(length [9 4 8]) -> 3", "(length [4 1]) -> 2", "(length [5 9 2]) -> 3", "(length [5 2 5 1 8]) -> 5", "(length [1]) -> 1", "(length [1]) -> 1", "(length [6 1 6 8]) -> 4", "(length [2 7]) -> 2"], "time": 0.032281, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [1]) -> 1", "(length [3 4 7 5 2]) -> 5", "(length [3 3 1 1 0]) -> 5", "(length [2 5 3 7 2]) -> 5", "(length [2 3 2 9 0]) -> 5", "(length [1]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [0 3 8]) -> 3", "(length []) -> 0", "(length [4 6 7]) -> 3"], "time": 0.038782, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [1 3 0 8]) -> 4", "(length [5]) -> 1", "(length []) -> 0", "(length []) -> 0", "(length [0]) -> 1", "(length []) -> 0", "(length [6 4 4 6]) -> 4", "(length [2]) -> 1", "(length []) -> 0", "(length [6 1]) -> 2"], "time": 0.03072, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9 6 2]) -> 3", "(length [3 7 1 8 8]) -> 5", "(length [5 6 4 5 1]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [6 0 4 9 8]) -> 5", "(length [5 2 8]) -> 3", "(length [0 9]) -> 2", "(length [6 2 3]) -> 3", "(length [3 3 2 8 5]) -> 5", "(length [6 9 9]) -> 3"], "time": 0.030753, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 1 3 5 8]) -> 5", "(length [9]) -> 1", "(length [6 8 8 7 0]) -> 5", "(length [0 7 5 0]) -> 4", "(length [0 7 8 0]) -> 4", "(length [2 3 2]) -> 3", "(length [6]) -> 1", "(length [6]) -> 1", "(length []) -> 0", "(length [3 0 7]) -> 3", "(length [4]) -> 1"], "time": 0.031914, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 4 3 2 6]) -> 5", "(length [8 4 9]) -> 3", "(length [1 2 4 6]) -> 4", "(length [6 4 3 8]) -> 4", "(length [8]) -> 1", "(length [1]) -> 1", "(length [4 4 8 7]) -> 4", "(length [7]) -> 1", "(length [5 2 9 5]) -> 4", "(length [3 3]) -> 2", "(length [1 4 0 5 8]) -> 5"], "time": 0.033015, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6 1 5 8 1]) -> 5", "(length [8 9]) -> 2", "(length [7]) -> 1", "(length [5]) -> 1", "(length []) -> 0", "(length [5 1 6 1]) -> 4", "(length [4 5 7 1 6]) -> 5", "(length [6 4 3 8]) -> 4", "(length [8]) -> 1", "(length [4 8 8]) -> 3", "(length [6 5 3 0]) -> 4"], "time": 0.04019, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [5 8]) -> 2", "(length [9 8]) -> 2", "(length [0 1 5 7 9]) -> 5", "(length [6 2 7]) -> 3", "(length [8 0 7]) -> 3", "(length []) -> 0", "(length [6 1 9 1 7]) -> 5", "(length [0 6]) -> 2", "(length []) -> 0", "(length [6 5]) -> 2", "(length [6 4 4 5 8]) -> 5"], "time": 0.03048, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [5]) -> 1", "(length []) -> 0", "(length [3 3 9]) -> 3", "(length [0]) -> 1", "(length [1]) -> 1", "(length [3 8 4 3]) -> 4", "(length []) -> 0", "(length [9 4 2 6]) -> 4", "(length [3 1 4 3]) -> 4", "(length [3 2 6 8 1]) -> 5"], "time": 0.030553, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length []) -> 0", "(length [1 9]) -> 2", "(length [2 0 4 8]) -> 4", "(length []) -> 0", "(length [7 7 8]) -> 3", "(length []) -> 0", "(length [7 4]) -> 2", "(length [8 1 2 5 7]) -> 5", "(length [3 8 1 4]) -> 4", "(length [4 3 2 4 2]) -> 5", "(length [5 9 5 4 4]) -> 5"], "time": 0.032396, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 8 0 7 4]) -> 5", "(length [8 8]) -> 2", "(length [3 5 6 0]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length [0]) -> 1", "(length [0 9 0 8]) -> 4", "(length [1 1 0 5 7]) -> 5", "(length []) -> 0", "(length []) -> 0", "(length [0 8 1 0 4]) -> 5"], "time": 0.034104, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [3 6 2 4]) -> 4", "(length [8 5 2]) -> 3", "(length [8 4 7 4]) -> 4", "(length [4]) -> 1", "(length []) -> 0", "(length [8 8 1 0]) -> 4", "(length []) -> 0", "(length [0 8 0]) -> 3", "(length []) -> 0", "(length []) -> 0", "(length [6 8]) -> 2"], "time": 0.029515, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9]) -> 1", "(length [1 3 8]) -> 3", "(length [8]) -> 1", "(length [8 7 9]) -> 3", "(length [8]) -> 1", "(length [1 3]) -> 2", "(length [8]) -> 1", "(length []) -> 0", "(length [1 5 3 9]) -> 4", "(length [5 9 5 5 2]) -> 5", "(length [9 2 9]) -> 3"], "time": 0.029691, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [4 5 4 7]) -> 4", "(length [0 3 1 7]) -> 4", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [5 8 5]) -> 3", "(length [9]) -> 1", "(length [0]) -> 1", "(length [6 1 2]) -> 3", "(length []) -> 0", "(length []) -> 0"], "time": 0.028859, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [9]) -> 1", "(length [5 7]) -> 2", "(length []) -> 0", "(length []) -> 0", "(length []) -> 0", "(length [5 5 6 5]) -> 4", "(length [3 2 3 1]) -> 4", "(length [3 2 2]) -> 3", "(length [2]) -> 1", "(length []) -> 0", "(length []) -> 0"], "time": 0.029063, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
{"name": "length", "examples": ["(length []) -> 0", "(length [6]) -> 1", "(length [9 1 0 6]) -> 4", "(length [8]) -> 1", "(length [9]) -> 1", "(length [9 8 6 4 6]) -> 5", "(length [4 1]) -> 2", "(length [2 1 9 1 4]) -> 5", "(length [1 2]) -> 2", "(length [3 2]) -> 2", "(length [5 0]) -> 2", "(length [2 7 1]) -> 3"], "time": 0.030345, "solution": "(let length (let a (lambda (b) (foldl b (lambda (d c) (+ 1 d)) 0)) _) _)"}
