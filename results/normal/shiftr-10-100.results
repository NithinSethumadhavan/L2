{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 8.259011, "examples": ["(shiftr [8 0]) -> [0 8]", "(shiftr [6 0 3 0]) -> [0 6 0 3]", "(shiftr [3]) -> [3]", "(shiftr [2 9]) -> [9 2]", "(shiftr [3 2 5 4 2]) -> [2 3 2 5 4]", "(shiftr [9 9 7 7 7]) -> [7 9 9 7 7]", "(shiftr [9]) -> [9]", "(shiftr [3 7 2 8]) -> [8 3 7 2]", "(shiftr [2 4 9 1]) -> [1 2 4 9]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 8.704783, "examples": ["(shiftr [7 5 1 6]) -> [6 7 5 1]", "(shiftr [7 4 5 6 1]) -> [1 7 4 5 6]", "(shiftr [8]) -> [8]", "(shiftr [9 8 8]) -> [8 9 8]", "(shiftr [9 0 0 5 4]) -> [4 9 0 0 5]", "(shiftr [2]) -> [2]", "(shiftr [3 3 8 9]) -> [9 3 3 8]", "(shiftr [4 5 3 7 2]) -> [2 4 5 3 7]", "(shiftr [2 0 2 2 4]) -> [4 2 0 2 2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 8.77667, "examples": ["(shiftr [6 8 3]) -> [3 6 8]", "(shiftr [4 9 1]) -> [1 4 9]", "(shiftr [6 9 4 5 8]) -> [8 6 9 4 5]", "(shiftr [8 0 7 6]) -> [6 8 0 7]", "(shiftr [4 6 0 4]) -> [4 4 6 0]", "(shiftr [4 0 5 8]) -> [8 4 0 5]", "(shiftr [2 4 4 4]) -> [4 2 4 4]", "(shiftr [5 5 1 7 1]) -> [1 5 5 1 7]", "(shiftr [1 7 4]) -> [4 1 7]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 8.754384, "examples": ["(shiftr [1 4 9 8]) -> [8 1 4 9]", "(shiftr [6 0]) -> [0 6]", "(shiftr [9 5]) -> [5 9]", "(shiftr [1 2 9 5 5]) -> [5 1 2 9 5]", "(shiftr [5]) -> [5]", "(shiftr [7 9 3 8 3]) -> [3 7 9 3 8]", "(shiftr [6 1 9 3 2]) -> [2 6 1 9 3]", "(shiftr [7 3 7 3]) -> [3 7 3 7]", "(shiftr [7]) -> [7]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 9.016286, "examples": ["(shiftr [1]) -> [1]", "(shiftr [4 3 4]) -> [4 4 3]", "(shiftr [9 7]) -> [7 9]", "(shiftr [4 5 6 9]) -> [9 4 5 6]", "(shiftr [1 5]) -> [5 1]", "(shiftr [0 1 3 2]) -> [2 0 1 3]", "(shiftr [5]) -> [5]", "(shiftr [5 4 3 2 7]) -> [7 5 4 3 2]", "(shiftr [3 6 9 1 6]) -> [6 3 6 9 1]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 9.068803, "examples": ["(shiftr [9 4 0 8 6]) -> [6 9 4 0 8]", "(shiftr [7 0 9]) -> [9 7 0]", "(shiftr [0 0]) -> [0 0]", "(shiftr [5]) -> [5]", "(shiftr [1 7 1 5]) -> [5 1 7 1]", "(shiftr [7 8 1 1]) -> [1 7 8 1]", "(shiftr [4]) -> [4]", "(shiftr [2 5 9 8 7]) -> [7 2 5 9 8]", "(shiftr [7 9 9 2 2]) -> [2 7 9 9 2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 8.993098, "examples": ["(shiftr [5 9 9]) -> [9 5 9]", "(shiftr [8 5 5 3]) -> [3 8 5 5]", "(shiftr [9 7 4 7]) -> [7 9 7 4]", "(shiftr [4 2 2 3]) -> [3 4 2 2]", "(shiftr [2 6 2 9]) -> [9 2 6 2]", "(shiftr [8 9 9 3 8]) -> [8 8 9 9 3]", "(shiftr [8 7 5]) -> [5 8 7]", "(shiftr [6 4 7]) -> [7 6 4]", "(shiftr [4 7 8]) -> [8 4 7]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 9.150748, "examples": ["(shiftr [2]) -> [2]", "(shiftr [6]) -> [6]", "(shiftr [4]) -> [4]", "(shiftr [1 7 5]) -> [5 1 7]", "(shiftr [7 4 4 7]) -> [7 7 4 4]", "(shiftr [6]) -> [6]", "(shiftr [5 4 8 4]) -> [4 5 4 8]", "(shiftr [5 6]) -> [6 5]", "(shiftr [0 6 8 8]) -> [8 0 6 8]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 9.689988, "examples": ["(shiftr [6 3 4 0]) -> [0 6 3 4]", "(shiftr [2 4 8 6]) -> [6 2 4 8]", "(shiftr [8 1]) -> [1 8]", "(shiftr [8]) -> [8]", "(shiftr [1 5 0]) -> [0 1 5]", "(shiftr [3 0 5 1 3]) -> [3 3 0 5 1]", "(shiftr [7 7 9]) -> [9 7 7]", "(shiftr [0 2 8]) -> [8 0 2]", "(shiftr [2 9 2]) -> [2 2 9]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 9.726721, "examples": ["(shiftr [6 0 0]) -> [0 6 0]", "(shiftr [8]) -> [8]", "(shiftr [1 8 7 6 3]) -> [3 1 8 7 6]", "(shiftr [1 9 5 0]) -> [0 1 9 5]", "(shiftr [4 0]) -> [0 4]", "(shiftr [2 0]) -> [0 2]", "(shiftr [2 4 7 8 0]) -> [0 2 4 7 8]", "(shiftr [9 4 8 7]) -> [7 9 4 8]", "(shiftr [7 5 5]) -> [5 7 5]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 9.658984, "examples": ["(shiftr [6 1 0 3]) -> [3 6 1 0]", "(shiftr [4 2 8]) -> [8 4 2]", "(shiftr [7 5]) -> [5 7]", "(shiftr [8 5 6 7 9]) -> [9 8 5 6 7]", "(shiftr [9 1 5 1]) -> [1 9 1 5]", "(shiftr [2 9 5 1 4]) -> [4 2 9 5 1]", "(shiftr [9]) -> [9]", "(shiftr [1 3 0]) -> [0 1 3]", "(shiftr [6]) -> [6]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 9.737103, "examples": ["(shiftr [6 9]) -> [9 6]", "(shiftr [0 1 7]) -> [7 0 1]", "(shiftr [0 4 8 6 1]) -> [1 0 4 8 6]", "(shiftr [4 7 2 3 7]) -> [7 4 7 2 3]", "(shiftr [3 3 5 1]) -> [1 3 3 5]", "(shiftr [5 8 0]) -> [0 5 8]", "(shiftr [0 6 5]) -> [5 0 6]", "(shiftr [4 5 9 2]) -> [2 4 5 9]", "(shiftr [5 9]) -> [9 5]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 9.762513, "examples": ["(shiftr [5]) -> [5]", "(shiftr [3]) -> [3]", "(shiftr [3 5 2 0]) -> [0 3 5 2]", "(shiftr [4 3]) -> [3 4]", "(shiftr [9 5]) -> [5 9]", "(shiftr [6 7 8]) -> [8 6 7]", "(shiftr [1 7]) -> [7 1]", "(shiftr [1 7 3 9 2]) -> [2 1 7 3 9]", "(shiftr [9 0]) -> [0 9]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 10.243016, "examples": ["(shiftr [0 9 5 5 9]) -> [9 0 9 5 5]", "(shiftr [7 7 2 5]) -> [5 7 7 2]", "(shiftr [0 3]) -> [3 0]", "(shiftr [8 2]) -> [2 8]", "(shiftr [0 0 3 5 8]) -> [8 0 0 3 5]", "(shiftr [5 6]) -> [6 5]", "(shiftr [5]) -> [5]", "(shiftr [5 3 6]) -> [6 5 3]", "(shiftr [3 1 2 4]) -> [4 3 1 2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 10.347298, "examples": ["(shiftr [8 4 0 7 1]) -> [1 8 4 0 7]", "(shiftr [1 7 0]) -> [0 1 7]", "(shiftr [9]) -> [9]", "(shiftr [1 6 6]) -> [6 1 6]", "(shiftr [9 4]) -> [4 9]", "(shiftr [8 4 3 3 5]) -> [5 8 4 3 3]", "(shiftr [9 8 9 6]) -> [6 9 8 9]", "(shiftr [8]) -> [8]", "(shiftr [7]) -> [7]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 10.727626, "examples": ["(shiftr [3 6 5 8 8]) -> [8 3 6 5 8]", "(shiftr [7 7]) -> [7 7]", "(shiftr [7 0 2]) -> [2 7 0]", "(shiftr [4 8 0 2]) -> [2 4 8 0]", "(shiftr [9]) -> [9]", "(shiftr [7 8 8 0 5]) -> [5 7 8 8 0]", "(shiftr [7 9 2 9]) -> [9 7 9 2]", "(shiftr [8 3 9]) -> [9 8 3]", "(shiftr [4 4 0]) -> [0 4 4]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 5.328889, "examples": ["(shiftr [1 9 5]) -> [5 1 9]", "(shiftr [9 6]) -> [6 9]", "(shiftr [6 2 6]) -> [6 6 2]", "(shiftr [8 2 1]) -> [1 8 2]", "(shiftr [6 9 3]) -> [3 6 9]", "(shiftr [6 1 8 0 3]) -> [3 6 1 8 0]", "(shiftr [9 3 6 4 6]) -> [6 9 3 6 4]", "(shiftr [1]) -> [1]", "(shiftr [2 5 7 7]) -> [7 2 5 7]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 5.960152, "examples": ["(shiftr [6 7]) -> [7 6]", "(shiftr [1 6 8 2 7]) -> [7 1 6 8 2]", "(shiftr [4]) -> [4]", "(shiftr [5 7 6]) -> [6 5 7]", "(shiftr [9 8 5 8 0]) -> [0 9 8 5 8]", "(shiftr [4 1 4 6]) -> [6 4 1 4]", "(shiftr [9 3 5 7]) -> [7 9 3 5]", "(shiftr [2 8]) -> [8 2]", "(shiftr [9 9 3 9 1]) -> [1 9 9 3 9]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 5.360444, "examples": ["(shiftr [7]) -> [7]", "(shiftr [5 9]) -> [9 5]", "(shiftr [5 1 3 3 0]) -> [0 5 1 3 3]", "(shiftr [2 9]) -> [9 2]", "(shiftr [9 4 6]) -> [6 9 4]", "(shiftr [0 2 9]) -> [9 0 2]", "(shiftr [9]) -> [9]", "(shiftr [1 5]) -> [5 1]", "(shiftr [9 3 9 5 3]) -> [3 9 3 9 5]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.174483, "examples": ["(shiftr [6 3 8]) -> [8 6 3]", "(shiftr [2]) -> [2]", "(shiftr [4 5 8 7 7]) -> [7 4 5 8 7]", "(shiftr [7 0 0 8 9]) -> [9 7 0 0 8]", "(shiftr [4]) -> [4]", "(shiftr [1]) -> [1]", "(shiftr [1 1 4 6]) -> [6 1 1 4]", "(shiftr [3]) -> [3]", "(shiftr [2 1 8 9 4]) -> [4 2 1 8 9]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.115006, "examples": ["(shiftr [9]) -> [9]", "(shiftr [3 6 4]) -> [4 3 6]", "(shiftr [3 1 8 3 7]) -> [7 3 1 8 3]", "(shiftr [4]) -> [4]", "(shiftr [8 4 1]) -> [1 8 4]", "(shiftr [0 4 3 1]) -> [1 0 4 3]", "(shiftr [3 7 0 4]) -> [4 3 7 0]", "(shiftr [2 1 4 8]) -> [8 2 1 4]", "(shiftr [1 8 6 4 1]) -> [1 1 8 6 4]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.499441, "examples": ["(shiftr [9]) -> [9]", "(shiftr [7 2 9 9]) -> [9 7 2 9]", "(shiftr [1 1]) -> [1 1]", "(shiftr [9 4]) -> [4 9]", "(shiftr [9 4 8 6 5]) -> [5 9 4 8 6]", "(shiftr [8 4 5 6]) -> [6 8 4 5]", "(shiftr [4 0 3]) -> [3 4 0]", "(shiftr [0 2 1 5 7]) -> [7 0 2 1 5]", "(shiftr [6 7 2 1]) -> [1 6 7 2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 5.654577, "examples": ["(shiftr [1 9 4]) -> [4 1 9]", "(shiftr [4 7 3]) -> [3 4 7]", "(shiftr [5 7 6 3]) -> [3 5 7 6]", "(shiftr [9 9]) -> [9 9]", "(shiftr [4 0 1 4 2]) -> [2 4 0 1 4]", "(shiftr [9 5 2]) -> [2 9 5]", "(shiftr [9]) -> [9]", "(shiftr [3 7 1 5]) -> [5 3 7 1]", "(shiftr [6 9 3 4]) -> [4 6 9 3]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.336693, "examples": ["(shiftr [3 9 5 2]) -> [2 3 9 5]", "(shiftr [2 2 6 8 5]) -> [5 2 2 6 8]", "(shiftr [0 4]) -> [4 0]", "(shiftr [8 0]) -> [0 8]", "(shiftr [6 0 5 0 8]) -> [8 6 0 5 0]", "(shiftr [8 9 2 9]) -> [9 8 9 2]", "(shiftr [5 3 2 0]) -> [0 5 3 2]", "(shiftr [3 7 4 5]) -> [5 3 7 4]", "(shiftr [2]) -> [2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.987565, "examples": ["(shiftr [7 5 8 2]) -> [2 7 5 8]", "(shiftr [5 8]) -> [8 5]", "(shiftr [0 9 1 0 0]) -> [0 0 9 1 0]", "(shiftr [3 8 3]) -> [3 3 8]", "(shiftr [0 6 8 2 9]) -> [9 0 6 8 2]", "(shiftr [4 1 3 6]) -> [6 4 1 3]", "(shiftr [9 2 4 3 7]) -> [7 9 2 4 3]", "(shiftr [0 6 5 5]) -> [5 0 6 5]", "(shiftr [2 5]) -> [5 2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.559211, "examples": ["(shiftr [8 1 4]) -> [4 8 1]", "(shiftr [7]) -> [7]", "(shiftr [8]) -> [8]", "(shiftr [0 0]) -> [0 0]", "(shiftr [6 1]) -> [1 6]", "(shiftr [6 6 3]) -> [3 6 6]", "(shiftr [2 3 4]) -> [4 2 3]", "(shiftr [1 6 2 9]) -> [9 1 6 2]", "(shiftr [5 4 2]) -> [2 5 4]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 6.503602, "examples": ["(shiftr [8 2]) -> [2 8]", "(shiftr [5 7 7 5 0]) -> [0 5 7 7 5]", "(shiftr [3 4 8]) -> [8 3 4]", "(shiftr [4]) -> [4]", "(shiftr [2 4 3 4 4]) -> [4 2 4 3 4]", "(shiftr [4 5]) -> [5 4]", "(shiftr [7 0 8 6 6]) -> [6 7 0 8 6]", "(shiftr [1 6 3]) -> [3 1 6]", "(shiftr [6]) -> [6]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.562919, "examples": ["(shiftr [3 7]) -> [7 3]", "(shiftr [9 8 0]) -> [0 9 8]", "(shiftr [0 4 3]) -> [3 0 4]", "(shiftr [9 9 8 6 1]) -> [1 9 9 8 6]", "(shiftr [4]) -> [4]", "(shiftr [3 5 6 7]) -> [7 3 5 6]", "(shiftr [8 4 9]) -> [9 8 4]", "(shiftr [8]) -> [8]", "(shiftr [2 8]) -> [8 2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.193128, "examples": ["(shiftr [1 6 2 2 1]) -> [1 1 6 2 2]", "(shiftr [6 4]) -> [4 6]", "(shiftr [1]) -> [1]", "(shiftr [2 1]) -> [1 2]", "(shiftr [8 8 1 2]) -> [2 8 8 1]", "(shiftr [8 6 7 4]) -> [4 8 6 7]", "(shiftr [3 1 6]) -> [6 3 1]", "(shiftr [4 2]) -> [2 4]", "(shiftr [1 2 9 1]) -> [1 1 2 9]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 8.262837, "examples": ["(shiftr [9 5 3 7]) -> [7 9 5 3]", "(shiftr [7 6]) -> [6 7]", "(shiftr [7 8]) -> [8 7]", "(shiftr [9]) -> [9]", "(shiftr [2]) -> [2]", "(shiftr [8 6 1]) -> [1 8 6]", "(shiftr [9 7]) -> [7 9]", "(shiftr [7]) -> [7]", "(shiftr [4 8 7]) -> [7 4 8]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.551243, "examples": ["(shiftr [3]) -> [3]", "(shiftr [5 2 8 2 4]) -> [4 5 2 8 2]", "(shiftr [6 8 9 9 2]) -> [2 6 8 9 9]", "(shiftr [3 2]) -> [2 3]", "(shiftr [2 8 3 4]) -> [4 2 8 3]", "(shiftr [8 4 3 7]) -> [7 8 4 3]", "(shiftr [7 1 6 6 3]) -> [3 7 1 6 6]", "(shiftr [5 3]) -> [3 5]", "(shiftr [6]) -> [6]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.323453, "examples": ["(shiftr [9 5 1 6 2]) -> [2 9 5 1 6]", "(shiftr [7]) -> [7]", "(shiftr [8 2 3]) -> [3 8 2]", "(shiftr [5]) -> [5]", "(shiftr [1 5 5]) -> [5 1 5]", "(shiftr [5 8]) -> [8 5]", "(shiftr [0 3]) -> [3 0]", "(shiftr [0]) -> [0]", "(shiftr [6 5 4 9]) -> [9 6 5 4]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.680958, "examples": ["(shiftr [5 7 4]) -> [4 5 7]", "(shiftr [1 1 5 7 3]) -> [3 1 1 5 7]", "(shiftr [7]) -> [7]", "(shiftr [4]) -> [4]", "(shiftr [0 5 9 3 5]) -> [5 0 5 9 3]", "(shiftr [8]) -> [8]", "(shiftr [5 9]) -> [9 5]", "(shiftr [3 8]) -> [8 3]", "(shiftr [7 1 5 0]) -> [0 7 1 5]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 5.752115, "examples": ["(shiftr [2 0 4]) -> [4 2 0]", "(shiftr [5 3 2 3]) -> [3 5 3 2]", "(shiftr [2 5 5 8 4]) -> [4 2 5 5 8]", "(shiftr [8 8 5]) -> [5 8 8]", "(shiftr [1 9]) -> [9 1]", "(shiftr [4]) -> [4]", "(shiftr [9 6]) -> [6 9]", "(shiftr [8 5 5 6]) -> [6 8 5 5]", "(shiftr [1 6 5 4]) -> [4 1 6 5]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 5.525782, "examples": ["(shiftr [8 1]) -> [1 8]", "(shiftr [8 5 9]) -> [9 8 5]", "(shiftr [0 7]) -> [7 0]", "(shiftr [9 2 1 7 7]) -> [7 9 2 1 7]", "(shiftr [7]) -> [7]", "(shiftr [8 9 9]) -> [9 8 9]", "(shiftr [2 5]) -> [5 2]", "(shiftr [3]) -> [3]", "(shiftr [7 7]) -> [7 7]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 5.558147, "examples": ["(shiftr [9]) -> [9]", "(shiftr [4 5 4 2]) -> [2 4 5 4]", "(shiftr [2]) -> [2]", "(shiftr [5 4 1 2 1]) -> [1 5 4 1 2]", "(shiftr [3 5 9 2 9]) -> [9 3 5 9 2]", "(shiftr [7 8 4]) -> [4 7 8]", "(shiftr [9 8]) -> [8 9]", "(shiftr [3 1 3]) -> [3 3 1]", "(shiftr [6 3 5 0]) -> [0 6 3 5]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.556386, "examples": ["(shiftr [6]) -> [6]", "(shiftr [5 6 7 9]) -> [9 5 6 7]", "(shiftr [2 1 3]) -> [3 2 1]", "(shiftr [7 5]) -> [5 7]", "(shiftr [8 3 6]) -> [6 8 3]", "(shiftr [9]) -> [9]", "(shiftr [2 8 9 9]) -> [9 2 8 9]", "(shiftr [1]) -> [1]", "(shiftr [2 5 9 3 2]) -> [2 2 5 9 3]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.006264, "examples": ["(shiftr [3 9 8 8]) -> [8 3 9 8]", "(shiftr [7 2 5 9 7]) -> [7 7 2 5 9]", "(shiftr [6]) -> [6]", "(shiftr [5 1]) -> [1 5]", "(shiftr [9 9]) -> [9 9]", "(shiftr [5 1]) -> [1 5]", "(shiftr [6 8]) -> [8 6]", "(shiftr [3 1 7]) -> [7 3 1]", "(shiftr [0]) -> [0]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.798778, "examples": ["(shiftr [0 7]) -> [7 0]", "(shiftr [5 3 4 9 1]) -> [1 5 3 4 9]", "(shiftr [1 1]) -> [1 1]", "(shiftr [3 8 5 7]) -> [7 3 8 5]", "(shiftr [4 1 3 0]) -> [0 4 1 3]", "(shiftr [1]) -> [1]", "(shiftr [5 1]) -> [1 5]", "(shiftr [5]) -> [5]", "(shiftr [0 0 8 9 2]) -> [2 0 0 8 9]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.221393, "examples": ["(shiftr [5 2 9 2 8]) -> [8 5 2 9 2]", "(shiftr [9]) -> [9]", "(shiftr [3 9 8]) -> [8 3 9]", "(shiftr [8]) -> [8]", "(shiftr [3]) -> [3]", "(shiftr [7 5 3 1 5]) -> [5 7 5 3 1]", "(shiftr [1 5 5 7]) -> [7 1 5 5]", "(shiftr [7 2 2 7]) -> [7 7 2 2]", "(shiftr [5 1 4 9 6]) -> [6 5 1 4 9]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 5.623264, "examples": ["(shiftr [8 6 5]) -> [5 8 6]", "(shiftr [7]) -> [7]", "(shiftr [4 6 1]) -> [1 4 6]", "(shiftr [4]) -> [4]", "(shiftr [2]) -> [2]", "(shiftr [0 8 9 0 9]) -> [9 0 8 9 0]", "(shiftr [9]) -> [9]", "(shiftr [4 7]) -> [7 4]", "(shiftr [7 5 8 9]) -> [9 7 5 8]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 8.09616, "examples": ["(shiftr [0 5 8 0 6]) -> [6 0 5 8 0]", "(shiftr [5 6]) -> [6 5]", "(shiftr [0 8 9]) -> [9 0 8]", "(shiftr [3 1]) -> [1 3]", "(shiftr [6 2 6 4]) -> [4 6 2 6]", "(shiftr [2]) -> [2]", "(shiftr [1 6 0 0 4]) -> [4 1 6 0 0]", "(shiftr [6 4 1 8]) -> [8 6 4 1]", "(shiftr [2]) -> [2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.037122, "examples": ["(shiftr [4]) -> [4]", "(shiftr [1 1]) -> [1 1]", "(shiftr [6 9 3 1]) -> [1 6 9 3]", "(shiftr [9 5 0 0 9]) -> [9 9 5 0 0]", "(shiftr [4 4]) -> [4 4]", "(shiftr [8 2 6]) -> [6 8 2]", "(shiftr [2 7 9 3]) -> [3 2 7 9]", "(shiftr [6 3 8]) -> [8 6 3]", "(shiftr [4 3 4 9]) -> [9 4 3 4]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 7.755753, "examples": ["(shiftr [2 4 3]) -> [3 2 4]", "(shiftr [8]) -> [8]", "(shiftr [0 5 5]) -> [5 0 5]", "(shiftr [3 1]) -> [1 3]", "(shiftr [0 3 0]) -> [0 0 3]", "(shiftr [0 6 3 9 3]) -> [3 0 6 3 9]", "(shiftr [8 1 5 5 1]) -> [1 8 1 5 5]", "(shiftr [1]) -> [1]", "(shiftr [8 8]) -> [8 8]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.650223, "examples": ["(shiftr [5 7]) -> [7 5]", "(shiftr [5 9 6 3]) -> [3 5 9 6]", "(shiftr [6]) -> [6]", "(shiftr [1 3]) -> [3 1]", "(shiftr [2 5 0 9]) -> [9 2 5 0]", "(shiftr [4 3 0 5 0]) -> [0 4 3 0 5]", "(shiftr [2 4]) -> [4 2]", "(shiftr [9]) -> [9]", "(shiftr [8 7 7 7 1]) -> [1 8 7 7 7]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.396402, "examples": ["(shiftr [3]) -> [3]", "(shiftr [3 0 6 0]) -> [0 3 0 6]", "(shiftr [5 7]) -> [7 5]", "(shiftr [5 4 5 4]) -> [4 5 4 5]", "(shiftr [6 7 0 9]) -> [9 6 7 0]", "(shiftr [2 0 5 5 2]) -> [2 2 0 5 5]", "(shiftr [2]) -> [2]", "(shiftr [4 4 8]) -> [8 4 4]", "(shiftr [5 5 2 2 8]) -> [8 5 5 2 2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.240927, "examples": ["(shiftr [6]) -> [6]", "(shiftr [7 2 6 0 3]) -> [3 7 2 6 0]", "(shiftr [1 4 7 2 7]) -> [7 1 4 7 2]", "(shiftr [2 3]) -> [3 2]", "(shiftr [6]) -> [6]", "(shiftr [0 3 8 8]) -> [8 0 3 8]", "(shiftr [2 5 6]) -> [6 2 5]", "(shiftr [7 1 8 4]) -> [4 7 1 8]", "(shiftr [4 6 3]) -> [3 4 6]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.36714, "examples": ["(shiftr [4 5 1 2]) -> [2 4 5 1]", "(shiftr [7 7]) -> [7 7]", "(shiftr [7 8 5 2 8]) -> [8 7 8 5 2]", "(shiftr [8 2 7 1]) -> [1 8 2 7]", "(shiftr [6 0 3 9]) -> [9 6 0 3]", "(shiftr [0 2 9]) -> [9 0 2]", "(shiftr [9]) -> [9]", "(shiftr [8 7 4]) -> [4 8 7]", "(shiftr [1 9 0 1]) -> [1 1 9 0]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 4.536551, "examples": ["(shiftr [1 9 8]) -> [8 1 9]", "(shiftr [2 6]) -> [6 2]", "(shiftr [7]) -> [7]", "(shiftr [3]) -> [3]", "(shiftr [0 2]) -> [2 0]", "(shiftr [4 1 8 6]) -> [6 4 1 8]", "(shiftr [5 3]) -> [3 5]", "(shiftr [1 2 9 6]) -> [6 1 2 9]", "(shiftr [8 1 1 0]) -> [0 8 1 1]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.102504, "examples": ["(shiftr [3 7 2 5]) -> [5 3 7 2]", "(shiftr [5 9 0 3 9]) -> [9 5 9 0 3]", "(shiftr [6 7 1 9 8]) -> [8 6 7 1 9]", "(shiftr [5 3 1 7]) -> [7 5 3 1]", "(shiftr [9 5 0 8 2]) -> [2 9 5 0 8]", "(shiftr [7 0 2 3]) -> [3 7 0 2]", "(shiftr [1 7 2]) -> [2 1 7]", "(shiftr [8 1 2 9]) -> [9 8 1 2]", "(shiftr [6]) -> [6]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 5.27908, "examples": ["(shiftr [7 5 5 9 8]) -> [8 7 5 5 9]", "(shiftr [0 5 9 7]) -> [7 0 5 9]", "(shiftr [5 9]) -> [9 5]", "(shiftr [7 2 0 9 3]) -> [3 7 2 0 9]", "(shiftr [4]) -> [4]", "(shiftr [7]) -> [7]", "(shiftr [5]) -> [5]", "(shiftr [5 6]) -> [6 5]", "(shiftr [2 5]) -> [5 2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.465523, "examples": ["(shiftr [1 9 3 5 2]) -> [2 1 9 3 5]", "(shiftr [3 3 1 1]) -> [1 3 3 1]", "(shiftr [5 9 5 0]) -> [0 5 9 5]", "(shiftr [6 9]) -> [9 6]", "(shiftr [9 2 1]) -> [1 9 2]", "(shiftr [9 1]) -> [1 9]", "(shiftr [0 9 3]) -> [3 0 9]", "(shiftr [9 7 8]) -> [8 9 7]", "(shiftr [1]) -> [1]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 6.92233, "examples": ["(shiftr [1 8 7 6 0]) -> [0 1 8 7 6]", "(shiftr [2]) -> [2]", "(shiftr [8 5 7 0 2]) -> [2 8 5 7 0]", "(shiftr [8 0 8]) -> [8 8 0]", "(shiftr [9 4 4]) -> [4 9 4]", "(shiftr [4]) -> [4]", "(shiftr [1 1 8 1 5]) -> [5 1 1 8 1]", "(shiftr [2]) -> [2]", "(shiftr [3 4 6 7 0]) -> [0 3 4 6 7]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 7.620519, "examples": ["(shiftr [7 1]) -> [1 7]", "(shiftr [5 0 7]) -> [7 5 0]", "(shiftr [8 4]) -> [4 8]", "(shiftr [7 2]) -> [2 7]", "(shiftr [8 7 8 1 4]) -> [4 8 7 8 1]", "(shiftr [4 9 2]) -> [2 4 9]", "(shiftr [8 3 0 0 1]) -> [1 8 3 0 0]", "(shiftr [7]) -> [7]", "(shiftr [4 4 5 8 2]) -> [2 4 4 5 8]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 8.282343, "examples": ["(shiftr [4 7 5 2]) -> [2 4 7 5]", "(shiftr [9 0 1]) -> [1 9 0]", "(shiftr [7 7 6]) -> [6 7 7]", "(shiftr [4 0]) -> [0 4]", "(shiftr [9 3 6 1]) -> [1 9 3 6]", "(shiftr [1 1 5 1]) -> [1 1 1 5]", "(shiftr [1 0 2 5 2]) -> [2 1 0 2 5]", "(shiftr [3 2]) -> [2 3]", "(shiftr [9 0]) -> [0 9]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 6.979606, "examples": ["(shiftr [2 1]) -> [1 2]", "(shiftr [1 6 5]) -> [5 1 6]", "(shiftr [4]) -> [4]", "(shiftr [7]) -> [7]", "(shiftr [2 5 8 6 0]) -> [0 2 5 8 6]", "(shiftr [2 7]) -> [7 2]", "(shiftr [5 2]) -> [2 5]", "(shiftr [8 3]) -> [3 8]", "(shiftr [7]) -> [7]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 5.616248, "examples": ["(shiftr [3 5 8]) -> [8 3 5]", "(shiftr [5 0 9 4]) -> [4 5 0 9]", "(shiftr [0 5 1]) -> [1 0 5]", "(shiftr [9]) -> [9]", "(shiftr [8 6 9]) -> [9 8 6]", "(shiftr [4 1 5 1 5]) -> [5 4 1 5 1]", "(shiftr [1 4 5]) -> [5 1 4]", "(shiftr [7 8 9]) -> [9 7 8]", "(shiftr [2]) -> [2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.20235, "examples": ["(shiftr [1]) -> [1]", "(shiftr [7 4 2 6]) -> [6 7 4 2]", "(shiftr [7 0 0 2 9]) -> [9 7 0 0 2]", "(shiftr [6 8 8 4 4]) -> [4 6 8 8 4]", "(shiftr [4 5 9]) -> [9 4 5]", "(shiftr [0]) -> [0]", "(shiftr [5 9 0 6 2]) -> [2 5 9 0 6]", "(shiftr [1 9 4 8]) -> [8 1 9 4]", "(shiftr [9 7 2]) -> [2 9 7]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 8.322021, "examples": ["(shiftr [5 2 5 0 3]) -> [3 5 2 5 0]", "(shiftr [8 7 6]) -> [6 8 7]", "(shiftr [4 1]) -> [1 4]", "(shiftr [2]) -> [2]", "(shiftr [4 4 4 3]) -> [3 4 4 4]", "(shiftr [2 4 5 3]) -> [3 2 4 5]", "(shiftr [6 1 9 4]) -> [4 6 1 9]", "(shiftr [4 0]) -> [0 4]", "(shiftr [8 4 8 6]) -> [6 8 4 8]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 6.364201, "examples": ["(shiftr [6 8]) -> [8 6]", "(shiftr [9 0 0]) -> [0 9 0]", "(shiftr [4 1 3 6 8]) -> [8 4 1 3 6]", "(shiftr [8 6 7 4 6]) -> [6 8 6 7 4]", "(shiftr [4]) -> [4]", "(shiftr [1 2]) -> [2 1]", "(shiftr [2 8 1 5 3]) -> [3 2 8 1 5]", "(shiftr [1 3 0]) -> [0 1 3]", "(shiftr [1]) -> [1]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.669875, "examples": ["(shiftr [7 4 9]) -> [9 7 4]", "(shiftr [3]) -> [3]", "(shiftr [3 9]) -> [9 3]", "(shiftr [9]) -> [9]", "(shiftr [9 2 9 1]) -> [1 9 2 9]", "(shiftr [8 3 1]) -> [1 8 3]", "(shiftr [6 1 2 3]) -> [3 6 1 2]", "(shiftr [0 9 2 8 1]) -> [1 0 9 2 8]", "(shiftr [9]) -> [9]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.760382, "examples": ["(shiftr [6 8 6 2]) -> [2 6 8 6]", "(shiftr [8 2 3 4]) -> [4 8 2 3]", "(shiftr [8 9 5 3]) -> [3 8 9 5]", "(shiftr [4 1]) -> [1 4]", "(shiftr [6 5]) -> [5 6]", "(shiftr [6 0]) -> [0 6]", "(shiftr [8]) -> [8]", "(shiftr [1 5 4 0]) -> [0 1 5 4]", "(shiftr [2 2 0]) -> [0 2 2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 7.869855, "examples": ["(shiftr [8 8 6 2]) -> [2 8 8 6]", "(shiftr [3]) -> [3]", "(shiftr [3]) -> [3]", "(shiftr [4 3 7 3]) -> [3 4 3 7]", "(shiftr [5 6 5 9]) -> [9 5 6 5]", "(shiftr [3 7 3 1 9]) -> [9 3 7 3 1]", "(shiftr [3 5 9 4]) -> [4 3 5 9]", "(shiftr [1 1 0]) -> [0 1 1]", "(shiftr [8]) -> [8]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 5.510184, "examples": ["(shiftr [9 8 7]) -> [7 9 8]", "(shiftr [5 8 2 3 4]) -> [4 5 8 2 3]", "(shiftr [0 9 5 0 2]) -> [2 0 9 5 0]", "(shiftr [1 2 4]) -> [4 1 2]", "(shiftr [7 3]) -> [3 7]", "(shiftr [9 7 7]) -> [7 9 7]", "(shiftr [2]) -> [2]", "(shiftr [6 7]) -> [7 6]", "(shiftr [6 2 8 8 5]) -> [5 6 2 8 8]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.863824, "examples": ["(shiftr [4 4 7 8]) -> [8 4 4 7]", "(shiftr [6 2 7 1]) -> [1 6 2 7]", "(shiftr [0 4]) -> [4 0]", "(shiftr [7 0 1 2 3]) -> [3 7 0 1 2]", "(shiftr [1]) -> [1]", "(shiftr [7]) -> [7]", "(shiftr [0 7]) -> [7 0]", "(shiftr [1 3]) -> [3 1]", "(shiftr [1 9 9 2 8]) -> [8 1 9 9 2]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 5.969472, "examples": ["(shiftr [6 9 9]) -> [9 6 9]", "(shiftr [9 5 3]) -> [3 9 5]", "(shiftr [0 1 7 2]) -> [2 0 1 7]", "(shiftr [0 8]) -> [8 0]", "(shiftr [8 8 3]) -> [3 8 8]", "(shiftr [7 4 7 9]) -> [9 7 4 7]", "(shiftr [5 2]) -> [2 5]", "(shiftr [6]) -> [6]", "(shiftr [6 5]) -> [5 6]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.409805, "examples": ["(shiftr [8 7 1 0]) -> [0 8 7 1]", "(shiftr [6 7 1 1 3]) -> [3 6 7 1 1]", "(shiftr [8 1 9 5 2]) -> [2 8 1 9 5]", "(shiftr [9 4 6]) -> [6 9 4]", "(shiftr [2]) -> [2]", "(shiftr [6 5 2]) -> [2 6 5]", "(shiftr [0]) -> [0]", "(shiftr [7 0]) -> [0 7]", "(shiftr [4 0 7 4]) -> [4 4 0 7]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.954952, "examples": ["(shiftr [7 0 2 7]) -> [7 7 0 2]", "(shiftr [4 9 6]) -> [6 4 9]", "(shiftr [7 3 6 9 4]) -> [4 7 3 6 9]", "(shiftr [8 4 1 3]) -> [3 8 4 1]", "(shiftr [8 8 9 1 7]) -> [7 8 8 9 1]", "(shiftr [9 7]) -> [7 9]", "(shiftr [7 8]) -> [8 7]", "(shiftr [0 7 5 9 5]) -> [5 0 7 5 9]", "(shiftr [1 0 6]) -> [6 1 0]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.30294, "examples": ["(shiftr [6 1]) -> [1 6]", "(shiftr [2 0 1]) -> [1 2 0]", "(shiftr [5 6]) -> [6 5]", "(shiftr [9 8 9]) -> [9 9 8]", "(shiftr [7 4 4 8]) -> [8 7 4 4]", "(shiftr [3 2 3]) -> [3 3 2]", "(shiftr [9 3 2]) -> [2 9 3]", "(shiftr [2 5 9 3 4]) -> [4 2 5 9 3]", "(shiftr [5 5 1]) -> [1 5 5]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.636545, "examples": ["(shiftr [1 2]) -> [2 1]", "(shiftr [6 2]) -> [2 6]", "(shiftr [3 8 0]) -> [0 3 8]", "(shiftr [0 0 3]) -> [3 0 0]", "(shiftr [5 2 7 4]) -> [4 5 2 7]", "(shiftr [0 3 9]) -> [9 0 3]", "(shiftr [5]) -> [5]", "(shiftr [8 7]) -> [7 8]", "(shiftr [5 5 8 7 7]) -> [7 5 5 8 7]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 5.335583, "examples": ["(shiftr [2]) -> [2]", "(shiftr [8 5 9]) -> [9 8 5]", "(shiftr [7 3 5 8 4]) -> [4 7 3 5 8]", "(shiftr [9 5 1]) -> [1 9 5]", "(shiftr [6 5 4 6]) -> [6 6 5 4]", "(shiftr [3 7 5 8]) -> [8 3 7 5]", "(shiftr [4 8 7 0]) -> [0 4 8 7]", "(shiftr [5 7 9]) -> [9 5 7]", "(shiftr [4]) -> [4]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr (reverse b))))) b)) _) _)", "time": 6.923692, "examples": ["(shiftr [9 2 7 3]) -> [3 9 2 7]", "(shiftr [6 3 2]) -> [2 6 3]", "(shiftr [9 9]) -> [9 9]", "(shiftr [2 8 9 1 9]) -> [9 2 8 9 1]", "(shiftr [3 3 4 1 4]) -> [4 3 3 4 1]", "(shiftr [5]) -> [5]", "(shiftr [9 5 4 6]) -> [6 9 5 4]", "(shiftr [0]) -> [0]", "(shiftr [2 8 6 2]) -> [2 2 8 6]"], "name": "shiftr"}
{"solution": "(let shiftr (let a (lambda (b) (foldl b (lambda (d c) (cons c (reverse (cdr d)))) (reverse b))) _) _)", "time": 7.494048, "examples": ["(shiftr [2 9 0 6 4]) -> [4 2 9 0 6]", "(shiftr [1 0 5 6 4]) -> [4 1 0 5 6]", "(shiftr [0 8]) -> [8 0]", "(shiftr [3 9 6]) -> [6 3 9]", "(shiftr [0 1 2]) -> [2 0 1]", "(shiftr [2]) -> [2]", "(shiftr [4 8 2]) -> [2 4 8]", "(shiftr [5]) -> [5]", "(shiftr [1 0 4 4 6]) -> [6 1 0 4 4]"], "name": "shiftr"}
