{"solution": "(let concat (let a (lambda (c b) b) _) _)", "name": "concat", "time": 0.000504, "examples": ["(concat [] []) -> []", "(concat [] [2 1 1 4]) -> [2 1 1 4]", "(concat [] []) -> []"]}
{"solution": "(let concat (let a (lambda (c b) b) _) _)", "name": "concat", "time": 0.00041, "examples": ["(concat [] []) -> []", "(concat [] [4]) -> [4]", "(concat [] [1 1 0]) -> [1 1 0]"]}
{"solution": "(let concat (let a (lambda (c b) c) _) _)", "name": "concat", "time": 0.000669, "examples": ["(concat [] []) -> []", "(concat [] []) -> []", "(concat [7 8 7 7] []) -> [7 8 7 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.248759, "examples": ["(concat [] []) -> []", "(concat [7 9 7] [5]) -> [7 9 7 5]", "(concat [1] [1 7 1 3]) -> [1 1 7 1 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.263383, "examples": ["(concat [] []) -> []", "(concat [] []) -> []", "(concat [5 5 3 2] [3]) -> [5 5 3 2 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.272248, "examples": ["(concat [] []) -> []", "(concat [7 8 9] [5 4 8 3]) -> [7 8 9 5 4 8 3]", "(concat [] [5 6 2 6]) -> [5 6 2 6]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.279768, "examples": ["(concat [] []) -> []", "(concat [5 2] [6 8 6 0]) -> [5 2 6 8 6 0]", "(concat [2 5] [8 7 4 8 8]) -> [2 5 8 7 4 8 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.2809, "examples": ["(concat [] []) -> []", "(concat [5 2 9 2 8] []) -> [5 2 9 2 8]", "(concat [2 2] [2]) -> [2 2 2]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.235135, "examples": ["(concat [] []) -> []", "(concat [1 3 4 7] []) -> [1 3 4 7]", "(concat [7 0] [4]) -> [7 0 4]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.230065, "examples": ["(concat [] []) -> []", "(concat [3] [7 2 3]) -> [3 7 2 3]", "(concat [0 6 7] [9]) -> [0 6 7 9]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.274869, "examples": ["(concat [] []) -> []", "(concat [3 7 7 3 6] [9 5 3 0 6]) -> [3 7 7 3 6 9 5 3 0 6]", "(concat [6 7 7 0] [9 8 6 5 7]) -> [6 7 7 0 9 8 6 5 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.250445, "examples": ["(concat [] []) -> []", "(concat [0] [9 7]) -> [0 9 7]", "(concat [3 3] [2 9]) -> [3 3 2 9]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.192992, "examples": ["(concat [] []) -> []", "(concat [1 3] [7]) -> [1 3 7]", "(concat [4 5] [9]) -> [4 5 9]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.181462, "examples": ["(concat [] []) -> []", "(concat [0 4 1 0] [5 8]) -> [0 4 1 0 5 8]", "(concat [] [5 2 2 5 1]) -> [5 2 2 5 1]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.277857, "examples": ["(concat [] []) -> []", "(concat [7 3 9 9 6] [6 2 5]) -> [7 3 9 9 6 6 2 5]", "(concat [] [9 2]) -> [9 2]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.268427, "examples": ["(concat [] []) -> []", "(concat [1 6 1 3 7] [2 2]) -> [1 6 1 3 7 2 2]", "(concat [] [0 0 2]) -> [0 0 2]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.197181, "examples": ["(concat [] []) -> []", "(concat [7 7 1 2] []) -> [7 7 1 2]", "(concat [6 0 1 2] [8 3 8]) -> [6 0 1 2 8 3 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.20488, "examples": ["(concat [] []) -> []", "(concat [4] [8 3 3]) -> [4 8 3 3]", "(concat [4 0] [6 9 8]) -> [4 0 6 9 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.189611, "examples": ["(concat [] []) -> []", "(concat [4 4] [3]) -> [4 4 3]", "(concat [5 3 0 0] []) -> [5 3 0 0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.233343, "examples": ["(concat [] []) -> []", "(concat [4] [0 8 5 1]) -> [4 0 8 5 1]", "(concat [7 8 9 5 6] [7 1]) -> [7 8 9 5 6 7 1]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.241777, "examples": ["(concat [] []) -> []", "(concat [1 8 8 7] [9 8 8]) -> [1 8 8 7 9 8 8]", "(concat [4 8 5 9 8] [7 3 6 4]) -> [4 8 5 9 8 7 3 6 4]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.239126, "examples": ["(concat [] []) -> []", "(concat [2 1] [0]) -> [2 1 0]", "(concat [5] [6 5 8]) -> [5 6 5 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.277065, "examples": ["(concat [] []) -> []", "(concat [9 3 7 2] [4 4 1]) -> [9 3 7 2 4 4 1]", "(concat [5] [7 7 0]) -> [5 7 7 0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.263325, "examples": ["(concat [] []) -> []", "(concat [4 3 1 2] []) -> [4 3 1 2]", "(concat [5 7 0] [9 5 0 6]) -> [5 7 0 9 5 0 6]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.250477, "examples": ["(concat [] []) -> []", "(concat [6 1] [0 6]) -> [6 1 0 6]", "(concat [5 1 1] []) -> [5 1 1]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.221378, "examples": ["(concat [] []) -> []", "(concat [5 1] [2 7 6]) -> [5 1 2 7 6]", "(concat [1 7 0] []) -> [1 7 0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.236319, "examples": ["(concat [] []) -> []", "(concat [0 5 5] []) -> [0 5 5]", "(concat [3 8 3] [2 8]) -> [3 8 3 2 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.256005, "examples": ["(concat [] []) -> []", "(concat [1 1 9 3 6] [2 9 4 7]) -> [1 1 9 3 6 2 9 4 7]", "(concat [0 7 8 8] [4]) -> [0 7 8 8 4]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.257585, "examples": ["(concat [] []) -> []", "(concat [3 2 2] [4 8 9]) -> [3 2 2 4 8 9]", "(concat [9] [5 8 3]) -> [9 5 8 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.274877, "examples": ["(concat [] []) -> []", "(concat [7 6 2] [9 7 0]) -> [7 6 2 9 7 0]", "(concat [5 0 0 3] []) -> [5 0 0 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.20146, "examples": ["(concat [] []) -> []", "(concat [6 6] [5 1 7]) -> [6 6 5 1 7]", "(concat [1 6] [6]) -> [1 6 6]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.273479, "examples": ["(concat [] []) -> []", "(concat [9 3] []) -> [9 3]", "(concat [8 3] [1 1 6 7 2]) -> [8 3 1 1 6 7 2]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.30009, "examples": ["(concat [] []) -> []", "(concat [4 7] [5 0]) -> [4 7 5 0]", "(concat [9 0] [5 7 0]) -> [9 0 5 7 0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.182167, "examples": ["(concat [] []) -> []", "(concat [4 5 3 2] [4 7 4 0 8]) -> [4 5 3 2 4 7 4 0 8]", "(concat [7 6 1 0] [6 6]) -> [7 6 1 0 6 6]"]}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d b)) b)) _) _)", "name": "concat", "time": 0.216637, "examples": ["(concat [] []) -> []", "(concat [9] [8]) -> [9 8]", "(concat [] [9 0]) -> [9 0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.194139, "examples": ["(concat [] []) -> []", "(concat [9 5 0 2] [3 6]) -> [9 5 0 2 3 6]", "(concat [1 1] [0]) -> [1 1 0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.198911, "examples": ["(concat [] []) -> []", "(concat [3] [1 2 5 9 8]) -> [3 1 2 5 9 8]", "(concat [9 1 1 9 0] [2 9 7 2 2]) -> [9 1 1 9 0 2 9 7 2 2]"]}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d b)) b)) _) _)", "name": "concat", "time": 0.168765, "examples": ["(concat [] []) -> []", "(concat [] [3 2]) -> [3 2]", "(concat [6] [4 5 8]) -> [6 4 5 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.185868, "examples": ["(concat [] []) -> []", "(concat [0 6 1 1] [4 3 3 1 8]) -> [0 6 1 1 4 3 3 1 8]", "(concat [5 4 9] [2 5]) -> [5 4 9 2 5]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.244783, "examples": ["(concat [] []) -> []", "(concat [2 4 4 5] []) -> [2 4 4 5]", "(concat [7 8 5] [4 0 5 1]) -> [7 8 5 4 0 5 1]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.235188, "examples": ["(concat [] []) -> []", "(concat [9 0 1 8] [2 5 1 8 1]) -> [9 0 1 8 2 5 1 8 1]", "(concat [9 5 7 0 4] [6]) -> [9 5 7 0 4 6]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.243647, "examples": ["(concat [] []) -> []", "(concat [7 8 2 0] [7 9 9]) -> [7 8 2 0 7 9 9]", "(concat [5] [0]) -> [5 0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.203194, "examples": ["(concat [] []) -> []", "(concat [8] [9 5 8 8 4]) -> [8 9 5 8 8 4]", "(concat [8 5 1 1 6] [7 3 5 1 7]) -> [8 5 1 1 6 7 3 5 1 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d b)) b)) _) _)", "name": "concat", "time": 0.175879, "examples": ["(concat [] []) -> []", "(concat [] [7]) -> [7]", "(concat [9] [2 3 6]) -> [9 2 3 6]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.229631, "examples": ["(concat [] []) -> []", "(concat [7] [1 4]) -> [7 1 4]", "(concat [0 4 1] [2 6 9 9 9]) -> [0 4 1 2 6 9 9 9]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.243448, "examples": ["(concat [] []) -> []", "(concat [4 7] [2 6]) -> [4 7 2 6]", "(concat [] [9 5 2 3 8]) -> [9 5 2 3 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.25981, "examples": ["(concat [] []) -> []", "(concat [4] []) -> [4]", "(concat [9 3] [4 7 5 4]) -> [9 3 4 7 5 4]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.236603, "examples": ["(concat [] []) -> []", "(concat [5 1 4 6] [5 6 1 1 9]) -> [5 1 4 6 5 6 1 1 9]", "(concat [4] [9 0 4 8 4]) -> [4 9 0 4 8 4]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.255184, "examples": ["(concat [] []) -> []", "(concat [3 7 0 2 5] [6 2]) -> [3 7 0 2 5 6 2]", "(concat [8 8 0] [6 0]) -> [8 8 0 6 0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.172581, "examples": ["(concat [] []) -> []", "(concat [3 2 0 9] [2 5]) -> [3 2 0 9 2 5]", "(concat [1 6] [3 5]) -> [1 6 3 5]"]}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.113649, "examples": ["(concat [] []) -> []", "(concat [] [1 0 8 3]) -> [1 0 8 3]", "(concat [2 8 2] [3]) -> [2 8 2 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.222452, "examples": ["(concat [] []) -> []", "(concat [1 2] [5]) -> [1 2 5]", "(concat [0 2 8] [4 4 2 6]) -> [0 2 8 4 4 2 6]"]}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.196593, "examples": ["(concat [] []) -> []", "(concat [] [3 9 9]) -> [3 9 9]", "(concat [7 7] [0 8 5 4 3]) -> [7 7 0 8 5 4 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.192986, "examples": ["(concat [] []) -> []", "(concat [7 3 4] [8]) -> [7 3 4 8]", "(concat [3 3 8 7] [3]) -> [3 3 8 7 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.221983, "examples": ["(concat [] []) -> []", "(concat [0 2 6] [9 7]) -> [0 2 6 9 7]", "(concat [] [0 2 3 0 9]) -> [0 2 3 0 9]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.213619, "examples": ["(concat [] []) -> []", "(concat [4 0 6 7] [7]) -> [4 0 6 7 7]", "(concat [5 5] [7]) -> [5 5 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.247418, "examples": ["(concat [] []) -> []", "(concat [1 4 6 8 7] [3 1 9 7]) -> [1 4 6 8 7 3 1 9 7]", "(concat [] [5 6 6]) -> [5 6 6]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.209904, "examples": ["(concat [] []) -> []", "(concat [2 7] [8 8]) -> [2 7 8 8]", "(concat [6] [9 4 5 2 5]) -> [6 9 4 5 2 5]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.219903, "examples": ["(concat [] []) -> []", "(concat [3] []) -> [3]", "(concat [6 0 5 9 3] [5 4]) -> [6 0 5 9 3 5 4]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.22662, "examples": ["(concat [] []) -> []", "(concat [4 0 1 6 5] []) -> [4 0 1 6 5]", "(concat [0 2 8 3 5] [1 9]) -> [0 2 8 3 5 1 9]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.229573, "examples": ["(concat [] []) -> []", "(concat [1 7 8 9 4] []) -> [1 7 8 9 4]", "(concat [3 6 7] [0 6 1 9]) -> [3 6 7 0 6 1 9]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.223907, "examples": ["(concat [] []) -> []", "(concat [9] [1]) -> [9 1]", "(concat [5 9] [5 9 6]) -> [5 9 5 9 6]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.249354, "examples": ["(concat [] []) -> []", "(concat [1 8 0] [9]) -> [1 8 0 9]", "(concat [0 7 5] []) -> [0 7 5]"]}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons 1 b)) c)) _) _)", "name": "concat", "time": 0.196277, "examples": ["(concat [] []) -> []", "(concat [] []) -> []", "(concat [1] [8 4 8 5 2]) -> [1 8 4 8 5 2]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.246644, "examples": ["(concat [] []) -> []", "(concat [6] [3 6 2 1 2]) -> [6 3 6 2 1 2]", "(concat [8 4 1 2 8] [3 9 9 5]) -> [8 4 1 2 8 3 9 9 5]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.234152, "examples": ["(concat [] []) -> []", "(concat [] []) -> []", "(concat [1 6 8] [1 7 6]) -> [1 6 8 1 7 6]"]}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.164148, "examples": ["(concat [] []) -> []", "(concat [7 7 7] [0 8 9 7]) -> [7 7 7 0 8 9 7]", "(concat [] [6]) -> [6]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.183018, "examples": ["(concat [] []) -> []", "(concat [8] [1]) -> [8 1]", "(concat [3 7 6] [4]) -> [3 7 6 4]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.22216, "examples": ["(concat [] []) -> []", "(concat [0 9] [1]) -> [0 9 1]", "(concat [2 7 1 7] [6]) -> [2 7 1 7 6]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.227823, "examples": ["(concat [] []) -> []", "(concat [5] []) -> [5]", "(concat [8 2] [0 7 2 6 4]) -> [8 2 0 7 2 6 4]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.242053, "examples": ["(concat [] []) -> []", "(concat [2 2 1 5 5] [4]) -> [2 2 1 5 5 4]", "(concat [3] [9 5 2]) -> [3 9 5 2]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.203189, "examples": ["(concat [] []) -> []", "(concat [4 2 5 8 3] [5]) -> [4 2 5 8 3 5]", "(concat [6 2 4] [8 8 1 2]) -> [6 2 4 8 8 1 2]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.246104, "examples": ["(concat [] []) -> []", "(concat [] [6]) -> [6]", "(concat [2 4 9] [4 8 2]) -> [2 4 9 4 8 2]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.26179, "examples": ["(concat [] []) -> []", "(concat [8 8] [8 7 2 7 0]) -> [8 8 8 7 2 7 0]", "(concat [7 3] []) -> [7 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.233969, "examples": ["(concat [] []) -> []", "(concat [1] [4 1 4 2 7]) -> [1 4 1 4 2 7]", "(concat [3 6] [8 5]) -> [3 6 8 5]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.220454, "examples": ["(concat [] []) -> []", "(concat [] []) -> []", "(concat [6 4 8] [8]) -> [6 4 8 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.232075, "examples": ["(concat [] []) -> []", "(concat [7 2 4 8] []) -> [7 2 4 8]", "(concat [7 1 1 4] [7 8]) -> [7 1 1 4 7 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.213942, "examples": ["(concat [] []) -> []", "(concat [7 8 6 2] [2 3 2]) -> [7 8 6 2 2 3 2]", "(concat [4 2 4 0 9] [9 9 4 6]) -> [4 2 4 0 9 9 9 4 6]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.247963, "examples": ["(concat [] []) -> []", "(concat [5 8 4] [1 9 4 8 8]) -> [5 8 4 1 9 4 8 8]", "(concat [3 5 5 8 0] [6]) -> [3 5 5 8 0 6]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.24755, "examples": ["(concat [] []) -> []", "(concat [7 5 9 0 3] [9 9]) -> [7 5 9 0 3 9 9]", "(concat [] [8]) -> [8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.220164, "examples": ["(concat [] []) -> []", "(concat [4 0 5 2] [5]) -> [4 0 5 2 5]", "(concat [8 7 7 0 7] [5 5 4 8 7]) -> [8 7 7 0 7 5 5 4 8 7]"]}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) (cons d b)) b)) _) _)", "name": "concat", "time": 0.197868, "examples": ["(concat [] []) -> []", "(concat [] [0 8 6 5]) -> [0 8 6 5]", "(concat [4] [1 5]) -> [4 1 5]"]}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) c) b)) _) _)", "name": "concat", "time": 0.023143, "examples": ["(concat [] []) -> []", "(concat [] [4]) -> [4]", "(concat [0 7 2 4 1] []) -> [0 7 2 4 1]"]}
{"solution": "(let concat (let a (lambda (c b) (foldl c (lambda (e d) c) b)) _) _)", "name": "concat", "time": 0.042625, "examples": ["(concat [] []) -> []", "(concat [] [2 4 0]) -> [2 4 0]", "(concat [6] []) -> [6]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.165984, "examples": ["(concat [] []) -> []", "(concat [] [7 4 8]) -> [7 4 8]", "(concat [0 7] [4]) -> [0 7 4]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.23111, "examples": ["(concat [] []) -> []", "(concat [3 3] [5]) -> [3 3 5]", "(concat [6 3 9 9 3] []) -> [6 3 9 9 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.198724, "examples": ["(concat [] []) -> []", "(concat [7 6 7 3 7] [2 4 0 6]) -> [7 6 7 3 7 2 4 0 6]", "(concat [2 8] [0 4]) -> [2 8 0 4]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.149643, "examples": ["(concat [] []) -> []", "(concat [0 6 2 6 4] [5 9]) -> [0 6 2 6 4 5 9]", "(concat [2 2 4 1 2] [1 5]) -> [2 2 4 1 2 1 5]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.171639, "examples": ["(concat [] []) -> []", "(concat [8 6 8] [5 5 9 7 0]) -> [8 6 8 5 5 9 7 0]", "(concat [3 6 3 9] [4]) -> [3 6 3 9 4]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.188725, "examples": ["(concat [] []) -> []", "(concat [9 4 5 6 5] [2 7 0 2 1]) -> [9 4 5 6 5 2 7 0 2 1]", "(concat [4 4 0 4 8] [6 9 7 9 6]) -> [4 4 0 4 8 6 9 7 9 6]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.20149, "examples": ["(concat [] []) -> []", "(concat [7] [0]) -> [7 0]", "(concat [3 7] [1]) -> [3 7 1]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.230189, "examples": ["(concat [] []) -> []", "(concat [1 2] []) -> [1 2]", "(concat [3 4 0 1] [3 4 8 0]) -> [3 4 0 1 3 4 8 0]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.210939, "examples": ["(concat [] []) -> []", "(concat [8 6 9 4 6] [6 8 2 9]) -> [8 6 9 4 6 6 8 2 9]", "(concat [2 6 1] []) -> [2 6 1]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.21385, "examples": ["(concat [] []) -> []", "(concat [8 0 4 3] []) -> [8 0 4 3]", "(concat [5 9 9 2] [6 4]) -> [5 9 9 2 6 4]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.208414, "examples": ["(concat [] []) -> []", "(concat [9] [4]) -> [9 4]", "(concat [5 5 7] [2 9 7 2]) -> [5 5 7 2 9 7 2]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.215325, "examples": ["(concat [] []) -> []", "(concat [] [2 3]) -> [2 3]", "(concat [9 1 3 9 2] [0 0 4 8]) -> [9 1 3 9 2 0 0 4 8]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.209353, "examples": ["(concat [] []) -> []", "(concat [4 7 5 0 4] [2]) -> [4 7 5 0 4 2]", "(concat [9 1] [0 3 6 8 3]) -> [9 1 0 3 6 8 3]"]}
{"solution": "(let concat (let a (lambda (c b) (foldr c (lambda (e d) (cons d e)) b)) _) _)", "name": "concat", "time": 0.220465, "examples": ["(concat [] []) -> []", "(concat [7 3 5] [1 5 0]) -> [7 3 5 1 5 0]", "(concat [1 0 2] [7 2]) -> [1 0 2 7 2]"]}
