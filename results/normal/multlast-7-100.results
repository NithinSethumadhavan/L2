{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [7 3]) -> [3 3]", "(multlast []) -> []", "(multlast [7 0]) -> [0 0]", "(multlast [3 6 1 2 0]) -> [0 0 0 0 0]", "(multlast [2]) -> [2]"], "time": 0.262113, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 3 6 4]) -> [4 4 4 4]", "(multlast [4]) -> [4]", "(multlast [4 6 6 6]) -> [6 6 6 6]", "(multlast [3]) -> [3]", "(multlast [7 1]) -> [1 1]"], "time": 0.302188, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [6 9 9 0]) -> [0 0 0 0]", "(multlast [0 2 3 4]) -> [4 4 4 4]", "(multlast [0 7]) -> [7 7]", "(multlast []) -> []", "(multlast [3 9]) -> [9 9]"], "time": 0.309634, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2]) -> [2]", "(multlast [3 6 6 8]) -> [8 8 8 8]", "(multlast [5 9 5 6]) -> [6 6 6 6]", "(multlast [2 9 3 4 9]) -> [9 9 9 9 9]", "(multlast [4 1 6]) -> [6 6 6]"], "time": 0.286723, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 9 3 8]) -> [8 8 8 8]", "(multlast [1 2 9 0]) -> [0 0 0 0]", "(multlast [8 0 7 8]) -> [8 8 8 8]", "(multlast [1]) -> [1]", "(multlast [0 0 9]) -> [9 9 9]"], "time": 0.285548, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [5 8 1 6 1]) -> [1 1 1 1 1]", "(multlast [0 8 7]) -> [7 7 7]", "(multlast [1 7 2]) -> [2 2 2]", "(multlast [8 0 8]) -> [8 8 8]", "(multlast [2 9 4 4]) -> [4 4 4 4]"], "time": 0.188868, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr (cdr b)))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [4 1 9]) -> [9 9 9]", "(multlast [6 0 3]) -> [3 3 3]", "(multlast [5 4 1 7 3]) -> [3 3 3 3 3]", "(multlast [8]) -> [8]", "(multlast [7 6 5]) -> [5 5 5]"], "time": 0.279873, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8 9 9 5]) -> [5 5 5 5]", "(multlast [5 5 4 2]) -> [2 2 2 2]", "(multlast [7 5 1]) -> [1 1 1]", "(multlast [7 8 9]) -> [9 9 9]", "(multlast [5 1 6 2]) -> [2 2 2 2]"], "time": 0.290092, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 6]) -> [6 6]", "(multlast [4 6 4 6]) -> [6 6 6 6]", "(multlast [1]) -> [1]", "(multlast [7]) -> [7]", "(multlast [0 9 5 6 2]) -> [2 2 2 2 2]"], "time": 0.290512, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [6 9]) -> [9 9]", "(multlast [8 2]) -> [2 2]", "(multlast [5 1 9 0]) -> [0 0 0 0]", "(multlast [4 0 3 7]) -> [7 7 7 7]", "(multlast [6 1 7 7 0]) -> [0 0 0 0 0]"], "time": 0.298211, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 8 3]) -> [3 3 3]", "(multlast [3 1 7 1]) -> [1 1 1 1]", "(multlast [8]) -> [8]", "(multlast [6 4 4 2]) -> [2 2 2 2]", "(multlast [6 7]) -> [7 7]"], "time": 0.335462, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 3 8 5]) -> [5 5 5 5]", "(multlast [8 4 1 1 1]) -> [1 1 1 1 1]", "(multlast [6 8 1 1]) -> [1 1 1 1]", "(multlast []) -> []", "(multlast [4 8 7]) -> [7 7 7]"], "time": 0.35694, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [7 0 8]) -> [8 8 8]", "(multlast []) -> []", "(multlast [5 3 2 8]) -> [8 8 8 8]", "(multlast [5 9 2 6]) -> [6 6 6 6]"], "time": 0.34518, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0 5 5 9]) -> [9 9 9 9]", "(multlast [1 4]) -> [4 4]", "(multlast []) -> []", "(multlast [4]) -> [4]", "(multlast [5 7 2 4 1]) -> [1 1 1 1 1]"], "time": 0.368765, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [0 6 0]) -> [0 0 0]", "(multlast [2 7 3]) -> [3 3 3]", "(multlast [4 0]) -> [0 0]", "(multlast [4 0 7 8]) -> [8 8 8 8]"], "time": 0.351837, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [7 1 4]) -> [4 4 4]", "(multlast [2 8 4 0 2]) -> [2 2 2 2 2]", "(multlast [6 2]) -> [2 2]", "(multlast [0 1 9 2]) -> [2 2 2 2]", "(multlast [8]) -> [8]"], "time": 0.320721, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [1 5]) -> [5 5]", "(multlast [4 5 5]) -> [5 5 5]", "(multlast [3 9]) -> [9 9]", "(multlast [5 0]) -> [0 0]"], "time": 0.029464, "solution": "(let multlast (let a (lambda (b) (map b (lambda (c) (car (cdr b))))) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [8 9 5 6]) -> [6 6 6 6]", "(multlast [9 2]) -> [2 2]", "(multlast []) -> []", "(multlast []) -> []"], "time": 0.310279, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [9 6]) -> [6 6]", "(multlast []) -> []", "(multlast [8 4 5]) -> [5 5 5]", "(multlast [5 0]) -> [0 0]", "(multlast [3 4 5]) -> [5 5 5]"], "time": 0.294857, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2 8 9]) -> [9 9 9]", "(multlast [6 1 7]) -> [7 7 7]", "(multlast [4]) -> [4]", "(multlast []) -> []", "(multlast [3 2 2 2]) -> [2 2 2 2]"], "time": 0.25679, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8 5 6]) -> [6 6 6]", "(multlast [7 4 1]) -> [1 1 1]", "(multlast [0 5]) -> [5 5]", "(multlast [4 2 6 1 9]) -> [9 9 9 9 9]", "(multlast []) -> []"], "time": 0.277053, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [6]) -> [6]", "(multlast [8 7 3 0 9]) -> [9 9 9 9 9]", "(multlast [3 3 6 7]) -> [7 7 7 7]", "(multlast [7 8]) -> [8 8]", "(multlast []) -> []"], "time": 0.270647, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2 0 4]) -> [4 4 4]", "(multlast [8 5]) -> [5 5]", "(multlast [3 8 0 6]) -> [6 6 6 6]", "(multlast [2 3 4]) -> [4 4 4]", "(multlast [5 7 6]) -> [6 6 6]"], "time": 0.290419, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8 9 4 8]) -> [8 8 8 8]", "(multlast [9 7]) -> [7 7]", "(multlast [6 1 8 8 7]) -> [7 7 7 7 7]", "(multlast [4 6 0]) -> [0 0 0]", "(multlast [4 0 0 8]) -> [8 8 8 8]"], "time": 0.3755, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [6 1 5]) -> [5 5 5]", "(multlast [4]) -> [4]", "(multlast [8 8 5 5]) -> [5 5 5 5]", "(multlast [7 1 2 8 9]) -> [9 9 9 9 9]", "(multlast [5]) -> [5]"], "time": 0.372209, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8 3 1 2 0]) -> [0 0 0 0 0]", "(multlast [6 7 7 3 7]) -> [7 7 7 7 7]", "(multlast [4 3 4 7]) -> [7 7 7 7]", "(multlast [4 6 3 0 0]) -> [0 0 0 0 0]", "(multlast [1 1 3]) -> [3 3 3]"], "time": 0.369138, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [9 4 2]) -> [2 2 2]", "(multlast [0]) -> [0]", "(multlast [4 4 2 2 1]) -> [1 1 1 1 1]", "(multlast [9 5 7 4]) -> [4 4 4 4]"], "time": 0.382531, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [1]) -> [1]", "(multlast [0 0 5]) -> [5 5 5]", "(multlast [3 7]) -> [7 7]", "(multlast []) -> []", "(multlast [4 3 6 4 7]) -> [7 7 7 7 7]"], "time": 0.373218, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast []) -> []", "(multlast [3]) -> [3]", "(multlast [5 5 0]) -> [0 0 0]", "(multlast [3 7]) -> [7 7]"], "time": 0.369237, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [3 5]) -> [5 5]", "(multlast [9 3 7 8 6]) -> [6 6 6 6 6]", "(multlast []) -> []", "(multlast [5 3 8]) -> [8 8 8]"], "time": 0.386755, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [0 1 0 8]) -> [8 8 8 8]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [9 8]) -> [8 8]"], "time": 0.400923, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [5 4]) -> [4 4]", "(multlast []) -> []", "(multlast [8 5 2]) -> [2 2 2]", "(multlast [4 1]) -> [1 1]", "(multlast [3 2 7 8 7]) -> [7 7 7 7 7]"], "time": 0.205803, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [1 0 2 7 6]) -> [6 6 6 6 6]", "(multlast []) -> []", "(multlast [6]) -> [6]", "(multlast [8 0 9 9]) -> [9 9 9 9]", "(multlast [2 0 0 5 3]) -> [3 3 3 3 3]"], "time": 0.370761, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2 2 6 4]) -> [4 4 4 4]", "(multlast [5 6 6 7 9]) -> [9 9 9 9 9]", "(multlast [5 5]) -> [5 5]", "(multlast [0 8 4]) -> [4 4 4]", "(multlast [0 9 7]) -> [7 7 7]"], "time": 0.263768, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [4 7 1 3]) -> [3 3 3 3]", "(multlast [5 1 9 6 0]) -> [0 0 0 0 0]", "(multlast []) -> []", "(multlast [7 8 0 4 5]) -> [5 5 5 5 5]", "(multlast [6 5 2 5 3]) -> [3 3 3 3 3]"], "time": 0.276682, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [1 8 7]) -> [7 7 7]", "(multlast [5 4]) -> [4 4]", "(multlast [6 2 1 1]) -> [1 1 1 1]", "(multlast [5 2 6 9 2]) -> [2 2 2 2 2]", "(multlast [7 8]) -> [8 8]"], "time": 0.267603, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [4 7 8 3]) -> [3 3 3 3]", "(multlast []) -> []", "(multlast [1 5]) -> [5 5]", "(multlast [6]) -> [6]", "(multlast [8 3 3 1]) -> [1 1 1 1]"], "time": 0.301828, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [3 3 8]) -> [8 8 8]", "(multlast [5]) -> [5]", "(multlast [4 9 9]) -> [9 9 9]", "(multlast [3 0 8 5]) -> [5 5 5 5]"], "time": 0.277623, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 8 8 7]) -> [7 7 7 7]", "(multlast [9 6]) -> [6 6]", "(multlast []) -> []", "(multlast [7 5 4 7]) -> [7 7 7 7]", "(multlast [4]) -> [4]"], "time": 0.274607, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [9 1 3 8 7]) -> [7 7 7 7 7]", "(multlast [6 8 3 0 5]) -> [5 5 5 5 5]", "(multlast [4 5 8 6]) -> [6 6 6 6]", "(multlast [7 0 4 2]) -> [2 2 2 2]", "(multlast [4 9]) -> [9 9]"], "time": 0.296046, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [9 2 9 9 3]) -> [3 3 3 3 3]", "(multlast [4 6 5 6 6]) -> [6 6 6 6 6]", "(multlast [7]) -> [7]", "(multlast [4 0]) -> [0 0]", "(multlast [2 7 4 4]) -> [4 4 4 4]"], "time": 0.327611, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8]) -> [8]", "(multlast [0]) -> [0]", "(multlast [1 9 2 5 5]) -> [5 5 5 5 5]", "(multlast [9 4 3 6]) -> [6 6 6 6]", "(multlast [6 7 4 3]) -> [3 3 3 3]"], "time": 0.299299, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [9]) -> [9]", "(multlast [7]) -> [7]", "(multlast [3 3 0 9]) -> [9 9 9 9]", "(multlast []) -> []"], "time": 0.308787, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [4 0 3]) -> [3 3 3]", "(multlast [4 3 4 4]) -> [4 4 4 4]", "(multlast [3 1]) -> [1 1]", "(multlast [2 6 6]) -> [6 6 6]"], "time": 0.334373, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [9 0]) -> [0 0]", "(multlast [4 8]) -> [8 8]", "(multlast [9 9 2 3 5]) -> [5 5 5 5 5]", "(multlast []) -> []", "(multlast []) -> []"], "time": 0.28854, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [1 5 9 9 7]) -> [7 7 7 7 7]", "(multlast [1 8 4 8]) -> [8 8 8 8]", "(multlast [4 6 0 5 0]) -> [0 0 0 0 0]", "(multlast []) -> []", "(multlast [4 9 0]) -> [0 0 0]"], "time": 0.321735, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0 3 0 3]) -> [3 3 3 3]", "(multlast [1 8]) -> [8 8]", "(multlast [6 9 6 2 5]) -> [5 5 5 5 5]", "(multlast [4]) -> [4]", "(multlast [9 2 8 3 6]) -> [6 6 6 6 6]"], "time": 0.21875, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [8]) -> [8]", "(multlast [8 1 9 9]) -> [9 9 9 9]", "(multlast [9]) -> [9]", "(multlast [8 0 0 5 8]) -> [8 8 8 8 8]"], "time": 0.306806, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0 6 0 7]) -> [7 7 7 7]", "(multlast []) -> []", "(multlast [4 8 4 1 4]) -> [4 4 4 4 4]", "(multlast [4 9]) -> [9 9]", "(multlast [0 4]) -> [4 4]"], "time": 0.232545, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [6 9 5 8]) -> [8 8 8 8]", "(multlast [8 2]) -> [2 2]", "(multlast [4 5]) -> [5 5]", "(multlast [1 8 9 1]) -> [1 1 1 1]", "(multlast [4 9 1]) -> [1 1 1]"], "time": 0.31901, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [7 1 4]) -> [4 4 4]", "(multlast [0]) -> [0]", "(multlast [8]) -> [8]", "(multlast [5 2 6 0 0]) -> [0 0 0 0 0]", "(multlast []) -> []"], "time": 0.227854, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2 2 9 1 3]) -> [3 3 3 3 3]", "(multlast [0 1 9 7]) -> [7 7 7 7]", "(multlast []) -> []", "(multlast [2 2 8 1]) -> [1 1 1 1]", "(multlast [1 9 9 9]) -> [9 9 9 9]"], "time": 0.256056, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [6 4 6]) -> [6 6 6]", "(multlast [1 6 7]) -> [7 7 7]", "(multlast [9 9]) -> [9 9]", "(multlast [7]) -> [7]", "(multlast []) -> []"], "time": 0.293731, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2]) -> [2]", "(multlast [9 6 4 1 6]) -> [6 6 6 6 6]", "(multlast [3 8]) -> [8 8]", "(multlast [7 3 2 0 9]) -> [9 9 9 9 9]", "(multlast [2 8 1 4]) -> [4 4 4 4]"], "time": 0.242661, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8 2 6 0]) -> [0 0 0 0]", "(multlast [4]) -> [4]", "(multlast [9 3 9]) -> [9 9 9]", "(multlast [0 3 0]) -> [0 0 0]", "(multlast [5]) -> [5]"], "time": 0.252327, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 4]) -> [4 4]", "(multlast [7 5 0]) -> [0 0 0]", "(multlast [4]) -> [4]", "(multlast [3 6 4 2 2]) -> [2 2 2 2 2]", "(multlast [6 6 3 1 4]) -> [4 4 4 4 4]"], "time": 0.262441, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 5 7 5 6]) -> [6 6 6 6 6]", "(multlast [3 3]) -> [3 3]", "(multlast [4 3 3 0]) -> [0 0 0 0]", "(multlast [3 2 1 4]) -> [4 4 4 4]", "(multlast [5 8]) -> [8 8]"], "time": 0.258126, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 6 0 0]) -> [0 0 0 0]", "(multlast [5 6 5 6 3]) -> [3 3 3 3 3]", "(multlast [1 1 7]) -> [7 7 7]", "(multlast []) -> []", "(multlast [1 8 3]) -> [3 3 3]"], "time": 0.237088, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [9 6 0]) -> [0 0 0]", "(multlast [1 6 5 4 1]) -> [1 1 1 1 1]", "(multlast [5 6]) -> [6 6]", "(multlast [3]) -> [3]", "(multlast [2 8]) -> [8 8]"], "time": 0.266816, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8 7 6 7 3]) -> [3 3 3 3 3]", "(multlast [6 4 6]) -> [6 6 6]", "(multlast [2 9]) -> [9 9]", "(multlast [5]) -> [5]", "(multlast [7]) -> [7]"], "time": 0.273217, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [9 7 7]) -> [7 7 7]", "(multlast [5 5]) -> [5 5]", "(multlast [5]) -> [5]", "(multlast [8 4 2 0 3]) -> [3 3 3 3 3]", "(multlast [6 1]) -> [1 1]"], "time": 0.267047, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [7 0 8 2]) -> [2 2 2 2]", "(multlast [0 1]) -> [1 1]", "(multlast [3 3 7 1 8]) -> [8 8 8 8 8]", "(multlast [0]) -> [0]", "(multlast [2]) -> [2]"], "time": 0.227855, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 5 6 7 4]) -> [4 4 4 4 4]", "(multlast [6 1 1 8 7]) -> [7 7 7 7 7]", "(multlast [9]) -> [9]", "(multlast [8 4]) -> [4 4]", "(multlast [4 1 0]) -> [0 0 0]"], "time": 0.219145, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2]) -> [2]", "(multlast [9]) -> [9]", "(multlast [5]) -> [5]", "(multlast [8]) -> [8]", "(multlast [6 8 3 4 7]) -> [7 7 7 7 7]"], "time": 0.241968, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 7]) -> [7 7]", "(multlast [2 5 3 9 8]) -> [8 8 8 8 8]", "(multlast [1 3 6 0 5]) -> [5 5 5 5 5]", "(multlast [1]) -> [1]", "(multlast [3 4 5 0 2]) -> [2 2 2 2 2]"], "time": 0.249275, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [6]) -> [6]", "(multlast [1 7 8 1]) -> [1 1 1 1]", "(multlast [8 4 2 2]) -> [2 2 2 2]", "(multlast []) -> []", "(multlast [5]) -> [5]"], "time": 0.265369, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [9 2 0 1]) -> [1 1 1 1]", "(multlast []) -> []", "(multlast [0 4]) -> [4 4]", "(multlast [8 2]) -> [2 2]", "(multlast [1 3 6]) -> [6 6 6]"], "time": 0.26325, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [6 3 5]) -> [5 5 5]", "(multlast [6 2 1 0 1]) -> [1 1 1 1 1]", "(multlast [1]) -> [1]", "(multlast []) -> []"], "time": 0.266454, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [7 2 3 6 9]) -> [9 9 9 9 9]", "(multlast []) -> []", "(multlast [9 3 9 0]) -> [0 0 0 0]", "(multlast [6 0 3 1 3]) -> [3 3 3 3 3]", "(multlast [9 0]) -> [0 0]"], "time": 0.273641, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [0]) -> [0]", "(multlast []) -> []", "(multlast [1 9 2 1 6]) -> [6 6 6 6 6]", "(multlast [0 7 3 0 4]) -> [4 4 4 4 4]", "(multlast [7 1 7 0]) -> [0 0 0 0]"], "time": 0.281484, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [4 3]) -> [3 3]", "(multlast [8 7 7]) -> [7 7 7]", "(multlast [0 3]) -> [3 3]", "(multlast [1 8 0 4]) -> [4 4 4 4]", "(multlast []) -> []"], "time": 0.266147, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [7]) -> [7]", "(multlast [0 3 6]) -> [6 6 6]", "(multlast [4 7 2 1]) -> [1 1 1 1]", "(multlast []) -> []", "(multlast []) -> []"], "time": 0.249491, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [5 8 8 1 9]) -> [9 9 9 9 9]", "(multlast [5 6 4]) -> [4 4 4]", "(multlast [2 8 8 7]) -> [7 7 7 7]", "(multlast [7 8 9]) -> [9 9 9]", "(multlast []) -> []"], "time": 0.266868, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8 7 7 5 4]) -> [4 4 4 4 4]", "(multlast [2 9]) -> [9 9]", "(multlast [0]) -> [0]", "(multlast [1 8 2]) -> [2 2 2]", "(multlast [8 5]) -> [5 5]"], "time": 0.277551, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [6 4 0 7]) -> [7 7 7 7]", "(multlast [9 2 6]) -> [6 6 6]", "(multlast []) -> []", "(multlast []) -> []", "(multlast [3]) -> [3]"], "time": 0.232351, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8 0]) -> [0 0]", "(multlast [3]) -> [3]", "(multlast [3 1 8 4 0]) -> [0 0 0 0 0]", "(multlast [3]) -> [3]", "(multlast [4 1 0]) -> [0 0 0]"], "time": 0.22808, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [2 3 2 8 6]) -> [6 6 6 6 6]", "(multlast [5 0 4 5]) -> [5 5 5 5]", "(multlast [0 2]) -> [2 2]", "(multlast [7 3 3 1 0]) -> [0 0 0 0 0]"], "time": 0.281707, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [9 7 7]) -> [7 7 7]", "(multlast [4 4]) -> [4 4]", "(multlast []) -> []", "(multlast [7 5 0 7]) -> [7 7 7 7]", "(multlast [9]) -> [9]"], "time": 0.25793, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2 8]) -> [8 8]", "(multlast []) -> []", "(multlast [7]) -> [7]", "(multlast [4]) -> [4]", "(multlast [2 0 0]) -> [0 0 0]"], "time": 0.085196, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [9 1 6 6 6]) -> [6 6 6 6 6]", "(multlast [4 9 1 2]) -> [2 2 2 2]", "(multlast []) -> []", "(multlast [0 2 6 9]) -> [9 9 9 9]", "(multlast [2 8 9 1 3]) -> [3 3 3 3 3]"], "time": 0.26621, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3]) -> [3]", "(multlast [0 7]) -> [7 7]", "(multlast [1 6 0]) -> [0 0 0]", "(multlast [1 1]) -> [1 1]", "(multlast []) -> []"], "time": 0.219398, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [0 4]) -> [4 4]", "(multlast [9]) -> [9]", "(multlast []) -> []", "(multlast [6 6]) -> [6 6]"], "time": 0.109573, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (cons c (cdr b))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2 7 1 1]) -> [1 1 1 1]", "(multlast [7 7 0]) -> [0 0 0]", "(multlast [4 3 3 0]) -> [0 0 0 0]", "(multlast []) -> []", "(multlast [9 3 3 1]) -> [1 1 1 1]"], "time": 0.259609, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [7 8 5 4 9]) -> [9 9 9 9 9]", "(multlast [4 9 8 8]) -> [8 8 8 8]", "(multlast [3 8 2]) -> [2 2 2]", "(multlast [7]) -> [7]", "(multlast [7 0 4]) -> [4 4 4]"], "time": 0.230354, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [2 1 8 9]) -> [9 9 9 9]", "(multlast [5 6 5 7]) -> [7 7 7 7]", "(multlast [0 2 2 2 0]) -> [0 0 0 0 0]", "(multlast []) -> []", "(multlast [9]) -> [9]"], "time": 0.223609, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 0]) -> [0 0]", "(multlast [8 7 5 7]) -> [7 7 7 7]", "(multlast []) -> []", "(multlast [5 2]) -> [2 2]", "(multlast [6 9 6 6 5]) -> [5 5 5 5 5]"], "time": 0.239589, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [3 3 4 1]) -> [1 1 1 1]", "(multlast []) -> []", "(multlast [3 7 9 9 6]) -> [6 6 6 6 6]", "(multlast [0 2]) -> [2 2]"], "time": 0.281933, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [5 5 9]) -> [9 9 9]", "(multlast [6 4 5 8]) -> [8 8 8 8]", "(multlast [6]) -> [6]", "(multlast []) -> []", "(multlast [4 5]) -> [5 5]"], "time": 0.249977, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [5 0 6]) -> [6 6 6]", "(multlast [2 6 8 7]) -> [7 7 7 7]", "(multlast [8 8 7 5 9]) -> [9 9 9 9 9]", "(multlast [9 7 9 1 3]) -> [3 3 3 3 3]"], "time": 0.19213, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [8 4 7 7 0]) -> [0 0 0 0 0]", "(multlast [7]) -> [7]", "(multlast [1 3]) -> [3 3]", "(multlast [5 1 7]) -> [7 7 7]", "(multlast [3]) -> [3]"], "time": 0.1494, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 1]) -> [1 1]", "(multlast [0 0 9 9 2]) -> [2 2 2 2 2]", "(multlast [6 4 4]) -> [4 4 4]", "(multlast [1 9 2 6]) -> [6 6 6 6]", "(multlast [2 6]) -> [6 6]"], "time": 0.193229, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [6 9 1]) -> [1 1 1]", "(multlast [2 7 1]) -> [1 1 1]", "(multlast []) -> []", "(multlast [3 0 3]) -> [3 3 3]", "(multlast [8]) -> [8]"], "time": 0.149434, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast []) -> []", "(multlast [8 8 3 5 0]) -> [0 0 0 0 0]", "(multlast [9]) -> [9]", "(multlast [5]) -> [5]", "(multlast [0 1 5 5]) -> [5 5 5 5]"], "time": 0.197787, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [4 0]) -> [0 0]", "(multlast [0 1 0 3]) -> [3 3 3 3]", "(multlast [7 1]) -> [1 1]", "(multlast [4]) -> [4]", "(multlast []) -> []"], "time": 0.16607, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [3 7 6]) -> [6 6 6]", "(multlast [0 4]) -> [4 4]", "(multlast [5 9]) -> [9 9]", "(multlast [9 9]) -> [9 9]", "(multlast [6 1 5 6 9]) -> [9 9 9 9 9]"], "time": 0.188257, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [5 5 3]) -> [3 3 3]", "(multlast []) -> []", "(multlast [9]) -> [9]", "(multlast []) -> []", "(multlast [1 2 2 8]) -> [8 8 8 8]"], "time": 0.157828, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [9 5 0]) -> [0 0 0]", "(multlast [7 2]) -> [2 2]", "(multlast [3 2 4 8]) -> [8 8 8 8]", "(multlast [9 5 6 7 2]) -> [2 2 2 2 2]", "(multlast []) -> []"], "time": 0.134427, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [4 5]) -> [5 5]", "(multlast [5 2]) -> [2 2]", "(multlast [0]) -> [0]", "(multlast [3 0 4 8 8]) -> [8 8 8 8 8]", "(multlast [3 3]) -> [3 3]"], "time": 0.1744, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [1]) -> [1]", "(multlast []) -> []", "(multlast [3 8 3]) -> [3 3 3]", "(multlast []) -> []", "(multlast [4 7 0 4 1]) -> [1 1 1 1 1]"], "time": 0.157271, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
{"name": "multlast", "examples": ["(multlast []) -> []", "(multlast [7 1]) -> [1 1]", "(multlast []) -> []", "(multlast [2 3 6 6]) -> [6 6 6 6]", "(multlast [5 4 3 5]) -> [5 5 5 5]", "(multlast [1 0]) -> [0 0]"], "time": 0.169766, "solution": "(let multlast (let a (lambda (b) (foldl b (lambda (d c) (map b (lambda (e) c))) [])) _) _)"}
