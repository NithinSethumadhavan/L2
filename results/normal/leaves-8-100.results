{"time": 0.581651, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {8}) -> [8]", "(leaves {2}) -> [2]", "(leaves {5}) -> [5]", "(leaves {9 {0}}) -> [0]", "(leaves {0 {5 {8}}}) -> [8]"], "name": "leaves"}
{"time": 0.726672, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {8 {4}}) -> [4]"], "name": "leaves"}
{"time": 0.870399, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6 {0}}) -> [0]", "(leaves {6 {1}}) -> [1]", "(leaves {6 {7 {6} {9}} {4 {9}}}) -> [6 9 9]", "(leaves {8}) -> [8]", "(leaves {7}) -> [7]", "(leaves {0 {2} {8}}) -> [2 8]"], "name": "leaves"}
{"time": 0.923348, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5 {7}}) -> [7]", "(leaves {1}) -> [1]", "(leaves {0 {0}}) -> [0]", "(leaves {8 {9 {0}} {2 {4 {9}}}}) -> [0 9]", "(leaves {}) -> []", "(leaves {9 {9 {2} {4}} {2 {6} {6}}}) -> [2 4 6 6]"], "name": "leaves"}
{"time": 0.949798, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {0 {6 {3 {6} {2}} {8 {6}}} {9}}) -> [6 2 6 9]", "(leaves {6 {7 {2 {0} {4}} {6 {1} {6}}}}) -> [0 4 1 6]", "(leaves {2}) -> [2]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.986894, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9 {6} {9}}) -> [6 9]", "(leaves {1}) -> [1]"], "name": "leaves"}
{"time": 1.00297, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2 {3} {7}}) -> [3 7]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3 {5}}) -> [5]"], "name": "leaves"}
{"time": 0.969947, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6 {4 {3}}}) -> [3]", "(leaves {0 {8}}) -> [8]", "(leaves {2}) -> [2]", "(leaves {}) -> []", "(leaves {0 {0 {9} {7}}}) -> [9 7]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 1.008338, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {1 {8}}) -> [8]", "(leaves {3}) -> [3]", "(leaves {0 {3 {8}}}) -> [8]", "(leaves {0 {3 {0 {7} {1}} {0 {0}}} {3}}) -> [7 1 0 3]", "(leaves {2}) -> [2]", "(leaves {4 {9 {6} {1}}}) -> [6 1]"], "name": "leaves"}
{"time": 0.991177, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6 {4 {0} {4 {2}}}}) -> [0 2]", "(leaves {9 {0} {6 {5} {7}}}) -> [0 5 7]", "(leaves {7}) -> [7]", "(leaves {2}) -> [2]", "(leaves {5}) -> [5]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 1.036341, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {7 {1 {1} {9}} {2 {0} {3}}}) -> [1 9 0 3]", "(leaves {2 {4}}) -> [4]", "(leaves {9 {5 {8}}}) -> [8]", "(leaves {9 {1} {4}}) -> [1 4]", "(leaves {6 {9}}) -> [9]", "(leaves {3}) -> [3]"], "name": "leaves"}
{"time": 1.017468, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4 {6 {5} {0}}}) -> [5 0]", "(leaves {2}) -> [2]", "(leaves {2 {7} {9 {3}}}) -> [7 3]", "(leaves {3}) -> [3]"], "name": "leaves"}
{"time": 1.04074, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {0 {2 {7 {1}}}}) -> [1]", "(leaves {3}) -> [3]", "(leaves {9 {5 {6} {6}} {6 {4}}}) -> [6 6 4]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 1.011398, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1 {8 {2} {4}} {7}}) -> [2 4 7]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5 {3} {0}}) -> [3 0]", "(leaves {6 {9}}) -> [9]"], "name": "leaves"}
{"time": 1.0209, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6 {0} {6}}) -> [0 6]", "(leaves {2 {3 {7 {6}}} {0}}) -> [6 0]", "(leaves {1}) -> [1]", "(leaves {7 {8 {9}}}) -> [9]", "(leaves {}) -> []", "(leaves {7}) -> [7]"], "name": "leaves"}
{"time": 1.057236, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {1 {1 {6}}} {6 {5 {8}} {4 {5} {4}}}}) -> [6 8 5 4]", "(leaves {}) -> []", "(leaves {1 {5}}) -> [5]", "(leaves {3}) -> [3]", "(leaves {5 {3}}) -> [3]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.651092, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {1 {7}}) -> [7]", "(leaves {5}) -> [5]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8}) -> [8]"], "name": "leaves"}
{"time": 0.820884, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3 {1}}) -> [1]", "(leaves {5 {0 {5} {7}} {7}}) -> [5 7 7]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.67962, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {3 {1} {5}}) -> [1 5]", "(leaves {7 {8} {6}}) -> [8 6]", "(leaves {1 {5}}) -> [5]", "(leaves {6}) -> [6]", "(leaves {4 {3}}) -> [3]", "(leaves {9 {9 {6 {6}}} {8}}) -> [6 8]"], "name": "leaves"}
{"time": 0.735756, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9 {8 {8}}}) -> [8]", "(leaves {3}) -> [3]", "(leaves {4 {9}}) -> [9]", "(leaves {3}) -> [3]", "(leaves {}) -> []", "(leaves {4}) -> [4]"], "name": "leaves"}
{"time": 0.670157, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {8 {5} {1 {9} {0}}}) -> [5 9 0]", "(leaves {1 {5}}) -> [5]", "(leaves {9}) -> [9]", "(leaves {}) -> []", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.646222, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {2 {9} {0}}) -> [9 0]", "(leaves {1 {6 {8}} {3 {4} {0 {7}}}}) -> [8 4 7]", "(leaves {1}) -> [1]", "(leaves {}) -> []", "(leaves {8 {9} {5}}) -> [9 5]"], "name": "leaves"}
{"time": 0.67934, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6 {8} {3}}) -> [8 3]", "(leaves {0 {1 {9} {7}}}) -> [9 7]", "(leaves {8}) -> [8]", "(leaves {2}) -> [2]", "(leaves {5 {9 {4} {2}} {0 {3} {3}}}) -> [4 2 3 3]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.812136, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {1}) -> [1]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1 {2}}) -> [2]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.727538, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {3 {2 {0} {4}} {1 {2} {1}}}) -> [0 4 2 1]", "(leaves {9 {1 {4} {3}} {0 {3} {7}}}) -> [4 3 3 7]", "(leaves {2}) -> [2]", "(leaves {}) -> []", "(leaves {5 {2}}) -> [2]", "(leaves {3 {0 {7 {4}}} {8 {8 {8}}}}) -> [4 8]"], "name": "leaves"}
{"time": 1.043005, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9 {2}}) -> [2]", "(leaves {8}) -> [8]", "(leaves {5 {1 {8} {4}} {4 {9}}}) -> [8 4 9]", "(leaves {}) -> []", "(leaves {9 {1 {7}}}) -> [7]", "(leaves {2 {0 {6 {7} {1}} {5}}}) -> [7 1 5]"], "name": "leaves"}
{"time": 1.123735, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {2}}) -> [2]", "(leaves {1}) -> [1]", "(leaves {8}) -> [8]", "(leaves {0 {7 {3} {0 {1}}} {2}}) -> [3 1 2]", "(leaves {}) -> []", "(leaves {}) -> []"], "name": "leaves"}
{"time": 1.115073, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {9}) -> [9]", "(leaves {5 {7 {5 {5} {7}} {1 {8}}}}) -> [5 7 8]", "(leaves {5}) -> [5]", "(leaves {4 {0} {6}}) -> [0 6]", "(leaves {0 {6 {1 {5} {7}}}}) -> [5 7]"], "name": "leaves"}
{"time": 1.235191, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1 {8 {9 {6} {9}}}}) -> [6 9]", "(leaves {0 {2}}) -> [2]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 1.122912, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {6 {7 {4} {1 {0} {7}}} {0 {6 {0} {8}}}}) -> [4 0 7 0 8]", "(leaves {4 {6 {0} {3}} {3 {5} {5 {6}}}}) -> [0 3 5 6]", "(leaves {}) -> []", "(leaves {5 {6}}) -> [6]", "(leaves {0 {5 {3} {4}}}) -> [3 4]"], "name": "leaves"}
{"time": 1.192164, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {4 {8 {1}} {4 {7} {6}}}) -> [1 7 6]", "(leaves {6 {9 {5}}}) -> [5]", "(leaves {1 {9 {1} {1}} {4 {2}}}) -> [1 1 2]", "(leaves {}) -> []", "(leaves {2 {3} {1}}) -> [3 1]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 1.175765, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6 {0 {9} {6 {1}}}}) -> [9 1]", "(leaves {8}) -> [8]", "(leaves {5}) -> [5]", "(leaves {}) -> []", "(leaves {4 {0 {9 {4} {3}}}}) -> [4 3]"], "name": "leaves"}
{"time": 0.503872, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5 {7 {4} {5}}}) -> [4 5]", "(leaves {}) -> []", "(leaves {3 {9 {2}} {7 {9 {1} {8}}}}) -> [2 1 8]", "(leaves {8 {3 {6 {3} {0}} {6 {1}}}}) -> [3 0 1]", "(leaves {3 {6 {9} {0}} {8 {5} {9}}}) -> [9 0 5 9]", "(leaves {8 {7 {4} {2 {0} {7}}} {8}}) -> [4 0 7 8]"], "name": "leaves"}
{"time": 0.558404, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5 {7 {4}} {1 {3 {1} {0}} {5 {4}}}}) -> [4 1 0 4]", "(leaves {3 {2 {3}}}) -> [3]", "(leaves {2 {4 {1 {8}} {4}} {3 {6 {1} {6}}}}) -> [8 4 1 6]", "(leaves {7 {9 {1 {4}}}}) -> [4]", "(leaves {}) -> []", "(leaves {3}) -> [3]"], "name": "leaves"}
{"time": 0.488658, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {4 {6}}) -> [6]", "(leaves {4 {4} {0}}) -> [4 0]", "(leaves {}) -> []", "(leaves {4 {6} {8}}) -> [6 8]", "(leaves {2 {7} {7 {2 {9}} {2}}}) -> [7 9 2]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.473105, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {1 {4 {4 {7}} {0}}}) -> [7 0]", "(leaves {5 {0} {7}}) -> [0 7]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.931459, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {5 {3}}) -> [3]", "(leaves {9 {6}}) -> [6]", "(leaves {0}) -> [0]", "(leaves {}) -> []", "(leaves {}) -> []"], "name": "leaves"}
{"time": 1.363573, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4 {7}}) -> [7]", "(leaves {0}) -> [0]", "(leaves {7 {1 {6} {7}}}) -> [6 7]", "(leaves {8}) -> [8]"], "name": "leaves"}
{"time": 1.243998, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8}) -> [8]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2 {8} {1}}) -> [8 1]", "(leaves {2 {8 {9 {4}}}}) -> [4]"], "name": "leaves"}
{"time": 0.550842, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2 {6 {3 {7}}} {1 {8}}}) -> [7 8]", "(leaves {5 {0}}) -> [0]", "(leaves {7}) -> [7]", "(leaves {8 {3 {6} {9}} {8 {0 {1}} {2 {2}}}}) -> [6 9 1 2]", "(leaves {2 {8} {1 {6}}}) -> [8 6]", "(leaves {4 {7} {1}}) -> [7 1]"], "name": "leaves"}
{"time": 1.399465, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {5 {3} {4}}}) -> [3 4]", "(leaves {4 {5 {9}} {3 {4}}}) -> [9 4]", "(leaves {1}) -> [1]", "(leaves {6 {9 {6 {6} {6}} {4}}}) -> [6 6 4]", "(leaves {}) -> []", "(leaves {}) -> []"], "name": "leaves"}
{"time": 1.19302, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {0} {3}}) -> [0 3]", "(leaves {7}) -> [7]", "(leaves {5 {4} {7}}) -> [4 7]", "(leaves {2}) -> [2]", "(leaves {8}) -> [8]", "(leaves {3 {5 {6}} {6 {1 {6} {8}}}}) -> [6 6 8]"], "name": "leaves"}
{"time": 1.380853, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {3 {7 {8 {2} {7}}}}) -> [2 7]", "(leaves {}) -> []", "(leaves {7 {0} {6 {6 {9}}}}) -> [0 9]", "(leaves {}) -> []", "(leaves {0 {2}}) -> [2]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 1.408439, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1 {8 {1}}}) -> [1]", "(leaves {}) -> []", "(leaves {3 {4} {4 {2 {3}} {2}}}) -> [4 3 2]", "(leaves {4 {6} {9}}) -> [6 9]"], "name": "leaves"}
{"time": 0.468667, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {8}}) -> [8]", "(leaves {4 {8}}) -> [8]", "(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {}) -> []", "(leaves {6 {6} {5}}) -> [6 5]"], "name": "leaves"}
{"time": 0.477826, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6 {1} {5}}) -> [1 5]", "(leaves {0 {5 {9}}}) -> [9]", "(leaves {9 {2 {3} {1}} {6}}) -> [3 1 6]", "(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {8 {9 {3} {9}} {0 {3} {4}}}) -> [3 9 3 4]"], "name": "leaves"}
{"time": 1.288319, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2 {0 {0} {0}}}) -> [0 0]", "(leaves {3 {9} {4}}) -> [9 4]", "(leaves {1 {7} {7}}) -> [7 7]", "(leaves {0 {8} {2}}) -> [8 2]", "(leaves {6 {9}}) -> [9]", "(leaves {2 {3 {5} {4}}}) -> [5 4]"], "name": "leaves"}
{"time": 1.273764, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {4 {1} {7}}) -> [1 7]", "(leaves {4 {0 {2} {2 {9}}} {1 {4 {4} {1}}}}) -> [2 9 4 1]", "(leaves {3 {0 {1}}}) -> [1]", "(leaves {}) -> []", "(leaves {5 {6}}) -> [6]"], "name": "leaves"}
{"time": 1.29278, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {4 {3 {0} {2}}}) -> [0 2]", "(leaves {0 {1 {5 {9} {2}} {5}} {0}}) -> [9 2 5 0]", "(leaves {6 {8}}) -> [8]", "(leaves {3}) -> [3]", "(leaves {0 {7 {0} {3}}}) -> [0 3]", "(leaves {4 {3} {1}}) -> [3 1]"], "name": "leaves"}
{"time": 1.252417, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5 {8} {3}}) -> [8 3]", "(leaves {2 {7} {7}}) -> [7 7]", "(leaves {5 {2 {3 {8}} {9}} {7 {1 {8}}}}) -> [8 9 8]", "(leaves {6}) -> [6]", "(leaves {2 {6} {4}}) -> [6 4]", "(leaves {6 {7}}) -> [7]"], "name": "leaves"}
{"time": 0.491863, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {9} {7}}) -> [9 7]", "(leaves {1 {8} {9}}) -> [8 9]", "(leaves {4 {6} {1}}) -> [6 1]", "(leaves {0 {2}}) -> [2]", "(leaves {8}) -> [8]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 1.380265, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3 {7 {1}}}) -> [1]", "(leaves {5 {0 {7}} {7 {0 {4} {7}} {5 {8}}}}) -> [7 4 7 8]", "(leaves {1 {8}}) -> [8]"], "name": "leaves"}
{"time": 0.5189, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {}) -> []", "(leaves {5 {6} {9}}) -> [6 9]", "(leaves {9}) -> [9]", "(leaves {5 {8 {0 {1} {0}} {3}}}) -> [1 0 3]"], "name": "leaves"}
{"time": 0.841286, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9 {1}}) -> [1]", "(leaves {8 {1 {3 {6}}}}) -> [6]", "(leaves {}) -> []", "(leaves {4 {8 {8} {2}} {6 {9} {1}}}) -> [8 2 9 1]", "(leaves {2}) -> [2]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 1.158102, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9 {0 {7 {7} {3}} {1 {5} {8}}} {6 {7}}}) -> [7 3 5 8 7]", "(leaves {3 {1}}) -> [1]", "(leaves {8 {8 {2} {2 {6}}}}) -> [2 6]", "(leaves {6 {7}}) -> [7]", "(leaves {3}) -> [3]", "(leaves {1}) -> [1]"], "name": "leaves"}
{"time": 0.782361, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {7 {9} {3}}) -> [9 3]", "(leaves {6 {6 {5 {5}}} {9}}) -> [5 9]", "(leaves {5 {6 {1 {5} {6}}} {3}}) -> [5 6 3]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5 {0} {0 {1} {9}}}) -> [0 1 9]"], "name": "leaves"}
{"time": 0.710243, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0 {6}}) -> [6]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {2 {5 {4 {2}} {4}} {3 {1 {1}} {2 {3} {4}}}}) -> [2 4 1 3 4]"], "name": "leaves"}
{"time": 0.866435, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {5} {9}}) -> [5 9]", "(leaves {8 {5}}) -> [5]", "(leaves {2 {2 {0}}}) -> [0]", "(leaves {4 {7 {7 {3} {2}} {7 {1} {9}}}}) -> [3 2 1 9]", "(leaves {}) -> []", "(leaves {3 {3} {9 {9} {5}}}) -> [3 9 5]"], "name": "leaves"}
{"time": 0.83944, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3 {6} {8}}) -> [6 8]", "(leaves {5 {8} {8 {9 {2} {3}}}}) -> [8 2 3]", "(leaves {7 {5 {3}}}) -> [3]", "(leaves {3}) -> [3]", "(leaves {1}) -> [1]"], "name": "leaves"}
{"time": 0.835364, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {9} {2}}) -> [9 2]", "(leaves {5}) -> [5]", "(leaves {}) -> []", "(leaves {8 {7 {3} {2}}}) -> [3 2]", "(leaves {}) -> []", "(leaves {9 {3}}) -> [3]"], "name": "leaves"}
{"time": 0.616158, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {3 {3} {7}}) -> [3 7]", "(leaves {7}) -> [7]", "(leaves {0 {2}}) -> [2]", "(leaves {5 {2 {3} {0}}}) -> [3 0]", "(leaves {5}) -> [5]", "(leaves {8 {9} {6}}) -> [9 6]"], "name": "leaves"}
{"time": 0.625934, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {4} {4 {1}}}) -> [4 1]", "(leaves {}) -> []", "(leaves {6 {0}}) -> [0]", "(leaves {7 {0} {0 {6}}}) -> [0 6]", "(leaves {3 {4 {5}} {8 {7} {2}}}) -> [5 7 2]", "(leaves {9 {3 {9} {7}} {3 {6}}}) -> [9 7 6]"], "name": "leaves"}
{"time": 0.939528, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {4 {3 {9 {6}} {5}} {1 {9 {9} {7}} {5}}}) -> [6 5 9 7 5]", "(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {5}) -> [5]", "(leaves {}) -> []", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.584676, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {2 {4 {2} {8}}}) -> [2 8]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.856177, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {6}) -> [6]", "(leaves {1 {8 {3} {7}} {1 {2} {2}}}) -> [3 7 2 2]", "(leaves {3 {2} {1}}) -> [2 1]", "(leaves {4 {8}}) -> [8]", "(leaves {2}) -> [2]"], "name": "leaves"}
{"time": 1.027526, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9 {2 {0 {3}}} {4 {0} {3 {6} {4}}}}) -> [3 0 6 4]", "(leaves {2 {6 {2}} {1 {8}}}) -> [2 8]", "(leaves {2 {4}}) -> [4]", "(leaves {7 {1 {8 {6} {5}} {3 {0} {0}}}}) -> [6 5 0 0]", "(leaves {2 {2 {6} {2}} {6 {3} {7}}}) -> [6 2 3 7]", "(leaves {4 {9}}) -> [9]"], "name": "leaves"}
{"time": 0.945885, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5 {9}}) -> [9]", "(leaves {}) -> []", "(leaves {1 {0} {7}}) -> [0 7]", "(leaves {6 {4 {8} {1}}}) -> [8 1]", "(leaves {3 {9}}) -> [9]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.931994, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {0 {3}}) -> [3]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3 {6} {8}}) -> [6 8]"], "name": "leaves"}
{"time": 0.845369, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {9 {4} {8}}}) -> [4 8]", "(leaves {8 {4 {5}}}) -> [5]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {5 {6 {7} {3 {8}}} {0 {9 {6}} {7 {0}}}}) -> [7 8 6 0]", "(leaves {3}) -> [3]"], "name": "leaves"}
{"time": 0.773374, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8 {9 {9}} {2 {4}}}) -> [9 4]", "(leaves {5}) -> [5]", "(leaves {6 {7} {8}}) -> [7 8]", "(leaves {3}) -> [3]", "(leaves {8 {5} {5 {5} {2}}}) -> [5 5 2]"], "name": "leaves"}
{"time": 0.882102, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6 {9 {7 {3} {8}}} {7 {9}}}) -> [3 8 9]", "(leaves {3 {7 {0 {4}} {9 {0} {8}}}}) -> [4 0 8]", "(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {9}) -> [9]", "(leaves {1}) -> [1]"], "name": "leaves"}
{"time": 0.789185, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2 {7 {1 {8} {3}}}}) -> [8 3]", "(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {7 {1 {7}} {5 {6} {8}}}) -> [7 6 8]", "(leaves {3 {5 {0}} {1}}) -> [0 1]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.894868, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6 {6 {9} {9 {1}}} {8 {7 {7}} {9}}}) -> [9 1 7 9]", "(leaves {9 {8 {0} {9}}}) -> [0 9]", "(leaves {9 {3} {2}}) -> [3 2]", "(leaves {5}) -> [5]", "(leaves {0 {2 {7}} {0}}) -> [7 0]", "(leaves {4 {1 {9 {3}}}}) -> [3]"], "name": "leaves"}
{"time": 0.663348, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6 {2} {1}}) -> [2 1]", "(leaves {5 {2 {8} {4}}}) -> [8 4]", "(leaves {0 {1 {3 {9} {4}}} {4}}) -> [9 4 4]", "(leaves {}) -> []", "(leaves {8 {8}}) -> [8]", "(leaves {9 {7}}) -> [7]"], "name": "leaves"}
{"time": 0.803876, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6 {0 {4} {8}}}) -> [4 8]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {1 {7}}) -> [7]", "(leaves {8 {0}}) -> [0]"], "name": "leaves"}
{"time": 0.704852, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {4 {6}}) -> [6]", "(leaves {1 {9} {0}}) -> [9 0]", "(leaves {6 {6 {5}} {3}}) -> [5 3]", "(leaves {9}) -> [9]"], "name": "leaves"}
{"time": 0.74709, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {7 {5} {3 {6} {9}}}) -> [5 6 9]", "(leaves {3}) -> [3]", "(leaves {6 {3 {2} {8}} {4 {4} {1}}}) -> [2 8 4 1]", "(leaves {6}) -> [6]", "(leaves {}) -> []", "(leaves {4}) -> [4]"], "name": "leaves"}
{"time": 0.786302, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {5}) -> [5]", "(leaves {4 {0 {9} {6}} {6 {4}}}) -> [9 6 4]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9 {4}}) -> [4]"], "name": "leaves"}
{"time": 0.779347, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {}) -> []", "(leaves {4}) -> [4]", "(leaves {7 {7} {7}}) -> [7 7]", "(leaves {}) -> []", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.636016, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {}) -> []", "(leaves {0 {0} {5}}) -> [0 5]", "(leaves {1 {7}}) -> [7]", "(leaves {}) -> []", "(leaves {2 {2 {2} {3 {2} {1}}}}) -> [2 2 1]"], "name": "leaves"}
{"time": 0.855263, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {7 {5 {3}} {9 {0}}}) -> [3 0]", "(leaves {2}) -> [2]", "(leaves {1 {8 {3 {6}}} {6}}) -> [6 6]", "(leaves {6 {7}}) -> [7]", "(leaves {}) -> []", "(leaves {0 {3} {4}}) -> [3 4]"], "name": "leaves"}
{"time": 0.788149, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {2 {5} {4}}) -> [5 4]", "(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {1 {0} {5}}) -> [0 5]", "(leaves {6 {2}}) -> [2]", "(leaves {8}) -> [8]"], "name": "leaves"}
{"time": 0.670156, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {3}) -> [3]", "(leaves {}) -> []", "(leaves {9 {6 {5} {9}}}) -> [5 9]", "(leaves {3 {6}}) -> [6]", "(leaves {8}) -> [8]", "(leaves {8 {0}}) -> [0]"], "name": "leaves"}
{"time": 0.781063, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7}) -> [7]", "(leaves {3}) -> [3]", "(leaves {6 {2 {8 {5}}} {6}}) -> [5 6]", "(leaves {1 {1}}) -> [1]", "(leaves {3 {4 {3 {0}} {8 {7} {2}}}}) -> [0 7 2]"], "name": "leaves"}
{"time": 0.781603, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {4 {0} {6}}) -> [0 6]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {8 {7} {9}}) -> [7 9]", "(leaves {3}) -> [3]", "(leaves {1 {2} {4}}) -> [2 4]"], "name": "leaves"}
{"time": 0.779022, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {8} {8}}) -> [8 8]", "(leaves {}) -> []", "(leaves {4 {9}}) -> [9]", "(leaves {7}) -> [7]", "(leaves {7}) -> [7]", "(leaves {1}) -> [1]"], "name": "leaves"}
{"time": 0.731095, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {7 {1} {3 {0} {7}}}}) -> [1 0 7]", "(leaves {5 {8}}) -> [8]", "(leaves {6 {7 {8} {3 {2}}} {4 {6 {9}}}}) -> [8 2 9]", "(leaves {}) -> []", "(leaves {0 {2 {4} {1}} {5 {5}}}) -> [4 1 5]", "(leaves {0 {2 {5}} {3}}) -> [5 3]"], "name": "leaves"}
{"time": 0.421524, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {0 {1 {4}}}) -> [4]", "(leaves {9}) -> [9]", "(leaves {1 {9}}) -> [9]", "(leaves {4 {8 {7}}}) -> [7]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.688908, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {1 {4} {7 {3 {5}} {3 {5}}}}) -> [4 5 5]", "(leaves {}) -> []", "(leaves {8 {9 {4}}}) -> [4]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {7 {2 {0}}}) -> [0]"], "name": "leaves"}
{"time": 0.759742, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6 {1 {7}} {8}}) -> [7 8]", "(leaves {}) -> []", "(leaves {1 {9} {3}}) -> [9 3]", "(leaves {5 {5 {7 {5}} {6 {3}}} {4 {1} {4 {9} {9}}}}) -> [5 3 1 9 9]", "(leaves {5 {3}}) -> [3]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.551976, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {0}) -> [0]", "(leaves {4}) -> [4]", "(leaves {7 {5}}) -> [5]", "(leaves {4 {6 {7} {2}}}) -> [7 2]", "(leaves {4 {5} {3}}) -> [5 3]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.61452, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) e) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {7 {4}}) -> [4]", "(leaves {5}) -> [5]", "(leaves {5}) -> [5]", "(leaves {2 {0}}) -> [0]", "(leaves {2}) -> [2]", "(leaves {8 {7 {1 {8}}}}) -> [8]"], "name": "leaves"}
{"time": 0.785533, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {3 {6}}) -> [6]", "(leaves {9}) -> [9]", "(leaves {6 {8 {5} {4}}}) -> [5 4]", "(leaves {}) -> []", "(leaves {1 {4 {4}}}) -> [4]"], "name": "leaves"}
{"time": 0.718516, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {5}}) -> [5]", "(leaves {8 {9}}) -> [9]", "(leaves {1 {2 {1}}}) -> [1]", "(leaves {}) -> []", "(leaves {2 {7 {1}} {7 {5} {5}}}) -> [1 5 5]", "(leaves {1}) -> [1]"], "name": "leaves"}
{"time": 0.70612, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {6}) -> [6]", "(leaves {4}) -> [4]", "(leaves {}) -> []", "(leaves {1 {2} {0}}) -> [2 0]", "(leaves {3 {2} {6}}) -> [2 6]", "(leaves {3 {9 {3 {8}}} {0 {8}}}) -> [8 8]"], "name": "leaves"}
{"time": 0.611569, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9 {1}}) -> [1]", "(leaves {4}) -> [4]", "(leaves {8}) -> [8]", "(leaves {}) -> []", "(leaves {9 {0 {8 {5}} {4 {0}}} {0}}) -> [5 0 0]"], "name": "leaves"}
{"time": 0.631272, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {}) -> []", "(leaves {9}) -> [9]", "(leaves {}) -> []", "(leaves {2}) -> [2]", "(leaves {3 {4} {8}}) -> [4 8]", "(leaves {3 {7 {1}} {5 {2}}}) -> [1 2]"], "name": "leaves"}
{"time": 0.556012, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {1}) -> [1]", "(leaves {4}) -> [4]", "(leaves {3 {7 {1}} {6 {1 {9} {1}} {1 {1} {8}}}}) -> [1 9 1 1 8]", "(leaves {3}) -> [3]", "(leaves {}) -> []", "(leaves {1 {3 {5}}}) -> [5]"], "name": "leaves"}
{"time": 0.518583, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {1 {8 {9}}}) -> [9]", "(leaves {6}) -> [6]", "(leaves {0 {8 {3 {3}}} {2}}) -> [3 2]", "(leaves {4}) -> [4]", "(leaves {1 {8} {1 {1 {2} {5}} {6}}}) -> [8 2 5 6]", "(leaves {}) -> []"], "name": "leaves"}
{"time": 0.424395, "solution": "(let leaves (let a (lambda (b) (foldt b (lambda (d c) (foldl d (lambda (f e) (join d)) (cons c []))) [])) _) _)", "examples": ["(leaves {}) -> []", "(leaves {8 {9 {3 {3}} {5}} {6 {0 {1} {5}} {9}}}) -> [3 5 1 5 9]", "(leaves {5 {5}}) -> [5]", "(leaves {9 {5 {2}} {2}}) -> [2 2]", "(leaves {}) -> []", "(leaves {}) -> []", "(leaves {}) -> []"], "name": "leaves"}
