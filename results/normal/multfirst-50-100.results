{"time": 0.038192, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [2 6 4 5 6]) -> [2 2 2 2 2]", "(multfirst [6 9 4 7 1]) -> [6 6 6 6 6]", "(multfirst [2 3 7 4]) -> [2 2 2 2]", "(multfirst [5 6 9 0]) -> [5 5 5 5]", "(multfirst []) -> []", "(multfirst [4 9 4 6]) -> [4 4 4 4]", "(multfirst [2 3]) -> [2 2]", "(multfirst [1 1 7 5]) -> [1 1 1 1]", "(multfirst [3]) -> [3]", "(multfirst [0 2 2 2 2]) -> [0 0 0 0 0]", "(multfirst [2 6 6]) -> [2 2 2]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [1 1 5]) -> [1 1 1]", "(multfirst [8 0 5]) -> [8 8 8]", "(multfirst [0 4 3 7]) -> [0 0 0 0]", "(multfirst [0 4 0 2]) -> [0 0 0 0]", "(multfirst [8 3]) -> [8 8]", "(multfirst [6]) -> [6]", "(multfirst [1 0 5]) -> [1 1 1]", "(multfirst []) -> []", "(multfirst [7 8 8]) -> [7 7 7]", "(multfirst [0 3 7]) -> [0 0 0]", "(multfirst [2 9 9]) -> [2 2 2]", "(multfirst [8 7 3]) -> [8 8 8]", "(multfirst []) -> []", "(multfirst [6 9 5 4]) -> [6 6 6 6]", "(multfirst [1 4 6]) -> [1 1 1]", "(multfirst [4]) -> [4]", "(multfirst [4 2 3]) -> [4 4 4]", "(multfirst []) -> []", "(multfirst [0 3 3 8 1]) -> [0 0 0 0 0]", "(multfirst [8 7 5 1 5]) -> [8 8 8 8 8]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [2 2 8]) -> [2 2 2]", "(multfirst [4 7 5 9]) -> [4 4 4 4]", "(multfirst []) -> []", "(multfirst [3 1 0]) -> [3 3 3]", "(multfirst [5 8 0 8]) -> [5 5 5 5]", "(multfirst [5 0 1 7 4]) -> [5 5 5 5 5]", "(multfirst [3]) -> [3]", "(multfirst [8]) -> [8]", "(multfirst [7 0 0 9]) -> [7 7 7 7]", "(multfirst [0 2]) -> [0 0]", "(multfirst [2 1 7 7 5]) -> [2 2 2 2 2]", "(multfirst []) -> []", "(multfirst [3 7 5 8]) -> [3 3 3 3]", "(multfirst [0]) -> [0]"]}
{"time": 0.028331, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [3 6 3]) -> [3 3 3]", "(multfirst [1 3]) -> [1 1]", "(multfirst [7]) -> [7]", "(multfirst []) -> []", "(multfirst [2 0 8 8]) -> [2 2 2 2]", "(multfirst [3 0 2]) -> [3 3 3]", "(multfirst [6 6 7]) -> [6 6 6]", "(multfirst [2 2 0]) -> [2 2 2]", "(multfirst [0 4 9 9]) -> [0 0 0 0]", "(multfirst []) -> []", "(multfirst [3 4 2 2 8]) -> [3 3 3 3 3]", "(multfirst [9 4 1 5 9]) -> [9 9 9 9 9]", "(multfirst []) -> []", "(multfirst [3]) -> [3]", "(multfirst [6 7 5]) -> [6 6 6]", "(multfirst [6 2 4 8 8]) -> [6 6 6 6 6]", "(multfirst [0]) -> [0]", "(multfirst []) -> []", "(multfirst [3 4 1]) -> [3 3 3]", "(multfirst [6 2]) -> [6 6]", "(multfirst [0 7]) -> [0 0]", "(multfirst [8 9 1 0 6]) -> [8 8 8 8 8]", "(multfirst [6 2]) -> [6 6]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7 8 2]) -> [7 7 7]", "(multfirst [5 4 8]) -> [5 5 5]", "(multfirst [4 3]) -> [4 4]", "(multfirst [8 5]) -> [8 8]", "(multfirst [0 0]) -> [0 0]", "(multfirst [9 8 6]) -> [9 9 9]", "(multfirst [0]) -> [0]", "(multfirst [8 0 3]) -> [8 8 8]", "(multfirst [3 3]) -> [3 3]", "(multfirst [8 4]) -> [8 8]", "(multfirst [1 6 0]) -> [1 1 1]", "(multfirst [1 6 9 2 3]) -> [1 1 1 1 1]", "(multfirst [2]) -> [2]", "(multfirst [0 9 3]) -> [0 0 0]", "(multfirst []) -> []", "(multfirst [0 4]) -> [0 0]", "(multfirst [4 5 4 7]) -> [4 4 4 4]", "(multfirst [8 9 8 4 7]) -> [8 8 8 8 8]", "(multfirst []) -> []", "(multfirst [6 4 2]) -> [6 6 6]", "(multfirst [1 1 6 0]) -> [1 1 1 1]", "(multfirst [1 6 0 0]) -> [1 1 1 1]", "(multfirst []) -> []"]}
{"time": 0.028004, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [4 5 9]) -> [4 4 4]", "(multfirst [4 5]) -> [4 4]", "(multfirst [1 3]) -> [1 1]", "(multfirst [4 4 0 3]) -> [4 4 4 4]", "(multfirst [2]) -> [2]", "(multfirst []) -> []", "(multfirst [5]) -> [5]", "(multfirst [7 2 7]) -> [7 7 7]", "(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst [8 3 0 1 3]) -> [8 8 8 8 8]", "(multfirst [8 4]) -> [8 8]", "(multfirst [2 6 7 8]) -> [2 2 2 2]", "(multfirst [1 1 0]) -> [1 1 1]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [8 0]) -> [8 8]", "(multfirst [0 0 0 7 7]) -> [0 0 0 0 0]", "(multfirst [7 2 5 4]) -> [7 7 7 7]", "(multfirst [0]) -> [0]", "(multfirst [2 5 8 0 8]) -> [2 2 2 2 2]", "(multfirst [5 7 7 7]) -> [5 5 5 5]", "(multfirst [5 3 7 1]) -> [5 5 5 5]", "(multfirst []) -> []", "(multfirst [1 6 3]) -> [1 1 1]", "(multfirst []) -> []", "(multfirst [3 0 9 4 1]) -> [3 3 3 3 3]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7 1]) -> [7 7]", "(multfirst [7]) -> [7]", "(multfirst []) -> []", "(multfirst [8 1 7]) -> [8 8 8]", "(multfirst [4 2 2 2 5]) -> [4 4 4 4 4]", "(multfirst []) -> []", "(multfirst [3]) -> [3]", "(multfirst [1 6]) -> [1 1]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [3 4]) -> [3 3]", "(multfirst [7 1]) -> [7 7]", "(multfirst [7 7]) -> [7 7]", "(multfirst [5 0]) -> [5 5]", "(multfirst [9 7 5 2 6]) -> [9 9 9 9 9]", "(multfirst [0 8 2 0]) -> [0 0 0 0]", "(multfirst [4]) -> [4]", "(multfirst [0 6 0 3 3]) -> [0 0 0 0 0]", "(multfirst [5 8 7]) -> [5 5 5]", "(multfirst [9 5]) -> [9 9]"]}
{"time": 0.043675, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [8 4 6 2 5]) -> [8 8 8 8 8]", "(multfirst [7 1 4 3 7]) -> [7 7 7 7 7]", "(multfirst [4 6 2]) -> [4 4 4]", "(multfirst [6 0 7 1]) -> [6 6 6 6]", "(multfirst [6 4 0 4 3]) -> [6 6 6 6 6]", "(multfirst []) -> []", "(multfirst [0 9 1 3 9]) -> [0 0 0 0 0]", "(multfirst [4 8]) -> [4 4]", "(multfirst [5 8]) -> [5 5]", "(multfirst [6]) -> [6]", "(multfirst [0 4 5 6 5]) -> [0 0 0 0 0]", "(multfirst [7 8 9]) -> [7 7 7]", "(multfirst [1 0 7 7 3]) -> [1 1 1 1 1]", "(multfirst [8 6 3 7]) -> [8 8 8 8]", "(multfirst [1 6 2 0 6]) -> [1 1 1 1 1]", "(multfirst [9 9 0 7 8]) -> [9 9 9 9 9]", "(multfirst [3 2 7 6 9]) -> [3 3 3 3 3]", "(multfirst [3 3 4 2 0]) -> [3 3 3 3 3]", "(multfirst [6 7 9 1]) -> [6 6 6 6]", "(multfirst [7 0 6]) -> [7 7 7]", "(multfirst [2 4 6 9]) -> [2 2 2 2]", "(multfirst [0]) -> [0]", "(multfirst [3]) -> [3]", "(multfirst [8 3]) -> [8 8]", "(multfirst [6 1 8 8]) -> [6 6 6 6]", "(multfirst [4]) -> [4]", "(multfirst [9 6]) -> [9 9]", "(multfirst [4 7 9]) -> [4 4 4]", "(multfirst []) -> []", "(multfirst [3 1]) -> [3 3]", "(multfirst []) -> []", "(multfirst [6]) -> [6]", "(multfirst [0 2]) -> [0 0]", "(multfirst []) -> []", "(multfirst [9 5 6]) -> [9 9 9]", "(multfirst [9 3]) -> [9 9]", "(multfirst [7 0]) -> [7 7]", "(multfirst [4 7 3 4 6]) -> [4 4 4 4 4]", "(multfirst [3]) -> [3]", "(multfirst [3]) -> [3]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [9 3 6 6]) -> [9 9 9 9]", "(multfirst [1]) -> [1]", "(multfirst [9 0]) -> [9 9]", "(multfirst [6 2 5]) -> [6 6 6]", "(multfirst [8]) -> [8]", "(multfirst [8 1 8 7]) -> [8 8 8 8]", "(multfirst [2 1 8 9]) -> [2 2 2 2]"]}
{"time": 0.029782, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [0 3 0]) -> [0 0 0]", "(multfirst []) -> []", "(multfirst [8 6 0 8 4]) -> [8 8 8 8 8]", "(multfirst [9 7 3 4 7]) -> [9 9 9 9 9]", "(multfirst []) -> []", "(multfirst [8 2]) -> [8 8]", "(multfirst [2 5 5 8 2]) -> [2 2 2 2 2]", "(multfirst [6 4 3]) -> [6 6 6]", "(multfirst []) -> []", "(multfirst [3 1 6]) -> [3 3 3]", "(multfirst [7]) -> [7]", "(multfirst [7]) -> [7]", "(multfirst [0 8 6]) -> [0 0 0]", "(multfirst [7 1]) -> [7 7]", "(multfirst [1 5 2 8]) -> [1 1 1 1]", "(multfirst [5 0 7 7 0]) -> [5 5 5 5 5]", "(multfirst [1 4 3 2]) -> [1 1 1 1]", "(multfirst [7 9 3 7 5]) -> [7 7 7 7 7]", "(multfirst [3 1 8 6 0]) -> [3 3 3 3 3]", "(multfirst [2 6]) -> [2 2]", "(multfirst [1 6 1 6 2]) -> [1 1 1 1 1]", "(multfirst [0 8 6 0]) -> [0 0 0 0]", "(multfirst [1 9 0]) -> [1 1 1]", "(multfirst [7 0 1]) -> [7 7 7]", "(multfirst [8 0 7]) -> [8 8 8]", "(multfirst [0 9 0 6]) -> [0 0 0 0]", "(multfirst [8]) -> [8]", "(multfirst [8 2]) -> [8 8]", "(multfirst [7 0 6 7 6]) -> [7 7 7 7 7]", "(multfirst [9 4 7]) -> [9 9 9]", "(multfirst [5 0 1]) -> [5 5 5]", "(multfirst [3 3 9 2]) -> [3 3 3 3]", "(multfirst [0]) -> [0]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [3 9 4 9]) -> [3 3 3 3]", "(multfirst [4 0]) -> [4 4]", "(multfirst [0 4 6 4]) -> [0 0 0 0]", "(multfirst [2 6 1 4]) -> [2 2 2 2]", "(multfirst [0 6 7 2 7]) -> [0 0 0 0 0]", "(multfirst [2 4 3 1 4]) -> [2 2 2 2 2]", "(multfirst [3 1 2 8 1]) -> [3 3 3 3 3]", "(multfirst [6 3]) -> [6 6]", "(multfirst [9 9 7 9 9]) -> [9 9 9 9 9]", "(multfirst [1 8 5 7]) -> [1 1 1 1]", "(multfirst []) -> []", "(multfirst [7]) -> [7]", "(multfirst [0]) -> [0]", "(multfirst [0 7 9 6 2]) -> [0 0 0 0 0]"]}
{"time": 0.035178, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [4 8 3 0 5]) -> [4 4 4 4 4]", "(multfirst [6 8 4 1 6]) -> [6 6 6 6 6]", "(multfirst [0 3]) -> [0 0]", "(multfirst [4]) -> [4]", "(multfirst []) -> []", "(multfirst [2 3 2 9]) -> [2 2 2 2]", "(multfirst [6 7 3 1]) -> [6 6 6 6]", "(multfirst [2 5 7 0]) -> [2 2 2 2]", "(multfirst [2 4 3 6]) -> [2 2 2 2]", "(multfirst [2 5 5 8 4]) -> [2 2 2 2 2]", "(multfirst []) -> []", "(multfirst [5 7 9 8]) -> [5 5 5 5]", "(multfirst [9 6 0]) -> [9 9 9]", "(multfirst [0 4 6 4 1]) -> [0 0 0 0 0]", "(multfirst [8 6 8 1]) -> [8 8 8 8]", "(multfirst [5 9 7]) -> [5 5 5]", "(multfirst [6]) -> [6]", "(multfirst [6 8 0]) -> [6 6 6]", "(multfirst []) -> []", "(multfirst [8 4 2]) -> [8 8 8]", "(multfirst [3 9 2 5]) -> [3 3 3 3]", "(multfirst [2 3]) -> [2 2]", "(multfirst [8 7]) -> [8 8]", "(multfirst [4 4]) -> [4 4]", "(multfirst [2 7 9 8 0]) -> [2 2 2 2 2]", "(multfirst [1]) -> [1]", "(multfirst [7 0]) -> [7 7]", "(multfirst [6 8 6 4]) -> [6 6 6 6]", "(multfirst [6 6]) -> [6 6]", "(multfirst [7 9 8 9]) -> [7 7 7 7]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [2]) -> [2]", "(multfirst []) -> []", "(multfirst [6 3 0 8 8]) -> [6 6 6 6 6]", "(multfirst [4 7 9 4]) -> [4 4 4 4]", "(multfirst [7 6 4]) -> [7 7 7]", "(multfirst [6 8]) -> [6 6]", "(multfirst [5 0 1]) -> [5 5 5]", "(multfirst [7 1]) -> [7 7]", "(multfirst [4 6 1 2 9]) -> [4 4 4 4 4]", "(multfirst [8 6 2 9]) -> [8 8 8 8]", "(multfirst [8 2 0 9]) -> [8 8 8 8]", "(multfirst [8]) -> [8]", "(multfirst [1 3 3]) -> [1 1 1]", "(multfirst [3 5 0 5]) -> [3 3 3 3]", "(multfirst [6 6 0 4]) -> [6 6 6 6]", "(multfirst [9 2]) -> [9 9]"]}
{"time": 0.043268, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [2 2]) -> [2 2]", "(multfirst [1]) -> [1]", "(multfirst [9 4 5 4]) -> [9 9 9 9]", "(multfirst [9 2 4]) -> [9 9 9]", "(multfirst []) -> []", "(multfirst [5 0 4]) -> [5 5 5]", "(multfirst [7 9]) -> [7 7]", "(multfirst [5 0 0 7 0]) -> [5 5 5 5 5]", "(multfirst [3 3 9 9]) -> [3 3 3 3]", "(multfirst [1 3 7 8 4]) -> [1 1 1 1 1]", "(multfirst [1 8 5]) -> [1 1 1]", "(multfirst [7 5 1 1]) -> [7 7 7 7]", "(multfirst [4 0 8 4 1]) -> [4 4 4 4 4]", "(multfirst [2]) -> [2]", "(multfirst [0 5 9 4 6]) -> [0 0 0 0 0]", "(multfirst [2 6 6]) -> [2 2 2]", "(multfirst [9 4]) -> [9 9]", "(multfirst []) -> []", "(multfirst [0 5 3]) -> [0 0 0]", "(multfirst [1 1]) -> [1 1]", "(multfirst []) -> []", "(multfirst [8 4 8]) -> [8 8 8]", "(multfirst [2 2 9]) -> [2 2 2]", "(multfirst [7 9]) -> [7 7]", "(multfirst [9 1 9]) -> [9 9 9]", "(multfirst [5]) -> [5]", "(multfirst [0]) -> [0]", "(multfirst [1 9 5]) -> [1 1 1]", "(multfirst [5 8 1 4 0]) -> [5 5 5 5 5]", "(multfirst [1 4]) -> [1 1]", "(multfirst [7 4 3 8]) -> [7 7 7 7]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7 3 1 4 0]) -> [7 7 7 7 7]", "(multfirst [0 5 0]) -> [0 0 0]", "(multfirst [4 8 3 5]) -> [4 4 4 4]", "(multfirst [2]) -> [2]", "(multfirst [0 8 4]) -> [0 0 0]", "(multfirst [1 2 7]) -> [1 1 1]", "(multfirst [7 6 6]) -> [7 7 7]", "(multfirst [0]) -> [0]", "(multfirst [1 1 7 9 3]) -> [1 1 1 1 1]", "(multfirst [9 8 2 9]) -> [9 9 9 9]", "(multfirst [8 5 6 4]) -> [8 8 8 8]", "(multfirst [9 0 2 0]) -> [9 9 9 9]", "(multfirst [0 4 5 0]) -> [0 0 0 0]", "(multfirst [5 8 9 2]) -> [5 5 5 5]"]}
{"time": 0.040504, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1 3 1]) -> [1 1 1]", "(multfirst []) -> []", "(multfirst [3]) -> [3]", "(multfirst [0 8]) -> [0 0]", "(multfirst [1]) -> [1]", "(multfirst [8 5]) -> [8 8]", "(multfirst [6 4 4]) -> [6 6 6]", "(multfirst [5 4]) -> [5 5]", "(multfirst [6 2 0 4 1]) -> [6 6 6 6 6]", "(multfirst [1 8 0 3 9]) -> [1 1 1 1 1]", "(multfirst [8 2]) -> [8 8]", "(multfirst [0 4 5 0]) -> [0 0 0 0]", "(multfirst [1]) -> [1]", "(multfirst [8 1]) -> [8 8]", "(multfirst [4 3 9 9 8]) -> [4 4 4 4 4]", "(multfirst [0 2 6 9 0]) -> [0 0 0 0 0]", "(multfirst []) -> []", "(multfirst [3 8 6 7 2]) -> [3 3 3 3 3]", "(multfirst [7 2 4]) -> [7 7 7]", "(multfirst [8 1 4 3]) -> [8 8 8 8]", "(multfirst [8 8 3 5]) -> [8 8 8 8]", "(multfirst [3 8 0 4]) -> [3 3 3 3]", "(multfirst []) -> []", "(multfirst [9 3 7]) -> [9 9 9]", "(multfirst [0 3 6]) -> [0 0 0]", "(multfirst [3 1 4 7]) -> [3 3 3 3]", "(multfirst [1 0 9]) -> [1 1 1]", "(multfirst [1 6 4 1 1]) -> [1 1 1 1 1]", "(multfirst [4 5 3]) -> [4 4 4]", "(multfirst [5 6]) -> [5 5]", "(multfirst [5 8]) -> [5 5]", "(multfirst []) -> []", "(multfirst [5 7]) -> [5 5]", "(multfirst [7]) -> [7]", "(multfirst []) -> []", "(multfirst [0 0]) -> [0 0]", "(multfirst [0 2 2 2 4]) -> [0 0 0 0 0]", "(multfirst []) -> []", "(multfirst [0]) -> [0]", "(multfirst [1 7 9 0]) -> [1 1 1 1]", "(multfirst [5 2 4]) -> [5 5 5]", "(multfirst [4 5 0 0]) -> [4 4 4 4]", "(multfirst []) -> []", "(multfirst [5 0]) -> [5 5]", "(multfirst [9 5]) -> [9 9]", "(multfirst [4 5 7 0]) -> [4 4 4 4]", "(multfirst [7 1 0 0 6]) -> [7 7 7 7 7]", "(multfirst [0 0 3 6]) -> [0 0 0 0]"]}
{"time": 0.049396, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [2 9 1 9]) -> [2 2 2 2]", "(multfirst [6 7 2]) -> [6 6 6]", "(multfirst [8 3 7 9]) -> [8 8 8 8]", "(multfirst [3 1 3 2]) -> [3 3 3 3]", "(multfirst [4 3 8 7]) -> [4 4 4 4]", "(multfirst [6 8 7 3 1]) -> [6 6 6 6 6]", "(multfirst [0 7]) -> [0 0]", "(multfirst [5 6]) -> [5 5]", "(multfirst []) -> []", "(multfirst [3 4 2 5]) -> [3 3 3 3]", "(multfirst []) -> []", "(multfirst [2 6 0 9]) -> [2 2 2 2]", "(multfirst [3 1 7]) -> [3 3 3]", "(multfirst [4]) -> [4]", "(multfirst [8 9 1 5]) -> [8 8 8 8]", "(multfirst [1]) -> [1]", "(multfirst [5 7 0]) -> [5 5 5]", "(multfirst [2 2 0 4]) -> [2 2 2 2]", "(multfirst [7 7]) -> [7 7]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [8 8]) -> [8 8]", "(multfirst []) -> []", "(multfirst [0 1 2]) -> [0 0 0]", "(multfirst [5 6]) -> [5 5]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7]) -> [7]", "(multfirst []) -> []", "(multfirst [5 1 6 1]) -> [5 5 5 5]", "(multfirst [9 1 8 9 7]) -> [9 9 9 9 9]", "(multfirst [6]) -> [6]", "(multfirst [6]) -> [6]", "(multfirst [9]) -> [9]", "(multfirst [2 0 7]) -> [2 2 2]", "(multfirst [8 4 2]) -> [8 8 8]", "(multfirst [7 1 5 0 7]) -> [7 7 7 7 7]", "(multfirst [3 8]) -> [3 3]", "(multfirst [3 2 0 2]) -> [3 3 3 3]", "(multfirst [6 8]) -> [6 6]", "(multfirst [9 8]) -> [9 9]", "(multfirst [9 9]) -> [9 9]", "(multfirst [2 1 9 0]) -> [2 2 2 2]", "(multfirst [0 5]) -> [0 0]", "(multfirst [5]) -> [5]", "(multfirst [8]) -> [8]", "(multfirst [5 7 3 9 7]) -> [5 5 5 5 5]", "(multfirst [6 4 5]) -> [6 6 6]", "(multfirst [8 5 9]) -> [8 8 8]"]}
{"time": 0.046336, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [0 7 9]) -> [0 0 0]", "(multfirst [7 7 1]) -> [7 7 7]", "(multfirst [7 6 8 2]) -> [7 7 7 7]", "(multfirst [3 2 4]) -> [3 3 3]", "(multfirst []) -> []", "(multfirst [2 6 6 8 5]) -> [2 2 2 2 2]", "(multfirst [5 1 8 4 4]) -> [5 5 5 5 5]", "(multfirst [1 3]) -> [1 1]", "(multfirst []) -> []", "(multfirst [9 8]) -> [9 9]", "(multfirst [0 5 7 9 0]) -> [0 0 0 0 0]", "(multfirst [6 0 3 6]) -> [6 6 6 6]", "(multfirst []) -> []", "(multfirst [8 0 7]) -> [8 8 8]", "(multfirst [6 2 8]) -> [6 6 6]", "(multfirst [8 5 5]) -> [8 8 8]", "(multfirst []) -> []", "(multfirst [5]) -> [5]", "(multfirst [4 4]) -> [4 4]", "(multfirst [3 4 6 4]) -> [3 3 3 3]", "(multfirst [1 3]) -> [1 1]", "(multfirst [9]) -> [9]", "(multfirst [7 4 5 8 1]) -> [7 7 7 7 7]", "(multfirst [2]) -> [2]", "(multfirst [7 6 4]) -> [7 7 7]", "(multfirst [6]) -> [6]", "(multfirst [9 6 2]) -> [9 9 9]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [2 8]) -> [2 2]", "(multfirst []) -> []", "(multfirst [1 0]) -> [1 1]", "(multfirst []) -> []", "(multfirst [4]) -> [4]", "(multfirst []) -> []", "(multfirst [9 9]) -> [9 9]", "(multfirst [2]) -> [2]", "(multfirst []) -> []", "(multfirst [4 9 6]) -> [4 4 4]", "(multfirst []) -> []", "(multfirst [3 6 9 4 6]) -> [3 3 3 3 3]", "(multfirst [2 6 4 2 6]) -> [2 2 2 2 2]", "(multfirst [7 1 7 9]) -> [7 7 7 7]", "(multfirst [1 0 0 5 4]) -> [1 1 1 1 1]", "(multfirst []) -> []", "(multfirst [0]) -> [0]", "(multfirst [3]) -> [3]", "(multfirst [0 7 9 7]) -> [0 0 0 0]", "(multfirst []) -> []"]}
{"time": 0.048105, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [0 8 2 7]) -> [0 0 0 0]", "(multfirst [0 7 5 0 8]) -> [0 0 0 0 0]", "(multfirst [7]) -> [7]", "(multfirst [5 2 9 3 1]) -> [5 5 5 5 5]", "(multfirst [4 8 4]) -> [4 4 4]", "(multfirst [7 8 1]) -> [7 7 7]", "(multfirst [3 7 3]) -> [3 3 3]", "(multfirst [3 5 8]) -> [3 3 3]", "(multfirst [3 7 8]) -> [3 3 3]", "(multfirst [6 6]) -> [6 6]", "(multfirst [5 9 0]) -> [5 5 5]", "(multfirst [2]) -> [2]", "(multfirst [2 9 4 4]) -> [2 2 2 2]", "(multfirst [7 2 7 1]) -> [7 7 7 7]", "(multfirst [3]) -> [3]", "(multfirst [2]) -> [2]", "(multfirst []) -> []", "(multfirst [4]) -> [4]", "(multfirst [6 0 2 9]) -> [6 6 6 6]", "(multfirst [5]) -> [5]", "(multfirst [2 0 0 0]) -> [2 2 2 2]", "(multfirst [2 3 7]) -> [2 2 2]", "(multfirst [9 6 5 8 1]) -> [9 9 9 9 9]", "(multfirst [7 2]) -> [7 7]", "(multfirst [6 6 8 2]) -> [6 6 6 6]", "(multfirst [7 8 8]) -> [7 7 7]", "(multfirst [2 8 1 0]) -> [2 2 2 2]", "(multfirst [4]) -> [4]", "(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst [4 8 1 6 0]) -> [4 4 4 4 4]", "(multfirst []) -> []", "(multfirst [8 4 8]) -> [8 8 8]", "(multfirst [7 5]) -> [7 7]", "(multfirst []) -> []", "(multfirst [8 7 9 1 9]) -> [8 8 8 8 8]", "(multfirst []) -> []", "(multfirst [5 0 3 5]) -> [5 5 5 5]", "(multfirst []) -> []", "(multfirst [9 8 1 2 8]) -> [9 9 9 9 9]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [3 3 6 7 9]) -> [3 3 3 3 3]", "(multfirst [5 1]) -> [5 5]", "(multfirst [8 2 2 4 1]) -> [8 8 8 8 8]", "(multfirst [0]) -> [0]", "(multfirst []) -> []", "(multfirst [9 3 1 5 9]) -> [9 9 9 9 9]", "(multfirst [2]) -> [2]"]}
{"time": 0.031684, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [8]) -> [8]", "(multfirst [8]) -> [8]", "(multfirst [4 3 1 7 5]) -> [4 4 4 4 4]", "(multfirst []) -> []", "(multfirst [4 0 5 9 7]) -> [4 4 4 4 4]", "(multfirst [6 8 6]) -> [6 6 6]", "(multfirst [3 5]) -> [3 3]", "(multfirst [6]) -> [6]", "(multfirst [3 1 4 7]) -> [3 3 3 3]", "(multfirst [5 4]) -> [5 5]", "(multfirst [4 5 1 0 8]) -> [4 4 4 4 4]", "(multfirst [3 2 9]) -> [3 3 3]", "(multfirst []) -> []", "(multfirst [6 4]) -> [6 6]", "(multfirst [4 7]) -> [4 4]", "(multfirst [2 5 6 4]) -> [2 2 2 2]", "(multfirst [6]) -> [6]", "(multfirst [1]) -> [1]", "(multfirst [9]) -> [9]", "(multfirst [1 4 6 8]) -> [1 1 1 1]", "(multfirst [8 1]) -> [8 8]", "(multfirst [8 3 1 1]) -> [8 8 8 8]", "(multfirst [6]) -> [6]", "(multfirst [1 7 6 8 7]) -> [1 1 1 1 1]", "(multfirst []) -> []", "(multfirst [0 8 5 9 1]) -> [0 0 0 0 0]", "(multfirst [7 0 4 4 7]) -> [7 7 7 7 7]", "(multfirst [6]) -> [6]", "(multfirst [2]) -> [2]", "(multfirst [1 4 0]) -> [1 1 1]", "(multfirst [9 0]) -> [9 9]", "(multfirst [1 2]) -> [1 1]", "(multfirst [3 9]) -> [3 3]", "(multfirst [7]) -> [7]", "(multfirst [2 5]) -> [2 2]", "(multfirst [3 8]) -> [3 3]", "(multfirst [1]) -> [1]", "(multfirst [8 7 6]) -> [8 8 8]", "(multfirst [7 1]) -> [7 7]", "(multfirst [9 4 9]) -> [9 9 9]", "(multfirst [2]) -> [2]", "(multfirst [2 3 5 4]) -> [2 2 2 2]", "(multfirst [2 2 6 1]) -> [2 2 2 2]", "(multfirst [7]) -> [7]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [6 0]) -> [6 6]", "(multfirst [9 6 3]) -> [9 9 9]", "(multfirst [6 9]) -> [6 6]"]}
{"time": 0.029492, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [6]) -> [6]", "(multfirst [5 9 1 8 6]) -> [5 5 5 5 5]", "(multfirst [6 8]) -> [6 6]", "(multfirst [1 5 4]) -> [1 1 1]", "(multfirst [2 6 9 4]) -> [2 2 2 2]", "(multfirst [8]) -> [8]", "(multfirst []) -> []", "(multfirst [2 2 1 7]) -> [2 2 2 2]", "(multfirst [9 6 7 0 5]) -> [9 9 9 9 9]", "(multfirst []) -> []", "(multfirst [9 1 6 3 4]) -> [9 9 9 9 9]", "(multfirst [7 5 1 3]) -> [7 7 7 7]", "(multfirst []) -> []", "(multfirst [7 3]) -> [7 7]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [8]) -> [8]", "(multfirst [8 9 2]) -> [8 8 8]", "(multfirst [7 1]) -> [7 7]", "(multfirst [0 7 0]) -> [0 0 0]", "(multfirst []) -> []", "(multfirst [0 6 7]) -> [0 0 0]", "(multfirst [2]) -> [2]", "(multfirst [2 2 5 3]) -> [2 2 2 2]", "(multfirst [7 1 8]) -> [7 7 7]", "(multfirst []) -> []", "(multfirst [7 9 4 4 2]) -> [7 7 7 7 7]", "(multfirst [8 5]) -> [8 8]", "(multfirst [4 8 3 4]) -> [4 4 4 4]", "(multfirst []) -> []", "(multfirst [2]) -> [2]", "(multfirst [8 7 0 5]) -> [8 8 8 8]", "(multfirst [4 0]) -> [4 4]", "(multfirst [2 0]) -> [2 2]", "(multfirst [4 7 0 4]) -> [4 4 4 4]", "(multfirst [7 1 9 9]) -> [7 7 7 7]", "(multfirst [3 7 8 0 3]) -> [3 3 3 3 3]", "(multfirst [4 0]) -> [4 4]", "(multfirst [7]) -> [7]", "(multfirst [7]) -> [7]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7 4 9 0]) -> [7 7 7 7]", "(multfirst [2 1 9 0 6]) -> [2 2 2 2 2]", "(multfirst [5 6 9]) -> [5 5 5]", "(multfirst [8 6]) -> [8 8]", "(multfirst [8]) -> [8]", "(multfirst [4 5 2 7 3]) -> [4 4 4 4 4]", "(multfirst [7]) -> [7]"]}
{"time": 0.038562, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [2]) -> [2]", "(multfirst [4 1]) -> [4 4]", "(multfirst [3]) -> [3]", "(multfirst [0]) -> [0]", "(multfirst [5 2]) -> [5 5]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [6 7 1 2]) -> [6 6 6 6]", "(multfirst [9 9]) -> [9 9]", "(multfirst [2 0 8]) -> [2 2 2]", "(multfirst [8 0 8 2]) -> [8 8 8 8]", "(multfirst []) -> []", "(multfirst [9 0]) -> [9 9]", "(multfirst [3 6 3 2]) -> [3 3 3 3]", "(multfirst [7]) -> [7]", "(multfirst [7 0 9 6 0]) -> [7 7 7 7 7]", "(multfirst [9 7]) -> [9 9]", "(multfirst []) -> []", "(multfirst [0 7 0]) -> [0 0 0]", "(multfirst [3 7 7 5 4]) -> [3 3 3 3 3]", "(multfirst [9]) -> [9]", "(multfirst [4]) -> [4]", "(multfirst [1 6]) -> [1 1]", "(multfirst [3 9 3 0]) -> [3 3 3 3]", "(multfirst [7 9]) -> [7 7]", "(multfirst [7 4 1]) -> [7 7 7]", "(multfirst [0 3]) -> [0 0]", "(multfirst [1]) -> [1]", "(multfirst [0 3 2 2 4]) -> [0 0 0 0 0]", "(multfirst [4 2 4]) -> [4 4 4]", "(multfirst [3 6 9 2]) -> [3 3 3 3]", "(multfirst [3 0]) -> [3 3]", "(multfirst [0 3]) -> [0 0]", "(multfirst [3 4 2]) -> [3 3 3]", "(multfirst [6 0 1]) -> [6 6 6]", "(multfirst [0 9 1 1 1]) -> [0 0 0 0 0]", "(multfirst [3 7 3 7 6]) -> [3 3 3 3 3]", "(multfirst [7 8]) -> [7 7]", "(multfirst [5 9 3 1 8]) -> [5 5 5 5 5]", "(multfirst [1 2]) -> [1 1]", "(multfirst [8 3 8]) -> [8 8 8]", "(multfirst [5 9]) -> [5 5]", "(multfirst [0 5 2 7 8]) -> [0 0 0 0 0]", "(multfirst [0 2 3]) -> [0 0 0]", "(multfirst [6]) -> [6]", "(multfirst [4]) -> [4]", "(multfirst []) -> []", "(multfirst [9 1 5 3 7]) -> [9 9 9 9 9]", "(multfirst []) -> []"]}
{"time": 0.043815, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [5 3 9]) -> [5 5 5]", "(multfirst []) -> []", "(multfirst [3 4 3 0]) -> [3 3 3 3]", "(multfirst [5 4 8]) -> [5 5 5]", "(multfirst [9 9]) -> [9 9]", "(multfirst [7 0 3]) -> [7 7 7]", "(multfirst [0 2 7 0]) -> [0 0 0 0]", "(multfirst [1 7]) -> [1 1]", "(multfirst [3 2 6]) -> [3 3 3]", "(multfirst [9 8 4 0]) -> [9 9 9 9]", "(multfirst [1 9 0 9]) -> [1 1 1 1]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [3 1 5 1 5]) -> [3 3 3 3 3]", "(multfirst [4 9]) -> [4 4]", "(multfirst [8]) -> [8]", "(multfirst [7 5 2 6]) -> [7 7 7 7]", "(multfirst [0 1]) -> [0 0]", "(multfirst [3 7 6]) -> [3 3 3]", "(multfirst []) -> []", "(multfirst [2 2 0 6]) -> [2 2 2 2]", "(multfirst [6 8 1 8]) -> [6 6 6 6]", "(multfirst [5 5]) -> [5 5]", "(multfirst [2 3 2]) -> [2 2 2]", "(multfirst [5 0 0]) -> [5 5 5]", "(multfirst []) -> []", "(multfirst [9 9 4 6 0]) -> [9 9 9 9 9]", "(multfirst [1 8 9 2 3]) -> [1 1 1 1 1]", "(multfirst [6 2]) -> [6 6]", "(multfirst [4]) -> [4]", "(multfirst []) -> []", "(multfirst [8 1 0]) -> [8 8 8]", "(multfirst [9 1 4 2]) -> [9 9 9 9]", "(multfirst []) -> []", "(multfirst [3 9 7 9 4]) -> [3 3 3 3 3]", "(multfirst [4]) -> [4]", "(multfirst [8]) -> [8]", "(multfirst [4 0 4 4]) -> [4 4 4 4]", "(multfirst [9 5 8]) -> [9 9 9]", "(multfirst [2 5]) -> [2 2]", "(multfirst [8 9 9 8 7]) -> [8 8 8 8 8]", "(multfirst [5 2 5 9]) -> [5 5 5 5]", "(multfirst [6 5]) -> [6 6]", "(multfirst [0 5 5]) -> [0 0 0]", "(multfirst [7 9]) -> [7 7]", "(multfirst [6 6 5]) -> [6 6 6]", "(multfirst [8 3 0 6]) -> [8 8 8 8]", "(multfirst []) -> []"]}
{"time": 0.041984, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst [2 5 4 7 3]) -> [2 2 2 2 2]", "(multfirst [4]) -> [4]", "(multfirst [8 9 9 1 9]) -> [8 8 8 8 8]", "(multfirst [9 3 4]) -> [9 9 9]", "(multfirst [9 2 8 7 4]) -> [9 9 9 9 9]", "(multfirst []) -> []", "(multfirst [7 1 2 8]) -> [7 7 7 7]", "(multfirst [7 2 4 8]) -> [7 7 7 7]", "(multfirst [0 3 0 7]) -> [0 0 0 0]", "(multfirst [6 3 4 6 1]) -> [6 6 6 6 6]", "(multfirst [9]) -> [9]", "(multfirst [3 6 7 2]) -> [3 3 3 3]", "(multfirst [1 7 5 8]) -> [1 1 1 1]", "(multfirst []) -> []", "(multfirst [8 3 6]) -> [8 8 8]", "(multfirst [8 7 7]) -> [8 8 8]", "(multfirst [9]) -> [9]", "(multfirst [5]) -> [5]", "(multfirst [9 6 7]) -> [9 9 9]", "(multfirst [6]) -> [6]", "(multfirst [2 4 9 5]) -> [2 2 2 2]", "(multfirst [5 9 6]) -> [5 5 5]", "(multfirst [5 9]) -> [5 5]", "(multfirst [0 2 4]) -> [0 0 0]", "(multfirst [7 0 1 9 0]) -> [7 7 7 7 7]", "(multfirst [0 0 8 5 1]) -> [0 0 0 0 0]", "(multfirst [9 5 9 5 4]) -> [9 9 9 9 9]", "(multfirst [5]) -> [5]", "(multfirst [6 5 3 9 2]) -> [6 6 6 6 6]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [1 6 3 6 2]) -> [1 1 1 1 1]", "(multfirst [1 3 5]) -> [1 1 1]", "(multfirst []) -> []", "(multfirst [8 8]) -> [8 8]", "(multfirst []) -> []", "(multfirst [2 5 8]) -> [2 2 2]", "(multfirst [1 6 7]) -> [1 1 1]", "(multfirst [7 4 6 8]) -> [7 7 7 7]", "(multfirst [5 1 9 3]) -> [5 5 5 5]", "(multfirst [8 3 6 1]) -> [8 8 8 8]", "(multfirst [0 4 7 7 5]) -> [0 0 0 0 0]", "(multfirst [7]) -> [7]", "(multfirst [7 2]) -> [7 7]", "(multfirst [4 7 0 6 2]) -> [4 4 4 4 4]", "(multfirst [2 8]) -> [2 2]", "(multfirst [9 6 3 7]) -> [9 9 9 9]"]}
{"time": 0.043778, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [9 6 1 2 5]) -> [9 9 9 9 9]", "(multfirst [1 0 3 4 1]) -> [1 1 1 1 1]", "(multfirst [0 8 2 1]) -> [0 0 0 0]", "(multfirst [2 1 6 7 6]) -> [2 2 2 2 2]", "(multfirst [5 5]) -> [5 5]", "(multfirst []) -> []", "(multfirst [7 2]) -> [7 7]", "(multfirst []) -> []", "(multfirst [5 6]) -> [5 5]", "(multfirst [3 3 1 5]) -> [3 3 3 3]", "(multfirst [0 6]) -> [0 0]", "(multfirst [9 2 4 0 3]) -> [9 9 9 9 9]", "(multfirst [7 4 2 2]) -> [7 7 7 7]", "(multfirst [1 2 6 1]) -> [1 1 1 1]", "(multfirst [2]) -> [2]", "(multfirst [2]) -> [2]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [3 4]) -> [3 3]", "(multfirst [4 7 1 2]) -> [4 4 4 4]", "(multfirst [0 4]) -> [0 0]", "(multfirst [0 0 9]) -> [0 0 0]", "(multfirst [1 2 1 7]) -> [1 1 1 1]", "(multfirst [7 4 0 3 8]) -> [7 7 7 7 7]", "(multfirst [3]) -> [3]", "(multfirst [1 4 9 9 4]) -> [1 1 1 1 1]", "(multfirst [6]) -> [6]", "(multfirst [4 2 1 3]) -> [4 4 4 4]", "(multfirst [8]) -> [8]", "(multfirst []) -> []", "(multfirst [4 7]) -> [4 4]", "(multfirst [0 0 5 5 4]) -> [0 0 0 0 0]", "(multfirst []) -> []", "(multfirst [4 2 1 5]) -> [4 4 4 4]", "(multfirst [1 7]) -> [1 1]", "(multfirst [9 1]) -> [9 9]", "(multfirst [2 6 1 3]) -> [2 2 2 2]", "(multfirst []) -> []", "(multfirst [1 0]) -> [1 1]", "(multfirst [3 5 9]) -> [3 3 3]", "(multfirst []) -> []", "(multfirst [6 8 1 6 1]) -> [6 6 6 6 6]", "(multfirst []) -> []", "(multfirst [5 1]) -> [5 5]", "(multfirst [2 0 4]) -> [2 2 2]", "(multfirst [6 1]) -> [6 6]", "(multfirst [2 4 5 9 1]) -> [2 2 2 2 2]"]}
{"time": 0.029309, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [0 4 4 4]) -> [0 0 0 0]", "(multfirst [0 0 9 6]) -> [0 0 0 0]", "(multfirst [5 1 4]) -> [5 5 5]", "(multfirst [1 2 7]) -> [1 1 1]", "(multfirst [3 0]) -> [3 3]", "(multfirst [1 7 0 6 3]) -> [1 1 1 1 1]", "(multfirst [2 2 9 2 0]) -> [2 2 2 2 2]", "(multfirst [3 3]) -> [3 3]", "(multfirst [4 0 5 5]) -> [4 4 4 4]", "(multfirst [1]) -> [1]", "(multfirst [8 9 8 1 4]) -> [8 8 8 8 8]", "(multfirst [1 0]) -> [1 1]", "(multfirst [8 0 5 1 1]) -> [8 8 8 8 8]", "(multfirst []) -> []", "(multfirst [7]) -> [7]", "(multfirst [8 1]) -> [8 8]", "(multfirst [4 6 9 5]) -> [4 4 4 4]", "(multfirst [3 2 9 0]) -> [3 3 3 3]", "(multfirst [7 2]) -> [7 7]", "(multfirst [9 4]) -> [9 9]", "(multfirst [9 4 1 7]) -> [9 9 9 9]", "(multfirst [6 2 0]) -> [6 6 6]", "(multfirst [8 0 5]) -> [8 8 8]", "(multfirst [3 3 8 9]) -> [3 3 3 3]", "(multfirst [1 7 8 6]) -> [1 1 1 1]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [9 6]) -> [9 9]", "(multfirst [2]) -> [2]", "(multfirst [0 1 1 7]) -> [0 0 0 0]", "(multfirst [7]) -> [7]", "(multfirst [3 5 8 1]) -> [3 3 3 3]", "(multfirst [0]) -> [0]", "(multfirst [5 1 7]) -> [5 5 5]", "(multfirst [0 7 4 9 2]) -> [0 0 0 0 0]", "(multfirst [9]) -> [9]", "(multfirst [1]) -> [1]", "(multfirst [7 5 2 1 2]) -> [7 7 7 7 7]", "(multfirst [7 3]) -> [7 7]", "(multfirst [3 0 8 2]) -> [3 3 3 3]", "(multfirst [3 6 9 0]) -> [3 3 3 3]", "(multfirst [9 9]) -> [9 9]", "(multfirst [1 3 7 0]) -> [1 1 1 1]", "(multfirst []) -> []", "(multfirst [8 3]) -> [8 8]", "(multfirst [7 6 1 7 1]) -> [7 7 7 7 7]", "(multfirst [4]) -> [4]", "(multfirst [7 7 9]) -> [7 7 7]"]}
{"time": 0.032447, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [7 1 0 1 8]) -> [7 7 7 7 7]", "(multfirst [0 0 5 5 7]) -> [0 0 0 0 0]", "(multfirst [7 2]) -> [7 7]", "(multfirst []) -> []", "(multfirst [5 2 8 8 5]) -> [5 5 5 5 5]", "(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst [8]) -> [8]", "(multfirst [9 4 2 5 7]) -> [9 9 9 9 9]", "(multfirst [2 4 2]) -> [2 2 2]", "(multfirst [3 5 7]) -> [3 3 3]", "(multfirst [7]) -> [7]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [2 6 8 8]) -> [2 2 2 2]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [6]) -> [6]", "(multfirst [3 5]) -> [3 3]", "(multfirst [3 9 9]) -> [3 3 3]", "(multfirst [6 4 2 8 0]) -> [6 6 6 6 6]", "(multfirst [9]) -> [9]", "(multfirst [9]) -> [9]", "(multfirst [1]) -> [1]", "(multfirst []) -> []", "(multfirst [0 1]) -> [0 0]", "(multfirst [6 0 2 1]) -> [6 6 6 6]", "(multfirst [2 3]) -> [2 2]", "(multfirst [1 4 9 2]) -> [1 1 1 1]", "(multfirst [3 6 0]) -> [3 3 3]", "(multfirst [8 8 2]) -> [8 8 8]", "(multfirst [6 9 2 7]) -> [6 6 6 6]", "(multfirst [2 1]) -> [2 2]", "(multfirst []) -> []", "(multfirst [0 0 9]) -> [0 0 0]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [6]) -> [6]", "(multfirst [9 9 3 6 5]) -> [9 9 9 9 9]", "(multfirst [5]) -> [5]", "(multfirst [1 4 2 4 5]) -> [1 1 1 1 1]", "(multfirst [0 5 6]) -> [0 0 0]", "(multfirst [4 7]) -> [4 4]", "(multfirst [3 9 7]) -> [3 3 3]", "(multfirst [1 9 1 9]) -> [1 1 1 1]", "(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst [2]) -> [2]", "(multfirst [6 0 0 9 5]) -> [6 6 6 6 6]"]}
{"time": 0.037073, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [9 4 7 7 3]) -> [9 9 9 9 9]", "(multfirst [7 9]) -> [7 7]", "(multfirst [8 9 1 7]) -> [8 8 8 8]", "(multfirst [8 9]) -> [8 8]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [5]) -> [5]", "(multfirst [0 2]) -> [0 0]", "(multfirst [1 2 4]) -> [1 1 1]", "(multfirst [0]) -> [0]", "(multfirst []) -> []", "(multfirst [5]) -> [5]", "(multfirst []) -> []", "(multfirst [3 4]) -> [3 3]", "(multfirst [0 4]) -> [0 0]", "(multfirst [5 5 4]) -> [5 5 5]", "(multfirst [5 4]) -> [5 5]", "(multfirst [4 8]) -> [4 4]", "(multfirst []) -> []", "(multfirst [0 1 9 4 5]) -> [0 0 0 0 0]", "(multfirst [6 5 1]) -> [6 6 6]", "(multfirst [7]) -> [7]", "(multfirst [4]) -> [4]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7 1 9]) -> [7 7 7]", "(multfirst [5 2 1 0]) -> [5 5 5 5]", "(multfirst []) -> []", "(multfirst [0 8 8 8 8]) -> [0 0 0 0 0]", "(multfirst [9 4]) -> [9 9]", "(multfirst [8 2]) -> [8 8]", "(multfirst [0 7]) -> [0 0]", "(multfirst [5 6 8]) -> [5 5 5]", "(multfirst [8 0 4 9 8]) -> [8 8 8 8 8]", "(multfirst [6 3 5 6 4]) -> [6 6 6 6 6]", "(multfirst [4 5 5]) -> [4 4 4]", "(multfirst [0]) -> [0]", "(multfirst [9 7 6 5 8]) -> [9 9 9 9 9]", "(multfirst [6 3 8 0 9]) -> [6 6 6 6 6]", "(multfirst [2]) -> [2]", "(multfirst [6]) -> [6]", "(multfirst []) -> []", "(multfirst [6]) -> [6]", "(multfirst [9 1 1 9]) -> [9 9 9 9]", "(multfirst [6]) -> [6]", "(multfirst [9 2]) -> [9 9]", "(multfirst [9 6]) -> [9 9]", "(multfirst [9 8]) -> [9 9]", "(multfirst []) -> []"]}
{"time": 0.037378, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [2 2 1]) -> [2 2 2]", "(multfirst [8]) -> [8]", "(multfirst [6 9 0]) -> [6 6 6]", "(multfirst [3 3 6 1]) -> [3 3 3 3]", "(multfirst [1]) -> [1]", "(multfirst [2]) -> [2]", "(multfirst [6 0 5 4]) -> [6 6 6 6]", "(multfirst [3 1]) -> [3 3]", "(multfirst [3 0 2]) -> [3 3 3]", "(multfirst [5 4 6 7]) -> [5 5 5 5]", "(multfirst [4]) -> [4]", "(multfirst [8 1 2 1]) -> [8 8 8 8]", "(multfirst [6]) -> [6]", "(multfirst [2 0 6 8]) -> [2 2 2 2]", "(multfirst [5]) -> [5]", "(multfirst [8 5]) -> [8 8]", "(multfirst [2 9 6]) -> [2 2 2]", "(multfirst [0 9 4 1]) -> [0 0 0 0]", "(multfirst [3 1 2 0]) -> [3 3 3 3]", "(multfirst [8 0 7 4 3]) -> [8 8 8 8 8]", "(multfirst [8 8 9]) -> [8 8 8]", "(multfirst [2]) -> [2]", "(multfirst [2 8]) -> [2 2]", "(multfirst [5 8 3 0 6]) -> [5 5 5 5 5]", "(multfirst [5]) -> [5]", "(multfirst []) -> []", "(multfirst [9]) -> [9]", "(multfirst [7]) -> [7]", "(multfirst [9 3 2 1 3]) -> [9 9 9 9 9]", "(multfirst []) -> []", "(multfirst [1 3 5]) -> [1 1 1]", "(multfirst []) -> []", "(multfirst [8 4 3]) -> [8 8 8]", "(multfirst [6]) -> [6]", "(multfirst [7 1 7 9 8]) -> [7 7 7 7 7]", "(multfirst [3]) -> [3]", "(multfirst [2 6 8 0 4]) -> [2 2 2 2 2]", "(multfirst [3]) -> [3]", "(multfirst [8 3 6]) -> [8 8 8]", "(multfirst []) -> []", "(multfirst [2 2]) -> [2 2]", "(multfirst []) -> []", "(multfirst [6 8]) -> [6 6]", "(multfirst [3]) -> [3]", "(multfirst [9]) -> [9]", "(multfirst [3 4 2]) -> [3 3 3]", "(multfirst []) -> []", "(multfirst [2 4 3 7 8]) -> [2 2 2 2 2]", "(multfirst [1]) -> [1]"]}
{"time": 0.03001, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [1]) -> [1]", "(multfirst [2]) -> [2]", "(multfirst [0]) -> [0]", "(multfirst [1]) -> [1]", "(multfirst [3 4 8 6]) -> [3 3 3 3]", "(multfirst [4]) -> [4]", "(multfirst [4]) -> [4]", "(multfirst [2]) -> [2]", "(multfirst [8 7 9]) -> [8 8 8]", "(multfirst [2 3 0 3 3]) -> [2 2 2 2 2]", "(multfirst [8]) -> [8]", "(multfirst [4 4 5 8 1]) -> [4 4 4 4 4]", "(multfirst [6 7]) -> [6 6]", "(multfirst [7 4 9 6]) -> [7 7 7 7]", "(multfirst []) -> []", "(multfirst [9 2 7 1]) -> [9 9 9 9]", "(multfirst [0]) -> [0]", "(multfirst [3 9 7 9 8]) -> [3 3 3 3 3]", "(multfirst [6 5 8 9 6]) -> [6 6 6 6 6]", "(multfirst [4 6 6 0 2]) -> [4 4 4 4 4]", "(multfirst [5 2 4 2 7]) -> [5 5 5 5 5]", "(multfirst [3 1 0]) -> [3 3 3]", "(multfirst [8 9]) -> [8 8]", "(multfirst [9 5 4 4]) -> [9 9 9 9]", "(multfirst []) -> []", "(multfirst [6 4 5 3]) -> [6 6 6 6]", "(multfirst [0]) -> [0]", "(multfirst [6 5 1 2 8]) -> [6 6 6 6 6]", "(multfirst [6 3 9 9 0]) -> [6 6 6 6 6]", "(multfirst [5 4 7 3]) -> [5 5 5 5]", "(multfirst [3 3 5 6]) -> [3 3 3 3]", "(multfirst [2 7 7]) -> [2 2 2]", "(multfirst []) -> []", "(multfirst [7]) -> [7]", "(multfirst [7 3]) -> [7 7]", "(multfirst [8 5]) -> [8 8]", "(multfirst [0 1]) -> [0 0]", "(multfirst [9 6]) -> [9 9]", "(multfirst [3 5]) -> [3 3]", "(multfirst [4 6]) -> [4 4]", "(multfirst [9 4 5]) -> [9 9 9]", "(multfirst [6 9]) -> [6 6]", "(multfirst [5 6 0 5]) -> [5 5 5 5]", "(multfirst [1 6 9]) -> [1 1 1]", "(multfirst [9]) -> [9]", "(multfirst []) -> []", "(multfirst [7 8 5 2 3]) -> [7 7 7 7 7]", "(multfirst [3 7 0]) -> [3 3 3]", "(multfirst [5]) -> [5]"]}
{"time": 0.040073, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [6 2 3]) -> [6 6 6]", "(multfirst [3 2 2 7]) -> [3 3 3 3]", "(multfirst []) -> []", "(multfirst [9 0]) -> [9 9]", "(multfirst [0 1 5 3]) -> [0 0 0 0]", "(multfirst [8 4]) -> [8 8]", "(multfirst [7]) -> [7]", "(multfirst [8 9]) -> [8 8]", "(multfirst [4 9]) -> [4 4]", "(multfirst [9 3 5 5]) -> [9 9 9 9]", "(multfirst [3 9 9 3]) -> [3 3 3 3]", "(multfirst [4 2 8]) -> [4 4 4]", "(multfirst [2 1 9 0]) -> [2 2 2 2]", "(multfirst [3 1 5]) -> [3 3 3]", "(multfirst [9]) -> [9]", "(multfirst [9]) -> [9]", "(multfirst [8 1 5 5]) -> [8 8 8 8]", "(multfirst [8 4 1 7]) -> [8 8 8 8]", "(multfirst [9]) -> [9]", "(multfirst [6 8 2 2 0]) -> [6 6 6 6 6]", "(multfirst [4]) -> [4]", "(multfirst [8 5 7]) -> [8 8 8]", "(multfirst [4 4 4]) -> [4 4 4]", "(multfirst [5 1]) -> [5 5]", "(multfirst [7 4 2]) -> [7 7 7]", "(multfirst [5]) -> [5]", "(multfirst [5 5 4 3 4]) -> [5 5 5 5 5]", "(multfirst [9 9 0 8]) -> [9 9 9 9]", "(multfirst []) -> []", "(multfirst [1 5 3]) -> [1 1 1]", "(multfirst []) -> []", "(multfirst [1 9 0]) -> [1 1 1]", "(multfirst [7 2 5]) -> [7 7 7]", "(multfirst [9]) -> [9]", "(multfirst [6 7]) -> [6 6]", "(multfirst [8 7]) -> [8 8]", "(multfirst [8 7 1]) -> [8 8 8]", "(multfirst [0]) -> [0]", "(multfirst [5 8 9]) -> [5 5 5]", "(multfirst [9 3 9]) -> [9 9 9]", "(multfirst [8 9]) -> [8 8]", "(multfirst [1 1]) -> [1 1]", "(multfirst [2 3 8 5 3]) -> [2 2 2 2 2]", "(multfirst [4 0]) -> [4 4]", "(multfirst [1 0 9 7 0]) -> [1 1 1 1 1]", "(multfirst [4 6 4 6]) -> [4 4 4 4]", "(multfirst [2]) -> [2]", "(multfirst [9]) -> [9]", "(multfirst [7]) -> [7]"]}
{"time": 0.036347, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [2 5 9 7 3]) -> [2 2 2 2 2]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [2 4 8]) -> [2 2 2]", "(multfirst [6 6 1]) -> [6 6 6]", "(multfirst [7 5 8]) -> [7 7 7]", "(multfirst [6 7 1]) -> [6 6 6]", "(multfirst [3 3 2]) -> [3 3 3]", "(multfirst []) -> []", "(multfirst [2 1]) -> [2 2]", "(multfirst [8]) -> [8]", "(multfirst [1 3 7 0]) -> [1 1 1 1]", "(multfirst [9 3 2 9]) -> [9 9 9 9]", "(multfirst []) -> []", "(multfirst [0 8 8 0]) -> [0 0 0 0]", "(multfirst [9 1]) -> [9 9]", "(multfirst [1 6 1]) -> [1 1 1]", "(multfirst [2 6 3]) -> [2 2 2]", "(multfirst [4 4]) -> [4 4]", "(multfirst [7 5 5]) -> [7 7 7]", "(multfirst [0 0 2]) -> [0 0 0]", "(multfirst [1 8]) -> [1 1]", "(multfirst [2 2]) -> [2 2]", "(multfirst []) -> []", "(multfirst [4 9]) -> [4 4]", "(multfirst [1 2 3 5 1]) -> [1 1 1 1 1]", "(multfirst [6 6 1]) -> [6 6 6]", "(multfirst [2 5 7 8 8]) -> [2 2 2 2 2]", "(multfirst [9 4]) -> [9 9]", "(multfirst [5 4 3]) -> [5 5 5]", "(multfirst []) -> []", "(multfirst [5 1 5]) -> [5 5 5]", "(multfirst [8]) -> [8]", "(multfirst []) -> []", "(multfirst [6 5 3 4]) -> [6 6 6 6]", "(multfirst [9 9]) -> [9 9]", "(multfirst [6 7]) -> [6 6]", "(multfirst []) -> []", "(multfirst [8 1 4]) -> [8 8 8]", "(multfirst [2 6 9 0]) -> [2 2 2 2]", "(multfirst [2 5 8 9]) -> [2 2 2 2]", "(multfirst [6 9 2 9]) -> [6 6 6 6]", "(multfirst [2 8]) -> [2 2]", "(multfirst []) -> []", "(multfirst [6 4 9]) -> [6 6 6]", "(multfirst [6 4]) -> [6 6]", "(multfirst [0 1]) -> [0 0]", "(multfirst [4]) -> [4]", "(multfirst [1]) -> [1]"]}
{"time": 0.029983, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [1 0 8]) -> [1 1 1]", "(multfirst [1 7 1 8 1]) -> [1 1 1 1 1]", "(multfirst [6 9]) -> [6 6]", "(multfirst [0 5 3 2]) -> [0 0 0 0]", "(multfirst [5 3]) -> [5 5]", "(multfirst []) -> []", "(multfirst [9 9]) -> [9 9]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [2 3]) -> [2 2]", "(multfirst []) -> []", "(multfirst [4 2]) -> [4 4]", "(multfirst [4 4 6 9]) -> [4 4 4 4]", "(multfirst [0 6]) -> [0 0]", "(multfirst [4]) -> [4]", "(multfirst [8 3]) -> [8 8]", "(multfirst [2]) -> [2]", "(multfirst [8 8 5 2 1]) -> [8 8 8 8 8]", "(multfirst [1 8 9]) -> [1 1 1]", "(multfirst [1 7 2 5 2]) -> [1 1 1 1 1]", "(multfirst [2 2 1]) -> [2 2 2]", "(multfirst [0 9 4]) -> [0 0 0]", "(multfirst [8 2 4 0]) -> [8 8 8 8]", "(multfirst [4 5 8 2 0]) -> [4 4 4 4 4]", "(multfirst [3 9 9 4]) -> [3 3 3 3]", "(multfirst [5]) -> [5]", "(multfirst [5 0 3 6]) -> [5 5 5 5]", "(multfirst [5 6 6]) -> [5 5 5]", "(multfirst [3 4]) -> [3 3]", "(multfirst [3 7 8 5 6]) -> [3 3 3 3 3]", "(multfirst [3]) -> [3]", "(multfirst [6 0 5]) -> [6 6 6]", "(multfirst [5 5 4 7]) -> [5 5 5 5]", "(multfirst [7 4]) -> [7 7]", "(multfirst [0 5 6]) -> [0 0 0]", "(multfirst [8 8 6]) -> [8 8 8]", "(multfirst [5]) -> [5]", "(multfirst [3 2 9 3 2]) -> [3 3 3 3 3]", "(multfirst [1 8 5 3]) -> [1 1 1 1]", "(multfirst [6 7 1 4 3]) -> [6 6 6 6 6]", "(multfirst [3 6]) -> [3 3]", "(multfirst [7 0 7 0 3]) -> [7 7 7 7 7]", "(multfirst [6 1]) -> [6 6]", "(multfirst [2 2]) -> [2 2]", "(multfirst [3 9 1]) -> [3 3 3]", "(multfirst [5 0 4 2]) -> [5 5 5 5]", "(multfirst [8 5]) -> [8 8]", "(multfirst [2 3 9 8]) -> [2 2 2 2]"]}
{"time": 0.038772, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [4 2 1 5 1]) -> [4 4 4 4 4]", "(multfirst [5 9 5 8 7]) -> [5 5 5 5 5]", "(multfirst [6 8 8 9]) -> [6 6 6 6]", "(multfirst []) -> []", "(multfirst [8 7 7 0]) -> [8 8 8 8]", "(multfirst [5 7 0 8 5]) -> [5 5 5 5 5]", "(multfirst [0]) -> [0]", "(multfirst [8]) -> [8]", "(multfirst []) -> []", "(multfirst [8 6 3]) -> [8 8 8]", "(multfirst [1 4 7 3]) -> [1 1 1 1]", "(multfirst [9 6 2 0]) -> [9 9 9 9]", "(multfirst [8 9 6]) -> [8 8 8]", "(multfirst [8 9 6 9]) -> [8 8 8 8]", "(multfirst [0]) -> [0]", "(multfirst [1 0 1 6]) -> [1 1 1 1]", "(multfirst [7 4 7]) -> [7 7 7]", "(multfirst []) -> []", "(multfirst [3 8 1]) -> [3 3 3]", "(multfirst [5]) -> [5]", "(multfirst [2 7 3]) -> [2 2 2]", "(multfirst [2 7 1 5]) -> [2 2 2 2]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [3 9]) -> [3 3]", "(multfirst [0 1 3]) -> [0 0 0]", "(multfirst [4 0 5 8 3]) -> [4 4 4 4 4]", "(multfirst [3 5 0]) -> [3 3 3]", "(multfirst [6 8 3 6 2]) -> [6 6 6 6 6]", "(multfirst []) -> []", "(multfirst [4 3]) -> [4 4]", "(multfirst [5 0]) -> [5 5]", "(multfirst [6 9 5 6 9]) -> [6 6 6 6 6]", "(multfirst [4 9 8 9]) -> [4 4 4 4]", "(multfirst [2 3 6]) -> [2 2 2]", "(multfirst []) -> []", "(multfirst [9]) -> [9]", "(multfirst [5 1 5 1 1]) -> [5 5 5 5 5]", "(multfirst [7]) -> [7]", "(multfirst []) -> []", "(multfirst [3 2]) -> [3 3]", "(multfirst [6 6]) -> [6 6]", "(multfirst [1 9 7 6 4]) -> [1 1 1 1 1]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [4 6 3]) -> [4 4 4]", "(multfirst []) -> []", "(multfirst [2 6]) -> [2 2]"]}
{"time": 0.043554, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [0 9 8 3]) -> [0 0 0 0]", "(multfirst [7]) -> [7]", "(multfirst [1 8 3 0]) -> [1 1 1 1]", "(multfirst []) -> []", "(multfirst [8 2]) -> [8 8]", "(multfirst [7 0]) -> [7 7]", "(multfirst [7 6]) -> [7 7]", "(multfirst []) -> []", "(multfirst [8 9 4]) -> [8 8 8]", "(multfirst [3 2]) -> [3 3]", "(multfirst []) -> []", "(multfirst [9 7 9 7]) -> [9 9 9 9]", "(multfirst [6 0]) -> [6 6]", "(multfirst [4 5 1 5 9]) -> [4 4 4 4 4]", "(multfirst [0 3 5 2 7]) -> [0 0 0 0 0]", "(multfirst [0]) -> [0]", "(multfirst []) -> []", "(multfirst [2 2 6 2]) -> [2 2 2 2]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [6 0 6 2 5]) -> [6 6 6 6 6]", "(multfirst [2 8]) -> [2 2]", "(multfirst [6 5]) -> [6 6]", "(multfirst [2 3 1]) -> [2 2 2]", "(multfirst [6 5 5 2]) -> [6 6 6 6]", "(multfirst []) -> []", "(multfirst [3 6 2]) -> [3 3 3]", "(multfirst [5]) -> [5]", "(multfirst [0 6 4 4]) -> [0 0 0 0]", "(multfirst [0 4 9 6]) -> [0 0 0 0]", "(multfirst [0]) -> [0]", "(multfirst [7 5 4 2 6]) -> [7 7 7 7 7]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [2]) -> [2]", "(multfirst [7 5]) -> [7 7]", "(multfirst [8 9 4 7 4]) -> [8 8 8 8 8]", "(multfirst [7]) -> [7]", "(multfirst [3 2 7 5 3]) -> [3 3 3 3 3]", "(multfirst [2 8 9 1]) -> [2 2 2 2]", "(multfirst [9 4 4]) -> [9 9 9]", "(multfirst [6 7 6 7 6]) -> [6 6 6 6 6]", "(multfirst [2 9]) -> [2 2]", "(multfirst [4 1 0 9 3]) -> [4 4 4 4 4]", "(multfirst [4]) -> [4]", "(multfirst [1]) -> [1]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [3 8 4]) -> [3 3 3]"]}
{"time": 0.036039, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [3 0]) -> [3 3]", "(multfirst [6 0 7]) -> [6 6 6]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [8 6 5 4 9]) -> [8 8 8 8 8]", "(multfirst [0 4]) -> [0 0]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [6 0 3 9 2]) -> [6 6 6 6 6]", "(multfirst [5 4 9 2 9]) -> [5 5 5 5 5]", "(multfirst [1]) -> [1]", "(multfirst []) -> []", "(multfirst [8 6 8 4]) -> [8 8 8 8]", "(multfirst [4 6 9 2]) -> [4 4 4 4]", "(multfirst [2 3 7]) -> [2 2 2]", "(multfirst [3]) -> [3]", "(multfirst [3]) -> [3]", "(multfirst [9 5 1 6 4]) -> [9 9 9 9 9]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [5]) -> [5]", "(multfirst [2 0 7]) -> [2 2 2]", "(multfirst [1 5 4 7]) -> [1 1 1 1]", "(multfirst [4 8]) -> [4 4]", "(multfirst [0 5 7]) -> [0 0 0]", "(multfirst [3 8]) -> [3 3]", "(multfirst [1 6 6]) -> [1 1 1]", "(multfirst [8 6 7 5]) -> [8 8 8 8]", "(multfirst [5 4 2 7 4]) -> [5 5 5 5 5]", "(multfirst [7 8 5 0 5]) -> [7 7 7 7 7]", "(multfirst []) -> []", "(multfirst [4 1 5 4 0]) -> [4 4 4 4 4]", "(multfirst [4 3 9 1]) -> [4 4 4 4]", "(multfirst [4]) -> [4]", "(multfirst [3]) -> [3]", "(multfirst [0 8 9 1 4]) -> [0 0 0 0 0]", "(multfirst [2]) -> [2]", "(multfirst [5 5 2 5 5]) -> [5 5 5 5 5]", "(multfirst [0 5]) -> [0 0]", "(multfirst [7 0 2]) -> [7 7 7]", "(multfirst [4]) -> [4]", "(multfirst [2 4 0 8]) -> [2 2 2 2]", "(multfirst [1]) -> [1]", "(multfirst [4 9 0 5 8]) -> [4 4 4 4 4]", "(multfirst [4 6 7 7]) -> [4 4 4 4]", "(multfirst [3]) -> [3]", "(multfirst [3 9 0 7 9]) -> [3 3 3 3 3]", "(multfirst [2 2 0]) -> [2 2 2]"]}
{"time": 0.028681, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [2 4 2 8]) -> [2 2 2 2]", "(multfirst [6 0 8]) -> [6 6 6]", "(multfirst [6 3 3 8]) -> [6 6 6 6]", "(multfirst [5 9 0 5 1]) -> [5 5 5 5 5]", "(multfirst [9 7 3]) -> [9 9 9]", "(multfirst [6]) -> [6]", "(multfirst [5 7 0 6 3]) -> [5 5 5 5 5]", "(multfirst [9 2 8]) -> [9 9 9]", "(multfirst []) -> []", "(multfirst [2]) -> [2]", "(multfirst [3 3 7 8 4]) -> [3 3 3 3 3]", "(multfirst [7 1 1 1]) -> [7 7 7 7]", "(multfirst [0 2 8]) -> [0 0 0]", "(multfirst [8]) -> [8]", "(multfirst [4]) -> [4]", "(multfirst [7 9]) -> [7 7]", "(multfirst [1 0 8]) -> [1 1 1]", "(multfirst [2 5 7]) -> [2 2 2]", "(multfirst [4 5 1 2 0]) -> [4 4 4 4 4]", "(multfirst [1 8 5 1]) -> [1 1 1 1]", "(multfirst [0 8]) -> [0 0]", "(multfirst [6 5]) -> [6 6]", "(multfirst [1 2 8 7 6]) -> [1 1 1 1 1]", "(multfirst [5]) -> [5]", "(multfirst []) -> []", "(multfirst [2 6 1]) -> [2 2 2]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [2 3]) -> [2 2]", "(multfirst [7 0 5 9]) -> [7 7 7 7]", "(multfirst [0 9 9 3]) -> [0 0 0 0]", "(multfirst []) -> []", "(multfirst [4 7 6]) -> [4 4 4]", "(multfirst [4 0 6]) -> [4 4 4]", "(multfirst [9]) -> [9]", "(multfirst []) -> []", "(multfirst [8 9 9]) -> [8 8 8]", "(multfirst [2 2 6 0 9]) -> [2 2 2 2 2]", "(multfirst [7]) -> [7]", "(multfirst [4 1]) -> [4 4]", "(multfirst [4 8 2 1 3]) -> [4 4 4 4 4]", "(multfirst []) -> []", "(multfirst [4 9 6 8 8]) -> [4 4 4 4 4]", "(multfirst [1 9 3 0 9]) -> [1 1 1 1 1]", "(multfirst [3 1 6]) -> [3 3 3]", "(multfirst [2 3 2]) -> [2 2 2]", "(multfirst [2 5]) -> [2 2]", "(multfirst [7 2 0 2 3]) -> [7 7 7 7 7]", "(multfirst [9 9 9 4 0]) -> [9 9 9 9 9]"]}
{"time": 0.031322, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [1]) -> [1]", "(multfirst []) -> []", "(multfirst [4 2 8 2 2]) -> [4 4 4 4 4]", "(multfirst [6 5]) -> [6 6]", "(multfirst [5 6]) -> [5 5]", "(multfirst [6 9 1]) -> [6 6 6]", "(multfirst [7 7]) -> [7 7]", "(multfirst [4]) -> [4]", "(multfirst [7 8]) -> [7 7]", "(multfirst [6 8]) -> [6 6]", "(multfirst [5]) -> [5]", "(multfirst [9 6 4]) -> [9 9 9]", "(multfirst [9]) -> [9]", "(multfirst [8 5 2]) -> [8 8 8]", "(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst [8 4 9 3 7]) -> [8 8 8 8 8]", "(multfirst [6 9 4]) -> [6 6 6]", "(multfirst [7 3 4 6]) -> [7 7 7 7]", "(multfirst [7 8 5]) -> [7 7 7]", "(multfirst [7 2 9 1]) -> [7 7 7 7]", "(multfirst []) -> []", "(multfirst [2 8 4 5 5]) -> [2 2 2 2 2]", "(multfirst [3 9 6]) -> [3 3 3]", "(multfirst [6 4 0 5 0]) -> [6 6 6 6 6]", "(multfirst [9 0 0]) -> [9 9 9]", "(multfirst [7 7 8 5]) -> [7 7 7 7]", "(multfirst [3 9 9 0]) -> [3 3 3 3]", "(multfirst [3 0 1 3]) -> [3 3 3 3]", "(multfirst [8 8 5]) -> [8 8 8]", "(multfirst [5 6 0 0]) -> [5 5 5 5]", "(multfirst [3 3 9 6]) -> [3 3 3 3]", "(multfirst [8 0 2 1]) -> [8 8 8 8]", "(multfirst []) -> []", "(multfirst [5 6 5 0]) -> [5 5 5 5]", "(multfirst [7 0]) -> [7 7]", "(multfirst [6 6 2 7]) -> [6 6 6 6]", "(multfirst [6 4 8 8]) -> [6 6 6 6]", "(multfirst [3 3 7]) -> [3 3 3]", "(multfirst [0 5]) -> [0 0]", "(multfirst [3]) -> [3]", "(multfirst [0 4 5 7]) -> [0 0 0 0]", "(multfirst [2 3]) -> [2 2]", "(multfirst [3 0 3 6 2]) -> [3 3 3 3 3]", "(multfirst [8 1 2 2]) -> [8 8 8 8]", "(multfirst [4]) -> [4]", "(multfirst [4]) -> [4]", "(multfirst [5 4]) -> [5 5]", "(multfirst []) -> []"]}
{"time": 0.037271, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [7 9 4]) -> [7 7 7]", "(multfirst [4 7]) -> [4 4]", "(multfirst [4 5 3 8]) -> [4 4 4 4]", "(multfirst [6 3]) -> [6 6]", "(multfirst []) -> []", "(multfirst [1 0 0]) -> [1 1 1]", "(multfirst [6 1 0 2 6]) -> [6 6 6 6 6]", "(multfirst [8 0 0 4]) -> [8 8 8 8]", "(multfirst []) -> []", "(multfirst [3 9 6 3]) -> [3 3 3 3]", "(multfirst [1 0 3]) -> [1 1 1]", "(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst [7 2]) -> [7 7]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [4 0 9]) -> [4 4 4]", "(multfirst [3 3 4 3]) -> [3 3 3 3]", "(multfirst [2]) -> [2]", "(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst [1 5]) -> [1 1]", "(multfirst [1]) -> [1]", "(multfirst [8]) -> [8]", "(multfirst [5 7]) -> [5 5]", "(multfirst [1 7]) -> [1 1]", "(multfirst []) -> []", "(multfirst [6 1]) -> [6 6]", "(multfirst [2 0 1 7 7]) -> [2 2 2 2 2]", "(multfirst [3 2 0 4 6]) -> [3 3 3 3 3]", "(multfirst []) -> []", "(multfirst [4 4 9]) -> [4 4 4]", "(multfirst [7]) -> [7]", "(multfirst []) -> []", "(multfirst [3 7 2]) -> [3 3 3]", "(multfirst [7 7 5]) -> [7 7 7]", "(multfirst [2 9]) -> [2 2]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [2 6]) -> [2 2]", "(multfirst [9 4]) -> [9 9]", "(multfirst []) -> []", "(multfirst [3]) -> [3]", "(multfirst [7 2]) -> [7 7]", "(multfirst [2 6 2 0 5]) -> [2 2 2 2 2]", "(multfirst [0 3]) -> [0 0]", "(multfirst [7 8 9 1 6]) -> [7 7 7 7 7]", "(multfirst [2]) -> [2]"]}
{"time": 0.03528, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [5 5 3]) -> [5 5 5]", "(multfirst [6 7]) -> [6 6]", "(multfirst []) -> []", "(multfirst [5 8 9 5]) -> [5 5 5 5]", "(multfirst [1 9 5 9]) -> [1 1 1 1]", "(multfirst [8 3]) -> [8 8]", "(multfirst []) -> []", "(multfirst [8 2 5 3]) -> [8 8 8 8]", "(multfirst [8 9]) -> [8 8]", "(multfirst [6 8 2]) -> [6 6 6]", "(multfirst [4 2 7 4]) -> [4 4 4 4]", "(multfirst []) -> []", "(multfirst [5 4 4 6 3]) -> [5 5 5 5 5]", "(multfirst [7 4 0 0 3]) -> [7 7 7 7 7]", "(multfirst [3]) -> [3]", "(multfirst []) -> []", "(multfirst [9 7 7 9]) -> [9 9 9 9]", "(multfirst []) -> []", "(multfirst [4]) -> [4]", "(multfirst [5]) -> [5]", "(multfirst [4 4]) -> [4 4]", "(multfirst [0 8 4 8 6]) -> [0 0 0 0 0]", "(multfirst [5]) -> [5]", "(multfirst [7 8]) -> [7 7]", "(multfirst [7 1]) -> [7 7]", "(multfirst [1 6]) -> [1 1]", "(multfirst [7 5 4 0 9]) -> [7 7 7 7 7]", "(multfirst [0 2 3 0 7]) -> [0 0 0 0 0]", "(multfirst [4 6 3 1]) -> [4 4 4 4]", "(multfirst []) -> []", "(multfirst [9 6 1 4]) -> [9 9 9 9]", "(multfirst [9]) -> [9]", "(multfirst [3 4 0 5 2]) -> [3 3 3 3 3]", "(multfirst [9 0 4 0 8]) -> [9 9 9 9 9]", "(multfirst []) -> []", "(multfirst [5 6]) -> [5 5]", "(multfirst [5 0]) -> [5 5]", "(multfirst [4 8 3 4]) -> [4 4 4 4]", "(multfirst [5 2 0 3 9]) -> [5 5 5 5 5]", "(multfirst [0 7 6 4 2]) -> [0 0 0 0 0]", "(multfirst [0 6 4]) -> [0 0 0]", "(multfirst [8 5 1 3]) -> [8 8 8 8]", "(multfirst [5 9 6 1]) -> [5 5 5 5]", "(multfirst [7]) -> [7]", "(multfirst [8 6 0 9 7]) -> [8 8 8 8 8]", "(multfirst [6 2 5 9]) -> [6 6 6 6]", "(multfirst [5]) -> [5]", "(multfirst [0]) -> [0]", "(multfirst []) -> []"]}
{"time": 0.032144, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [3 9 8 5 0]) -> [3 3 3 3 3]", "(multfirst [6 3]) -> [6 6]", "(multfirst [5 7 7]) -> [5 5 5]", "(multfirst []) -> []", "(multfirst [4 5 4 6]) -> [4 4 4 4]", "(multfirst [9 3 9]) -> [9 9 9]", "(multfirst [8 7 0 4 5]) -> [8 8 8 8 8]", "(multfirst [3]) -> [3]", "(multfirst [1 8 1 6]) -> [1 1 1 1]", "(multfirst [0 0 0 0]) -> [0 0 0 0]", "(multfirst [2 8]) -> [2 2]", "(multfirst [3 8 6 5]) -> [3 3 3 3]", "(multfirst [7 7 7]) -> [7 7 7]", "(multfirst []) -> []", "(multfirst [8 2 4 3]) -> [8 8 8 8]", "(multfirst [2 1]) -> [2 2]", "(multfirst [0 1 1 9]) -> [0 0 0 0]", "(multfirst [1 6 9 5]) -> [1 1 1 1]", "(multfirst []) -> []", "(multfirst [1 4 9]) -> [1 1 1]", "(multfirst [2]) -> [2]", "(multfirst [7 2 5]) -> [7 7 7]", "(multfirst [2 6 7 0 1]) -> [2 2 2 2 2]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [4]) -> [4]", "(multfirst [3 0 3 4]) -> [3 3 3 3]", "(multfirst [3]) -> [3]", "(multfirst [4 1 7 8]) -> [4 4 4 4]", "(multfirst [0 3]) -> [0 0]", "(multfirst [9 5 3]) -> [9 9 9]", "(multfirst [1]) -> [1]", "(multfirst [2 2 9 2]) -> [2 2 2 2]", "(multfirst [5 1 2 0 1]) -> [5 5 5 5 5]", "(multfirst [6 8]) -> [6 6]", "(multfirst [8 1 0]) -> [8 8 8]", "(multfirst [3]) -> [3]", "(multfirst [1 5 1 3 3]) -> [1 1 1 1 1]", "(multfirst [5 2 3 5 1]) -> [5 5 5 5 5]", "(multfirst [8 0 3 2]) -> [8 8 8 8]", "(multfirst [2 5 0 7 1]) -> [2 2 2 2 2]", "(multfirst [8 6 0 5]) -> [8 8 8 8]", "(multfirst [8]) -> [8]", "(multfirst [6 0 5]) -> [6 6 6]", "(multfirst [6]) -> [6]", "(multfirst [0]) -> [0]", "(multfirst []) -> []", "(multfirst []) -> []"]}
{"time": 0.032123, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [8 2]) -> [8 8]", "(multfirst [4 0 5 3]) -> [4 4 4 4]", "(multfirst [0 2]) -> [0 0]", "(multfirst [4 0 6 2 3]) -> [4 4 4 4 4]", "(multfirst [9 5 7 9 4]) -> [9 9 9 9 9]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [8 8 7 2 1]) -> [8 8 8 8 8]", "(multfirst []) -> []", "(multfirst [7]) -> [7]", "(multfirst [1 6 4 7]) -> [1 1 1 1]", "(multfirst [0 1 0 3]) -> [0 0 0 0]", "(multfirst [0 5 4 0 4]) -> [0 0 0 0 0]", "(multfirst [2]) -> [2]", "(multfirst [8 1 4 4]) -> [8 8 8 8]", "(multfirst [6 4 2 0 1]) -> [6 6 6 6 6]", "(multfirst [6 4 4]) -> [6 6 6]", "(multfirst [3 7 1 5 9]) -> [3 3 3 3 3]", "(multfirst [2 1 2 2 8]) -> [2 2 2 2 2]", "(multfirst [7 1 0]) -> [7 7 7]", "(multfirst [0 4 5]) -> [0 0 0]", "(multfirst [6]) -> [6]", "(multfirst [0]) -> [0]", "(multfirst [4]) -> [4]", "(multfirst [2]) -> [2]", "(multfirst [1 1 3 3]) -> [1 1 1 1]", "(multfirst [3 8]) -> [3 3]", "(multfirst [0]) -> [0]", "(multfirst [7 8 0 8 6]) -> [7 7 7 7 7]", "(multfirst [9]) -> [9]", "(multfirst [6 4 1 6 9]) -> [6 6 6 6 6]", "(multfirst []) -> []", "(multfirst [7 7 2 1]) -> [7 7 7 7]", "(multfirst [1 8 3 3]) -> [1 1 1 1]", "(multfirst [9 9 1 0]) -> [9 9 9 9]", "(multfirst [9 4 8]) -> [9 9 9]", "(multfirst [3 1 9 4 1]) -> [3 3 3 3 3]", "(multfirst [2 3 4]) -> [2 2 2]", "(multfirst [2 3 9 6]) -> [2 2 2 2]", "(multfirst [6 6]) -> [6 6]", "(multfirst [2 2 2 2 6]) -> [2 2 2 2 2]", "(multfirst [8 7]) -> [8 8]", "(multfirst [8 5]) -> [8 8]", "(multfirst [3 7 7 3 0]) -> [3 3 3 3 3]", "(multfirst [4]) -> [4]", "(multfirst [8 4]) -> [8 8]", "(multfirst [5 3]) -> [5 5]", "(multfirst [8]) -> [8]", "(multfirst [9 9]) -> [9 9]"]}
{"time": 0.033439, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [7]) -> [7]", "(multfirst []) -> []", "(multfirst [7 9 9 2]) -> [7 7 7 7]", "(multfirst [7 4 7]) -> [7 7 7]", "(multfirst [0]) -> [0]", "(multfirst [7 8 2]) -> [7 7 7]", "(multfirst [9 2 8 2]) -> [9 9 9 9]", "(multfirst [1 0 7]) -> [1 1 1]", "(multfirst [6 2 0 8 5]) -> [6 6 6 6 6]", "(multfirst [0 9 3 9]) -> [0 0 0 0]", "(multfirst [1 2 4 6]) -> [1 1 1 1]", "(multfirst [3 6]) -> [3 3]", "(multfirst [4 1 8 7 0]) -> [4 4 4 4 4]", "(multfirst [8]) -> [8]", "(multfirst [1 2 9 1]) -> [1 1 1 1]", "(multfirst [9 9 1 0 2]) -> [9 9 9 9 9]", "(multfirst [6 3 7]) -> [6 6 6]", "(multfirst [9 9 9 2 3]) -> [9 9 9 9 9]", "(multfirst [4 6 2 2 7]) -> [4 4 4 4 4]", "(multfirst []) -> []", "(multfirst [4 7 3 9 7]) -> [4 4 4 4 4]", "(multfirst []) -> []", "(multfirst [4 9 8]) -> [4 4 4]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7 6 5 5 6]) -> [7 7 7 7 7]", "(multfirst [4 7 2]) -> [4 4 4]", "(multfirst [6 3]) -> [6 6]", "(multfirst [6 6 4 2]) -> [6 6 6 6]", "(multfirst [9 8 0]) -> [9 9 9]", "(multfirst []) -> []", "(multfirst [4 8]) -> [4 4]", "(multfirst [9 4 6 2 4]) -> [9 9 9 9 9]", "(multfirst [3 8]) -> [3 3]", "(multfirst [2 3 5 2]) -> [2 2 2 2]", "(multfirst []) -> []", "(multfirst [8 3]) -> [8 8]", "(multfirst [7 9]) -> [7 7]", "(multfirst [0 3 4]) -> [0 0 0]", "(multfirst [7 4 5 8 7]) -> [7 7 7 7 7]", "(multfirst [5 7 9]) -> [5 5 5]", "(multfirst [9 4 5]) -> [9 9 9]", "(multfirst [4 6 9 6 6]) -> [4 4 4 4 4]", "(multfirst [7 1 9]) -> [7 7 7]", "(multfirst [7 9 3]) -> [7 7 7]", "(multfirst [2 1 2]) -> [2 2 2]", "(multfirst [8 3 4 3]) -> [8 8 8 8]", "(multfirst [0 2 7 6]) -> [0 0 0 0]"]}
{"time": 0.045904, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst []) -> []", "(multfirst [8 4 1 8 0]) -> [8 8 8 8 8]", "(multfirst [1 7 0]) -> [1 1 1]", "(multfirst [9 9 0 1 4]) -> [9 9 9 9 9]", "(multfirst [6 9 0 5]) -> [6 6 6 6]", "(multfirst [0 7]) -> [0 0]", "(multfirst [1 3 2 4 8]) -> [1 1 1 1 1]", "(multfirst [2 0 8 9]) -> [2 2 2 2]", "(multfirst [4]) -> [4]", "(multfirst [0]) -> [0]", "(multfirst [2 2]) -> [2 2]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [9 8 8 6 2]) -> [9 9 9 9 9]", "(multfirst [0 0 8 7 4]) -> [0 0 0 0 0]", "(multfirst [0]) -> [0]", "(multfirst []) -> []", "(multfirst [1 9 8]) -> [1 1 1]", "(multfirst [2]) -> [2]", "(multfirst [3 1 3 5]) -> [3 3 3 3]", "(multfirst [1 4 5 3]) -> [1 1 1 1]", "(multfirst [2 2 0 9]) -> [2 2 2 2]", "(multfirst [5 6 9 4]) -> [5 5 5 5]", "(multfirst [9 6 4]) -> [9 9 9]", "(multfirst [7 0 5 0 7]) -> [7 7 7 7 7]", "(multfirst [1 0 8 4]) -> [1 1 1 1]", "(multfirst [7 0 3 1 5]) -> [7 7 7 7 7]", "(multfirst []) -> []", "(multfirst [4 6 5]) -> [4 4 4]", "(multfirst [8 1 8 3]) -> [8 8 8 8]", "(multfirst [5 0 0 7 2]) -> [5 5 5 5 5]", "(multfirst [9 2 5 0]) -> [9 9 9 9]", "(multfirst [6]) -> [6]", "(multfirst [8 7 0 4]) -> [8 8 8 8]", "(multfirst [9 9 4 0 1]) -> [9 9 9 9 9]", "(multfirst [3 6 7]) -> [3 3 3]", "(multfirst [8]) -> [8]", "(multfirst [5]) -> [5]", "(multfirst [4 4 6 2]) -> [4 4 4 4]", "(multfirst [2 0 5 8 1]) -> [2 2 2 2 2]", "(multfirst [5 8 1]) -> [5 5 5]", "(multfirst [1]) -> [1]", "(multfirst [4]) -> [4]", "(multfirst [9 7 8 7 8]) -> [9 9 9 9 9]", "(multfirst [0]) -> [0]", "(multfirst [8 6]) -> [8 8]", "(multfirst [1 8]) -> [1 1]"]}
{"time": 0.028401, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [7 1 3 2 6]) -> [7 7 7 7 7]", "(multfirst [3 2]) -> [3 3]", "(multfirst []) -> []", "(multfirst [6 3]) -> [6 6]", "(multfirst [9 2 0 4]) -> [9 9 9 9]", "(multfirst []) -> []", "(multfirst [8 8 1 3 8]) -> [8 8 8 8 8]", "(multfirst []) -> []", "(multfirst [6]) -> [6]", "(multfirst []) -> []", "(multfirst [1 9 7 1 5]) -> [1 1 1 1 1]", "(multfirst [5 4 3]) -> [5 5 5]", "(multfirst [7]) -> [7]", "(multfirst [4 5]) -> [4 4]", "(multfirst [8 3 6 8]) -> [8 8 8 8]", "(multfirst [3]) -> [3]", "(multfirst [3 9 4 5]) -> [3 3 3 3]", "(multfirst [6 9]) -> [6 6]", "(multfirst [9 0 5 7]) -> [9 9 9 9]", "(multfirst [4 7 4 7 2]) -> [4 4 4 4 4]", "(multfirst [5 9 1 5 6]) -> [5 5 5 5 5]", "(multfirst [7 3 9 2 4]) -> [7 7 7 7 7]", "(multfirst [4 5 8 3]) -> [4 4 4 4]", "(multfirst [9]) -> [9]", "(multfirst [7 0 3 9 9]) -> [7 7 7 7 7]", "(multfirst []) -> []", "(multfirst [6 9 3 1 7]) -> [6 6 6 6 6]", "(multfirst [5 7]) -> [5 5]", "(multfirst [2 8]) -> [2 2]", "(multfirst [4]) -> [4]", "(multfirst [1 5 9]) -> [1 1 1]", "(multfirst [6]) -> [6]", "(multfirst [4]) -> [4]", "(multfirst [8 1 5]) -> [8 8 8]", "(multfirst [5 1 0 5 0]) -> [5 5 5 5 5]", "(multfirst [5 3]) -> [5 5]", "(multfirst [4 3 8 4]) -> [4 4 4 4]", "(multfirst [2 3 0 8]) -> [2 2 2 2]", "(multfirst [1 8]) -> [1 1]", "(multfirst [7 3 8 6 0]) -> [7 7 7 7 7]", "(multfirst [6 4 8]) -> [6 6 6]", "(multfirst [5 8 9]) -> [5 5 5]", "(multfirst []) -> []", "(multfirst [5]) -> [5]", "(multfirst [5 0 9 5 1]) -> [5 5 5 5 5]", "(multfirst [2 5 8 7]) -> [2 2 2 2]", "(multfirst [2]) -> [2]", "(multfirst [5 7]) -> [5 5]", "(multfirst [0]) -> [0]"]}
{"time": 0.040826, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [2 2 3 4 0]) -> [2 2 2 2 2]", "(multfirst [8 3 5]) -> [8 8 8]", "(multfirst [8 1 4 2]) -> [8 8 8 8]", "(multfirst [1 5]) -> [1 1]", "(multfirst []) -> []", "(multfirst [2 8 7]) -> [2 2 2]", "(multfirst [6 6 4 5]) -> [6 6 6 6]", "(multfirst [0 1 4]) -> [0 0 0]", "(multfirst [2]) -> [2]", "(multfirst [7]) -> [7]", "(multfirst [9 7]) -> [9 9]", "(multfirst [1]) -> [1]", "(multfirst [9 3 3]) -> [9 9 9]", "(multfirst [1 8]) -> [1 1]", "(multfirst [0]) -> [0]", "(multfirst [7 3 3]) -> [7 7 7]", "(multfirst [0 8 1]) -> [0 0 0]", "(multfirst [3 6 2 9]) -> [3 3 3 3]", "(multfirst []) -> []", "(multfirst [1 1 5 2 9]) -> [1 1 1 1 1]", "(multfirst [7 4 8]) -> [7 7 7]", "(multfirst [3 5]) -> [3 3]", "(multfirst [1 0 8 5]) -> [1 1 1 1]", "(multfirst [9 1 6 2 4]) -> [9 9 9 9 9]", "(multfirst [7 0]) -> [7 7]", "(multfirst [0]) -> [0]", "(multfirst [1]) -> [1]", "(multfirst [6 9 3 8 7]) -> [6 6 6 6 6]", "(multfirst [1]) -> [1]", "(multfirst [8 8 8 3 8]) -> [8 8 8 8 8]", "(multfirst [4 7]) -> [4 4]", "(multfirst [4]) -> [4]", "(multfirst [6 6 6 5]) -> [6 6 6 6]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [2 7 3 0 5]) -> [2 2 2 2 2]", "(multfirst []) -> []", "(multfirst [4 7 9 2]) -> [4 4 4 4]", "(multfirst []) -> []", "(multfirst [5 4]) -> [5 5]", "(multfirst [6 5 3]) -> [6 6 6]", "(multfirst []) -> []", "(multfirst [1 2 9]) -> [1 1 1]", "(multfirst []) -> []", "(multfirst [3 5 7]) -> [3 3 3]", "(multfirst [0]) -> [0]", "(multfirst [8 8]) -> [8 8]", "(multfirst [4]) -> [4]", "(multfirst [1 5 9 7]) -> [1 1 1 1]"]}
{"time": 0.042294, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [6]) -> [6]", "(multfirst [0 7]) -> [0 0]", "(multfirst [6]) -> [6]", "(multfirst [0 5 7]) -> [0 0 0]", "(multfirst [5 2]) -> [5 5]", "(multfirst [3 4 0]) -> [3 3 3]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [6 6 5 4 2]) -> [6 6 6 6 6]", "(multfirst [2 5 4 3 1]) -> [2 2 2 2 2]", "(multfirst [2 5 1 8 7]) -> [2 2 2 2 2]", "(multfirst [1]) -> [1]", "(multfirst [1 1 7]) -> [1 1 1]", "(multfirst [4 4]) -> [4 4]", "(multfirst [4]) -> [4]", "(multfirst [1 8]) -> [1 1]", "(multfirst [3 1]) -> [3 3]", "(multfirst []) -> []", "(multfirst [7 9 7 9]) -> [7 7 7 7]", "(multfirst [8 9 1]) -> [8 8 8]", "(multfirst [1 6 8]) -> [1 1 1]", "(multfirst [1 5 4]) -> [1 1 1]", "(multfirst [8 4]) -> [8 8]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [8 7]) -> [8 8]", "(multfirst [4]) -> [4]", "(multfirst [1]) -> [1]", "(multfirst [2 0 2]) -> [2 2 2]", "(multfirst [6 1 8 9 1]) -> [6 6 6 6 6]", "(multfirst [3 6]) -> [3 3]", "(multfirst [4 3 7 8 6]) -> [4 4 4 4 4]", "(multfirst [5 5 0 2]) -> [5 5 5 5]", "(multfirst [0 2]) -> [0 0]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [0 3]) -> [0 0]", "(multfirst [4 9 7]) -> [4 4 4]", "(multfirst [5 8 6]) -> [5 5 5]", "(multfirst [9 8 0 4 2]) -> [9 9 9 9 9]", "(multfirst [7 9 1]) -> [7 7 7]", "(multfirst []) -> []", "(multfirst [2 6]) -> [2 2]", "(multfirst [7 4]) -> [7 7]", "(multfirst [4 9 4]) -> [4 4 4]", "(multfirst [4 9 9 6]) -> [4 4 4 4]", "(multfirst [3]) -> [3]", "(multfirst []) -> []"]}
{"time": 0.030417, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [4]) -> [4]", "(multfirst [0 2 9 3]) -> [0 0 0 0]", "(multfirst []) -> []", "(multfirst [2 8 5]) -> [2 2 2]", "(multfirst [8 5 8 1 3]) -> [8 8 8 8 8]", "(multfirst [4]) -> [4]", "(multfirst [1 6 5 3 7]) -> [1 1 1 1 1]", "(multfirst [1 2]) -> [1 1]", "(multfirst [3 2 2 2 9]) -> [3 3 3 3 3]", "(multfirst [3 7]) -> [3 3]", "(multfirst [2 4 3]) -> [2 2 2]", "(multfirst [2 4 7]) -> [2 2 2]", "(multfirst [7 9 2 0 0]) -> [7 7 7 7 7]", "(multfirst []) -> []", "(multfirst [5]) -> [5]", "(multfirst [8 2 2]) -> [8 8 8]", "(multfirst [9 4 6]) -> [9 9 9]", "(multfirst [1 5 5]) -> [1 1 1]", "(multfirst [6 8 7 3 4]) -> [6 6 6 6 6]", "(multfirst [6 1 1 0]) -> [6 6 6 6]", "(multfirst [5 4 5]) -> [5 5 5]", "(multfirst [0 9 3 8 1]) -> [0 0 0 0 0]", "(multfirst []) -> []", "(multfirst [2 9]) -> [2 2]", "(multfirst [0 6 0]) -> [0 0 0]", "(multfirst [0 9]) -> [0 0]", "(multfirst [5 1]) -> [5 5]", "(multfirst [4 8 2 6 8]) -> [4 4 4 4 4]", "(multfirst [3 4 3 8 4]) -> [3 3 3 3 3]", "(multfirst [8]) -> [8]", "(multfirst [7 7 4 4]) -> [7 7 7 7]", "(multfirst [1 2 8 1]) -> [1 1 1 1]", "(multfirst []) -> []", "(multfirst [3 1]) -> [3 3]", "(multfirst [0 5 3]) -> [0 0 0]", "(multfirst [9 5 5 8 3]) -> [9 9 9 9 9]", "(multfirst [4]) -> [4]", "(multfirst [4 3]) -> [4 4]", "(multfirst [4 0 5 6 2]) -> [4 4 4 4 4]", "(multfirst [7 0 4 6 4]) -> [7 7 7 7 7]", "(multfirst [1 1]) -> [1 1]", "(multfirst [0 4 8 4]) -> [0 0 0 0]", "(multfirst [9 4 7]) -> [9 9 9]", "(multfirst [8 3 2]) -> [8 8 8]", "(multfirst [2 7]) -> [2 2]", "(multfirst [4 4 5 4]) -> [4 4 4 4]", "(multfirst [7 2 1 8 3]) -> [7 7 7 7 7]", "(multfirst []) -> []", "(multfirst [3 1 3 6]) -> [3 3 3 3]"]}
{"time": 0.031235, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [7 1 1 2]) -> [7 7 7 7]", "(multfirst [2 4 9]) -> [2 2 2]", "(multfirst [1]) -> [1]", "(multfirst [4 2]) -> [4 4]", "(multfirst []) -> []", "(multfirst [3 4]) -> [3 3]", "(multfirst [2]) -> [2]", "(multfirst [1 0]) -> [1 1]", "(multfirst [4 6]) -> [4 4]", "(multfirst [2 1 6 9 5]) -> [2 2 2 2 2]", "(multfirst [2 8]) -> [2 2]", "(multfirst [9 5]) -> [9 9]", "(multfirst [9 3 9 7 5]) -> [9 9 9 9 9]", "(multfirst [9 0]) -> [9 9]", "(multfirst [2 6]) -> [2 2]", "(multfirst [0 3 3]) -> [0 0 0]", "(multfirst [6 3 9 1 9]) -> [6 6 6 6 6]", "(multfirst [5]) -> [5]", "(multfirst [8 9 7 9]) -> [8 8 8 8]", "(multfirst [4 2 9 8]) -> [4 4 4 4]", "(multfirst [1 0 9 6 5]) -> [1 1 1 1 1]", "(multfirst [4]) -> [4]", "(multfirst [3 6 3]) -> [3 3 3]", "(multfirst []) -> []", "(multfirst [1 1 0]) -> [1 1 1]", "(multfirst [1]) -> [1]", "(multfirst [7 2 8 1 2]) -> [7 7 7 7 7]", "(multfirst [5]) -> [5]", "(multfirst [6 3 4]) -> [6 6 6]", "(multfirst [3 1 2 2]) -> [3 3 3 3]", "(multfirst [2 8]) -> [2 2]", "(multfirst []) -> []", "(multfirst [3 9 4 9 4]) -> [3 3 3 3 3]", "(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst [2 6 0]) -> [2 2 2]", "(multfirst [3 2 4]) -> [3 3 3]", "(multfirst [0 3 0 5 0]) -> [0 0 0 0 0]", "(multfirst [2 4 8 8]) -> [2 2 2 2]", "(multfirst [7 3 3 0 2]) -> [7 7 7 7 7]", "(multfirst [2 0 9]) -> [2 2 2]", "(multfirst []) -> []", "(multfirst [6]) -> [6]", "(multfirst [5 1]) -> [5 5]", "(multfirst [7 7 0 0 7]) -> [7 7 7 7 7]", "(multfirst [8 8 0]) -> [8 8 8]", "(multfirst [8 2 0]) -> [8 8 8]", "(multfirst [8 7 8]) -> [8 8 8]", "(multfirst [3]) -> [3]"]}
{"time": 0.027824, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [1 1]) -> [1 1]", "(multfirst [9 4 5 4]) -> [9 9 9 9]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [3 0 3 3 3]) -> [3 3 3 3 3]", "(multfirst [8 4 4]) -> [8 8 8]", "(multfirst [8 7 3]) -> [8 8 8]", "(multfirst [9 7 0]) -> [9 9 9]", "(multfirst [9 0]) -> [9 9]", "(multfirst [6 6]) -> [6 6]", "(multfirst [1 0]) -> [1 1]", "(multfirst [1 3]) -> [1 1]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [1 7 9 9]) -> [1 1 1 1]", "(multfirst [1]) -> [1]", "(multfirst [5 7 8]) -> [5 5 5]", "(multfirst [0 3 2 1]) -> [0 0 0 0]", "(multfirst [4]) -> [4]", "(multfirst [2 3 9 4]) -> [2 2 2 2]", "(multfirst [9 2 8 8]) -> [9 9 9 9]", "(multfirst [9 4]) -> [9 9]", "(multfirst [4 3 5 1]) -> [4 4 4 4]", "(multfirst [1 4 9 0]) -> [1 1 1 1]", "(multfirst [2 0]) -> [2 2]", "(multfirst [2 1]) -> [2 2]", "(multfirst [0 4 8 0 0]) -> [0 0 0 0 0]", "(multfirst [5 4]) -> [5 5]", "(multfirst [5 7 2 2 6]) -> [5 5 5 5 5]", "(multfirst [6 5]) -> [6 6]", "(multfirst [6]) -> [6]", "(multfirst [8 3 5 6]) -> [8 8 8 8]", "(multfirst [5 4 9 3]) -> [5 5 5 5]", "(multfirst []) -> []", "(multfirst [1 1]) -> [1 1]", "(multfirst [0 8]) -> [0 0]", "(multfirst [5 1]) -> [5 5]", "(multfirst [2 2]) -> [2 2]", "(multfirst [5 4 5 5 1]) -> [5 5 5 5 5]", "(multfirst [0 0 5 5]) -> [0 0 0 0]", "(multfirst [4]) -> [4]", "(multfirst [5 1]) -> [5 5]", "(multfirst [8 6 9]) -> [8 8 8]", "(multfirst [1 3 6 6 7]) -> [1 1 1 1 1]", "(multfirst [1 9 4 4]) -> [1 1 1 1]", "(multfirst [1 8]) -> [1 1]", "(multfirst [3 0]) -> [3 3]", "(multfirst [7 5 1 3 7]) -> [7 7 7 7 7]", "(multfirst [4]) -> [4]"]}
{"time": 0.04012, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [2 3 9 5]) -> [2 2 2 2]", "(multfirst [2 8]) -> [2 2]", "(multfirst [1 2 0 5 4]) -> [1 1 1 1 1]", "(multfirst [7 6 7 5]) -> [7 7 7 7]", "(multfirst [9 1 1 8]) -> [9 9 9 9]", "(multfirst [9]) -> [9]", "(multfirst [7 2 4 1 8]) -> [7 7 7 7 7]", "(multfirst [7]) -> [7]", "(multfirst [2]) -> [2]", "(multfirst [3 8 0 3 4]) -> [3 3 3 3 3]", "(multfirst [4 1 5 9]) -> [4 4 4 4]", "(multfirst [2]) -> [2]", "(multfirst [1]) -> [1]", "(multfirst [9 7]) -> [9 9]", "(multfirst []) -> []", "(multfirst [4]) -> [4]", "(multfirst [5]) -> [5]", "(multfirst []) -> []", "(multfirst [4 7]) -> [4 4]", "(multfirst [0]) -> [0]", "(multfirst [4]) -> [4]", "(multfirst [9 9 5 3 2]) -> [9 9 9 9 9]", "(multfirst [3 5]) -> [3 3]", "(multfirst [6 9 7 6]) -> [6 6 6 6]", "(multfirst []) -> []", "(multfirst [2]) -> [2]", "(multfirst [1]) -> [1]", "(multfirst [4]) -> [4]", "(multfirst [8 5 9]) -> [8 8 8]", "(multfirst [4 9]) -> [4 4]", "(multfirst [0 3 3 8]) -> [0 0 0 0]", "(multfirst [0 1 9 3]) -> [0 0 0 0]", "(multfirst [5 5 9 6 1]) -> [5 5 5 5 5]", "(multfirst [5 7]) -> [5 5]", "(multfirst [7 4 1 7 4]) -> [7 7 7 7 7]", "(multfirst [9 9 4 8 2]) -> [9 9 9 9 9]", "(multfirst [1 0 6]) -> [1 1 1]", "(multfirst [3 8 1]) -> [3 3 3]", "(multfirst [3 4]) -> [3 3]", "(multfirst [4 6 9 9 0]) -> [4 4 4 4 4]", "(multfirst [6 5 6]) -> [6 6 6]", "(multfirst [0 4]) -> [0 0]", "(multfirst [1 3 1 4 1]) -> [1 1 1 1 1]", "(multfirst [3 1 0 7]) -> [3 3 3 3]", "(multfirst [2 4 9 6]) -> [2 2 2 2]", "(multfirst [8 3]) -> [8 8]", "(multfirst [3 3 8 3]) -> [3 3 3 3]", "(multfirst [9 4]) -> [9 9]"]}
{"time": 0.036781, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [1]) -> [1]", "(multfirst [3 9 4 5 1]) -> [3 3 3 3 3]", "(multfirst [3 2 1 0 0]) -> [3 3 3 3 3]", "(multfirst [1 5 8 4 4]) -> [1 1 1 1 1]", "(multfirst [9 3 0]) -> [9 9 9]", "(multfirst [8 9 3 1 8]) -> [8 8 8 8 8]", "(multfirst [2 8 9]) -> [2 2 2]", "(multfirst [7 8]) -> [7 7]", "(multfirst [7 1 1 7]) -> [7 7 7 7]", "(multfirst []) -> []", "(multfirst [7 7]) -> [7 7]", "(multfirst [3 0 4 0 5]) -> [3 3 3 3 3]", "(multfirst [6 3]) -> [6 6]", "(multfirst [7 3 2 7]) -> [7 7 7 7]", "(multfirst [4]) -> [4]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [0 5]) -> [0 0]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [3 1 6 6]) -> [3 3 3 3]", "(multfirst [9 4 6]) -> [9 9 9]", "(multfirst []) -> []", "(multfirst [8 6 8]) -> [8 8 8]", "(multfirst [0 3 8 2 5]) -> [0 0 0 0 0]", "(multfirst [0 1]) -> [0 0]", "(multfirst [2]) -> [2]", "(multfirst [0 6 7 1]) -> [0 0 0 0]", "(multfirst [4 2 8]) -> [4 4 4]", "(multfirst [6 2 5]) -> [6 6 6]", "(multfirst [6 2 8 9 2]) -> [6 6 6 6 6]", "(multfirst [2 1 5 8 2]) -> [2 2 2 2 2]", "(multfirst [2 8]) -> [2 2]", "(multfirst [9 2 2 2]) -> [9 9 9 9]", "(multfirst []) -> []", "(multfirst [0 3 3 5 9]) -> [0 0 0 0 0]", "(multfirst [7 9 0]) -> [7 7 7]", "(multfirst [1 4]) -> [1 1]", "(multfirst [0 6]) -> [0 0]", "(multfirst [9 5 7]) -> [9 9 9]", "(multfirst []) -> []", "(multfirst [2 6]) -> [2 2]", "(multfirst []) -> []", "(multfirst [2 1 2]) -> [2 2 2]", "(multfirst [8 9 0]) -> [8 8 8]", "(multfirst [9]) -> [9]", "(multfirst [4]) -> [4]", "(multfirst [8 1]) -> [8 8]", "(multfirst [2 4 0 4]) -> [2 2 2 2]"]}
{"time": 0.050811, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [4 1]) -> [4 4]", "(multfirst [8 4]) -> [8 8]", "(multfirst [5 3 7 9 2]) -> [5 5 5 5 5]", "(multfirst []) -> []", "(multfirst [8 1]) -> [8 8]", "(multfirst []) -> []", "(multfirst [3 0 3 7]) -> [3 3 3 3]", "(multfirst [5 5 2 6]) -> [5 5 5 5]", "(multfirst []) -> []", "(multfirst [4 3]) -> [4 4]", "(multfirst [4 4 0]) -> [4 4 4]", "(multfirst [9 5 7 6]) -> [9 9 9 9]", "(multfirst [1 0 2 7]) -> [1 1 1 1]", "(multfirst [2 8]) -> [2 2]", "(multfirst [0]) -> [0]", "(multfirst [2]) -> [2]", "(multfirst [0]) -> [0]", "(multfirst [8 9 4 7 5]) -> [8 8 8 8 8]", "(multfirst [2 5 0 4 2]) -> [2 2 2 2 2]", "(multfirst [3]) -> [3]", "(multfirst []) -> []", "(multfirst [9 9]) -> [9 9]", "(multfirst []) -> []", "(multfirst [1 4 0 8 9]) -> [1 1 1 1 1]", "(multfirst [9 6 0 0]) -> [9 9 9 9]", "(multfirst [1 1 6 6]) -> [1 1 1 1]", "(multfirst [2 5 5 9]) -> [2 2 2 2]", "(multfirst [0 1 4]) -> [0 0 0]", "(multfirst [9 9 4 3]) -> [9 9 9 9]", "(multfirst [6 9 7 3 5]) -> [6 6 6 6 6]", "(multfirst [4 0 1 3 1]) -> [4 4 4 4 4]", "(multfirst [1 6 8]) -> [1 1 1]", "(multfirst [5 2 7 7 6]) -> [5 5 5 5 5]", "(multfirst []) -> []", "(multfirst [6 5 3 2]) -> [6 6 6 6]", "(multfirst [0 7 5 8 3]) -> [0 0 0 0 0]", "(multfirst [8 9 2 0 2]) -> [8 8 8 8 8]", "(multfirst []) -> []", "(multfirst [5 5 8]) -> [5 5 5]", "(multfirst [1 9]) -> [1 1]", "(multfirst [9 7 3 1 0]) -> [9 9 9 9 9]", "(multfirst [4 0 3 9 0]) -> [4 4 4 4 4]", "(multfirst [3 0 6 9 9]) -> [3 3 3 3 3]", "(multfirst [5 4 6]) -> [5 5 5]", "(multfirst [4 3 0 0 8]) -> [4 4 4 4 4]", "(multfirst [5 0]) -> [5 5]", "(multfirst [9]) -> [9]", "(multfirst [1 9]) -> [1 1]", "(multfirst [7 0]) -> [7 7]"]}
{"time": 0.026955, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [3 9 4]) -> [3 3 3]", "(multfirst [8 1]) -> [8 8]", "(multfirst [7 9 6 6]) -> [7 7 7 7]", "(multfirst [1]) -> [1]", "(multfirst [2 1 4 1 1]) -> [2 2 2 2 2]", "(multfirst [2 6 1]) -> [2 2 2]", "(multfirst []) -> []", "(multfirst [7 6 8]) -> [7 7 7]", "(multfirst [5 9]) -> [5 5]", "(multfirst [5 6 8 6 9]) -> [5 5 5 5 5]", "(multfirst [4 6]) -> [4 4]", "(multfirst [3 1 5 9]) -> [3 3 3 3]", "(multfirst [4]) -> [4]", "(multfirst [8]) -> [8]", "(multfirst [3]) -> [3]", "(multfirst [2]) -> [2]", "(multfirst [2 8 4 2]) -> [2 2 2 2]", "(multfirst [6]) -> [6]", "(multfirst [7]) -> [7]", "(multfirst [8]) -> [8]", "(multfirst [6 8]) -> [6 6]", "(multfirst [1 0 0]) -> [1 1 1]", "(multfirst []) -> []", "(multfirst [3]) -> [3]", "(multfirst []) -> []", "(multfirst [3 2 3 8 5]) -> [3 3 3 3 3]", "(multfirst [1]) -> [1]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [6]) -> [6]", "(multfirst []) -> []", "(multfirst [5]) -> [5]", "(multfirst [1]) -> [1]", "(multfirst [4 1 7]) -> [4 4 4]", "(multfirst [3]) -> [3]", "(multfirst [6 9 2 3]) -> [6 6 6 6]", "(multfirst [3 6 2 9 1]) -> [3 3 3 3 3]", "(multfirst [8 8]) -> [8 8]", "(multfirst [4 8 9 3]) -> [4 4 4 4]", "(multfirst [6]) -> [6]", "(multfirst [2]) -> [2]", "(multfirst [3]) -> [3]", "(multfirst [5]) -> [5]", "(multfirst [0 1 8 7 9]) -> [0 0 0 0 0]", "(multfirst []) -> []", "(multfirst [7 3 9 7 9]) -> [7 7 7 7 7]", "(multfirst [5]) -> [5]", "(multfirst [2 3]) -> [2 2]", "(multfirst [2 6 8]) -> [2 2 2]"]}
{"time": 0.037454, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [0 0]) -> [0 0]", "(multfirst [9 6 5 1 5]) -> [9 9 9 9 9]", "(multfirst [8 0 3]) -> [8 8 8]", "(multfirst [5 6]) -> [5 5]", "(multfirst [9 6 3 2 4]) -> [9 9 9 9 9]", "(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst [6 1 7]) -> [6 6 6]", "(multfirst [9 2 4]) -> [9 9 9]", "(multfirst [4]) -> [4]", "(multfirst []) -> []", "(multfirst [3]) -> [3]", "(multfirst [2 2 5 7 0]) -> [2 2 2 2 2]", "(multfirst [1]) -> [1]", "(multfirst [3 7 7 1 7]) -> [3 3 3 3 3]", "(multfirst [2 2 5 0 1]) -> [2 2 2 2 2]", "(multfirst [8 6 1 0 6]) -> [8 8 8 8 8]", "(multfirst []) -> []", "(multfirst [9 6 9]) -> [9 9 9]", "(multfirst [3]) -> [3]", "(multfirst [3]) -> [3]", "(multfirst []) -> []", "(multfirst [0 8 2 5 5]) -> [0 0 0 0 0]", "(multfirst [8 3 0]) -> [8 8 8]", "(multfirst [1 5]) -> [1 1]", "(multfirst [0 2 7 6]) -> [0 0 0 0]", "(multfirst []) -> []", "(multfirst [0 1]) -> [0 0]", "(multfirst [6 7]) -> [6 6]", "(multfirst [1]) -> [1]", "(multfirst [7 3]) -> [7 7]", "(multfirst []) -> []", "(multfirst [3 5 8 2 9]) -> [3 3 3 3 3]", "(multfirst [8 9 5 0]) -> [8 8 8 8]", "(multfirst [8 1 7]) -> [8 8 8]", "(multfirst [1 6 1 6]) -> [1 1 1 1]", "(multfirst [0]) -> [0]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [5 0]) -> [5 5]", "(multfirst [6]) -> [6]", "(multfirst [7 5 3]) -> [7 7 7]", "(multfirst [2 8]) -> [2 2]", "(multfirst [1 9 2 0]) -> [1 1 1 1]", "(multfirst [6 5]) -> [6 6]", "(multfirst [5 9 2]) -> [5 5 5]", "(multfirst [4 8 4 8]) -> [4 4 4 4]", "(multfirst [0 2 7]) -> [0 0 0]", "(multfirst [6 7]) -> [6 6]"]}
{"time": 0.042378, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [2 1 3 0 8]) -> [2 2 2 2 2]", "(multfirst [6]) -> [6]", "(multfirst [4 1 3 0]) -> [4 4 4 4]", "(multfirst [7 9 1]) -> [7 7 7]", "(multfirst [4 6 3 3 0]) -> [4 4 4 4 4]", "(multfirst [0 0 8]) -> [0 0 0]", "(multfirst [1]) -> [1]", "(multfirst []) -> []", "(multfirst [8 5 2]) -> [8 8 8]", "(multfirst [8 9 0 7]) -> [8 8 8 8]", "(multfirst [3 9]) -> [3 3]", "(multfirst []) -> []", "(multfirst [9 8]) -> [9 9]", "(multfirst [7 5 0 2]) -> [7 7 7 7]", "(multfirst [9 4 1 9]) -> [9 9 9 9]", "(multfirst [4 7 4 6 7]) -> [4 4 4 4 4]", "(multfirst [6 8]) -> [6 6]", "(multfirst [3 8]) -> [3 3]", "(multfirst [0 7 1 9]) -> [0 0 0 0]", "(multfirst [9]) -> [9]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [9 4 5 7]) -> [9 9 9 9]", "(multfirst []) -> []", "(multfirst [5 9 3]) -> [5 5 5]", "(multfirst [1 9 1 7 1]) -> [1 1 1 1 1]", "(multfirst [2 6 0 5]) -> [2 2 2 2]", "(multfirst [4 4 8 9]) -> [4 4 4 4]", "(multfirst [0 2]) -> [0 0]", "(multfirst [8 4]) -> [8 8]", "(multfirst [1 0 7 1]) -> [1 1 1 1]", "(multfirst [7 1 9]) -> [7 7 7]", "(multfirst [1 4]) -> [1 1]", "(multfirst [6 0 2 5]) -> [6 6 6 6]", "(multfirst [9 7 6 6 6]) -> [9 9 9 9 9]", "(multfirst [5]) -> [5]", "(multfirst [5 3 6 6 8]) -> [5 5 5 5 5]", "(multfirst []) -> []", "(multfirst [0 1]) -> [0 0]", "(multfirst [4 9 3 6 7]) -> [4 4 4 4 4]", "(multfirst []) -> []", "(multfirst [6 1 9 8]) -> [6 6 6 6]", "(multfirst []) -> []", "(multfirst [1 9 9 7 0]) -> [1 1 1 1 1]", "(multfirst [1 9 9 7]) -> [1 1 1 1]", "(multfirst [0 2 1]) -> [0 0 0]", "(multfirst [0 6 6]) -> [0 0 0]", "(multfirst [1 2 5]) -> [1 1 1]", "(multfirst [2 8]) -> [2 2]"]}
{"time": 0.039614, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [7 7 8]) -> [7 7 7]", "(multfirst []) -> []", "(multfirst [8 8 4]) -> [8 8 8]", "(multfirst []) -> []", "(multfirst [8]) -> [8]", "(multfirst [2 1 3 0 3]) -> [2 2 2 2 2]", "(multfirst []) -> []", "(multfirst [0 7 0 1 9]) -> [0 0 0 0 0]", "(multfirst [1 2 0 4]) -> [1 1 1 1]", "(multfirst [0 4 5 4 0]) -> [0 0 0 0 0]", "(multfirst [8 0 9 9]) -> [8 8 8 8]", "(multfirst [0 4]) -> [0 0]", "(multfirst [2 7 9]) -> [2 2 2]", "(multfirst []) -> []", "(multfirst [4 1 7 8 0]) -> [4 4 4 4 4]", "(multfirst [8]) -> [8]", "(multfirst [4 2]) -> [4 4]", "(multfirst [7 1]) -> [7 7]", "(multfirst []) -> []", "(multfirst [2 9 7 9]) -> [2 2 2 2]", "(multfirst []) -> []", "(multfirst [4 2 5 5]) -> [4 4 4 4]", "(multfirst [8]) -> [8]", "(multfirst [4 8]) -> [4 4]", "(multfirst [0 7 4 9 3]) -> [0 0 0 0 0]", "(multfirst [1 0 8 3]) -> [1 1 1 1]", "(multfirst [0 3 7 1 0]) -> [0 0 0 0 0]", "(multfirst [2 1 1 3 1]) -> [2 2 2 2 2]", "(multfirst [8 6 7 4]) -> [8 8 8 8]", "(multfirst [1 4]) -> [1 1]", "(multfirst []) -> []", "(multfirst [0 6 3 0 5]) -> [0 0 0 0 0]", "(multfirst [3 9]) -> [3 3]", "(multfirst [2 7 0 9]) -> [2 2 2 2]", "(multfirst [2 7 6 3 5]) -> [2 2 2 2 2]", "(multfirst [9 1 3 1]) -> [9 9 9 9]", "(multfirst [2]) -> [2]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [9]) -> [9]", "(multfirst [8 7 0]) -> [8 8 8]", "(multfirst [9]) -> [9]", "(multfirst [5 1]) -> [5 5]", "(multfirst []) -> []", "(multfirst [0 9 2 7 8]) -> [0 0 0 0 0]", "(multfirst [8 3 2]) -> [8 8 8]", "(multfirst [8 3 5]) -> [8 8 8]", "(multfirst []) -> []", "(multfirst [2 8 3]) -> [2 2 2]"]}
{"time": 0.03139, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [7 0 0 5]) -> [7 7 7 7]", "(multfirst [5 6]) -> [5 5]", "(multfirst [4]) -> [4]", "(multfirst [6 8 3 1]) -> [6 6 6 6]", "(multfirst [9 9]) -> [9 9]", "(multfirst [5 3 5 7 2]) -> [5 5 5 5 5]", "(multfirst [9 7 6]) -> [9 9 9]", "(multfirst [9]) -> [9]", "(multfirst [7 8 1 0]) -> [7 7 7 7]", "(multfirst [8]) -> [8]", "(multfirst [6 6 1 9 7]) -> [6 6 6 6 6]", "(multfirst [3 7 3 3]) -> [3 3 3 3]", "(multfirst [7 9 8 8 0]) -> [7 7 7 7 7]", "(multfirst [3 6 5 4 3]) -> [3 3 3 3 3]", "(multfirst [5 0 0]) -> [5 5 5]", "(multfirst []) -> []", "(multfirst [6 2]) -> [6 6]", "(multfirst [1 0 0 0]) -> [1 1 1 1]", "(multfirst [7 4]) -> [7 7]", "(multfirst [5]) -> [5]", "(multfirst []) -> []", "(multfirst [8 0 9 7 3]) -> [8 8 8 8 8]", "(multfirst [0 1 2 7]) -> [0 0 0 0]", "(multfirst [5 0]) -> [5 5]", "(multfirst [7 4 4 3 2]) -> [7 7 7 7 7]", "(multfirst []) -> []", "(multfirst [2 7 3]) -> [2 2 2]", "(multfirst [7 7 4]) -> [7 7 7]", "(multfirst [9]) -> [9]", "(multfirst [8 3 0]) -> [8 8 8]", "(multfirst [1]) -> [1]", "(multfirst [6]) -> [6]", "(multfirst [3 6]) -> [3 3]", "(multfirst [7 9 5 4]) -> [7 7 7 7]", "(multfirst [3 1 2 8]) -> [3 3 3 3]", "(multfirst [2 7]) -> [2 2]", "(multfirst [5 2 2 2 7]) -> [5 5 5 5 5]", "(multfirst [5 0 0 6 4]) -> [5 5 5 5 5]", "(multfirst [4 0 6 2 9]) -> [4 4 4 4 4]", "(multfirst [3]) -> [3]", "(multfirst [2 7 2]) -> [2 2 2]", "(multfirst [8 4]) -> [8 8]", "(multfirst [9 0]) -> [9 9]", "(multfirst []) -> []", "(multfirst [4 9]) -> [4 4]", "(multfirst [0 8 3 0 4]) -> [0 0 0 0 0]", "(multfirst []) -> []", "(multfirst []) -> []"]}
{"time": 0.030832, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [1 2 2 9]) -> [1 1 1 1]", "(multfirst [5 0 1 6]) -> [5 5 5 5]", "(multfirst [6 3]) -> [6 6]", "(multfirst []) -> []", "(multfirst [3 2 8 1]) -> [3 3 3 3]", "(multfirst []) -> []", "(multfirst [5 0 4 7]) -> [5 5 5 5]", "(multfirst [4 6]) -> [4 4]", "(multfirst [5 3 4]) -> [5 5 5]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [4]) -> [4]", "(multfirst [0 0 9]) -> [0 0 0]", "(multfirst [4 7 0 6]) -> [4 4 4 4]", "(multfirst [0 1 3]) -> [0 0 0]", "(multfirst [8 3 6 8 0]) -> [8 8 8 8 8]", "(multfirst []) -> []", "(multfirst [6 3]) -> [6 6]", "(multfirst [3 6 7 6]) -> [3 3 3 3]", "(multfirst [4 3 5 7 1]) -> [4 4 4 4 4]", "(multfirst []) -> []", "(multfirst [8]) -> [8]", "(multfirst [0 9 5]) -> [0 0 0]", "(multfirst [9]) -> [9]", "(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst [2]) -> [2]", "(multfirst [3 8 5 3 9]) -> [3 3 3 3 3]", "(multfirst [9 6]) -> [9 9]", "(multfirst [1 2 2]) -> [1 1 1]", "(multfirst [8 9 3]) -> [8 8 8]", "(multfirst []) -> []", "(multfirst [4 4 2 4]) -> [4 4 4 4]", "(multfirst [5 3 0]) -> [5 5 5]", "(multfirst [4 0 5]) -> [4 4 4]", "(multfirst [5 8]) -> [5 5]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [5 3 5 5 0]) -> [5 5 5 5 5]", "(multfirst [8 2 7 5]) -> [8 8 8 8]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [6 8 6]) -> [6 6 6]", "(multfirst [7]) -> [7]", "(multfirst []) -> []", "(multfirst [4 4]) -> [4 4]", "(multfirst [1 6 5 5]) -> [1 1 1 1]", "(multfirst [5 2]) -> [5 5]"]}
{"time": 0.027398, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [9]) -> [9]", "(multfirst []) -> []", "(multfirst [8]) -> [8]", "(multfirst [9 7 3 2 2]) -> [9 9 9 9 9]", "(multfirst [9 8 8 4 3]) -> [9 9 9 9 9]", "(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst [1 5 5]) -> [1 1 1]", "(multfirst [3 0 3 9 9]) -> [3 3 3 3 3]", "(multfirst []) -> []", "(multfirst [3 5]) -> [3 3]", "(multfirst []) -> []", "(multfirst [6 4 6 1 6]) -> [6 6 6 6 6]", "(multfirst [0]) -> [0]", "(multfirst [4]) -> [4]", "(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst [7 7 4]) -> [7 7 7]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [8 0]) -> [8 8]", "(multfirst [2 2]) -> [2 2]", "(multfirst [9 6 5 2 9]) -> [9 9 9 9 9]", "(multfirst [3 2 6 0]) -> [3 3 3 3]", "(multfirst [9 8 7 7]) -> [9 9 9 9]", "(multfirst [8 5 7 8 4]) -> [8 8 8 8 8]", "(multfirst [4 4 2]) -> [4 4 4]", "(multfirst [2 3]) -> [2 2]", "(multfirst [9 0 5 0 4]) -> [9 9 9 9 9]", "(multfirst [7]) -> [7]", "(multfirst []) -> []", "(multfirst [0 4 1]) -> [0 0 0]", "(multfirst [2 3 7]) -> [2 2 2]", "(multfirst [7 9 7 3]) -> [7 7 7 7]", "(multfirst [1 0]) -> [1 1]", "(multfirst [8 3]) -> [8 8]", "(multfirst [8]) -> [8]", "(multfirst [2 6 1 0 0]) -> [2 2 2 2 2]", "(multfirst [5 8 0]) -> [5 5 5]", "(multfirst [4]) -> [4]", "(multfirst [2]) -> [2]", "(multfirst [3 8 3 0 7]) -> [3 3 3 3 3]", "(multfirst [1 4 1]) -> [1 1 1]", "(multfirst [9 5 5 7 2]) -> [9 9 9 9 9]", "(multfirst [0 0 2 2]) -> [0 0 0 0]", "(multfirst [0 3]) -> [0 0]", "(multfirst [9]) -> [9]"]}
{"time": 0.028179, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [7 2 2]) -> [7 7 7]", "(multfirst [6 3 9]) -> [6 6 6]", "(multfirst [4 2 0 4 5]) -> [4 4 4 4 4]", "(multfirst [3 5 3 2]) -> [3 3 3 3]", "(multfirst [4 8 7]) -> [4 4 4]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [9 5 9]) -> [9 9 9]", "(multfirst []) -> []", "(multfirst [6 7 3]) -> [6 6 6]", "(multfirst [8]) -> [8]", "(multfirst [8 0 9 1]) -> [8 8 8 8]", "(multfirst [1 0 0]) -> [1 1 1]", "(multfirst [7 2 4 1 9]) -> [7 7 7 7 7]", "(multfirst [0 7 8 8]) -> [0 0 0 0]", "(multfirst [6 7 9 3 5]) -> [6 6 6 6 6]", "(multfirst [8 2 2 6]) -> [8 8 8 8]", "(multfirst [9 8 9]) -> [9 9 9]", "(multfirst [0 5 8]) -> [0 0 0]", "(multfirst [7]) -> [7]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [9 6 7 0 6]) -> [9 9 9 9 9]", "(multfirst [5 9 3]) -> [5 5 5]", "(multfirst [2 4 2 6]) -> [2 2 2 2]", "(multfirst [4 4 6]) -> [4 4 4]", "(multfirst [4 0]) -> [4 4]", "(multfirst [7 2 4]) -> [7 7 7]", "(multfirst [3 0]) -> [3 3]", "(multfirst [5 2 9 2 4]) -> [5 5 5 5 5]", "(multfirst [1 6 6]) -> [1 1 1]", "(multfirst [9 5 5 1]) -> [9 9 9 9]", "(multfirst [2 0 3]) -> [2 2 2]", "(multfirst [2]) -> [2]", "(multfirst [7 2 5 7 1]) -> [7 7 7 7 7]", "(multfirst []) -> []", "(multfirst [3 4 8]) -> [3 3 3]", "(multfirst [9 0 2]) -> [9 9 9]", "(multfirst [2 4]) -> [2 2]", "(multfirst []) -> []", "(multfirst [7 4 4 4 0]) -> [7 7 7 7 7]", "(multfirst [3 4 4]) -> [3 3 3]", "(multfirst [8 0 7]) -> [8 8 8]", "(multfirst [6 0 3 1 4]) -> [6 6 6 6 6]", "(multfirst [1 9 1 3]) -> [1 1 1 1]", "(multfirst [3 1 9 7]) -> [3 3 3 3]", "(multfirst []) -> []", "(multfirst [3 7 9]) -> [3 3 3]"]}
{"time": 0.03504, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [7 5]) -> [7 7]", "(multfirst [7 4]) -> [7 7]", "(multfirst [7 6 3 1 3]) -> [7 7 7 7 7]", "(multfirst [2 4 4 1 7]) -> [2 2 2 2 2]", "(multfirst [3 0 3 4 9]) -> [3 3 3 3 3]", "(multfirst [2 5 1 1 7]) -> [2 2 2 2 2]", "(multfirst [9 5 1 8 1]) -> [9 9 9 9 9]", "(multfirst [3]) -> [3]", "(multfirst [2 5 9 0 6]) -> [2 2 2 2 2]", "(multfirst [7 0]) -> [7 7]", "(multfirst [6 9 3]) -> [6 6 6]", "(multfirst [4 6]) -> [4 4]", "(multfirst [0 5]) -> [0 0]", "(multfirst [8 0 2 0]) -> [8 8 8 8]", "(multfirst [0 0 6 7 7]) -> [0 0 0 0 0]", "(multfirst []) -> []", "(multfirst [5 3 9 4]) -> [5 5 5 5]", "(multfirst [0 6 2 5 3]) -> [0 0 0 0 0]", "(multfirst [6 5 1 0 7]) -> [6 6 6 6 6]", "(multfirst []) -> []", "(multfirst [9 3 8 8 6]) -> [9 9 9 9 9]", "(multfirst [0]) -> [0]", "(multfirst [0]) -> [0]", "(multfirst [8 9 6 2 6]) -> [8 8 8 8 8]", "(multfirst [4]) -> [4]", "(multfirst [9 7 4]) -> [9 9 9]", "(multfirst [9]) -> [9]", "(multfirst [8 9 0 1 2]) -> [8 8 8 8 8]", "(multfirst [3 8]) -> [3 3]", "(multfirst [0 0 1 9 0]) -> [0 0 0 0 0]", "(multfirst [0 5 7 4 3]) -> [0 0 0 0 0]", "(multfirst [9]) -> [9]", "(multfirst [1 5 6 9]) -> [1 1 1 1]", "(multfirst [0 4 8]) -> [0 0 0]", "(multfirst [2 3 2 8]) -> [2 2 2 2]", "(multfirst [7]) -> [7]", "(multfirst [4 2]) -> [4 4]", "(multfirst [5 0]) -> [5 5]", "(multfirst [9]) -> [9]", "(multfirst [0 3 9]) -> [0 0 0]", "(multfirst []) -> []", "(multfirst [1 9 4 7 6]) -> [1 1 1 1 1]", "(multfirst []) -> []", "(multfirst [5 0]) -> [5 5]", "(multfirst []) -> []", "(multfirst [6]) -> [6]", "(multfirst [5]) -> [5]", "(multfirst [8 0 4 6]) -> [8 8 8 8]", "(multfirst [9]) -> [9]"]}
{"time": 0.028035, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [1 9 2 0 1]) -> [1 1 1 1 1]", "(multfirst [9]) -> [9]", "(multfirst [9 4]) -> [9 9]", "(multfirst [2]) -> [2]", "(multfirst [2 8 7 9]) -> [2 2 2 2]", "(multfirst [3 5 6 1 1]) -> [3 3 3 3 3]", "(multfirst [1 8 9 9]) -> [1 1 1 1]", "(multfirst [5 8 7 3]) -> [5 5 5 5]", "(multfirst [7 8 3]) -> [7 7 7]", "(multfirst [7 6 9]) -> [7 7 7]", "(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst [7 2]) -> [7 7]", "(multfirst [9 0 1 4]) -> [9 9 9 9]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [2 4 7 3 5]) -> [2 2 2 2 2]", "(multfirst [7 6]) -> [7 7]", "(multfirst [9 4]) -> [9 9]", "(multfirst [6]) -> [6]", "(multfirst []) -> []", "(multfirst [4 0 2]) -> [4 4 4]", "(multfirst [8]) -> [8]", "(multfirst [5 0]) -> [5 5]", "(multfirst []) -> []", "(multfirst [4]) -> [4]", "(multfirst [4 1 5]) -> [4 4 4]", "(multfirst [8 6 9 5 6]) -> [8 8 8 8 8]", "(multfirst [0 4 6]) -> [0 0 0]", "(multfirst [2]) -> [2]", "(multfirst [6]) -> [6]", "(multfirst [6 8]) -> [6 6]", "(multfirst [8]) -> [8]", "(multfirst [4]) -> [4]", "(multfirst [9]) -> [9]", "(multfirst []) -> []", "(multfirst [3 4]) -> [3 3]", "(multfirst [1 8 9 4 0]) -> [1 1 1 1 1]", "(multfirst [3 4 4 7 0]) -> [3 3 3 3 3]", "(multfirst [0]) -> [0]", "(multfirst []) -> []", "(multfirst [8 1 5 4 2]) -> [8 8 8 8 8]", "(multfirst [3]) -> [3]", "(multfirst [5 5 3 9]) -> [5 5 5 5]", "(multfirst [9]) -> [9]", "(multfirst [8 2 1 9]) -> [8 8 8 8]", "(multfirst [1]) -> [1]", "(multfirst [0 9 8 1]) -> [0 0 0 0]", "(multfirst []) -> []"]}
{"time": 0.028857, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [7 8]) -> [7 7]", "(multfirst [5 5 9 9 1]) -> [5 5 5 5 5]", "(multfirst [1]) -> [1]", "(multfirst [3 8 9]) -> [3 3 3]", "(multfirst [0 1 5]) -> [0 0 0]", "(multfirst [1 3 3]) -> [1 1 1]", "(multfirst []) -> []", "(multfirst [3 3 1 2]) -> [3 3 3 3]", "(multfirst [6 2]) -> [6 6]", "(multfirst []) -> []", "(multfirst [1 9 4 7]) -> [1 1 1 1]", "(multfirst [4 8]) -> [4 4]", "(multfirst []) -> []", "(multfirst [2 3 3 1]) -> [2 2 2 2]", "(multfirst [8 0 8]) -> [8 8 8]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [0 1 9]) -> [0 0 0]", "(multfirst [8 3 9 5 7]) -> [8 8 8 8 8]", "(multfirst [0]) -> [0]", "(multfirst [0]) -> [0]", "(multfirst [0 4]) -> [0 0]", "(multfirst [3]) -> [3]", "(multfirst []) -> []", "(multfirst [7 8 8 3 7]) -> [7 7 7 7 7]", "(multfirst []) -> []", "(multfirst [7 6 2 1]) -> [7 7 7 7]", "(multfirst [9 3]) -> [9 9]", "(multfirst [1 7 2 6 6]) -> [1 1 1 1 1]", "(multfirst [6 4]) -> [6 6]", "(multfirst [1 3 4]) -> [1 1 1]", "(multfirst [7]) -> [7]", "(multfirst [8 8]) -> [8 8]", "(multfirst [4]) -> [4]", "(multfirst []) -> []", "(multfirst [0 4 7]) -> [0 0 0]", "(multfirst [6 1 8 2 8]) -> [6 6 6 6 6]", "(multfirst [9 5]) -> [9 9]", "(multfirst [8 3 7]) -> [8 8 8]", "(multfirst []) -> []", "(multfirst [9 4 9 3]) -> [9 9 9 9]", "(multfirst [4 2]) -> [4 4]", "(multfirst [9 7 2 7 6]) -> [9 9 9 9 9]", "(multfirst [4 2]) -> [4 4]", "(multfirst [1]) -> [1]", "(multfirst [1 8 0 8 0]) -> [1 1 1 1 1]", "(multfirst [3 9]) -> [3 3]", "(multfirst [9]) -> [9]"]}
{"time": 0.028488, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [2 7 3]) -> [2 2 2]", "(multfirst []) -> []", "(multfirst [5 3 2 7]) -> [5 5 5 5]", "(multfirst [4 7 6 2]) -> [4 4 4 4]", "(multfirst [1]) -> [1]", "(multfirst []) -> []", "(multfirst [8 3 1 6]) -> [8 8 8 8]", "(multfirst [9 7]) -> [9 9]", "(multfirst [6]) -> [6]", "(multfirst [7]) -> [7]", "(multfirst [8 3 1 3 2]) -> [8 8 8 8 8]", "(multfirst [2 1]) -> [2 2]", "(multfirst [8 1]) -> [8 8]", "(multfirst [7 7 0]) -> [7 7 7]", "(multfirst [8]) -> [8]", "(multfirst [9 4]) -> [9 9]", "(multfirst [5 6 8 2]) -> [5 5 5 5]", "(multfirst [3 5 7 4]) -> [3 3 3 3]", "(multfirst []) -> []", "(multfirst [7 6 4]) -> [7 7 7]", "(multfirst [6 0 9 9 7]) -> [6 6 6 6 6]", "(multfirst [0 2 3 5]) -> [0 0 0 0]", "(multfirst [2 4 3 7]) -> [2 2 2 2]", "(multfirst [1 3 4]) -> [1 1 1]", "(multfirst [7 4]) -> [7 7]", "(multfirst []) -> []", "(multfirst [0 8 8]) -> [0 0 0]", "(multfirst [9 5]) -> [9 9]", "(multfirst [4]) -> [4]", "(multfirst [2 0 0 0]) -> [2 2 2 2]", "(multfirst [9]) -> [9]", "(multfirst [3 0]) -> [3 3]", "(multfirst [3 3 4 5 8]) -> [3 3 3 3 3]", "(multfirst []) -> []", "(multfirst [8 1 1 1]) -> [8 8 8 8]", "(multfirst [8 7]) -> [8 8]", "(multfirst [9 9]) -> [9 9]", "(multfirst [0 6 6]) -> [0 0 0]", "(multfirst [4 2 1 8]) -> [4 4 4 4]", "(multfirst [4 6 7 0 8]) -> [4 4 4 4 4]", "(multfirst [9]) -> [9]", "(multfirst [4 8 7]) -> [4 4 4]", "(multfirst []) -> []", "(multfirst [9 1 4 1]) -> [9 9 9 9]", "(multfirst [3 5 0]) -> [3 3 3]", "(multfirst [0 8]) -> [0 0]", "(multfirst [6 1 5 2 3]) -> [6 6 6 6 6]", "(multfirst [1 6]) -> [1 1]", "(multfirst []) -> []"]}
{"time": 0.03003, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [3 5 3 6 8]) -> [3 3 3 3 3]", "(multfirst [0 6 6]) -> [0 0 0]", "(multfirst [4 4 9 0]) -> [4 4 4 4]", "(multfirst [0 1]) -> [0 0]", "(multfirst [1 4 0 8]) -> [1 1 1 1]", "(multfirst [6 3 6]) -> [6 6 6]", "(multfirst []) -> []", "(multfirst [8]) -> [8]", "(multfirst []) -> []", "(multfirst [3 5 5 1 8]) -> [3 3 3 3 3]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [4 7]) -> [4 4]", "(multfirst [0 9 4 5]) -> [0 0 0 0]", "(multfirst [7 6 5]) -> [7 7 7]", "(multfirst [3]) -> [3]", "(multfirst [8 9 0 0 5]) -> [8 8 8 8 8]", "(multfirst [8 9]) -> [8 8]", "(multfirst [4]) -> [4]", "(multfirst []) -> []", "(multfirst [2 9]) -> [2 2]", "(multfirst []) -> []", "(multfirst [3 3 2 8]) -> [3 3 3 3]", "(multfirst [0 3 9 6]) -> [0 0 0 0]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [5 4 1 4]) -> [5 5 5 5]", "(multfirst [0 1 0 5]) -> [0 0 0 0]", "(multfirst []) -> []", "(multfirst [1 8 3]) -> [1 1 1]", "(multfirst [8]) -> [8]", "(multfirst [8 1 6 0 6]) -> [8 8 8 8 8]", "(multfirst [3 2 9 5 8]) -> [3 3 3 3 3]", "(multfirst [9 6 3 9]) -> [9 9 9 9]", "(multfirst [6]) -> [6]", "(multfirst [4 5 7 9 1]) -> [4 4 4 4 4]", "(multfirst [7]) -> [7]", "(multfirst [4 5 4]) -> [4 4 4]", "(multfirst [6 2]) -> [6 6]", "(multfirst [3 1 1 8 9]) -> [3 3 3 3 3]", "(multfirst [2]) -> [2]", "(multfirst [1 9 2]) -> [1 1 1]", "(multfirst [3 5 4]) -> [3 3 3]", "(multfirst [3 3 2 2 4]) -> [3 3 3 3 3]", "(multfirst [5 0 3 3 9]) -> [5 5 5 5 5]", "(multfirst [0]) -> [0]", "(multfirst [6 5 1 0]) -> [6 6 6 6]", "(multfirst []) -> []"]}
{"time": 0.039634, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [0 6 5 7 8]) -> [0 0 0 0 0]", "(multfirst []) -> []", "(multfirst [3 5 4 5 7]) -> [3 3 3 3 3]", "(multfirst [9 0 1]) -> [9 9 9]", "(multfirst [1]) -> [1]", "(multfirst [8 9 0 4]) -> [8 8 8 8]", "(multfirst [4 8 8]) -> [4 4 4]", "(multfirst []) -> []", "(multfirst [7 1 1]) -> [7 7 7]", "(multfirst [6 7 9 0 6]) -> [6 6 6 6 6]", "(multfirst [8 8 7 9 1]) -> [8 8 8 8 8]", "(multfirst [5 9]) -> [5 5]", "(multfirst []) -> []", "(multfirst [5 8 8 0]) -> [5 5 5 5]", "(multfirst [3 1 6]) -> [3 3 3]", "(multfirst []) -> []", "(multfirst [1 7]) -> [1 1]", "(multfirst [5 7 6 8 0]) -> [5 5 5 5 5]", "(multfirst [9 9 7 6 9]) -> [9 9 9 9 9]", "(multfirst [9 2 1 1]) -> [9 9 9 9]", "(multfirst [4 6 7 1 9]) -> [4 4 4 4 4]", "(multfirst [4 4]) -> [4 4]", "(multfirst []) -> []", "(multfirst [4]) -> [4]", "(multfirst [7]) -> [7]", "(multfirst [8]) -> [8]", "(multfirst [3]) -> [3]", "(multfirst [1]) -> [1]", "(multfirst [3]) -> [3]", "(multfirst [2]) -> [2]", "(multfirst [0 5]) -> [0 0]", "(multfirst [0 3 4 1 1]) -> [0 0 0 0 0]", "(multfirst [9]) -> [9]", "(multfirst [2 4 8 5]) -> [2 2 2 2]", "(multfirst [3 0 9 9 2]) -> [3 3 3 3 3]", "(multfirst [0 8 9 1 9]) -> [0 0 0 0 0]", "(multfirst [3 6 1]) -> [3 3 3]", "(multfirst [0 4 6]) -> [0 0 0]", "(multfirst []) -> []", "(multfirst [1 9 1]) -> [1 1 1]", "(multfirst []) -> []", "(multfirst [6]) -> [6]", "(multfirst [2 2 8 8]) -> [2 2 2 2]", "(multfirst [6 6]) -> [6 6]", "(multfirst [0 6]) -> [0 0]", "(multfirst [2 1]) -> [2 2]", "(multfirst [6 7 0 0 5]) -> [6 6 6 6 6]", "(multfirst [7 5 5]) -> [7 7 7]", "(multfirst [4 1 3]) -> [4 4 4]"]}
{"time": 0.031782, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [0 9]) -> [0 0]", "(multfirst []) -> []", "(multfirst [0]) -> [0]", "(multfirst [6 0 4 9]) -> [6 6 6 6]", "(multfirst [3 0 9]) -> [3 3 3]", "(multfirst [4 2 6]) -> [4 4 4]", "(multfirst [8]) -> [8]", "(multfirst []) -> []", "(multfirst [2 0 8]) -> [2 2 2]", "(multfirst [8 7 4]) -> [8 8 8]", "(multfirst [2 7 8 6]) -> [2 2 2 2]", "(multfirst [5 4 0 4]) -> [5 5 5 5]", "(multfirst [9]) -> [9]", "(multfirst []) -> []", "(multfirst [0 8 0 5]) -> [0 0 0 0]", "(multfirst [8 1 6 9 3]) -> [8 8 8 8 8]", "(multfirst [6 6]) -> [6 6]", "(multfirst []) -> []", "(multfirst [8 3 7 4 2]) -> [8 8 8 8 8]", "(multfirst [4 0]) -> [4 4]", "(multfirst [5 9 3]) -> [5 5 5]", "(multfirst [8 6]) -> [8 8]", "(multfirst [9]) -> [9]", "(multfirst [9 6]) -> [9 9]", "(multfirst []) -> []", "(multfirst [9 5 1]) -> [9 9 9]", "(multfirst [9 5 4]) -> [9 9 9]", "(multfirst []) -> []", "(multfirst [7 1]) -> [7 7]", "(multfirst []) -> []", "(multfirst [8 2]) -> [8 8]", "(multfirst [3]) -> [3]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [0 4 9 4]) -> [0 0 0 0]", "(multfirst [0]) -> [0]", "(multfirst [0 8]) -> [0 0]", "(multfirst [0]) -> [0]", "(multfirst [1]) -> [1]", "(multfirst []) -> []", "(multfirst [4 2 1]) -> [4 4 4]", "(multfirst []) -> []", "(multfirst [4 8 3]) -> [4 4 4]", "(multfirst [7 8]) -> [7 7]", "(multfirst [4 1 8 3 7]) -> [4 4 4 4 4]", "(multfirst [4 0 7]) -> [4 4 4]", "(multfirst [2 8 7]) -> [2 2 2]", "(multfirst [6 2 1]) -> [6 6 6]", "(multfirst [9]) -> [9]"]}
{"time": 0.028273, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [2 0]) -> [2 2]", "(multfirst [5 9 3 0 0]) -> [5 5 5 5 5]", "(multfirst []) -> []", "(multfirst [5 7 0]) -> [5 5 5]", "(multfirst [6 8 6 5]) -> [6 6 6 6]", "(multfirst [1 5]) -> [1 1]", "(multfirst [9 3 0]) -> [9 9 9]", "(multfirst [7 2 5 9 9]) -> [7 7 7 7 7]", "(multfirst [4 6 9 3]) -> [4 4 4 4]", "(multfirst [3 7 3 6 0]) -> [3 3 3 3 3]", "(multfirst [0 7]) -> [0 0]", "(multfirst [3]) -> [3]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [8 5 1 7]) -> [8 8 8 8]", "(multfirst [4 0 4]) -> [4 4 4]", "(multfirst [6 0]) -> [6 6]", "(multfirst [1 6]) -> [1 1]", "(multfirst [0]) -> [0]", "(multfirst [2 0 7 2 8]) -> [2 2 2 2 2]", "(multfirst [6 8 9 5]) -> [6 6 6 6]", "(multfirst [4]) -> [4]", "(multfirst [9 1]) -> [9 9]", "(multfirst []) -> []", "(multfirst [5 9 2 8 5]) -> [5 5 5 5 5]", "(multfirst [8 5 6 0 4]) -> [8 8 8 8 8]", "(multfirst [8 9 6 0]) -> [8 8 8 8]", "(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst [8 8]) -> [8 8]", "(multfirst [9 1 5]) -> [9 9 9]", "(multfirst [9]) -> [9]", "(multfirst [2 4 2 9]) -> [2 2 2 2]", "(multfirst [1 7 6 5 2]) -> [1 1 1 1 1]", "(multfirst [3 1]) -> [3 3]", "(multfirst [9]) -> [9]", "(multfirst [8 7 4 6 8]) -> [8 8 8 8 8]", "(multfirst [7 2 7 9 3]) -> [7 7 7 7 7]", "(multfirst [5 6 1]) -> [5 5 5]", "(multfirst [5 8 3 7]) -> [5 5 5 5]", "(multfirst [0 8]) -> [0 0]", "(multfirst [6]) -> [6]", "(multfirst [6 7 1]) -> [6 6 6]", "(multfirst [3]) -> [3]", "(multfirst [9 1]) -> [9 9]", "(multfirst [4 1 9]) -> [4 4 4]", "(multfirst []) -> []", "(multfirst [8 5 0 7]) -> [8 8 8 8]", "(multfirst [2 8 6 0]) -> [2 2 2 2]"]}
{"time": 0.032338, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [2 8 0 8 4]) -> [2 2 2 2 2]", "(multfirst [4 3]) -> [4 4]", "(multfirst [1 2 7 8 1]) -> [1 1 1 1 1]", "(multfirst []) -> []", "(multfirst [3 6 4 4 4]) -> [3 3 3 3 3]", "(multfirst [7 3 1]) -> [7 7 7]", "(multfirst [6 1 9]) -> [6 6 6]", "(multfirst []) -> []", "(multfirst [1 9 1 9]) -> [1 1 1 1]", "(multfirst [8 5 2]) -> [8 8 8]", "(multfirst [6 6 7]) -> [6 6 6]", "(multfirst []) -> []", "(multfirst [2 7 2 6 9]) -> [2 2 2 2 2]", "(multfirst []) -> []", "(multfirst [2]) -> [2]", "(multfirst []) -> []", "(multfirst [2 8 4 5]) -> [2 2 2 2]", "(multfirst [7 0]) -> [7 7]", "(multfirst [7 7 8 1]) -> [7 7 7 7]", "(multfirst [7 1 0]) -> [7 7 7]", "(multfirst [0 7 7]) -> [0 0 0]", "(multfirst [2 4 1]) -> [2 2 2]", "(multfirst [8 9 8 8 8]) -> [8 8 8 8 8]", "(multfirst [4 9 1 7 5]) -> [4 4 4 4 4]", "(multfirst [8 2 9]) -> [8 8 8]", "(multfirst [4 8 0]) -> [4 4 4]", "(multfirst [1 1 4]) -> [1 1 1]", "(multfirst [3]) -> [3]", "(multfirst [9 9 1 7]) -> [9 9 9 9]", "(multfirst [7 3 6 7]) -> [7 7 7 7]", "(multfirst []) -> []", "(multfirst [7]) -> [7]", "(multfirst [5 1 1 9 6]) -> [5 5 5 5 5]", "(multfirst [3 1]) -> [3 3]", "(multfirst [1 5 6 1 6]) -> [1 1 1 1 1]", "(multfirst [0 0 6 9]) -> [0 0 0 0]", "(multfirst [8 6 0 2 1]) -> [8 8 8 8 8]", "(multfirst [9 7 0 0 7]) -> [9 9 9 9 9]", "(multfirst []) -> []", "(multfirst [0 1 6]) -> [0 0 0]", "(multfirst [1 9]) -> [1 1]", "(multfirst []) -> []", "(multfirst [2 3 5 2]) -> [2 2 2 2]", "(multfirst [3 9 9 3 2]) -> [3 3 3 3 3]", "(multfirst [2 9 4 6 4]) -> [2 2 2 2 2]", "(multfirst [9 5 3 9]) -> [9 9 9 9]", "(multfirst [8 9 5 0]) -> [8 8 8 8]", "(multfirst [2]) -> [2]", "(multfirst [1]) -> [1]"]}
{"time": 0.037441, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [9 0 8]) -> [9 9 9]", "(multfirst [7 9 6 3]) -> [7 7 7 7]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [9 5]) -> [9 9]", "(multfirst [6 4]) -> [6 6]", "(multfirst [7 0 1 2 8]) -> [7 7 7 7 7]", "(multfirst [0 1 8 7]) -> [0 0 0 0]", "(multfirst [7 0]) -> [7 7]", "(multfirst [6 1 7 4 9]) -> [6 6 6 6 6]", "(multfirst [2 6 1 9]) -> [2 2 2 2]", "(multfirst [9 4]) -> [9 9]", "(multfirst [1 8]) -> [1 1]", "(multfirst [9 2 6 8]) -> [9 9 9 9]", "(multfirst []) -> []", "(multfirst [8 4 6 4 6]) -> [8 8 8 8 8]", "(multfirst [1 5 6 5]) -> [1 1 1 1]", "(multfirst [8 1]) -> [8 8]", "(multfirst [3 0 7 6 6]) -> [3 3 3 3 3]", "(multfirst [3 0 5 8 8]) -> [3 3 3 3 3]", "(multfirst [9 0 4]) -> [9 9 9]", "(multfirst [5]) -> [5]", "(multfirst [7 1 1]) -> [7 7 7]", "(multfirst [0 8 5 8]) -> [0 0 0 0]", "(multfirst [3 6 5 2 8]) -> [3 3 3 3 3]", "(multfirst []) -> []", "(multfirst [8 9 6 9]) -> [8 8 8 8]", "(multfirst [4 1 1 8 7]) -> [4 4 4 4 4]", "(multfirst []) -> []", "(multfirst [8]) -> [8]", "(multfirst []) -> []", "(multfirst [9 2]) -> [9 9]", "(multfirst [8 2 9 3]) -> [8 8 8 8]", "(multfirst [9 4]) -> [9 9]", "(multfirst [6 1]) -> [6 6]", "(multfirst []) -> []", "(multfirst [7 6 7 0]) -> [7 7 7 7]", "(multfirst [0]) -> [0]", "(multfirst []) -> []", "(multfirst [7 4 7 4 7]) -> [7 7 7 7 7]", "(multfirst [9 1 0 2 1]) -> [9 9 9 9 9]", "(multfirst []) -> []", "(multfirst [3 3 1]) -> [3 3 3]", "(multfirst []) -> []", "(multfirst [8 0]) -> [8 8]", "(multfirst [2 4 1 3]) -> [2 2 2 2]", "(multfirst [2 5 3 5 3]) -> [2 2 2 2 2]", "(multfirst [9 7 0]) -> [9 9 9]", "(multfirst [2 6 1 6 2]) -> [2 2 2 2 2]"]}
{"time": 0.041883, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [9 4 5 3 3]) -> [9 9 9 9 9]", "(multfirst [4 1 5 1]) -> [4 4 4 4]", "(multfirst [6 8 3 2 1]) -> [6 6 6 6 6]", "(multfirst [1]) -> [1]", "(multfirst [9 7 5]) -> [9 9 9]", "(multfirst [4]) -> [4]", "(multfirst [7 8 8 4 1]) -> [7 7 7 7 7]", "(multfirst [5 8 8 5 7]) -> [5 5 5 5 5]", "(multfirst [7 9]) -> [7 7]", "(multfirst [8 6 4]) -> [8 8 8]", "(multfirst [2 4 1 4 8]) -> [2 2 2 2 2]", "(multfirst [3]) -> [3]", "(multfirst [0 3 4 7]) -> [0 0 0 0]", "(multfirst [6]) -> [6]", "(multfirst [8 7]) -> [8 8]", "(multfirst [7 4]) -> [7 7]", "(multfirst []) -> []", "(multfirst [5]) -> [5]", "(multfirst [1 8 3 1]) -> [1 1 1 1]", "(multfirst [6 2]) -> [6 6]", "(multfirst []) -> []", "(multfirst [5 9 8 9]) -> [5 5 5 5]", "(multfirst [8 5 1 5 6]) -> [8 8 8 8 8]", "(multfirst [7 0 6 7 4]) -> [7 7 7 7 7]", "(multfirst [9 8]) -> [9 9]", "(multfirst []) -> []", "(multfirst [2 8 6 6]) -> [2 2 2 2]", "(multfirst [7]) -> [7]", "(multfirst [4 8 0 1]) -> [4 4 4 4]", "(multfirst [8 7 3 9 7]) -> [8 8 8 8 8]", "(multfirst [2 9 6 4 2]) -> [2 2 2 2 2]", "(multfirst [2]) -> [2]", "(multfirst [0 6 2 4 2]) -> [0 0 0 0 0]", "(multfirst [6 6 5]) -> [6 6 6]", "(multfirst [5 2]) -> [5 5]", "(multfirst [1 9 1 5 7]) -> [1 1 1 1 1]", "(multfirst [9 1 1]) -> [9 9 9]", "(multfirst []) -> []", "(multfirst [1 2]) -> [1 1]", "(multfirst [4 1 0]) -> [4 4 4]", "(multfirst [7 4 0]) -> [7 7 7]", "(multfirst [7 1 7 9]) -> [7 7 7 7]", "(multfirst []) -> []", "(multfirst [7]) -> [7]", "(multfirst [4]) -> [4]", "(multfirst [0 5]) -> [0 0]", "(multfirst [6 9 6 4]) -> [6 6 6 6]"]}
{"time": 0.034043, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [8 8 6]) -> [8 8 8]", "(multfirst [1]) -> [1]", "(multfirst [9 8 1]) -> [9 9 9]", "(multfirst [7]) -> [7]", "(multfirst [0 4]) -> [0 0]", "(multfirst [2 0 3 6]) -> [2 2 2 2]", "(multfirst []) -> []", "(multfirst [9 1 5 4]) -> [9 9 9 9]", "(multfirst [0 4 3 0 6]) -> [0 0 0 0 0]", "(multfirst [3]) -> [3]", "(multfirst []) -> []", "(multfirst [8 1 5]) -> [8 8 8]", "(multfirst [0 7 5]) -> [0 0 0]", "(multfirst [6 7 7 1 9]) -> [6 6 6 6 6]", "(multfirst [0 9 5 5 5]) -> [0 0 0 0 0]", "(multfirst [6 3 2]) -> [6 6 6]", "(multfirst [6 1 4]) -> [6 6 6]", "(multfirst [5 0]) -> [5 5]", "(multfirst [5 8]) -> [5 5]", "(multfirst [7]) -> [7]", "(multfirst [2]) -> [2]", "(multfirst []) -> []", "(multfirst [8]) -> [8]", "(multfirst [1 9 7 6]) -> [1 1 1 1]", "(multfirst [8 6]) -> [8 8]", "(multfirst [7 8 1 8]) -> [7 7 7 7]", "(multfirst [0 4 5]) -> [0 0 0]", "(multfirst [6]) -> [6]", "(multfirst [1 3 4 0 5]) -> [1 1 1 1 1]", "(multfirst [0 3 3]) -> [0 0 0]", "(multfirst [6 9]) -> [6 6]", "(multfirst [6 7 5 8]) -> [6 6 6 6]", "(multfirst []) -> []", "(multfirst [4 2 4 7 1]) -> [4 4 4 4 4]", "(multfirst [0 7 0]) -> [0 0 0]", "(multfirst []) -> []", "(multfirst [3 8 1 6 0]) -> [3 3 3 3 3]", "(multfirst [1]) -> [1]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [2 6]) -> [2 2]", "(multfirst []) -> []", "(multfirst [7 0 0 1]) -> [7 7 7 7]", "(multfirst [3 0 4 6]) -> [3 3 3 3]", "(multfirst [3 8 8 6]) -> [3 3 3 3]", "(multfirst [8]) -> [8]", "(multfirst [2]) -> [2]", "(multfirst [7 4 8 6]) -> [7 7 7 7]"]}
{"time": 0.030982, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [2 2 2 9 2]) -> [2 2 2 2 2]", "(multfirst [5 0]) -> [5 5]", "(multfirst [8 3]) -> [8 8]", "(multfirst [6 6 5 5]) -> [6 6 6 6]", "(multfirst [5 1 5 1]) -> [5 5 5 5]", "(multfirst [0 7 8 8]) -> [0 0 0 0]", "(multfirst [3 7 1]) -> [3 3 3]", "(multfirst [8 0]) -> [8 8]", "(multfirst [4]) -> [4]", "(multfirst [0 1 6]) -> [0 0 0]", "(multfirst [7 8 5 3 8]) -> [7 7 7 7 7]", "(multfirst [2 5 6 8 8]) -> [2 2 2 2 2]", "(multfirst [3 9 4 1 0]) -> [3 3 3 3 3]", "(multfirst [1]) -> [1]", "(multfirst [4 3 5]) -> [4 4 4]", "(multfirst []) -> []", "(multfirst [9]) -> [9]", "(multfirst [8 8]) -> [8 8]", "(multfirst [8 5 2 7 7]) -> [8 8 8 8 8]", "(multfirst [5 2 5]) -> [5 5 5]", "(multfirst [5 9 7]) -> [5 5 5]", "(multfirst [8 4]) -> [8 8]", "(multfirst [6]) -> [6]", "(multfirst []) -> []", "(multfirst [3 1 6]) -> [3 3 3]", "(multfirst [9]) -> [9]", "(multfirst [7 6]) -> [7 7]", "(multfirst [9 1]) -> [9 9]", "(multfirst [7 4 9 6 2]) -> [7 7 7 7 7]", "(multfirst [3]) -> [3]", "(multfirst [9 0 3]) -> [9 9 9]", "(multfirst [1 0 4]) -> [1 1 1]", "(multfirst [6 8 0 2 2]) -> [6 6 6 6 6]", "(multfirst [6 8 5 0 8]) -> [6 6 6 6 6]", "(multfirst [5]) -> [5]", "(multfirst [9 1 7 1 3]) -> [9 9 9 9 9]", "(multfirst [5 8]) -> [5 5]", "(multfirst [7 1 2 1 3]) -> [7 7 7 7 7]", "(multfirst [8 6 8]) -> [8 8 8]", "(multfirst [8 9]) -> [8 8]", "(multfirst [5 3]) -> [5 5]", "(multfirst [8 7]) -> [8 8]", "(multfirst [2 6]) -> [2 2]", "(multfirst [5 5 3 3]) -> [5 5 5 5]", "(multfirst []) -> []", "(multfirst [0 7 3 7]) -> [0 0 0 0]", "(multfirst [7 1 4 3 7]) -> [7 7 7 7 7]", "(multfirst [1]) -> [1]", "(multfirst []) -> []"]}
{"time": 0.030146, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [1 4 0 5]) -> [1 1 1 1]", "(multfirst [8 2 7 3 9]) -> [8 8 8 8 8]", "(multfirst []) -> []", "(multfirst [5 8 1 1]) -> [5 5 5 5]", "(multfirst [4 0]) -> [4 4]", "(multfirst [9 3]) -> [9 9]", "(multfirst [0]) -> [0]", "(multfirst [7 4]) -> [7 7]", "(multfirst [4 7 0]) -> [4 4 4]", "(multfirst [0]) -> [0]", "(multfirst [6]) -> [6]", "(multfirst [3 9 1 8]) -> [3 3 3 3]", "(multfirst [6 4 8]) -> [6 6 6]", "(multfirst [4 0]) -> [4 4]", "(multfirst [8]) -> [8]", "(multfirst [8 4 1 5]) -> [8 8 8 8]", "(multfirst [2 3 1]) -> [2 2 2]", "(multfirst []) -> []", "(multfirst [4 2]) -> [4 4]", "(multfirst [6 5 5 6]) -> [6 6 6 6]", "(multfirst [4 1 8 7]) -> [4 4 4 4]", "(multfirst [0 4 9]) -> [0 0 0]", "(multfirst [6]) -> [6]", "(multfirst [4 2]) -> [4 4]", "(multfirst [8 4 8 5]) -> [8 8 8 8]", "(multfirst [6 9 9 3]) -> [6 6 6 6]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [8 7]) -> [8 8]", "(multfirst [6 4 1 8 0]) -> [6 6 6 6 6]", "(multfirst [4 1]) -> [4 4]", "(multfirst [2 5 8 2]) -> [2 2 2 2]", "(multfirst [6 8 1]) -> [6 6 6]", "(multfirst [7]) -> [7]", "(multfirst [5 6]) -> [5 5]", "(multfirst []) -> []", "(multfirst [4 9 2 1 7]) -> [4 4 4 4 4]", "(multfirst [7 0 7 9]) -> [7 7 7 7]", "(multfirst [0 9 7 8 7]) -> [0 0 0 0 0]", "(multfirst [2]) -> [2]", "(multfirst [3]) -> [3]", "(multfirst [4]) -> [4]", "(multfirst [0 8 9 2 2]) -> [0 0 0 0 0]", "(multfirst []) -> []", "(multfirst [9 7]) -> [9 9]", "(multfirst [7]) -> [7]", "(multfirst [4 4]) -> [4 4]", "(multfirst [3 5 8]) -> [3 3 3]", "(multfirst [5]) -> [5]"]}
{"time": 0.028393, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [7 9 5 5 8]) -> [7 7 7 7 7]", "(multfirst [4 3]) -> [4 4]", "(multfirst [2 1 4 8]) -> [2 2 2 2]", "(multfirst [5 7 5 8]) -> [5 5 5 5]", "(multfirst [9]) -> [9]", "(multfirst [2 1 0 2]) -> [2 2 2 2]", "(multfirst [6 7]) -> [6 6]", "(multfirst [7 0 1]) -> [7 7 7]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [3 9 6 5 5]) -> [3 3 3 3 3]", "(multfirst [0]) -> [0]", "(multfirst [1 8 4 4 5]) -> [1 1 1 1 1]", "(multfirst [4]) -> [4]", "(multfirst []) -> []", "(multfirst [5 8 8]) -> [5 5 5]", "(multfirst [8 1]) -> [8 8]", "(multfirst [5 3 2]) -> [5 5 5]", "(multfirst [5 1 8 5]) -> [5 5 5 5]", "(multfirst [4 3 5 8 0]) -> [4 4 4 4 4]", "(multfirst [9 9 2 7]) -> [9 9 9 9]", "(multfirst [5 8 8]) -> [5 5 5]", "(multfirst [3 9 8 0 4]) -> [3 3 3 3 3]", "(multfirst [1 5 6 8]) -> [1 1 1 1]", "(multfirst [7 0 6 3 6]) -> [7 7 7 7 7]", "(multfirst [9 2]) -> [9 9]", "(multfirst [9 6 4 9]) -> [9 9 9 9]", "(multfirst [3 5]) -> [3 3]", "(multfirst [6]) -> [6]", "(multfirst [7 6 4]) -> [7 7 7]", "(multfirst [2 3 3 2 9]) -> [2 2 2 2 2]", "(multfirst [7 4]) -> [7 7]", "(multfirst [1 6 9 8 7]) -> [1 1 1 1 1]", "(multfirst []) -> []", "(multfirst [5 0 5]) -> [5 5 5]", "(multfirst [0 4 1 0 0]) -> [0 0 0 0 0]", "(multfirst [6 9 0 2]) -> [6 6 6 6]", "(multfirst [9]) -> [9]", "(multfirst [9 3]) -> [9 9]", "(multfirst [6 4 8]) -> [6 6 6]", "(multfirst [8 6 1 8 6]) -> [8 8 8 8 8]", "(multfirst [7 5]) -> [7 7]", "(multfirst [7 3 4]) -> [7 7 7]", "(multfirst [3]) -> [3]", "(multfirst [3 5]) -> [3 3]", "(multfirst [3 5 0 6]) -> [3 3 3 3]", "(multfirst [6 8 5 1]) -> [6 6 6 6]", "(multfirst [4 2 1]) -> [4 4 4]", "(multfirst [4 0 9 0 7]) -> [4 4 4 4 4]"]}
{"time": 0.039096, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [7 8]) -> [7 7]", "(multfirst [1 3 1]) -> [1 1 1]", "(multfirst [4 1]) -> [4 4]", "(multfirst [9 3 1 4 7]) -> [9 9 9 9 9]", "(multfirst [1 1 7 7 9]) -> [1 1 1 1 1]", "(multfirst []) -> []", "(multfirst [7 2 0]) -> [7 7 7]", "(multfirst [4 1 2 5]) -> [4 4 4 4]", "(multfirst []) -> []", "(multfirst [9]) -> [9]", "(multfirst [2]) -> [2]", "(multfirst [6 9 9 0 5]) -> [6 6 6 6 6]", "(multfirst [0 1 3 5]) -> [0 0 0 0]", "(multfirst [8 0 0 8 9]) -> [8 8 8 8 8]", "(multfirst [1 7 3 2 3]) -> [1 1 1 1 1]", "(multfirst [6 3 3 9 4]) -> [6 6 6 6 6]", "(multfirst [1 2]) -> [1 1]", "(multfirst [1 5 6 6 5]) -> [1 1 1 1 1]", "(multfirst [9 7 0 2]) -> [9 9 9 9]", "(multfirst [1 0 6 5]) -> [1 1 1 1]", "(multfirst [4 6 1 1 3]) -> [4 4 4 4 4]", "(multfirst [1 7 6]) -> [1 1 1]", "(multfirst [7 9]) -> [7 7]", "(multfirst [1 8 8]) -> [1 1 1]", "(multfirst []) -> []", "(multfirst [7 5 2]) -> [7 7 7]", "(multfirst []) -> []", "(multfirst [3]) -> [3]", "(multfirst [9 4]) -> [9 9]", "(multfirst [6 0 0]) -> [6 6 6]", "(multfirst [4 3 5]) -> [4 4 4]", "(multfirst [9 1 7 7 8]) -> [9 9 9 9 9]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [9]) -> [9]", "(multfirst [4 2 4]) -> [4 4 4]", "(multfirst []) -> []", "(multfirst [5]) -> [5]", "(multfirst [8 1 1 8 9]) -> [8 8 8 8 8]", "(multfirst [6 9 7 3]) -> [6 6 6 6]", "(multfirst []) -> []", "(multfirst [4]) -> [4]", "(multfirst [5 3]) -> [5 5]", "(multfirst [0]) -> [0]", "(multfirst [8]) -> [8]", "(multfirst [0 3 7 1]) -> [0 0 0 0]", "(multfirst [5 0 3 8 4]) -> [5 5 5 5 5]", "(multfirst [9]) -> [9]", "(multfirst [6 4 2]) -> [6 6 6]"]}
{"time": 0.038486, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [6 0 3 6 9]) -> [6 6 6 6 6]", "(multfirst [8]) -> [8]", "(multfirst [3 6]) -> [3 3]", "(multfirst [2 0 8]) -> [2 2 2]", "(multfirst [2 3 7 6 0]) -> [2 2 2 2 2]", "(multfirst [8 2]) -> [8 8]", "(multfirst []) -> []", "(multfirst [5 7 4 3 5]) -> [5 5 5 5 5]", "(multfirst []) -> []", "(multfirst [1 2 7]) -> [1 1 1]", "(multfirst [4]) -> [4]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [1 0 9]) -> [1 1 1]", "(multfirst [3 0 5]) -> [3 3 3]", "(multfirst [0 0 9]) -> [0 0 0]", "(multfirst [5 7 8 1 8]) -> [5 5 5 5 5]", "(multfirst [9 7 2 7]) -> [9 9 9 9]", "(multfirst [0 8 7]) -> [0 0 0]", "(multfirst [3 8 1 4]) -> [3 3 3 3]", "(multfirst [7 6 1 6]) -> [7 7 7 7]", "(multfirst [3 1 8 8 7]) -> [3 3 3 3 3]", "(multfirst [0 9 2]) -> [0 0 0]", "(multfirst [5]) -> [5]", "(multfirst []) -> []", "(multfirst [9 9 1 1 3]) -> [9 9 9 9 9]", "(multfirst [7 9 0]) -> [7 7 7]", "(multfirst [2 5 8 4]) -> [2 2 2 2]", "(multfirst [8 5]) -> [8 8]", "(multfirst [9 4 3 4 1]) -> [9 9 9 9 9]", "(multfirst [6 4 2]) -> [6 6 6]", "(multfirst [8 4]) -> [8 8]", "(multfirst [4 7 3 8]) -> [4 4 4 4]", "(multfirst [7]) -> [7]", "(multfirst []) -> []", "(multfirst [7]) -> [7]", "(multfirst [2]) -> [2]", "(multfirst [4]) -> [4]", "(multfirst [4]) -> [4]", "(multfirst [1 3]) -> [1 1]", "(multfirst []) -> []", "(multfirst [8]) -> [8]", "(multfirst [3]) -> [3]", "(multfirst [3 8]) -> [3 3]", "(multfirst []) -> []", "(multfirst [4 8 9 1]) -> [4 4 4 4]", "(multfirst []) -> []", "(multfirst [2 9]) -> [2 2]", "(multfirst []) -> []"]}
{"time": 0.04104, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [6 0]) -> [6 6]", "(multfirst [7 8 7]) -> [7 7 7]", "(multfirst [8 7 6]) -> [8 8 8]", "(multfirst [4 4 3 8 1]) -> [4 4 4 4 4]", "(multfirst [8 0 9 5 4]) -> [8 8 8 8 8]", "(multfirst []) -> []", "(multfirst [7 6]) -> [7 7]", "(multfirst [8 7 5]) -> [8 8 8]", "(multfirst [4]) -> [4]", "(multfirst [6 8 6 6 8]) -> [6 6 6 6 6]", "(multfirst [7 2 3 5]) -> [7 7 7 7]", "(multfirst [3]) -> [3]", "(multfirst [1]) -> [1]", "(multfirst [3 1 6]) -> [3 3 3]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [8]) -> [8]", "(multfirst []) -> []", "(multfirst [8 4]) -> [8 8]", "(multfirst [6 6 1]) -> [6 6 6]", "(multfirst [5 5 7 9 4]) -> [5 5 5 5 5]", "(multfirst [8]) -> [8]", "(multfirst [3 7]) -> [3 3]", "(multfirst []) -> []", "(multfirst [4 2 4]) -> [4 4 4]", "(multfirst [3 2 4 5 1]) -> [3 3 3 3 3]", "(multfirst [0 2 9 3]) -> [0 0 0 0]", "(multfirst []) -> []", "(multfirst [8 4 2]) -> [8 8 8]", "(multfirst [5 2 1]) -> [5 5 5]", "(multfirst [4 7 3 3 1]) -> [4 4 4 4 4]", "(multfirst [4 1 7 4]) -> [4 4 4 4]", "(multfirst [4 1]) -> [4 4]", "(multfirst [6 6]) -> [6 6]", "(multfirst [1 1 2 6]) -> [1 1 1 1]", "(multfirst [7 8 0]) -> [7 7 7]", "(multfirst [6 1]) -> [6 6]", "(multfirst [9 9 8]) -> [9 9 9]", "(multfirst [0 1 8]) -> [0 0 0]", "(multfirst []) -> []", "(multfirst [7 2 9]) -> [7 7 7]", "(multfirst [5 7 6 7 3]) -> [5 5 5 5 5]", "(multfirst [6 9 0]) -> [6 6 6]", "(multfirst [8 8]) -> [8 8]", "(multfirst [6 2 3 5 7]) -> [6 6 6 6 6]", "(multfirst [1 8]) -> [1 1]", "(multfirst []) -> []", "(multfirst [3 6]) -> [3 3]"]}
{"time": 0.041371, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4 7 9 4]) -> [4 4 4 4]", "(multfirst [2 4 9 4]) -> [2 2 2 2]", "(multfirst [8]) -> [8]", "(multfirst [5 4 3 8]) -> [5 5 5 5]", "(multfirst [3]) -> [3]", "(multfirst [0 2 0]) -> [0 0 0]", "(multfirst [9 8 0 5 2]) -> [9 9 9 9 9]", "(multfirst []) -> []", "(multfirst [7 8 8 9 4]) -> [7 7 7 7 7]", "(multfirst [0 9 1 3]) -> [0 0 0 0]", "(multfirst []) -> []", "(multfirst [0 9 8]) -> [0 0 0]", "(multfirst [3 3 9 1 2]) -> [3 3 3 3 3]", "(multfirst [2 1]) -> [2 2]", "(multfirst []) -> []", "(multfirst [8 1]) -> [8 8]", "(multfirst [1 6 0]) -> [1 1 1]", "(multfirst [1]) -> [1]", "(multfirst [8]) -> [8]", "(multfirst [0 4 7 4]) -> [0 0 0 0]", "(multfirst [7]) -> [7]", "(multfirst [0 7]) -> [0 0]", "(multfirst [5 7 9 9]) -> [5 5 5 5]", "(multfirst [8 8 4]) -> [8 8 8]", "(multfirst [7 5 7]) -> [7 7 7]", "(multfirst [3 4 7 6]) -> [3 3 3 3]", "(multfirst [8 0]) -> [8 8]", "(multfirst [3 6 2 4]) -> [3 3 3 3]", "(multfirst [1 4 5 9]) -> [1 1 1 1]", "(multfirst [4 2 1 1 5]) -> [4 4 4 4 4]", "(multfirst [0 2]) -> [0 0]", "(multfirst []) -> []", "(multfirst [0]) -> [0]", "(multfirst [0 9 3 3 9]) -> [0 0 0 0 0]", "(multfirst [1 5 7 6]) -> [1 1 1 1]", "(multfirst [0 2 6 3 7]) -> [0 0 0 0 0]", "(multfirst [0 9 7]) -> [0 0 0]", "(multfirst []) -> []", "(multfirst [0 9 0]) -> [0 0 0]", "(multfirst [5 6 2 4]) -> [5 5 5 5]", "(multfirst []) -> []", "(multfirst [8]) -> [8]", "(multfirst [7 4 2]) -> [7 7 7]", "(multfirst [0 3 4 8]) -> [0 0 0 0]", "(multfirst [6 9]) -> [6 6]", "(multfirst []) -> []", "(multfirst [5 5 0 5]) -> [5 5 5 5]", "(multfirst [0]) -> [0]"]}
{"time": 0.035087, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [6 6 1 7]) -> [6 6 6 6]", "(multfirst [5 6 9]) -> [5 5 5]", "(multfirst [0 2]) -> [0 0]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [1 0 0]) -> [1 1 1]", "(multfirst [6 4 2 9 9]) -> [6 6 6 6 6]", "(multfirst [2 2]) -> [2 2]", "(multfirst [2 8 3 1]) -> [2 2 2 2]", "(multfirst [5 7]) -> [5 5]", "(multfirst [0 6]) -> [0 0]", "(multfirst [8 4 5 7]) -> [8 8 8 8]", "(multfirst [9 4 5]) -> [9 9 9]", "(multfirst [3 3 3]) -> [3 3 3]", "(multfirst [0]) -> [0]", "(multfirst [5 7 8]) -> [5 5 5]", "(multfirst [0 7 5]) -> [0 0 0]", "(multfirst [3]) -> [3]", "(multfirst []) -> []", "(multfirst [1 2]) -> [1 1]", "(multfirst []) -> []", "(multfirst [7 0 6 0 9]) -> [7 7 7 7 7]", "(multfirst [0 7 7 4]) -> [0 0 0 0]", "(multfirst []) -> []", "(multfirst [3 9 1 0 0]) -> [3 3 3 3 3]", "(multfirst [3]) -> [3]", "(multfirst [4 6]) -> [4 4]", "(multfirst [3 8]) -> [3 3]", "(multfirst [4 4 2 6]) -> [4 4 4 4]", "(multfirst []) -> []", "(multfirst [7]) -> [7]", "(multfirst [9 9 7 7 8]) -> [9 9 9 9 9]", "(multfirst [3 0]) -> [3 3]", "(multfirst []) -> []", "(multfirst [8]) -> [8]", "(multfirst [1 4 9]) -> [1 1 1]", "(multfirst [3 0 3]) -> [3 3 3]", "(multfirst [7 0 5]) -> [7 7 7]", "(multfirst [4 9 6 9 3]) -> [4 4 4 4 4]", "(multfirst [0 4 2 7]) -> [0 0 0 0]", "(multfirst [2]) -> [2]", "(multfirst [4 5 6 9 4]) -> [4 4 4 4 4]", "(multfirst [4]) -> [4]", "(multfirst [2 1 7 5]) -> [2 2 2 2]", "(multfirst [6 0 9 4 3]) -> [6 6 6 6 6]", "(multfirst [6 9 0 2]) -> [6 6 6 6]", "(multfirst [4 9 3]) -> [4 4 4]", "(multfirst [9 3 8 3]) -> [9 9 9 9]", "(multfirst [9 4 4]) -> [9 9 9]"]}
{"time": 0.030221, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [7 7 7 4 4]) -> [7 7 7 7 7]", "(multfirst []) -> []", "(multfirst [6 7 1 3]) -> [6 6 6 6]", "(multfirst [9 5]) -> [9 9]", "(multfirst [3 8 3]) -> [3 3 3]", "(multfirst [3 3 2 0 3]) -> [3 3 3 3 3]", "(multfirst [9 4]) -> [9 9]", "(multfirst [7]) -> [7]", "(multfirst [3 6 7 8]) -> [3 3 3 3]", "(multfirst [9 0 5 9 1]) -> [9 9 9 9 9]", "(multfirst [2 7]) -> [2 2]", "(multfirst [6]) -> [6]", "(multfirst []) -> []", "(multfirst [0 5 0 3]) -> [0 0 0 0]", "(multfirst [9 8 5 2 6]) -> [9 9 9 9 9]", "(multfirst [8]) -> [8]", "(multfirst [0 2 5 6 5]) -> [0 0 0 0 0]", "(multfirst [9 8]) -> [9 9]", "(multfirst [5]) -> [5]", "(multfirst [7]) -> [7]", "(multfirst [0 2 6 0]) -> [0 0 0 0]", "(multfirst [2]) -> [2]", "(multfirst [5 8 2 0 5]) -> [5 5 5 5 5]", "(multfirst []) -> []", "(multfirst [1 3 3]) -> [1 1 1]", "(multfirst [0 9 6 5]) -> [0 0 0 0]", "(multfirst []) -> []", "(multfirst [6 0 1 0]) -> [6 6 6 6]", "(multfirst [2 1 8 5 0]) -> [2 2 2 2 2]", "(multfirst []) -> []", "(multfirst [9 7]) -> [9 9]", "(multfirst [6 1 8 5 9]) -> [6 6 6 6 6]", "(multfirst [9 9 9 4]) -> [9 9 9 9]", "(multfirst [5]) -> [5]", "(multfirst [4 0 0 9 1]) -> [4 4 4 4 4]", "(multfirst []) -> []", "(multfirst [6 8 1 2 1]) -> [6 6 6 6 6]", "(multfirst [7 2 9]) -> [7 7 7]", "(multfirst [1 4]) -> [1 1]", "(multfirst [2 0 9 6 6]) -> [2 2 2 2 2]", "(multfirst [3 3]) -> [3 3]", "(multfirst [2 1 2 1 1]) -> [2 2 2 2 2]", "(multfirst [8 2 0]) -> [8 8 8]", "(multfirst [0 1 0]) -> [0 0 0]", "(multfirst []) -> []", "(multfirst [0 6]) -> [0 0]", "(multfirst [2 1 5 5 9]) -> [2 2 2 2 2]", "(multfirst []) -> []", "(multfirst [5 9]) -> [5 5]"]}
{"time": 0.027521, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [9 0 5]) -> [9 9 9]", "(multfirst [2 2]) -> [2 2]", "(multfirst [0 1 6 4 0]) -> [0 0 0 0 0]", "(multfirst [1 9 8]) -> [1 1 1]", "(multfirst [8 3 2 5 8]) -> [8 8 8 8 8]", "(multfirst [7 6]) -> [7 7]", "(multfirst [9 3 8 2]) -> [9 9 9 9]", "(multfirst [2]) -> [2]", "(multfirst [5 9 0 5 3]) -> [5 5 5 5 5]", "(multfirst []) -> []", "(multfirst [5 0 0 3]) -> [5 5 5 5]", "(multfirst [7 6 3 5 7]) -> [7 7 7 7 7]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [3 7 8 4 2]) -> [3 3 3 3 3]", "(multfirst [1 0 5 0]) -> [1 1 1 1]", "(multfirst []) -> []", "(multfirst [7 3 7]) -> [7 7 7]", "(multfirst [9 5 9 1]) -> [9 9 9 9]", "(multfirst []) -> []", "(multfirst [8]) -> [8]", "(multfirst [0]) -> [0]", "(multfirst [7]) -> [7]", "(multfirst []) -> []", "(multfirst [7 1 0 1]) -> [7 7 7 7]", "(multfirst [1 1 3 6 5]) -> [1 1 1 1 1]", "(multfirst [4 2]) -> [4 4]", "(multfirst [5 6 0 1 0]) -> [5 5 5 5 5]", "(multfirst [5]) -> [5]", "(multfirst [9 9 1]) -> [9 9 9]", "(multfirst [5 9 5 7 1]) -> [5 5 5 5 5]", "(multfirst [0 4]) -> [0 0]", "(multfirst [9 1 1 2]) -> [9 9 9 9]", "(multfirst []) -> []", "(multfirst [6 4 8 6]) -> [6 6 6 6]", "(multfirst [3 2 8 0]) -> [3 3 3 3]", "(multfirst []) -> []", "(multfirst [6 2 7]) -> [6 6 6]", "(multfirst [4 4 2 9]) -> [4 4 4 4]", "(multfirst [6 6 7]) -> [6 6 6]", "(multfirst [6]) -> [6]", "(multfirst [1 7 5 6 4]) -> [1 1 1 1 1]", "(multfirst [0]) -> [0]", "(multfirst [0 8 2 2 9]) -> [0 0 0 0 0]", "(multfirst [1 4 9 6 0]) -> [1 1 1 1 1]", "(multfirst [0 6 9]) -> [0 0 0]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []"]}
{"time": 0.040555, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [4]) -> [4]", "(multfirst [8 8 7 4]) -> [8 8 8 8]", "(multfirst [7 7 2 1 9]) -> [7 7 7 7 7]", "(multfirst [7 2 1 8]) -> [7 7 7 7]", "(multfirst []) -> []", "(multfirst [6 9 6 5]) -> [6 6 6 6]", "(multfirst [8 9]) -> [8 8]", "(multfirst [1 2]) -> [1 1]", "(multfirst [6 2 3 6 6]) -> [6 6 6 6 6]", "(multfirst [2 8 8]) -> [2 2 2]", "(multfirst [3 0 0]) -> [3 3 3]", "(multfirst [2 6 1 4]) -> [2 2 2 2]", "(multfirst [8 3]) -> [8 8]", "(multfirst [2]) -> [2]", "(multfirst [6]) -> [6]", "(multfirst [0 3 1 8 9]) -> [0 0 0 0 0]", "(multfirst [3 6 0 1 6]) -> [3 3 3 3 3]", "(multfirst [1 2 1]) -> [1 1 1]", "(multfirst [7 1 0]) -> [7 7 7]", "(multfirst [3 8]) -> [3 3]", "(multfirst [0 5 8 8]) -> [0 0 0 0]", "(multfirst [2 7 5 3 3]) -> [2 2 2 2 2]", "(multfirst [9 6 7 0 8]) -> [9 9 9 9 9]", "(multfirst [3 7 8]) -> [3 3 3]", "(multfirst [2 6 1]) -> [2 2 2]", "(multfirst [1 7 1]) -> [1 1 1]", "(multfirst [8 5]) -> [8 8]", "(multfirst [3 5 5 4 4]) -> [3 3 3 3 3]", "(multfirst [4 8 3]) -> [4 4 4]", "(multfirst [3]) -> [3]", "(multfirst [6 1 4]) -> [6 6 6]", "(multfirst [7 5]) -> [7 7]", "(multfirst [9 4]) -> [9 9]", "(multfirst [2 4 8]) -> [2 2 2]", "(multfirst [1 8]) -> [1 1]", "(multfirst [4 6 8 6 9]) -> [4 4 4 4 4]", "(multfirst [9 5 2]) -> [9 9 9]", "(multfirst [5 0 4 5]) -> [5 5 5 5]", "(multfirst [1 1 1 1 1]) -> [1 1 1 1 1]", "(multfirst [3]) -> [3]", "(multfirst [7]) -> [7]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [2 3]) -> [2 2]", "(multfirst [7 0 9 0 9]) -> [7 7 7 7 7]", "(multfirst [4 5 8]) -> [4 4 4]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7 9 8]) -> [7 7 7]"]}
{"time": 0.03476, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [6 3]) -> [6 6]", "(multfirst [5 9 6]) -> [5 5 5]", "(multfirst [5 8 5]) -> [5 5 5]", "(multfirst [1 3 0 4]) -> [1 1 1 1]", "(multfirst [1 3 6]) -> [1 1 1]", "(multfirst []) -> []", "(multfirst [5 5 9 9 1]) -> [5 5 5 5 5]", "(multfirst [2 4 3]) -> [2 2 2]", "(multfirst [9]) -> [9]", "(multfirst [3 8 8 2]) -> [3 3 3 3]", "(multfirst []) -> []", "(multfirst [6 3]) -> [6 6]", "(multfirst [8 5]) -> [8 8]", "(multfirst [8 5 6 2]) -> [8 8 8 8]", "(multfirst [2 2]) -> [2 2]", "(multfirst []) -> []", "(multfirst [3 5 3]) -> [3 3 3]", "(multfirst [2 8 5 6 7]) -> [2 2 2 2 2]", "(multfirst [2]) -> [2]", "(multfirst [4 6 0]) -> [4 4 4]", "(multfirst [9 8 8 5]) -> [9 9 9 9]", "(multfirst [9 8 0]) -> [9 9 9]", "(multfirst [3 3]) -> [3 3]", "(multfirst [8 1 4]) -> [8 8 8]", "(multfirst [2]) -> [2]", "(multfirst [4 2 1 4 3]) -> [4 4 4 4 4]", "(multfirst [3 8 4 6 2]) -> [3 3 3 3 3]", "(multfirst [2 5 3]) -> [2 2 2]", "(multfirst [9]) -> [9]", "(multfirst [6 0 0 3]) -> [6 6 6 6]", "(multfirst []) -> []", "(multfirst [0 6]) -> [0 0]", "(multfirst [7]) -> [7]", "(multfirst []) -> []", "(multfirst [5 4 7 8]) -> [5 5 5 5]", "(multfirst [0 1 1 1 7]) -> [0 0 0 0 0]", "(multfirst [8 8]) -> [8 8]", "(multfirst [6 7]) -> [6 6]", "(multfirst [1 6 9 7 5]) -> [1 1 1 1 1]", "(multfirst [1 4 2]) -> [1 1 1]", "(multfirst [6 7]) -> [6 6]", "(multfirst []) -> []", "(multfirst [0 8 6]) -> [0 0 0]", "(multfirst [6]) -> [6]", "(multfirst [4]) -> [4]", "(multfirst [9 7 4 8 5]) -> [9 9 9 9 9]", "(multfirst []) -> []", "(multfirst []) -> []"]}
{"time": 0.035225, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [0 3]) -> [0 0]", "(multfirst [4 2 2 9 5]) -> [4 4 4 4 4]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [9 7 5 1 9]) -> [9 9 9 9 9]", "(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst [0 3 2]) -> [0 0 0]", "(multfirst [4 0]) -> [4 4]", "(multfirst [8 4 1]) -> [8 8 8]", "(multfirst [7]) -> [7]", "(multfirst [8 7]) -> [8 8]", "(multfirst [2 6 7 4 9]) -> [2 2 2 2 2]", "(multfirst []) -> []", "(multfirst [9]) -> [9]", "(multfirst [3 8 5]) -> [3 3 3]", "(multfirst []) -> []", "(multfirst [6 8]) -> [6 6]", "(multfirst [0]) -> [0]", "(multfirst [8 3 3]) -> [8 8 8]", "(multfirst [3 1 0 5 7]) -> [3 3 3 3 3]", "(multfirst [6 8 4 2]) -> [6 6 6 6]", "(multfirst []) -> []", "(multfirst [7 5]) -> [7 7]", "(multfirst [9]) -> [9]", "(multfirst [1 9 2 0]) -> [1 1 1 1]", "(multfirst [3 4]) -> [3 3]", "(multfirst []) -> []", "(multfirst [2 1 1 5 1]) -> [2 2 2 2 2]", "(multfirst [4]) -> [4]", "(multfirst [2 1 6]) -> [2 2 2]", "(multfirst [5]) -> [5]", "(multfirst []) -> []", "(multfirst [9 3 7]) -> [9 9 9]", "(multfirst []) -> []", "(multfirst [5 9]) -> [5 5]", "(multfirst [6 6]) -> [6 6]", "(multfirst [8 3 1]) -> [8 8 8]", "(multfirst [5 3 5 6 6]) -> [5 5 5 5 5]", "(multfirst [2 7 3 7 3]) -> [2 2 2 2 2]", "(multfirst [7 2 2 0]) -> [7 7 7 7]", "(multfirst [4 0 8]) -> [4 4 4]", "(multfirst [4 7 1]) -> [4 4 4]", "(multfirst [9 4 7 5]) -> [9 9 9 9]", "(multfirst [1 5 0 1]) -> [1 1 1 1]", "(multfirst []) -> []", "(multfirst [9 1]) -> [9 9]", "(multfirst [4]) -> [4]"]}
{"time": 0.031475, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [5 6]) -> [5 5]", "(multfirst [0 7 1 9]) -> [0 0 0 0]", "(multfirst [4 7 6 0]) -> [4 4 4 4]", "(multfirst [6 2 1 0 7]) -> [6 6 6 6 6]", "(multfirst [7 0 0]) -> [7 7 7]", "(multfirst [3 1]) -> [3 3]", "(multfirst [8 8 0 4]) -> [8 8 8 8]", "(multfirst [0]) -> [0]", "(multfirst []) -> []", "(multfirst [9 6 1 3 8]) -> [9 9 9 9 9]", "(multfirst [8 2 3 0]) -> [8 8 8 8]", "(multfirst [4 3 8 0 0]) -> [4 4 4 4 4]", "(multfirst [3 1 0 9]) -> [3 3 3 3]", "(multfirst []) -> []", "(multfirst [5 2]) -> [5 5]", "(multfirst [7 9 2 9 7]) -> [7 7 7 7 7]", "(multfirst []) -> []", "(multfirst [2 2 3 7 3]) -> [2 2 2 2 2]", "(multfirst [9 0]) -> [9 9]", "(multfirst [9 1]) -> [9 9]", "(multfirst [8 7 0 6]) -> [8 8 8 8]", "(multfirst [4 6 8 2]) -> [4 4 4 4]", "(multfirst [9 9 0 2 6]) -> [9 9 9 9 9]", "(multfirst [9 9 2]) -> [9 9 9]", "(multfirst [5]) -> [5]", "(multfirst [8 5]) -> [8 8]", "(multfirst [6 0 2 4]) -> [6 6 6 6]", "(multfirst [0 7]) -> [0 0]", "(multfirst [1 1 3]) -> [1 1 1]", "(multfirst [8 3 3 1]) -> [8 8 8 8]", "(multfirst []) -> []", "(multfirst [3 2 7 7 1]) -> [3 3 3 3 3]", "(multfirst [2 3 4 9]) -> [2 2 2 2]", "(multfirst [3 9]) -> [3 3]", "(multfirst []) -> []", "(multfirst [0 1 4 4 8]) -> [0 0 0 0 0]", "(multfirst [7 6 2 2]) -> [7 7 7 7]", "(multfirst [1 6 8]) -> [1 1 1]", "(multfirst [6 6 6 6 2]) -> [6 6 6 6 6]", "(multfirst [1 5 6 3 3]) -> [1 1 1 1 1]", "(multfirst [9 7 1 1 8]) -> [9 9 9 9 9]", "(multfirst [2 0 8 7 5]) -> [2 2 2 2 2]", "(multfirst [1 9 1 1]) -> [1 1 1 1]", "(multfirst [4 4]) -> [4 4]", "(multfirst [2 1 1]) -> [2 2 2]", "(multfirst [5 0 9 4]) -> [5 5 5 5]", "(multfirst [9 6 2]) -> [9 9 9]", "(multfirst [8 4 7 6 9]) -> [8 8 8 8 8]", "(multfirst [8 1]) -> [8 8]"]}
{"time": 0.040242, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [5]) -> [5]", "(multfirst [4 7 7 2]) -> [4 4 4 4]", "(multfirst []) -> []", "(multfirst [6 1 3]) -> [6 6 6]", "(multfirst [7 4 7 1]) -> [7 7 7 7]", "(multfirst [6 4 6]) -> [6 6 6]", "(multfirst [9 8 0 4 4]) -> [9 9 9 9 9]", "(multfirst [3 5 8]) -> [3 3 3]", "(multfirst [6 5 8 8 1]) -> [6 6 6 6 6]", "(multfirst [9 8 1]) -> [9 9 9]", "(multfirst [1]) -> [1]", "(multfirst [5 8]) -> [5 5]", "(multfirst [7]) -> [7]", "(multfirst []) -> []", "(multfirst [5 7 5]) -> [5 5 5]", "(multfirst [6 1]) -> [6 6]", "(multfirst [8 5]) -> [8 8]", "(multfirst [2]) -> [2]", "(multfirst [0 3 6 1 0]) -> [0 0 0 0 0]", "(multfirst [1 7]) -> [1 1]", "(multfirst [4 7 2]) -> [4 4 4]", "(multfirst [8 8]) -> [8 8]", "(multfirst [2]) -> [2]", "(multfirst [1 3]) -> [1 1]", "(multfirst [4 5 5]) -> [4 4 4]", "(multfirst [2 0 9 7 3]) -> [2 2 2 2 2]", "(multfirst [5 1]) -> [5 5]", "(multfirst [2 7 4 2]) -> [2 2 2 2]", "(multfirst []) -> []", "(multfirst [8 1]) -> [8 8]", "(multfirst [0 6 0]) -> [0 0 0]", "(multfirst [8]) -> [8]", "(multfirst [2 3 6 7 7]) -> [2 2 2 2 2]", "(multfirst [7 7]) -> [7 7]", "(multfirst [8 6 4 6]) -> [8 8 8 8]", "(multfirst [0 1 8 9 6]) -> [0 0 0 0 0]", "(multfirst []) -> []", "(multfirst [1 8 1 1]) -> [1 1 1 1]", "(multfirst [2]) -> [2]", "(multfirst [3]) -> [3]", "(multfirst [0 7 4]) -> [0 0 0]", "(multfirst [6 4]) -> [6 6]", "(multfirst []) -> []", "(multfirst [6]) -> [6]", "(multfirst []) -> []", "(multfirst [8 3]) -> [8 8]", "(multfirst [5 5 5]) -> [5 5 5]", "(multfirst [5 3 4 1 9]) -> [5 5 5 5 5]", "(multfirst [8 1 1 7 1]) -> [8 8 8 8 8]"]}
{"time": 0.0298, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [7 5 9]) -> [7 7 7]", "(multfirst [9 5 4 3]) -> [9 9 9 9]", "(multfirst [7 2 7]) -> [7 7 7]", "(multfirst [7 1 0 5]) -> [7 7 7 7]", "(multfirst []) -> []", "(multfirst [3 6 9 5]) -> [3 3 3 3]", "(multfirst [7 8]) -> [7 7]", "(multfirst [8 0 8 0]) -> [8 8 8 8]", "(multfirst [1]) -> [1]", "(multfirst [9 4]) -> [9 9]", "(multfirst [6 3 0 9]) -> [6 6 6 6]", "(multfirst [7]) -> [7]", "(multfirst []) -> []", "(multfirst [7 2]) -> [7 7]", "(multfirst [9]) -> [9]", "(multfirst [1 6 6 4]) -> [1 1 1 1]", "(multfirst []) -> []", "(multfirst [4 2 8 1]) -> [4 4 4 4]", "(multfirst [3 5]) -> [3 3]", "(multfirst [4 2 7 1 6]) -> [4 4 4 4 4]", "(multfirst [8 7]) -> [8 8]", "(multfirst [9 9 8 1 0]) -> [9 9 9 9 9]", "(multfirst [6]) -> [6]", "(multfirst [8 9]) -> [8 8]", "(multfirst [4 0]) -> [4 4]", "(multfirst [8 9 5]) -> [8 8 8]", "(multfirst [9 1 2 0 0]) -> [9 9 9 9 9]", "(multfirst []) -> []", "(multfirst [2 9 1]) -> [2 2 2]", "(multfirst [1 7 8]) -> [1 1 1]", "(multfirst [0 3 5 4 3]) -> [0 0 0 0 0]", "(multfirst [4 2 3 5 4]) -> [4 4 4 4 4]", "(multfirst [8 6 6 1 2]) -> [8 8 8 8 8]", "(multfirst [1]) -> [1]", "(multfirst [8 7 8 0 5]) -> [8 8 8 8 8]", "(multfirst [1 7 7 0]) -> [1 1 1 1]", "(multfirst [0 3 0 2 1]) -> [0 0 0 0 0]", "(multfirst [9 1]) -> [9 9]", "(multfirst [0 4]) -> [0 0]", "(multfirst [6 7 5 3 4]) -> [6 6 6 6 6]", "(multfirst [8 4 4]) -> [8 8 8]", "(multfirst [8 5 8 3 6]) -> [8 8 8 8 8]", "(multfirst []) -> []", "(multfirst [1 4 4 0]) -> [1 1 1 1]", "(multfirst [6]) -> [6]", "(multfirst [4 6 8 9 9]) -> [4 4 4 4 4]", "(multfirst [0 6 0 7]) -> [0 0 0 0]", "(multfirst [5]) -> [5]", "(multfirst [5 9 3 8 1]) -> [5 5 5 5 5]"]}
{"time": 0.035527, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [4 9]) -> [4 4]", "(multfirst [7 3 0 1 1]) -> [7 7 7 7 7]", "(multfirst [6 2]) -> [6 6]", "(multfirst [0 2 5 0 7]) -> [0 0 0 0 0]", "(multfirst [9]) -> [9]", "(multfirst []) -> []", "(multfirst [5 6 2 4 0]) -> [5 5 5 5 5]", "(multfirst [9 9]) -> [9 9]", "(multfirst [7 6]) -> [7 7]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [8 2 9 6 6]) -> [8 8 8 8 8]", "(multfirst [8]) -> [8]", "(multfirst [7 6 8]) -> [7 7 7]", "(multfirst [8 4 8]) -> [8 8 8]", "(multfirst [4 3 6]) -> [4 4 4]", "(multfirst [0]) -> [0]", "(multfirst [2 2 2 6 7]) -> [2 2 2 2 2]", "(multfirst [7 8 2 7 0]) -> [7 7 7 7 7]", "(multfirst [5 9 2 4 3]) -> [5 5 5 5 5]", "(multfirst [7 1 7 2]) -> [7 7 7 7]", "(multfirst [9]) -> [9]", "(multfirst [7]) -> [7]", "(multfirst [4 5 9 3 1]) -> [4 4 4 4 4]", "(multfirst [8 5 9 9]) -> [8 8 8 8]", "(multfirst [2]) -> [2]", "(multfirst [4 8 7 8 7]) -> [4 4 4 4 4]", "(multfirst [9 6 5]) -> [9 9 9]", "(multfirst [6 9 9 2 8]) -> [6 6 6 6 6]", "(multfirst [4]) -> [4]", "(multfirst [7 9]) -> [7 7]", "(multfirst [5 7 8 7]) -> [5 5 5 5]", "(multfirst [1]) -> [1]", "(multfirst [8 0 1 6 2]) -> [8 8 8 8 8]", "(multfirst [5 3]) -> [5 5]", "(multfirst [6 9 7 7]) -> [6 6 6 6]", "(multfirst [9 8 7 4]) -> [9 9 9 9]", "(multfirst [4 6 0]) -> [4 4 4]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [8 4 0]) -> [8 8 8]", "(multfirst [9]) -> [9]", "(multfirst [8 1 3]) -> [8 8 8]", "(multfirst [1 6]) -> [1 1]", "(multfirst []) -> []", "(multfirst [0 3 7 4]) -> [0 0 0 0]", "(multfirst [8 4 3]) -> [8 8 8]", "(multfirst [6 0 5]) -> [6 6 6]", "(multfirst [0]) -> [0]"]}
{"time": 0.028388, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [1 2 3 8]) -> [1 1 1 1]", "(multfirst [0 2]) -> [0 0]", "(multfirst [8 5 3]) -> [8 8 8]", "(multfirst [8 9 4]) -> [8 8 8]", "(multfirst [5 4 4 6]) -> [5 5 5 5]", "(multfirst [9]) -> [9]", "(multfirst [5 3 5 8]) -> [5 5 5 5]", "(multfirst [5]) -> [5]", "(multfirst [0 2]) -> [0 0]", "(multfirst []) -> []", "(multfirst [3 8]) -> [3 3]", "(multfirst [9]) -> [9]", "(multfirst [9 7]) -> [9 9]", "(multfirst [8]) -> [8]", "(multfirst []) -> []", "(multfirst [7 5 5]) -> [7 7 7]", "(multfirst [7 1]) -> [7 7]", "(multfirst [0 1 4 9]) -> [0 0 0 0]", "(multfirst [0 3]) -> [0 0]", "(multfirst [4 1 4 3 4]) -> [4 4 4 4 4]", "(multfirst [5 6 3 5 6]) -> [5 5 5 5 5]", "(multfirst [8 8 0 0 5]) -> [8 8 8 8 8]", "(multfirst [1]) -> [1]", "(multfirst [7 3 7]) -> [7 7 7]", "(multfirst [9 8]) -> [9 9]", "(multfirst [0]) -> [0]", "(multfirst [8 1 6 5 8]) -> [8 8 8 8 8]", "(multfirst [0 9 7 6]) -> [0 0 0 0]", "(multfirst [1 1 3 3]) -> [1 1 1 1]", "(multfirst []) -> []", "(multfirst [7 0]) -> [7 7]", "(multfirst [9 7 6 5]) -> [9 9 9 9]", "(multfirst [1 7]) -> [1 1]", "(multfirst [7 9 8]) -> [7 7 7]", "(multfirst [3 2]) -> [3 3]", "(multfirst [9 6 4 6]) -> [9 9 9 9]", "(multfirst []) -> []", "(multfirst [5]) -> [5]", "(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst [8]) -> [8]", "(multfirst []) -> []", "(multfirst [5 0 2 7]) -> [5 5 5 5]", "(multfirst [0 4]) -> [0 0]", "(multfirst [6 7 4 7 3]) -> [6 6 6 6 6]", "(multfirst [4 9 6 6 5]) -> [4 4 4 4 4]", "(multfirst [3 6]) -> [3 3]", "(multfirst [8 7]) -> [8 8]", "(multfirst [2 1]) -> [2 2]"]}
{"time": 0.037286, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [3 6 0 6]) -> [3 3 3 3]", "(multfirst [6 8 2 3]) -> [6 6 6 6]", "(multfirst [2 5 2 1 2]) -> [2 2 2 2 2]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [0 7 5]) -> [0 0 0]", "(multfirst [1 5 9]) -> [1 1 1]", "(multfirst [1 8 5 1]) -> [1 1 1 1]", "(multfirst [2 9]) -> [2 2]", "(multfirst [6 8 4]) -> [6 6 6]", "(multfirst [8 3 4 2]) -> [8 8 8 8]", "(multfirst [9 1]) -> [9 9]", "(multfirst [4 4]) -> [4 4]", "(multfirst [0 6 8 1 0]) -> [0 0 0 0 0]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [6 2]) -> [6 6]", "(multfirst [5 0 1 1]) -> [5 5 5 5]", "(multfirst [3 3 4 2 4]) -> [3 3 3 3 3]", "(multfirst [7 1 5]) -> [7 7 7]", "(multfirst [3 8 8 2]) -> [3 3 3 3]", "(multfirst [6 1 1]) -> [6 6 6]", "(multfirst [7 2 3 4]) -> [7 7 7 7]", "(multfirst [3 5 1 7]) -> [3 3 3 3]", "(multfirst [7 8 5 1]) -> [7 7 7 7]", "(multfirst [8 0]) -> [8 8]", "(multfirst [1 4]) -> [1 1]", "(multfirst [1 5 1 3 4]) -> [1 1 1 1 1]", "(multfirst []) -> []", "(multfirst [4 2 4]) -> [4 4 4]", "(multfirst [3 0]) -> [3 3]", "(multfirst [7 6 6]) -> [7 7 7]", "(multfirst [7]) -> [7]", "(multfirst [7 8 2]) -> [7 7 7]", "(multfirst [8]) -> [8]", "(multfirst [1]) -> [1]", "(multfirst [7 1 9]) -> [7 7 7]", "(multfirst [8 1]) -> [8 8]", "(multfirst [2 7 0 3]) -> [2 2 2 2]", "(multfirst [5 6]) -> [5 5]", "(multfirst [0 2 1 4 8]) -> [0 0 0 0 0]", "(multfirst [0]) -> [0]", "(multfirst [0 6]) -> [0 0]", "(multfirst []) -> []", "(multfirst [7 7]) -> [7 7]", "(multfirst []) -> []", "(multfirst [3 8 2 2]) -> [3 3 3 3]", "(multfirst [8 0 2 5 1]) -> [8 8 8 8 8]", "(multfirst []) -> []"]}
{"time": 0.040453, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [5 8 2 1 7]) -> [5 5 5 5 5]", "(multfirst [6 0]) -> [6 6]", "(multfirst [2]) -> [2]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [5 1]) -> [5 5]", "(multfirst [4 3 4 3 1]) -> [4 4 4 4 4]", "(multfirst []) -> []", "(multfirst [8]) -> [8]", "(multfirst [5]) -> [5]", "(multfirst [7 9 0]) -> [7 7 7]", "(multfirst [5 9 0]) -> [5 5 5]", "(multfirst [3 6 5 9 0]) -> [3 3 3 3 3]", "(multfirst [0]) -> [0]", "(multfirst [2 1 9 4]) -> [2 2 2 2]", "(multfirst []) -> []", "(multfirst [9 7 6 4]) -> [9 9 9 9]", "(multfirst []) -> []", "(multfirst [8 3]) -> [8 8]", "(multfirst []) -> []", "(multfirst [3]) -> [3]", "(multfirst []) -> []", "(multfirst [1 7 4]) -> [1 1 1]", "(multfirst []) -> []", "(multfirst [8 0 0 3 0]) -> [8 8 8 8 8]", "(multfirst [9 5 6 3]) -> [9 9 9 9]", "(multfirst [2 5 5 7 3]) -> [2 2 2 2 2]", "(multfirst [1 1 7]) -> [1 1 1]", "(multfirst [7]) -> [7]", "(multfirst [0 5 3]) -> [0 0 0]", "(multfirst [6 9 6 1]) -> [6 6 6 6]", "(multfirst [7 6]) -> [7 7]", "(multfirst []) -> []", "(multfirst [6]) -> [6]", "(multfirst [6 8]) -> [6 6]", "(multfirst [7 9 0 3 7]) -> [7 7 7 7 7]", "(multfirst [8]) -> [8]", "(multfirst [1 6 9 1]) -> [1 1 1 1]", "(multfirst []) -> []", "(multfirst [6 6 9 1]) -> [6 6 6 6]", "(multfirst [8 0 6 6 9]) -> [8 8 8 8 8]", "(multfirst [4 4 6]) -> [4 4 4]", "(multfirst [6 5 5 7]) -> [6 6 6 6]", "(multfirst [8]) -> [8]", "(multfirst [4 8 8]) -> [4 4 4]", "(multfirst [8]) -> [8]", "(multfirst []) -> []", "(multfirst [2 1 7 1 6]) -> [2 2 2 2 2]", "(multfirst [5 5]) -> [5 5]"]}
{"time": 0.027443, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [0 3 4]) -> [0 0 0]", "(multfirst [7 3]) -> [7 7]", "(multfirst [4 0 2]) -> [4 4 4]", "(multfirst [7 9 2 8]) -> [7 7 7 7]", "(multfirst [6]) -> [6]", "(multfirst []) -> []", "(multfirst [9 2 3 1]) -> [9 9 9 9]", "(multfirst []) -> []", "(multfirst [5]) -> [5]", "(multfirst [1 8 9 0 6]) -> [1 1 1 1 1]", "(multfirst [9 7]) -> [9 9]", "(multfirst [5 9 7]) -> [5 5 5]", "(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst [1 7 0]) -> [1 1 1]", "(multfirst []) -> []", "(multfirst [7 3]) -> [7 7]", "(multfirst []) -> []", "(multfirst [1 3 5 4 5]) -> [1 1 1 1 1]", "(multfirst [7 4 8]) -> [7 7 7]", "(multfirst []) -> []", "(multfirst [4 6 4 1 7]) -> [4 4 4 4 4]", "(multfirst [3 1 7 7]) -> [3 3 3 3]", "(multfirst [7 0 5]) -> [7 7 7]", "(multfirst [5 5 7]) -> [5 5 5]", "(multfirst [2]) -> [2]", "(multfirst [2 3]) -> [2 2]", "(multfirst [3]) -> [3]", "(multfirst [4 3 1]) -> [4 4 4]", "(multfirst [8 4 1 0]) -> [8 8 8 8]", "(multfirst [6]) -> [6]", "(multfirst [7 2 8]) -> [7 7 7]", "(multfirst []) -> []", "(multfirst [5 3]) -> [5 5]", "(multfirst []) -> []", "(multfirst [4 7 3 2 9]) -> [4 4 4 4 4]", "(multfirst [3 6 9]) -> [3 3 3]", "(multfirst [7 1 1 5 1]) -> [7 7 7 7 7]", "(multfirst []) -> []", "(multfirst [4 4 7]) -> [4 4 4]", "(multfirst [2 0 3 8 5]) -> [2 2 2 2 2]", "(multfirst [2 9 7]) -> [2 2 2]", "(multfirst [0 6 0 5 1]) -> [0 0 0 0 0]", "(multfirst []) -> []", "(multfirst [9 5 6 6 5]) -> [9 9 9 9 9]", "(multfirst [9 6]) -> [9 9]", "(multfirst [9 6 4]) -> [9 9 9]", "(multfirst [3 3 8 6 4]) -> [3 3 3 3 3]", "(multfirst [8 4 5 8 0]) -> [8 8 8 8 8]"]}
{"time": 0.030389, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [3 3 6 8 0]) -> [3 3 3 3 3]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst [3 1 4]) -> [3 3 3]", "(multfirst [3 6]) -> [3 3]", "(multfirst [7 9 2 9]) -> [7 7 7 7]", "(multfirst [5 4 7 5]) -> [5 5 5 5]", "(multfirst [8 4 1 6 5]) -> [8 8 8 8 8]", "(multfirst []) -> []", "(multfirst [2 6]) -> [2 2]", "(multfirst [8 8 9 2]) -> [8 8 8 8]", "(multfirst [0 8 1]) -> [0 0 0]", "(multfirst [1 1 6]) -> [1 1 1]", "(multfirst [3 2 4 8]) -> [3 3 3 3]", "(multfirst [4 9]) -> [4 4]", "(multfirst [9 0 6 6 8]) -> [9 9 9 9 9]", "(multfirst []) -> []", "(multfirst [0 9 4 4]) -> [0 0 0 0]", "(multfirst [1 4 8 5]) -> [1 1 1 1]", "(multfirst [9]) -> [9]", "(multfirst [4]) -> [4]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7]) -> [7]", "(multfirst [9 6 6 0 3]) -> [9 9 9 9 9]", "(multfirst [8 8 3 4 7]) -> [8 8 8 8 8]", "(multfirst []) -> []", "(multfirst [0 0 0]) -> [0 0 0]", "(multfirst [5 9 6]) -> [5 5 5]", "(multfirst [7 4 1]) -> [7 7 7]", "(multfirst [5]) -> [5]", "(multfirst [3 5]) -> [3 3]", "(multfirst [4 6]) -> [4 4]", "(multfirst [6 3 6]) -> [6 6 6]", "(multfirst [0]) -> [0]", "(multfirst [4]) -> [4]", "(multfirst [6 0 0 2 7]) -> [6 6 6 6 6]", "(multfirst [3 0 9 3]) -> [3 3 3 3]", "(multfirst [8 2 6 8]) -> [8 8 8 8]", "(multfirst [1 2 5 7]) -> [1 1 1 1]", "(multfirst [3 7 0 2]) -> [3 3 3 3]", "(multfirst [9]) -> [9]", "(multfirst [8 3]) -> [8 8]", "(multfirst [7 9 0 6]) -> [7 7 7 7]", "(multfirst [5 8 0 0 2]) -> [5 5 5 5 5]", "(multfirst [8 2]) -> [8 8]"]}
{"time": 0.042107, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [2]) -> [2]", "(multfirst [4 5 1 1 2]) -> [4 4 4 4 4]", "(multfirst [6]) -> [6]", "(multfirst [6 2 9]) -> [6 6 6]", "(multfirst [6 6 3 0]) -> [6 6 6 6]", "(multfirst [2]) -> [2]", "(multfirst [4 5 6 1]) -> [4 4 4 4]", "(multfirst []) -> []", "(multfirst [1 7 5]) -> [1 1 1]", "(multfirst [1 1 5]) -> [1 1 1]", "(multfirst [2]) -> [2]", "(multfirst []) -> []", "(multfirst [2 6 8 4]) -> [2 2 2 2]", "(multfirst [0 3 0 8 0]) -> [0 0 0 0 0]", "(multfirst [8 0 7 3]) -> [8 8 8 8]", "(multfirst [4 8]) -> [4 4]", "(multfirst [5 3 6 4 5]) -> [5 5 5 5 5]", "(multfirst [8 6]) -> [8 8]", "(multfirst [8 8 3 7 2]) -> [8 8 8 8 8]", "(multfirst [6 8 7 9]) -> [6 6 6 6]", "(multfirst [5 0 9 5 6]) -> [5 5 5 5 5]", "(multfirst [5]) -> [5]", "(multfirst [0]) -> [0]", "(multfirst [6 7 6]) -> [6 6 6]", "(multfirst [5 1]) -> [5 5]", "(multfirst [3 6 9 8 1]) -> [3 3 3 3 3]", "(multfirst [8 3 4 0]) -> [8 8 8 8]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [1 1 5]) -> [1 1 1]", "(multfirst [2 1 4 9 6]) -> [2 2 2 2 2]", "(multfirst [1 8]) -> [1 1]", "(multfirst [6 9 1 7]) -> [6 6 6 6]", "(multfirst [4 4 0]) -> [4 4 4]", "(multfirst [5 1]) -> [5 5]", "(multfirst [9 1 6]) -> [9 9 9]", "(multfirst [4]) -> [4]", "(multfirst [6]) -> [6]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [4 2 4 9 2]) -> [4 4 4 4 4]", "(multfirst [2 6]) -> [2 2]", "(multfirst [6 2]) -> [6 6]", "(multfirst []) -> []", "(multfirst [0]) -> [0]", "(multfirst [9 4]) -> [9 9]", "(multfirst [1 1 7 4]) -> [1 1 1 1]", "(multfirst [3 2]) -> [3 3]", "(multfirst [4 0]) -> [4 4]"]}
{"time": 0.036592, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [5 0 5 6]) -> [5 5 5 5]", "(multfirst [3 6 5 3]) -> [3 3 3 3]", "(multfirst [9]) -> [9]", "(multfirst []) -> []", "(multfirst [0 5 4 5 8]) -> [0 0 0 0 0]", "(multfirst [9 1 6 9]) -> [9 9 9 9]", "(multfirst [7 4 1 5 3]) -> [7 7 7 7 7]", "(multfirst [3 0 3 6]) -> [3 3 3 3]", "(multfirst []) -> []", "(multfirst [0 7 4]) -> [0 0 0]", "(multfirst [9 7 4]) -> [9 9 9]", "(multfirst []) -> []", "(multfirst [9 1 0 2]) -> [9 9 9 9]", "(multfirst [2 0]) -> [2 2]", "(multfirst [9 4 1 6]) -> [9 9 9 9]", "(multfirst [8 5]) -> [8 8]", "(multfirst [8 9 0]) -> [8 8 8]", "(multfirst [7 5 9]) -> [7 7 7]", "(multfirst [8 9]) -> [8 8]", "(multfirst []) -> []", "(multfirst [3 5]) -> [3 3]", "(multfirst [5 5 5 5 1]) -> [5 5 5 5 5]", "(multfirst [5 0]) -> [5 5]", "(multfirst []) -> []", "(multfirst [6 6 9 5]) -> [6 6 6 6]", "(multfirst [7 7 0 5 2]) -> [7 7 7 7 7]", "(multfirst [3 6 5 6]) -> [3 3 3 3]", "(multfirst [3 7 8 7 3]) -> [3 3 3 3 3]", "(multfirst [2 1 3 0 5]) -> [2 2 2 2 2]", "(multfirst []) -> []", "(multfirst [9 6]) -> [9 9]", "(multfirst [8]) -> [8]", "(multfirst [5 8 4]) -> [5 5 5]", "(multfirst []) -> []", "(multfirst [0 1 2 6]) -> [0 0 0 0]", "(multfirst [8]) -> [8]", "(multfirst [8]) -> [8]", "(multfirst [8 9 6 7]) -> [8 8 8 8]", "(multfirst [5 1]) -> [5 5]", "(multfirst [1 7 1 3 4]) -> [1 1 1 1 1]", "(multfirst [0 2 7 5 2]) -> [0 0 0 0 0]", "(multfirst [7]) -> [7]", "(multfirst []) -> []", "(multfirst [7 5 8 0 4]) -> [7 7 7 7 7]", "(multfirst [3 0 3 4 8]) -> [3 3 3 3 3]", "(multfirst [9 3 9 9 5]) -> [9 9 9 9 9]", "(multfirst [8 6 4]) -> [8 8 8]", "(multfirst [1 8 6 6 6]) -> [1 1 1 1 1]", "(multfirst [4 4 7]) -> [4 4 4]"]}
{"time": 0.037249, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [7 4 1 9]) -> [7 7 7 7]", "(multfirst [4 6]) -> [4 4]", "(multfirst [2 8 1 5 7]) -> [2 2 2 2 2]", "(multfirst []) -> []", "(multfirst [0 9 1 8]) -> [0 0 0 0]", "(multfirst []) -> []", "(multfirst [5 8 9]) -> [5 5 5]", "(multfirst [5 0]) -> [5 5]", "(multfirst [8 1 9 9 7]) -> [8 8 8 8 8]", "(multfirst [9 4]) -> [9 9]", "(multfirst [9 3 6 0 4]) -> [9 9 9 9 9]", "(multfirst [6 1 2 6 2]) -> [6 6 6 6 6]", "(multfirst [4]) -> [4]", "(multfirst [4 1 4 9]) -> [4 4 4 4]", "(multfirst [4 4 9]) -> [4 4 4]", "(multfirst [4 8]) -> [4 4]", "(multfirst [1 3 1]) -> [1 1 1]", "(multfirst [9 1]) -> [9 9]", "(multfirst [4 8]) -> [4 4]", "(multfirst [6]) -> [6]", "(multfirst [4 1 9 3]) -> [4 4 4 4]", "(multfirst [7 0 7 1 6]) -> [7 7 7 7 7]", "(multfirst [9 1 1]) -> [9 9 9]", "(multfirst []) -> []", "(multfirst [6]) -> [6]", "(multfirst [7 2 0]) -> [7 7 7]", "(multfirst [0 7]) -> [0 0]", "(multfirst [5 0 9 5 8]) -> [5 5 5 5 5]", "(multfirst [1 3 2 4 8]) -> [1 1 1 1 1]", "(multfirst [7 2 4 5]) -> [7 7 7 7]", "(multfirst [6]) -> [6]", "(multfirst [6 8]) -> [6 6]", "(multfirst [2 8]) -> [2 2]", "(multfirst [9 3 1 6 4]) -> [9 9 9 9 9]", "(multfirst [3 5]) -> [3 3]", "(multfirst [5 3]) -> [5 5]", "(multfirst [4]) -> [4]", "(multfirst [7 7]) -> [7 7]", "(multfirst [2 1 1 7 7]) -> [2 2 2 2 2]", "(multfirst [2]) -> [2]", "(multfirst []) -> []", "(multfirst [8 1]) -> [8 8]", "(multfirst [2 4 8 7 4]) -> [2 2 2 2 2]", "(multfirst [7 4 5 0]) -> [7 7 7 7]", "(multfirst [9 7 8 5]) -> [9 9 9 9]", "(multfirst []) -> []", "(multfirst [5 1 0 8]) -> [5 5 5 5]", "(multfirst []) -> []", "(multfirst [0 3 8 2 1]) -> [0 0 0 0 0]"]}
{"time": 0.0278, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [1 9]) -> [1 1]", "(multfirst [3 1 5]) -> [3 3 3]", "(multfirst [8 9 2]) -> [8 8 8]", "(multfirst [1]) -> [1]", "(multfirst [4]) -> [4]", "(multfirst [7]) -> [7]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [9 3 0 0 4]) -> [9 9 9 9 9]", "(multfirst [5 0 3]) -> [5 5 5]", "(multfirst [9 2]) -> [9 9]", "(multfirst [8 2 0]) -> [8 8 8]", "(multfirst [4 4]) -> [4 4]", "(multfirst [1 0 4 9]) -> [1 1 1 1]", "(multfirst [5 5 8 0 3]) -> [5 5 5 5 5]", "(multfirst [4 2 2 0]) -> [4 4 4 4]", "(multfirst [4 7 9 7]) -> [4 4 4 4]", "(multfirst [9 4]) -> [9 9]", "(multfirst [6]) -> [6]", "(multfirst [8 9 9]) -> [8 8 8]", "(multfirst [7 6 7 3]) -> [7 7 7 7]", "(multfirst [7 5 6 8 4]) -> [7 7 7 7 7]", "(multfirst [5 8 5 3]) -> [5 5 5 5]", "(multfirst [6 0 7]) -> [6 6 6]", "(multfirst [0 2]) -> [0 0]", "(multfirst [6 8]) -> [6 6]", "(multfirst [5 0 8 8]) -> [5 5 5 5]", "(multfirst [5]) -> [5]", "(multfirst [4 5 1]) -> [4 4 4]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [0 3 8 9 4]) -> [0 0 0 0 0]", "(multfirst [4 9 2 2 1]) -> [4 4 4 4 4]", "(multfirst []) -> []", "(multfirst [7 1 1]) -> [7 7 7]", "(multfirst []) -> []", "(multfirst [9 9 3 4]) -> [9 9 9 9]", "(multfirst [4 0 5 9]) -> [4 4 4 4]", "(multfirst [0 6 5 1]) -> [0 0 0 0]", "(multfirst [5 4 0 6]) -> [5 5 5 5]", "(multfirst [8]) -> [8]", "(multfirst [2 5 5 0 8]) -> [2 2 2 2 2]", "(multfirst [4 7 1 9 2]) -> [4 4 4 4 4]", "(multfirst [8]) -> [8]", "(multfirst [5]) -> [5]", "(multfirst [0 4 8 4]) -> [0 0 0 0]", "(multfirst []) -> []", "(multfirst [1 1 7]) -> [1 1 1]", "(multfirst []) -> []"]}
{"time": 0.028137, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [8 0 9 1 8]) -> [8 8 8 8 8]", "(multfirst [7 6]) -> [7 7]", "(multfirst [9 6]) -> [9 9]", "(multfirst [0]) -> [0]", "(multfirst [8 1 3 5 9]) -> [8 8 8 8 8]", "(multfirst []) -> []", "(multfirst [3]) -> [3]", "(multfirst [6]) -> [6]", "(multfirst [4 6]) -> [4 4]", "(multfirst [3 5 5]) -> [3 3 3]", "(multfirst [6 5 5]) -> [6 6 6]", "(multfirst [2 2]) -> [2 2]", "(multfirst [3 0 3 4]) -> [3 3 3 3]", "(multfirst [3 6 2]) -> [3 3 3]", "(multfirst [0 7]) -> [0 0]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [4 8 8 2]) -> [4 4 4 4]", "(multfirst []) -> []", "(multfirst [9 3 6]) -> [9 9 9]", "(multfirst [9]) -> [9]", "(multfirst [1 9]) -> [1 1]", "(multfirst [4 6 0 5 7]) -> [4 4 4 4 4]", "(multfirst [0 2 2 2]) -> [0 0 0 0]", "(multfirst []) -> []", "(multfirst [5 1 3 6]) -> [5 5 5 5]", "(multfirst []) -> []", "(multfirst [1 4 9 6 7]) -> [1 1 1 1 1]", "(multfirst [5 6 2 0 1]) -> [5 5 5 5 5]", "(multfirst [9 5 4 7 5]) -> [9 9 9 9 9]", "(multfirst [5 9 3]) -> [5 5 5]", "(multfirst [4]) -> [4]", "(multfirst []) -> []", "(multfirst [4 9]) -> [4 4]", "(multfirst []) -> []", "(multfirst [9 4 3]) -> [9 9 9]", "(multfirst [6 9 3 4 3]) -> [6 6 6 6 6]", "(multfirst [5 7 2 1]) -> [5 5 5 5]", "(multfirst [4 5 5]) -> [4 4 4]", "(multfirst [4 2 1]) -> [4 4 4]", "(multfirst [3 0 1 0]) -> [3 3 3 3]", "(multfirst [3 2 0 3]) -> [3 3 3 3]", "(multfirst [5 8 8]) -> [5 5 5]", "(multfirst [2 7 2 3 4]) -> [2 2 2 2 2]", "(multfirst [9 8]) -> [9 9]", "(multfirst [8 2 8]) -> [8 8 8]", "(multfirst [8 1 5 9]) -> [8 8 8 8]", "(multfirst [3 4 1]) -> [3 3 3]", "(multfirst [9 9 0 7]) -> [9 9 9 9]"]}
{"time": 0.037979, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [7]) -> [7]", "(multfirst []) -> []", "(multfirst [1 7]) -> [1 1]", "(multfirst [4 2 4 7]) -> [4 4 4 4]", "(multfirst [0 5 8 1 7]) -> [0 0 0 0 0]", "(multfirst [5]) -> [5]", "(multfirst [3 1 0 2]) -> [3 3 3 3]", "(multfirst [9 5 8 7 3]) -> [9 9 9 9 9]", "(multfirst [9 5 2 9]) -> [9 9 9 9]", "(multfirst [5 6]) -> [5 5]", "(multfirst [8 8 1]) -> [8 8 8]", "(multfirst [6 4 5]) -> [6 6 6]", "(multfirst []) -> []", "(multfirst [5]) -> [5]", "(multfirst [0 5 6]) -> [0 0 0]", "(multfirst [2 7]) -> [2 2]", "(multfirst [1 7 8 4 5]) -> [1 1 1 1 1]", "(multfirst [0 7 7 2]) -> [0 0 0 0]", "(multfirst []) -> []", "(multfirst [8 6 5]) -> [8 8 8]", "(multfirst []) -> []", "(multfirst [0]) -> [0]", "(multfirst [9 5]) -> [9 9]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7 3 1]) -> [7 7 7]", "(multfirst [0 0 3 5]) -> [0 0 0 0]", "(multfirst [4 2 6]) -> [4 4 4]", "(multfirst [2 6]) -> [2 2]", "(multfirst [2]) -> [2]", "(multfirst [2]) -> [2]", "(multfirst [8 8 6 2 7]) -> [8 8 8 8 8]", "(multfirst [4 7 9]) -> [4 4 4]", "(multfirst [5 1 3 3 1]) -> [5 5 5 5 5]", "(multfirst [6]) -> [6]", "(multfirst [2 4 1 2 6]) -> [2 2 2 2 2]", "(multfirst [4 4]) -> [4 4]", "(multfirst [3 9]) -> [3 3]", "(multfirst [8 0 2 2 6]) -> [8 8 8 8 8]", "(multfirst []) -> []", "(multfirst [1]) -> [1]", "(multfirst [9]) -> [9]", "(multfirst [8 5 7 7]) -> [8 8 8 8]", "(multfirst []) -> []", "(multfirst [3 2 7 5]) -> [3 3 3 3]", "(multfirst [9 0 8 2 8]) -> [9 9 9 9 9]", "(multfirst [1]) -> [1]", "(multfirst [5 0 2]) -> [5 5 5]", "(multfirst []) -> []"]}
{"time": 0.027966, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [6 2 5]) -> [6 6 6]", "(multfirst [6 6 3]) -> [6 6 6]", "(multfirst [8]) -> [8]", "(multfirst [0]) -> [0]", "(multfirst [3 3 1 6]) -> [3 3 3 3]", "(multfirst [8 0]) -> [8 8]", "(multfirst []) -> []", "(multfirst [0 4 8 5 8]) -> [0 0 0 0 0]", "(multfirst [5 1 6]) -> [5 5 5]", "(multfirst []) -> []", "(multfirst [7 7 3 0 9]) -> [7 7 7 7 7]", "(multfirst [4]) -> [4]", "(multfirst [0 3 9 0 3]) -> [0 0 0 0 0]", "(multfirst [2 9 2]) -> [2 2 2]", "(multfirst [5 4 5 6 7]) -> [5 5 5 5 5]", "(multfirst [2 3 1 1 2]) -> [2 2 2 2 2]", "(multfirst [7 7 7]) -> [7 7 7]", "(multfirst [8 8 0 5 0]) -> [8 8 8 8 8]", "(multfirst []) -> []", "(multfirst [2 2 8]) -> [2 2 2]", "(multfirst [9 8 2 8 8]) -> [9 9 9 9 9]", "(multfirst [7 3 5 3]) -> [7 7 7 7]", "(multfirst [7]) -> [7]", "(multfirst [9 9]) -> [9 9]", "(multfirst [0 4 9 4 5]) -> [0 0 0 0 0]", "(multfirst [7 2 1 2 0]) -> [7 7 7 7 7]", "(multfirst []) -> []", "(multfirst [6]) -> [6]", "(multfirst [8 8 3 7 5]) -> [8 8 8 8 8]", "(multfirst [5 6 0 0]) -> [5 5 5 5]", "(multfirst [3 9 3 4 9]) -> [3 3 3 3 3]", "(multfirst [4]) -> [4]", "(multfirst [7]) -> [7]", "(multfirst [0 6 0 2 2]) -> [0 0 0 0 0]", "(multfirst [4 5 4]) -> [4 4 4]", "(multfirst [6 0]) -> [6 6]", "(multfirst [5 4]) -> [5 5]", "(multfirst []) -> []", "(multfirst [7 7 9 3]) -> [7 7 7 7]", "(multfirst []) -> []", "(multfirst [4 2 8]) -> [4 4 4]", "(multfirst [8 1]) -> [8 8]", "(multfirst []) -> []", "(multfirst [0 3 6]) -> [0 0 0]", "(multfirst [0 8 1 2]) -> [0 0 0 0]", "(multfirst []) -> []", "(multfirst [4]) -> [4]", "(multfirst [2 0 9 0 9]) -> [2 2 2 2 2]", "(multfirst []) -> []"]}
{"time": 0.028311, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [0 9 9 8 5]) -> [0 0 0 0 0]", "(multfirst [8 9 2]) -> [8 8 8]", "(multfirst [1]) -> [1]", "(multfirst [4]) -> [4]", "(multfirst [4 3 9]) -> [4 4 4]", "(multfirst [1 0 3]) -> [1 1 1]", "(multfirst [2 4]) -> [2 2]", "(multfirst [8 4 0]) -> [8 8 8]", "(multfirst []) -> []", "(multfirst [3 4 9]) -> [3 3 3]", "(multfirst [2 5 0 6 8]) -> [2 2 2 2 2]", "(multfirst []) -> []", "(multfirst [7 0 1]) -> [7 7 7]", "(multfirst [4]) -> [4]", "(multfirst [8 5 6 0]) -> [8 8 8 8]", "(multfirst []) -> []", "(multfirst [6 8 3]) -> [6 6 6]", "(multfirst [7 8 1 6 4]) -> [7 7 7 7 7]", "(multfirst [9 3 4 8 7]) -> [9 9 9 9 9]", "(multfirst [3 6 3]) -> [3 3 3]", "(multfirst [1 6 6]) -> [1 1 1]", "(multfirst [9 9 0]) -> [9 9 9]", "(multfirst [2 1 4 6]) -> [2 2 2 2]", "(multfirst [5 9 7 0]) -> [5 5 5 5]", "(multfirst [9 6]) -> [9 9]", "(multfirst [8 2 7 9]) -> [8 8 8 8]", "(multfirst []) -> []", "(multfirst [1 1 4 0]) -> [1 1 1 1]", "(multfirst [9 8 7]) -> [9 9 9]", "(multfirst [8 7 9 9 7]) -> [8 8 8 8 8]", "(multfirst []) -> []", "(multfirst [2 2 3 1 3]) -> [2 2 2 2 2]", "(multfirst [1 0 5 6]) -> [1 1 1 1]", "(multfirst [1]) -> [1]", "(multfirst [1 8 9 1 7]) -> [1 1 1 1 1]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7 8 1 7 8]) -> [7 7 7 7 7]", "(multfirst [8 2 3 0 7]) -> [8 8 8 8 8]", "(multfirst [7 3 8 7]) -> [7 7 7 7]", "(multfirst [6 0 5 1]) -> [6 6 6 6]", "(multfirst [2 2 8 5 4]) -> [2 2 2 2 2]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [0 3 8 1 5]) -> [0 0 0 0 0]", "(multfirst [1 4 1 6 1]) -> [1 1 1 1 1]", "(multfirst [9 6 8]) -> [9 9 9]", "(multfirst [1 3]) -> [1 1]", "(multfirst [2 3]) -> [2 2]"]}
{"time": 0.026855, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [8 1 7]) -> [8 8 8]", "(multfirst [8 3]) -> [8 8]", "(multfirst [7]) -> [7]", "(multfirst []) -> []", "(multfirst [9 1 7]) -> [9 9 9]", "(multfirst [5 6 1 8 2]) -> [5 5 5 5 5]", "(multfirst [6 9 3]) -> [6 6 6]", "(multfirst [9 2 9 6 2]) -> [9 9 9 9 9]", "(multfirst [4 5 7 8 4]) -> [4 4 4 4 4]", "(multfirst [5 3 7]) -> [5 5 5]", "(multfirst [1 4 1 5 6]) -> [1 1 1 1 1]", "(multfirst [6 2]) -> [6 6]", "(multfirst [3 9 8]) -> [3 3 3]", "(multfirst []) -> []", "(multfirst [2]) -> [2]", "(multfirst [1 2 9]) -> [1 1 1]", "(multfirst [3 8 8]) -> [3 3 3]", "(multfirst [3 3]) -> [3 3]", "(multfirst [2 3 9 6 4]) -> [2 2 2 2 2]", "(multfirst [1 8 7 2]) -> [1 1 1 1]", "(multfirst []) -> []", "(multfirst [3 6]) -> [3 3]", "(multfirst [6]) -> [6]", "(multfirst [8 2 8 8 5]) -> [8 8 8 8 8]", "(multfirst []) -> []", "(multfirst [0 1]) -> [0 0]", "(multfirst [0]) -> [0]", "(multfirst [5]) -> [5]", "(multfirst [5 0 0 0 2]) -> [5 5 5 5 5]", "(multfirst [9]) -> [9]", "(multfirst [9]) -> [9]", "(multfirst [3 0 3 1 7]) -> [3 3 3 3 3]", "(multfirst [9 9]) -> [9 9]", "(multfirst [1 3 4 1 9]) -> [1 1 1 1 1]", "(multfirst [3 3 3 1]) -> [3 3 3 3]", "(multfirst [0 8 3 4 4]) -> [0 0 0 0 0]", "(multfirst [3 3 7]) -> [3 3 3]", "(multfirst []) -> []", "(multfirst [5 7 1 6]) -> [5 5 5 5]", "(multfirst []) -> []", "(multfirst [4]) -> [4]", "(multfirst [1 9 5]) -> [1 1 1]", "(multfirst []) -> []", "(multfirst [4 8 1 7 7]) -> [4 4 4 4 4]", "(multfirst [3 3 5 7]) -> [3 3 3 3]", "(multfirst [1 0 6]) -> [1 1 1]", "(multfirst [5]) -> [5]", "(multfirst [9 1]) -> [9 9]", "(multfirst [0]) -> [0]"]}
{"time": 0.027869, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [2 2]) -> [2 2]", "(multfirst [8 1 9 6 9]) -> [8 8 8 8 8]", "(multfirst [6 4 0]) -> [6 6 6]", "(multfirst [8 2 1 5 7]) -> [8 8 8 8 8]", "(multfirst []) -> []", "(multfirst [7 3 1 1 0]) -> [7 7 7 7 7]", "(multfirst [2 8]) -> [2 2]", "(multfirst [1 5]) -> [1 1]", "(multfirst [7 2 8 2 4]) -> [7 7 7 7 7]", "(multfirst [6 3 3 0 7]) -> [6 6 6 6 6]", "(multfirst [1 8 2 7 1]) -> [1 1 1 1 1]", "(multfirst [4 6]) -> [4 4]", "(multfirst [8 6 2 8]) -> [8 8 8 8]", "(multfirst [1 8 4]) -> [1 1 1]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [2 0 1]) -> [2 2 2]", "(multfirst [2 1 2 5 1]) -> [2 2 2 2 2]", "(multfirst [4]) -> [4]", "(multfirst []) -> []", "(multfirst [8 7 1 3 1]) -> [8 8 8 8 8]", "(multfirst [5 0 7 8 4]) -> [5 5 5 5 5]", "(multfirst [2 0]) -> [2 2]", "(multfirst [1 0 5 4 7]) -> [1 1 1 1 1]", "(multfirst [8]) -> [8]", "(multfirst [9 2]) -> [9 9]", "(multfirst [0]) -> [0]", "(multfirst [4 1 4 8 0]) -> [4 4 4 4 4]", "(multfirst [0 8 0]) -> [0 0 0]", "(multfirst [5 0 2 2 8]) -> [5 5 5 5 5]", "(multfirst [6 1]) -> [6 6]", "(multfirst []) -> []", "(multfirst [8 8]) -> [8 8]", "(multfirst []) -> []", "(multfirst [3 0 2 9 7]) -> [3 3 3 3 3]", "(multfirst []) -> []", "(multfirst [4 0 5 1 0]) -> [4 4 4 4 4]", "(multfirst [2 3 5]) -> [2 2 2]", "(multfirst [6 0 4 7 4]) -> [6 6 6 6 6]", "(multfirst [1 5]) -> [1 1]", "(multfirst [1 4]) -> [1 1]", "(multfirst []) -> []", "(multfirst [6 1]) -> [6 6]", "(multfirst [9]) -> [9]", "(multfirst [0 2 5 7 6]) -> [0 0 0 0 0]", "(multfirst [9 2 7 1]) -> [9 9 9 9]", "(multfirst [0 3]) -> [0 0]", "(multfirst [7 7 6 0 9]) -> [7 7 7 7 7]", "(multfirst []) -> []"]}
{"time": 0.027689, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [6 9 4 0 6]) -> [6 6 6 6 6]", "(multfirst [0 9 1 1]) -> [0 0 0 0]", "(multfirst [0]) -> [0]", "(multfirst [1 1 7 2 5]) -> [1 1 1 1 1]", "(multfirst [0 9 3 7 8]) -> [0 0 0 0 0]", "(multfirst [0 3]) -> [0 0]", "(multfirst [9 3 2 4]) -> [9 9 9 9]", "(multfirst [7 9]) -> [7 7]", "(multfirst [1 6 8]) -> [1 1 1]", "(multfirst [1 2 1 6]) -> [1 1 1 1]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [6 9 3 6]) -> [6 6 6 6]", "(multfirst [4 1]) -> [4 4]", "(multfirst [0 3 2 0 0]) -> [0 0 0 0 0]", "(multfirst [2 7 6]) -> [2 2 2]", "(multfirst [1]) -> [1]", "(multfirst [9 3 1]) -> [9 9 9]", "(multfirst [0 9 7 6 0]) -> [0 0 0 0 0]", "(multfirst [9]) -> [9]", "(multfirst [8 3]) -> [8 8]", "(multfirst [7 7 5 9]) -> [7 7 7 7]", "(multfirst [6 9 8]) -> [6 6 6]", "(multfirst [4 5 1]) -> [4 4 4]", "(multfirst [9 9 1]) -> [9 9 9]", "(multfirst [3 7]) -> [3 3]", "(multfirst [5 7 5]) -> [5 5 5]", "(multfirst [9]) -> [9]", "(multfirst []) -> []", "(multfirst [2 5 2]) -> [2 2 2]", "(multfirst [9 2 9]) -> [9 9 9]", "(multfirst [2]) -> [2]", "(multfirst [2 2]) -> [2 2]", "(multfirst [3 8 3 2 9]) -> [3 3 3 3 3]", "(multfirst [9 8 4 8]) -> [9 9 9 9]", "(multfirst [3 3 7]) -> [3 3 3]", "(multfirst [3 4]) -> [3 3]", "(multfirst [3]) -> [3]", "(multfirst [3 3 9]) -> [3 3 3]", "(multfirst [3 6 5 0 6]) -> [3 3 3 3 3]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7 1 1]) -> [7 7 7]", "(multfirst [1 4]) -> [1 1]", "(multfirst [5 1 9 8]) -> [5 5 5 5]", "(multfirst [7 6]) -> [7 7]", "(multfirst []) -> []", "(multfirst [1 7 0 3]) -> [1 1 1 1]"]}
{"time": 0.029225, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst []) -> []", "(multfirst [4 8 9 0 8]) -> [4 4 4 4 4]", "(multfirst [2 4 8 1 3]) -> [2 2 2 2 2]", "(multfirst []) -> []", "(multfirst [7 4 9]) -> [7 7 7]", "(multfirst [2 6 1 5]) -> [2 2 2 2]", "(multfirst [4 3 0 8]) -> [4 4 4 4]", "(multfirst [6 1 7 7 5]) -> [6 6 6 6 6]", "(multfirst [2 6]) -> [2 2]", "(multfirst [4 0]) -> [4 4]", "(multfirst [3 9 8 5]) -> [3 3 3 3]", "(multfirst [9 9 4 1]) -> [9 9 9 9]", "(multfirst []) -> []", "(multfirst [3 2 7]) -> [3 3 3]", "(multfirst [4 1 0 7]) -> [4 4 4 4]", "(multfirst [0 4 5 8]) -> [0 0 0 0]", "(multfirst []) -> []", "(multfirst [4 5]) -> [4 4]", "(multfirst []) -> []", "(multfirst [3 0]) -> [3 3]", "(multfirst [1 3 9 7 7]) -> [1 1 1 1 1]", "(multfirst [7 1]) -> [7 7]", "(multfirst [6 9 8 5 3]) -> [6 6 6 6 6]", "(multfirst [6 3 3 4]) -> [6 6 6 6]", "(multfirst [0 9 8 5 4]) -> [0 0 0 0 0]", "(multfirst [8 0 8]) -> [8 8 8]", "(multfirst [5]) -> [5]", "(multfirst [1 2 2 1]) -> [1 1 1 1]", "(multfirst [9 0 4 8 0]) -> [9 9 9 9 9]", "(multfirst [1 2]) -> [1 1]", "(multfirst [6 4]) -> [6 6]", "(multfirst [8 2 0 2]) -> [8 8 8 8]", "(multfirst [4 1 2 3 0]) -> [4 4 4 4 4]", "(multfirst [4 5 2 8]) -> [4 4 4 4]", "(multfirst [3 0 6 6]) -> [3 3 3 3]", "(multfirst [8]) -> [8]", "(multfirst []) -> []", "(multfirst [5]) -> [5]", "(multfirst [0 8]) -> [0 0]", "(multfirst [9]) -> [9]", "(multfirst [2 0 5 4 6]) -> [2 2 2 2 2]", "(multfirst [7 6]) -> [7 7]", "(multfirst [5 6 4 0]) -> [5 5 5 5]", "(multfirst [3 8]) -> [3 3]", "(multfirst [8 8 5 2]) -> [8 8 8 8]", "(multfirst [7 7 8 0]) -> [7 7 7 7]", "(multfirst [6]) -> [6]", "(multfirst [5 2 8]) -> [5 5 5]", "(multfirst [1 8 2 9]) -> [1 1 1 1]"]}
{"time": 0.027125, "name": "multfirst", "solution": "(let multfirst (let a (lambda (b) (map b (lambda (c) (car b)))) _) _)", "examples": ["(multfirst [1 0 6 2]) -> [1 1 1 1]", "(multfirst [8 0 3 6]) -> [8 8 8 8]", "(multfirst [3 5 2]) -> [3 3 3]", "(multfirst [0 5]) -> [0 0]", "(multfirst []) -> []", "(multfirst [8]) -> [8]", "(multfirst [2]) -> [2]", "(multfirst [7 3]) -> [7 7]", "(multfirst [7 7]) -> [7 7]", "(multfirst [7 2 0 4]) -> [7 7 7 7]", "(multfirst [0]) -> [0]", "(multfirst []) -> []", "(multfirst [2 0 6]) -> [2 2 2]", "(multfirst []) -> []", "(multfirst [8 0 4 0]) -> [8 8 8 8]", "(multfirst [7 6 6 7]) -> [7 7 7 7]", "(multfirst [9 6 5 8 0]) -> [9 9 9 9 9]", "(multfirst [9 3 6 8]) -> [9 9 9 9]", "(multfirst [1 7 9]) -> [1 1 1]", "(multfirst [2 0 1]) -> [2 2 2]", "(multfirst [3 4 2 9 3]) -> [3 3 3 3 3]", "(multfirst [7 0 5 1 7]) -> [7 7 7 7 7]", "(multfirst []) -> []", "(multfirst [1 2 1]) -> [1 1 1]", "(multfirst [8]) -> [8]", "(multfirst [6 4]) -> [6 6]", "(multfirst []) -> []", "(multfirst [6 5]) -> [6 6]", "(multfirst []) -> []", "(multfirst [1 0]) -> [1 1]", "(multfirst [8 1 4 1 8]) -> [8 8 8 8 8]", "(multfirst [5 2 4]) -> [5 5 5]", "(multfirst [3 3 6 1]) -> [3 3 3 3]", "(multfirst [8 9 2]) -> [8 8 8]", "(multfirst [6 8 2]) -> [6 6 6]", "(multfirst [7 6 6 0]) -> [7 7 7 7]", "(multfirst [6 6 4 3 3]) -> [6 6 6 6 6]", "(multfirst [3 3]) -> [3 3]", "(multfirst []) -> []", "(multfirst [2 5]) -> [2 2]", "(multfirst [1 7 4 2]) -> [1 1 1 1]", "(multfirst [4]) -> [4]", "(multfirst [5]) -> [5]", "(multfirst [8 6 7 3]) -> [8 8 8 8]", "(multfirst [2 9]) -> [2 2]", "(multfirst []) -> []", "(multfirst []) -> []", "(multfirst [7 5 3 9 8]) -> [7 7 7 7 7]", "(multfirst [2 4]) -> [2 2]"]}
